

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue Aug 16 01:38:36 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,delta=2
    58                           	psect	text43,local,class=CODE,merge=1,delta=2
    59                           	psect	text44,local,class=CODE,merge=1,delta=2
    60                           	psect	text45,local,class=CODE,merge=1,delta=2
    61                           	psect	intentry,global,class=CODE,delta=2
    62                           	psect	text47,local,class=CODE,merge=1,delta=2
    63                           	dabs	1,0x7E,2
    64  0000                     	;# 
    65  0001                     	;# 
    66  0002                     	;# 
    67  0003                     	;# 
    68  0004                     	;# 
    69  0005                     	;# 
    70  0006                     	;# 
    71  0007                     	;# 
    72  0008                     	;# 
    73  0009                     	;# 
    74  000A                     	;# 
    75  000B                     	;# 
    76  000C                     	;# 
    77  000D                     	;# 
    78  000E                     	;# 
    79  0011                     	;# 
    80  0012                     	;# 
    81  0013                     	;# 
    82  0014                     	;# 
    83  0015                     	;# 
    84  0016                     	;# 
    85  0016                     	;# 
    86  0017                     	;# 
    87  0018                     	;# 
    88  0019                     	;# 
    89  001A                     	;# 
    90  001B                     	;# 
    91  001C                     	;# 
    92  001E                     	;# 
    93  001F                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0094                     	;# 
   101  0095                     	;# 
   102  0096                     	;# 
   103  0097                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009A                     	;# 
   107  009B                     	;# 
   108  009B                     	;# 
   109  009C                     	;# 
   110  009D                     	;# 
   111  009E                     	;# 
   112  010C                     	;# 
   113  010D                     	;# 
   114  010E                     	;# 
   115  0111                     	;# 
   116  0112                     	;# 
   117  0113                     	;# 
   118  0114                     	;# 
   119  0115                     	;# 
   120  0116                     	;# 
   121  0117                     	;# 
   122  0118                     	;# 
   123  0119                     	;# 
   124  011A                     	;# 
   125  011B                     	;# 
   126  011D                     	;# 
   127  011E                     	;# 
   128  018C                     	;# 
   129  018D                     	;# 
   130  018E                     	;# 
   131  0191                     	;# 
   132  0191                     	;# 
   133  0192                     	;# 
   134  0193                     	;# 
   135  0193                     	;# 
   136  0193                     	;# 
   137  0194                     	;# 
   138  0195                     	;# 
   139  0196                     	;# 
   140  0199                     	;# 
   141  019A                     	;# 
   142  019B                     	;# 
   143  019B                     	;# 
   144  019C                     	;# 
   145  019D                     	;# 
   146  019E                     	;# 
   147  019F                     	;# 
   148  020C                     	;# 
   149  020D                     	;# 
   150  020E                     	;# 
   151  0211                     	;# 
   152  0211                     	;# 
   153  0212                     	;# 
   154  0212                     	;# 
   155  0213                     	;# 
   156  0213                     	;# 
   157  0214                     	;# 
   158  0214                     	;# 
   159  0215                     	;# 
   160  0215                     	;# 
   161  0215                     	;# 
   162  0216                     	;# 
   163  0216                     	;# 
   164  0217                     	;# 
   165  0217                     	;# 
   166  0219                     	;# 
   167  021A                     	;# 
   168  021B                     	;# 
   169  021C                     	;# 
   170  021D                     	;# 
   171  021E                     	;# 
   172  021F                     	;# 
   173  0291                     	;# 
   174  0291                     	;# 
   175  0292                     	;# 
   176  0293                     	;# 
   177  0294                     	;# 
   178  0295                     	;# 
   179  0295                     	;# 
   180  0296                     	;# 
   181  0298                     	;# 
   182  0298                     	;# 
   183  0299                     	;# 
   184  029A                     	;# 
   185  029B                     	;# 
   186  029C                     	;# 
   187  029D                     	;# 
   188  029E                     	;# 
   189  0311                     	;# 
   190  0311                     	;# 
   191  0312                     	;# 
   192  0313                     	;# 
   193  0318                     	;# 
   194  0318                     	;# 
   195  0319                     	;# 
   196  031A                     	;# 
   197  038C                     	;# 
   198  038D                     	;# 
   199  038E                     	;# 
   200  0391                     	;# 
   201  0392                     	;# 
   202  0393                     	;# 
   203  0394                     	;# 
   204  0395                     	;# 
   205  0396                     	;# 
   206  039A                     	;# 
   207  039C                     	;# 
   208  039D                     	;# 
   209  039E                     	;# 
   210  039F                     	;# 
   211  0415                     	;# 
   212  0416                     	;# 
   213  0417                     	;# 
   214  041C                     	;# 
   215  041D                     	;# 
   216  041E                     	;# 
   217  0FE4                     	;# 
   218  0FE5                     	;# 
   219  0FE6                     	;# 
   220  0FE7                     	;# 
   221  0FE8                     	;# 
   222  0FE9                     	;# 
   223  0FEA                     	;# 
   224  0FEB                     	;# 
   225  0FED                     	;# 
   226  0FEE                     	;# 
   227  0FEF                     	;# 
   228  0000                     	;# 
   229  0001                     	;# 
   230  0002                     	;# 
   231  0003                     	;# 
   232  0004                     	;# 
   233  0005                     	;# 
   234  0006                     	;# 
   235  0007                     	;# 
   236  0008                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000D                     	;# 
   242  000E                     	;# 
   243  0011                     	;# 
   244  0012                     	;# 
   245  0013                     	;# 
   246  0014                     	;# 
   247  0015                     	;# 
   248  0016                     	;# 
   249  0016                     	;# 
   250  0017                     	;# 
   251  0018                     	;# 
   252  0019                     	;# 
   253  001A                     	;# 
   254  001B                     	;# 
   255  001C                     	;# 
   256  001E                     	;# 
   257  001F                     	;# 
   258  008C                     	;# 
   259  008D                     	;# 
   260  008E                     	;# 
   261  0091                     	;# 
   262  0092                     	;# 
   263  0093                     	;# 
   264  0094                     	;# 
   265  0095                     	;# 
   266  0096                     	;# 
   267  0097                     	;# 
   268  0098                     	;# 
   269  0099                     	;# 
   270  009A                     	;# 
   271  009B                     	;# 
   272  009B                     	;# 
   273  009C                     	;# 
   274  009D                     	;# 
   275  009E                     	;# 
   276  010C                     	;# 
   277  010D                     	;# 
   278  010E                     	;# 
   279  0111                     	;# 
   280  0112                     	;# 
   281  0113                     	;# 
   282  0114                     	;# 
   283  0115                     	;# 
   284  0116                     	;# 
   285  0117                     	;# 
   286  0118                     	;# 
   287  0119                     	;# 
   288  011A                     	;# 
   289  011B                     	;# 
   290  011D                     	;# 
   291  011E                     	;# 
   292  018C                     	;# 
   293  018D                     	;# 
   294  018E                     	;# 
   295  0191                     	;# 
   296  0191                     	;# 
   297  0192                     	;# 
   298  0193                     	;# 
   299  0193                     	;# 
   300  0193                     	;# 
   301  0194                     	;# 
   302  0195                     	;# 
   303  0196                     	;# 
   304  0199                     	;# 
   305  019A                     	;# 
   306  019B                     	;# 
   307  019B                     	;# 
   308  019C                     	;# 
   309  019D                     	;# 
   310  019E                     	;# 
   311  019F                     	;# 
   312  020C                     	;# 
   313  020D                     	;# 
   314  020E                     	;# 
   315  0211                     	;# 
   316  0211                     	;# 
   317  0212                     	;# 
   318  0212                     	;# 
   319  0213                     	;# 
   320  0213                     	;# 
   321  0214                     	;# 
   322  0214                     	;# 
   323  0215                     	;# 
   324  0215                     	;# 
   325  0215                     	;# 
   326  0216                     	;# 
   327  0216                     	;# 
   328  0217                     	;# 
   329  0217                     	;# 
   330  0219                     	;# 
   331  021A                     	;# 
   332  021B                     	;# 
   333  021C                     	;# 
   334  021D                     	;# 
   335  021E                     	;# 
   336  021F                     	;# 
   337  0291                     	;# 
   338  0291                     	;# 
   339  0292                     	;# 
   340  0293                     	;# 
   341  0294                     	;# 
   342  0295                     	;# 
   343  0295                     	;# 
   344  0296                     	;# 
   345  0298                     	;# 
   346  0298                     	;# 
   347  0299                     	;# 
   348  029A                     	;# 
   349  029B                     	;# 
   350  029C                     	;# 
   351  029D                     	;# 
   352  029E                     	;# 
   353  0311                     	;# 
   354  0311                     	;# 
   355  0312                     	;# 
   356  0313                     	;# 
   357  0318                     	;# 
   358  0318                     	;# 
   359  0319                     	;# 
   360  031A                     	;# 
   361  038C                     	;# 
   362  038D                     	;# 
   363  038E                     	;# 
   364  0391                     	;# 
   365  0392                     	;# 
   366  0393                     	;# 
   367  0394                     	;# 
   368  0395                     	;# 
   369  0396                     	;# 
   370  039A                     	;# 
   371  039C                     	;# 
   372  039D                     	;# 
   373  039E                     	;# 
   374  039F                     	;# 
   375  0415                     	;# 
   376  0416                     	;# 
   377  0417                     	;# 
   378  041C                     	;# 
   379  041D                     	;# 
   380  041E                     	;# 
   381  0FE4                     	;# 
   382  0FE5                     	;# 
   383  0FE6                     	;# 
   384  0FE7                     	;# 
   385  0FE8                     	;# 
   386  0FE9                     	;# 
   387  0FEA                     	;# 
   388  0FEB                     	;# 
   389  0FED                     	;# 
   390  0FEE                     	;# 
   391  0FEF                     	;# 
   392  0000                     	;# 
   393  0001                     	;# 
   394  0002                     	;# 
   395  0003                     	;# 
   396  0004                     	;# 
   397  0005                     	;# 
   398  0006                     	;# 
   399  0007                     	;# 
   400  0008                     	;# 
   401  0009                     	;# 
   402  000A                     	;# 
   403  000B                     	;# 
   404  000C                     	;# 
   405  000D                     	;# 
   406  000E                     	;# 
   407  0011                     	;# 
   408  0012                     	;# 
   409  0013                     	;# 
   410  0014                     	;# 
   411  0015                     	;# 
   412  0016                     	;# 
   413  0016                     	;# 
   414  0017                     	;# 
   415  0018                     	;# 
   416  0019                     	;# 
   417  001A                     	;# 
   418  001B                     	;# 
   419  001C                     	;# 
   420  001E                     	;# 
   421  001F                     	;# 
   422  008C                     	;# 
   423  008D                     	;# 
   424  008E                     	;# 
   425  0091                     	;# 
   426  0092                     	;# 
   427  0093                     	;# 
   428  0094                     	;# 
   429  0095                     	;# 
   430  0096                     	;# 
   431  0097                     	;# 
   432  0098                     	;# 
   433  0099                     	;# 
   434  009A                     	;# 
   435  009B                     	;# 
   436  009B                     	;# 
   437  009C                     	;# 
   438  009D                     	;# 
   439  009E                     	;# 
   440  010C                     	;# 
   441  010D                     	;# 
   442  010E                     	;# 
   443  0111                     	;# 
   444  0112                     	;# 
   445  0113                     	;# 
   446  0114                     	;# 
   447  0115                     	;# 
   448  0116                     	;# 
   449  0117                     	;# 
   450  0118                     	;# 
   451  0119                     	;# 
   452  011A                     	;# 
   453  011B                     	;# 
   454  011D                     	;# 
   455  011E                     	;# 
   456  018C                     	;# 
   457  018D                     	;# 
   458  018E                     	;# 
   459  0191                     	;# 
   460  0191                     	;# 
   461  0192                     	;# 
   462  0193                     	;# 
   463  0193                     	;# 
   464  0193                     	;# 
   465  0194                     	;# 
   466  0195                     	;# 
   467  0196                     	;# 
   468  0199                     	;# 
   469  019A                     	;# 
   470  019B                     	;# 
   471  019B                     	;# 
   472  019C                     	;# 
   473  019D                     	;# 
   474  019E                     	;# 
   475  019F                     	;# 
   476  020C                     	;# 
   477  020D                     	;# 
   478  020E                     	;# 
   479  0211                     	;# 
   480  0211                     	;# 
   481  0212                     	;# 
   482  0212                     	;# 
   483  0213                     	;# 
   484  0213                     	;# 
   485  0214                     	;# 
   486  0214                     	;# 
   487  0215                     	;# 
   488  0215                     	;# 
   489  0215                     	;# 
   490  0216                     	;# 
   491  0216                     	;# 
   492  0217                     	;# 
   493  0217                     	;# 
   494  0219                     	;# 
   495  021A                     	;# 
   496  021B                     	;# 
   497  021C                     	;# 
   498  021D                     	;# 
   499  021E                     	;# 
   500  021F                     	;# 
   501  0291                     	;# 
   502  0291                     	;# 
   503  0292                     	;# 
   504  0293                     	;# 
   505  0294                     	;# 
   506  0295                     	;# 
   507  0295                     	;# 
   508  0296                     	;# 
   509  0298                     	;# 
   510  0298                     	;# 
   511  0299                     	;# 
   512  029A                     	;# 
   513  029B                     	;# 
   514  029C                     	;# 
   515  029D                     	;# 
   516  029E                     	;# 
   517  0311                     	;# 
   518  0311                     	;# 
   519  0312                     	;# 
   520  0313                     	;# 
   521  0318                     	;# 
   522  0318                     	;# 
   523  0319                     	;# 
   524  031A                     	;# 
   525  038C                     	;# 
   526  038D                     	;# 
   527  038E                     	;# 
   528  0391                     	;# 
   529  0392                     	;# 
   530  0393                     	;# 
   531  0394                     	;# 
   532  0395                     	;# 
   533  0396                     	;# 
   534  039A                     	;# 
   535  039C                     	;# 
   536  039D                     	;# 
   537  039E                     	;# 
   538  039F                     	;# 
   539  0415                     	;# 
   540  0416                     	;# 
   541  0417                     	;# 
   542  041C                     	;# 
   543  041D                     	;# 
   544  041E                     	;# 
   545  0FE4                     	;# 
   546  0FE5                     	;# 
   547  0FE6                     	;# 
   548  0FE7                     	;# 
   549  0FE8                     	;# 
   550  0FE9                     	;# 
   551  0FEA                     	;# 
   552  0FEB                     	;# 
   553  0FED                     	;# 
   554  0FEE                     	;# 
   555  0FEF                     	;# 
   556  0000                     	;# 
   557  0001                     	;# 
   558  0002                     	;# 
   559  0003                     	;# 
   560  0004                     	;# 
   561  0005                     	;# 
   562  0006                     	;# 
   563  0007                     	;# 
   564  0008                     	;# 
   565  0009                     	;# 
   566  000A                     	;# 
   567  000B                     	;# 
   568  000C                     	;# 
   569  000D                     	;# 
   570  000E                     	;# 
   571  0011                     	;# 
   572  0012                     	;# 
   573  0013                     	;# 
   574  0014                     	;# 
   575  0015                     	;# 
   576  0016                     	;# 
   577  0016                     	;# 
   578  0017                     	;# 
   579  0018                     	;# 
   580  0019                     	;# 
   581  001A                     	;# 
   582  001B                     	;# 
   583  001C                     	;# 
   584  001E                     	;# 
   585  001F                     	;# 
   586  008C                     	;# 
   587  008D                     	;# 
   588  008E                     	;# 
   589  0091                     	;# 
   590  0092                     	;# 
   591  0093                     	;# 
   592  0094                     	;# 
   593  0095                     	;# 
   594  0096                     	;# 
   595  0097                     	;# 
   596  0098                     	;# 
   597  0099                     	;# 
   598  009A                     	;# 
   599  009B                     	;# 
   600  009B                     	;# 
   601  009C                     	;# 
   602  009D                     	;# 
   603  009E                     	;# 
   604  010C                     	;# 
   605  010D                     	;# 
   606  010E                     	;# 
   607  0111                     	;# 
   608  0112                     	;# 
   609  0113                     	;# 
   610  0114                     	;# 
   611  0115                     	;# 
   612  0116                     	;# 
   613  0117                     	;# 
   614  0118                     	;# 
   615  0119                     	;# 
   616  011A                     	;# 
   617  011B                     	;# 
   618  011D                     	;# 
   619  011E                     	;# 
   620  018C                     	;# 
   621  018D                     	;# 
   622  018E                     	;# 
   623  0191                     	;# 
   624  0191                     	;# 
   625  0192                     	;# 
   626  0193                     	;# 
   627  0193                     	;# 
   628  0193                     	;# 
   629  0194                     	;# 
   630  0195                     	;# 
   631  0196                     	;# 
   632  0199                     	;# 
   633  019A                     	;# 
   634  019B                     	;# 
   635  019B                     	;# 
   636  019C                     	;# 
   637  019D                     	;# 
   638  019E                     	;# 
   639  019F                     	;# 
   640  020C                     	;# 
   641  020D                     	;# 
   642  020E                     	;# 
   643  0211                     	;# 
   644  0211                     	;# 
   645  0212                     	;# 
   646  0212                     	;# 
   647  0213                     	;# 
   648  0213                     	;# 
   649  0214                     	;# 
   650  0214                     	;# 
   651  0215                     	;# 
   652  0215                     	;# 
   653  0215                     	;# 
   654  0216                     	;# 
   655  0216                     	;# 
   656  0217                     	;# 
   657  0217                     	;# 
   658  0219                     	;# 
   659  021A                     	;# 
   660  021B                     	;# 
   661  021C                     	;# 
   662  021D                     	;# 
   663  021E                     	;# 
   664  021F                     	;# 
   665  0291                     	;# 
   666  0291                     	;# 
   667  0292                     	;# 
   668  0293                     	;# 
   669  0294                     	;# 
   670  0295                     	;# 
   671  0295                     	;# 
   672  0296                     	;# 
   673  0298                     	;# 
   674  0298                     	;# 
   675  0299                     	;# 
   676  029A                     	;# 
   677  029B                     	;# 
   678  029C                     	;# 
   679  029D                     	;# 
   680  029E                     	;# 
   681  0311                     	;# 
   682  0311                     	;# 
   683  0312                     	;# 
   684  0313                     	;# 
   685  0318                     	;# 
   686  0318                     	;# 
   687  0319                     	;# 
   688  031A                     	;# 
   689  038C                     	;# 
   690  038D                     	;# 
   691  038E                     	;# 
   692  0391                     	;# 
   693  0392                     	;# 
   694  0393                     	;# 
   695  0394                     	;# 
   696  0395                     	;# 
   697  0396                     	;# 
   698  039A                     	;# 
   699  039C                     	;# 
   700  039D                     	;# 
   701  039E                     	;# 
   702  039F                     	;# 
   703  0415                     	;# 
   704  0416                     	;# 
   705  0417                     	;# 
   706  041C                     	;# 
   707  041D                     	;# 
   708  041E                     	;# 
   709  0FE4                     	;# 
   710  0FE5                     	;# 
   711  0FE6                     	;# 
   712  0FE7                     	;# 
   713  0FE8                     	;# 
   714  0FE9                     	;# 
   715  0FEA                     	;# 
   716  0FEB                     	;# 
   717  0FED                     	;# 
   718  0FEE                     	;# 
   719  0FEF                     	;# 
   720  0000                     	;# 
   721  0001                     	;# 
   722  0002                     	;# 
   723  0003                     	;# 
   724  0004                     	;# 
   725  0005                     	;# 
   726  0006                     	;# 
   727  0007                     	;# 
   728  0008                     	;# 
   729  0009                     	;# 
   730  000A                     	;# 
   731  000B                     	;# 
   732  000C                     	;# 
   733  000D                     	;# 
   734  000E                     	;# 
   735  0011                     	;# 
   736  0012                     	;# 
   737  0013                     	;# 
   738  0014                     	;# 
   739  0015                     	;# 
   740  0016                     	;# 
   741  0016                     	;# 
   742  0017                     	;# 
   743  0018                     	;# 
   744  0019                     	;# 
   745  001A                     	;# 
   746  001B                     	;# 
   747  001C                     	;# 
   748  001E                     	;# 
   749  001F                     	;# 
   750  008C                     	;# 
   751  008D                     	;# 
   752  008E                     	;# 
   753  0091                     	;# 
   754  0092                     	;# 
   755  0093                     	;# 
   756  0094                     	;# 
   757  0095                     	;# 
   758  0096                     	;# 
   759  0097                     	;# 
   760  0098                     	;# 
   761  0099                     	;# 
   762  009A                     	;# 
   763  009B                     	;# 
   764  009B                     	;# 
   765  009C                     	;# 
   766  009D                     	;# 
   767  009E                     	;# 
   768  010C                     	;# 
   769  010D                     	;# 
   770  010E                     	;# 
   771  0111                     	;# 
   772  0112                     	;# 
   773  0113                     	;# 
   774  0114                     	;# 
   775  0115                     	;# 
   776  0116                     	;# 
   777  0117                     	;# 
   778  0118                     	;# 
   779  0119                     	;# 
   780  011A                     	;# 
   781  011B                     	;# 
   782  011D                     	;# 
   783  011E                     	;# 
   784  018C                     	;# 
   785  018D                     	;# 
   786  018E                     	;# 
   787  0191                     	;# 
   788  0191                     	;# 
   789  0192                     	;# 
   790  0193                     	;# 
   791  0193                     	;# 
   792  0193                     	;# 
   793  0194                     	;# 
   794  0195                     	;# 
   795  0196                     	;# 
   796  0199                     	;# 
   797  019A                     	;# 
   798  019B                     	;# 
   799  019B                     	;# 
   800  019C                     	;# 
   801  019D                     	;# 
   802  019E                     	;# 
   803  019F                     	;# 
   804  020C                     	;# 
   805  020D                     	;# 
   806  020E                     	;# 
   807  0211                     	;# 
   808  0211                     	;# 
   809  0212                     	;# 
   810  0212                     	;# 
   811  0213                     	;# 
   812  0213                     	;# 
   813  0214                     	;# 
   814  0214                     	;# 
   815  0215                     	;# 
   816  0215                     	;# 
   817  0215                     	;# 
   818  0216                     	;# 
   819  0216                     	;# 
   820  0217                     	;# 
   821  0217                     	;# 
   822  0219                     	;# 
   823  021A                     	;# 
   824  021B                     	;# 
   825  021C                     	;# 
   826  021D                     	;# 
   827  021E                     	;# 
   828  021F                     	;# 
   829  0291                     	;# 
   830  0291                     	;# 
   831  0292                     	;# 
   832  0293                     	;# 
   833  0294                     	;# 
   834  0295                     	;# 
   835  0295                     	;# 
   836  0296                     	;# 
   837  0298                     	;# 
   838  0298                     	;# 
   839  0299                     	;# 
   840  029A                     	;# 
   841  029B                     	;# 
   842  029C                     	;# 
   843  029D                     	;# 
   844  029E                     	;# 
   845  0311                     	;# 
   846  0311                     	;# 
   847  0312                     	;# 
   848  0313                     	;# 
   849  0318                     	;# 
   850  0318                     	;# 
   851  0319                     	;# 
   852  031A                     	;# 
   853  038C                     	;# 
   854  038D                     	;# 
   855  038E                     	;# 
   856  0391                     	;# 
   857  0392                     	;# 
   858  0393                     	;# 
   859  0394                     	;# 
   860  0395                     	;# 
   861  0396                     	;# 
   862  039A                     	;# 
   863  039C                     	;# 
   864  039D                     	;# 
   865  039E                     	;# 
   866  039F                     	;# 
   867  0415                     	;# 
   868  0416                     	;# 
   869  0417                     	;# 
   870  041C                     	;# 
   871  041D                     	;# 
   872  041E                     	;# 
   873  0FE4                     	;# 
   874  0FE5                     	;# 
   875  0FE6                     	;# 
   876  0FE7                     	;# 
   877  0FE8                     	;# 
   878  0FE9                     	;# 
   879  0FEA                     	;# 
   880  0FEB                     	;# 
   881  0FED                     	;# 
   882  0FEE                     	;# 
   883  0FEF                     	;# 
   884  0000                     	;# 
   885  0001                     	;# 
   886  0002                     	;# 
   887  0003                     	;# 
   888  0004                     	;# 
   889  0005                     	;# 
   890  0006                     	;# 
   891  0007                     	;# 
   892  0008                     	;# 
   893  0009                     	;# 
   894  000A                     	;# 
   895  000B                     	;# 
   896  000C                     	;# 
   897  000D                     	;# 
   898  000E                     	;# 
   899  0011                     	;# 
   900  0012                     	;# 
   901  0013                     	;# 
   902  0014                     	;# 
   903  0015                     	;# 
   904  0016                     	;# 
   905  0016                     	;# 
   906  0017                     	;# 
   907  0018                     	;# 
   908  0019                     	;# 
   909  001A                     	;# 
   910  001B                     	;# 
   911  001C                     	;# 
   912  001E                     	;# 
   913  001F                     	;# 
   914  008C                     	;# 
   915  008D                     	;# 
   916  008E                     	;# 
   917  0091                     	;# 
   918  0092                     	;# 
   919  0093                     	;# 
   920  0094                     	;# 
   921  0095                     	;# 
   922  0096                     	;# 
   923  0097                     	;# 
   924  0098                     	;# 
   925  0099                     	;# 
   926  009A                     	;# 
   927  009B                     	;# 
   928  009B                     	;# 
   929  009C                     	;# 
   930  009D                     	;# 
   931  009E                     	;# 
   932  010C                     	;# 
   933  010D                     	;# 
   934  010E                     	;# 
   935  0111                     	;# 
   936  0112                     	;# 
   937  0113                     	;# 
   938  0114                     	;# 
   939  0115                     	;# 
   940  0116                     	;# 
   941  0117                     	;# 
   942  0118                     	;# 
   943  0119                     	;# 
   944  011A                     	;# 
   945  011B                     	;# 
   946  011D                     	;# 
   947  011E                     	;# 
   948  018C                     	;# 
   949  018D                     	;# 
   950  018E                     	;# 
   951  0191                     	;# 
   952  0191                     	;# 
   953  0192                     	;# 
   954  0193                     	;# 
   955  0193                     	;# 
   956  0193                     	;# 
   957  0194                     	;# 
   958  0195                     	;# 
   959  0196                     	;# 
   960  0199                     	;# 
   961  019A                     	;# 
   962  019B                     	;# 
   963  019B                     	;# 
   964  019C                     	;# 
   965  019D                     	;# 
   966  019E                     	;# 
   967  019F                     	;# 
   968  020C                     	;# 
   969  020D                     	;# 
   970  020E                     	;# 
   971  0211                     	;# 
   972  0211                     	;# 
   973  0212                     	;# 
   974  0212                     	;# 
   975  0213                     	;# 
   976  0213                     	;# 
   977  0214                     	;# 
   978  0214                     	;# 
   979  0215                     	;# 
   980  0215                     	;# 
   981  0215                     	;# 
   982  0216                     	;# 
   983  0216                     	;# 
   984  0217                     	;# 
   985  0217                     	;# 
   986  0219                     	;# 
   987  021A                     	;# 
   988  021B                     	;# 
   989  021C                     	;# 
   990  021D                     	;# 
   991  021E                     	;# 
   992  021F                     	;# 
   993  0291                     	;# 
   994  0291                     	;# 
   995  0292                     	;# 
   996  0293                     	;# 
   997  0294                     	;# 
   998  0295                     	;# 
   999  0295                     	;# 
  1000  0296                     	;# 
  1001  0298                     	;# 
  1002  0298                     	;# 
  1003  0299                     	;# 
  1004  029A                     	;# 
  1005  029B                     	;# 
  1006  029C                     	;# 
  1007  029D                     	;# 
  1008  029E                     	;# 
  1009  0311                     	;# 
  1010  0311                     	;# 
  1011  0312                     	;# 
  1012  0313                     	;# 
  1013  0318                     	;# 
  1014  0318                     	;# 
  1015  0319                     	;# 
  1016  031A                     	;# 
  1017  038C                     	;# 
  1018  038D                     	;# 
  1019  038E                     	;# 
  1020  0391                     	;# 
  1021  0392                     	;# 
  1022  0393                     	;# 
  1023  0394                     	;# 
  1024  0395                     	;# 
  1025  0396                     	;# 
  1026  039A                     	;# 
  1027  039C                     	;# 
  1028  039D                     	;# 
  1029  039E                     	;# 
  1030  039F                     	;# 
  1031  0415                     	;# 
  1032  0416                     	;# 
  1033  0417                     	;# 
  1034  041C                     	;# 
  1035  041D                     	;# 
  1036  041E                     	;# 
  1037  0FE4                     	;# 
  1038  0FE5                     	;# 
  1039  0FE6                     	;# 
  1040  0FE7                     	;# 
  1041  0FE8                     	;# 
  1042  0FE9                     	;# 
  1043  0FEA                     	;# 
  1044  0FEB                     	;# 
  1045  0FED                     	;# 
  1046  0FEE                     	;# 
  1047  0FEF                     	;# 
  1048  0000                     	;# 
  1049  0001                     	;# 
  1050  0002                     	;# 
  1051  0003                     	;# 
  1052  0004                     	;# 
  1053  0005                     	;# 
  1054  0006                     	;# 
  1055  0007                     	;# 
  1056  0008                     	;# 
  1057  0009                     	;# 
  1058  000A                     	;# 
  1059  000B                     	;# 
  1060  000C                     	;# 
  1061  000D                     	;# 
  1062  000E                     	;# 
  1063  0011                     	;# 
  1064  0012                     	;# 
  1065  0013                     	;# 
  1066  0014                     	;# 
  1067  0015                     	;# 
  1068  0016                     	;# 
  1069  0016                     	;# 
  1070  0017                     	;# 
  1071  0018                     	;# 
  1072  0019                     	;# 
  1073  001A                     	;# 
  1074  001B                     	;# 
  1075  001C                     	;# 
  1076  001E                     	;# 
  1077  001F                     	;# 
  1078  008C                     	;# 
  1079  008D                     	;# 
  1080  008E                     	;# 
  1081  0091                     	;# 
  1082  0092                     	;# 
  1083  0093                     	;# 
  1084  0094                     	;# 
  1085  0095                     	;# 
  1086  0096                     	;# 
  1087  0097                     	;# 
  1088  0098                     	;# 
  1089  0099                     	;# 
  1090  009A                     	;# 
  1091  009B                     	;# 
  1092  009B                     	;# 
  1093  009C                     	;# 
  1094  009D                     	;# 
  1095  009E                     	;# 
  1096  010C                     	;# 
  1097  010D                     	;# 
  1098  010E                     	;# 
  1099  0111                     	;# 
  1100  0112                     	;# 
  1101  0113                     	;# 
  1102  0114                     	;# 
  1103  0115                     	;# 
  1104  0116                     	;# 
  1105  0117                     	;# 
  1106  0118                     	;# 
  1107  0119                     	;# 
  1108  011A                     	;# 
  1109  011B                     	;# 
  1110  011D                     	;# 
  1111  011E                     	;# 
  1112  018C                     	;# 
  1113  018D                     	;# 
  1114  018E                     	;# 
  1115  0191                     	;# 
  1116  0191                     	;# 
  1117  0192                     	;# 
  1118  0193                     	;# 
  1119  0193                     	;# 
  1120  0193                     	;# 
  1121  0194                     	;# 
  1122  0195                     	;# 
  1123  0196                     	;# 
  1124  0199                     	;# 
  1125  019A                     	;# 
  1126  019B                     	;# 
  1127  019B                     	;# 
  1128  019C                     	;# 
  1129  019D                     	;# 
  1130  019E                     	;# 
  1131  019F                     	;# 
  1132  020C                     	;# 
  1133  020D                     	;# 
  1134  020E                     	;# 
  1135  0211                     	;# 
  1136  0211                     	;# 
  1137  0212                     	;# 
  1138  0212                     	;# 
  1139  0213                     	;# 
  1140  0213                     	;# 
  1141  0214                     	;# 
  1142  0214                     	;# 
  1143  0215                     	;# 
  1144  0215                     	;# 
  1145  0215                     	;# 
  1146  0216                     	;# 
  1147  0216                     	;# 
  1148  0217                     	;# 
  1149  0217                     	;# 
  1150  0219                     	;# 
  1151  021A                     	;# 
  1152  021B                     	;# 
  1153  021C                     	;# 
  1154  021D                     	;# 
  1155  021E                     	;# 
  1156  021F                     	;# 
  1157  0291                     	;# 
  1158  0291                     	;# 
  1159  0292                     	;# 
  1160  0293                     	;# 
  1161  0294                     	;# 
  1162  0295                     	;# 
  1163  0295                     	;# 
  1164  0296                     	;# 
  1165  0298                     	;# 
  1166  0298                     	;# 
  1167  0299                     	;# 
  1168  029A                     	;# 
  1169  029B                     	;# 
  1170  029C                     	;# 
  1171  029D                     	;# 
  1172  029E                     	;# 
  1173  0311                     	;# 
  1174  0311                     	;# 
  1175  0312                     	;# 
  1176  0313                     	;# 
  1177  0318                     	;# 
  1178  0318                     	;# 
  1179  0319                     	;# 
  1180  031A                     	;# 
  1181  038C                     	;# 
  1182  038D                     	;# 
  1183  038E                     	;# 
  1184  0391                     	;# 
  1185  0392                     	;# 
  1186  0393                     	;# 
  1187  0394                     	;# 
  1188  0395                     	;# 
  1189  0396                     	;# 
  1190  039A                     	;# 
  1191  039C                     	;# 
  1192  039D                     	;# 
  1193  039E                     	;# 
  1194  039F                     	;# 
  1195  0415                     	;# 
  1196  0416                     	;# 
  1197  0417                     	;# 
  1198  041C                     	;# 
  1199  041D                     	;# 
  1200  041E                     	;# 
  1201  0FE4                     	;# 
  1202  0FE5                     	;# 
  1203  0FE6                     	;# 
  1204  0FE7                     	;# 
  1205  0FE8                     	;# 
  1206  0FE9                     	;# 
  1207  0FEA                     	;# 
  1208  0FEB                     	;# 
  1209  0FED                     	;# 
  1210  0FEE                     	;# 
  1211  0FEF                     	;# 
  1212                           
  1213                           	psect	idataBANK1
  1214  0003                     __pidataBANK1:	
  1215                           
  1216                           ;initializer for _Transmit_stall
  1217  0003  3401               	retlw	1
  1218                           
  1219                           	psect	stringtext
  1220  1000                     __pstringtext:	
  1221  1000                     _dpowers:	
  1222  1000  3401               	retlw	1
  1223  1001  3400               	retlw	0
  1224  1002  3400               	retlw	0
  1225  1003  3400               	retlw	0
  1226  1004  340A               	retlw	10
  1227  1005  3400               	retlw	0
  1228  1006  3400               	retlw	0
  1229  1007  3400               	retlw	0
  1230  1008  3464               	retlw	100
  1231  1009  3400               	retlw	0
  1232  100A  3400               	retlw	0
  1233  100B  3400               	retlw	0
  1234  100C  34E8               	retlw	232
  1235  100D  3403               	retlw	3
  1236  100E  3400               	retlw	0
  1237  100F  3400               	retlw	0
  1238  1010  3410               	retlw	16
  1239  1011  3427               	retlw	39
  1240  1012  3400               	retlw	0
  1241  1013  3400               	retlw	0
  1242  1014  34A0               	retlw	160
  1243  1015  3486               	retlw	134
  1244  1016  3401               	retlw	1
  1245  1017  3400               	retlw	0
  1246  1018  3440               	retlw	64
  1247  1019  3442               	retlw	66
  1248  101A  340F               	retlw	15
  1249  101B  3400               	retlw	0
  1250  101C  3480               	retlw	128
  1251  101D  3496               	retlw	150
  1252  101E  3498               	retlw	152
  1253  101F  3400               	retlw	0
  1254  1020  3400               	retlw	0
  1255  1021  34E1               	retlw	225
  1256  1022  34F5               	retlw	245
  1257  1023  3405               	retlw	5
  1258  1024  3400               	retlw	0
  1259  1025  34CA               	retlw	202
  1260  1026  349A               	retlw	154
  1261  1027  343B               	retlw	59
  1262  1028                     __end_of_dpowers:	
  1263  1028                     __npowers_:	
  1264  1028  3400               	retlw	0
  1265  1029  3480               	retlw	128
  1266  102A  343F               	retlw	63
  1267  102B  34CD               	retlw	205
  1268  102C  34CC               	retlw	204
  1269  102D  343D               	retlw	61
  1270  102E  34D7               	retlw	215
  1271  102F  3423               	retlw	35
  1272  1030  343C               	retlw	60
  1273  1031  3412               	retlw	18
  1274  1032  3483               	retlw	131
  1275  1033  343A               	retlw	58
  1276  1034  34B7               	retlw	183
  1277  1035  34D1               	retlw	209
  1278  1036  3438               	retlw	56
  1279  1037  34C6               	retlw	198
  1280  1038  3427               	retlw	39
  1281  1039  3437               	retlw	55
  1282  103A  3438               	retlw	56
  1283  103B  3486               	retlw	134
  1284  103C  3435               	retlw	53
  1285  103D  34C0               	retlw	192
  1286  103E  34D6               	retlw	214
  1287  103F  3433               	retlw	51
  1288  1040  34CC               	retlw	204
  1289  1041  342B               	retlw	43
  1290  1042  3432               	retlw	50
  1291  1043  3470               	retlw	112
  1292  1044  3489               	retlw	137
  1293  1045  3430               	retlw	48
  1294  1046  34E7               	retlw	231
  1295  1047  34DB               	retlw	219
  1296  1048  342E               	retlw	46
  1297  1049  34E5               	retlw	229
  1298  104A  343C               	retlw	60
  1299  104B  341E               	retlw	30
  1300  104C  3442               	retlw	66
  1301  104D  34A2               	retlw	162
  1302  104E  340D               	retlw	13
  1303  104F                     __end_of__npowers_:	
  1304  104F                     __powers_:	
  1305  104F  3400               	retlw	0
  1306  1050  3480               	retlw	128
  1307  1051  343F               	retlw	63
  1308  1052  3400               	retlw	0
  1309  1053  3420               	retlw	32
  1310  1054  3441               	retlw	65
  1311  1055  3400               	retlw	0
  1312  1056  34C8               	retlw	200
  1313  1057  3442               	retlw	66
  1314  1058  3400               	retlw	0
  1315  1059  347A               	retlw	122
  1316  105A  3444               	retlw	68
  1317  105B  3440               	retlw	64
  1318  105C  341C               	retlw	28
  1319  105D  3446               	retlw	70
  1320  105E  3450               	retlw	80
  1321  105F  34C3               	retlw	195
  1322  1060  3447               	retlw	71
  1323  1061  3424               	retlw	36
  1324  1062  3474               	retlw	116
  1325  1063  3449               	retlw	73
  1326  1064  3497               	retlw	151
  1327  1065  3418               	retlw	24
  1328  1066  344B               	retlw	75
  1329  1067  34BC               	retlw	188
  1330  1068  34BE               	retlw	190
  1331  1069  344C               	retlw	76
  1332  106A  346B               	retlw	107
  1333  106B  346E               	retlw	110
  1334  106C  344E               	retlw	78
  1335  106D  3403               	retlw	3
  1336  106E  3415               	retlw	21
  1337  106F  3450               	retlw	80
  1338  1070  3479               	retlw	121
  1339  1071  34AD               	retlw	173
  1340  1072  3460               	retlw	96
  1341  1073  34F3               	retlw	243
  1342  1074  3449               	retlw	73
  1343  1075  3471               	retlw	113
  1344  1076                     __end_of__powers_:	
  1345  000B                     _INTCON	set	11
  1346  000B                     _INTCONbits	set	11
  1347  0011                     _PIR1bits	set	17
  1348  000C                     _PORTAbits	set	12
  1349  000E                     _PORTCbits	set	14
  1350  001B                     _PR2	set	27
  1351  001C                     _T2CON	set	28
  1352  001C                     _T2CONbits	set	28
  1353  001A                     _TMR2	set	26
  1354  009D                     _ADCON0bits	set	157
  1355  009E                     _ADCON1bits	set	158
  1356  009B                     _ADRESL	set	155
  1357  0099                     _OSCCONbits	set	153
  1358  0091                     _PIE1bits	set	145
  1359  008C                     _TRISAbits	set	140
  1360  008E                     _TRISCbits	set	142
  1361  0117                     _FVRCONbits	set	279
  1362  018C                     _ANSELAbits	set	396
  1363  018E                     _ANSELCbits	set	398
  1364  019F                     _BAUDCON	set	415
  1365  0199                     _RCREG	set	409
  1366  019D                     _RCSTA	set	413
  1367  019D                     _RCSTAbits	set	413
  1368  019C                     _SPBRGH	set	412
  1369  019B                     _SPBRGL	set	411
  1370  019A                     _TXREG	set	410
  1371  019E                     _TXSTA	set	414
  1372  1076                     STR_4:	
  1373  1076  3441               	retlw	65	;'A'
  1374  1077  3454               	retlw	84	;'T'
  1375  1078  342B               	retlw	43	;'+'
  1376  1079  3444               	retlw	68	;'D'
  1377  107A  344D               	retlw	77	;'M'
  1378  107B  344F               	retlw	79	;'O'
  1379  107C  3453               	retlw	83	;'S'
  1380  107D  3445               	retlw	69	;'E'
  1381  107E  3454               	retlw	84	;'T'
  1382  107F  3447               	retlw	71	;'G'
  1383  1080  3452               	retlw	82	;'R'
  1384  1081  344F               	retlw	79	;'O'
  1385  1082  3455               	retlw	85	;'U'
  1386  1083  3450               	retlw	80	;'P'
  1387  1084  343D               	retlw	61	;'='
  1388  1085  3425               	retlw	37	;'%'
  1389  1086  3464               	retlw	100	;'d'
  1390  1087  342C               	retlw	44	;','
  1391  1088  3425               	retlw	37	;'%'
  1392  1089  3466               	retlw	102	;'f'
  1393  108A  342C               	retlw	44	;','
  1394  108B  3425               	retlw	37	;'%'
  1395  108C  3466               	retlw	102	;'f'
  1396  108D  342C               	retlw	44	;','
  1397  108E  3425               	retlw	37	;'%'
  1398  108F  3464               	retlw	100	;'d'
  1399  1090  342C               	retlw	44	;','
  1400  1091  3425               	retlw	37	;'%'
  1401  1092  3464               	retlw	100	;'d'
  1402  1093  342C               	retlw	44	;','
  1403  1094  3425               	retlw	37	;'%'
  1404  1095  3464               	retlw	100	;'d'
  1405  1096  342C               	retlw	44	;','
  1406  1097  3425               	retlw	37	;'%'
  1407  1098  3464               	retlw	100	;'d'
  1408  1099  3400               	retlw	0
  1409  109A                     STR_8:	
  1410  109A  3441               	retlw	65	;'A'
  1411  109B  3454               	retlw	84	;'T'
  1412  109C  342B               	retlw	43	;'+'
  1413  109D  3444               	retlw	68	;'D'
  1414  109E  344D               	retlw	77	;'M'
  1415  109F  344F               	retlw	79	;'O'
  1416  10A0  3453               	retlw	83	;'S'
  1417  10A1  3445               	retlw	69	;'E'
  1418  10A2  3454               	retlw	84	;'T'
  1419  10A3  344D               	retlw	77	;'M'
  1420  10A4  3449               	retlw	73	;'I'
  1421  10A5  3443               	retlw	67	;'C'
  1422  10A6  343D               	retlw	61	;'='
  1423  10A7  3425               	retlw	37	;'%'
  1424  10A8  3463               	retlw	99	;'c'
  1425  10A9  342C               	retlw	44	;','
  1426  10AA  3425               	retlw	37	;'%'
  1427  10AB  3463               	retlw	99	;'c'
  1428  10AC  342C               	retlw	44	;','
  1429  10AD  3425               	retlw	37	;'%'
  1430  10AE  3463               	retlw	99	;'c'
  1431  10AF  3400               	retlw	0
  1432  10B0                     STR_5:	
  1433  10B0  3441               	retlw	65	;'A'
  1434  10B1  3454               	retlw	84	;'T'
  1435  10B2  342B               	retlw	43	;'+'
  1436  10B3  3444               	retlw	68	;'D'
  1437  10B4  344D               	retlw	77	;'M'
  1438  10B5  344F               	retlw	79	;'O'
  1439  10B6  3441               	retlw	65	;'A'
  1440  10B7  3455               	retlw	85	;'U'
  1441  10B8  3454               	retlw	84	;'T'
  1442  10B9  344F               	retlw	79	;'O'
  1443  10BA  3450               	retlw	80	;'P'
  1444  10BB  344F               	retlw	79	;'O'
  1445  10BC  3457               	retlw	87	;'W'
  1446  10BD  3443               	retlw	67	;'C'
  1447  10BE  344F               	retlw	79	;'O'
  1448  10BF  344E               	retlw	78	;'N'
  1449  10C0  3454               	retlw	84	;'T'
  1450  10C1  3452               	retlw	82	;'R'
  1451  10C2  343D               	retlw	61	;'='
  1452  10C3  3425               	retlw	37	;'%'
  1453  10C4  3463               	retlw	99	;'c'
  1454  10C5  3400               	retlw	0
  1455  10C6                     STR_6:	
  1456  10C6  3441               	retlw	65	;'A'
  1457  10C7  3454               	retlw	84	;'T'
  1458  10C8  342B               	retlw	43	;'+'
  1459  10C9  3444               	retlw	68	;'D'
  1460  10CA  344D               	retlw	77	;'M'
  1461  10CB  344F               	retlw	79	;'O'
  1462  10CC  3453               	retlw	83	;'S'
  1463  10CD  3445               	retlw	69	;'E'
  1464  10CE  3454               	retlw	84	;'T'
  1465  10CF  3456               	retlw	86	;'V'
  1466  10D0  344F               	retlw	79	;'O'
  1467  10D1  344C               	retlw	76	;'L'
  1468  10D2  3455               	retlw	85	;'U'
  1469  10D3  344D               	retlw	77	;'M'
  1470  10D4  3445               	retlw	69	;'E'
  1471  10D5  343D               	retlw	61	;'='
  1472  10D6  3425               	retlw	37	;'%'
  1473  10D7  3463               	retlw	99	;'c'
  1474  10D8  3400               	retlw	0
  1475  10D9                     STR_2:	
  1476  10D9  3441               	retlw	65	;'A'
  1477  10DA  3454               	retlw	84	;'T'
  1478  10DB  342B               	retlw	43	;'+'
  1479  10DC  3444               	retlw	68	;'D'
  1480  10DD  344D               	retlw	77	;'M'
  1481  10DE  344F               	retlw	79	;'O'
  1482  10DF  3443               	retlw	67	;'C'
  1483  10E0  344F               	retlw	79	;'O'
  1484  10E1  344E               	retlw	78	;'N'
  1485  10E2  344E               	retlw	78	;'N'
  1486  10E3  3445               	retlw	69	;'E'
  1487  10E4  3443               	retlw	67	;'C'
  1488  10E5  3454               	retlw	84	;'T'
  1489  10E6  3400               	retlw	0
  1490  10E7                     STR_1:	
  1491  10E7  340D               	retlw	13
  1492  10E8  340A               	retlw	10
  1493  10E9  3400               	retlw	0
  1494  10E7                     
  1495                           ; #config settings
  1496  0000                     
  1497                           	psect	cinit
  1498  0018                     start_initialization:	
  1499  0018                     __initialization:	
  1500                           
  1501                           ; Clear objects allocated to COMMON
  1502  0018  01FC               	clrf	__pbssCOMMON& (0+127)
  1503                           
  1504                           ; Clear objects allocated to BANK1
  1505  0019  30A0               	movlw	low __pbssBANK1
  1506  001A  0084               	movwf	4
  1507  001B  3000               	movlw	high __pbssBANK1
  1508  001C  0085               	movwf	5
  1509  001D  3025               	movlw	37
  1510  001E  3195  2577  3180   	fcall	clear_ram0
  1511                           
  1512                           ; Clear objects allocated to BANK2
  1513  0021  3020               	movlw	low __pbssBANK2
  1514  0022  0084               	movwf	4
  1515  0023  3001               	movlw	high __pbssBANK2
  1516  0024  0085               	movwf	5
  1517  0025  301A               	movlw	26
  1518  0026  3195  2577  3180   	fcall	clear_ram0
  1519                           
  1520                           ; Initialize objects allocated to BANK1
  1521  0029  0021               	movlb	1	; select bank1
  1522  002A  3180  2003         	fcall	__pidataBANK1	;fetch initializer
  1523  002C  00E5               	movwf	__pdataBANK1& (0+127)
  1524  002D                     end_of_initialization:	
  1525                           ;End of C runtime variable initialization code
  1526                           
  1527  002D                     __end_of__initialization:	
  1528  002D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1529  002E  0020               	movlb	0
  1530  002F  3196  2E0B         	ljmp	_main	;jump to C main() function
  1531                           
  1532                           	psect	bssCOMMON
  1533  007C                     __pbssCOMMON:	
  1534  007C                     _Talking:	
  1535  007C                     	ds	1
  1536                           
  1537                           	psect	bssBANK1
  1538  00A0                     __pbssBANK1:	
  1539  00A0                     _input_buffer:	
  1540  00A0                     	ds	26
  1541  00BA                     _Battery:	
  1542  00BA                     	ds	3
  1543  00BD                     _count:	
  1544  00BD                     	ds	2
  1545  00BF                     _ticker:	
  1546  00BF                     	ds	2
  1547  00C1                     _time:	
  1548  00C1                     	ds	2
  1549  00C3                     _Mode:	
  1550  00C3                     	ds	1
  1551  00C4                     _Shutdown:	
  1552  00C4                     	ds	1
  1553                           
  1554                           	psect	dataBANK1
  1555  00E5                     __pdataBANK1:	
  1556  00E5                     _Transmit_stall:	
  1557  00E5                     	ds	1
  1558                           
  1559                           	psect	bssBANK2
  1560  0120                     __pbssBANK2:	
  1561  0120                     _output_buffer:	
  1562  0120                     	ds	26
  1563                           
  1564                           	psect	clrtext
  1565  1577                     clear_ram0:	
  1566                           ;	Called with FSR0 containing the base address, and
  1567                           ;	WREG with the size to clear
  1568                           
  1569  1577  0064               	clrwdt	;clear the watchdog before getting into this loop
  1570  1578                     clrloop0:	
  1571  1578  0180               	clrf	0	;clear RAM location pointed to by FSR
  1572  1579  3101               	addfsr 0,1
  1573  157A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1574  157B  2D78               	goto	clrloop0	;have we reached the end yet?
  1575  157C  3400               	retlw	0	;all done for this memory range, return
  1576                           
  1577                           	psect	cstackBANK1
  1578  00C5                     __pcstackBANK1:	
  1579  00C5                     ??_printf:	
  1580                           
  1581                           ; 1 bytes @ 0x0
  1582  00C5                     	ds	6
  1583  00CB                     _printf$1242:	
  1584                           
  1585                           ; 3 bytes @ 0x6
  1586  00CB                     	ds	3
  1587  00CE                     printf@flag:	
  1588                           
  1589                           ; 2 bytes @ 0x9
  1590  00CE                     	ds	2
  1591  00D0                     printf@ap:	
  1592                           
  1593                           ; 1 bytes @ 0xB
  1594  00D0                     	ds	1
  1595  00D1                     printf@prec:	
  1596                           
  1597                           ; 2 bytes @ 0xC
  1598  00D1                     	ds	2
  1599  00D3                     printf@val:	
  1600                           
  1601                           ; 4 bytes @ 0xE
  1602  00D3                     	ds	4
  1603  00D7                     printf@exp:	
  1604                           
  1605                           ; 2 bytes @ 0x12
  1606  00D7                     	ds	2
  1607  00D9                     printf@tmpval:	
  1608                           
  1609                           ; 4 bytes @ 0x14
  1610  00D9                     	ds	4
  1611  00DD                     printf@fval:	
  1612                           
  1613                           ; 3 bytes @ 0x18
  1614  00DD                     	ds	3
  1615  00E0                     printf@c:	
  1616                           
  1617                           ; 1 bytes @ 0x1B
  1618  00E0                     	ds	1
  1619  00E1                     ??_SetVOX:	
  1620  00E1                     ??_SetMIC:	
  1621                           ; 1 bytes @ 0x1C
  1622                           
  1623  00E1                     SetVolume@volume:	
  1624                           ; 1 bytes @ 0x1C
  1625                           
  1626                           
  1627                           ; 1 bytes @ 0x1C
  1628  00E1                     	ds	4
  1629                           
  1630                           	psect	cstackCOMMON
  1631  0070                     __pcstackCOMMON:	
  1632  0070                     ?_Start:	
  1633  0070                     ?_RadioBegin:	
  1634                           ; 1 bytes @ 0x0
  1635                           
  1636  0070                     ?_LEDOff:	
  1637                           ; 1 bytes @ 0x0
  1638                           
  1639  0070                     ?_RadioOperation:	
  1640                           ; 1 bytes @ 0x0
  1641                           
  1642  0070                     ?_ADC_Initialize:	
  1643                           ; 1 bytes @ 0x0
  1644                           
  1645  0070                     ?_EUSART1_Initialize:	
  1646                           ; 1 bytes @ 0x0
  1647                           
  1648  0070                     ?_INTERRUPT_Initialize:	
  1649                           ; 1 bytes @ 0x0
  1650                           
  1651  0070                     ?_TMR2_Initialize:	
  1652                           ; 1 bytes @ 0x0
  1653                           
  1654  0070                     ?_TMR2_ISR:	
  1655                           ; 1 bytes @ 0x0
  1656                           
  1657  0070                     ??_TMR2_ISR:	
  1658                           ; 1 bytes @ 0x0
  1659                           
  1660  0070                     ?_SetCommandMode:	
  1661                           ; 1 bytes @ 0x0
  1662                           
  1663  0070                     ?_SetFrequency:	
  1664                           ; 1 bytes @ 0x0
  1665                           
  1666  0070                     ?_SetPowerSave:	
  1667                           ; 1 bytes @ 0x0
  1668                           
  1669  0070                     ?_SetVolume:	
  1670                           ; 1 bytes @ 0x0
  1671                           
  1672  0070                     ?_SetADCChannel:	
  1673                           ; 1 bytes @ 0x0
  1674                           
  1675  0070                     ?_INTERRUPT_InterruptManager:	
  1676                           ; 1 bytes @ 0x0
  1677                           
  1678  0070                     ??_INTERRUPT_InterruptManager:	
  1679                           ; 1 bytes @ 0x0
  1680                           
  1681  0070                     ?_ReadCharger:	
  1682                           ; 1 bytes @ 0x0
  1683                           
  1684  0070                     ?_ClearTicker:	
  1685                           ; 1 bytes @ 0x0
  1686                           
  1687  0070                     ?_EUSART_Write:	
  1688                           ; 1 bytes @ 0x0
  1689                           
  1690  0070                     ?_putch:	
  1691                           ; 1 bytes @ 0x0
  1692                           
  1693  0070                     ?_SR_FRSTalk:	
  1694                           ; 1 bytes @ 0x0
  1695                           
  1696  0070                     ?_SR_FRSPowerDown:	
  1697                           ; 1 bytes @ 0x0
  1698                           
  1699  0070                     ?_SR_FRSStart:	
  1700                           ; 1 bytes @ 0x0
  1701                           
  1702  0070                     ?_main:	
  1703                           ; 1 bytes @ 0x0
  1704                           
  1705  0070                     ?_GetTicker:	
  1706                           ; 2 bytes @ 0x0
  1707                           
  1708                           
  1709                           ; 2 bytes @ 0x0
  1710  0070                     	ds	1
  1711  0071                     ?___ftge:	
  1712  0071                     ??_Start:	
  1713                           ; 1 bit 
  1714                           
  1715  0071                     ??_LEDOff:	
  1716                           ; 1 bytes @ 0x1
  1717                           
  1718  0071                     ?_Delay:	
  1719                           ; 1 bytes @ 0x1
  1720                           
  1721  0071                     ??_ADC_Initialize:	
  1722                           ; 1 bytes @ 0x1
  1723                           
  1724  0071                     ??_EUSART1_Initialize:	
  1725                           ; 1 bytes @ 0x1
  1726                           
  1727  0071                     ??_INTERRUPT_Initialize:	
  1728                           ; 1 bytes @ 0x1
  1729                           
  1730  0071                     ??_TMR2_Initialize:	
  1731                           ; 1 bytes @ 0x1
  1732                           
  1733  0071                     ??_SetADCChannel:	
  1734                           ; 1 bytes @ 0x1
  1735                           
  1736  0071                     ??_ReadCharger:	
  1737                           ; 1 bytes @ 0x1
  1738                           
  1739  0071                     ??_ClearTicker:	
  1740                           ; 1 bytes @ 0x1
  1741                           
  1742  0071                     ??_GetTicker:	
  1743                           ; 1 bytes @ 0x1
  1744                           
  1745  0071                     ??_EUSART_Write:	
  1746                           ; 1 bytes @ 0x1
  1747                           
  1748  0071                     ??_SR_FRSTalk:	
  1749                           ; 1 bytes @ 0x1
  1750                           
  1751  0071                     ??_SR_FRSPowerDown:	
  1752                           ; 1 bytes @ 0x1
  1753                           
  1754  0071                     ?___awmod:	
  1755                           ; 1 bytes @ 0x1
  1756                           
  1757  0071                     ?___ftpack:	
  1758                           ; 2 bytes @ 0x1
  1759                           
  1760  0071                     ?___ftneg:	
  1761                           ; 3 bytes @ 0x1
  1762                           
  1763  0071                     ?__tdiv_to_l_:	
  1764                           ; 3 bytes @ 0x1
  1765                           
  1766  0071                     ?__div_to_l_:	
  1767                           ; 4 bytes @ 0x1
  1768                           
  1769  0071                     ?___lldiv:	
  1770                           ; 4 bytes @ 0x1
  1771                           
  1772  0071                     EUSART_Write@txData:	
  1773                           ; 4 bytes @ 0x1
  1774                           
  1775  0071                     SetADCChannel@ch:	
  1776                           ; 1 bytes @ 0x1
  1777                           
  1778  0071                     Delay@wait:	
  1779                           ; 1 bytes @ 0x1
  1780                           
  1781  0071                     ___awmod@divisor:	
  1782                           ; 2 bytes @ 0x1
  1783                           
  1784  0071                     __div_to_l_@f1:	
  1785                           ; 2 bytes @ 0x1
  1786                           
  1787  0071                     ___ftpack@arg:	
  1788                           ; 3 bytes @ 0x1
  1789                           
  1790  0071                     __tdiv_to_l_@f1:	
  1791                           ; 3 bytes @ 0x1
  1792                           
  1793  0071                     ___ftge@ff1:	
  1794                           ; 3 bytes @ 0x1
  1795                           
  1796  0071                     ___ftneg@f1:	
  1797                           ; 3 bytes @ 0x1
  1798                           
  1799  0071                     ___lldiv@divisor:	
  1800                           ; 3 bytes @ 0x1
  1801                           
  1802                           
  1803                           ; 4 bytes @ 0x1
  1804  0071                     	ds	1
  1805  0072                     ??_putch:	
  1806  0072                     ?_ReadVoltage:	
  1807                           ; 1 bytes @ 0x2
  1808                           
  1809  0072                     putch@txData:	
  1810                           ; 2 bytes @ 0x2
  1811                           
  1812                           
  1813                           ; 1 bytes @ 0x2
  1814  0072                     	ds	1
  1815  0073                     ??_Delay:	
  1816  0073                     ___awmod@dividend:	
  1817                           ; 1 bytes @ 0x3
  1818                           
  1819                           
  1820                           ; 2 bytes @ 0x3
  1821  0073                     	ds	1
  1822  0074                     ??___ftneg:	
  1823  0074                     ___ftpack@exp:	
  1824                           ; 1 bytes @ 0x4
  1825                           
  1826  0074                     Delay@x:	
  1827                           ; 1 bytes @ 0x4
  1828                           
  1829  0074                     __div_to_l_@f2:	
  1830                           ; 2 bytes @ 0x4
  1831                           
  1832  0074                     __tdiv_to_l_@f2:	
  1833                           ; 3 bytes @ 0x4
  1834                           
  1835  0074                     ___ftge@ff2:	
  1836                           ; 3 bytes @ 0x4
  1837                           
  1838                           
  1839                           ; 3 bytes @ 0x4
  1840  0074                     	ds	1
  1841  0075                     ??_ReadVoltage:	
  1842  0075                     ??___awmod:	
  1843                           ; 1 bytes @ 0x5
  1844                           
  1845  0075                     ReadVoltage@ch:	
  1846                           ; 1 bytes @ 0x5
  1847                           
  1848  0075                     ___ftpack@sign:	
  1849                           ; 1 bytes @ 0x5
  1850                           
  1851  0075                     ___lldiv@dividend:	
  1852                           ; 1 bytes @ 0x5
  1853                           
  1854                           
  1855                           ; 4 bytes @ 0x5
  1856  0075                     	ds	1
  1857  0076                     ??___ftpack:	
  1858  0076                     ___awmod@counter:	
  1859                           ; 1 bytes @ 0x6
  1860                           
  1861                           
  1862                           ; 1 bytes @ 0x6
  1863  0076                     	ds	1
  1864  0077                     ??__tdiv_to_l_:	
  1865  0077                     ??___ftge:	
  1866                           ; 1 bytes @ 0x7
  1867                           
  1868  0077                     ___awmod@sign:	
  1869                           ; 1 bytes @ 0x7
  1870                           
  1871                           
  1872                           ; 1 bytes @ 0x7
  1873  0077                     	ds	1
  1874  0078                     ?___awdiv:	
  1875  0078                     ___awdiv@divisor:	
  1876                           ; 2 bytes @ 0x8
  1877                           
  1878                           
  1879                           ; 2 bytes @ 0x8
  1880  0078                     	ds	1
  1881  0079                     ??___lldiv:	
  1882  0079                     ??___lltoft:	
  1883                           ; 1 bytes @ 0x9
  1884                           
  1885  0079                     ?___awtoft:	
  1886                           ; 1 bytes @ 0x9
  1887                           
  1888  0079                     ___awtoft@c:	
  1889                           ; 3 bytes @ 0x9
  1890                           
  1891                           
  1892                           ; 2 bytes @ 0x9
  1893  0079                     	ds	1
  1894  007A                     ??___llmod:	
  1895  007A                     ___lltoft@exp:	
  1896                           ; 1 bytes @ 0xA
  1897                           
  1898  007A                     ___awdiv@dividend:	
  1899                           ; 1 bytes @ 0xA
  1900                           
  1901                           
  1902                           ; 2 bytes @ 0xA
  1903  007A                     	ds	1
  1904  007B                     ___llmod@counter:	
  1905                           
  1906                           ; 1 bytes @ 0xB
  1907  007B                     	ds	1
  1908  007C                     ??_RadioBegin:	
  1909  007C                     ??_SetCommandMode:	
  1910                           ; 1 bytes @ 0xC
  1911                           
  1912  007C                     ??_SetFrequency:	
  1913                           ; 1 bytes @ 0xC
  1914                           
  1915  007C                     ??_SetPowerSave:	
  1916                           ; 1 bytes @ 0xC
  1917                           
  1918  007C                     ??_main:	
  1919                           ; 1 bytes @ 0xC
  1920                           
  1921  007C                     ??_SR_FRSStart:	
  1922                           ; 1 bytes @ 0xC
  1923                           
  1924  007C                     ??___wmul:	
  1925                           ; 1 bytes @ 0xC
  1926                           
  1927  007C                     ??___ftsub:	
  1928                           ; 1 bytes @ 0xC
  1929                           
  1930                           
  1931                           	psect	cstackBANK0
  1932  0020                     __pcstackBANK0:	
  1933                           ; 1 bytes @ 0xC
  1934                           
  1935  0020                     ??__div_to_l_:	
  1936  0020                     ??___awdiv:	
  1937                           ; 1 bytes @ 0x0
  1938                           
  1939  0020                     ??___awtoft:	
  1940                           ; 1 bytes @ 0x0
  1941                           
  1942  0020                     ?___lltoft:	
  1943                           ; 1 bytes @ 0x0
  1944                           
  1945  0020                     __tdiv_to_l_@quot:	
  1946                           ; 3 bytes @ 0x0
  1947                           
  1948  0020                     ___lldiv@quotient:	
  1949                           ; 4 bytes @ 0x0
  1950                           
  1951  0020                     ___lltoft@c:	
  1952                           ; 4 bytes @ 0x0
  1953                           
  1954                           
  1955                           ; 4 bytes @ 0x0
  1956  0020                     	ds	1
  1957  0021                     ___awdiv@counter:	
  1958                           
  1959                           ; 1 bytes @ 0x1
  1960  0021                     	ds	1
  1961  0022                     ___awdiv@sign:	
  1962  0022                     ___awtoft@sign:	
  1963                           ; 1 bytes @ 0x2
  1964                           
  1965                           
  1966                           ; 1 bytes @ 0x2
  1967  0022                     	ds	1
  1968  0023                     ___awdiv@quotient:	
  1969                           
  1970                           ; 2 bytes @ 0x3
  1971  0023                     	ds	1
  1972  0024                     __tdiv_to_l_@cntr:	
  1973  0024                     ___lldiv@counter:	
  1974                           ; 1 bytes @ 0x4
  1975                           
  1976                           
  1977                           ; 1 bytes @ 0x4
  1978  0024                     	ds	1
  1979  0025                     ?___wmul:	
  1980  0025                     ?___llmod:	
  1981                           ; 2 bytes @ 0x5
  1982                           
  1983  0025                     __tdiv_to_l_@exp1:	
  1984                           ; 4 bytes @ 0x5
  1985                           
  1986  0025                     ___wmul@multiplier:	
  1987                           ; 1 bytes @ 0x5
  1988                           
  1989  0025                     ___llmod@divisor:	
  1990                           ; 2 bytes @ 0x5
  1991                           
  1992                           
  1993                           ; 4 bytes @ 0x5
  1994  0025                     	ds	2
  1995  0027                     ___wmul@multiplicand:	
  1996                           
  1997                           ; 2 bytes @ 0x7
  1998  0027                     	ds	1
  1999  0028                     __div_to_l_@quot:	
  2000                           
  2001                           ; 4 bytes @ 0x8
  2002  0028                     	ds	1
  2003  0029                     ___wmul@product:	
  2004  0029                     ___llmod@dividend:	
  2005                           ; 2 bytes @ 0x9
  2006                           
  2007                           
  2008                           ; 4 bytes @ 0x9
  2009  0029                     	ds	2
  2010  002B                     ?___ftmul:	
  2011  002B                     ___ftmul@f1:	
  2012                           ; 3 bytes @ 0xB
  2013                           
  2014                           
  2015                           ; 3 bytes @ 0xB
  2016  002B                     	ds	1
  2017  002C                     __div_to_l_@cntr:	
  2018                           
  2019                           ; 1 bytes @ 0xC
  2020  002C                     	ds	1
  2021  002D                     __div_to_l_@exp1:	
  2022                           
  2023                           ; 1 bytes @ 0xD
  2024  002D                     	ds	1
  2025  002E                     ___ftmul@f2:	
  2026                           
  2027                           ; 3 bytes @ 0xE
  2028  002E                     	ds	3
  2029  0031                     ??___ftmul:	
  2030                           
  2031                           ; 1 bytes @ 0x11
  2032  0031                     	ds	4
  2033  0035                     ___ftmul@exp:	
  2034                           
  2035                           ; 1 bytes @ 0x15
  2036  0035                     	ds	1
  2037  0036                     ___ftmul@f3_as_product:	
  2038                           
  2039                           ; 3 bytes @ 0x16
  2040  0036                     	ds	3
  2041  0039                     ___ftmul@cntr:	
  2042                           
  2043                           ; 1 bytes @ 0x19
  2044  0039                     	ds	1
  2045  003A                     ___ftmul@sign:	
  2046                           
  2047                           ; 1 bytes @ 0x1A
  2048  003A                     	ds	1
  2049  003B                     ?_fround:	
  2050  003B                     ?_scale:	
  2051                           ; 3 bytes @ 0x1B
  2052                           
  2053  003B                     ?___ftdiv:	
  2054                           ; 3 bytes @ 0x1B
  2055                           
  2056  003B                     ___ftdiv@f2:	
  2057                           ; 3 bytes @ 0x1B
  2058                           
  2059                           
  2060                           ; 3 bytes @ 0x1B
  2061  003B                     	ds	3
  2062  003E                     ??_fround:	
  2063  003E                     ??_scale:	
  2064                           ; 1 bytes @ 0x1E
  2065                           
  2066  003E                     ___ftdiv@f1:	
  2067                           ; 1 bytes @ 0x1E
  2068                           
  2069                           
  2070                           ; 3 bytes @ 0x1E
  2071  003E                     	ds	2
  2072  0040                     _scale$1241:	
  2073                           
  2074                           ; 3 bytes @ 0x20
  2075  0040                     	ds	1
  2076  0041                     ??___ftdiv:	
  2077                           
  2078                           ; 1 bytes @ 0x21
  2079  0041                     	ds	1
  2080  0042                     _fround$1240:	
  2081                           
  2082                           ; 3 bytes @ 0x22
  2083  0042                     	ds	1
  2084  0043                     scale@scl:	
  2085                           
  2086                           ; 1 bytes @ 0x23
  2087  0043                     	ds	1
  2088  0044                     ?___fttol:	
  2089  0044                     ___fttol@f1:	
  2090                           ; 4 bytes @ 0x24
  2091                           
  2092                           
  2093                           ; 3 bytes @ 0x24
  2094  0044                     	ds	1
  2095  0045                     ___ftdiv@cntr:	
  2096  0045                     _fround$1239:	
  2097                           ; 1 bytes @ 0x25
  2098                           
  2099                           
  2100                           ; 3 bytes @ 0x25
  2101  0045                     	ds	1
  2102  0046                     ___ftdiv@f3:	
  2103                           
  2104                           ; 3 bytes @ 0x26
  2105  0046                     	ds	2
  2106  0048                     ??___fttol:	
  2107  0048                     fround@prec:	
  2108                           ; 1 bytes @ 0x28
  2109                           
  2110                           
  2111                           ; 1 bytes @ 0x28
  2112  0048                     	ds	1
  2113  0049                     ?___ftadd:	
  2114  0049                     ___ftdiv@exp:	
  2115                           ; 3 bytes @ 0x29
  2116                           
  2117  0049                     ___ftadd@f1:	
  2118                           ; 1 bytes @ 0x29
  2119                           
  2120                           
  2121                           ; 3 bytes @ 0x29
  2122  0049                     	ds	1
  2123  004A                     ___ftdiv@sign:	
  2124                           
  2125                           ; 1 bytes @ 0x2A
  2126  004A                     	ds	1
  2127  004B                     ??_RadioOperation:	
  2128                           
  2129                           ; 1 bytes @ 0x2B
  2130  004B                     	ds	1
  2131  004C                     ___fttol@sign1:	
  2132  004C                     ___ftadd@f2:	
  2133                           ; 1 bytes @ 0x2C
  2134                           
  2135                           
  2136                           ; 3 bytes @ 0x2C
  2137  004C                     	ds	1
  2138  004D                     ___fttol@lval:	
  2139                           
  2140                           ; 4 bytes @ 0x2D
  2141  004D                     	ds	2
  2142  004F                     ??___ftadd:	
  2143                           
  2144                           ; 1 bytes @ 0x2F
  2145  004F                     	ds	2
  2146  0051                     ___fttol@exp1:	
  2147                           
  2148                           ; 1 bytes @ 0x31
  2149  0051                     	ds	2
  2150  0053                     ___ftadd@sign:	
  2151                           
  2152                           ; 1 bytes @ 0x33
  2153  0053                     	ds	1
  2154  0054                     ___ftadd@exp2:	
  2155                           
  2156                           ; 1 bytes @ 0x34
  2157  0054                     	ds	1
  2158  0055                     ___ftadd@exp1:	
  2159                           
  2160                           ; 1 bytes @ 0x35
  2161  0055                     	ds	1
  2162  0056                     ?___ftsub:	
  2163  0056                     ___ftsub@f2:	
  2164                           ; 3 bytes @ 0x36
  2165                           
  2166                           
  2167                           ; 3 bytes @ 0x36
  2168  0056                     	ds	3
  2169  0059                     ___ftsub@f1:	
  2170                           
  2171                           ; 3 bytes @ 0x39
  2172  0059                     	ds	3
  2173  005C                     ?_printf:	
  2174  005C                     printf@f:	
  2175                           ; 2 bytes @ 0x3C
  2176                           
  2177                           
  2178                           ; 2 bytes @ 0x3C
  2179  005C                     	ds	18
  2180  006E                     ??_SetVolume:	
  2181  006E                     ?_SetVOX:	
  2182                           ; 1 bytes @ 0x4E
  2183                           
  2184  006E                     ?_SetMIC:	
  2185                           ; 1 bytes @ 0x4E
  2186                           
  2187  006E                     SetMIC@scram:	
  2188                           ; 1 bytes @ 0x4E
  2189                           
  2190  006E                     SetVOX@volume:	
  2191                           ; 1 bytes @ 0x4E
  2192                           
  2193                           
  2194                           ; 2 bytes @ 0x4E
  2195  006E                     	ds	1
  2196  006F                     SetMIC@volume:	
  2197                           
  2198                           ; 1 bytes @ 0x4F
  2199  006F                     	ds	1
  2200                           
  2201                           	psect	maintext
  2202  160B                     __pmaintext:	
  2203 ;;
  2204 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2205 ;;
  2206 ;; *************** function _main *****************
  2207 ;; Defined at:
  2208 ;;		line 16 in file "Main.c"
  2209 ;; Parameters:    Size  Location     Type
  2210 ;;		None
  2211 ;; Auto vars:     Size  Location     Type
  2212 ;;		None
  2213 ;; Return value:  Size  Location     Type
  2214 ;;                  2   12[None  ] int 
  2215 ;; Registers used:
  2216 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2217 ;; Tracked objects:
  2218 ;;		On entry : B1F/0
  2219 ;;		On exit  : 0/0
  2220 ;;		Unchanged: 0/0
  2221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2225 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2226 ;;Total ram usage:        0 bytes
  2227 ;; Hardware stack levels required when called:    9
  2228 ;; This function calls:
  2229 ;;		_Delay
  2230 ;;		_LEDOff
  2231 ;;		_RadioBegin
  2232 ;;		_RadioOperation
  2233 ;;		_Start
  2234 ;; This function is called by:
  2235 ;;		Startup code after reset
  2236 ;; This function uses a non-reentrant model
  2237 ;;
  2238                           
  2239                           
  2240                           ;psect for function _main
  2241  160B                     _main:	
  2242                           
  2243                           ;Main.c: 17: Start();
  2244                           
  2245                           ;incstack = 0
  2246                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2247  160B  3196  26E9  3196   	fcall	_Start
  2248                           
  2249                           ;Main.c: 18: RadioBegin();
  2250  160E  3187  27FD  3196   	fcall	_RadioBegin
  2251                           
  2252                           ;Main.c: 20: LEDOff();
  2253  1611  3195  256D  3196   	fcall	_LEDOff
  2254  1614                     l3850:	
  2255                           ;Main.c: 21: while(1){
  2256                           
  2257                           
  2258                           ;Main.c: 22: RadioOperation();
  2259  1614  318B  239B  3196   	fcall	_RadioOperation
  2260                           
  2261                           ;Main.c: 23: Delay(100);
  2262  1617  3064               	movlw	100
  2263  1618  00F1               	movwf	Delay@wait
  2264  1619  3000               	movlw	0
  2265  161A  00F2               	movwf	Delay@wait+1
  2266  161B  3196  261F  3196   	fcall	_Delay
  2267  161E  2E14               	goto	l3850
  2268  161F                     __end_of_main:	
  2269                           ;Main.c: 24: }
  2270                           ;Main.c: 25: return 0;
  2271                           ;	Return value of _main is never used
  2272                           
  2273                           
  2274                           	psect	text1
  2275  16E9                     __ptext1:	
  2276 ;; *************** function _Start *****************
  2277 ;; Defined at:
  2278 ;;		line 28 in file "Function.c"
  2279 ;; Parameters:    Size  Location     Type
  2280 ;;		None
  2281 ;; Auto vars:     Size  Location     Type
  2282 ;;		None
  2283 ;; Return value:  Size  Location     Type
  2284 ;;                  1    wreg      void 
  2285 ;; Registers used:
  2286 ;;		wreg, status,2, status,0, pclath, cstack
  2287 ;; Tracked objects:
  2288 ;;		On entry : 0/0
  2289 ;;		On exit  : 0/0
  2290 ;;		Unchanged: 0/0
  2291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2296 ;;Total ram usage:        0 bytes
  2297 ;; Hardware stack levels used:    1
  2298 ;; Hardware stack levels required when called:    3
  2299 ;; This function calls:
  2300 ;;		_ADC_Initialize
  2301 ;;		_EUSART1_Initialize
  2302 ;;		_INTERRUPT_Initialize
  2303 ;;		_TMR2_Initialize
  2304 ;; This function is called by:
  2305 ;;		_main
  2306 ;; This function uses a non-reentrant model
  2307 ;;
  2308                           
  2309                           
  2310                           ;psect for function _Start
  2311  16E9                     _Start:	
  2312                           
  2313                           ;Function.c: 32: OSCCONbits.IRCF = 13;
  2314                           
  2315                           ;incstack = 0
  2316                           ; Regs used in _Start: [wreg+status,2+status,0+pclath+cstack]
  2317  16E9  0021               	movlb	1	; select bank1
  2318  16EA  0819               	movf	25,w	;volatile
  2319  16EB  3987               	andlw	-121
  2320  16EC  3868               	iorlw	104
  2321  16ED  0099               	movwf	25	;volatile
  2322                           
  2323                           ;Function.c: 33: OSCCONbits.SCS = 2;
  2324  16EE  0819               	movf	25,w	;volatile
  2325  16EF  39FC               	andlw	-4
  2326  16F0  3802               	iorlw	2
  2327  16F1  0099               	movwf	25	;volatile
  2328                           
  2329                           ;Function.c: 34: OSCCONbits.SPLLEN = 0;
  2330  16F2  1399               	bcf	25,7	;volatile
  2331                           
  2332                           ;Function.c: 38: TRISCbits.TRISC7 = 0;
  2333  16F3  138E               	bcf	14,7	;volatile
  2334                           
  2335                           ;Function.c: 39: TRISCbits.TRISC6 = 0;
  2336  16F4  130E               	bcf	14,6	;volatile
  2337                           
  2338                           ;Function.c: 40: TRISCbits.TRISC5 = 0;
  2339  16F5  128E               	bcf	14,5	;volatile
  2340                           
  2341                           ;Function.c: 41: TRISCbits.TRISC4 = 0;
  2342  16F6  120E               	bcf	14,4	;volatile
  2343                           
  2344                           ;Function.c: 42: TRISCbits.TRISC3 = 0;
  2345  16F7  118E               	bcf	14,3	;volatile
  2346                           
  2347                           ;Function.c: 43: TRISAbits.TRISA2 = 1;
  2348  16F8  150C               	bsf	12,2	;volatile
  2349                           
  2350                           ;Function.c: 44: TRISCbits.TRISC0 = 1;
  2351  16F9  140E               	bsf	14,0	;volatile
  2352                           
  2353                           ;Function.c: 45: TRISCbits.TRISC1 = 1;
  2354  16FA  148E               	bsf	14,1	;volatile
  2355                           
  2356                           ;Function.c: 49: ANSELCbits.ANSC0 = 0;
  2357  16FB  0023               	movlb	3	; select bank3
  2358  16FC  100E               	bcf	14,0	;volatile
  2359                           
  2360                           ;Function.c: 50: ANSELCbits.ANSC1 = 0;
  2361  16FD  108E               	bcf	14,1	;volatile
  2362                           
  2363                           ;Function.c: 51: ANSELAbits.ANSA2 = 0;
  2364  16FE  110C               	bcf	12,2	;volatile
  2365                           
  2366                           ;Function.c: 52: ANSELCbits.ANSC3 = 0;
  2367  16FF  118E               	bcf	14,3	;volatile
  2368                           
  2369                           ;Function.c: 53: ANSELCbits.ANSC6 = 0;
  2370  1700  130E               	bcf	14,6	;volatile
  2371                           
  2372                           ;Function.c: 54: ANSELCbits.ANSC7 = 0;
  2373  1701  138E               	bcf	14,7	;volatile
  2374                           
  2375                           ;Function.c: 58: ADC_Initialize();
  2376  1702  3195  2595  3196   	fcall	_ADC_Initialize
  2377                           
  2378                           ;Function.c: 62: EUSART1_Initialize();
  2379  1705  3195  25B3  3196   	fcall	_EUSART1_Initialize
  2380                           
  2381                           ;Function.c: 66: INTERRUPT_Initialize();
  2382  1708  3195  259F  3196   	fcall	_INTERRUPT_Initialize
  2383                           
  2384                           ;Function.c: 67: TMR2_Initialize();
  2385  170B  3195  25A9         	fcall	_TMR2_Initialize
  2386  170D  0008               	return
  2387  170E                     __end_of_Start:	
  2388                           
  2389                           	psect	text2
  2390  15A9                     __ptext2:	
  2391 ;; *************** function _TMR2_Initialize *****************
  2392 ;; Defined at:
  2393 ;;		line 9 in file "Timer.c"
  2394 ;; Parameters:    Size  Location     Type
  2395 ;;		None
  2396 ;; Auto vars:     Size  Location     Type
  2397 ;;		None
  2398 ;; Return value:  Size  Location     Type
  2399 ;;                  1    wreg      void 
  2400 ;; Registers used:
  2401 ;;		wreg, status,2
  2402 ;; Tracked objects:
  2403 ;;		On entry : 0/0
  2404 ;;		On exit  : 0/0
  2405 ;;		Unchanged: 0/0
  2406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2410 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2411 ;;Total ram usage:        0 bytes
  2412 ;; Hardware stack levels used:    1
  2413 ;; Hardware stack levels required when called:    2
  2414 ;; This function calls:
  2415 ;;		Nothing
  2416 ;; This function is called by:
  2417 ;;		_Start
  2418 ;; This function uses a non-reentrant model
  2419 ;;
  2420                           
  2421                           
  2422                           ;psect for function _TMR2_Initialize
  2423  15A9                     _TMR2_Initialize:	
  2424                           
  2425                           ;Timer.c: 14: T2CON = 0x00;
  2426                           
  2427                           ;incstack = 0
  2428                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  2429  15A9  0020               	movlb	0	; select bank0
  2430  15AA  019C               	clrf	28	;volatile
  2431                           
  2432                           ;Timer.c: 15: T2CONbits.TMR2ON = 0;
  2433  15AB  111C               	bcf	28,2	;volatile
  2434                           
  2435                           ;Timer.c: 18: PR2 = 18;
  2436  15AC  3012               	movlw	18
  2437  15AD  009B               	movwf	27	;volatile
  2438                           
  2439                           ;Timer.c: 21: TMR2 = 0;
  2440  15AE  019A               	clrf	26	;volatile
  2441                           
  2442                           ;Timer.c: 24: PIR1bits.TMR2IF = 0;
  2443  15AF  1091               	bcf	17,1	;volatile
  2444                           
  2445                           ;Timer.c: 27: PIE1bits.TMR2IE = 1;
  2446  15B0  0021               	movlb	1	; select bank1
  2447  15B1  1491               	bsf	17,1	;volatile
  2448  15B2  0008               	return
  2449  15B3                     __end_of_TMR2_Initialize:	
  2450                           
  2451                           	psect	text3
  2452  159F                     __ptext3:	
  2453 ;; *************** function _INTERRUPT_Initialize *****************
  2454 ;; Defined at:
  2455 ;;		line 78 in file "Function.c"
  2456 ;; Parameters:    Size  Location     Type
  2457 ;;		None
  2458 ;; Auto vars:     Size  Location     Type
  2459 ;;		None
  2460 ;; Return value:  Size  Location     Type
  2461 ;;                  1    wreg      void 
  2462 ;; Registers used:
  2463 ;;		status,2
  2464 ;; Tracked objects:
  2465 ;;		On entry : 0/0
  2466 ;;		On exit  : 0/0
  2467 ;;		Unchanged: 0/0
  2468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2473 ;;Total ram usage:        0 bytes
  2474 ;; Hardware stack levels used:    1
  2475 ;; Hardware stack levels required when called:    2
  2476 ;; This function calls:
  2477 ;;		Nothing
  2478 ;; This function is called by:
  2479 ;;		_Start
  2480 ;; This function uses a non-reentrant model
  2481 ;;
  2482                           
  2483                           
  2484                           ;psect for function _INTERRUPT_Initialize
  2485  159F                     _INTERRUPT_Initialize:	
  2486                           
  2487                           ;Function.c: 80: INTCON = 0;
  2488                           
  2489                           ;incstack = 0
  2490                           ; Regs used in _INTERRUPT_Initialize: [status,2]
  2491  159F  018B               	clrf	11	;volatile
  2492                           
  2493                           ;Function.c: 81: INTCONbits.TMR0IE = 0;
  2494  15A0  128B               	bcf	11,5	;volatile
  2495                           
  2496                           ;Function.c: 82: PIR1bits.TMR2IF = 0;
  2497  15A1  0020               	movlb	0	; select bank0
  2498  15A2  1091               	bcf	17,1	;volatile
  2499                           
  2500                           ;Function.c: 83: PIE1bits.TMR2IE = 1;
  2501  15A3  0021               	movlb	1	; select bank1
  2502  15A4  1491               	bsf	17,1	;volatile
  2503                           
  2504                           ;Function.c: 84: INTCONbits.TMR0IF = 0;
  2505  15A5  110B               	bcf	11,2	;volatile
  2506                           
  2507                           ;Function.c: 85: INTCONbits.GIE = 1;
  2508  15A6  178B               	bsf	11,7	;volatile
  2509                           
  2510                           ;Function.c: 86: INTCONbits.PEIE = 1;
  2511  15A7  170B               	bsf	11,6	;volatile
  2512  15A8  0008               	return
  2513  15A9                     __end_of_INTERRUPT_Initialize:	
  2514                           
  2515                           	psect	text4
  2516  15B3                     __ptext4:	
  2517 ;; *************** function _EUSART1_Initialize *****************
  2518 ;; Defined at:
  2519 ;;		line 10 in file "UART.c"
  2520 ;; Parameters:    Size  Location     Type
  2521 ;;		None
  2522 ;; Auto vars:     Size  Location     Type
  2523 ;;		None
  2524 ;; Return value:  Size  Location     Type
  2525 ;;                  1    wreg      void 
  2526 ;; Registers used:
  2527 ;;		wreg, status,2
  2528 ;; Tracked objects:
  2529 ;;		On entry : 0/0
  2530 ;;		On exit  : 0/0
  2531 ;;		Unchanged: 0/0
  2532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2536 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2537 ;;Total ram usage:        0 bytes
  2538 ;; Hardware stack levels used:    1
  2539 ;; Hardware stack levels required when called:    2
  2540 ;; This function calls:
  2541 ;;		Nothing
  2542 ;; This function is called by:
  2543 ;;		_Start
  2544 ;; This function uses a non-reentrant model
  2545 ;;
  2546                           
  2547                           
  2548                           ;psect for function _EUSART1_Initialize
  2549  15B3                     _EUSART1_Initialize:	
  2550                           
  2551                           ;UART.c: 12: BAUDCON = 0x08;
  2552                           
  2553                           ;incstack = 0
  2554                           ; Regs used in _EUSART1_Initialize: [wreg+status,2]
  2555  15B3  3008               	movlw	8
  2556  15B4  0023               	movlb	3	; select bank3
  2557  15B5  009F               	movwf	31	;volatile
  2558                           
  2559                           ;UART.c: 15: RCSTA = 0x90;
  2560  15B6  3090               	movlw	144
  2561  15B7  009D               	movwf	29	;volatile
  2562                           
  2563                           ;UART.c: 18: TXSTA = 0x24;
  2564  15B8  3024               	movlw	36
  2565  15B9  009E               	movwf	30	;volatile
  2566                           
  2567                           ;UART.c: 21: SPBRGL = 0x67;
  2568  15BA  3067               	movlw	103
  2569  15BB  009B               	movwf	27	;volatile
  2570                           
  2571                           ;UART.c: 24: SPBRGH = 0x00;
  2572  15BC  019C               	clrf	28	;volatile
  2573  15BD  0008               	return
  2574  15BE                     __end_of_EUSART1_Initialize:	
  2575                           
  2576                           	psect	text5
  2577  1595                     __ptext5:	
  2578 ;; *************** function _ADC_Initialize *****************
  2579 ;; Defined at:
  2580 ;;		line 4 in file "ADC.c"
  2581 ;; Parameters:    Size  Location     Type
  2582 ;;		None
  2583 ;; Auto vars:     Size  Location     Type
  2584 ;;		None
  2585 ;; Return value:  Size  Location     Type
  2586 ;;                  1    wreg      void 
  2587 ;; Registers used:
  2588 ;;		None
  2589 ;; Tracked objects:
  2590 ;;		On entry : 0/0
  2591 ;;		On exit  : 0/0
  2592 ;;		Unchanged: 0/0
  2593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2597 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2598 ;;Total ram usage:        0 bytes
  2599 ;; Hardware stack levels used:    1
  2600 ;; Hardware stack levels required when called:    2
  2601 ;; This function calls:
  2602 ;;		Nothing
  2603 ;; This function is called by:
  2604 ;;		_Start
  2605 ;; This function uses a non-reentrant model
  2606 ;;
  2607                           
  2608                           
  2609                           ;psect for function _ADC_Initialize
  2610  1595                     _ADC_Initialize:	
  2611                           
  2612                           ;ADC.c: 5: FVRCONbits.ADFVR0 = 1;
  2613                           
  2614                           ;incstack = 0
  2615                           ; Regs used in _ADC_Initialize: []
  2616  1595  0022               	movlb	2	; select bank2
  2617  1596  1417               	bsf	23,0	;volatile
  2618                           
  2619                           ;ADC.c: 6: FVRCONbits.ADFVR1 = 1;
  2620  1597  1497               	bsf	23,1	;volatile
  2621                           
  2622                           ;ADC.c: 7: ADCON1bits.ADFM = 1;
  2623  1598  0021               	movlb	1	; select bank1
  2624  1599  179E               	bsf	30,7	;volatile
  2625                           
  2626                           ;ADC.c: 8: ADCON1bits.ADCS0 = 0;
  2627  159A  121E               	bcf	30,4	;volatile
  2628                           
  2629                           ;ADC.c: 9: ADCON1bits.ADCS1 = 0;
  2630  159B  129E               	bcf	30,5	;volatile
  2631                           
  2632                           ;ADC.c: 10: ADCON1bits.ADCS2 = 1;
  2633  159C  171E               	bsf	30,6	;volatile
  2634                           
  2635                           ;ADC.c: 11: ADCON0bits.ADON = 1;
  2636  159D  141D               	bsf	29,0	;volatile
  2637  159E  0008               	return
  2638  159F                     __end_of_ADC_Initialize:	
  2639                           
  2640                           	psect	text6
  2641  0B9B                     __ptext6:	
  2642 ;; *************** function _RadioOperation *****************
  2643 ;; Defined at:
  2644 ;;		line 25 in file "Radio.c"
  2645 ;; Parameters:    Size  Location     Type
  2646 ;;		None
  2647 ;; Auto vars:     Size  Location     Type
  2648 ;;		None
  2649 ;; Return value:  Size  Location     Type
  2650 ;;                  1    wreg      void 
  2651 ;; Registers used:
  2652 ;;		wreg, status,2, status,0, pclath, cstack
  2653 ;; Tracked objects:
  2654 ;;		On entry : 0/0
  2655 ;;		On exit  : 0/0
  2656 ;;		Unchanged: 0/0
  2657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2660 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2661 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2662 ;;Total ram usage:        1 bytes
  2663 ;; Hardware stack levels used:    1
  2664 ;; Hardware stack levels required when called:    4
  2665 ;; This function calls:
  2666 ;;		_ClearTicker
  2667 ;;		_GetTicker
  2668 ;;		_ReadCharger
  2669 ;;		_ReadVoltage
  2670 ;;		_SR_FRSPowerDown
  2671 ;;		_SR_FRSTalk
  2672 ;;		___awtoft
  2673 ;;		___ftdiv
  2674 ;;		___ftge
  2675 ;;		___ftmul
  2676 ;; This function is called by:
  2677 ;;		_main
  2678 ;; This function uses a non-reentrant model
  2679 ;;
  2680                           
  2681                           
  2682                           ;psect for function _RadioOperation
  2683  0B9B                     _RadioOperation:	
  2684                           
  2685                           ;Radio.c: 26: if(!PORTAbits.RA2 && !Talking){
  2686                           
  2687                           ;incstack = 0
  2688                           ; Regs used in _RadioOperation: [wreg+status,2+status,0+pclath+cstack]
  2689  0B9B  0020               	movlb	0	; select bank0
  2690  0B9C  190C               	btfsc	12,2	;volatile
  2691  0B9D  2BA6               	goto	l243
  2692  0B9E  087C               	movf	_Talking,w
  2693  0B9F  1D03               	btfss	3,2
  2694  0BA0  2BA6               	goto	l243
  2695                           
  2696                           ;Radio.c: 27: count++;
  2697  0BA1  3001               	movlw	1
  2698  0BA2  0021               	movlb	1	; select bank1
  2699  0BA3  07BD               	addwf	_count^(0+128),f
  2700  0BA4  3000               	movlw	0
  2701  0BA5  3DBE               	addwfc	(_count+1)^(0+128),f
  2702  0BA6                     l243:	
  2703                           
  2704                           ;Radio.c: 28: }
  2705                           ;Radio.c: 29: if((count > 5) && !Talking){
  2706  0BA6  0021               	movlb	1	; select bank1
  2707  0BA7  083E               	movf	(_count+1)^(0+128),w
  2708  0BA8  3A80               	xorlw	128
  2709  0BA9  0020               	movlb	0	; select bank0
  2710  0BAA  00CB               	movwf	??_RadioOperation
  2711  0BAB  3080               	movlw	128
  2712  0BAC  024B               	subwf	??_RadioOperation,w
  2713  0BAD  1D03               	skipz
  2714  0BAE  2BB2               	goto	u5965
  2715  0BAF  3006               	movlw	6
  2716  0BB0  0021               	movlb	1	; select bank1
  2717  0BB1  023D               	subwf	_count^(0+128),w
  2718  0BB2                     u5965:	
  2719  0BB2  1C03               	skipc
  2720  0BB3  2BC1               	goto	l3790
  2721  0BB4  087C               	movf	_Talking,w
  2722  0BB5  1D03               	btfss	3,2
  2723  0BB6  2BC1               	goto	l3790
  2724                           
  2725                           ;Radio.c: 30: SR_FRSTalk();
  2726  0BB7  3195  25D8  318B   	fcall	_SR_FRSTalk
  2727                           
  2728                           ;Radio.c: 31: PORTCbits.RC3 = 1;
  2729  0BBA  0020               	movlb	0	; select bank0
  2730  0BBB  158E               	bsf	14,3	;volatile
  2731                           
  2732                           ;Radio.c: 32: Talking = 1;
  2733  0BBC  01FC               	clrf	_Talking
  2734  0BBD  0AFC               	incf	_Talking,f
  2735                           
  2736                           ;Radio.c: 34: ClearTicker();
  2737  0BBE  3195  2569  318B   	fcall	_ClearTicker
  2738  0BC1                     l3790:	
  2739                           
  2740                           ;Radio.c: 35: }
  2741                           ;Radio.c: 36: if(Talking && PORTAbits.RA2){
  2742  0BC1  087C               	movf	_Talking,w
  2743  0BC2  1903               	btfsc	3,2
  2744  0BC3  2BE2               	goto	l3804
  2745  0BC4  0020               	movlb	0	; select bank0
  2746  0BC5  1D0C               	btfss	12,2	;volatile
  2747  0BC6  2BE2               	goto	l3804
  2748                           
  2749                           ;Radio.c: 37: count--;
  2750  0BC7  30FF               	movlw	255
  2751  0BC8  0021               	movlb	1	; select bank1
  2752  0BC9  07BD               	addwf	_count^(0+128),f
  2753  0BCA  30FF               	movlw	255
  2754  0BCB  3DBE               	addwfc	(_count+1)^(0+128),f
  2755                           
  2756                           ;Radio.c: 38: if(count < 5){
  2757  0BCC  083E               	movf	(_count+1)^(0+128),w
  2758  0BCD  3A80               	xorlw	128
  2759  0BCE  0020               	movlb	0	; select bank0
  2760  0BCF  00CB               	movwf	??_RadioOperation
  2761  0BD0  3080               	movlw	128
  2762  0BD1  024B               	subwf	??_RadioOperation,w
  2763  0BD2  1D03               	skipz
  2764  0BD3  2BD7               	goto	u6005
  2765  0BD4  3005               	movlw	5
  2766  0BD5  0021               	movlb	1	; select bank1
  2767  0BD6  023D               	subwf	_count^(0+128),w
  2768  0BD7                     u6005:	
  2769  0BD7  1803               	skipnc
  2770  0BD8  2BE2               	goto	l3804
  2771                           
  2772                           ;Radio.c: 39: PORTCbits.RC3 = 0;
  2773  0BD9  0020               	movlb	0	; select bank0
  2774  0BDA  118E               	bcf	14,3	;volatile
  2775                           
  2776                           ;Radio.c: 40: SR_FRSTalk();
  2777  0BDB  3195  25D8  318B   	fcall	_SR_FRSTalk
  2778                           
  2779                           ;Radio.c: 42: count = 0;
  2780  0BDE  0021               	movlb	1	; select bank1
  2781  0BDF  01BD               	clrf	_count^(0+128)
  2782  0BE0  01BE               	clrf	(_count+1)^(0+128)
  2783                           
  2784                           ;Radio.c: 43: Talking = 0;
  2785  0BE1  01FC               	clrf	_Talking
  2786  0BE2                     l3804:	
  2787                           
  2788                           ;Radio.c: 44: }
  2789                           ;Radio.c: 45: }
  2790                           ;Radio.c: 46: if(Talking && !PORTAbits.RA2){
  2791  0BE2  087C               	movf	_Talking,w
  2792  0BE3  1903               	btfsc	3,2
  2793  0BE4  2BED               	goto	l3810
  2794  0BE5  0020               	movlb	0	; select bank0
  2795  0BE6  190C               	btfsc	12,2	;volatile
  2796  0BE7  2BED               	goto	l3810
  2797                           
  2798                           ;Radio.c: 47: count = 5;
  2799  0BE8  3005               	movlw	5
  2800  0BE9  0021               	movlb	1	; select bank1
  2801  0BEA  00BD               	movwf	_count^(0+128)
  2802  0BEB  3000               	movlw	0
  2803  0BEC  00BE               	movwf	(_count^(0+128)+1)
  2804  0BED                     l3810:	
  2805                           
  2806                           ;Radio.c: 48: }
  2807                           ;Radio.c: 49: if(GetTicker() > 100000){
  2808  0BED  3188  2000  318B   	fcall	_GetTicker
  2809                           
  2810                           ;Radio.c: 53: }
  2811                           ;Radio.c: 54: if(time > 15){
  2812                           
  2813                           ;Radio.c: 52: PORTCbits.RC4 = 1;
  2814                           
  2815                           ;Radio.c: 51: SR_FRSPowerDown();
  2816  0BF0  0021               	movlb	1	; select bank1
  2817  0BF1  0842               	movf	(_time+1)^(0+128),w
  2818  0BF2  3A80               	xorlw	128
  2819  0BF3  0020               	movlb	0	; select bank0
  2820  0BF4  00CB               	movwf	??_RadioOperation
  2821  0BF5  3080               	movlw	128
  2822  0BF6  024B               	subwf	??_RadioOperation,w
  2823  0BF7  1D03               	skipz
  2824  0BF8  2BFC               	goto	u6035
  2825  0BF9  3010               	movlw	16
  2826  0BFA  0021               	movlb	1	; select bank1
  2827  0BFB  0241               	subwf	_time^(0+128),w
  2828  0BFC                     u6035:	
  2829  0BFC  1C03               	skipc
  2830  0BFD  2C4E               	goto	l3826
  2831                           
  2832                           ;Radio.c: 55: PORTCbits.RC5 = 1;
  2833  0BFE  0020               	movlb	0	; select bank0
  2834  0BFF  168E               	bsf	14,5	;volatile
  2835                           
  2836                           ;Radio.c: 56: Battery = ReadVoltage(1);
  2837  0C00  3001               	movlw	1
  2838  0C01  3195  25CA  318B   	fcall	_ReadVoltage
  2839  0C04  0873               	movf	?_ReadVoltage+1,w
  2840  0C05  00FA               	movwf	___awtoft@c+1
  2841  0C06  0872               	movf	?_ReadVoltage,w
  2842  0C07  00F9               	movwf	___awtoft@c
  2843  0C08  3196  26C8  318B   	fcall	___awtoft
  2844  0C0B  0879               	movf	?___awtoft,w
  2845  0C0C  0021               	movlb	1	; select bank1
  2846  0C0D  00BA               	movwf	_Battery^(0+128)
  2847  0C0E  087A               	movf	?___awtoft+1,w
  2848  0C0F  00BB               	movwf	(_Battery+1)^(0+128)
  2849  0C10  087B               	movf	?___awtoft+2,w
  2850  0C11  00BC               	movwf	(_Battery+2)^(0+128)
  2851                           
  2852                           ;Radio.c: 57: Battery = (Battery*5.0)/1023.0;
  2853  0C12  30C0               	movlw	192
  2854  0C13  0020               	movlb	0	; select bank0
  2855  0C14  00BB               	movwf	___ftdiv@f2
  2856  0C15  307F               	movlw	127
  2857  0C16  00BC               	movwf	___ftdiv@f2+1
  2858  0C17  3044               	movlw	68
  2859  0C18  00BD               	movwf	___ftdiv@f2+2
  2860  0C19  3000               	movlw	0
  2861  0C1A  00AB               	movwf	___ftmul@f1
  2862  0C1B  30A0               	movlw	160
  2863  0C1C  00AC               	movwf	___ftmul@f1+1
  2864  0C1D  3040               	movlw	64
  2865  0C1E  00AD               	movwf	___ftmul@f1+2
  2866  0C1F  0021               	movlb	1	; select bank1
  2867  0C20  083A               	movf	_Battery^(0+128),w
  2868  0C21  0020               	movlb	0	; select bank0
  2869  0C22  00AE               	movwf	___ftmul@f2
  2870  0C23  0021               	movlb	1	; select bank1
  2871  0C24  083B               	movf	(_Battery+1)^(0+128),w
  2872  0C25  0020               	movlb	0	; select bank0
  2873  0C26  00AF               	movwf	___ftmul@f2+1
  2874  0C27  0021               	movlb	1	; select bank1
  2875  0C28  083C               	movf	(_Battery+2)^(0+128),w
  2876  0C29  0020               	movlb	0	; select bank0
  2877  0C2A  00B0               	movwf	___ftmul@f2+2
  2878  0C2B  318A  2231  318B   	fcall	___ftmul
  2879  0C2E  0020               	movlb	0	; select bank0
  2880  0C2F  082B               	movf	?___ftmul,w
  2881  0C30  00BE               	movwf	___ftdiv@f1
  2882  0C31  082C               	movf	?___ftmul+1,w
  2883  0C32  00BF               	movwf	___ftdiv@f1+1
  2884  0C33  082D               	movf	?___ftmul+2,w
  2885  0C34  00C0               	movwf	___ftdiv@f1+2
  2886  0C35  3187  2754  318B   	fcall	___ftdiv
  2887  0C38  0020               	movlb	0	; select bank0
  2888  0C39  083B               	movf	?___ftdiv,w
  2889  0C3A  0021               	movlb	1	; select bank1
  2890  0C3B  00BA               	movwf	_Battery^(0+128)
  2891  0C3C  0020               	movlb	0	; select bank0
  2892  0C3D  083C               	movf	?___ftdiv+1,w
  2893  0C3E  0021               	movlb	1	; select bank1
  2894  0C3F  00BB               	movwf	(_Battery+1)^(0+128)
  2895  0C40  0020               	movlb	0	; select bank0
  2896  0C41  083D               	movf	?___ftdiv+2,w
  2897  0C42  0021               	movlb	1	; select bank1
  2898  0C43  00BC               	movwf	(_Battery+2)^(0+128)
  2899                           
  2900                           ;Radio.c: 58: time = 0;
  2901  0C44  01C1               	clrf	_time^(0+128)
  2902  0C45  01C2               	clrf	(_time+1)^(0+128)
  2903                           
  2904                           ;Radio.c: 59: Mode = ReadCharger();
  2905  0C46  3195  25E7  318B   	fcall	_ReadCharger
  2906  0C49  0020               	movlb	0	; select bank0
  2907  0C4A  00CB               	movwf	??_RadioOperation
  2908  0C4B  084B               	movf	??_RadioOperation,w
  2909  0C4C  0021               	movlb	1	; select bank1
  2910  0C4D  00C3               	movwf	_Mode^(0+128)
  2911  0C4E                     l3826:	
  2912                           
  2913                           ;Radio.c: 60: }
  2914                           ;Radio.c: 61: if((time > 1) && (PORTCbits.RC5 == 1)){
  2915  0C4E  0021               	movlb	1	; select bank1
  2916  0C4F  0842               	movf	(_time+1)^(0+128),w
  2917  0C50  3A80               	xorlw	128
  2918  0C51  0020               	movlb	0	; select bank0
  2919  0C52  00CB               	movwf	??_RadioOperation
  2920  0C53  3080               	movlw	128
  2921  0C54  024B               	subwf	??_RadioOperation,w
  2922  0C55  1D03               	skipz
  2923  0C56  2C5A               	goto	u6045
  2924  0C57  3002               	movlw	2
  2925  0C58  0021               	movlb	1	; select bank1
  2926  0C59  0241               	subwf	_time^(0+128),w
  2927  0C5A                     u6045:	
  2928  0C5A  1C03               	skipc
  2929  0C5B  2C60               	goto	l3832
  2930  0C5C  0020               	movlb	0	; select bank0
  2931  0C5D  1E8E               	btfss	14,5	;volatile
  2932  0C5E  2C60               	goto	l3832
  2933                           
  2934                           ;Radio.c: 62: PORTCbits.RC5 = 0;
  2935  0C5F  128E               	bcf	14,5	;volatile
  2936  0C60                     l3832:	
  2937                           
  2938                           ;Radio.c: 63: }
  2939                           ;Radio.c: 64: if(Battery < 6.2){
  2940  0C60  0021               	movlb	1	; select bank1
  2941  0C61  083A               	movf	_Battery^(0+128),w
  2942  0C62  00F1               	movwf	___ftge@ff1
  2943  0C63  083B               	movf	(_Battery+1)^(0+128),w
  2944  0C64  00F2               	movwf	___ftge@ff1+1
  2945  0C65  083C               	movf	(_Battery+2)^(0+128),w
  2946  0C66  00F3               	movwf	___ftge@ff1+2
  2947  0C67  3066               	movlw	102
  2948  0C68  00F4               	movwf	___ftge@ff2
  2949  0C69  30C6               	movlw	198
  2950  0C6A  00F5               	movwf	___ftge@ff2+1
  2951  0C6B  3040               	movlw	64
  2952  0C6C  00F6               	movwf	___ftge@ff2+2
  2953  0C6D  3197  2788  318B   	fcall	___ftge
  2954                           
  2955                           ;Radio.c: 67: }
  2956                           ;Radio.c: 68: if(ReadCharger() == 1){
  2957  0C70  3195  25E7  318B   	fcall	_ReadCharger
  2958  0C73  3A01               	xorlw	1
  2959  0C74  1D03               	skipz
  2960  0C75  2C79               	goto	l3838
  2961                           
  2962                           ;Radio.c: 69: PORTCbits.RC5 = 1;
  2963  0C76  0020               	movlb	0	; select bank0
  2964  0C77  168E               	bsf	14,5	;volatile
  2965                           
  2966                           ;Radio.c: 70: PORTCbits.RC4 = 1;
  2967  0C78  160E               	bsf	14,4	;volatile
  2968  0C79                     l3838:	
  2969                           
  2970                           ;Radio.c: 71: }
  2971                           ;Radio.c: 72: if(ReadCharger() == 2){
  2972  0C79  3195  25E7  318B   	fcall	_ReadCharger
  2973  0C7C  3A02               	xorlw	2
  2974  0C7D  1D03               	skipz
  2975  0C7E  2C82               	goto	l3842
  2976                           
  2977                           ;Radio.c: 73: PORTCbits.RC4 = 0;
  2978  0C7F  0020               	movlb	0	; select bank0
  2979  0C80  120E               	bcf	14,4	;volatile
  2980                           
  2981                           ;Radio.c: 74: PORTCbits.RC5 = 1;
  2982  0C81  168E               	bsf	14,5	;volatile
  2983  0C82                     l3842:	
  2984                           
  2985                           ;Radio.c: 75: }
  2986                           ;Radio.c: 76: time++;
  2987  0C82  3001               	movlw	1
  2988  0C83  0021               	movlb	1	; select bank1
  2989  0C84  07C1               	addwf	_time^(0+128),f
  2990  0C85  3000               	movlw	0
  2991  0C86  3DC2               	addwfc	(_time+1)^(0+128),f
  2992  0C87  0008               	return
  2993  0C88                     __end_of_RadioOperation:	
  2994                           
  2995                           	psect	text7
  2996  0754                     __ptext7:	
  2997 ;; *************** function ___ftdiv *****************
  2998 ;; Defined at:
  2999 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
  3000 ;; Parameters:    Size  Location     Type
  3001 ;;  f2              3   27[BANK0 ] float 
  3002 ;;  f1              3   30[BANK0 ] float 
  3003 ;; Auto vars:     Size  Location     Type
  3004 ;;  f3              3   38[BANK0 ] float 
  3005 ;;  sign            1   42[BANK0 ] unsigned char 
  3006 ;;  exp             1   41[BANK0 ] unsigned char 
  3007 ;;  cntr            1   37[BANK0 ] unsigned char 
  3008 ;; Return value:  Size  Location     Type
  3009 ;;                  3   27[BANK0 ] float 
  3010 ;; Registers used:
  3011 ;;		wreg, status,2, status,0, pclath, cstack
  3012 ;; Tracked objects:
  3013 ;;		On entry : 0/0
  3014 ;;		On exit  : 0/0
  3015 ;;		Unchanged: 0/0
  3016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3017 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3018 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3019 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3020 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3021 ;;Total ram usage:       16 bytes
  3022 ;; Hardware stack levels used:    1
  3023 ;; Hardware stack levels required when called:    3
  3024 ;; This function calls:
  3025 ;;		___ftpack
  3026 ;; This function is called by:
  3027 ;;		_RadioOperation
  3028 ;; This function uses a non-reentrant model
  3029 ;;
  3030                           
  3031                           
  3032                           ;psect for function ___ftdiv
  3033  0754                     ___ftdiv:	
  3034                           
  3035                           ;incstack = 0
  3036                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  3037  0754  0020               	movlb	0	; select bank0
  3038  0755  083E               	movf	___ftdiv@f1,w
  3039  0756  00C1               	movwf	??___ftdiv
  3040  0757  083F               	movf	___ftdiv@f1+1,w
  3041  0758  00C2               	movwf	??___ftdiv+1
  3042  0759  0840               	movf	___ftdiv@f1+2,w
  3043  075A  00C3               	movwf	??___ftdiv+2
  3044  075B  1003               	clrc
  3045  075C  0D42               	rlf	??___ftdiv+1,w
  3046  075D  0D43               	rlf	??___ftdiv+2,w
  3047  075E  00C4               	movwf	??___ftdiv+3
  3048  075F  0844               	movf	??___ftdiv+3,w
  3049  0760  00C9               	movwf	___ftdiv@exp
  3050  0761  0849               	movf	___ftdiv@exp,w
  3051  0762  1D03               	btfss	3,2
  3052  0763  2F6B               	goto	l3736
  3053  0764  3000               	movlw	0
  3054  0765  00BB               	movwf	?___ftdiv
  3055  0766  3000               	movlw	0
  3056  0767  00BC               	movwf	?___ftdiv+1
  3057  0768  3000               	movlw	0
  3058  0769  00BD               	movwf	?___ftdiv+2
  3059  076A  0008               	return
  3060  076B                     l3736:	
  3061  076B  083B               	movf	___ftdiv@f2,w
  3062  076C  00C1               	movwf	??___ftdiv
  3063  076D  083C               	movf	___ftdiv@f2+1,w
  3064  076E  00C2               	movwf	??___ftdiv+1
  3065  076F  083D               	movf	___ftdiv@f2+2,w
  3066  0770  00C3               	movwf	??___ftdiv+2
  3067  0771  1003               	clrc
  3068  0772  0D42               	rlf	??___ftdiv+1,w
  3069  0773  0D43               	rlf	??___ftdiv+2,w
  3070  0774  00C4               	movwf	??___ftdiv+3
  3071  0775  0844               	movf	??___ftdiv+3,w
  3072  0776  00CA               	movwf	___ftdiv@sign
  3073  0777  084A               	movf	___ftdiv@sign,w
  3074  0778  1D03               	btfss	3,2
  3075  0779  2F81               	goto	l3742
  3076  077A  3000               	movlw	0
  3077  077B  00BB               	movwf	?___ftdiv
  3078  077C  3000               	movlw	0
  3079  077D  00BC               	movwf	?___ftdiv+1
  3080  077E  3000               	movlw	0
  3081  077F  00BD               	movwf	?___ftdiv+2
  3082  0780  0008               	return
  3083  0781                     l3742:	
  3084  0781  3000               	movlw	0
  3085  0782  00C6               	movwf	___ftdiv@f3
  3086  0783  3000               	movlw	0
  3087  0784  00C7               	movwf	___ftdiv@f3+1
  3088  0785  3000               	movlw	0
  3089  0786  00C8               	movwf	___ftdiv@f3+2
  3090  0787  3089               	movlw	137
  3091  0788  074A               	addwf	___ftdiv@sign,w
  3092  0789  00C1               	movwf	??___ftdiv
  3093  078A  0841               	movf	??___ftdiv,w
  3094  078B  02C9               	subwf	___ftdiv@exp,f
  3095  078C  083E               	movf	___ftdiv@f1,w
  3096  078D  00C1               	movwf	??___ftdiv
  3097  078E  083F               	movf	___ftdiv@f1+1,w
  3098  078F  00C2               	movwf	??___ftdiv+1
  3099  0790  0840               	movf	___ftdiv@f1+2,w
  3100  0791  00C3               	movwf	??___ftdiv+2
  3101  0792  3010               	movlw	16
  3102  0793                     u5885:	
  3103  0793  36C3               	lsrf	??___ftdiv+2,f
  3104  0794  0CC2               	rrf	??___ftdiv+1,f
  3105  0795  0CC1               	rrf	??___ftdiv,f
  3106  0796  0B89               	decfsz	9,f
  3107  0797  2F93               	goto	u5885
  3108  0798  0841               	movf	??___ftdiv,w
  3109  0799  00C4               	movwf	??___ftdiv+3
  3110  079A  0844               	movf	??___ftdiv+3,w
  3111  079B  00CA               	movwf	___ftdiv@sign
  3112  079C  083B               	movf	___ftdiv@f2,w
  3113  079D  00C1               	movwf	??___ftdiv
  3114  079E  083C               	movf	___ftdiv@f2+1,w
  3115  079F  00C2               	movwf	??___ftdiv+1
  3116  07A0  083D               	movf	___ftdiv@f2+2,w
  3117  07A1  00C3               	movwf	??___ftdiv+2
  3118  07A2  3010               	movlw	16
  3119  07A3                     u5895:	
  3120  07A3  36C3               	lsrf	??___ftdiv+2,f
  3121  07A4  0CC2               	rrf	??___ftdiv+1,f
  3122  07A5  0CC1               	rrf	??___ftdiv,f
  3123  07A6  0B89               	decfsz	9,f
  3124  07A7  2FA3               	goto	u5895
  3125  07A8  0841               	movf	??___ftdiv,w
  3126  07A9  00C4               	movwf	??___ftdiv+3
  3127  07AA  0844               	movf	??___ftdiv+3,w
  3128  07AB  06CA               	xorwf	___ftdiv@sign,f
  3129  07AC  3080               	movlw	128
  3130  07AD  00C1               	movwf	??___ftdiv
  3131  07AE  0841               	movf	??___ftdiv,w
  3132  07AF  05CA               	andwf	___ftdiv@sign,f
  3133  07B0  17BF               	bsf	___ftdiv@f1+1,7
  3134  07B1  30FF               	movlw	255
  3135  07B2  05BE               	andwf	___ftdiv@f1,f
  3136  07B3  30FF               	movlw	255
  3137  07B4  05BF               	andwf	___ftdiv@f1+1,f
  3138  07B5  3000               	movlw	0
  3139  07B6  05C0               	andwf	___ftdiv@f1+2,f
  3140  07B7  17BC               	bsf	___ftdiv@f2+1,7
  3141  07B8  30FF               	movlw	255
  3142  07B9  05BB               	andwf	___ftdiv@f2,f
  3143  07BA  30FF               	movlw	255
  3144  07BB  05BC               	andwf	___ftdiv@f2+1,f
  3145  07BC  3000               	movlw	0
  3146  07BD  05BD               	andwf	___ftdiv@f2+2,f
  3147  07BE  3018               	movlw	24
  3148  07BF  00C1               	movwf	??___ftdiv
  3149  07C0  0841               	movf	??___ftdiv,w
  3150  07C1  00C5               	movwf	___ftdiv@cntr
  3151  07C2                     l3756:	
  3152  07C2  3001               	movlw	1
  3153  07C3                     u5905:	
  3154  07C3  35C6               	lslf	___ftdiv@f3,f
  3155  07C4  0DC7               	rlf	___ftdiv@f3+1,f
  3156  07C5  0DC8               	rlf	___ftdiv@f3+2,f
  3157  07C6  0B89               	decfsz	9,f
  3158  07C7  2FC3               	goto	u5905
  3159  07C8  083D               	movf	___ftdiv@f2+2,w
  3160  07C9  0240               	subwf	___ftdiv@f1+2,w
  3161  07CA  1D03               	skipz
  3162  07CB  2FD2               	goto	u5915
  3163  07CC  083C               	movf	___ftdiv@f2+1,w
  3164  07CD  023F               	subwf	___ftdiv@f1+1,w
  3165  07CE  1D03               	skipz
  3166  07CF  2FD2               	goto	u5915
  3167  07D0  083B               	movf	___ftdiv@f2,w
  3168  07D1  023E               	subwf	___ftdiv@f1,w
  3169  07D2                     u5915:	
  3170  07D2  1C03               	skipc
  3171  07D3  2FDB               	goto	l3764
  3172  07D4  083B               	movf	___ftdiv@f2,w
  3173  07D5  02BE               	subwf	___ftdiv@f1,f
  3174  07D6  083C               	movf	___ftdiv@f2+1,w
  3175  07D7  3BBF               	subwfb	___ftdiv@f1+1,f
  3176  07D8  083D               	movf	___ftdiv@f2+2,w
  3177  07D9  3BC0               	subwfb	___ftdiv@f1+2,f
  3178  07DA  1446               	bsf	___ftdiv@f3,0
  3179  07DB                     l3764:	
  3180  07DB  3001               	movlw	1
  3181  07DC                     u5925:	
  3182  07DC  35BE               	lslf	___ftdiv@f1,f
  3183  07DD  0DBF               	rlf	___ftdiv@f1+1,f
  3184  07DE  0DC0               	rlf	___ftdiv@f1+2,f
  3185  07DF  0B89               	decfsz	9,f
  3186  07E0  2FDC               	goto	u5925
  3187  07E1  3001               	movlw	1
  3188  07E2  02C5               	subwf	___ftdiv@cntr,f
  3189  07E3  1D03               	btfss	3,2
  3190  07E4  2FC2               	goto	l3756
  3191  07E5  0846               	movf	___ftdiv@f3,w
  3192  07E6  00F1               	movwf	___ftpack@arg
  3193  07E7  0847               	movf	___ftdiv@f3+1,w
  3194  07E8  00F2               	movwf	___ftpack@arg+1
  3195  07E9  0848               	movf	___ftdiv@f3+2,w
  3196  07EA  00F3               	movwf	___ftpack@arg+2
  3197  07EB  0849               	movf	___ftdiv@exp,w
  3198  07EC  00C1               	movwf	??___ftdiv
  3199  07ED  0841               	movf	??___ftdiv,w
  3200  07EE  00F4               	movwf	___ftpack@exp
  3201  07EF  084A               	movf	___ftdiv@sign,w
  3202  07F0  00C2               	movwf	??___ftdiv+1
  3203  07F1  0842               	movf	??___ftdiv+1,w
  3204  07F2  00F5               	movwf	___ftpack@sign
  3205  07F3  3189  2146         	fcall	___ftpack
  3206  07F5  0871               	movf	?___ftpack,w
  3207  07F6  0020               	movlb	0	; select bank0
  3208  07F7  00BB               	movwf	?___ftdiv
  3209  07F8  0872               	movf	?___ftpack+1,w
  3210  07F9  00BC               	movwf	?___ftdiv+1
  3211  07FA  0873               	movf	?___ftpack+2,w
  3212  07FB  00BD               	movwf	?___ftdiv+2
  3213  07FC  0008               	return
  3214  07FD                     __end_of___ftdiv:	
  3215                           
  3216                           	psect	text8
  3217  16C8                     __ptext8:	
  3218 ;; *************** function ___awtoft *****************
  3219 ;; Defined at:
  3220 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
  3221 ;; Parameters:    Size  Location     Type
  3222 ;;  c               2    9[COMMON] int 
  3223 ;; Auto vars:     Size  Location     Type
  3224 ;;  sign            1    2[BANK0 ] unsigned char 
  3225 ;; Return value:  Size  Location     Type
  3226 ;;                  3    9[COMMON] float 
  3227 ;; Registers used:
  3228 ;;		wreg, status,2, status,0, pclath, cstack
  3229 ;; Tracked objects:
  3230 ;;		On entry : 0/0
  3231 ;;		On exit  : 0/0
  3232 ;;		Unchanged: 0/0
  3233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3234 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3235 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3236 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3237 ;;      Totals:         3       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3238 ;;Total ram usage:        6 bytes
  3239 ;; Hardware stack levels used:    1
  3240 ;; Hardware stack levels required when called:    3
  3241 ;; This function calls:
  3242 ;;		___ftpack
  3243 ;; This function is called by:
  3244 ;;		_RadioOperation
  3245 ;; This function uses a non-reentrant model
  3246 ;;
  3247                           
  3248                           
  3249                           ;psect for function ___awtoft
  3250  16C8                     ___awtoft:	
  3251                           
  3252                           ;incstack = 0
  3253                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  3254  16C8  0020               	movlb	0	; select bank0
  3255  16C9  01A2               	clrf	___awtoft@sign
  3256  16CA  1FFA               	btfss	___awtoft@c+1,7
  3257  16CB  2ED3               	goto	l3726
  3258  16CC  09F9               	comf	___awtoft@c,f
  3259  16CD  09FA               	comf	___awtoft@c+1,f
  3260  16CE  0AF9               	incf	___awtoft@c,f
  3261  16CF  1903               	skipnz
  3262  16D0  0AFA               	incf	___awtoft@c+1,f
  3263  16D1  01A2               	clrf	___awtoft@sign
  3264  16D2  0AA2               	incf	___awtoft@sign,f
  3265  16D3                     l3726:	
  3266  16D3  0879               	movf	___awtoft@c,w
  3267  16D4  00F1               	movwf	___ftpack@arg
  3268  16D5  087A               	movf	___awtoft@c+1,w
  3269  16D6  00F2               	movwf	___ftpack@arg+1
  3270  16D7  01F3               	clrf	___ftpack@arg+2
  3271  16D8  308E               	movlw	142
  3272  16D9  00A0               	movwf	??___awtoft
  3273  16DA  0820               	movf	??___awtoft,w
  3274  16DB  00F4               	movwf	___ftpack@exp
  3275  16DC  0822               	movf	___awtoft@sign,w
  3276  16DD  00A1               	movwf	??___awtoft+1
  3277  16DE  0821               	movf	??___awtoft+1,w
  3278  16DF  00F5               	movwf	___ftpack@sign
  3279  16E0  3189  2146         	fcall	___ftpack
  3280  16E2  0871               	movf	?___ftpack,w
  3281  16E3  00F9               	movwf	?___awtoft
  3282  16E4  0872               	movf	?___ftpack+1,w
  3283  16E5  00FA               	movwf	?___awtoft+1
  3284  16E6  0873               	movf	?___ftpack+2,w
  3285  16E7  00FB               	movwf	?___awtoft+2
  3286  16E8  0008               	return
  3287  16E9                     __end_of___awtoft:	
  3288                           
  3289                           	psect	text9
  3290  15D8                     __ptext9:	
  3291 ;; *************** function _SR_FRSTalk *****************
  3292 ;; Defined at:
  3293 ;;		line 7 in file "SR_FRS.c"
  3294 ;; Parameters:    Size  Location     Type
  3295 ;;		None
  3296 ;; Auto vars:     Size  Location     Type
  3297 ;;		None
  3298 ;; Return value:  Size  Location     Type
  3299 ;;                  1    wreg      void 
  3300 ;; Registers used:
  3301 ;;		wreg, status,2, status,0
  3302 ;; Tracked objects:
  3303 ;;		On entry : 0/0
  3304 ;;		On exit  : 0/0
  3305 ;;		Unchanged: 0/0
  3306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3309 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3310 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3311 ;;Total ram usage:        1 bytes
  3312 ;; Hardware stack levels used:    1
  3313 ;; Hardware stack levels required when called:    2
  3314 ;; This function calls:
  3315 ;;		Nothing
  3316 ;; This function is called by:
  3317 ;;		_RadioOperation
  3318 ;; This function uses a non-reentrant model
  3319 ;;
  3320                           
  3321                           
  3322                           ;psect for function _SR_FRSTalk
  3323  15D8                     _SR_FRSTalk:	
  3324                           
  3325                           ;SR_FRS.c: 8: PORTCbits.RC7 ^= 1;
  3326                           
  3327                           ;incstack = 0
  3328                           ; Regs used in _SR_FRSTalk: [wreg+status,2+status,0]
  3329  15D8  0020               	movlb	0	; select bank0
  3330  15D9  0D0E               	rlf	14,w	;volatile
  3331  15DA  0D0E               	rlf	14,w	;volatile
  3332  15DB  3901               	andlw	1
  3333  15DC  00F1               	movwf	??_SR_FRSTalk
  3334  15DD  3001               	movlw	1
  3335  15DE  06F1               	xorwf	??_SR_FRSTalk,f
  3336  15DF  0CF1               	rrf	??_SR_FRSTalk,f
  3337  15E0  0CF1               	rrf	??_SR_FRSTalk,f
  3338  15E1  080E               	movf	14,w	;volatile
  3339  15E2  0671               	xorwf	??_SR_FRSTalk,w
  3340  15E3  397F               	andlw	-129
  3341  15E4  0671               	xorwf	??_SR_FRSTalk,w
  3342  15E5  008E               	movwf	14	;volatile
  3343  15E6  0008               	return
  3344  15E7                     __end_of_SR_FRSTalk:	
  3345                           
  3346                           	psect	text10
  3347  15F9                     __ptext10:	
  3348 ;; *************** function _SR_FRSPowerDown *****************
  3349 ;; Defined at:
  3350 ;;		line 11 in file "SR_FRS.c"
  3351 ;; Parameters:    Size  Location     Type
  3352 ;;		None
  3353 ;; Auto vars:     Size  Location     Type
  3354 ;;		None
  3355 ;; Return value:  Size  Location     Type
  3356 ;;                  1    wreg      void 
  3357 ;; Registers used:
  3358 ;;		wreg, status,2, status,0
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 0/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3366 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3367 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3368 ;;Total ram usage:        1 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; Hardware stack levels required when called:    2
  3371 ;; This function calls:
  3372 ;;		Nothing
  3373 ;; This function is called by:
  3374 ;;		_RadioOperation
  3375 ;; This function uses a non-reentrant model
  3376 ;;
  3377                           
  3378                           
  3379                           ;psect for function _SR_FRSPowerDown
  3380  15F9                     _SR_FRSPowerDown:	
  3381                           
  3382                           ;SR_FRS.c: 12: PORTCbits.RC6 ^= 1;
  3383                           
  3384                           ;incstack = 0
  3385                           ; Regs used in _SR_FRSPowerDown: [wreg+status,2+status,0]
  3386  15F9  0020               	movlb	0	; select bank0
  3387  15FA  0E0E               	swapf	14,w	;volatile
  3388  15FB  00F1               	movwf	??_SR_FRSPowerDown
  3389  15FC  0CF1               	rrf	??_SR_FRSPowerDown,f
  3390  15FD  0C71               	rrf	??_SR_FRSPowerDown,w
  3391  15FE  3901               	andlw	1
  3392  15FF  00F1               	movwf	??_SR_FRSPowerDown
  3393  1600  3001               	movlw	1
  3394  1601  06F1               	xorwf	??_SR_FRSPowerDown,f
  3395  1602  0EF1               	swapf	??_SR_FRSPowerDown,f
  3396  1603  0DF1               	rlf	??_SR_FRSPowerDown,f
  3397  1604  0DF1               	rlf	??_SR_FRSPowerDown,f
  3398  1605  080E               	movf	14,w	;volatile
  3399  1606  0671               	xorwf	??_SR_FRSPowerDown,w
  3400  1607  39BF               	andlw	-65
  3401  1608  0671               	xorwf	??_SR_FRSPowerDown,w
  3402  1609  008E               	movwf	14	;volatile
  3403  160A  0008               	return
  3404  160B                     __end_of_SR_FRSPowerDown:	
  3405                           
  3406                           	psect	text11
  3407  15CA                     __ptext11:	
  3408 ;; *************** function _ReadVoltage *****************
  3409 ;; Defined at:
  3410 ;;		line 14 in file "ADC.c"
  3411 ;; Parameters:    Size  Location     Type
  3412 ;;  ch              1    wreg     unsigned char 
  3413 ;; Auto vars:     Size  Location     Type
  3414 ;;  ch              1    5[COMMON] unsigned char 
  3415 ;; Return value:  Size  Location     Type
  3416 ;;                  2    2[COMMON] int 
  3417 ;; Registers used:
  3418 ;;		wreg, status,2, status,0, pclath, cstack
  3419 ;; Tracked objects:
  3420 ;;		On entry : 0/0
  3421 ;;		On exit  : 0/0
  3422 ;;		Unchanged: 0/0
  3423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3424 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3425 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3427 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3428 ;;Total ram usage:        4 bytes
  3429 ;; Hardware stack levels used:    1
  3430 ;; Hardware stack levels required when called:    3
  3431 ;; This function calls:
  3432 ;;		_SetADCChannel
  3433 ;; This function is called by:
  3434 ;;		_RadioOperation
  3435 ;; This function uses a non-reentrant model
  3436 ;;
  3437                           
  3438                           
  3439                           ;psect for function _ReadVoltage
  3440  15CA                     _ReadVoltage:	
  3441                           
  3442                           ;incstack = 0
  3443                           ; Regs used in _ReadVoltage: [wreg+status,2+status,0+pclath+cstack]
  3444                           ;ReadVoltage@ch stored from wreg
  3445  15CA  00F5               	movwf	ReadVoltage@ch
  3446                           
  3447                           ;ADC.c: 15: SetADCChannel(ch);
  3448  15CB  0875               	movf	ReadVoltage@ch,w
  3449  15CC  3196  26AA  3195   	fcall	_SetADCChannel
  3450                           
  3451                           ;ADC.c: 16: ADCON0bits.GO_nDONE = 1;
  3452  15CF  0021               	movlb	1	; select bank1
  3453  15D0  149D               	bsf	29,1	;volatile
  3454  15D1                     l270:	
  3455                           ;ADC.c: 17: while(ADCON0bits.GO_nDONE);
  3456                           
  3457  15D1  189D               	btfsc	29,1	;volatile
  3458  15D2  2DD1               	goto	l270
  3459                           
  3460                           ;ADC.c: 18: return ((ADRESL << 8) + ADRESL);
  3461  15D3  081B               	movf	27,w	;volatile
  3462  15D4  00F3               	movwf	?_ReadVoltage+1
  3463  15D5  081B               	movf	27,w	;volatile
  3464  15D6  00F2               	movwf	?_ReadVoltage
  3465  15D7  0008               	return
  3466  15D8                     __end_of_ReadVoltage:	
  3467                           
  3468                           	psect	text12
  3469  16AA                     __ptext12:	
  3470 ;; *************** function _SetADCChannel *****************
  3471 ;; Defined at:
  3472 ;;		line 21 in file "ADC.c"
  3473 ;; Parameters:    Size  Location     Type
  3474 ;;  ch              1    wreg     unsigned char 
  3475 ;; Auto vars:     Size  Location     Type
  3476 ;;  ch              1    1[COMMON] unsigned char 
  3477 ;; Return value:  Size  Location     Type
  3478 ;;                  1    wreg      void 
  3479 ;; Registers used:
  3480 ;;		wreg, status,2, status,0
  3481 ;; Tracked objects:
  3482 ;;		On entry : 0/0
  3483 ;;		On exit  : 0/0
  3484 ;;		Unchanged: 0/0
  3485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3487 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3489 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3490 ;;Total ram usage:        1 bytes
  3491 ;; Hardware stack levels used:    1
  3492 ;; Hardware stack levels required when called:    2
  3493 ;; This function calls:
  3494 ;;		Nothing
  3495 ;; This function is called by:
  3496 ;;		_ReadVoltage
  3497 ;; This function uses a non-reentrant model
  3498 ;;
  3499                           
  3500                           
  3501                           ;psect for function _SetADCChannel
  3502  16AA                     _SetADCChannel:	
  3503                           
  3504                           ;incstack = 0
  3505                           ; Regs used in _SetADCChannel: [wreg+status,2+status,0]
  3506                           ;SetADCChannel@ch stored from wreg
  3507  16AA  00F1               	movwf	SetADCChannel@ch
  3508                           
  3509                           ;ADC.c: 22: if(ch == 1){
  3510  16AB  0371               	decf	SetADCChannel@ch,w
  3511  16AC  1D03               	btfss	3,2
  3512  16AD  2EB4               	goto	l2726
  3513                           
  3514                           ;ADC.c: 23: ADCON0bits.CHS = 6;
  3515  16AE  0021               	movlb	1	; select bank1
  3516  16AF  081D               	movf	29,w	;volatile
  3517  16B0  3983               	andlw	-125
  3518  16B1  3818               	iorlw	24
  3519  16B2  009D               	movwf	29	;volatile
  3520                           
  3521                           ;ADC.c: 24: }
  3522  16B3  0008               	return
  3523  16B4                     l2726:	
  3524                           
  3525                           ;ADC.c: 25: else if(ch == 2){
  3526  16B4  3002               	movlw	2
  3527  16B5  0671               	xorwf	SetADCChannel@ch,w
  3528  16B6  1D03               	btfss	3,2
  3529  16B7  2EBE               	goto	l2730
  3530                           
  3531                           ;ADC.c: 26: ADCON0bits.CHS = 29;
  3532  16B8  0021               	movlb	1	; select bank1
  3533  16B9  081D               	movf	29,w	;volatile
  3534  16BA  3983               	andlw	-125
  3535  16BB  3874               	iorlw	116
  3536  16BC  009D               	movwf	29	;volatile
  3537                           
  3538                           ;ADC.c: 27: }
  3539  16BD  0008               	return
  3540  16BE                     l2730:	
  3541                           
  3542                           ;ADC.c: 28: else if(ch == 3){
  3543  16BE  3003               	movlw	3
  3544  16BF  0671               	xorwf	SetADCChannel@ch,w
  3545  16C0  1D03               	btfss	3,2
  3546  16C1  0008               	return
  3547                           
  3548                           ;ADC.c: 29: ADCON0bits.CHS = 3;
  3549  16C2  0021               	movlb	1	; select bank1
  3550  16C3  081D               	movf	29,w	;volatile
  3551  16C4  3983               	andlw	-125
  3552  16C5  380C               	iorlw	12
  3553  16C6  009D               	movwf	29	;volatile
  3554  16C7  0008               	return
  3555  16C8                     __end_of_SetADCChannel:	
  3556                           
  3557                           	psect	text13
  3558  15E7                     __ptext13:	
  3559 ;; *************** function _ReadCharger *****************
  3560 ;; Defined at:
  3561 ;;		line 101 in file "Function.c"
  3562 ;; Parameters:    Size  Location     Type
  3563 ;;		None
  3564 ;; Auto vars:     Size  Location     Type
  3565 ;;		None
  3566 ;; Return value:  Size  Location     Type
  3567 ;;                  1    wreg      unsigned char 
  3568 ;; Registers used:
  3569 ;;		wreg
  3570 ;; Tracked objects:
  3571 ;;		On entry : 0/0
  3572 ;;		On exit  : 0/0
  3573 ;;		Unchanged: 0/0
  3574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3578 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3579 ;;Total ram usage:        0 bytes
  3580 ;; Hardware stack levels used:    1
  3581 ;; Hardware stack levels required when called:    2
  3582 ;; This function calls:
  3583 ;;		Nothing
  3584 ;; This function is called by:
  3585 ;;		_RadioOperation
  3586 ;; This function uses a non-reentrant model
  3587 ;;
  3588                           
  3589                           
  3590                           ;psect for function _ReadCharger
  3591  15E7                     _ReadCharger:	
  3592                           
  3593                           ;Function.c: 103: if(!PORTCbits.RC0 && PORTCbits.RC1){
  3594                           
  3595                           ;incstack = 0
  3596                           ; Regs used in _ReadCharger: [wreg]
  3597  15E7  0020               	movlb	0	; select bank0
  3598  15E8  1C0E               	btfss	14,0	;volatile
  3599  15E9  1C8E               	btfss	14,1	;volatile
  3600  15EA  2DED               	goto	l74
  3601                           
  3602                           ;Function.c: 104: return 1;
  3603  15EB  3001               	movlw	1
  3604  15EC  0008               	return
  3605  15ED                     l74:	
  3606                           
  3607                           ;Function.c: 105: }
  3608                           ;Function.c: 107: if(PORTCbits.RC0 && !PORTCbits.RC1){
  3609  15ED  180E               	btfsc	14,0	;volatile
  3610  15EE  188E               	btfsc	14,1	;volatile
  3611  15EF  2DF2               	goto	l76
  3612                           
  3613                           ;Function.c: 108: return 2;
  3614  15F0  3002               	movlw	2
  3615  15F1  0008               	return
  3616  15F2                     l76:	
  3617                           
  3618                           ;Function.c: 109: }
  3619                           ;Function.c: 111: if(PORTCbits.RC0 && PORTCbits.RC1){
  3620  15F2  180E               	btfsc	14,0	;volatile
  3621  15F3  1C8E               	btfss	14,1	;volatile
  3622  15F4  2DF7               	goto	l2756
  3623                           
  3624                           ;Function.c: 112: return 0;
  3625  15F5  3000               	movlw	0
  3626                           
  3627                           ;Function.c: 113: }
  3628  15F6  0008               	return
  3629  15F7                     l2756:	
  3630                           
  3631                           ;Function.c: 114: else{
  3632                           ;Function.c: 115: return 255;
  3633  15F7  30FF               	movlw	255
  3634  15F8  0008               	return
  3635  15F9                     __end_of_ReadCharger:	
  3636                           
  3637                           	psect	text14
  3638  0800                     __ptext14:	
  3639 ;; *************** function _GetTicker *****************
  3640 ;; Defined at:
  3641 ;;		line 61 in file "Timer.c"
  3642 ;; Parameters:    Size  Location     Type
  3643 ;;		None
  3644 ;; Auto vars:     Size  Location     Type
  3645 ;;		None
  3646 ;; Return value:  Size  Location     Type
  3647 ;;                  2  112[None  ] unsigned int 
  3648 ;; Registers used:
  3649 ;;		None
  3650 ;; Tracked objects:
  3651 ;;		On entry : 0/0
  3652 ;;		On exit  : 0/0
  3653 ;;		Unchanged: 0/0
  3654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3658 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3659 ;;Total ram usage:        0 bytes
  3660 ;; Hardware stack levels used:    1
  3661 ;; Hardware stack levels required when called:    2
  3662 ;; This function calls:
  3663 ;;		Nothing
  3664 ;; This function is called by:
  3665 ;;		_RadioOperation
  3666 ;; This function uses a non-reentrant model
  3667 ;;
  3668                           
  3669                           
  3670                           ;psect for function _GetTicker
  3671  0800                     _GetTicker:	
  3672                           
  3673                           ;Timer.c: 62: return ticker;
  3674                           ;	Return value of _GetTicker is never used
  3675                           
  3676                           ;incstack = 0
  3677                           ; Regs used in _GetTicker: []
  3678  0800  0008               	return
  3679  0801                     __end_of_GetTicker:	
  3680                           
  3681                           	psect	text15
  3682  1569                     __ptext15:	
  3683 ;; *************** function _ClearTicker *****************
  3684 ;; Defined at:
  3685 ;;		line 57 in file "Timer.c"
  3686 ;; Parameters:    Size  Location     Type
  3687 ;;		None
  3688 ;; Auto vars:     Size  Location     Type
  3689 ;;		None
  3690 ;; Return value:  Size  Location     Type
  3691 ;;                  1    wreg      void 
  3692 ;; Registers used:
  3693 ;;		status,2
  3694 ;; Tracked objects:
  3695 ;;		On entry : 0/0
  3696 ;;		On exit  : 0/0
  3697 ;;		Unchanged: 0/0
  3698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3703 ;;Total ram usage:        0 bytes
  3704 ;; Hardware stack levels used:    1
  3705 ;; Hardware stack levels required when called:    2
  3706 ;; This function calls:
  3707 ;;		Nothing
  3708 ;; This function is called by:
  3709 ;;		_RadioOperation
  3710 ;; This function uses a non-reentrant model
  3711 ;;
  3712                           
  3713                           
  3714                           ;psect for function _ClearTicker
  3715  1569                     _ClearTicker:	
  3716                           
  3717                           ;Timer.c: 58: ticker = 0;
  3718                           
  3719                           ;incstack = 0
  3720                           ; Regs used in _ClearTicker: [status,2]
  3721  1569  0021               	movlb	1	; select bank1
  3722  156A  01BF               	clrf	_ticker^(0+128)
  3723  156B  01C0               	clrf	(_ticker+1)^(0+128)
  3724  156C  0008               	return
  3725  156D                     __end_of_ClearTicker:	
  3726                           
  3727                           	psect	text16
  3728  07FD                     __ptext16:	
  3729 ;; *************** function _RadioBegin *****************
  3730 ;; Defined at:
  3731 ;;		line 21 in file "Radio.c"
  3732 ;; Parameters:    Size  Location     Type
  3733 ;;		None
  3734 ;; Auto vars:     Size  Location     Type
  3735 ;;		None
  3736 ;; Return value:  Size  Location     Type
  3737 ;;                  1    wreg      void 
  3738 ;; Registers used:
  3739 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3740 ;; Tracked objects:
  3741 ;;		On entry : 0/0
  3742 ;;		On exit  : 0/0
  3743 ;;		Unchanged: 0/0
  3744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3748 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3749 ;;Total ram usage:        0 bytes
  3750 ;; Hardware stack levels used:    1
  3751 ;; Hardware stack levels required when called:    8
  3752 ;; This function calls:
  3753 ;;		_SR_FRSStart
  3754 ;; This function is called by:
  3755 ;;		_main
  3756 ;; This function uses a non-reentrant model
  3757 ;;
  3758                           
  3759                           
  3760                           ;psect for function _RadioBegin
  3761  07FD                     _RadioBegin:	
  3762                           
  3763                           ;Radio.c: 22: SR_FRSStart();
  3764                           
  3765                           ;incstack = 0
  3766                           ; Regs used in _RadioBegin: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3767  07FD  3197  27C3         	fcall	_SR_FRSStart
  3768  07FF  0008               	return
  3769  0800                     __end_of_RadioBegin:	
  3770                           
  3771                           	psect	text17
  3772  17C3                     __ptext17:	
  3773 ;; *************** function _SR_FRSStart *****************
  3774 ;; Defined at:
  3775 ;;		line 15 in file "SR_FRS.c"
  3776 ;; Parameters:    Size  Location     Type
  3777 ;;		None
  3778 ;; Auto vars:     Size  Location     Type
  3779 ;;		None
  3780 ;; Return value:  Size  Location     Type
  3781 ;;                  1    wreg      void 
  3782 ;; Registers used:
  3783 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3784 ;; Tracked objects:
  3785 ;;		On entry : 0/0
  3786 ;;		On exit  : 0/0
  3787 ;;		Unchanged: 0/0
  3788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3793 ;;Total ram usage:        0 bytes
  3794 ;; Hardware stack levels used:    1
  3795 ;; Hardware stack levels required when called:    7
  3796 ;; This function calls:
  3797 ;;		_Delay
  3798 ;;		_SetCommandMode
  3799 ;;		_SetFrequency
  3800 ;;		_SetMIC
  3801 ;;		_SetPowerSave
  3802 ;;		_SetVOX
  3803 ;;		_SetVolume
  3804 ;; This function is called by:
  3805 ;;		_RadioBegin
  3806 ;; This function uses a non-reentrant model
  3807 ;;
  3808                           
  3809                           
  3810                           ;psect for function _SR_FRSStart
  3811  17C3                     _SR_FRSStart:	
  3812                           
  3813                           ;SR_FRS.c: 16: SetCommandMode();
  3814                           
  3815                           ;incstack = 0
  3816                           ; Regs used in _SR_FRSStart: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3817  17C3  3188  2001  3197   	fcall	_SetCommandMode
  3818                           
  3819                           ;SR_FRS.c: 17: Delay(100);
  3820  17C6  3064               	movlw	100
  3821  17C7  00F1               	movwf	Delay@wait
  3822  17C8  3000               	movlw	0
  3823  17C9  00F2               	movwf	Delay@wait+1
  3824  17CA  3196  261F  3197   	fcall	_Delay
  3825                           
  3826                           ;SR_FRS.c: 19: SetFrequency();
  3827  17CD  3197  270E  3197   	fcall	_SetFrequency
  3828                           
  3829                           ;SR_FRS.c: 20: Delay(100);
  3830  17D0  3064               	movlw	100
  3831  17D1  00F1               	movwf	Delay@wait
  3832  17D2  3000               	movlw	0
  3833  17D3  00F2               	movwf	Delay@wait+1
  3834  17D4  3196  261F  3197   	fcall	_Delay
  3835                           
  3836                           ;SR_FRS.c: 22: SetPowerSave();
  3837  17D7  3195  25BE  3197   	fcall	_SetPowerSave
  3838                           
  3839                           ;SR_FRS.c: 23: Delay(100);
  3840  17DA  3064               	movlw	100
  3841  17DB  00F1               	movwf	Delay@wait
  3842  17DC  3000               	movlw	0
  3843  17DD  00F2               	movwf	Delay@wait+1
  3844  17DE  3196  261F  3197   	fcall	_Delay
  3845                           
  3846                           ;SR_FRS.c: 25: SetVolume(5);
  3847  17E1  3005               	movlw	5
  3848  17E2  3196  2639  3197   	fcall	_SetVolume
  3849                           
  3850                           ;SR_FRS.c: 26: Delay(100);
  3851  17E5  3064               	movlw	100
  3852  17E6  00F1               	movwf	Delay@wait
  3853  17E7  3000               	movlw	0
  3854  17E8  00F2               	movwf	Delay@wait+1
  3855  17E9  3196  261F  3197   	fcall	_Delay
  3856                           
  3857                           ;SR_FRS.c: 28: SetVOX(0);
  3858  17EC  3000               	movlw	0
  3859  17ED  0020               	movlb	0	; select bank0
  3860  17EE  00EE               	movwf	SetVOX@volume
  3861  17EF  00EF               	movwf	SetVOX@volume+1
  3862  17F0  3196  2670  3197   	fcall	_SetVOX
  3863                           
  3864                           ;SR_FRS.c: 29: Delay(100);
  3865  17F3  3064               	movlw	100
  3866  17F4  00F1               	movwf	Delay@wait
  3867  17F5  3000               	movlw	0
  3868  17F6  00F2               	movwf	Delay@wait+1
  3869  17F7  3196  261F  3197   	fcall	_Delay
  3870                           
  3871                           ;SR_FRS.c: 31: SetMIC(5,0);
  3872  17FA  0020               	movlb	0	; select bank0
  3873  17FB  01EE               	clrf	SetMIC@scram
  3874  17FC  3005               	movlw	5
  3875  17FD  3197  2734         	fcall	_SetMIC
  3876  17FF  0008               	return
  3877  1800                     __end_of_SR_FRSStart:	
  3878                           
  3879                           	psect	text18
  3880  1639                     __ptext18:	
  3881 ;; *************** function _SetVolume *****************
  3882 ;; Defined at:
  3883 ;;		line 49 in file "SR_FRS.c"
  3884 ;; Parameters:    Size  Location     Type
  3885 ;;  volume          1    wreg     unsigned char 
  3886 ;; Auto vars:     Size  Location     Type
  3887 ;;  volume          1   28[BANK1 ] unsigned char 
  3888 ;; Return value:  Size  Location     Type
  3889 ;;                  1    wreg      void 
  3890 ;; Registers used:
  3891 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3892 ;; Tracked objects:
  3893 ;;		On entry : 0/0
  3894 ;;		On exit  : 0/0
  3895 ;;		Unchanged: 0/0
  3896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3898 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3899 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3900 ;;      Totals:         0       2       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3901 ;;Total ram usage:        3 bytes
  3902 ;; Hardware stack levels used:    1
  3903 ;; Hardware stack levels required when called:    6
  3904 ;; This function calls:
  3905 ;;		_printf
  3906 ;; This function is called by:
  3907 ;;		_SR_FRSStart
  3908 ;; This function uses a non-reentrant model
  3909 ;;
  3910                           
  3911                           
  3912                           ;psect for function _SetVolume
  3913  1639                     _SetVolume:	
  3914                           
  3915                           ;incstack = 0
  3916                           ; Regs used in _SetVolume: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3917                           ;SetVolume@volume stored from wreg
  3918  1639  0021               	movlb	1	; select bank1
  3919  163A  00E1               	movwf	SetVolume@volume^(0+128)
  3920                           
  3921                           ;SR_FRS.c: 50: if((volume < 9) && (volume > 1)){
  3922  163B  3009               	movlw	9
  3923  163C  0261               	subwf	SetVolume@volume^(0+128),w
  3924  163D  1803               	skipnc
  3925  163E  0008               	return
  3926  163F  3002               	movlw	2
  3927  1640  0261               	subwf	SetVolume@volume^(0+128),w
  3928  1641  1C03               	skipc
  3929  1642  0008               	return
  3930                           
  3931                           ;SR_FRS.c: 51: printf("AT+DMOSETVOLUME=%c",volume);
  3932  1643  30C6               	movlw	low (STR_6| (0+32768))
  3933  1644  0020               	movlb	0	; select bank0
  3934  1645  00DC               	movwf	printf@f
  3935  1646  3090               	movlw	high (STR_6| (0+32768))
  3936  1647  00DD               	movwf	printf@f+1
  3937  1648  0021               	movlb	1	; select bank1
  3938  1649  0861               	movf	SetVolume@volume^(0+128),w
  3939  164A  0020               	movlb	0	; select bank0
  3940  164B  00EE               	movwf	??_SetVolume
  3941  164C  01EF               	clrf	??_SetVolume+1
  3942  164D  086E               	movf	??_SetVolume,w
  3943  164E  00DE               	movwf	?_printf+2
  3944  164F  086F               	movf	??_SetVolume+1,w
  3945  1650  00DF               	movwf	?_printf+3
  3946  1651  3180  2031         	fcall	_printf
  3947  1653  0008               	return
  3948  1654                     __end_of_SetVolume:	
  3949                           
  3950                           	psect	text19
  3951  1670                     __ptext19:	
  3952 ;; *************** function _SetVOX *****************
  3953 ;; Defined at:
  3954 ;;		line 55 in file "SR_FRS.c"
  3955 ;; Parameters:    Size  Location     Type
  3956 ;;  volume          2   78[BANK0 ] int 
  3957 ;; Auto vars:     Size  Location     Type
  3958 ;;		None
  3959 ;; Return value:  Size  Location     Type
  3960 ;;                  1    wreg      void 
  3961 ;; Registers used:
  3962 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3963 ;; Tracked objects:
  3964 ;;		On entry : 0/0
  3965 ;;		On exit  : 0/0
  3966 ;;		Unchanged: 0/0
  3967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3968 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3970 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3971 ;;      Totals:         0       2       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3972 ;;Total ram usage:        3 bytes
  3973 ;; Hardware stack levels used:    1
  3974 ;; Hardware stack levels required when called:    6
  3975 ;; This function calls:
  3976 ;;		_printf
  3977 ;; This function is called by:
  3978 ;;		_SR_FRSStart
  3979 ;; This function uses a non-reentrant model
  3980 ;;
  3981                           
  3982                           
  3983                           ;psect for function _SetVOX
  3984  1670                     _SetVOX:	
  3985                           
  3986                           ;SR_FRS.c: 56: if((volume < 8) && (volume >= 0)){
  3987                           
  3988                           ;incstack = 0
  3989                           ; Regs used in _SetVOX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3990  1670  0020               	movlb	0	; select bank0
  3991  1671  086F               	movf	SetVOX@volume+1,w
  3992  1672  3A80               	xorlw	128
  3993  1673  0021               	movlb	1	; select bank1
  3994  1674  00E1               	movwf	??_SetVOX^(0+128)
  3995  1675  3080               	movlw	128
  3996  1676  0261               	subwf	??_SetVOX^(0+128),w
  3997  1677  1D03               	skipz
  3998  1678  2E7C               	goto	u5815
  3999  1679  3008               	movlw	8
  4000  167A  0020               	movlb	0	; select bank0
  4001  167B  026E               	subwf	SetVOX@volume,w
  4002  167C                     u5815:	
  4003  167C  1803               	skipnc
  4004  167D  0008               	return
  4005  167E  0020               	movlb	0	; select bank0
  4006  167F  1BEF               	btfsc	SetVOX@volume+1,7
  4007  1680  0008               	return
  4008                           
  4009                           ;SR_FRS.c: 57: printf("AT+DMOSETVOLUME=%c",volume);
  4010  1681  30C6               	movlw	low (STR_6| (0+32768))
  4011  1682  00DC               	movwf	printf@f
  4012  1683  3090               	movlw	high (STR_6| (0+32768))
  4013  1684  00DD               	movwf	printf@f+1
  4014  1685  086F               	movf	SetVOX@volume+1,w
  4015  1686  00DF               	movwf	?_printf+3
  4016  1687  086E               	movf	SetVOX@volume,w
  4017  1688  00DE               	movwf	?_printf+2
  4018  1689  3180  2031         	fcall	_printf
  4019  168B  0008               	return
  4020  168C                     __end_of_SetVOX:	
  4021                           
  4022                           	psect	text20
  4023  15BE                     __ptext20:	
  4024 ;; *************** function _SetPowerSave *****************
  4025 ;; Defined at:
  4026 ;;		line 44 in file "SR_FRS.c"
  4027 ;; Parameters:    Size  Location     Type
  4028 ;;		None
  4029 ;; Auto vars:     Size  Location     Type
  4030 ;;		None
  4031 ;; Return value:  Size  Location     Type
  4032 ;;                  1    wreg      void 
  4033 ;; Registers used:
  4034 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4035 ;; Tracked objects:
  4036 ;;		On entry : 0/0
  4037 ;;		On exit  : 0/0
  4038 ;;		Unchanged: 0/0
  4039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4043 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4044 ;;Total ram usage:        0 bytes
  4045 ;; Hardware stack levels used:    1
  4046 ;; Hardware stack levels required when called:    6
  4047 ;; This function calls:
  4048 ;;		_printf
  4049 ;; This function is called by:
  4050 ;;		_SR_FRSStart
  4051 ;; This function uses a non-reentrant model
  4052 ;;
  4053                           
  4054                           
  4055                           ;psect for function _SetPowerSave
  4056  15BE                     _SetPowerSave:	
  4057                           
  4058                           ;SR_FRS.c: 46: printf("AT+DMOAUTOPOWCONTR=%c",1);
  4059                           
  4060                           ;incstack = 0
  4061                           ; Regs used in _SetPowerSave: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4062  15BE  30B0               	movlw	low (STR_5| (0+32768))
  4063  15BF  0020               	movlb	0	; select bank0
  4064  15C0  00DC               	movwf	printf@f
  4065  15C1  3090               	movlw	high (STR_5| (0+32768))
  4066  15C2  00DD               	movwf	printf@f+1
  4067  15C3  3001               	movlw	1
  4068  15C4  00DE               	movwf	?_printf+2
  4069  15C5  3000               	movlw	0
  4070  15C6  00DF               	movwf	?_printf+3
  4071  15C7  3180  2031         	fcall	_printf
  4072  15C9  0008               	return
  4073  15CA                     __end_of_SetPowerSave:	
  4074                           
  4075                           	psect	text21
  4076  1734                     __ptext21:	
  4077 ;; *************** function _SetMIC *****************
  4078 ;; Defined at:
  4079 ;;		line 61 in file "SR_FRS.c"
  4080 ;; Parameters:    Size  Location     Type
  4081 ;;  volume          1    wreg     unsigned char 
  4082 ;;  scram           1   78[BANK0 ] unsigned char 
  4083 ;; Auto vars:     Size  Location     Type
  4084 ;;  volume          1   79[BANK0 ] unsigned char 
  4085 ;; Return value:  Size  Location     Type
  4086 ;;                  1    wreg      void 
  4087 ;; Registers used:
  4088 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4089 ;; Tracked objects:
  4090 ;;		On entry : 0/0
  4091 ;;		On exit  : 0/0
  4092 ;;		Unchanged: 0/0
  4093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4094 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4095 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4096 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4097 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4098 ;;Total ram usage:        6 bytes
  4099 ;; Hardware stack levels used:    1
  4100 ;; Hardware stack levels required when called:    6
  4101 ;; This function calls:
  4102 ;;		_printf
  4103 ;; This function is called by:
  4104 ;;		_SR_FRSStart
  4105 ;; This function uses a non-reentrant model
  4106 ;;
  4107                           
  4108                           
  4109                           ;psect for function _SetMIC
  4110  1734                     _SetMIC:	
  4111                           
  4112                           ;incstack = 0
  4113                           ; Regs used in _SetMIC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4114                           ;SetMIC@volume stored from wreg
  4115  1734  0020               	movlb	0	; select bank0
  4116  1735  00EF               	movwf	SetMIC@volume
  4117                           
  4118                           ;SR_FRS.c: 62: if((volume < 8) && (volume > 0)){
  4119  1736  3008               	movlw	8
  4120  1737  026F               	subwf	SetMIC@volume,w
  4121  1738  1803               	skipnc
  4122  1739  0008               	return
  4123  173A  086F               	movf	SetMIC@volume,w
  4124  173B  1903               	btfsc	3,2
  4125  173C  0008               	return
  4126                           
  4127                           ;SR_FRS.c: 63: printf("AT+DMOSETMIC=%c,%c,%c",volume,scram,0);
  4128  173D  309A               	movlw	low (STR_8| (0+32768))
  4129  173E  00DC               	movwf	printf@f
  4130  173F  3090               	movlw	high (STR_8| (0+32768))
  4131  1740  00DD               	movwf	printf@f+1
  4132  1741  086F               	movf	SetMIC@volume,w
  4133  1742  0021               	movlb	1	; select bank1
  4134  1743  00E1               	movwf	??_SetMIC^(0+128)
  4135  1744  01E2               	clrf	(??_SetMIC^(0+128)+1)
  4136  1745  0861               	movf	??_SetMIC^(0+128),w
  4137  1746  0020               	movlb	0	; select bank0
  4138  1747  00DE               	movwf	?_printf+2
  4139  1748  0021               	movlb	1	; select bank1
  4140  1749  0862               	movf	(??_SetMIC+1)^(0+128),w
  4141  174A  0020               	movlb	0	; select bank0
  4142  174B  00DF               	movwf	?_printf+3
  4143  174C  086E               	movf	SetMIC@scram,w
  4144  174D  0021               	movlb	1	; select bank1
  4145  174E  00E3               	movwf	(??_SetMIC+2)^(0+128)
  4146  174F  01E4               	clrf	((??_SetMIC+2)^(0+128)+1)
  4147  1750  0863               	movf	(??_SetMIC+2)^(0+128),w
  4148  1751  0020               	movlb	0	; select bank0
  4149  1752  00E0               	movwf	?_printf+4
  4150  1753  0021               	movlb	1	; select bank1
  4151  1754  0864               	movf	(??_SetMIC+3)^(0+128),w
  4152  1755  0020               	movlb	0	; select bank0
  4153  1756  00E1               	movwf	?_printf+5
  4154  1757  3000               	movlw	0
  4155  1758  00E2               	movwf	?_printf+6
  4156  1759  00E3               	movwf	?_printf+7
  4157  175A  3180  2031         	fcall	_printf
  4158  175C  0008               	return
  4159  175D                     __end_of_SetMIC:	
  4160                           
  4161                           	psect	text22
  4162  170E                     __ptext22:	
  4163 ;; *************** function _SetFrequency *****************
  4164 ;; Defined at:
  4165 ;;		line 40 in file "SR_FRS.c"
  4166 ;; Parameters:    Size  Location     Type
  4167 ;;		None
  4168 ;; Auto vars:     Size  Location     Type
  4169 ;;		None
  4170 ;; Return value:  Size  Location     Type
  4171 ;;                  1    wreg      void 
  4172 ;; Registers used:
  4173 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4174 ;; Tracked objects:
  4175 ;;		On entry : 0/0
  4176 ;;		On exit  : 0/0
  4177 ;;		Unchanged: 0/0
  4178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4182 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4183 ;;Total ram usage:        0 bytes
  4184 ;; Hardware stack levels used:    1
  4185 ;; Hardware stack levels required when called:    6
  4186 ;; This function calls:
  4187 ;;		_printf
  4188 ;; This function is called by:
  4189 ;;		_SR_FRSStart
  4190 ;; This function uses a non-reentrant model
  4191 ;;
  4192                           
  4193                           
  4194                           ;psect for function _SetFrequency
  4195  170E                     _SetFrequency:	
  4196                           
  4197                           ;SR_FRS.c: 41: printf("AT+DMOSETGROUP=%d,%f,%f,%d,%d,%d,%d",0,136.0250,136.0250,83,2,83,
      +                          0);
  4198                           
  4199                           ;incstack = 0
  4200                           ; Regs used in _SetFrequency: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4201  170E  3076               	movlw	low (STR_4| (0+32768))
  4202  170F  0020               	movlb	0	; select bank0
  4203  1710  00DC               	movwf	printf@f
  4204  1711  3090               	movlw	high (STR_4| (0+32768))
  4205  1712  00DD               	movwf	printf@f+1
  4206  1713  3000               	movlw	0
  4207  1714  00DE               	movwf	?_printf+2
  4208  1715  00DF               	movwf	?_printf+3
  4209  1716  3006               	movlw	6
  4210  1717  00E0               	movwf	?_printf+4
  4211  1718  3008               	movlw	8
  4212  1719  00E1               	movwf	?_printf+5
  4213  171A  3043               	movlw	67
  4214  171B  00E2               	movwf	?_printf+6
  4215  171C  3006               	movlw	6
  4216  171D  00E3               	movwf	?_printf+7
  4217  171E  3008               	movlw	8
  4218  171F  00E4               	movwf	?_printf+8
  4219  1720  3043               	movlw	67
  4220  1721  00E5               	movwf	?_printf+9
  4221  1722  3053               	movlw	83
  4222  1723  00E6               	movwf	?_printf+10
  4223  1724  3000               	movlw	0
  4224  1725  00E7               	movwf	?_printf+11
  4225  1726  3002               	movlw	2
  4226  1727  00E8               	movwf	?_printf+12
  4227  1728  3000               	movlw	0
  4228  1729  00E9               	movwf	?_printf+13
  4229  172A  3053               	movlw	83
  4230  172B  00EA               	movwf	?_printf+14
  4231  172C  3000               	movlw	0
  4232  172D  00EB               	movwf	?_printf+15
  4233  172E  3000               	movlw	0
  4234  172F  00EC               	movwf	?_printf+16
  4235  1730  00ED               	movwf	?_printf+17
  4236  1731  3180  2031         	fcall	_printf
  4237  1733  0008               	return
  4238  1734                     __end_of_SetFrequency:	
  4239                           
  4240                           	psect	text23
  4241  0801                     __ptext23:	
  4242 ;; *************** function _SetCommandMode *****************
  4243 ;; Defined at:
  4244 ;;		line 34 in file "SR_FRS.c"
  4245 ;; Parameters:    Size  Location     Type
  4246 ;;		None
  4247 ;; Auto vars:     Size  Location     Type
  4248 ;;		None
  4249 ;; Return value:  Size  Location     Type
  4250 ;;                  1    wreg      void 
  4251 ;; Registers used:
  4252 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4253 ;; Tracked objects:
  4254 ;;		On entry : 0/0
  4255 ;;		On exit  : 0/0
  4256 ;;		Unchanged: 0/0
  4257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4262 ;;Total ram usage:        0 bytes
  4263 ;; Hardware stack levels used:    1
  4264 ;; Hardware stack levels required when called:    6
  4265 ;; This function calls:
  4266 ;;		_printf
  4267 ;; This function is called by:
  4268 ;;		_SR_FRSStart
  4269 ;; This function uses a non-reentrant model
  4270 ;;
  4271                           
  4272                           
  4273                           ;psect for function _SetCommandMode
  4274  0801                     _SetCommandMode:	
  4275                           
  4276                           ;SR_FRS.c: 35: printf("\r\n");
  4277                           
  4278                           ;incstack = 0
  4279                           ; Regs used in _SetCommandMode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4280  0801  30E7               	movlw	low (STR_1| (0+32768))
  4281  0802  0020               	movlb	0	; select bank0
  4282  0803  00DC               	movwf	printf@f
  4283  0804  3090               	movlw	high (STR_1| (0+32768))
  4284  0805  00DD               	movwf	printf@f+1
  4285  0806  3180  2031  3188   	fcall	_printf
  4286                           
  4287                           ;SR_FRS.c: 36: printf("AT+DMOCONNECT");
  4288  0809  30D9               	movlw	low (STR_2| (0+32768))
  4289  080A  0020               	movlb	0	; select bank0
  4290  080B  00DC               	movwf	printf@f
  4291  080C  3090               	movlw	high (STR_2| (0+32768))
  4292  080D  00DD               	movwf	printf@f+1
  4293  080E  3180  2031  3188   	fcall	_printf
  4294                           
  4295                           ;SR_FRS.c: 37: printf("\r\n");
  4296  0811  30E7               	movlw	low (STR_1| (0+32768))
  4297  0812  0020               	movlb	0	; select bank0
  4298  0813  00DC               	movwf	printf@f
  4299  0814  3090               	movlw	high (STR_1| (0+32768))
  4300  0815  00DD               	movwf	printf@f+1
  4301  0816  3180  2031         	fcall	_printf
  4302  0818  0008               	return
  4303  0819                     __end_of_SetCommandMode:	
  4304                           
  4305                           	psect	text24
  4306  0031                     __ptext24:	
  4307 ;; *************** function _printf *****************
  4308 ;; Defined at:
  4309 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  4310 ;; Parameters:    Size  Location     Type
  4311 ;;  f               2   60[BANK0 ] PTR const unsigned char 
  4312 ;;		 -> STR_8(22), STR_7(19), STR_6(19), STR_5(22), 
  4313 ;;		 -> STR_4(36), STR_3(3), STR_2(14), STR_1(3), 
  4314 ;; Auto vars:     Size  Location     Type
  4315 ;;  tmpval          4   20[BANK1 ] struct .
  4316 ;;  val             4   14[BANK1 ] unsigned long 
  4317 ;;  fval            3   24[BANK1 ] unsigned long 
  4318 ;;  exp             2   18[BANK1 ] int 
  4319 ;;  prec            2   12[BANK1 ] int 
  4320 ;;  flag            2    9[BANK1 ] unsigned short 
  4321 ;;  cp              2    0        PTR const unsigned char 
  4322 ;;  len             2    0        unsigned int 
  4323 ;;  width           2    0        int 
  4324 ;;  c               1   27[BANK1 ] char 
  4325 ;;  ap              1   11[BANK1 ] PTR void [1]
  4326 ;;		 -> ?_printf(2), 
  4327 ;;  d               1    0        unsigned char 
  4328 ;; Return value:  Size  Location     Type
  4329 ;;                  2   60[BANK0 ] int 
  4330 ;; Registers used:
  4331 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4332 ;; Tracked objects:
  4333 ;;		On entry : 0/0
  4334 ;;		On exit  : 0/0
  4335 ;;		Unchanged: 0/0
  4336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4337 ;;      Params:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4338 ;;      Locals:         0       0      22       0       0       0       0       0       0       0       0       0       
      +0       0
  4339 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  4340 ;;      Totals:         0      18      28       0       0       0       0       0       0       0       0       0       
      +0       0
  4341 ;;Total ram usage:       46 bytes
  4342 ;; Hardware stack levels used:    1
  4343 ;; Hardware stack levels required when called:    5
  4344 ;; This function calls:
  4345 ;;		___awdiv
  4346 ;;		___ftadd
  4347 ;;		___ftge
  4348 ;;		___ftmul
  4349 ;;		___ftneg
  4350 ;;		___ftsub
  4351 ;;		___fttol
  4352 ;;		___lldiv
  4353 ;;		___llmod
  4354 ;;		___lltoft
  4355 ;;		___wmul
  4356 ;;		__div_to_l_
  4357 ;;		__tdiv_to_l_
  4358 ;;		_fround
  4359 ;;		_putch
  4360 ;;		_scale
  4361 ;; This function is called by:
  4362 ;;		_SetCommandMode
  4363 ;;		_SetFrequency
  4364 ;;		_SetPowerSave
  4365 ;;		_SetVolume
  4366 ;;		_SetVOX
  4367 ;;		_SetMIC
  4368 ;; This function uses a non-reentrant model
  4369 ;;
  4370                           
  4371                           
  4372                           ;psect for function _printf
  4373  0031                     _printf:	
  4374                           
  4375                           ;doprnt.c: 466: va_list ap;
  4376                           ;doprnt.c: 499: signed char c;
  4377                           ;doprnt.c: 501: int width;
  4378                           ;doprnt.c: 504: int prec;
  4379                           ;doprnt.c: 508: unsigned short flag;
  4380                           ;doprnt.c: 515: char d;
  4381                           ;doprnt.c: 516: double fval;
  4382                           ;doprnt.c: 517: int exp;
  4383                           ;doprnt.c: 523: union {
  4384                           ;doprnt.c: 524: unsigned long vd;
  4385                           ;doprnt.c: 525: double integ;
  4386                           ;doprnt.c: 526: } tmpval;
  4387                           ;doprnt.c: 528: unsigned long val;
  4388                           ;doprnt.c: 529: unsigned len;
  4389                           ;doprnt.c: 530: const char * cp;
  4390                           ;doprnt.c: 533: *ap = __va_start();
  4391                           
  4392                           ;incstack = 0
  4393                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4394  0031  305E               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4395  0032  0021               	movlb	1	; select bank1
  4396  0033  00C5               	movwf	??_printf^(0+128)
  4397  0034  0845               	movf	??_printf^(0+128),w
  4398  0035  00D0               	movwf	printf@ap^(0+128)
  4399  0036                     l3676:	
  4400                           ;doprnt.c: 536: while(c = *f++) {
  4401                           
  4402  0036  0020               	movlb	0	; select bank0
  4403  0037  085D               	movf	printf@f+1,w
  4404  0038  0021               	movlb	1	; select bank1
  4405  0039  00C6               	movwf	(??_printf^(0+128)+1)
  4406  003A  0020               	movlb	0	; select bank0
  4407  003B  085C               	movf	printf@f,w
  4408  003C  0021               	movlb	1	; select bank1
  4409  003D  00C5               	movwf	??_printf^(0+128)
  4410  003E  0020               	movlb	0	; select bank0
  4411  003F  0ADC               	incf	printf@f,f
  4412  0040  1903               	skipnz
  4413  0041  0ADD               	incf	printf@f+1,f
  4414  0042  0021               	movlb	1	; select bank1
  4415  0043  0845               	movf	??_printf^(0+128),w
  4416  0044  0084               	movwf	4
  4417  0045  0846               	movf	(??_printf+1)^(0+128),w
  4418  0046  0085               	movwf	5
  4419  0047  0800               	movf	0,w	;code access
  4420  0048  00C7               	movwf	(??_printf+2)^(0+128)
  4421  0049  0847               	movf	(??_printf+2)^(0+128),w
  4422  004A  00E0               	movwf	printf@c^(0+128)
  4423  004B  0860               	movf	printf@c^(0+128),w
  4424  004C  1903               	btfsc	3,2
  4425  004D  0008               	return
  4426                           
  4427                           ;doprnt.c: 538: if(c != '%')
  4428  004E  3025               	movlw	37
  4429  004F  0660               	xorwf	printf@c^(0+128),w
  4430  0050  1903               	btfsc	3,2
  4431  0051  2857               	goto	l3502
  4432                           
  4433                           ;doprnt.c: 540: {
  4434                           ;doprnt.c: 541: (putch(c) );
  4435  0052  0860               	movf	printf@c^(0+128),w
  4436  0053  3195  2572  3180   	fcall	_putch
  4437                           
  4438                           ;doprnt.c: 542: continue;
  4439  0056  2836               	goto	l3676
  4440  0057                     l3502:	
  4441                           
  4442                           ;doprnt.c: 543: }
  4443                           ;doprnt.c: 548: flag = 0;
  4444  0057  0021               	movlb	1	; select bank1
  4445  0058  01CE               	clrf	printf@flag^(0+128)
  4446  0059  01CF               	clrf	(printf@flag+1)^(0+128)
  4447                           
  4448                           ;doprnt.c: 635: switch(c = *f++) {
  4449  005A  286D               	goto	l3512
  4450  005B                     l322:	
  4451                           ;doprnt.c: 662: case 'f':
  4452                           
  4453                           ;doprnt.c: 638: goto alldone;
  4454                           
  4455                           ;doprnt.c: 637: case 0:
  4456                           
  4457                           
  4458                           ;doprnt.c: 663: flag |= 0x400;
  4459  005B  154F               	bsf	(printf@flag^(0+128)+1),2
  4460                           
  4461                           ;doprnt.c: 698: case 'i':
  4462                           ;doprnt.c: 699: break;
  4463                           
  4464                           ;doprnt.c: 697: case 'd':
  4465                           
  4466                           ;doprnt.c: 664: break;
  4467  005C  2890               	goto	l3514
  4468  005D                     l3504:	
  4469                           ;doprnt.c: 784: case 'c':
  4470                           
  4471                           
  4472                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4473  005D  0850               	movf	printf@ap^(0+128),w
  4474  005E  0086               	movwf	6
  4475  005F  0187               	clrf	7
  4476  0060  0801               	movf	1,w
  4477  0061  00C5               	movwf	??_printf^(0+128)
  4478  0062  0845               	movf	??_printf^(0+128),w
  4479  0063  00E0               	movwf	printf@c^(0+128)
  4480  0064  3002               	movlw	2
  4481  0065  00C5               	movwf	??_printf^(0+128)
  4482  0066  0845               	movf	??_printf^(0+128),w
  4483  0067  07D0               	addwf	printf@ap^(0+128),f
  4484  0068                     l3508:	
  4485                           ;doprnt.c: 802: default:
  4486                           
  4487                           
  4488                           ;doprnt.c: 809: (putch(c) );
  4489  0068  0860               	movf	printf@c^(0+128),w
  4490  0069  3195  2572  3180   	fcall	_putch
  4491                           
  4492                           ;doprnt.c: 810: continue;
  4493  006C  2836               	goto	l3676
  4494  006D                     l3512:	
  4495                           ;doprnt.c: 822: }
  4496                           
  4497  006D  0020               	movlb	0	; select bank0
  4498  006E  085D               	movf	printf@f+1,w
  4499  006F  0021               	movlb	1	; select bank1
  4500  0070  00C6               	movwf	(??_printf^(0+128)+1)
  4501  0071  0020               	movlb	0	; select bank0
  4502  0072  085C               	movf	printf@f,w
  4503  0073  0021               	movlb	1	; select bank1
  4504  0074  00C5               	movwf	??_printf^(0+128)
  4505  0075  0020               	movlb	0	; select bank0
  4506  0076  0ADC               	incf	printf@f,f
  4507  0077  1903               	skipnz
  4508  0078  0ADD               	incf	printf@f+1,f
  4509  0079  0021               	movlb	1	; select bank1
  4510  007A  0845               	movf	??_printf^(0+128),w
  4511  007B  0084               	movwf	4
  4512  007C  0846               	movf	(??_printf+1)^(0+128),w
  4513  007D  0085               	movwf	5
  4514  007E  0800               	movf	0,w	;code access
  4515  007F  00E0               	movwf	printf@c^(0+128)
  4516                           
  4517                           ; Switch size 1, requested type "space"
  4518                           ; Number of cases is 5, Range of values is 0 to 105
  4519                           ; switch strategies available:
  4520                           ; Name         Instructions Cycles
  4521                           ; simple_byte           16     9 (average)
  4522                           ; direct_byte          218     6 (fixed)
  4523                           ; jumptable            260     6 (fixed)
  4524                           ;	Chosen strategy is simple_byte
  4525  0080  3A00               	xorlw	0	; case 0
  4526  0081  1903               	skipnz
  4527  0082  2D0F               	goto	l374
  4528  0083  3A63               	xorlw	99	; case 99
  4529  0084  1903               	skipnz
  4530  0085  285D               	goto	l3504
  4531  0086  3A07               	xorlw	7	; case 100
  4532  0087  1903               	skipnz
  4533  0088  2890               	goto	l3514
  4534  0089  3A02               	xorlw	2	; case 102
  4535  008A  1903               	skipnz
  4536  008B  285B               	goto	l322
  4537  008C  3A0F               	xorlw	15	; case 105
  4538  008D  1903               	skipnz
  4539  008E  2890               	goto	l3514
  4540  008F  2868               	goto	l3508
  4541  0090                     l3514:	
  4542                           
  4543                           ;doprnt.c: 825: if(flag & (0x700)) {
  4544  0090  3000               	movlw	0
  4545  0091  0021               	movlb	1	; select bank1
  4546  0092  054E               	andwf	printf@flag^(0+128),w
  4547  0093  00C5               	movwf	??_printf^(0+128)
  4548  0094  3007               	movlw	7
  4549  0095  054F               	andwf	(printf@flag+1)^(0+128),w
  4550  0096  00C6               	movwf	(??_printf+1)^(0+128)
  4551  0097  0845               	movf	??_printf^(0+128),w
  4552  0098  0446               	iorwf	(??_printf^(0+128)+1),w
  4553  0099  1903               	btfsc	3,2
  4554  009A  2C58               	goto	l3642
  4555                           
  4556                           ;doprnt.c: 829: prec = 6;
  4557  009B  3006               	movlw	6
  4558  009C  00D1               	movwf	printf@prec^(0+128)
  4559  009D  3000               	movlw	0
  4560  009E  00D2               	movwf	(printf@prec^(0+128)+1)
  4561                           
  4562                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4563  009F  0850               	movf	printf@ap^(0+128),w
  4564  00A0  0086               	movwf	6
  4565  00A1  0187               	clrf	7
  4566  00A2  3F40               	moviw [0]fsr1
  4567  00A3  00DD               	movwf	printf@fval^(0+128)
  4568  00A4  3F41               	moviw [1]fsr1
  4569  00A5  00DE               	movwf	(printf@fval+1)^(0+128)
  4570  00A6  3F42               	moviw [2]fsr1
  4571  00A7  00DF               	movwf	(printf@fval+2)^(0+128)
  4572  00A8  3003               	movlw	3
  4573  00A9  00C5               	movwf	??_printf^(0+128)
  4574  00AA  0845               	movf	??_printf^(0+128),w
  4575  00AB  07D0               	addwf	printf@ap^(0+128),f
  4576                           
  4577                           ;doprnt.c: 831: if(fval < 0.0) {
  4578  00AC  085D               	movf	printf@fval^(0+128),w
  4579  00AD  00F1               	movwf	___ftge@ff1
  4580  00AE  085E               	movf	(printf@fval+1)^(0+128),w
  4581  00AF  00F2               	movwf	___ftge@ff1+1
  4582  00B0  085F               	movf	(printf@fval+2)^(0+128),w
  4583  00B1  00F3               	movwf	___ftge@ff1+2
  4584  00B2  3000               	movlw	0
  4585  00B3  00F4               	movwf	___ftge@ff2
  4586  00B4  3000               	movlw	0
  4587  00B5  00F5               	movwf	___ftge@ff2+1
  4588  00B6  3000               	movlw	0
  4589  00B7  00F6               	movwf	___ftge@ff2+2
  4590  00B8  3197  2788  3180   	fcall	___ftge
  4591  00BB  1803               	btfsc	3,0
  4592  00BC  28D2               	goto	l3528
  4593                           
  4594                           ;doprnt.c: 832: fval = -fval;
  4595  00BD  0021               	movlb	1	; select bank1
  4596  00BE  085D               	movf	printf@fval^(0+128),w
  4597  00BF  00F1               	movwf	___ftneg@f1
  4598  00C0  085E               	movf	(printf@fval+1)^(0+128),w
  4599  00C1  00F2               	movwf	___ftneg@f1+1
  4600  00C2  085F               	movf	(printf@fval+2)^(0+128),w
  4601  00C3  00F3               	movwf	___ftneg@f1+2
  4602  00C4  3195  2585  3180   	fcall	___ftneg
  4603  00C7  0871               	movf	?___ftneg,w
  4604  00C8  0021               	movlb	1	; select bank1
  4605  00C9  00DD               	movwf	printf@fval^(0+128)
  4606  00CA  0872               	movf	?___ftneg+1,w
  4607  00CB  00DE               	movwf	(printf@fval+1)^(0+128)
  4608  00CC  0873               	movf	?___ftneg+2,w
  4609  00CD  00DF               	movwf	(printf@fval+2)^(0+128)
  4610                           
  4611                           ;doprnt.c: 833: flag |= 0x03;
  4612  00CE  3003               	movlw	3
  4613  00CF  04CE               	iorwf	printf@flag^(0+128),f
  4614  00D0  3000               	movlw	0
  4615  00D1  04CF               	iorwf	(printf@flag+1)^(0+128),f
  4616  00D2                     l3528:	
  4617                           
  4618                           ;doprnt.c: 834: }
  4619                           ;doprnt.c: 835: exp = 0;
  4620  00D2  0021               	movlb	1	; select bank1
  4621  00D3  01D7               	clrf	printf@exp^(0+128)
  4622  00D4  01D8               	clrf	(printf@exp+1)^(0+128)
  4623                           
  4624                           ;doprnt.c: 836: if( fval!=0) {
  4625  00D5  085F               	movf	(printf@fval+2)^(0+128),w
  4626  00D6  045E               	iorwf	(printf@fval+1)^(0+128),w
  4627  00D7  045D               	iorwf	printf@fval^(0+128),w
  4628  00D8  1903               	skipnz
  4629  00D9  298E               	goto	l330
  4630                           
  4631                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4632  00DA  30DD               	movlw	low (printf@fval| 0)
  4633  00DB  0086               	movwf	6
  4634  00DC  0187               	clrf	7
  4635  00DD  3F40               	moviw [0]fsr1
  4636  00DE  00C5               	movwf	??_printf^(0+128)
  4637  00DF  3F41               	moviw [1]fsr1
  4638  00E0  00C6               	movwf	(??_printf^(0+128)+1)
  4639  00E1  3F42               	moviw [2]fsr1
  4640  00E2  00C7               	movwf	(??_printf^(0+128)+2)
  4641  00E3  3F43               	moviw [3]fsr1
  4642  00E4  00C8               	movwf	(??_printf^(0+128)+3)
  4643  00E5  300F               	movlw	15
  4644  00E6                     u5525:	
  4645  00E6  36C8               	lsrf	(??_printf^(0+128)+3),f
  4646  00E7  0CC7               	rrf	(??_printf^(0+128)+2),f
  4647  00E8  0CC6               	rrf	(??_printf^(0+128)+1),f
  4648  00E9  0CC5               	rrf	??_printf^(0+128),f
  4649  00EA  0B89               	decfsz	9,f
  4650  00EB  28E6               	goto	u5525
  4651  00EC  30FF               	movlw	255
  4652  00ED  0545               	andwf	??_printf^(0+128),w
  4653  00EE  00C9               	movwf	(??_printf+4)^(0+128)
  4654  00EF  3000               	movlw	0
  4655  00F0  0546               	andwf	(??_printf+1)^(0+128),w
  4656  00F1  00CA               	movwf	(??_printf+5)^(0+128)
  4657  00F2  0849               	movf	(??_printf+4)^(0+128),w
  4658  00F3  3E82               	addlw	130
  4659  00F4  00D7               	movwf	printf@exp^(0+128)
  4660  00F5  30FF               	movlw	255
  4661  00F6  3D4A               	addwfc	(??_printf+5)^(0+128),w
  4662  00F7  00D8               	movwf	(printf@exp+1)^(0+128)
  4663                           
  4664                           ;doprnt.c: 838: exp--;
  4665  00F8  30FF               	movlw	255
  4666  00F9  07D7               	addwf	printf@exp^(0+128),f
  4667  00FA  30FF               	movlw	255
  4668  00FB  3DD8               	addwfc	(printf@exp+1)^(0+128),f
  4669                           
  4670                           ;doprnt.c: 839: exp *= 3;
  4671  00FC  3003               	movlw	3
  4672  00FD  0020               	movlb	0	; select bank0
  4673  00FE  00A5               	movwf	___wmul@multiplier
  4674  00FF  3000               	movlw	0
  4675  0100  00A6               	movwf	___wmul@multiplier+1
  4676  0101  0021               	movlb	1	; select bank1
  4677  0102  0858               	movf	(printf@exp+1)^(0+128),w
  4678  0103  0020               	movlb	0	; select bank0
  4679  0104  00A8               	movwf	___wmul@multiplicand+1
  4680  0105  0021               	movlb	1	; select bank1
  4681  0106  0857               	movf	printf@exp^(0+128),w
  4682  0107  0020               	movlb	0	; select bank0
  4683  0108  00A7               	movwf	___wmul@multiplicand
  4684  0109  3196  2654  3180   	fcall	___wmul
  4685  010C  0020               	movlb	0	; select bank0
  4686  010D  0826               	movf	?___wmul+1,w
  4687  010E  0021               	movlb	1	; select bank1
  4688  010F  00D8               	movwf	(printf@exp+1)^(0+128)
  4689  0110  0020               	movlb	0	; select bank0
  4690  0111  0825               	movf	?___wmul,w
  4691  0112  0021               	movlb	1	; select bank1
  4692  0113  00D7               	movwf	printf@exp^(0+128)
  4693                           
  4694                           ;doprnt.c: 840: exp /= 10;
  4695  0114  300A               	movlw	10
  4696  0115  00F8               	movwf	___awdiv@divisor
  4697  0116  3000               	movlw	0
  4698  0117  00F9               	movwf	___awdiv@divisor+1
  4699  0118  0858               	movf	(printf@exp+1)^(0+128),w
  4700  0119  00FB               	movwf	___awdiv@dividend+1
  4701  011A  0857               	movf	printf@exp^(0+128),w
  4702  011B  00FA               	movwf	___awdiv@dividend
  4703  011C  3188  20A1  3180   	fcall	___awdiv
  4704  011F  0879               	movf	?___awdiv+1,w
  4705  0120  0021               	movlb	1	; select bank1
  4706  0121  00D8               	movwf	(printf@exp+1)^(0+128)
  4707  0122  0878               	movf	?___awdiv,w
  4708  0123  00D7               	movwf	printf@exp^(0+128)
  4709                           
  4710                           ;doprnt.c: 841: if(exp < 0)
  4711  0124  1FD8               	btfss	(printf@exp+1)^(0+128),7
  4712  0125  292A               	goto	l3544
  4713                           
  4714                           ;doprnt.c: 842: exp--;
  4715  0126  30FF               	movlw	255
  4716  0127  07D7               	addwf	printf@exp^(0+128),f
  4717  0128  30FF               	movlw	255
  4718  0129  3DD8               	addwfc	(printf@exp+1)^(0+128),f
  4719  012A                     l3544:	
  4720                           
  4721                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  4722  012A  0357               	decf	printf@exp^(0+128),w
  4723  012B  3AFF               	xorlw	255
  4724  012C  3185  2510  3180   	fcall	_scale
  4725  012F  0020               	movlb	0	; select bank0
  4726  0130  083B               	movf	?_scale,w
  4727  0131  0021               	movlb	1	; select bank1
  4728  0132  00D9               	movwf	printf@tmpval^(0+128)
  4729  0133  0020               	movlb	0	; select bank0
  4730  0134  083C               	movf	?_scale+1,w
  4731  0135  0021               	movlb	1	; select bank1
  4732  0136  00DA               	movwf	(printf@tmpval+1)^(0+128)
  4733  0137  0020               	movlb	0	; select bank0
  4734  0138  083D               	movf	?_scale+2,w
  4735  0139  0021               	movlb	1	; select bank1
  4736  013A  00DB               	movwf	(printf@tmpval+2)^(0+128)
  4737                           
  4738                           ;doprnt.c: 847: tmpval.integ *= fval;
  4739  013B  085D               	movf	printf@fval^(0+128),w
  4740  013C  0020               	movlb	0	; select bank0
  4741  013D  00AB               	movwf	___ftmul@f1
  4742  013E  0021               	movlb	1	; select bank1
  4743  013F  085E               	movf	(printf@fval+1)^(0+128),w
  4744  0140  0020               	movlb	0	; select bank0
  4745  0141  00AC               	movwf	___ftmul@f1+1
  4746  0142  0021               	movlb	1	; select bank1
  4747  0143  085F               	movf	(printf@fval+2)^(0+128),w
  4748  0144  0020               	movlb	0	; select bank0
  4749  0145  00AD               	movwf	___ftmul@f1+2
  4750  0146  0021               	movlb	1	; select bank1
  4751  0147  0859               	movf	printf@tmpval^(0+128),w
  4752  0148  0020               	movlb	0	; select bank0
  4753  0149  00AE               	movwf	___ftmul@f2
  4754  014A  0021               	movlb	1	; select bank1
  4755  014B  085A               	movf	(printf@tmpval+1)^(0+128),w
  4756  014C  0020               	movlb	0	; select bank0
  4757  014D  00AF               	movwf	___ftmul@f2+1
  4758  014E  0021               	movlb	1	; select bank1
  4759  014F  085B               	movf	(printf@tmpval+2)^(0+128),w
  4760  0150  0020               	movlb	0	; select bank0
  4761  0151  00B0               	movwf	___ftmul@f2+2
  4762  0152  318A  2231  3180   	fcall	___ftmul
  4763  0155  0020               	movlb	0	; select bank0
  4764  0156  082B               	movf	?___ftmul,w
  4765  0157  0021               	movlb	1	; select bank1
  4766  0158  00D9               	movwf	printf@tmpval^(0+128)
  4767  0159  0020               	movlb	0	; select bank0
  4768  015A  082C               	movf	?___ftmul+1,w
  4769  015B  0021               	movlb	1	; select bank1
  4770  015C  00DA               	movwf	(printf@tmpval+1)^(0+128)
  4771  015D  0020               	movlb	0	; select bank0
  4772  015E  082D               	movf	?___ftmul+2,w
  4773  015F  0021               	movlb	1	; select bank1
  4774  0160  00DB               	movwf	(printf@tmpval+2)^(0+128)
  4775                           
  4776                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  4777  0161  0859               	movf	printf@tmpval^(0+128),w
  4778  0162  00F1               	movwf	___ftge@ff1
  4779  0163  085A               	movf	(printf@tmpval+1)^(0+128),w
  4780  0164  00F2               	movwf	___ftge@ff1+1
  4781  0165  085B               	movf	(printf@tmpval+2)^(0+128),w
  4782  0166  00F3               	movwf	___ftge@ff1+2
  4783  0167  3000               	movlw	0
  4784  0168  00F4               	movwf	___ftge@ff2
  4785  0169  3080               	movlw	128
  4786  016A  00F5               	movwf	___ftge@ff2+1
  4787  016B  303F               	movlw	63
  4788  016C  00F6               	movwf	___ftge@ff2+2
  4789  016D  3197  2788  3180   	fcall	___ftge
  4790  0170  1803               	btfsc	3,0
  4791  0171  2977               	goto	l3552
  4792                           
  4793                           ;doprnt.c: 849: exp--;
  4794  0172  30FF               	movlw	255
  4795  0173  0021               	movlb	1	; select bank1
  4796  0174  07D7               	addwf	printf@exp^(0+128),f
  4797  0175  30FF               	movlw	255
  4798  0176  298D               	goto	L1
  4799  0177                     l3552:	
  4800                           
  4801                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  4802  0177  0021               	movlb	1	; select bank1
  4803  0178  0859               	movf	printf@tmpval^(0+128),w
  4804  0179  00F1               	movwf	___ftge@ff1
  4805  017A  085A               	movf	(printf@tmpval+1)^(0+128),w
  4806  017B  00F2               	movwf	___ftge@ff1+1
  4807  017C  085B               	movf	(printf@tmpval+2)^(0+128),w
  4808  017D  00F3               	movwf	___ftge@ff1+2
  4809  017E  3000               	movlw	0
  4810  017F  00F4               	movwf	___ftge@ff2
  4811  0180  3020               	movlw	32
  4812  0181  00F5               	movwf	___ftge@ff2+1
  4813  0182  3041               	movlw	65
  4814  0183  00F6               	movwf	___ftge@ff2+2
  4815  0184  3197  2788  3180   	fcall	___ftge
  4816  0187  1C03               	btfss	3,0
  4817  0188  298E               	goto	l330
  4818                           
  4819                           ;doprnt.c: 851: exp++;
  4820  0189  3001               	movlw	1
  4821  018A  0021               	movlb	1	; select bank1
  4822  018B  07D7               	addwf	printf@exp^(0+128),f
  4823  018C  3000               	movlw	0
  4824  018D                     L1:	
  4825  018D  3DD8               	addwfc	(printf@exp+1)^(0+128),f
  4826  018E                     l330:	
  4827                           
  4828                           ;doprnt.c: 852: }
  4829                           ;doprnt.c: 1112: if(prec <= 12)
  4830  018E  0021               	movlb	1	; select bank1
  4831  018F  0852               	movf	(printf@prec+1)^(0+128),w
  4832  0190  3A80               	xorlw	128
  4833  0191  00C5               	movwf	??_printf^(0+128)
  4834  0192  3080               	movlw	128
  4835  0193  0245               	subwf	??_printf^(0+128),w
  4836  0194  1D03               	skipz
  4837  0195  2998               	goto	u5565
  4838  0196  300D               	movlw	13
  4839  0197  0251               	subwf	printf@prec^(0+128),w
  4840  0198                     u5565:	
  4841  0198  1803               	skipnc
  4842  0199  29C1               	goto	l3558
  4843                           
  4844                           ;doprnt.c: 1113: fval += fround(prec);
  4845  019A  0021               	movlb	1	; select bank1
  4846  019B  0851               	movf	printf@prec^(0+128),w
  4847  019C  318E  269B  3180   	fcall	_fround
  4848  019F  0020               	movlb	0	; select bank0
  4849  01A0  083B               	movf	?_fround,w
  4850  01A1  00C9               	movwf	___ftadd@f1
  4851  01A2  083C               	movf	?_fround+1,w
  4852  01A3  00CA               	movwf	___ftadd@f1+1
  4853  01A4  083D               	movf	?_fround+2,w
  4854  01A5  00CB               	movwf	___ftadd@f1+2
  4855  01A6  0021               	movlb	1	; select bank1
  4856  01A7  085D               	movf	printf@fval^(0+128),w
  4857  01A8  0020               	movlb	0	; select bank0
  4858  01A9  00CC               	movwf	___ftadd@f2
  4859  01AA  0021               	movlb	1	; select bank1
  4860  01AB  085E               	movf	(printf@fval+1)^(0+128),w
  4861  01AC  0020               	movlb	0	; select bank0
  4862  01AD  00CD               	movwf	___ftadd@f2+1
  4863  01AE  0021               	movlb	1	; select bank1
  4864  01AF  085F               	movf	(printf@fval+2)^(0+128),w
  4865  01B0  0020               	movlb	0	; select bank0
  4866  01B1  00CE               	movwf	___ftadd@f2+2
  4867  01B2  318C  2488  3180   	fcall	___ftadd
  4868  01B5  0020               	movlb	0	; select bank0
  4869  01B6  0849               	movf	?___ftadd,w
  4870  01B7  0021               	movlb	1	; select bank1
  4871  01B8  00DD               	movwf	printf@fval^(0+128)
  4872  01B9  0020               	movlb	0	; select bank0
  4873  01BA  084A               	movf	?___ftadd+1,w
  4874  01BB  0021               	movlb	1	; select bank1
  4875  01BC  00DE               	movwf	(printf@fval+1)^(0+128)
  4876  01BD  0020               	movlb	0	; select bank0
  4877  01BE  084B               	movf	?___ftadd+2,w
  4878  01BF  0021               	movlb	1	; select bank1
  4879  01C0  00DF               	movwf	(printf@fval+2)^(0+128)
  4880  01C1                     l3558:	
  4881                           
  4882                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  4883  01C1  0021               	movlb	1	; select bank1
  4884  01C2  0858               	movf	(printf@exp+1)^(0+128),w
  4885  01C3  3A80               	xorlw	128
  4886  01C4  00C5               	movwf	??_printf^(0+128)
  4887  01C5  3080               	movlw	128
  4888  01C6  0245               	subwf	??_printf^(0+128),w
  4889  01C7  1D03               	skipz
  4890  01C8  29CB               	goto	u5575
  4891  01C9  300A               	movlw	10
  4892  01CA  0257               	subwf	printf@exp^(0+128),w
  4893  01CB                     u5575:	
  4894  01CB  1803               	skipnc
  4895  01CC  29F4               	goto	l3566
  4896  01CD  0021               	movlb	1	; select bank1
  4897  01CE  085F               	movf	(printf@fval+2)^(0+128),w
  4898  01CF  045E               	iorwf	(printf@fval+1)^(0+128),w
  4899  01D0  045D               	iorwf	printf@fval^(0+128),w
  4900  01D1  1903               	skipnz
  4901  01D2  2A3C               	goto	l3580
  4902  01D3  085D               	movf	printf@fval^(0+128),w
  4903  01D4  0020               	movlb	0	; select bank0
  4904  01D5  00C4               	movwf	___fttol@f1
  4905  01D6  0021               	movlb	1	; select bank1
  4906  01D7  085E               	movf	(printf@fval+1)^(0+128),w
  4907  01D8  0020               	movlb	0	; select bank0
  4908  01D9  00C5               	movwf	___fttol@f1+1
  4909  01DA  0021               	movlb	1	; select bank1
  4910  01DB  085F               	movf	(printf@fval+2)^(0+128),w
  4911  01DC  0020               	movlb	0	; select bank0
  4912  01DD  00C6               	movwf	___fttol@f1+2
  4913  01DE  3189  21AA  3180   	fcall	___fttol
  4914  01E1  0020               	movlb	0	; select bank0
  4915  01E2  0847               	movf	?___fttol+3,w
  4916  01E3  0446               	iorwf	?___fttol+2,w
  4917  01E4  0445               	iorwf	?___fttol+1,w
  4918  01E5  0444               	iorwf	?___fttol,w
  4919  01E6  1D03               	skipz
  4920  01E7  2A3C               	goto	l3580
  4921  01E8  0021               	movlb	1	; select bank1
  4922  01E9  0858               	movf	(printf@exp+1)^(0+128),w
  4923  01EA  3A80               	xorlw	128
  4924  01EB  00C5               	movwf	??_printf^(0+128)
  4925  01EC  3080               	movlw	128
  4926  01ED  0245               	subwf	??_printf^(0+128),w
  4927  01EE  1D03               	skipz
  4928  01EF  29F2               	goto	u5605
  4929  01F0  3002               	movlw	2
  4930  01F1  0257               	subwf	printf@exp^(0+128),w
  4931  01F2                     u5605:	
  4932  01F2  1C03               	skipc
  4933  01F3  2A3C               	goto	l3580
  4934  01F4                     l3566:	
  4935                           
  4936                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  4937  01F4  0021               	movlb	1	; select bank1
  4938  01F5  0859               	movf	printf@tmpval^(0+128),w
  4939  01F6  00F1               	movwf	___ftge@ff1
  4940  01F7  085A               	movf	(printf@tmpval+1)^(0+128),w
  4941  01F8  00F2               	movwf	___ftge@ff1+1
  4942  01F9  085B               	movf	(printf@tmpval+2)^(0+128),w
  4943  01FA  00F3               	movwf	___ftge@ff1+2
  4944  01FB  3070               	movlw	112
  4945  01FC  00F4               	movwf	___ftge@ff2
  4946  01FD  3089               	movlw	137
  4947  01FE  00F5               	movwf	___ftge@ff2+1
  4948  01FF  3040               	movlw	64
  4949  0200  00F6               	movwf	___ftge@ff2+2
  4950  0201  3197  2788  3180   	fcall	___ftge
  4951  0204  1803               	btfsc	3,0
  4952  0205  2A08               	goto	l3570
  4953                           
  4954                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  4955  0206  30F7               	movlw	247
  4956  0207  2A09               	goto	L2
  4957  0208                     l3570:	
  4958                           ;doprnt.c: 1122: }else{
  4959                           
  4960                           
  4961                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  4962  0208  30F8               	movlw	248
  4963  0209                     L2:	
  4964  0209  0021               	movlb	1	; select bank1
  4965  020A  07D7               	addwf	printf@exp^(0+128),f
  4966  020B  30FF               	movlw	255
  4967  020C  3DD8               	addwfc	(printf@exp+1)^(0+128),f
  4968                           
  4969                           ;doprnt.c: 1124: }
  4970                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  4971  020D  0857               	movf	printf@exp^(0+128),w
  4972  020E  3185  2510  3180   	fcall	_scale
  4973  0211  0020               	movlb	0	; select bank0
  4974  0212  083B               	movf	?_scale,w
  4975  0213  0021               	movlb	1	; select bank1
  4976  0214  00D9               	movwf	printf@tmpval^(0+128)
  4977  0215  0020               	movlb	0	; select bank0
  4978  0216  083C               	movf	?_scale+1,w
  4979  0217  0021               	movlb	1	; select bank1
  4980  0218  00DA               	movwf	(printf@tmpval+1)^(0+128)
  4981  0219  0020               	movlb	0	; select bank0
  4982  021A  083D               	movf	?_scale+2,w
  4983  021B  0021               	movlb	1	; select bank1
  4984  021C  00DB               	movwf	(printf@tmpval+2)^(0+128)
  4985                           
  4986                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  4987  021D  085D               	movf	printf@fval^(0+128),w
  4988  021E  00F1               	movwf	__tdiv_to_l_@f1
  4989  021F  085E               	movf	(printf@fval+1)^(0+128),w
  4990  0220  00F2               	movwf	__tdiv_to_l_@f1+1
  4991  0221  085F               	movf	(printf@fval+2)^(0+128),w
  4992  0222  00F3               	movwf	__tdiv_to_l_@f1+2
  4993  0223  0859               	movf	printf@tmpval^(0+128),w
  4994  0224  00F4               	movwf	__tdiv_to_l_@f2
  4995  0225  085A               	movf	(printf@tmpval+1)^(0+128),w
  4996  0226  00F5               	movwf	__tdiv_to_l_@f2+1
  4997  0227  085B               	movf	(printf@tmpval+2)^(0+128),w
  4998  0228  00F6               	movwf	__tdiv_to_l_@f2+2
  4999  0229  318A  22E5  3180   	fcall	__tdiv_to_l_
  5000  022C  0874               	movf	?__tdiv_to_l_+3,w
  5001  022D  0021               	movlb	1	; select bank1
  5002  022E  00D6               	movwf	(printf@val+3)^(0+128)
  5003  022F  0873               	movf	?__tdiv_to_l_+2,w
  5004  0230  00D5               	movwf	(printf@val+2)^(0+128)
  5005  0231  0872               	movf	?__tdiv_to_l_+1,w
  5006  0232  00D4               	movwf	(printf@val+1)^(0+128)
  5007  0233  0871               	movf	?__tdiv_to_l_,w
  5008  0234  00D3               	movwf	printf@val^(0+128)
  5009                           
  5010                           ;doprnt.c: 1129: fval = 0.0;
  5011  0235  3000               	movlw	0
  5012  0236  00DD               	movwf	printf@fval^(0+128)
  5013  0237  3000               	movlw	0
  5014  0238  00DE               	movwf	(printf@fval+1)^(0+128)
  5015  0239  3000               	movlw	0
  5016  023A  00DF               	movwf	(printf@fval+2)^(0+128)
  5017                           
  5018                           ;doprnt.c: 1130: } else {
  5019  023B  2A91               	goto	l3584
  5020  023C                     l3580:	
  5021                           
  5022                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5023  023C  0021               	movlb	1	; select bank1
  5024  023D  085D               	movf	printf@fval^(0+128),w
  5025  023E  0020               	movlb	0	; select bank0
  5026  023F  00C4               	movwf	___fttol@f1
  5027  0240  0021               	movlb	1	; select bank1
  5028  0241  085E               	movf	(printf@fval+1)^(0+128),w
  5029  0242  0020               	movlb	0	; select bank0
  5030  0243  00C5               	movwf	___fttol@f1+1
  5031  0244  0021               	movlb	1	; select bank1
  5032  0245  085F               	movf	(printf@fval+2)^(0+128),w
  5033  0246  0020               	movlb	0	; select bank0
  5034  0247  00C6               	movwf	___fttol@f1+2
  5035  0248  3189  21AA  3180   	fcall	___fttol
  5036  024B  0020               	movlb	0	; select bank0
  5037  024C  0847               	movf	?___fttol+3,w
  5038  024D  0021               	movlb	1	; select bank1
  5039  024E  00D6               	movwf	(printf@val+3)^(0+128)
  5040  024F  0020               	movlb	0	; select bank0
  5041  0250  0846               	movf	?___fttol+2,w
  5042  0251  0021               	movlb	1	; select bank1
  5043  0252  00D5               	movwf	(printf@val+2)^(0+128)
  5044  0253  0020               	movlb	0	; select bank0
  5045  0254  0845               	movf	?___fttol+1,w
  5046  0255  0021               	movlb	1	; select bank1
  5047  0256  00D4               	movwf	(printf@val+1)^(0+128)
  5048  0257  0020               	movlb	0	; select bank0
  5049  0258  0844               	movf	?___fttol,w
  5050  0259  0021               	movlb	1	; select bank1
  5051  025A  00D3               	movwf	printf@val^(0+128)
  5052                           
  5053                           ;doprnt.c: 1132: fval -= (double)val;
  5054  025B  0856               	movf	(printf@val+3)^(0+128),w
  5055  025C  0020               	movlb	0	; select bank0
  5056  025D  00A3               	movwf	___lltoft@c+3
  5057  025E  0021               	movlb	1	; select bank1
  5058  025F  0855               	movf	(printf@val+2)^(0+128),w
  5059  0260  0020               	movlb	0	; select bank0
  5060  0261  00A2               	movwf	___lltoft@c+2
  5061  0262  0021               	movlb	1	; select bank1
  5062  0263  0854               	movf	(printf@val+1)^(0+128),w
  5063  0264  0020               	movlb	0	; select bank0
  5064  0265  00A1               	movwf	___lltoft@c+1
  5065  0266  0021               	movlb	1	; select bank1
  5066  0267  0853               	movf	printf@val^(0+128),w
  5067  0268  0020               	movlb	0	; select bank0
  5068  0269  00A0               	movwf	___lltoft@c
  5069  026A  3197  275D  3180   	fcall	___lltoft
  5070  026D  0020               	movlb	0	; select bank0
  5071  026E  0820               	movf	?___lltoft,w
  5072  026F  00D6               	movwf	___ftsub@f2
  5073  0270  0821               	movf	?___lltoft+1,w
  5074  0271  00D7               	movwf	___ftsub@f2+1
  5075  0272  0822               	movf	?___lltoft+2,w
  5076  0273  00D8               	movwf	___ftsub@f2+2
  5077  0274  0021               	movlb	1	; select bank1
  5078  0275  085D               	movf	printf@fval^(0+128),w
  5079  0276  0020               	movlb	0	; select bank0
  5080  0277  00D9               	movwf	___ftsub@f1
  5081  0278  0021               	movlb	1	; select bank1
  5082  0279  085E               	movf	(printf@fval+1)^(0+128),w
  5083  027A  0020               	movlb	0	; select bank0
  5084  027B  00DA               	movwf	___ftsub@f1+1
  5085  027C  0021               	movlb	1	; select bank1
  5086  027D  085F               	movf	(printf@fval+2)^(0+128),w
  5087  027E  0020               	movlb	0	; select bank0
  5088  027F  00DB               	movwf	___ftsub@f1+2
  5089  0280  3196  268C  3180   	fcall	___ftsub
  5090  0283  0020               	movlb	0	; select bank0
  5091  0284  0856               	movf	?___ftsub,w
  5092  0285  0021               	movlb	1	; select bank1
  5093  0286  00DD               	movwf	printf@fval^(0+128)
  5094  0287  0020               	movlb	0	; select bank0
  5095  0288  0857               	movf	?___ftsub+1,w
  5096  0289  0021               	movlb	1	; select bank1
  5097  028A  00DE               	movwf	(printf@fval+1)^(0+128)
  5098  028B  0020               	movlb	0	; select bank0
  5099  028C  0858               	movf	?___ftsub+2,w
  5100  028D  0021               	movlb	1	; select bank1
  5101  028E  00DF               	movwf	(printf@fval+2)^(0+128)
  5102                           
  5103                           ;doprnt.c: 1133: exp = 0;
  5104  028F  01D7               	clrf	printf@exp^(0+128)
  5105  0290  01D8               	clrf	(printf@exp+1)^(0+128)
  5106  0291                     l3584:	
  5107                           
  5108                           ;doprnt.c: 1134: }
  5109                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5110  0291  01E0               	clrf	printf@c^(0+128)
  5111  0292  0AE0               	incf	printf@c^(0+128),f
  5112  0293  300A               	movlw	10
  5113  0294  0660               	xorwf	printf@c^(0+128),w
  5114  0295  1903               	btfsc	3,2
  5115  0296  2AC4               	goto	l3596
  5116  0297                     l3590:	
  5117                           
  5118                           ;doprnt.c: 1137: if(val < dpowers[c])
  5119  0297  0860               	movf	printf@c^(0+128),w
  5120  0298  00C5               	movwf	??_printf^(0+128)
  5121  0299  01C6               	clrf	(??_printf^(0+128)+1)
  5122  029A  35C5               	lslf	??_printf^(0+128),f
  5123  029B  0DC6               	rlf	(??_printf^(0+128)+1),f
  5124  029C  35C5               	lslf	??_printf^(0+128),f
  5125  029D  0DC6               	rlf	(??_printf^(0+128)+1),f
  5126  029E  3000               	movlw	low (_dpowers| (0+32768))
  5127  029F  0745               	addwf	??_printf^(0+128),w
  5128  02A0  0084               	movwf	4
  5129  02A1  3090               	movlw	high (_dpowers| (0+32768))
  5130  02A2  3D46               	addwfc	(??_printf+1)^(0+128),w
  5131  02A3  0085               	movwf	5
  5132  02A4  3F00               	moviw [0]fsr0
  5133  02A5  00C7               	movwf	(??_printf+2)^(0+128)
  5134  02A6  3F01               	moviw [1]fsr0
  5135  02A7  00C8               	movwf	((??_printf+2)^(0+128)+1)
  5136  02A8  3F02               	moviw [2]fsr0
  5137  02A9  00C9               	movwf	((??_printf+2)^(0+128)+2)
  5138  02AA  3F03               	moviw [3]fsr0
  5139  02AB  00CA               	movwf	((??_printf+2)^(0+128)+3)
  5140  02AC  084A               	movf	(??_printf+5)^(0+128),w
  5141  02AD  0256               	subwf	(printf@val+3)^(0+128),w
  5142  02AE  1D03               	skipz
  5143  02AF  2ABA               	goto	u5635
  5144  02B0  0849               	movf	(??_printf+4)^(0+128),w
  5145  02B1  0255               	subwf	(printf@val+2)^(0+128),w
  5146  02B2  1D03               	skipz
  5147  02B3  2ABA               	goto	u5635
  5148  02B4  0848               	movf	(??_printf+3)^(0+128),w
  5149  02B5  0254               	subwf	(printf@val+1)^(0+128),w
  5150  02B6  1D03               	skipz
  5151  02B7  2ABA               	goto	u5635
  5152  02B8  0847               	movf	(??_printf+2)^(0+128),w
  5153  02B9  0253               	subwf	printf@val^(0+128),w
  5154  02BA                     u5635:	
  5155  02BA  1C03               	btfss	3,0
  5156  02BB  2AC4               	goto	l3596
  5157                           
  5158                           ;doprnt.c: 1138: break;
  5159  02BC  3001               	movlw	1
  5160  02BD  00C5               	movwf	??_printf^(0+128)
  5161  02BE  0845               	movf	??_printf^(0+128),w
  5162  02BF  07E0               	addwf	printf@c^(0+128),f
  5163  02C0  300A               	movlw	10
  5164  02C1  0660               	xorwf	printf@c^(0+128),w
  5165  02C2  1D03               	btfss	3,2
  5166  02C3  2A97               	goto	l3590
  5167  02C4                     l3596:	
  5168                           
  5169                           ;doprnt.c: 1175: {
  5170                           ;doprnt.c: 1188: if(flag & 0x03)
  5171  02C4  3003               	movlw	3
  5172  02C5  054E               	andwf	printf@flag^(0+128),w
  5173  02C6  00C5               	movwf	??_printf^(0+128)
  5174  02C7  3000               	movlw	0
  5175  02C8  054F               	andwf	(printf@flag+1)^(0+128),w
  5176  02C9  00C6               	movwf	(??_printf+1)^(0+128)
  5177  02CA  0845               	movf	??_printf^(0+128),w
  5178  02CB  0446               	iorwf	(??_printf^(0+128)+1),w
  5179  02CC  1903               	btfsc	3,2
  5180  02CD  2AD2               	goto	l3606
  5181                           
  5182                           ;doprnt.c: 1190: (putch('-') );
  5183  02CE  302D               	movlw	45
  5184  02CF                     L5:	
  5185  02CF  3195  2572  3180   	fcall	_putch
  5186  02D2                     l3606:	
  5187                           ;doprnt.c: 1195: }
  5188                           ;doprnt.c: 1196: while(c--) {
  5189                           
  5190  02D2  30FF               	movlw	255
  5191  02D3  0021               	movlb	1	; select bank1
  5192  02D4  00C5               	movwf	??_printf^(0+128)
  5193  02D5  0845               	movf	??_printf^(0+128),w
  5194  02D6  07E0               	addwf	printf@c^(0+128),f
  5195  02D7  0A60               	incf	printf@c^(0+128),w
  5196  02D8  1903               	btfsc	3,2
  5197  02D9  2B3C               	goto	l3612
  5198                           
  5199                           ;doprnt.c: 1200: {
  5200                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  5201  02DA  0021               	movlb	1	; select bank1
  5202  02DB  0860               	movf	printf@c^(0+128),w
  5203  02DC  00C5               	movwf	??_printf^(0+128)
  5204  02DD  01C6               	clrf	(??_printf^(0+128)+1)
  5205  02DE  35C5               	lslf	??_printf^(0+128),f
  5206  02DF  0DC6               	rlf	(??_printf^(0+128)+1),f
  5207  02E0  35C5               	lslf	??_printf^(0+128),f
  5208  02E1  0DC6               	rlf	(??_printf^(0+128)+1),f
  5209  02E2  3000               	movlw	low (_dpowers| (0+32768))
  5210  02E3  0745               	addwf	??_printf^(0+128),w
  5211  02E4  0084               	movwf	4
  5212  02E5  3090               	movlw	high (_dpowers| (0+32768))
  5213  02E6  3D46               	addwfc	(??_printf+1)^(0+128),w
  5214  02E7  0085               	movwf	5
  5215  02E8  3F00               	moviw [0]fsr0
  5216  02E9  00F1               	movwf	___lldiv@divisor
  5217  02EA  3F01               	moviw [1]fsr0
  5218  02EB  00F2               	movwf	___lldiv@divisor+1
  5219  02EC  3F02               	moviw [2]fsr0
  5220  02ED  00F3               	movwf	___lldiv@divisor+2
  5221  02EE  3F03               	moviw [3]fsr0
  5222  02EF  00F4               	movwf	___lldiv@divisor+3
  5223  02F0  0856               	movf	(printf@val+3)^(0+128),w
  5224  02F1  00F8               	movwf	___lldiv@dividend+3
  5225  02F2  0855               	movf	(printf@val+2)^(0+128),w
  5226  02F3  00F7               	movwf	___lldiv@dividend+2
  5227  02F4  0854               	movf	(printf@val+1)^(0+128),w
  5228  02F5  00F6               	movwf	___lldiv@dividend+1
  5229  02F6  0853               	movf	printf@val^(0+128),w
  5230  02F7  00F5               	movwf	___lldiv@dividend
  5231  02F8  3188  20F3  3180   	fcall	___lldiv
  5232  02FB  0874               	movf	?___lldiv+3,w
  5233  02FC  0021               	movlb	1	; select bank1
  5234  02FD  00DC               	movwf	(printf@tmpval+3)^(0+128)
  5235  02FE  0873               	movf	?___lldiv+2,w
  5236  02FF  00DB               	movwf	(printf@tmpval+2)^(0+128)
  5237  0300  0872               	movf	?___lldiv+1,w
  5238  0301  00DA               	movwf	(printf@tmpval+1)^(0+128)
  5239  0302  0871               	movf	?___lldiv,w
  5240  0303  00D9               	movwf	printf@tmpval^(0+128)
  5241                           
  5242                           ;doprnt.c: 1202: tmpval.vd %= 10;
  5243  0304  3000               	movlw	0
  5244  0305  0020               	movlb	0	; select bank0
  5245  0306  00A8               	movwf	___llmod@divisor+3
  5246  0307  3000               	movlw	0
  5247  0308  00A7               	movwf	___llmod@divisor+2
  5248  0309  3000               	movlw	0
  5249  030A  00A6               	movwf	___llmod@divisor+1
  5250  030B  300A               	movlw	10
  5251  030C  00A5               	movwf	___llmod@divisor
  5252  030D  0021               	movlb	1	; select bank1
  5253  030E  085C               	movf	(printf@tmpval+3)^(0+128),w
  5254  030F  0020               	movlb	0	; select bank0
  5255  0310  00AC               	movwf	___llmod@dividend+3
  5256  0311  0021               	movlb	1	; select bank1
  5257  0312  085B               	movf	(printf@tmpval+2)^(0+128),w
  5258  0313  0020               	movlb	0	; select bank0
  5259  0314  00AB               	movwf	___llmod@dividend+2
  5260  0315  0021               	movlb	1	; select bank1
  5261  0316  085A               	movf	(printf@tmpval+1)^(0+128),w
  5262  0317  0020               	movlb	0	; select bank0
  5263  0318  00AA               	movwf	___llmod@dividend+1
  5264  0319  0021               	movlb	1	; select bank1
  5265  031A  0859               	movf	printf@tmpval^(0+128),w
  5266  031B  0020               	movlb	0	; select bank0
  5267  031C  00A9               	movwf	___llmod@dividend
  5268  031D  3188  2019  3180   	fcall	___llmod
  5269  0320  0020               	movlb	0	; select bank0
  5270  0321  0828               	movf	?___llmod+3,w
  5271  0322  0021               	movlb	1	; select bank1
  5272  0323  00DC               	movwf	(printf@tmpval+3)^(0+128)
  5273  0324  0020               	movlb	0	; select bank0
  5274  0325  0827               	movf	?___llmod+2,w
  5275  0326  0021               	movlb	1	; select bank1
  5276  0327  00DB               	movwf	(printf@tmpval+2)^(0+128)
  5277  0328  0020               	movlb	0	; select bank0
  5278  0329  0826               	movf	?___llmod+1,w
  5279  032A  0021               	movlb	1	; select bank1
  5280  032B  00DA               	movwf	(printf@tmpval+1)^(0+128)
  5281  032C  0020               	movlb	0	; select bank0
  5282  032D  0825               	movf	?___llmod,w
  5283  032E  0021               	movlb	1	; select bank1
  5284  032F  00D9               	movwf	printf@tmpval^(0+128)
  5285                           
  5286                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  5287  0330  0859               	movf	printf@tmpval^(0+128),w
  5288  0331  3E30               	addlw	48
  5289  0332  2ACF               	goto	L5
  5290  0333                     l3608:	
  5291                           ;doprnt.c: 1204: }
  5292                           ;doprnt.c: 1206: }
  5293                           ;doprnt.c: 1207: while(exp > 0) {
  5294                           
  5295                           
  5296                           ;doprnt.c: 1208: (putch('0') );
  5297  0333  3030               	movlw	48
  5298  0334  3195  2572  3180   	fcall	_putch
  5299                           
  5300                           ;doprnt.c: 1209: exp--;
  5301  0337  30FF               	movlw	255
  5302  0338  0021               	movlb	1	; select bank1
  5303  0339  07D7               	addwf	printf@exp^(0+128),f
  5304  033A  30FF               	movlw	255
  5305  033B  3DD8               	addwfc	(printf@exp+1)^(0+128),f
  5306  033C                     l3612:	
  5307  033C  0858               	movf	(printf@exp+1)^(0+128),w
  5308  033D  3A80               	xorlw	128
  5309  033E  00C5               	movwf	??_printf^(0+128)
  5310  033F  3080               	movlw	128
  5311  0340  0245               	subwf	??_printf^(0+128),w
  5312  0341  1D03               	skipz
  5313  0342  2B45               	goto	u5675
  5314  0343  3001               	movlw	1
  5315  0344  0257               	subwf	printf@exp^(0+128),w
  5316  0345                     u5675:	
  5317  0345  1803               	skipnc
  5318  0346  2B33               	goto	l3608
  5319                           
  5320                           ;doprnt.c: 1210: }
  5321                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5322  0347  0021               	movlb	1	; select bank1
  5323  0348  0852               	movf	(printf@prec+1)^(0+128),w
  5324  0349  3A80               	xorlw	128
  5325  034A  00C5               	movwf	??_printf^(0+128)
  5326  034B  3080               	movlw	128
  5327  034C  0245               	subwf	??_printf^(0+128),w
  5328  034D  1D03               	skipz
  5329  034E  2B51               	goto	u5685
  5330  034F  3009               	movlw	9
  5331  0350  0251               	subwf	printf@prec^(0+128),w
  5332  0351                     u5685:	
  5333  0351  1C03               	skipc
  5334  0352  2B56               	goto	l3618
  5335                           
  5336                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5337  0353  3008               	movlw	8
  5338  0354  0021               	movlb	1	; select bank1
  5339  0355  2B58               	goto	L3
  5340  0356                     l3618:	
  5341                           
  5342                           ;doprnt.c: 1213: else
  5343                           ;doprnt.c: 1214: c = prec;
  5344  0356  0021               	movlb	1	; select bank1
  5345  0357  0851               	movf	printf@prec^(0+128),w
  5346  0358                     L3:	
  5347  0358  00C5               	movwf	??_printf^(0+128)
  5348  0359  0845               	movf	??_printf^(0+128),w
  5349  035A  00E0               	movwf	printf@c^(0+128)
  5350                           
  5351                           ;doprnt.c: 1215: prec -= c;
  5352  035B  0860               	movf	printf@c^(0+128),w
  5353  035C  00C5               	movwf	??_printf^(0+128)
  5354  035D  01C6               	clrf	(??_printf^(0+128)+1)
  5355  035E  1BC5               	btfsc	??_printf^(0+128),7
  5356  035F  03C6               	decf	(??_printf^(0+128)+1),f
  5357  0360  0845               	movf	??_printf^(0+128),w
  5358  0361  02D1               	subwf	printf@prec^(0+128),f
  5359  0362  0846               	movf	(??_printf+1)^(0+128),w
  5360  0363  3BD2               	subwfb	(printf@prec+1)^(0+128),f
  5361                           
  5362                           ;doprnt.c: 1219: if(c)
  5363  0364  0860               	movf	printf@c^(0+128),w
  5364  0365  1903               	btfsc	3,2
  5365  0366  2B6B               	goto	l3624
  5366                           
  5367                           ;doprnt.c: 1221: (putch('.') );
  5368  0367  302E               	movlw	46
  5369  0368  3195  2572  3180   	fcall	_putch
  5370  036B                     l3624:	
  5371                           
  5372                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5373  036B  0021               	movlb	1	; select bank1
  5374  036C  0860               	movf	printf@c^(0+128),w
  5375  036D  3185  2510  3180   	fcall	_scale
  5376  0370  0020               	movlb	0	; select bank0
  5377  0371  083B               	movf	?_scale,w
  5378  0372  0021               	movlb	1	; select bank1
  5379  0373  00CB               	movwf	_printf$1242^(0+128)
  5380  0374  0020               	movlb	0	; select bank0
  5381  0375  083C               	movf	?_scale+1,w
  5382  0376  0021               	movlb	1	; select bank1
  5383  0377  00CC               	movwf	(_printf$1242+1)^(0+128)
  5384  0378  0020               	movlb	0	; select bank0
  5385  0379  083D               	movf	?_scale+2,w
  5386  037A  0021               	movlb	1	; select bank1
  5387  037B  00CD               	movwf	(_printf$1242+2)^(0+128)
  5388                           
  5389                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5390  037C  084B               	movf	_printf$1242^(0+128),w
  5391  037D  0020               	movlb	0	; select bank0
  5392  037E  00AE               	movwf	___ftmul@f2
  5393  037F  0021               	movlb	1	; select bank1
  5394  0380  084C               	movf	(_printf$1242+1)^(0+128),w
  5395  0381  0020               	movlb	0	; select bank0
  5396  0382  00AF               	movwf	___ftmul@f2+1
  5397  0383  0021               	movlb	1	; select bank1
  5398  0384  084D               	movf	(_printf$1242+2)^(0+128),w
  5399  0385  0020               	movlb	0	; select bank0
  5400  0386  00B0               	movwf	___ftmul@f2+2
  5401  0387  0021               	movlb	1	; select bank1
  5402  0388  085D               	movf	printf@fval^(0+128),w
  5403  0389  0020               	movlb	0	; select bank0
  5404  038A  00AB               	movwf	___ftmul@f1
  5405  038B  0021               	movlb	1	; select bank1
  5406  038C  085E               	movf	(printf@fval+1)^(0+128),w
  5407  038D  0020               	movlb	0	; select bank0
  5408  038E  00AC               	movwf	___ftmul@f1+1
  5409  038F  0021               	movlb	1	; select bank1
  5410  0390  085F               	movf	(printf@fval+2)^(0+128),w
  5411  0391  0020               	movlb	0	; select bank0
  5412  0392  00AD               	movwf	___ftmul@f1+2
  5413  0393  318A  2231  3180   	fcall	___ftmul
  5414  0396  0020               	movlb	0	; select bank0
  5415  0397  082B               	movf	?___ftmul,w
  5416  0398  00C4               	movwf	___fttol@f1
  5417  0399  082C               	movf	?___ftmul+1,w
  5418  039A  00C5               	movwf	___fttol@f1+1
  5419  039B  082D               	movf	?___ftmul+2,w
  5420  039C  00C6               	movwf	___fttol@f1+2
  5421  039D  3189  21AA  3180   	fcall	___fttol
  5422  03A0  0020               	movlb	0	; select bank0
  5423  03A1  0847               	movf	?___fttol+3,w
  5424  03A2  0021               	movlb	1	; select bank1
  5425  03A3  00D6               	movwf	(printf@val+3)^(0+128)
  5426  03A4  0020               	movlb	0	; select bank0
  5427  03A5  0846               	movf	?___fttol+2,w
  5428  03A6  0021               	movlb	1	; select bank1
  5429  03A7  00D5               	movwf	(printf@val+2)^(0+128)
  5430  03A8  0020               	movlb	0	; select bank0
  5431  03A9  0845               	movf	?___fttol+1,w
  5432  03AA  0021               	movlb	1	; select bank1
  5433  03AB  00D4               	movwf	(printf@val+1)^(0+128)
  5434  03AC  0020               	movlb	0	; select bank0
  5435  03AD  0844               	movf	?___fttol,w
  5436  03AE                     L4:	
  5437  03AE  0021               	movlb	1	; select bank1
  5438  03AF  00D3               	movwf	printf@val^(0+128)
  5439  03B0  30FF               	movlw	255
  5440  03B1  00C5               	movwf	??_printf^(0+128)
  5441  03B2  0845               	movf	??_printf^(0+128),w
  5442  03B3  07E0               	addwf	printf@c^(0+128),f
  5443  03B4  0A60               	incf	printf@c^(0+128),w
  5444  03B5  1903               	btfsc	3,2
  5445  03B6  2C53               	goto	l3640
  5446                           
  5447                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  5448                           
  5449                           ;doprnt.c: 1228: while(c--) {
  5450  03B7  0860               	movf	printf@c^(0+128),w
  5451  03B8  00C5               	movwf	??_printf^(0+128)
  5452  03B9  01C6               	clrf	(??_printf^(0+128)+1)
  5453  03BA  35C5               	lslf	??_printf^(0+128),f
  5454  03BB  0DC6               	rlf	(??_printf^(0+128)+1),f
  5455  03BC  35C5               	lslf	??_printf^(0+128),f
  5456  03BD  0DC6               	rlf	(??_printf^(0+128)+1),f
  5457  03BE  3000               	movlw	low (_dpowers| (0+32768))
  5458  03BF  0745               	addwf	??_printf^(0+128),w
  5459  03C0  0084               	movwf	4
  5460  03C1  3090               	movlw	high (_dpowers| (0+32768))
  5461  03C2  3D46               	addwfc	(??_printf+1)^(0+128),w
  5462  03C3  0085               	movwf	5
  5463  03C4  3F00               	moviw [0]fsr0
  5464  03C5  00F1               	movwf	___lldiv@divisor
  5465  03C6  3F01               	moviw [1]fsr0
  5466  03C7  00F2               	movwf	___lldiv@divisor+1
  5467  03C8  3F02               	moviw [2]fsr0
  5468  03C9  00F3               	movwf	___lldiv@divisor+2
  5469  03CA  3F03               	moviw [3]fsr0
  5470  03CB  00F4               	movwf	___lldiv@divisor+3
  5471  03CC  0856               	movf	(printf@val+3)^(0+128),w
  5472  03CD  00F8               	movwf	___lldiv@dividend+3
  5473  03CE  0855               	movf	(printf@val+2)^(0+128),w
  5474  03CF  00F7               	movwf	___lldiv@dividend+2
  5475  03D0  0854               	movf	(printf@val+1)^(0+128),w
  5476  03D1  00F6               	movwf	___lldiv@dividend+1
  5477  03D2  0853               	movf	printf@val^(0+128),w
  5478  03D3  00F5               	movwf	___lldiv@dividend
  5479  03D4  3188  20F3  3180   	fcall	___lldiv
  5480  03D7  0874               	movf	?___lldiv+3,w
  5481  03D8  0021               	movlb	1	; select bank1
  5482  03D9  00DC               	movwf	(printf@tmpval+3)^(0+128)
  5483  03DA  0873               	movf	?___lldiv+2,w
  5484  03DB  00DB               	movwf	(printf@tmpval+2)^(0+128)
  5485  03DC  0872               	movf	?___lldiv+1,w
  5486  03DD  00DA               	movwf	(printf@tmpval+1)^(0+128)
  5487  03DE  0871               	movf	?___lldiv,w
  5488  03DF  00D9               	movwf	printf@tmpval^(0+128)
  5489                           
  5490                           ;doprnt.c: 1230: tmpval.vd %= 10;
  5491  03E0  3000               	movlw	0
  5492  03E1  0020               	movlb	0	; select bank0
  5493  03E2  00A8               	movwf	___llmod@divisor+3
  5494  03E3  3000               	movlw	0
  5495  03E4  00A7               	movwf	___llmod@divisor+2
  5496  03E5  3000               	movlw	0
  5497  03E6  00A6               	movwf	___llmod@divisor+1
  5498  03E7  300A               	movlw	10
  5499  03E8  00A5               	movwf	___llmod@divisor
  5500  03E9  0021               	movlb	1	; select bank1
  5501  03EA  085C               	movf	(printf@tmpval+3)^(0+128),w
  5502  03EB  0020               	movlb	0	; select bank0
  5503  03EC  00AC               	movwf	___llmod@dividend+3
  5504  03ED  0021               	movlb	1	; select bank1
  5505  03EE  085B               	movf	(printf@tmpval+2)^(0+128),w
  5506  03EF  0020               	movlb	0	; select bank0
  5507  03F0  00AB               	movwf	___llmod@dividend+2
  5508  03F1  0021               	movlb	1	; select bank1
  5509  03F2  085A               	movf	(printf@tmpval+1)^(0+128),w
  5510  03F3  0020               	movlb	0	; select bank0
  5511  03F4  00AA               	movwf	___llmod@dividend+1
  5512  03F5  0021               	movlb	1	; select bank1
  5513  03F6  0859               	movf	printf@tmpval^(0+128),w
  5514  03F7  0020               	movlb	0	; select bank0
  5515  03F8  00A9               	movwf	___llmod@dividend
  5516  03F9  3188  2019  3180   	fcall	___llmod
  5517  03FC  0020               	movlb	0	; select bank0
  5518  03FD  0828               	movf	?___llmod+3,w
  5519  03FE  0021               	movlb	1	; select bank1
  5520  03FF  00DC               	movwf	(printf@tmpval+3)^(0+128)
  5521  0400  0020               	movlb	0	; select bank0
  5522  0401  0827               	movf	?___llmod+2,w
  5523  0402  0021               	movlb	1	; select bank1
  5524  0403  00DB               	movwf	(printf@tmpval+2)^(0+128)
  5525  0404  0020               	movlb	0	; select bank0
  5526  0405  0826               	movf	?___llmod+1,w
  5527  0406  0021               	movlb	1	; select bank1
  5528  0407  00DA               	movwf	(printf@tmpval+1)^(0+128)
  5529  0408  0020               	movlb	0	; select bank0
  5530  0409  0825               	movf	?___llmod,w
  5531  040A  0021               	movlb	1	; select bank1
  5532  040B  00D9               	movwf	printf@tmpval^(0+128)
  5533                           
  5534                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  5535  040C  0859               	movf	printf@tmpval^(0+128),w
  5536  040D  3E30               	addlw	48
  5537  040E  3195  2572  3180   	fcall	_putch
  5538                           
  5539                           ;doprnt.c: 1232: val %= dpowers[c];
  5540  0411  0021               	movlb	1	; select bank1
  5541  0412  0860               	movf	printf@c^(0+128),w
  5542  0413  00C5               	movwf	??_printf^(0+128)
  5543  0414  01C6               	clrf	(??_printf^(0+128)+1)
  5544  0415  35C5               	lslf	??_printf^(0+128),f
  5545  0416  0DC6               	rlf	(??_printf^(0+128)+1),f
  5546  0417  35C5               	lslf	??_printf^(0+128),f
  5547  0418  0DC6               	rlf	(??_printf^(0+128)+1),f
  5548  0419  3000               	movlw	low (_dpowers| (0+32768))
  5549  041A  0745               	addwf	??_printf^(0+128),w
  5550  041B  0084               	movwf	4
  5551  041C  3090               	movlw	high (_dpowers| (0+32768))
  5552  041D  3D46               	addwfc	(??_printf+1)^(0+128),w
  5553  041E  0085               	movwf	5
  5554  041F  3F00               	moviw [0]fsr0
  5555  0420  0020               	movlb	0	; select bank0
  5556  0421  00A5               	movwf	___llmod@divisor
  5557  0422  3F01               	moviw [1]fsr0
  5558  0423  00A6               	movwf	___llmod@divisor+1
  5559  0424  3F02               	moviw [2]fsr0
  5560  0425  00A7               	movwf	___llmod@divisor+2
  5561  0426  3F03               	moviw [3]fsr0
  5562  0427  00A8               	movwf	___llmod@divisor+3
  5563  0428  0021               	movlb	1	; select bank1
  5564  0429  0856               	movf	(printf@val+3)^(0+128),w
  5565  042A  0020               	movlb	0	; select bank0
  5566  042B  00AC               	movwf	___llmod@dividend+3
  5567  042C  0021               	movlb	1	; select bank1
  5568  042D  0855               	movf	(printf@val+2)^(0+128),w
  5569  042E  0020               	movlb	0	; select bank0
  5570  042F  00AB               	movwf	___llmod@dividend+2
  5571  0430  0021               	movlb	1	; select bank1
  5572  0431  0854               	movf	(printf@val+1)^(0+128),w
  5573  0432  0020               	movlb	0	; select bank0
  5574  0433  00AA               	movwf	___llmod@dividend+1
  5575  0434  0021               	movlb	1	; select bank1
  5576  0435  0853               	movf	printf@val^(0+128),w
  5577  0436  0020               	movlb	0	; select bank0
  5578  0437  00A9               	movwf	___llmod@dividend
  5579  0438  3188  2019  3180   	fcall	___llmod
  5580  043B  0020               	movlb	0	; select bank0
  5581  043C  0828               	movf	?___llmod+3,w
  5582  043D  0021               	movlb	1	; select bank1
  5583  043E  00D6               	movwf	(printf@val+3)^(0+128)
  5584  043F  0020               	movlb	0	; select bank0
  5585  0440  0827               	movf	?___llmod+2,w
  5586  0441  0021               	movlb	1	; select bank1
  5587  0442  00D5               	movwf	(printf@val+2)^(0+128)
  5588  0443  0020               	movlb	0	; select bank0
  5589  0444  0826               	movf	?___llmod+1,w
  5590  0445  0021               	movlb	1	; select bank1
  5591  0446  00D4               	movwf	(printf@val+1)^(0+128)
  5592  0447  0020               	movlb	0	; select bank0
  5593  0448  0825               	movf	?___llmod,w
  5594  0449  2BAE               	goto	L4
  5595  044A                     l3636:	
  5596                           ;doprnt.c: 1233: }
  5597                           ;doprnt.c: 1235: while(prec) {
  5598                           
  5599                           
  5600                           ;doprnt.c: 1236: (putch('0') );
  5601  044A  3030               	movlw	48
  5602  044B  3195  2572  3180   	fcall	_putch
  5603                           
  5604                           ;doprnt.c: 1237: prec--;
  5605  044E  30FF               	movlw	255
  5606  044F  0021               	movlb	1	; select bank1
  5607  0450  07D1               	addwf	printf@prec^(0+128),f
  5608  0451  30FF               	movlw	255
  5609  0452  3DD2               	addwfc	(printf@prec+1)^(0+128),f
  5610  0453                     l3640:	
  5611  0453  0851               	movf	printf@prec^(0+128),w
  5612  0454  0452               	iorwf	(printf@prec+1)^(0+128),w
  5613  0455  1903               	btfsc	3,2
  5614  0456  2836               	goto	l3676
  5615  0457  2C4A               	goto	l3636
  5616  0458                     l3642:	
  5617                           ;doprnt.c: 1238: }
  5618                           ;doprnt.c: 1245: continue;
  5619                           
  5620                           
  5621                           ;doprnt.c: 1246: }
  5622                           ;doprnt.c: 1253: {
  5623                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5624  0458  0850               	movf	printf@ap^(0+128),w
  5625  0459  0086               	movwf	6
  5626  045A  0187               	clrf	7
  5627  045B  3F40               	moviw [0]fsr1
  5628  045C  00C5               	movwf	??_printf^(0+128)
  5629  045D  3F41               	moviw [1]fsr1
  5630  045E  00C6               	movwf	(??_printf^(0+128)+1)
  5631  045F  0845               	movf	??_printf^(0+128),w
  5632  0460  00D3               	movwf	printf@val^(0+128)
  5633  0461  0846               	movf	(??_printf+1)^(0+128),w
  5634  0462  00D4               	movwf	(printf@val+1)^(0+128)
  5635  0463  0D89               	rlf	9,f
  5636  0464  3B89               	subwfb	9,f
  5637  0465  0989               	comf	9,f
  5638  0466  00D5               	movwf	(printf@val+2)^(0+128)
  5639  0467  00D6               	movwf	(printf@val+3)^(0+128)
  5640  0468  3002               	movlw	2
  5641  0469  00C5               	movwf	??_printf^(0+128)
  5642  046A  0845               	movf	??_printf^(0+128),w
  5643  046B  07D0               	addwf	printf@ap^(0+128),f
  5644                           
  5645                           ;doprnt.c: 1261: if((long)val < 0) {
  5646  046C  1FD6               	btfss	(printf@val+3)^(0+128),7
  5647  046D  2C7D               	goto	l3652
  5648                           
  5649                           ;doprnt.c: 1262: flag |= 0x03;
  5650  046E  3003               	movlw	3
  5651  046F  04CE               	iorwf	printf@flag^(0+128),f
  5652  0470  3000               	movlw	0
  5653  0471  04CF               	iorwf	(printf@flag+1)^(0+128),f
  5654                           
  5655                           ;doprnt.c: 1263: val = -val;
  5656  0472  09D3               	comf	printf@val^(0+128),f
  5657  0473  09D4               	comf	(printf@val+1)^(0+128),f
  5658  0474  09D5               	comf	(printf@val+2)^(0+128),f
  5659  0475  09D6               	comf	(printf@val+3)^(0+128),f
  5660  0476  0AD3               	incf	printf@val^(0+128),f
  5661  0477  1903               	skipnz
  5662  0478  0AD4               	incf	(printf@val+1)^(0+128),f
  5663  0479  1903               	skipnz
  5664  047A  0AD5               	incf	(printf@val+2)^(0+128),f
  5665  047B  1903               	skipnz
  5666  047C  0AD6               	incf	(printf@val+3)^(0+128),f
  5667  047D                     l3652:	
  5668                           
  5669                           ;doprnt.c: 1264: }
  5670                           ;doprnt.c: 1266: }
  5671                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5672  047D  01E0               	clrf	printf@c^(0+128)
  5673  047E  0AE0               	incf	printf@c^(0+128),f
  5674  047F  300A               	movlw	10
  5675  0480  0660               	xorwf	printf@c^(0+128),w
  5676  0481  1903               	btfsc	3,2
  5677  0482  2CB0               	goto	l3664
  5678  0483                     l3658:	
  5679                           
  5680                           ;doprnt.c: 1306: if(val < dpowers[c])
  5681  0483  0860               	movf	printf@c^(0+128),w
  5682  0484  00C5               	movwf	??_printf^(0+128)
  5683  0485  01C6               	clrf	(??_printf^(0+128)+1)
  5684  0486  35C5               	lslf	??_printf^(0+128),f
  5685  0487  0DC6               	rlf	(??_printf^(0+128)+1),f
  5686  0488  35C5               	lslf	??_printf^(0+128),f
  5687  0489  0DC6               	rlf	(??_printf^(0+128)+1),f
  5688  048A  3000               	movlw	low (_dpowers| (0+32768))
  5689  048B  0745               	addwf	??_printf^(0+128),w
  5690  048C  0084               	movwf	4
  5691  048D  3090               	movlw	high (_dpowers| (0+32768))
  5692  048E  3D46               	addwfc	(??_printf+1)^(0+128),w
  5693  048F  0085               	movwf	5
  5694  0490  3F00               	moviw [0]fsr0
  5695  0491  00C7               	movwf	(??_printf+2)^(0+128)
  5696  0492  3F01               	moviw [1]fsr0
  5697  0493  00C8               	movwf	((??_printf+2)^(0+128)+1)
  5698  0494  3F02               	moviw [2]fsr0
  5699  0495  00C9               	movwf	((??_printf+2)^(0+128)+2)
  5700  0496  3F03               	moviw [3]fsr0
  5701  0497  00CA               	movwf	((??_printf+2)^(0+128)+3)
  5702  0498  084A               	movf	(??_printf+5)^(0+128),w
  5703  0499  0256               	subwf	(printf@val+3)^(0+128),w
  5704  049A  1D03               	skipz
  5705  049B  2CA6               	goto	u5745
  5706  049C  0849               	movf	(??_printf+4)^(0+128),w
  5707  049D  0255               	subwf	(printf@val+2)^(0+128),w
  5708  049E  1D03               	skipz
  5709  049F  2CA6               	goto	u5745
  5710  04A0  0848               	movf	(??_printf+3)^(0+128),w
  5711  04A1  0254               	subwf	(printf@val+1)^(0+128),w
  5712  04A2  1D03               	skipz
  5713  04A3  2CA6               	goto	u5745
  5714  04A4  0847               	movf	(??_printf+2)^(0+128),w
  5715  04A5  0253               	subwf	printf@val^(0+128),w
  5716  04A6                     u5745:	
  5717  04A6  1C03               	btfss	3,0
  5718  04A7  2CB0               	goto	l3664
  5719                           
  5720                           ;doprnt.c: 1307: break;
  5721  04A8  3001               	movlw	1
  5722  04A9  00C5               	movwf	??_printf^(0+128)
  5723  04AA  0845               	movf	??_printf^(0+128),w
  5724  04AB  07E0               	addwf	printf@c^(0+128),f
  5725  04AC  300A               	movlw	10
  5726  04AD  0660               	xorwf	printf@c^(0+128),w
  5727  04AE  1D03               	btfss	3,2
  5728  04AF  2C83               	goto	l3658
  5729  04B0                     l3664:	
  5730                           
  5731                           ;doprnt.c: 1422: {
  5732                           ;doprnt.c: 1438: if(flag & 0x03)
  5733  04B0  3003               	movlw	3
  5734  04B1  054E               	andwf	printf@flag^(0+128),w
  5735  04B2  00C5               	movwf	??_printf^(0+128)
  5736  04B3  3000               	movlw	0
  5737  04B4  054F               	andwf	(printf@flag+1)^(0+128),w
  5738  04B5  00C6               	movwf	(??_printf+1)^(0+128)
  5739  04B6  0845               	movf	??_printf^(0+128),w
  5740  04B7  0446               	iorwf	(??_printf^(0+128)+1),w
  5741  04B8  1903               	btfsc	3,2
  5742  04B9  2CBE               	goto	l3668
  5743                           
  5744                           ;doprnt.c: 1439: (putch('-') );
  5745  04BA  302D               	movlw	45
  5746  04BB  3195  2572  3180   	fcall	_putch
  5747  04BE                     l3668:	
  5748                           
  5749                           ;doprnt.c: 1469: }
  5750                           ;doprnt.c: 1472: prec = c;
  5751  04BE  0021               	movlb	1	; select bank1
  5752  04BF  0860               	movf	printf@c^(0+128),w
  5753  04C0  00D1               	movwf	printf@prec^(0+128)
  5754  04C1  01D2               	clrf	(printf@prec+1)^(0+128)
  5755  04C2  1BD1               	btfsc	printf@prec^(0+128),7
  5756  04C3  03D2               	decf	(printf@prec+1)^(0+128),f
  5757  04C4                     l3674:	
  5758                           ;doprnt.c: 1474: while(prec--) {
  5759                           
  5760  04C4  30FF               	movlw	255
  5761  04C5  0021               	movlb	1	; select bank1
  5762  04C6  07D1               	addwf	printf@prec^(0+128),f
  5763  04C7  30FF               	movlw	255
  5764  04C8  3DD2               	addwfc	(printf@prec+1)^(0+128),f
  5765  04C9  0A51               	incf	printf@prec^(0+128),w
  5766  04CA  1903               	btfsc	3,2
  5767  04CB  0A52               	incf	(printf@prec+1)^(0+128),w
  5768  04CC  1903               	btfsc	3,2
  5769  04CD  2836               	goto	l3676
  5770                           
  5771                           ;doprnt.c: 1478: {
  5772                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5773  04CE  3000               	movlw	0
  5774  04CF  0020               	movlb	0	; select bank0
  5775  04D0  00A8               	movwf	___llmod@divisor+3
  5776  04D1  3000               	movlw	0
  5777  04D2  00A7               	movwf	___llmod@divisor+2
  5778  04D3  3000               	movlw	0
  5779  04D4  00A6               	movwf	___llmod@divisor+1
  5780  04D5  300A               	movlw	10
  5781  04D6  00A5               	movwf	___llmod@divisor
  5782  04D7  0021               	movlb	1	; select bank1
  5783  04D8  0852               	movf	(printf@prec+1)^(0+128),w
  5784  04D9  0085               	movwf	5
  5785  04DA  0851               	movf	printf@prec^(0+128),w
  5786  04DB  0084               	movwf	4
  5787  04DC  3584               	lslf	4,f
  5788  04DD  0D85               	rlf	5,f
  5789  04DE  3584               	lslf	4,f
  5790  04DF  0D85               	rlf	5,f
  5791  04E0  3000               	movlw	low (_dpowers| (0+32768))
  5792  04E1  0784               	addwf	4,f
  5793  04E2  3090               	movlw	high (_dpowers| (0+32768))
  5794  04E3  3D85               	addwfc	5,f
  5795  04E4  3F00               	moviw [0]fsr0
  5796  04E5  00F1               	movwf	___lldiv@divisor
  5797  04E6  3F01               	moviw [1]fsr0
  5798  04E7  00F2               	movwf	___lldiv@divisor+1
  5799  04E8  3F02               	moviw [2]fsr0
  5800  04E9  00F3               	movwf	___lldiv@divisor+2
  5801  04EA  3F03               	moviw [3]fsr0
  5802  04EB  00F4               	movwf	___lldiv@divisor+3
  5803  04EC  0856               	movf	(printf@val+3)^(0+128),w
  5804  04ED  00F8               	movwf	___lldiv@dividend+3
  5805  04EE  0855               	movf	(printf@val+2)^(0+128),w
  5806  04EF  00F7               	movwf	___lldiv@dividend+2
  5807  04F0  0854               	movf	(printf@val+1)^(0+128),w
  5808  04F1  00F6               	movwf	___lldiv@dividend+1
  5809  04F2  0853               	movf	printf@val^(0+128),w
  5810  04F3  00F5               	movwf	___lldiv@dividend
  5811  04F4  3188  20F3  3180   	fcall	___lldiv
  5812  04F7  0874               	movf	?___lldiv+3,w
  5813  04F8  0020               	movlb	0	; select bank0
  5814  04F9  00AC               	movwf	___llmod@dividend+3
  5815  04FA  0873               	movf	?___lldiv+2,w
  5816  04FB  00AB               	movwf	___llmod@dividend+2
  5817  04FC  0872               	movf	?___lldiv+1,w
  5818  04FD  00AA               	movwf	___llmod@dividend+1
  5819  04FE  0871               	movf	?___lldiv,w
  5820  04FF  00A9               	movwf	___llmod@dividend
  5821  0500  3188  2019  3180   	fcall	___llmod
  5822  0503  0020               	movlb	0	; select bank0
  5823  0504  0825               	movf	?___llmod,w
  5824  0505  3E30               	addlw	48
  5825  0506  0021               	movlb	1	; select bank1
  5826  0507  00C5               	movwf	??_printf^(0+128)
  5827  0508  0845               	movf	??_printf^(0+128),w
  5828  0509  00E0               	movwf	printf@c^(0+128)
  5829                           
  5830                           ;doprnt.c: 1523: }
  5831                           ;doprnt.c: 1524: (putch(c) );
  5832  050A  0860               	movf	printf@c^(0+128),w
  5833  050B  3195  2572  3180   	fcall	_putch
  5834  050E  2CC4               	goto	l3674
  5835  050F                     l374:	
  5836                           ;doprnt.c: 1540: return 0;
  5837                           ;	Return value of _printf is never used
  5838                           
  5839                           ;doprnt.c: 1525: }
  5840                           ;doprnt.c: 1533: }
  5841                           ;doprnt.c: 1535: alldone:
  5842                           
  5843  050F  0008               	return
  5844  0510                     __end_of_printf:	
  5845                           
  5846                           	psect	text25
  5847  0510                     __ptext25:	
  5848 ;; *************** function _scale *****************
  5849 ;; Defined at:
  5850 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  5851 ;; Parameters:    Size  Location     Type
  5852 ;;  scl             1    wreg     char 
  5853 ;; Auto vars:     Size  Location     Type
  5854 ;;  scl             1   35[BANK0 ] char 
  5855 ;; Return value:  Size  Location     Type
  5856 ;;                  3   27[BANK0 ] char 
  5857 ;; Registers used:
  5858 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5859 ;; Tracked objects:
  5860 ;;		On entry : 0/0
  5861 ;;		On exit  : 0/0
  5862 ;;		Unchanged: 0/0
  5863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5864 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5865 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5866 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5867 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5868 ;;Total ram usage:        9 bytes
  5869 ;; Hardware stack levels used:    1
  5870 ;; Hardware stack levels required when called:    4
  5871 ;; This function calls:
  5872 ;;		___awdiv
  5873 ;;		___awmod
  5874 ;;		___ftmul
  5875 ;;		___wmul
  5876 ;; This function is called by:
  5877 ;;		_printf
  5878 ;; This function uses a non-reentrant model
  5879 ;;
  5880                           
  5881                           
  5882                           ;psect for function _scale
  5883  0510                     _scale:	
  5884                           
  5885                           ;incstack = 0
  5886                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5887                           ;scale@scl stored from wreg
  5888  0510  0020               	movlb	0	; select bank0
  5889  0511  00C3               	movwf	scale@scl
  5890                           
  5891                           ;doprnt.c: 428: if(scl < 0) {
  5892  0512  1FC3               	btfss	scale@scl,7
  5893  0513  2E35               	goto	l3240
  5894                           
  5895                           ;doprnt.c: 429: scl = -scl;
  5896  0514  09C3               	comf	scale@scl,f
  5897  0515  0AC3               	incf	scale@scl,f
  5898                           
  5899                           ;doprnt.c: 430: if(scl>=110)
  5900  0516  0843               	movf	scale@scl,w
  5901  0517  3A80               	xorlw	128
  5902  0518  3E12               	addlw	-238
  5903  0519  1C03               	skipc
  5904  051A  2DB9               	goto	l3230
  5905                           
  5906                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5907  051B  300A               	movlw	10
  5908  051C  00F8               	movwf	___awdiv@divisor
  5909  051D  3000               	movlw	0
  5910  051E  00F9               	movwf	___awdiv@divisor+1
  5911  051F  0843               	movf	scale@scl,w
  5912  0520  00F3               	movwf	___awmod@dividend
  5913  0521  01F4               	clrf	___awmod@dividend+1
  5914  0522  1BF3               	btfsc	___awmod@dividend,7
  5915  0523  03F4               	decf	___awmod@dividend+1,f
  5916  0524  3064               	movlw	100
  5917  0525  00F1               	movwf	___awmod@divisor
  5918  0526  3000               	movlw	0
  5919  0527  00F2               	movwf	___awmod@divisor+1
  5920  0528  3188  205C  3185   	fcall	___awmod
  5921  052B  0872               	movf	?___awmod+1,w
  5922  052C  00FB               	movwf	___awdiv@dividend+1
  5923  052D  0871               	movf	?___awmod,w
  5924  052E  00FA               	movwf	___awdiv@dividend
  5925  052F  3188  20A1  3185   	fcall	___awdiv
  5926  0532  0878               	movf	?___awdiv,w
  5927  0533  3E09               	addlw	9
  5928  0534  0020               	movlb	0	; select bank0
  5929  0535  00A5               	movwf	___wmul@multiplier
  5930  0536  3000               	movlw	0
  5931  0537  3D79               	addwfc	?___awdiv+1,w
  5932  0538  00A6               	movwf	___wmul@multiplier+1
  5933  0539  3003               	movlw	3
  5934  053A  00A7               	movwf	___wmul@multiplicand
  5935  053B  3000               	movlw	0
  5936  053C  00A8               	movwf	___wmul@multiplicand+1
  5937  053D  3196  2654  3185   	fcall	___wmul
  5938  0540  0020               	movlb	0	; select bank0
  5939  0541  0826               	movf	?___wmul+1,w
  5940  0542  0085               	movwf	5
  5941  0543  0825               	movf	?___wmul,w
  5942  0544  0084               	movwf	4
  5943  0545  3028               	movlw	low (__npowers_| (0+32768))
  5944  0546  0784               	addwf	4,f
  5945  0547  3090               	movlw	high (__npowers_| (0+32768))
  5946  0548  3D85               	addwfc	5,f
  5947  0549  3F00               	moviw [0]fsr0
  5948  054A  00AB               	movwf	___ftmul@f1
  5949  054B  3F01               	moviw [1]fsr0
  5950  054C  00AC               	movwf	___ftmul@f1+1
  5951  054D  3F02               	moviw [2]fsr0
  5952  054E  00AD               	movwf	___ftmul@f1+2
  5953  054F  3064               	movlw	100
  5954  0550  00F8               	movwf	___awdiv@divisor
  5955  0551  3000               	movlw	0
  5956  0552  00F9               	movwf	___awdiv@divisor+1
  5957  0553  0843               	movf	scale@scl,w
  5958  0554  00FA               	movwf	___awdiv@dividend
  5959  0555  01FB               	clrf	___awdiv@dividend+1
  5960  0556  1BFA               	btfsc	___awdiv@dividend,7
  5961  0557  03FB               	decf	___awdiv@dividend+1,f
  5962  0558  3188  20A1  3185   	fcall	___awdiv
  5963  055B  0878               	movf	?___awdiv,w
  5964  055C  3E12               	addlw	18
  5965  055D  0020               	movlb	0	; select bank0
  5966  055E  00A5               	movwf	___wmul@multiplier
  5967  055F  3000               	movlw	0
  5968  0560  3D79               	addwfc	?___awdiv+1,w
  5969  0561  00A6               	movwf	___wmul@multiplier+1
  5970  0562  3003               	movlw	3
  5971  0563  00A7               	movwf	___wmul@multiplicand
  5972  0564  3000               	movlw	0
  5973  0565  00A8               	movwf	___wmul@multiplicand+1
  5974  0566  3196  2654  3185   	fcall	___wmul
  5975  0569  0020               	movlb	0	; select bank0
  5976  056A  0826               	movf	?___wmul+1,w
  5977  056B  0085               	movwf	5
  5978  056C  0825               	movf	?___wmul,w
  5979  056D  0084               	movwf	4
  5980  056E  3028               	movlw	low (__npowers_| (0+32768))
  5981  056F  0784               	addwf	4,f
  5982  0570  3090               	movlw	high (__npowers_| (0+32768))
  5983  0571  3D85               	addwfc	5,f
  5984  0572  3F00               	moviw [0]fsr0
  5985  0573  00AE               	movwf	___ftmul@f2
  5986  0574  3F01               	moviw [1]fsr0
  5987  0575  00AF               	movwf	___ftmul@f2+1
  5988  0576  3F02               	moviw [2]fsr0
  5989  0577  00B0               	movwf	___ftmul@f2+2
  5990  0578  318A  2231  3185   	fcall	___ftmul
  5991  057B  0020               	movlb	0	; select bank0
  5992  057C  082B               	movf	?___ftmul,w
  5993  057D  00C0               	movwf	_scale$1241
  5994  057E  082C               	movf	?___ftmul+1,w
  5995  057F  00C1               	movwf	_scale$1241+1
  5996  0580  082D               	movf	?___ftmul+2,w
  5997  0581  00C2               	movwf	_scale$1241+2
  5998                           
  5999                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6000  0582  0843               	movf	scale@scl,w
  6001  0583  00F3               	movwf	___awmod@dividend
  6002  0584  01F4               	clrf	___awmod@dividend+1
  6003  0585  1BF3               	btfsc	___awmod@dividend,7
  6004  0586  03F4               	decf	___awmod@dividend+1,f
  6005  0587  300A               	movlw	10
  6006  0588  00F1               	movwf	___awmod@divisor
  6007  0589  3000               	movlw	0
  6008  058A  00F2               	movwf	___awmod@divisor+1
  6009  058B  3188  205C  3185   	fcall	___awmod
  6010  058E  0872               	movf	?___awmod+1,w
  6011  058F  0020               	movlb	0	; select bank0
  6012  0590  00A6               	movwf	___wmul@multiplier+1
  6013  0591  0871               	movf	?___awmod,w
  6014  0592  00A5               	movwf	___wmul@multiplier
  6015  0593  3003               	movlw	3
  6016  0594  00A7               	movwf	___wmul@multiplicand
  6017  0595  3000               	movlw	0
  6018  0596  00A8               	movwf	___wmul@multiplicand+1
  6019  0597  3196  2654  3185   	fcall	___wmul
  6020  059A  0020               	movlb	0	; select bank0
  6021  059B  0826               	movf	?___wmul+1,w
  6022  059C  0085               	movwf	5
  6023  059D  0825               	movf	?___wmul,w
  6024  059E  0084               	movwf	4
  6025  059F  3028               	movlw	low (__npowers_| (0+32768))
  6026  05A0  0784               	addwf	4,f
  6027  05A1  3090               	movlw	high (__npowers_| (0+32768))
  6028  05A2  3D85               	addwfc	5,f
  6029  05A3  3F00               	moviw [0]fsr0
  6030  05A4  00AB               	movwf	___ftmul@f1
  6031  05A5  3F01               	moviw [1]fsr0
  6032  05A6  00AC               	movwf	___ftmul@f1+1
  6033  05A7  3F02               	moviw [2]fsr0
  6034  05A8  00AD               	movwf	___ftmul@f1+2
  6035  05A9  0840               	movf	_scale$1241,w
  6036  05AA  00AE               	movwf	___ftmul@f2
  6037  05AB  0841               	movf	_scale$1241+1,w
  6038  05AC  00AF               	movwf	___ftmul@f2+1
  6039  05AD  0842               	movf	_scale$1241+2,w
  6040  05AE  00B0               	movwf	___ftmul@f2+2
  6041  05AF  318A  2231         	fcall	___ftmul
  6042  05B1  0020               	movlb	0	; select bank0
  6043  05B2  082B               	movf	?___ftmul,w
  6044  05B3  00BB               	movwf	?_scale
  6045  05B4  082C               	movf	?___ftmul+1,w
  6046  05B5  00BC               	movwf	?_scale+1
  6047  05B6  082D               	movf	?___ftmul+2,w
  6048  05B7  00BD               	movwf	?_scale+2
  6049  05B8  0008               	return
  6050  05B9                     l3230:	
  6051                           
  6052                           ;doprnt.c: 432: else if(scl > 10)
  6053  05B9  0843               	movf	scale@scl,w
  6054  05BA  3A80               	xorlw	128
  6055  05BB  3E75               	addlw	-139
  6056  05BC  1C03               	skipc
  6057  05BD  2E18               	goto	l3236
  6058                           
  6059                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6060  05BE  0843               	movf	scale@scl,w
  6061  05BF  00F3               	movwf	___awmod@dividend
  6062  05C0  01F4               	clrf	___awmod@dividend+1
  6063  05C1  1BF3               	btfsc	___awmod@dividend,7
  6064  05C2  03F4               	decf	___awmod@dividend+1,f
  6065  05C3  300A               	movlw	10
  6066  05C4  00F1               	movwf	___awmod@divisor
  6067  05C5  3000               	movlw	0
  6068  05C6  00F2               	movwf	___awmod@divisor+1
  6069  05C7  3188  205C  3185   	fcall	___awmod
  6070  05CA  0872               	movf	?___awmod+1,w
  6071  05CB  0020               	movlb	0	; select bank0
  6072  05CC  00A6               	movwf	___wmul@multiplier+1
  6073  05CD  0871               	movf	?___awmod,w
  6074  05CE  00A5               	movwf	___wmul@multiplier
  6075  05CF  3003               	movlw	3
  6076  05D0  00A7               	movwf	___wmul@multiplicand
  6077  05D1  3000               	movlw	0
  6078  05D2  00A8               	movwf	___wmul@multiplicand+1
  6079  05D3  3196  2654  3185   	fcall	___wmul
  6080  05D6  0020               	movlb	0	; select bank0
  6081  05D7  0826               	movf	?___wmul+1,w
  6082  05D8  0085               	movwf	5
  6083  05D9  0825               	movf	?___wmul,w
  6084  05DA  0084               	movwf	4
  6085  05DB  3028               	movlw	low (__npowers_| (0+32768))
  6086  05DC  0784               	addwf	4,f
  6087  05DD  3090               	movlw	high (__npowers_| (0+32768))
  6088  05DE  3D85               	addwfc	5,f
  6089  05DF  3F00               	moviw [0]fsr0
  6090  05E0  00AB               	movwf	___ftmul@f1
  6091  05E1  3F01               	moviw [1]fsr0
  6092  05E2  00AC               	movwf	___ftmul@f1+1
  6093  05E3  3F02               	moviw [2]fsr0
  6094  05E4  00AD               	movwf	___ftmul@f1+2
  6095  05E5  300A               	movlw	10
  6096  05E6  00F8               	movwf	___awdiv@divisor
  6097  05E7  3000               	movlw	0
  6098  05E8  00F9               	movwf	___awdiv@divisor+1
  6099  05E9  0843               	movf	scale@scl,w
  6100  05EA  00FA               	movwf	___awdiv@dividend
  6101  05EB  01FB               	clrf	___awdiv@dividend+1
  6102  05EC  1BFA               	btfsc	___awdiv@dividend,7
  6103  05ED  03FB               	decf	___awdiv@dividend+1,f
  6104  05EE  3188  20A1  3185   	fcall	___awdiv
  6105  05F1  0878               	movf	?___awdiv,w
  6106  05F2  3E09               	addlw	9
  6107  05F3  0020               	movlb	0	; select bank0
  6108  05F4  00A5               	movwf	___wmul@multiplier
  6109  05F5  3000               	movlw	0
  6110  05F6  3D79               	addwfc	?___awdiv+1,w
  6111  05F7  00A6               	movwf	___wmul@multiplier+1
  6112  05F8  3003               	movlw	3
  6113  05F9  00A7               	movwf	___wmul@multiplicand
  6114  05FA  3000               	movlw	0
  6115  05FB  00A8               	movwf	___wmul@multiplicand+1
  6116  05FC  3196  2654  3185   	fcall	___wmul
  6117  05FF  0020               	movlb	0	; select bank0
  6118  0600  0826               	movf	?___wmul+1,w
  6119  0601  0085               	movwf	5
  6120  0602  0825               	movf	?___wmul,w
  6121  0603  0084               	movwf	4
  6122  0604  3028               	movlw	low (__npowers_| (0+32768))
  6123  0605  0784               	addwf	4,f
  6124  0606  3090               	movlw	high (__npowers_| (0+32768))
  6125  0607  3D85               	addwfc	5,f
  6126  0608  3F00               	moviw [0]fsr0
  6127  0609  00AE               	movwf	___ftmul@f2
  6128  060A  3F01               	moviw [1]fsr0
  6129  060B  00AF               	movwf	___ftmul@f2+1
  6130  060C  3F02               	moviw [2]fsr0
  6131  060D  00B0               	movwf	___ftmul@f2+2
  6132  060E  318A  2231         	fcall	___ftmul
  6133  0610  0020               	movlb	0	; select bank0
  6134  0611  082B               	movf	?___ftmul,w
  6135  0612  00BB               	movwf	?_scale
  6136  0613  082C               	movf	?___ftmul+1,w
  6137  0614  00BC               	movwf	?_scale+1
  6138  0615  082D               	movf	?___ftmul+2,w
  6139  0616  00BD               	movwf	?_scale+2
  6140  0617  0008               	return
  6141  0618                     l3236:	
  6142                           
  6143                           ;doprnt.c: 434: return _npowers_[scl];
  6144  0618  0843               	movf	scale@scl,w
  6145  0619  00BE               	movwf	??_scale
  6146  061A  01BF               	clrf	??_scale+1
  6147  061B  083E               	movf	??_scale,w
  6148  061C  00A5               	movwf	___wmul@multiplier
  6149  061D  083F               	movf	??_scale+1,w
  6150  061E  00A6               	movwf	___wmul@multiplier+1
  6151  061F  3003               	movlw	3
  6152  0620  00A7               	movwf	___wmul@multiplicand
  6153  0621  3000               	movlw	0
  6154  0622  00A8               	movwf	___wmul@multiplicand+1
  6155  0623  3196  2654         	fcall	___wmul
  6156  0625  0020               	movlb	0	; select bank0
  6157  0626  0826               	movf	?___wmul+1,w
  6158  0627  0085               	movwf	5
  6159  0628  0825               	movf	?___wmul,w
  6160  0629  0084               	movwf	4
  6161  062A  3028               	movlw	low (__npowers_| (0+32768))
  6162  062B  0784               	addwf	4,f
  6163  062C  3090               	movlw	high (__npowers_| (0+32768))
  6164  062D  3D85               	addwfc	5,f
  6165  062E  3F00               	moviw [0]fsr0
  6166  062F  00BB               	movwf	?_scale
  6167  0630  3F01               	moviw [1]fsr0
  6168  0631  00BC               	movwf	?_scale+1
  6169  0632  3F02               	moviw [2]fsr0
  6170  0633  00BD               	movwf	?_scale+2
  6171  0634  0008               	return
  6172  0635                     l3240:	
  6173                           
  6174                           ;doprnt.c: 435: }
  6175                           ;doprnt.c: 436: if(scl>=110)
  6176  0635  0843               	movf	scale@scl,w
  6177  0636  3A80               	xorlw	128
  6178  0637  3E12               	addlw	-238
  6179  0638  1C03               	skipc
  6180  0639  2ED8               	goto	l3248
  6181                           
  6182                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6183  063A  300A               	movlw	10
  6184  063B  00F8               	movwf	___awdiv@divisor
  6185  063C  3000               	movlw	0
  6186  063D  00F9               	movwf	___awdiv@divisor+1
  6187  063E  0843               	movf	scale@scl,w
  6188  063F  00F3               	movwf	___awmod@dividend
  6189  0640  01F4               	clrf	___awmod@dividend+1
  6190  0641  1BF3               	btfsc	___awmod@dividend,7
  6191  0642  03F4               	decf	___awmod@dividend+1,f
  6192  0643  3064               	movlw	100
  6193  0644  00F1               	movwf	___awmod@divisor
  6194  0645  3000               	movlw	0
  6195  0646  00F2               	movwf	___awmod@divisor+1
  6196  0647  3188  205C  3185   	fcall	___awmod
  6197  064A  0872               	movf	?___awmod+1,w
  6198  064B  00FB               	movwf	___awdiv@dividend+1
  6199  064C  0871               	movf	?___awmod,w
  6200  064D  00FA               	movwf	___awdiv@dividend
  6201  064E  3188  20A1  3185   	fcall	___awdiv
  6202  0651  0878               	movf	?___awdiv,w
  6203  0652  3E09               	addlw	9
  6204  0653  0020               	movlb	0	; select bank0
  6205  0654  00A5               	movwf	___wmul@multiplier
  6206  0655  3000               	movlw	0
  6207  0656  3D79               	addwfc	?___awdiv+1,w
  6208  0657  00A6               	movwf	___wmul@multiplier+1
  6209  0658  3003               	movlw	3
  6210  0659  00A7               	movwf	___wmul@multiplicand
  6211  065A  3000               	movlw	0
  6212  065B  00A8               	movwf	___wmul@multiplicand+1
  6213  065C  3196  2654  3185   	fcall	___wmul
  6214  065F  0020               	movlb	0	; select bank0
  6215  0660  0826               	movf	?___wmul+1,w
  6216  0661  0085               	movwf	5
  6217  0662  0825               	movf	?___wmul,w
  6218  0663  0084               	movwf	4
  6219  0664  304F               	movlw	low (__powers_| (0+32768))
  6220  0665  0784               	addwf	4,f
  6221  0666  3090               	movlw	high (__powers_| (0+32768))
  6222  0667  3D85               	addwfc	5,f
  6223  0668  3F00               	moviw [0]fsr0
  6224  0669  00AB               	movwf	___ftmul@f1
  6225  066A  3F01               	moviw [1]fsr0
  6226  066B  00AC               	movwf	___ftmul@f1+1
  6227  066C  3F02               	moviw [2]fsr0
  6228  066D  00AD               	movwf	___ftmul@f1+2
  6229  066E  3064               	movlw	100
  6230  066F  00F8               	movwf	___awdiv@divisor
  6231  0670  3000               	movlw	0
  6232  0671  00F9               	movwf	___awdiv@divisor+1
  6233  0672  0843               	movf	scale@scl,w
  6234  0673  00FA               	movwf	___awdiv@dividend
  6235  0674  01FB               	clrf	___awdiv@dividend+1
  6236  0675  1BFA               	btfsc	___awdiv@dividend,7
  6237  0676  03FB               	decf	___awdiv@dividend+1,f
  6238  0677  3188  20A1  3185   	fcall	___awdiv
  6239  067A  0878               	movf	?___awdiv,w
  6240  067B  3E12               	addlw	18
  6241  067C  0020               	movlb	0	; select bank0
  6242  067D  00A5               	movwf	___wmul@multiplier
  6243  067E  3000               	movlw	0
  6244  067F  3D79               	addwfc	?___awdiv+1,w
  6245  0680  00A6               	movwf	___wmul@multiplier+1
  6246  0681  3003               	movlw	3
  6247  0682  00A7               	movwf	___wmul@multiplicand
  6248  0683  3000               	movlw	0
  6249  0684  00A8               	movwf	___wmul@multiplicand+1
  6250  0685  3196  2654  3185   	fcall	___wmul
  6251  0688  0020               	movlb	0	; select bank0
  6252  0689  0826               	movf	?___wmul+1,w
  6253  068A  0085               	movwf	5
  6254  068B  0825               	movf	?___wmul,w
  6255  068C  0084               	movwf	4
  6256  068D  304F               	movlw	low (__powers_| (0+32768))
  6257  068E  0784               	addwf	4,f
  6258  068F  3090               	movlw	high (__powers_| (0+32768))
  6259  0690  3D85               	addwfc	5,f
  6260  0691  3F00               	moviw [0]fsr0
  6261  0692  00AE               	movwf	___ftmul@f2
  6262  0693  3F01               	moviw [1]fsr0
  6263  0694  00AF               	movwf	___ftmul@f2+1
  6264  0695  3F02               	moviw [2]fsr0
  6265  0696  00B0               	movwf	___ftmul@f2+2
  6266  0697  318A  2231  3185   	fcall	___ftmul
  6267  069A  0020               	movlb	0	; select bank0
  6268  069B  082B               	movf	?___ftmul,w
  6269  069C  00C0               	movwf	_scale$1241
  6270  069D  082C               	movf	?___ftmul+1,w
  6271  069E  00C1               	movwf	_scale$1241+1
  6272  069F  082D               	movf	?___ftmul+2,w
  6273  06A0  00C2               	movwf	_scale$1241+2
  6274                           
  6275                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6276  06A1  0843               	movf	scale@scl,w
  6277  06A2  00F3               	movwf	___awmod@dividend
  6278  06A3  01F4               	clrf	___awmod@dividend+1
  6279  06A4  1BF3               	btfsc	___awmod@dividend,7
  6280  06A5  03F4               	decf	___awmod@dividend+1,f
  6281  06A6  300A               	movlw	10
  6282  06A7  00F1               	movwf	___awmod@divisor
  6283  06A8  3000               	movlw	0
  6284  06A9  00F2               	movwf	___awmod@divisor+1
  6285  06AA  3188  205C  3185   	fcall	___awmod
  6286  06AD  0872               	movf	?___awmod+1,w
  6287  06AE  0020               	movlb	0	; select bank0
  6288  06AF  00A6               	movwf	___wmul@multiplier+1
  6289  06B0  0871               	movf	?___awmod,w
  6290  06B1  00A5               	movwf	___wmul@multiplier
  6291  06B2  3003               	movlw	3
  6292  06B3  00A7               	movwf	___wmul@multiplicand
  6293  06B4  3000               	movlw	0
  6294  06B5  00A8               	movwf	___wmul@multiplicand+1
  6295  06B6  3196  2654  3185   	fcall	___wmul
  6296  06B9  0020               	movlb	0	; select bank0
  6297  06BA  0826               	movf	?___wmul+1,w
  6298  06BB  0085               	movwf	5
  6299  06BC  0825               	movf	?___wmul,w
  6300  06BD  0084               	movwf	4
  6301  06BE  304F               	movlw	low (__powers_| (0+32768))
  6302  06BF  0784               	addwf	4,f
  6303  06C0  3090               	movlw	high (__powers_| (0+32768))
  6304  06C1  3D85               	addwfc	5,f
  6305  06C2  3F00               	moviw [0]fsr0
  6306  06C3  00AB               	movwf	___ftmul@f1
  6307  06C4  3F01               	moviw [1]fsr0
  6308  06C5  00AC               	movwf	___ftmul@f1+1
  6309  06C6  3F02               	moviw [2]fsr0
  6310  06C7  00AD               	movwf	___ftmul@f1+2
  6311  06C8  0840               	movf	_scale$1241,w
  6312  06C9  00AE               	movwf	___ftmul@f2
  6313  06CA  0841               	movf	_scale$1241+1,w
  6314  06CB  00AF               	movwf	___ftmul@f2+1
  6315  06CC  0842               	movf	_scale$1241+2,w
  6316  06CD  00B0               	movwf	___ftmul@f2+2
  6317  06CE  318A  2231         	fcall	___ftmul
  6318  06D0  0020               	movlb	0	; select bank0
  6319  06D1  082B               	movf	?___ftmul,w
  6320  06D2  00BB               	movwf	?_scale
  6321  06D3  082C               	movf	?___ftmul+1,w
  6322  06D4  00BC               	movwf	?_scale+1
  6323  06D5  082D               	movf	?___ftmul+2,w
  6324  06D6  00BD               	movwf	?_scale+2
  6325  06D7  0008               	return
  6326  06D8                     l3248:	
  6327                           
  6328                           ;doprnt.c: 438: else if(scl > 10)
  6329  06D8  0843               	movf	scale@scl,w
  6330  06D9  3A80               	xorlw	128
  6331  06DA  3E75               	addlw	-139
  6332  06DB  1C03               	skipc
  6333  06DC  2F37               	goto	l3254
  6334                           
  6335                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6336  06DD  0843               	movf	scale@scl,w
  6337  06DE  00F3               	movwf	___awmod@dividend
  6338  06DF  01F4               	clrf	___awmod@dividend+1
  6339  06E0  1BF3               	btfsc	___awmod@dividend,7
  6340  06E1  03F4               	decf	___awmod@dividend+1,f
  6341  06E2  300A               	movlw	10
  6342  06E3  00F1               	movwf	___awmod@divisor
  6343  06E4  3000               	movlw	0
  6344  06E5  00F2               	movwf	___awmod@divisor+1
  6345  06E6  3188  205C  3185   	fcall	___awmod
  6346  06E9  0872               	movf	?___awmod+1,w
  6347  06EA  0020               	movlb	0	; select bank0
  6348  06EB  00A6               	movwf	___wmul@multiplier+1
  6349  06EC  0871               	movf	?___awmod,w
  6350  06ED  00A5               	movwf	___wmul@multiplier
  6351  06EE  3003               	movlw	3
  6352  06EF  00A7               	movwf	___wmul@multiplicand
  6353  06F0  3000               	movlw	0
  6354  06F1  00A8               	movwf	___wmul@multiplicand+1
  6355  06F2  3196  2654  3185   	fcall	___wmul
  6356  06F5  0020               	movlb	0	; select bank0
  6357  06F6  0826               	movf	?___wmul+1,w
  6358  06F7  0085               	movwf	5
  6359  06F8  0825               	movf	?___wmul,w
  6360  06F9  0084               	movwf	4
  6361  06FA  304F               	movlw	low (__powers_| (0+32768))
  6362  06FB  0784               	addwf	4,f
  6363  06FC  3090               	movlw	high (__powers_| (0+32768))
  6364  06FD  3D85               	addwfc	5,f
  6365  06FE  3F00               	moviw [0]fsr0
  6366  06FF  00AB               	movwf	___ftmul@f1
  6367  0700  3F01               	moviw [1]fsr0
  6368  0701  00AC               	movwf	___ftmul@f1+1
  6369  0702  3F02               	moviw [2]fsr0
  6370  0703  00AD               	movwf	___ftmul@f1+2
  6371  0704  300A               	movlw	10
  6372  0705  00F8               	movwf	___awdiv@divisor
  6373  0706  3000               	movlw	0
  6374  0707  00F9               	movwf	___awdiv@divisor+1
  6375  0708  0843               	movf	scale@scl,w
  6376  0709  00FA               	movwf	___awdiv@dividend
  6377  070A  01FB               	clrf	___awdiv@dividend+1
  6378  070B  1BFA               	btfsc	___awdiv@dividend,7
  6379  070C  03FB               	decf	___awdiv@dividend+1,f
  6380  070D  3188  20A1  3185   	fcall	___awdiv
  6381  0710  0878               	movf	?___awdiv,w
  6382  0711  3E09               	addlw	9
  6383  0712  0020               	movlb	0	; select bank0
  6384  0713  00A5               	movwf	___wmul@multiplier
  6385  0714  3000               	movlw	0
  6386  0715  3D79               	addwfc	?___awdiv+1,w
  6387  0716  00A6               	movwf	___wmul@multiplier+1
  6388  0717  3003               	movlw	3
  6389  0718  00A7               	movwf	___wmul@multiplicand
  6390  0719  3000               	movlw	0
  6391  071A  00A8               	movwf	___wmul@multiplicand+1
  6392  071B  3196  2654  3185   	fcall	___wmul
  6393  071E  0020               	movlb	0	; select bank0
  6394  071F  0826               	movf	?___wmul+1,w
  6395  0720  0085               	movwf	5
  6396  0721  0825               	movf	?___wmul,w
  6397  0722  0084               	movwf	4
  6398  0723  304F               	movlw	low (__powers_| (0+32768))
  6399  0724  0784               	addwf	4,f
  6400  0725  3090               	movlw	high (__powers_| (0+32768))
  6401  0726  3D85               	addwfc	5,f
  6402  0727  3F00               	moviw [0]fsr0
  6403  0728  00AE               	movwf	___ftmul@f2
  6404  0729  3F01               	moviw [1]fsr0
  6405  072A  00AF               	movwf	___ftmul@f2+1
  6406  072B  3F02               	moviw [2]fsr0
  6407  072C  00B0               	movwf	___ftmul@f2+2
  6408  072D  318A  2231         	fcall	___ftmul
  6409  072F  0020               	movlb	0	; select bank0
  6410  0730  082B               	movf	?___ftmul,w
  6411  0731  00BB               	movwf	?_scale
  6412  0732  082C               	movf	?___ftmul+1,w
  6413  0733  00BC               	movwf	?_scale+1
  6414  0734  082D               	movf	?___ftmul+2,w
  6415  0735  00BD               	movwf	?_scale+2
  6416  0736  0008               	return
  6417  0737                     l3254:	
  6418                           
  6419                           ;doprnt.c: 440: return _powers_[scl];
  6420  0737  0843               	movf	scale@scl,w
  6421  0738  00BE               	movwf	??_scale
  6422  0739  01BF               	clrf	??_scale+1
  6423  073A  083E               	movf	??_scale,w
  6424  073B  00A5               	movwf	___wmul@multiplier
  6425  073C  083F               	movf	??_scale+1,w
  6426  073D  00A6               	movwf	___wmul@multiplier+1
  6427  073E  3003               	movlw	3
  6428  073F  00A7               	movwf	___wmul@multiplicand
  6429  0740  3000               	movlw	0
  6430  0741  00A8               	movwf	___wmul@multiplicand+1
  6431  0742  3196  2654         	fcall	___wmul
  6432  0744  0020               	movlb	0	; select bank0
  6433  0745  0826               	movf	?___wmul+1,w
  6434  0746  0085               	movwf	5
  6435  0747  0825               	movf	?___wmul,w
  6436  0748  0084               	movwf	4
  6437  0749  304F               	movlw	low (__powers_| (0+32768))
  6438  074A  0784               	addwf	4,f
  6439  074B  3090               	movlw	high (__powers_| (0+32768))
  6440  074C  3D85               	addwfc	5,f
  6441  074D  3F00               	moviw [0]fsr0
  6442  074E  00BB               	movwf	?_scale
  6443  074F  3F01               	moviw [1]fsr0
  6444  0750  00BC               	movwf	?_scale+1
  6445  0751  3F02               	moviw [2]fsr0
  6446  0752  00BD               	movwf	?_scale+2
  6447  0753  0008               	return
  6448  0754                     __end_of_scale:	
  6449                           
  6450                           	psect	text26
  6451  1572                     __ptext26:	
  6452 ;; *************** function _putch *****************
  6453 ;; Defined at:
  6454 ;;		line 59 in file "UART.c"
  6455 ;; Parameters:    Size  Location     Type
  6456 ;;  txData          1    wreg     unsigned char 
  6457 ;; Auto vars:     Size  Location     Type
  6458 ;;  txData          1    2[COMMON] unsigned char 
  6459 ;; Return value:  Size  Location     Type
  6460 ;;                  1    wreg      void 
  6461 ;; Registers used:
  6462 ;;		wreg, status,2, status,0, pclath, cstack
  6463 ;; Tracked objects:
  6464 ;;		On entry : 0/0
  6465 ;;		On exit  : 0/0
  6466 ;;		Unchanged: 0/0
  6467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6469 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6471 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6472 ;;Total ram usage:        1 bytes
  6473 ;; Hardware stack levels used:    1
  6474 ;; Hardware stack levels required when called:    3
  6475 ;; This function calls:
  6476 ;;		_EUSART_Write
  6477 ;; This function is called by:
  6478 ;;		_printf
  6479 ;; This function uses a non-reentrant model
  6480 ;;
  6481                           
  6482                           
  6483                           ;psect for function _putch
  6484  1572                     _putch:	
  6485                           
  6486                           ;incstack = 0
  6487                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  6488                           ;putch@txData stored from wreg
  6489  1572  00F2               	movwf	putch@txData
  6490                           
  6491                           ;UART.c: 61: EUSART_Write(txData);
  6492  1573  0872               	movf	putch@txData,w
  6493  1574  3195  258D         	fcall	_EUSART_Write
  6494  1576  0008               	return
  6495  1577                     __end_of_putch:	
  6496                           
  6497                           	psect	text27
  6498  158D                     __ptext27:	
  6499 ;; *************** function _EUSART_Write *****************
  6500 ;; Defined at:
  6501 ;;		line 45 in file "UART.c"
  6502 ;; Parameters:    Size  Location     Type
  6503 ;;  txData          1    wreg     unsigned char 
  6504 ;; Auto vars:     Size  Location     Type
  6505 ;;  txData          1    1[COMMON] unsigned char 
  6506 ;; Return value:  Size  Location     Type
  6507 ;;                  1    wreg      void 
  6508 ;; Registers used:
  6509 ;;		wreg
  6510 ;; Tracked objects:
  6511 ;;		On entry : 0/0
  6512 ;;		On exit  : 0/0
  6513 ;;		Unchanged: 0/0
  6514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6516 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6518 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6519 ;;Total ram usage:        1 bytes
  6520 ;; Hardware stack levels used:    1
  6521 ;; Hardware stack levels required when called:    2
  6522 ;; This function calls:
  6523 ;;		Nothing
  6524 ;; This function is called by:
  6525 ;;		_putch
  6526 ;; This function uses a non-reentrant model
  6527 ;;
  6528                           
  6529                           
  6530                           ;psect for function _EUSART_Write
  6531  158D                     _EUSART_Write:	
  6532                           
  6533                           ;incstack = 0
  6534                           ; Regs used in _EUSART_Write: [wreg]
  6535                           ;EUSART_Write@txData stored from wreg
  6536  158D  00F1               	movwf	EUSART_Write@txData
  6537  158E                     l150:	
  6538                           ;UART.c: 48: {
  6539                           
  6540                           ;UART.c: 47: while(0 == PIR1bits.TXIF)
  6541                           
  6542  158E  0020               	movlb	0	; select bank0
  6543  158F  1E11               	btfss	17,4	;volatile
  6544  1590  2D8E               	goto	l150
  6545                           
  6546                           ;UART.c: 49: }
  6547                           ;UART.c: 51: TXREG = txData;
  6548  1591  0871               	movf	EUSART_Write@txData,w
  6549  1592  0023               	movlb	3	; select bank3
  6550  1593  009A               	movwf	26	;volatile
  6551  1594  0008               	return
  6552  1595                     __end_of_EUSART_Write:	
  6553                           
  6554                           	psect	text28
  6555  0E9B                     __ptext28:	
  6556 ;; *************** function _fround *****************
  6557 ;; Defined at:
  6558 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  6559 ;; Parameters:    Size  Location     Type
  6560 ;;  prec            1    wreg     unsigned char 
  6561 ;; Auto vars:     Size  Location     Type
  6562 ;;  prec            1   40[BANK0 ] unsigned char 
  6563 ;; Return value:  Size  Location     Type
  6564 ;;                  3   27[BANK0 ] unsigned char 
  6565 ;; Registers used:
  6566 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6567 ;; Tracked objects:
  6568 ;;		On entry : 0/0
  6569 ;;		On exit  : 0/0
  6570 ;;		Unchanged: 0/0
  6571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6572 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6573 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6574 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6575 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6576 ;;Total ram usage:       14 bytes
  6577 ;; Hardware stack levels used:    1
  6578 ;; Hardware stack levels required when called:    4
  6579 ;; This function calls:
  6580 ;;		___awdiv
  6581 ;;		___awmod
  6582 ;;		___ftmul
  6583 ;;		___wmul
  6584 ;; This function is called by:
  6585 ;;		_printf
  6586 ;; This function uses a non-reentrant model
  6587 ;;
  6588                           
  6589                           
  6590                           ;psect for function _fround
  6591  0E9B                     _fround:	
  6592                           
  6593                           ;incstack = 0
  6594                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6595                           ;fround@prec stored from wreg
  6596  0E9B  0020               	movlb	0	; select bank0
  6597  0E9C  00C8               	movwf	fround@prec
  6598                           
  6599                           ;doprnt.c: 413: if(prec>=110)
  6600  0E9D  306E               	movlw	110
  6601  0E9E  0248               	subwf	fround@prec,w
  6602  0E9F  1C03               	skipc
  6603  0EA0  2F5B               	goto	l3206
  6604                           
  6605                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6606  0EA1  300A               	movlw	10
  6607  0EA2  00F8               	movwf	___awdiv@divisor
  6608  0EA3  3000               	movlw	0
  6609  0EA4  00F9               	movwf	___awdiv@divisor+1
  6610  0EA5  0848               	movf	fround@prec,w
  6611  0EA6  00BE               	movwf	??_fround
  6612  0EA7  01BF               	clrf	??_fround+1
  6613  0EA8  083E               	movf	??_fround,w
  6614  0EA9  00F3               	movwf	___awmod@dividend
  6615  0EAA  083F               	movf	??_fround+1,w
  6616  0EAB  00F4               	movwf	___awmod@dividend+1
  6617  0EAC  3064               	movlw	100
  6618  0EAD  00F1               	movwf	___awmod@divisor
  6619  0EAE  3000               	movlw	0
  6620  0EAF  00F2               	movwf	___awmod@divisor+1
  6621  0EB0  3188  205C  318E   	fcall	___awmod
  6622  0EB3  0872               	movf	?___awmod+1,w
  6623  0EB4  00FB               	movwf	___awdiv@dividend+1
  6624  0EB5  0871               	movf	?___awmod,w
  6625  0EB6  00FA               	movwf	___awdiv@dividend
  6626  0EB7  3188  20A1  318E   	fcall	___awdiv
  6627  0EBA  0878               	movf	?___awdiv,w
  6628  0EBB  3E09               	addlw	9
  6629  0EBC  0020               	movlb	0	; select bank0
  6630  0EBD  00A5               	movwf	___wmul@multiplier
  6631  0EBE  3000               	movlw	0
  6632  0EBF  3D79               	addwfc	?___awdiv+1,w
  6633  0EC0  00A6               	movwf	___wmul@multiplier+1
  6634  0EC1  3003               	movlw	3
  6635  0EC2  00A7               	movwf	___wmul@multiplicand
  6636  0EC3  3000               	movlw	0
  6637  0EC4  00A8               	movwf	___wmul@multiplicand+1
  6638  0EC5  3196  2654  318E   	fcall	___wmul
  6639  0EC8  0020               	movlb	0	; select bank0
  6640  0EC9  0826               	movf	?___wmul+1,w
  6641  0ECA  0085               	movwf	5
  6642  0ECB  0825               	movf	?___wmul,w
  6643  0ECC  0084               	movwf	4
  6644  0ECD  3028               	movlw	low (__npowers_| (0+32768))
  6645  0ECE  0784               	addwf	4,f
  6646  0ECF  3090               	movlw	high (__npowers_| (0+32768))
  6647  0ED0  3D85               	addwfc	5,f
  6648  0ED1  3F00               	moviw [0]fsr0
  6649  0ED2  00AB               	movwf	___ftmul@f1
  6650  0ED3  3F01               	moviw [1]fsr0
  6651  0ED4  00AC               	movwf	___ftmul@f1+1
  6652  0ED5  3F02               	moviw [2]fsr0
  6653  0ED6  00AD               	movwf	___ftmul@f1+2
  6654  0ED7  3064               	movlw	100
  6655  0ED8  00F8               	movwf	___awdiv@divisor
  6656  0ED9  3000               	movlw	0
  6657  0EDA  00F9               	movwf	___awdiv@divisor+1
  6658  0EDB  0848               	movf	fround@prec,w
  6659  0EDC  00C0               	movwf	??_fround+2
  6660  0EDD  01C1               	clrf	??_fround+3
  6661  0EDE  0840               	movf	??_fround+2,w
  6662  0EDF  00FA               	movwf	___awdiv@dividend
  6663  0EE0  0841               	movf	??_fround+3,w
  6664  0EE1  00FB               	movwf	___awdiv@dividend+1
  6665  0EE2  3188  20A1  318E   	fcall	___awdiv
  6666  0EE5  0878               	movf	?___awdiv,w
  6667  0EE6  3E12               	addlw	18
  6668  0EE7  0020               	movlb	0	; select bank0
  6669  0EE8  00A5               	movwf	___wmul@multiplier
  6670  0EE9  3000               	movlw	0
  6671  0EEA  3D79               	addwfc	?___awdiv+1,w
  6672  0EEB  00A6               	movwf	___wmul@multiplier+1
  6673  0EEC  3003               	movlw	3
  6674  0EED  00A7               	movwf	___wmul@multiplicand
  6675  0EEE  3000               	movlw	0
  6676  0EEF  00A8               	movwf	___wmul@multiplicand+1
  6677  0EF0  3196  2654  318E   	fcall	___wmul
  6678  0EF3  0020               	movlb	0	; select bank0
  6679  0EF4  0826               	movf	?___wmul+1,w
  6680  0EF5  0085               	movwf	5
  6681  0EF6  0825               	movf	?___wmul,w
  6682  0EF7  0084               	movwf	4
  6683  0EF8  3028               	movlw	low (__npowers_| (0+32768))
  6684  0EF9  0784               	addwf	4,f
  6685  0EFA  3090               	movlw	high (__npowers_| (0+32768))
  6686  0EFB  3D85               	addwfc	5,f
  6687  0EFC  3F00               	moviw [0]fsr0
  6688  0EFD  00AE               	movwf	___ftmul@f2
  6689  0EFE  3F01               	moviw [1]fsr0
  6690  0EFF  00AF               	movwf	___ftmul@f2+1
  6691  0F00  3F02               	moviw [2]fsr0
  6692  0F01  00B0               	movwf	___ftmul@f2+2
  6693  0F02  318A  2231  318E   	fcall	___ftmul
  6694  0F05  0020               	movlb	0	; select bank0
  6695  0F06  082B               	movf	?___ftmul,w
  6696  0F07  00C5               	movwf	_fround$1239
  6697  0F08  082C               	movf	?___ftmul+1,w
  6698  0F09  00C6               	movwf	_fround$1239+1
  6699  0F0A  082D               	movf	?___ftmul+2,w
  6700  0F0B  00C7               	movwf	_fround$1239+2
  6701                           
  6702                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6703  0F0C  0848               	movf	fround@prec,w
  6704  0F0D  00BE               	movwf	??_fround
  6705  0F0E  01BF               	clrf	??_fround+1
  6706  0F0F  083E               	movf	??_fround,w
  6707  0F10  00F3               	movwf	___awmod@dividend
  6708  0F11  083F               	movf	??_fround+1,w
  6709  0F12  00F4               	movwf	___awmod@dividend+1
  6710  0F13  300A               	movlw	10
  6711  0F14  00F1               	movwf	___awmod@divisor
  6712  0F15  3000               	movlw	0
  6713  0F16  00F2               	movwf	___awmod@divisor+1
  6714  0F17  3188  205C  318E   	fcall	___awmod
  6715  0F1A  0872               	movf	?___awmod+1,w
  6716  0F1B  0020               	movlb	0	; select bank0
  6717  0F1C  00A6               	movwf	___wmul@multiplier+1
  6718  0F1D  0871               	movf	?___awmod,w
  6719  0F1E  00A5               	movwf	___wmul@multiplier
  6720  0F1F  3003               	movlw	3
  6721  0F20  00A7               	movwf	___wmul@multiplicand
  6722  0F21  3000               	movlw	0
  6723  0F22  00A8               	movwf	___wmul@multiplicand+1
  6724  0F23  3196  2654  318E   	fcall	___wmul
  6725  0F26  0020               	movlb	0	; select bank0
  6726  0F27  0826               	movf	?___wmul+1,w
  6727  0F28  0085               	movwf	5
  6728  0F29  0825               	movf	?___wmul,w
  6729  0F2A  0084               	movwf	4
  6730  0F2B  3028               	movlw	low (__npowers_| (0+32768))
  6731  0F2C  0784               	addwf	4,f
  6732  0F2D  3090               	movlw	high (__npowers_| (0+32768))
  6733  0F2E  3D85               	addwfc	5,f
  6734  0F2F  3F00               	moviw [0]fsr0
  6735  0F30  00AB               	movwf	___ftmul@f1
  6736  0F31  3F01               	moviw [1]fsr0
  6737  0F32  00AC               	movwf	___ftmul@f1+1
  6738  0F33  3F02               	moviw [2]fsr0
  6739  0F34  00AD               	movwf	___ftmul@f1+2
  6740  0F35  0845               	movf	_fround$1239,w
  6741  0F36  00AE               	movwf	___ftmul@f2
  6742  0F37  0846               	movf	_fround$1239+1,w
  6743  0F38  00AF               	movwf	___ftmul@f2+1
  6744  0F39  0847               	movf	_fround$1239+2,w
  6745  0F3A  00B0               	movwf	___ftmul@f2+2
  6746  0F3B  318A  2231  318E   	fcall	___ftmul
  6747  0F3E  0020               	movlb	0	; select bank0
  6748  0F3F  082B               	movf	?___ftmul,w
  6749  0F40  00C2               	movwf	_fround$1240
  6750  0F41  082C               	movf	?___ftmul+1,w
  6751  0F42  00C3               	movwf	_fround$1240+1
  6752  0F43  082D               	movf	?___ftmul+2,w
  6753  0F44  00C4               	movwf	_fround$1240+2
  6754                           
  6755                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6756  0F45  3000               	movlw	0
  6757  0F46  00AB               	movwf	___ftmul@f1
  6758  0F47  3000               	movlw	0
  6759  0F48  00AC               	movwf	___ftmul@f1+1
  6760  0F49  303F               	movlw	63
  6761  0F4A  00AD               	movwf	___ftmul@f1+2
  6762  0F4B  0842               	movf	_fround$1240,w
  6763  0F4C  00AE               	movwf	___ftmul@f2
  6764  0F4D  0843               	movf	_fround$1240+1,w
  6765  0F4E  00AF               	movwf	___ftmul@f2+1
  6766  0F4F  0844               	movf	_fround$1240+2,w
  6767  0F50  00B0               	movwf	___ftmul@f2+2
  6768  0F51  318A  2231         	fcall	___ftmul
  6769  0F53  0020               	movlb	0	; select bank0
  6770  0F54  082B               	movf	?___ftmul,w
  6771  0F55  00BB               	movwf	?_fround
  6772  0F56  082C               	movf	?___ftmul+1,w
  6773  0F57  00BC               	movwf	?_fround+1
  6774  0F58  082D               	movf	?___ftmul+2,w
  6775  0F59  00BD               	movwf	?_fround+2
  6776  0F5A  0008               	return
  6777  0F5B                     l3206:	
  6778                           
  6779                           ;doprnt.c: 415: else if(prec > 10)
  6780  0F5B  300B               	movlw	11
  6781  0F5C  0248               	subwf	fround@prec,w
  6782  0F5D  1C03               	skipc
  6783  0F5E  2FD3               	goto	l3214
  6784                           
  6785                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6786  0F5F  0848               	movf	fround@prec,w
  6787  0F60  00BE               	movwf	??_fround
  6788  0F61  01BF               	clrf	??_fround+1
  6789  0F62  083E               	movf	??_fround,w
  6790  0F63  00F3               	movwf	___awmod@dividend
  6791  0F64  083F               	movf	??_fround+1,w
  6792  0F65  00F4               	movwf	___awmod@dividend+1
  6793  0F66  300A               	movlw	10
  6794  0F67  00F1               	movwf	___awmod@divisor
  6795  0F68  3000               	movlw	0
  6796  0F69  00F2               	movwf	___awmod@divisor+1
  6797  0F6A  3188  205C  318E   	fcall	___awmod
  6798  0F6D  0872               	movf	?___awmod+1,w
  6799  0F6E  0020               	movlb	0	; select bank0
  6800  0F6F  00A6               	movwf	___wmul@multiplier+1
  6801  0F70  0871               	movf	?___awmod,w
  6802  0F71  00A5               	movwf	___wmul@multiplier
  6803  0F72  3003               	movlw	3
  6804  0F73  00A7               	movwf	___wmul@multiplicand
  6805  0F74  3000               	movlw	0
  6806  0F75  00A8               	movwf	___wmul@multiplicand+1
  6807  0F76  3196  2654  318E   	fcall	___wmul
  6808  0F79  0020               	movlb	0	; select bank0
  6809  0F7A  0826               	movf	?___wmul+1,w
  6810  0F7B  0085               	movwf	5
  6811  0F7C  0825               	movf	?___wmul,w
  6812  0F7D  0084               	movwf	4
  6813  0F7E  3028               	movlw	low (__npowers_| (0+32768))
  6814  0F7F  0784               	addwf	4,f
  6815  0F80  3090               	movlw	high (__npowers_| (0+32768))
  6816  0F81  3D85               	addwfc	5,f
  6817  0F82  3F00               	moviw [0]fsr0
  6818  0F83  00AB               	movwf	___ftmul@f1
  6819  0F84  3F01               	moviw [1]fsr0
  6820  0F85  00AC               	movwf	___ftmul@f1+1
  6821  0F86  3F02               	moviw [2]fsr0
  6822  0F87  00AD               	movwf	___ftmul@f1+2
  6823  0F88  300A               	movlw	10
  6824  0F89  00F8               	movwf	___awdiv@divisor
  6825  0F8A  3000               	movlw	0
  6826  0F8B  00F9               	movwf	___awdiv@divisor+1
  6827  0F8C  0848               	movf	fround@prec,w
  6828  0F8D  00C0               	movwf	??_fround+2
  6829  0F8E  01C1               	clrf	??_fround+3
  6830  0F8F  0840               	movf	??_fround+2,w
  6831  0F90  00FA               	movwf	___awdiv@dividend
  6832  0F91  0841               	movf	??_fround+3,w
  6833  0F92  00FB               	movwf	___awdiv@dividend+1
  6834  0F93  3188  20A1  318E   	fcall	___awdiv
  6835  0F96  0878               	movf	?___awdiv,w
  6836  0F97  3E09               	addlw	9
  6837  0F98  0020               	movlb	0	; select bank0
  6838  0F99  00A5               	movwf	___wmul@multiplier
  6839  0F9A  3000               	movlw	0
  6840  0F9B  3D79               	addwfc	?___awdiv+1,w
  6841  0F9C  00A6               	movwf	___wmul@multiplier+1
  6842  0F9D  3003               	movlw	3
  6843  0F9E  00A7               	movwf	___wmul@multiplicand
  6844  0F9F  3000               	movlw	0
  6845  0FA0  00A8               	movwf	___wmul@multiplicand+1
  6846  0FA1  3196  2654  318E   	fcall	___wmul
  6847  0FA4  0020               	movlb	0	; select bank0
  6848  0FA5  0826               	movf	?___wmul+1,w
  6849  0FA6  0085               	movwf	5
  6850  0FA7  0825               	movf	?___wmul,w
  6851  0FA8  0084               	movwf	4
  6852  0FA9  3028               	movlw	low (__npowers_| (0+32768))
  6853  0FAA  0784               	addwf	4,f
  6854  0FAB  3090               	movlw	high (__npowers_| (0+32768))
  6855  0FAC  3D85               	addwfc	5,f
  6856  0FAD  3F00               	moviw [0]fsr0
  6857  0FAE  00AE               	movwf	___ftmul@f2
  6858  0FAF  3F01               	moviw [1]fsr0
  6859  0FB0  00AF               	movwf	___ftmul@f2+1
  6860  0FB1  3F02               	moviw [2]fsr0
  6861  0FB2  00B0               	movwf	___ftmul@f2+2
  6862  0FB3  318A  2231  318E   	fcall	___ftmul
  6863  0FB6  0020               	movlb	0	; select bank0
  6864  0FB7  082B               	movf	?___ftmul,w
  6865  0FB8  00C5               	movwf	_fround$1239
  6866  0FB9  082C               	movf	?___ftmul+1,w
  6867  0FBA  00C6               	movwf	_fround$1239+1
  6868  0FBB  082D               	movf	?___ftmul+2,w
  6869  0FBC  00C7               	movwf	_fround$1239+2
  6870                           
  6871                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6872  0FBD  3000               	movlw	0
  6873  0FBE  00AB               	movwf	___ftmul@f1
  6874  0FBF  3000               	movlw	0
  6875  0FC0  00AC               	movwf	___ftmul@f1+1
  6876  0FC1  303F               	movlw	63
  6877  0FC2  00AD               	movwf	___ftmul@f1+2
  6878  0FC3  0845               	movf	_fround$1239,w
  6879  0FC4  00AE               	movwf	___ftmul@f2
  6880  0FC5  0846               	movf	_fround$1239+1,w
  6881  0FC6  00AF               	movwf	___ftmul@f2+1
  6882  0FC7  0847               	movf	_fround$1239+2,w
  6883  0FC8  00B0               	movwf	___ftmul@f2+2
  6884  0FC9  318A  2231         	fcall	___ftmul
  6885  0FCB  0020               	movlb	0	; select bank0
  6886  0FCC  082B               	movf	?___ftmul,w
  6887  0FCD  00BB               	movwf	?_fround
  6888  0FCE  082C               	movf	?___ftmul+1,w
  6889  0FCF  00BC               	movwf	?_fround+1
  6890  0FD0  082D               	movf	?___ftmul+2,w
  6891  0FD1  00BD               	movwf	?_fround+2
  6892  0FD2  0008               	return
  6893  0FD3                     l3214:	
  6894                           
  6895                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  6896  0FD3  3000               	movlw	0
  6897  0FD4  00AB               	movwf	___ftmul@f1
  6898  0FD5  3000               	movlw	0
  6899  0FD6  00AC               	movwf	___ftmul@f1+1
  6900  0FD7  303F               	movlw	63
  6901  0FD8  00AD               	movwf	___ftmul@f1+2
  6902  0FD9  0848               	movf	fround@prec,w
  6903  0FDA  00BE               	movwf	??_fround
  6904  0FDB  01BF               	clrf	??_fround+1
  6905  0FDC  083E               	movf	??_fround,w
  6906  0FDD  00A5               	movwf	___wmul@multiplier
  6907  0FDE  083F               	movf	??_fround+1,w
  6908  0FDF  00A6               	movwf	___wmul@multiplier+1
  6909  0FE0  3003               	movlw	3
  6910  0FE1  00A7               	movwf	___wmul@multiplicand
  6911  0FE2  3000               	movlw	0
  6912  0FE3  00A8               	movwf	___wmul@multiplicand+1
  6913  0FE4  3196  2654  318E   	fcall	___wmul
  6914  0FE7  0020               	movlb	0	; select bank0
  6915  0FE8  0826               	movf	?___wmul+1,w
  6916  0FE9  0085               	movwf	5
  6917  0FEA  0825               	movf	?___wmul,w
  6918  0FEB  0084               	movwf	4
  6919  0FEC  3028               	movlw	low (__npowers_| (0+32768))
  6920  0FED  0784               	addwf	4,f
  6921  0FEE  3090               	movlw	high (__npowers_| (0+32768))
  6922  0FEF  3D85               	addwfc	5,f
  6923  0FF0  3F00               	moviw [0]fsr0
  6924  0FF1  00AE               	movwf	___ftmul@f2
  6925  0FF2  3F01               	moviw [1]fsr0
  6926  0FF3  00AF               	movwf	___ftmul@f2+1
  6927  0FF4  3F02               	moviw [2]fsr0
  6928  0FF5  00B0               	movwf	___ftmul@f2+2
  6929  0FF6  318A  2231         	fcall	___ftmul
  6930  0FF8  0020               	movlb	0	; select bank0
  6931  0FF9  082B               	movf	?___ftmul,w
  6932  0FFA  00BB               	movwf	?_fround
  6933  0FFB  082C               	movf	?___ftmul+1,w
  6934  0FFC  00BC               	movwf	?_fround+1
  6935  0FFD  082D               	movf	?___ftmul+2,w
  6936  0FFE  00BD               	movwf	?_fround+2
  6937  0FFF  0008               	return
  6938  1000                     __end_of_fround:	
  6939                           
  6940                           	psect	text29
  6941  1654                     __ptext29:	
  6942 ;; *************** function ___wmul *****************
  6943 ;; Defined at:
  6944 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  6945 ;; Parameters:    Size  Location     Type
  6946 ;;  multiplier      2    5[BANK0 ] unsigned int 
  6947 ;;  multiplicand    2    7[BANK0 ] unsigned int 
  6948 ;; Auto vars:     Size  Location     Type
  6949 ;;  product         2    9[BANK0 ] unsigned int 
  6950 ;; Return value:  Size  Location     Type
  6951 ;;                  2    5[BANK0 ] unsigned int 
  6952 ;; Registers used:
  6953 ;;		wreg, status,2, status,0
  6954 ;; Tracked objects:
  6955 ;;		On entry : 0/0
  6956 ;;		On exit  : 0/0
  6957 ;;		Unchanged: 0/0
  6958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6959 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6960 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6962 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6963 ;;Total ram usage:        6 bytes
  6964 ;; Hardware stack levels used:    1
  6965 ;; Hardware stack levels required when called:    2
  6966 ;; This function calls:
  6967 ;;		Nothing
  6968 ;; This function is called by:
  6969 ;;		_fround
  6970 ;;		_scale
  6971 ;;		_printf
  6972 ;; This function uses a non-reentrant model
  6973 ;;
  6974                           
  6975                           
  6976                           ;psect for function ___wmul
  6977  1654                     ___wmul:	
  6978                           
  6979                           ;incstack = 0
  6980                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6981  1654  0020               	movlb	0	; select bank0
  6982  1655  01A9               	clrf	___wmul@product
  6983  1656  01AA               	clrf	___wmul@product+1
  6984  1657                     l2980:	
  6985  1657  1C25               	btfss	___wmul@multiplier,0
  6986  1658  2E5D               	goto	l458
  6987  1659  0827               	movf	___wmul@multiplicand,w
  6988  165A  07A9               	addwf	___wmul@product,f
  6989  165B  0828               	movf	___wmul@multiplicand+1,w
  6990  165C  3DAA               	addwfc	___wmul@product+1,f
  6991  165D                     l458:	
  6992  165D  3001               	movlw	1
  6993  165E                     u4295:	
  6994  165E  35A7               	lslf	___wmul@multiplicand,f
  6995  165F  0DA8               	rlf	___wmul@multiplicand+1,f
  6996  1660  0B89               	decfsz	9,f
  6997  1661  2E5E               	goto	u4295
  6998  1662  3001               	movlw	1
  6999  1663                     u4305:	
  7000  1663  36A6               	lsrf	___wmul@multiplier+1,f
  7001  1664  0CA5               	rrf	___wmul@multiplier,f
  7002  1665  0B89               	decfsz	9,f
  7003  1666  2E63               	goto	u4305
  7004  1667  0825               	movf	___wmul@multiplier,w
  7005  1668  0426               	iorwf	___wmul@multiplier+1,w
  7006  1669  1D03               	btfss	3,2
  7007  166A  2E57               	goto	l2980
  7008  166B  082A               	movf	___wmul@product+1,w
  7009  166C  00A6               	movwf	?___wmul+1
  7010  166D  0829               	movf	___wmul@product,w
  7011  166E  00A5               	movwf	?___wmul
  7012  166F  0008               	return
  7013  1670                     __end_of___wmul:	
  7014                           
  7015                           	psect	text30
  7016  0A31                     __ptext30:	
  7017 ;; *************** function ___ftmul *****************
  7018 ;; Defined at:
  7019 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
  7020 ;; Parameters:    Size  Location     Type
  7021 ;;  f1              3   11[BANK0 ] float 
  7022 ;;  f2              3   14[BANK0 ] float 
  7023 ;; Auto vars:     Size  Location     Type
  7024 ;;  f3_as_produc    3   22[BANK0 ] unsigned um
  7025 ;;  sign            1   26[BANK0 ] unsigned char 
  7026 ;;  cntr            1   25[BANK0 ] unsigned char 
  7027 ;;  exp             1   21[BANK0 ] unsigned char 
  7028 ;; Return value:  Size  Location     Type
  7029 ;;                  3   11[BANK0 ] float 
  7030 ;; Registers used:
  7031 ;;		wreg, status,2, status,0, pclath, cstack
  7032 ;; Tracked objects:
  7033 ;;		On entry : 0/0
  7034 ;;		On exit  : 0/0
  7035 ;;		Unchanged: 0/0
  7036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7037 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7038 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7039 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7040 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7041 ;;Total ram usage:       16 bytes
  7042 ;; Hardware stack levels used:    1
  7043 ;; Hardware stack levels required when called:    3
  7044 ;; This function calls:
  7045 ;;		___ftpack
  7046 ;; This function is called by:
  7047 ;;		_RadioOperation
  7048 ;;		_fround
  7049 ;;		_scale
  7050 ;;		_printf
  7051 ;; This function uses a non-reentrant model
  7052 ;;
  7053                           
  7054                           
  7055                           ;psect for function ___ftmul
  7056  0A31                     ___ftmul:	
  7057                           
  7058                           ;incstack = 0
  7059                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7060  0A31  0020               	movlb	0	; select bank0
  7061  0A32  082B               	movf	___ftmul@f1,w
  7062  0A33  00B1               	movwf	??___ftmul
  7063  0A34  082C               	movf	___ftmul@f1+1,w
  7064  0A35  00B2               	movwf	??___ftmul+1
  7065  0A36  082D               	movf	___ftmul@f1+2,w
  7066  0A37  00B3               	movwf	??___ftmul+2
  7067  0A38  1003               	clrc
  7068  0A39  0D32               	rlf	??___ftmul+1,w
  7069  0A3A  0D33               	rlf	??___ftmul+2,w
  7070  0A3B  00B4               	movwf	??___ftmul+3
  7071  0A3C  0834               	movf	??___ftmul+3,w
  7072  0A3D  00B5               	movwf	___ftmul@exp
  7073  0A3E  0835               	movf	___ftmul@exp,w
  7074  0A3F  1D03               	btfss	3,2
  7075  0A40  2A48               	goto	l3150
  7076  0A41  3000               	movlw	0
  7077  0A42  00AB               	movwf	?___ftmul
  7078  0A43  3000               	movlw	0
  7079  0A44  00AC               	movwf	?___ftmul+1
  7080  0A45  3000               	movlw	0
  7081  0A46  00AD               	movwf	?___ftmul+2
  7082  0A47  0008               	return
  7083  0A48                     l3150:	
  7084  0A48  082E               	movf	___ftmul@f2,w
  7085  0A49  00B1               	movwf	??___ftmul
  7086  0A4A  082F               	movf	___ftmul@f2+1,w
  7087  0A4B  00B2               	movwf	??___ftmul+1
  7088  0A4C  0830               	movf	___ftmul@f2+2,w
  7089  0A4D  00B3               	movwf	??___ftmul+2
  7090  0A4E  1003               	clrc
  7091  0A4F  0D32               	rlf	??___ftmul+1,w
  7092  0A50  0D33               	rlf	??___ftmul+2,w
  7093  0A51  00B4               	movwf	??___ftmul+3
  7094  0A52  0834               	movf	??___ftmul+3,w
  7095  0A53  00BA               	movwf	___ftmul@sign
  7096  0A54  083A               	movf	___ftmul@sign,w
  7097  0A55  1D03               	btfss	3,2
  7098  0A56  2A5E               	goto	l3156
  7099  0A57  3000               	movlw	0
  7100  0A58  00AB               	movwf	?___ftmul
  7101  0A59  3000               	movlw	0
  7102  0A5A  00AC               	movwf	?___ftmul+1
  7103  0A5B  3000               	movlw	0
  7104  0A5C  00AD               	movwf	?___ftmul+2
  7105  0A5D  0008               	return
  7106  0A5E                     l3156:	
  7107  0A5E  083A               	movf	___ftmul@sign,w
  7108  0A5F  3E7B               	addlw	123
  7109  0A60  00B1               	movwf	??___ftmul
  7110  0A61  0831               	movf	??___ftmul,w
  7111  0A62  07B5               	addwf	___ftmul@exp,f
  7112  0A63  082B               	movf	___ftmul@f1,w
  7113  0A64  00B1               	movwf	??___ftmul
  7114  0A65  082C               	movf	___ftmul@f1+1,w
  7115  0A66  00B2               	movwf	??___ftmul+1
  7116  0A67  082D               	movf	___ftmul@f1+2,w
  7117  0A68  00B3               	movwf	??___ftmul+2
  7118  0A69  3010               	movlw	16
  7119  0A6A                     u4765:	
  7120  0A6A  36B3               	lsrf	??___ftmul+2,f
  7121  0A6B  0CB2               	rrf	??___ftmul+1,f
  7122  0A6C  0CB1               	rrf	??___ftmul,f
  7123  0A6D  0B89               	decfsz	9,f
  7124  0A6E  2A6A               	goto	u4765
  7125  0A6F  0831               	movf	??___ftmul,w
  7126  0A70  00B4               	movwf	??___ftmul+3
  7127  0A71  0834               	movf	??___ftmul+3,w
  7128  0A72  00BA               	movwf	___ftmul@sign
  7129  0A73  082E               	movf	___ftmul@f2,w
  7130  0A74  00B1               	movwf	??___ftmul
  7131  0A75  082F               	movf	___ftmul@f2+1,w
  7132  0A76  00B2               	movwf	??___ftmul+1
  7133  0A77  0830               	movf	___ftmul@f2+2,w
  7134  0A78  00B3               	movwf	??___ftmul+2
  7135  0A79  3010               	movlw	16
  7136  0A7A                     u4775:	
  7137  0A7A  36B3               	lsrf	??___ftmul+2,f
  7138  0A7B  0CB2               	rrf	??___ftmul+1,f
  7139  0A7C  0CB1               	rrf	??___ftmul,f
  7140  0A7D  0B89               	decfsz	9,f
  7141  0A7E  2A7A               	goto	u4775
  7142  0A7F  0831               	movf	??___ftmul,w
  7143  0A80  00B4               	movwf	??___ftmul+3
  7144  0A81  0834               	movf	??___ftmul+3,w
  7145  0A82  06BA               	xorwf	___ftmul@sign,f
  7146  0A83  3080               	movlw	128
  7147  0A84  00B1               	movwf	??___ftmul
  7148  0A85  0831               	movf	??___ftmul,w
  7149  0A86  05BA               	andwf	___ftmul@sign,f
  7150  0A87  17AC               	bsf	___ftmul@f1+1,7
  7151  0A88  17AF               	bsf	___ftmul@f2+1,7
  7152  0A89  30FF               	movlw	255
  7153  0A8A  05AE               	andwf	___ftmul@f2,f
  7154  0A8B  30FF               	movlw	255
  7155  0A8C  05AF               	andwf	___ftmul@f2+1,f
  7156  0A8D  3000               	movlw	0
  7157  0A8E  05B0               	andwf	___ftmul@f2+2,f
  7158  0A8F  3000               	movlw	0
  7159  0A90  00B6               	movwf	___ftmul@f3_as_product
  7160  0A91  3000               	movlw	0
  7161  0A92  00B7               	movwf	___ftmul@f3_as_product+1
  7162  0A93  3000               	movlw	0
  7163  0A94  00B8               	movwf	___ftmul@f3_as_product+2
  7164  0A95  3007               	movlw	7
  7165  0A96  00B1               	movwf	??___ftmul
  7166  0A97  0831               	movf	??___ftmul,w
  7167  0A98  00B9               	movwf	___ftmul@cntr
  7168  0A99                     l3168:	
  7169  0A99  1C2B               	btfss	___ftmul@f1,0
  7170  0A9A  2AA1               	goto	l3172
  7171  0A9B  082E               	movf	___ftmul@f2,w
  7172  0A9C  07B6               	addwf	___ftmul@f3_as_product,f
  7173  0A9D  082F               	movf	___ftmul@f2+1,w
  7174  0A9E  3DB7               	addwfc	___ftmul@f3_as_product+1,f
  7175  0A9F  0830               	movf	___ftmul@f2+2,w
  7176  0AA0  3DB8               	addwfc	___ftmul@f3_as_product+2,f
  7177  0AA1                     l3172:	
  7178  0AA1  3001               	movlw	1
  7179  0AA2                     u4795:	
  7180  0AA2  36AD               	lsrf	___ftmul@f1+2,f
  7181  0AA3  0CAC               	rrf	___ftmul@f1+1,f
  7182  0AA4  0CAB               	rrf	___ftmul@f1,f
  7183  0AA5  0B89               	decfsz	9,f
  7184  0AA6  2AA2               	goto	u4795
  7185  0AA7  3001               	movlw	1
  7186  0AA8                     u4805:	
  7187  0AA8  35AE               	lslf	___ftmul@f2,f
  7188  0AA9  0DAF               	rlf	___ftmul@f2+1,f
  7189  0AAA  0DB0               	rlf	___ftmul@f2+2,f
  7190  0AAB  0B89               	decfsz	9,f
  7191  0AAC  2AA8               	goto	u4805
  7192  0AAD  3001               	movlw	1
  7193  0AAE  02B9               	subwf	___ftmul@cntr,f
  7194  0AAF  1D03               	btfss	3,2
  7195  0AB0  2A99               	goto	l3168
  7196  0AB1  3009               	movlw	9
  7197  0AB2  00B1               	movwf	??___ftmul
  7198  0AB3  0831               	movf	??___ftmul,w
  7199  0AB4  00B9               	movwf	___ftmul@cntr
  7200  0AB5                     l3180:	
  7201  0AB5  1C2B               	btfss	___ftmul@f1,0
  7202  0AB6  2ABD               	goto	l3184
  7203  0AB7  082E               	movf	___ftmul@f2,w
  7204  0AB8  07B6               	addwf	___ftmul@f3_as_product,f
  7205  0AB9  082F               	movf	___ftmul@f2+1,w
  7206  0ABA  3DB7               	addwfc	___ftmul@f3_as_product+1,f
  7207  0ABB  0830               	movf	___ftmul@f2+2,w
  7208  0ABC  3DB8               	addwfc	___ftmul@f3_as_product+2,f
  7209  0ABD                     l3184:	
  7210  0ABD  3001               	movlw	1
  7211  0ABE                     u4835:	
  7212  0ABE  36AD               	lsrf	___ftmul@f1+2,f
  7213  0ABF  0CAC               	rrf	___ftmul@f1+1,f
  7214  0AC0  0CAB               	rrf	___ftmul@f1,f
  7215  0AC1  0B89               	decfsz	9,f
  7216  0AC2  2ABE               	goto	u4835
  7217  0AC3  3001               	movlw	1
  7218  0AC4                     u4845:	
  7219  0AC4  36B8               	lsrf	___ftmul@f3_as_product+2,f
  7220  0AC5  0CB7               	rrf	___ftmul@f3_as_product+1,f
  7221  0AC6  0CB6               	rrf	___ftmul@f3_as_product,f
  7222  0AC7  0B89               	decfsz	9,f
  7223  0AC8  2AC4               	goto	u4845
  7224  0AC9  3001               	movlw	1
  7225  0ACA  02B9               	subwf	___ftmul@cntr,f
  7226  0ACB  1D03               	btfss	3,2
  7227  0ACC  2AB5               	goto	l3180
  7228  0ACD  0836               	movf	___ftmul@f3_as_product,w
  7229  0ACE  00F1               	movwf	___ftpack@arg
  7230  0ACF  0837               	movf	___ftmul@f3_as_product+1,w
  7231  0AD0  00F2               	movwf	___ftpack@arg+1
  7232  0AD1  0838               	movf	___ftmul@f3_as_product+2,w
  7233  0AD2  00F3               	movwf	___ftpack@arg+2
  7234  0AD3  0835               	movf	___ftmul@exp,w
  7235  0AD4  00B1               	movwf	??___ftmul
  7236  0AD5  0831               	movf	??___ftmul,w
  7237  0AD6  00F4               	movwf	___ftpack@exp
  7238  0AD7  083A               	movf	___ftmul@sign,w
  7239  0AD8  00B2               	movwf	??___ftmul+1
  7240  0AD9  0832               	movf	??___ftmul+1,w
  7241  0ADA  00F5               	movwf	___ftpack@sign
  7242  0ADB  3189  2146         	fcall	___ftpack
  7243  0ADD  0871               	movf	?___ftpack,w
  7244  0ADE  0020               	movlb	0	; select bank0
  7245  0ADF  00AB               	movwf	?___ftmul
  7246  0AE0  0872               	movf	?___ftpack+1,w
  7247  0AE1  00AC               	movwf	?___ftmul+1
  7248  0AE2  0873               	movf	?___ftpack+2,w
  7249  0AE3  00AD               	movwf	?___ftmul+2
  7250  0AE4  0008               	return
  7251  0AE5                     __end_of___ftmul:	
  7252                           
  7253                           	psect	text31
  7254  085C                     __ptext31:	
  7255 ;; *************** function ___awmod *****************
  7256 ;; Defined at:
  7257 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  7258 ;; Parameters:    Size  Location     Type
  7259 ;;  divisor         2    1[COMMON] int 
  7260 ;;  dividend        2    3[COMMON] int 
  7261 ;; Auto vars:     Size  Location     Type
  7262 ;;  sign            1    7[COMMON] unsigned char 
  7263 ;;  counter         1    6[COMMON] unsigned char 
  7264 ;; Return value:  Size  Location     Type
  7265 ;;                  2    1[COMMON] int 
  7266 ;; Registers used:
  7267 ;;		wreg, status,2, status,0
  7268 ;; Tracked objects:
  7269 ;;		On entry : 0/0
  7270 ;;		On exit  : 0/0
  7271 ;;		Unchanged: 0/0
  7272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7273 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7274 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7275 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7276 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7277 ;;Total ram usage:        7 bytes
  7278 ;; Hardware stack levels used:    1
  7279 ;; Hardware stack levels required when called:    2
  7280 ;; This function calls:
  7281 ;;		Nothing
  7282 ;; This function is called by:
  7283 ;;		_fround
  7284 ;;		_scale
  7285 ;; This function uses a non-reentrant model
  7286 ;;
  7287                           
  7288                           
  7289                           ;psect for function ___awmod
  7290  085C                     ___awmod:	
  7291                           
  7292                           ;incstack = 0
  7293                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  7294  085C  01F7               	clrf	___awmod@sign
  7295  085D  1FF4               	btfss	___awmod@dividend+1,7
  7296  085E  2866               	goto	l3044
  7297  085F  09F3               	comf	___awmod@dividend,f
  7298  0860  09F4               	comf	___awmod@dividend+1,f
  7299  0861  0AF3               	incf	___awmod@dividend,f
  7300  0862  1903               	skipnz
  7301  0863  0AF4               	incf	___awmod@dividend+1,f
  7302  0864  01F7               	clrf	___awmod@sign
  7303  0865  0AF7               	incf	___awmod@sign,f
  7304  0866                     l3044:	
  7305  0866  1FF2               	btfss	___awmod@divisor+1,7
  7306  0867  286D               	goto	l3048
  7307  0868  09F1               	comf	___awmod@divisor,f
  7308  0869  09F2               	comf	___awmod@divisor+1,f
  7309  086A  0AF1               	incf	___awmod@divisor,f
  7310  086B  1903               	skipnz
  7311  086C  0AF2               	incf	___awmod@divisor+1,f
  7312  086D                     l3048:	
  7313  086D  0871               	movf	___awmod@divisor,w
  7314  086E  0472               	iorwf	___awmod@divisor+1,w
  7315  086F  1903               	btfsc	3,2
  7316  0870  2894               	goto	l3066
  7317  0871  01F6               	clrf	___awmod@counter
  7318  0872  0AF6               	incf	___awmod@counter,f
  7319  0873                     l3056:	
  7320  0873  1BF2               	btfsc	___awmod@divisor+1,7
  7321  0874  287F               	goto	l3058
  7322  0875  3001               	movlw	1
  7323  0876                     u4455:	
  7324  0876  35F1               	lslf	___awmod@divisor,f
  7325  0877  0DF2               	rlf	___awmod@divisor+1,f
  7326  0878  0B89               	decfsz	9,f
  7327  0879  2876               	goto	u4455
  7328  087A  3001               	movlw	1
  7329  087B  00F5               	movwf	??___awmod
  7330  087C  0875               	movf	??___awmod,w
  7331  087D  07F6               	addwf	___awmod@counter,f
  7332  087E  2873               	goto	l3056
  7333  087F                     l3058:	
  7334  087F  0872               	movf	___awmod@divisor+1,w
  7335  0880  0274               	subwf	___awmod@dividend+1,w
  7336  0881  1D03               	skipz
  7337  0882  2885               	goto	u4475
  7338  0883  0871               	movf	___awmod@divisor,w
  7339  0884  0273               	subwf	___awmod@dividend,w
  7340  0885                     u4475:	
  7341  0885  1C03               	skipc
  7342  0886  288B               	goto	l3062
  7343  0887  0871               	movf	___awmod@divisor,w
  7344  0888  02F3               	subwf	___awmod@dividend,f
  7345  0889  0872               	movf	___awmod@divisor+1,w
  7346  088A  3BF4               	subwfb	___awmod@dividend+1,f
  7347  088B                     l3062:	
  7348  088B  3001               	movlw	1
  7349  088C                     u4485:	
  7350  088C  36F2               	lsrf	___awmod@divisor+1,f
  7351  088D  0CF1               	rrf	___awmod@divisor,f
  7352  088E  0B89               	decfsz	9,f
  7353  088F  288C               	goto	u4485
  7354  0890  3001               	movlw	1
  7355  0891  02F6               	subwf	___awmod@counter,f
  7356  0892  1D03               	btfss	3,2
  7357  0893  287F               	goto	l3058
  7358  0894                     l3066:	
  7359  0894  0877               	movf	___awmod@sign,w
  7360  0895  1903               	btfsc	3,2
  7361  0896  289C               	goto	l3070
  7362  0897  09F3               	comf	___awmod@dividend,f
  7363  0898  09F4               	comf	___awmod@dividend+1,f
  7364  0899  0AF3               	incf	___awmod@dividend,f
  7365  089A  1903               	skipnz
  7366  089B  0AF4               	incf	___awmod@dividend+1,f
  7367  089C                     l3070:	
  7368  089C  0874               	movf	___awmod@dividend+1,w
  7369  089D  00F2               	movwf	?___awmod+1
  7370  089E  0873               	movf	___awmod@dividend,w
  7371  089F  00F1               	movwf	?___awmod
  7372  08A0  0008               	return
  7373  08A1                     __end_of___awmod:	
  7374                           
  7375                           	psect	text32
  7376  08A1                     __ptext32:	
  7377 ;; *************** function ___awdiv *****************
  7378 ;; Defined at:
  7379 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  7380 ;; Parameters:    Size  Location     Type
  7381 ;;  divisor         2    8[COMMON] int 
  7382 ;;  dividend        2   10[COMMON] int 
  7383 ;; Auto vars:     Size  Location     Type
  7384 ;;  quotient        2    3[BANK0 ] int 
  7385 ;;  sign            1    2[BANK0 ] unsigned char 
  7386 ;;  counter         1    1[BANK0 ] unsigned char 
  7387 ;; Return value:  Size  Location     Type
  7388 ;;                  2    8[COMMON] int 
  7389 ;; Registers used:
  7390 ;;		wreg, status,2, status,0
  7391 ;; Tracked objects:
  7392 ;;		On entry : 0/0
  7393 ;;		On exit  : 0/0
  7394 ;;		Unchanged: 0/0
  7395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7396 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7397 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7398 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7399 ;;      Totals:         4       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7400 ;;Total ram usage:        9 bytes
  7401 ;; Hardware stack levels used:    1
  7402 ;; Hardware stack levels required when called:    2
  7403 ;; This function calls:
  7404 ;;		Nothing
  7405 ;; This function is called by:
  7406 ;;		_fround
  7407 ;;		_scale
  7408 ;;		_printf
  7409 ;; This function uses a non-reentrant model
  7410 ;;
  7411                           
  7412                           
  7413                           ;psect for function ___awdiv
  7414  08A1                     ___awdiv:	
  7415                           
  7416                           ;incstack = 0
  7417                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7418  08A1  0020               	movlb	0	; select bank0
  7419  08A2  01A2               	clrf	___awdiv@sign
  7420  08A3  1FF9               	btfss	___awdiv@divisor+1,7
  7421  08A4  28AC               	goto	l3000
  7422  08A5  09F8               	comf	___awdiv@divisor,f
  7423  08A6  09F9               	comf	___awdiv@divisor+1,f
  7424  08A7  0AF8               	incf	___awdiv@divisor,f
  7425  08A8  1903               	skipnz
  7426  08A9  0AF9               	incf	___awdiv@divisor+1,f
  7427  08AA  01A2               	clrf	___awdiv@sign
  7428  08AB  0AA2               	incf	___awdiv@sign,f
  7429  08AC                     l3000:	
  7430  08AC  1FFB               	btfss	___awdiv@dividend+1,7
  7431  08AD  28B7               	goto	l3006
  7432  08AE  09FA               	comf	___awdiv@dividend,f
  7433  08AF  09FB               	comf	___awdiv@dividend+1,f
  7434  08B0  0AFA               	incf	___awdiv@dividend,f
  7435  08B1  1903               	skipnz
  7436  08B2  0AFB               	incf	___awdiv@dividend+1,f
  7437  08B3  3001               	movlw	1
  7438  08B4  00A0               	movwf	??___awdiv
  7439  08B5  0820               	movf	??___awdiv,w
  7440  08B6  06A2               	xorwf	___awdiv@sign,f
  7441  08B7                     l3006:	
  7442  08B7  01A3               	clrf	___awdiv@quotient
  7443  08B8  01A4               	clrf	___awdiv@quotient+1
  7444  08B9  0878               	movf	___awdiv@divisor,w
  7445  08BA  0479               	iorwf	___awdiv@divisor+1,w
  7446  08BB  1903               	btfsc	3,2
  7447  08BC  28E6               	goto	l3028
  7448  08BD  01A1               	clrf	___awdiv@counter
  7449  08BE  0AA1               	incf	___awdiv@counter,f
  7450  08BF                     l3016:	
  7451  08BF  1BF9               	btfsc	___awdiv@divisor+1,7
  7452  08C0  28CB               	goto	l3018
  7453  08C1  3001               	movlw	1
  7454  08C2                     u4355:	
  7455  08C2  35F8               	lslf	___awdiv@divisor,f
  7456  08C3  0DF9               	rlf	___awdiv@divisor+1,f
  7457  08C4  0B89               	decfsz	9,f
  7458  08C5  28C2               	goto	u4355
  7459  08C6  3001               	movlw	1
  7460  08C7  00A0               	movwf	??___awdiv
  7461  08C8  0820               	movf	??___awdiv,w
  7462  08C9  07A1               	addwf	___awdiv@counter,f
  7463  08CA  28BF               	goto	l3016
  7464  08CB                     l3018:	
  7465  08CB  3001               	movlw	1
  7466  08CC                     u4375:	
  7467  08CC  35A3               	lslf	___awdiv@quotient,f
  7468  08CD  0DA4               	rlf	___awdiv@quotient+1,f
  7469  08CE  0B89               	decfsz	9,f
  7470  08CF  28CC               	goto	u4375
  7471  08D0  0879               	movf	___awdiv@divisor+1,w
  7472  08D1  027B               	subwf	___awdiv@dividend+1,w
  7473  08D2  1D03               	skipz
  7474  08D3  28D6               	goto	u4385
  7475  08D4  0878               	movf	___awdiv@divisor,w
  7476  08D5  027A               	subwf	___awdiv@dividend,w
  7477  08D6                     u4385:	
  7478  08D6  1C03               	skipc
  7479  08D7  28DD               	goto	l3024
  7480  08D8  0878               	movf	___awdiv@divisor,w
  7481  08D9  02FA               	subwf	___awdiv@dividend,f
  7482  08DA  0879               	movf	___awdiv@divisor+1,w
  7483  08DB  3BFB               	subwfb	___awdiv@dividend+1,f
  7484  08DC  1423               	bsf	___awdiv@quotient,0
  7485  08DD                     l3024:	
  7486  08DD  3001               	movlw	1
  7487  08DE                     u4395:	
  7488  08DE  36F9               	lsrf	___awdiv@divisor+1,f
  7489  08DF  0CF8               	rrf	___awdiv@divisor,f
  7490  08E0  0B89               	decfsz	9,f
  7491  08E1  28DE               	goto	u4395
  7492  08E2  3001               	movlw	1
  7493  08E3  02A1               	subwf	___awdiv@counter,f
  7494  08E4  1D03               	btfss	3,2
  7495  08E5  28CB               	goto	l3018
  7496  08E6                     l3028:	
  7497  08E6  0822               	movf	___awdiv@sign,w
  7498  08E7  1903               	btfsc	3,2
  7499  08E8  28EE               	goto	l3032
  7500  08E9  09A3               	comf	___awdiv@quotient,f
  7501  08EA  09A4               	comf	___awdiv@quotient+1,f
  7502  08EB  0AA3               	incf	___awdiv@quotient,f
  7503  08EC  1903               	skipnz
  7504  08ED  0AA4               	incf	___awdiv@quotient+1,f
  7505  08EE                     l3032:	
  7506  08EE  0824               	movf	___awdiv@quotient+1,w
  7507  08EF  00F9               	movwf	?___awdiv+1
  7508  08F0  0823               	movf	___awdiv@quotient,w
  7509  08F1  00F8               	movwf	?___awdiv
  7510  08F2  0008               	return
  7511  08F3                     __end_of___awdiv:	
  7512                           
  7513                           	psect	text33
  7514  0AE5                     __ptext33:	
  7515 ;; *************** function __tdiv_to_l_ *****************
  7516 ;; Defined at:
  7517 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdivl.c"
  7518 ;; Parameters:    Size  Location     Type
  7519 ;;  f1              3    1[COMMON] float 
  7520 ;;  f2              3    4[COMMON] float 
  7521 ;; Auto vars:     Size  Location     Type
  7522 ;;  quot            4    0[BANK0 ] unsigned long 
  7523 ;;  exp1            1    5[BANK0 ] unsigned char 
  7524 ;;  cntr            1    4[BANK0 ] unsigned char 
  7525 ;; Return value:  Size  Location     Type
  7526 ;;                  4    1[COMMON] unsigned long 
  7527 ;; Registers used:
  7528 ;;		wreg, status,2, status,0
  7529 ;; Tracked objects:
  7530 ;;		On entry : 0/0
  7531 ;;		On exit  : 0/0
  7532 ;;		Unchanged: 0/0
  7533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7534 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7535 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7536 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7537 ;;      Totals:        10       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7538 ;;Total ram usage:       16 bytes
  7539 ;; Hardware stack levels used:    1
  7540 ;; Hardware stack levels required when called:    2
  7541 ;; This function calls:
  7542 ;;		Nothing
  7543 ;; This function is called by:
  7544 ;;		_printf
  7545 ;; This function uses a non-reentrant model
  7546 ;;
  7547                           
  7548                           
  7549                           ;psect for function __tdiv_to_l_
  7550  0AE5                     __tdiv_to_l_:	
  7551                           
  7552                           ;incstack = 0
  7553                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  7554  0AE5  0871               	movf	__tdiv_to_l_@f1,w
  7555  0AE6  00F7               	movwf	??__tdiv_to_l_
  7556  0AE7  0872               	movf	__tdiv_to_l_@f1+1,w
  7557  0AE8  00F8               	movwf	??__tdiv_to_l_+1
  7558  0AE9  0873               	movf	__tdiv_to_l_@f1+2,w
  7559  0AEA  00F9               	movwf	??__tdiv_to_l_+2
  7560  0AEB  1003               	clrc
  7561  0AEC  0D78               	rlf	??__tdiv_to_l_+1,w
  7562  0AED  0D79               	rlf	??__tdiv_to_l_+2,w
  7563  0AEE  00FA               	movwf	??__tdiv_to_l_+3
  7564  0AEF  087A               	movf	??__tdiv_to_l_+3,w
  7565  0AF0  0020               	movlb	0	; select bank0
  7566  0AF1  00A5               	movwf	__tdiv_to_l_@exp1
  7567  0AF2  0825               	movf	__tdiv_to_l_@exp1,w
  7568  0AF3  1D03               	btfss	3,2
  7569  0AF4  2AFE               	goto	l3264
  7570  0AF5  3000               	movlw	0
  7571  0AF6  00F4               	movwf	?__tdiv_to_l_+3
  7572  0AF7  3000               	movlw	0
  7573  0AF8  00F3               	movwf	?__tdiv_to_l_+2
  7574  0AF9  3000               	movlw	0
  7575  0AFA  00F2               	movwf	?__tdiv_to_l_+1
  7576  0AFB  3000               	movlw	0
  7577  0AFC  00F1               	movwf	?__tdiv_to_l_
  7578  0AFD  0008               	return
  7579  0AFE                     l3264:	
  7580  0AFE  0874               	movf	__tdiv_to_l_@f2,w
  7581  0AFF  00F7               	movwf	??__tdiv_to_l_
  7582  0B00  0875               	movf	__tdiv_to_l_@f2+1,w
  7583  0B01  00F8               	movwf	??__tdiv_to_l_+1
  7584  0B02  0876               	movf	__tdiv_to_l_@f2+2,w
  7585  0B03  00F9               	movwf	??__tdiv_to_l_+2
  7586  0B04  1003               	clrc
  7587  0B05  0D78               	rlf	??__tdiv_to_l_+1,w
  7588  0B06  0D79               	rlf	??__tdiv_to_l_+2,w
  7589  0B07  00FA               	movwf	??__tdiv_to_l_+3
  7590  0B08  087A               	movf	??__tdiv_to_l_+3,w
  7591  0B09  00A4               	movwf	__tdiv_to_l_@cntr
  7592  0B0A  0824               	movf	__tdiv_to_l_@cntr,w
  7593  0B0B  1D03               	btfss	3,2
  7594  0B0C  2B16               	goto	l693
  7595  0B0D  3000               	movlw	0
  7596  0B0E  00F4               	movwf	?__tdiv_to_l_+3
  7597  0B0F  3000               	movlw	0
  7598  0B10  00F3               	movwf	?__tdiv_to_l_+2
  7599  0B11  3000               	movlw	0
  7600  0B12  00F2               	movwf	?__tdiv_to_l_+1
  7601  0B13  3000               	movlw	0
  7602  0B14  00F1               	movwf	?__tdiv_to_l_
  7603  0B15  0008               	return
  7604  0B16                     l693:	
  7605  0B16  17F2               	bsf	__tdiv_to_l_@f1+1,7
  7606  0B17  30FF               	movlw	255
  7607  0B18  05F1               	andwf	__tdiv_to_l_@f1,f
  7608  0B19  30FF               	movlw	255
  7609  0B1A  05F2               	andwf	__tdiv_to_l_@f1+1,f
  7610  0B1B  3000               	movlw	0
  7611  0B1C  05F3               	andwf	__tdiv_to_l_@f1+2,f
  7612  0B1D  17F5               	bsf	__tdiv_to_l_@f2+1,7
  7613  0B1E  30FF               	movlw	255
  7614  0B1F  05F4               	andwf	__tdiv_to_l_@f2,f
  7615  0B20  30FF               	movlw	255
  7616  0B21  05F5               	andwf	__tdiv_to_l_@f2+1,f
  7617  0B22  3000               	movlw	0
  7618  0B23  05F6               	andwf	__tdiv_to_l_@f2+2,f
  7619  0B24  3000               	movlw	0
  7620  0B25  00A3               	movwf	__tdiv_to_l_@quot+3
  7621  0B26  3000               	movlw	0
  7622  0B27  00A2               	movwf	__tdiv_to_l_@quot+2
  7623  0B28  3000               	movlw	0
  7624  0B29  00A1               	movwf	__tdiv_to_l_@quot+1
  7625  0B2A  3000               	movlw	0
  7626  0B2B  00A0               	movwf	__tdiv_to_l_@quot
  7627  0B2C  307F               	movlw	127
  7628  0B2D  02A5               	subwf	__tdiv_to_l_@exp1,f
  7629  0B2E  3098               	movlw	152
  7630  0B2F  0724               	addwf	__tdiv_to_l_@cntr,w
  7631  0B30  00F7               	movwf	??__tdiv_to_l_
  7632  0B31  0877               	movf	??__tdiv_to_l_,w
  7633  0B32  02A5               	subwf	__tdiv_to_l_@exp1,f
  7634  0B33  3018               	movlw	24
  7635  0B34  00F7               	movwf	??__tdiv_to_l_
  7636  0B35  0877               	movf	??__tdiv_to_l_,w
  7637  0B36  00A4               	movwf	__tdiv_to_l_@cntr
  7638  0B37                     l3278:	
  7639  0B37  3001               	movlw	1
  7640  0B38                     u4955:	
  7641  0B38  35A0               	lslf	__tdiv_to_l_@quot,f
  7642  0B39  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  7643  0B3A  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  7644  0B3B  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  7645  0B3C  0B89               	decfsz	9,f
  7646  0B3D  2B38               	goto	u4955
  7647  0B3E  0876               	movf	__tdiv_to_l_@f2+2,w
  7648  0B3F  0273               	subwf	__tdiv_to_l_@f1+2,w
  7649  0B40  1D03               	skipz
  7650  0B41  2B48               	goto	u4965
  7651  0B42  0875               	movf	__tdiv_to_l_@f2+1,w
  7652  0B43  0272               	subwf	__tdiv_to_l_@f1+1,w
  7653  0B44  1D03               	skipz
  7654  0B45  2B48               	goto	u4965
  7655  0B46  0874               	movf	__tdiv_to_l_@f2,w
  7656  0B47  0271               	subwf	__tdiv_to_l_@f1,w
  7657  0B48                     u4965:	
  7658  0B48  1C03               	skipc
  7659  0B49  2B51               	goto	l3286
  7660  0B4A  0874               	movf	__tdiv_to_l_@f2,w
  7661  0B4B  02F1               	subwf	__tdiv_to_l_@f1,f
  7662  0B4C  0875               	movf	__tdiv_to_l_@f2+1,w
  7663  0B4D  3BF2               	subwfb	__tdiv_to_l_@f1+1,f
  7664  0B4E  0876               	movf	__tdiv_to_l_@f2+2,w
  7665  0B4F  3BF3               	subwfb	__tdiv_to_l_@f1+2,f
  7666  0B50  1420               	bsf	__tdiv_to_l_@quot,0
  7667  0B51                     l3286:	
  7668  0B51  3001               	movlw	1
  7669  0B52                     u4975:	
  7670  0B52  35F1               	lslf	__tdiv_to_l_@f1,f
  7671  0B53  0DF2               	rlf	__tdiv_to_l_@f1+1,f
  7672  0B54  0DF3               	rlf	__tdiv_to_l_@f1+2,f
  7673  0B55  0B89               	decfsz	9,f
  7674  0B56  2B52               	goto	u4975
  7675  0B57  3001               	movlw	1
  7676  0B58  02A4               	subwf	__tdiv_to_l_@cntr,f
  7677  0B59  1D03               	btfss	3,2
  7678  0B5A  2B37               	goto	l3278
  7679  0B5B  1FA5               	btfss	__tdiv_to_l_@exp1,7
  7680  0B5C  2B79               	goto	l3298
  7681  0B5D  0825               	movf	__tdiv_to_l_@exp1,w
  7682  0B5E  3A80               	xorlw	128
  7683  0B5F  3E97               	addlw	151
  7684  0B60  1803               	skipnc
  7685  0B61  2B6B               	goto	l3296
  7686  0B62  3000               	movlw	0
  7687  0B63  00F4               	movwf	?__tdiv_to_l_+3
  7688  0B64  3000               	movlw	0
  7689  0B65  00F3               	movwf	?__tdiv_to_l_+2
  7690  0B66  3000               	movlw	0
  7691  0B67  00F2               	movwf	?__tdiv_to_l_+1
  7692  0B68  3000               	movlw	0
  7693  0B69  00F1               	movwf	?__tdiv_to_l_
  7694  0B6A  0008               	return
  7695  0B6B                     l3296:	
  7696  0B6B  3001               	movlw	1
  7697  0B6C                     u5015:	
  7698  0B6C  36A3               	lsrf	__tdiv_to_l_@quot+3,f
  7699  0B6D  0CA2               	rrf	__tdiv_to_l_@quot+2,f
  7700  0B6E  0CA1               	rrf	__tdiv_to_l_@quot+1,f
  7701  0B6F  0CA0               	rrf	__tdiv_to_l_@quot,f
  7702  0B70  0B89               	decfsz	9,f
  7703  0B71  2B6C               	goto	u5015
  7704  0B72  3001               	movlw	1
  7705  0B73  00F7               	movwf	??__tdiv_to_l_
  7706  0B74  0877               	movf	??__tdiv_to_l_,w
  7707  0B75  07A5               	addwf	__tdiv_to_l_@exp1,f
  7708  0B76  1903               	btfsc	3,2
  7709  0B77  2B92               	goto	l3306
  7710  0B78  2B6B               	goto	l3296
  7711  0B79                     l3298:	
  7712  0B79  3018               	movlw	24
  7713  0B7A  0225               	subwf	__tdiv_to_l_@exp1,w
  7714  0B7B  1C03               	skipc
  7715  0B7C  2B8F               	goto	l703
  7716  0B7D  3000               	movlw	0
  7717  0B7E  00F4               	movwf	?__tdiv_to_l_+3
  7718  0B7F  3000               	movlw	0
  7719  0B80  00F3               	movwf	?__tdiv_to_l_+2
  7720  0B81  3000               	movlw	0
  7721  0B82  00F2               	movwf	?__tdiv_to_l_+1
  7722  0B83  3000               	movlw	0
  7723  0B84  00F1               	movwf	?__tdiv_to_l_
  7724  0B85  0008               	return
  7725  0B86                     l3304:	
  7726  0B86  3001               	movlw	1
  7727  0B87                     u5045:	
  7728  0B87  35A0               	lslf	__tdiv_to_l_@quot,f
  7729  0B88  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  7730  0B89  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  7731  0B8A  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  7732  0B8B  0B89               	decfsz	9,f
  7733  0B8C  2B87               	goto	u5045
  7734  0B8D  3001               	movlw	1
  7735  0B8E  02A5               	subwf	__tdiv_to_l_@exp1,f
  7736  0B8F                     l703:	
  7737  0B8F  0825               	movf	__tdiv_to_l_@exp1,w
  7738  0B90  1D03               	btfss	3,2
  7739  0B91  2B86               	goto	l3304
  7740  0B92                     l3306:	
  7741  0B92  0823               	movf	__tdiv_to_l_@quot+3,w
  7742  0B93  00F4               	movwf	?__tdiv_to_l_+3
  7743  0B94  0822               	movf	__tdiv_to_l_@quot+2,w
  7744  0B95  00F3               	movwf	?__tdiv_to_l_+2
  7745  0B96  0821               	movf	__tdiv_to_l_@quot+1,w
  7746  0B97  00F2               	movwf	?__tdiv_to_l_+1
  7747  0B98  0820               	movf	__tdiv_to_l_@quot,w
  7748  0B99  00F1               	movwf	?__tdiv_to_l_
  7749  0B9A  0008               	return
  7750  0B9B                     __end_of__tdiv_to_l_:	
  7751                           
  7752                           	psect	text34
  7753  0D7E                     __ptext34:	
  7754 ;; *************** function __div_to_l_ *****************
  7755 ;; Defined at:
  7756 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fldivl.c"
  7757 ;; Parameters:    Size  Location     Type
  7758 ;;  f1              3    1[COMMON] unsigned long 
  7759 ;;  f2              3    4[COMMON] unsigned long 
  7760 ;; Auto vars:     Size  Location     Type
  7761 ;;  quot            4    8[BANK0 ] unsigned long 
  7762 ;;  exp1            1   13[BANK0 ] unsigned char 
  7763 ;;  cntr            1   12[BANK0 ] unsigned char 
  7764 ;; Return value:  Size  Location     Type
  7765 ;;                  4    1[COMMON] unsigned long 
  7766 ;; Registers used:
  7767 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7768 ;; Tracked objects:
  7769 ;;		On entry : 0/0
  7770 ;;		On exit  : 0/0
  7771 ;;		Unchanged: 0/0
  7772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7773 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7774 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7775 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7776 ;;      Totals:         6      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7777 ;;Total ram usage:       20 bytes
  7778 ;; Hardware stack levels used:    1
  7779 ;; Hardware stack levels required when called:    2
  7780 ;; This function calls:
  7781 ;;		Nothing
  7782 ;; This function is called by:
  7783 ;;		_printf
  7784 ;; This function uses a non-reentrant model
  7785 ;;
  7786                           
  7787                           
  7788                           ;psect for function __div_to_l_
  7789  0D7E                     __div_to_l_:	
  7790                           
  7791                           ;incstack = 0
  7792                           ; Regs used in __div_to_l_: [wreg+fsr1l+fsr1h+status,2+status,0]
  7793  0D7E  3071               	movlw	low (__div_to_l_@f1| 0)
  7794  0D7F  0086               	movwf	6
  7795  0D80  0187               	clrf	7
  7796  0D81  3F40               	moviw [0]fsr1
  7797  0D82  0020               	movlb	0	; select bank0
  7798  0D83  00A0               	movwf	??__div_to_l_
  7799  0D84  3F41               	moviw [1]fsr1
  7800  0D85  00A1               	movwf	??__div_to_l_+1
  7801  0D86  3F42               	moviw [2]fsr1
  7802  0D87  00A2               	movwf	??__div_to_l_+2
  7803  0D88  3F43               	moviw [3]fsr1
  7804  0D89  00A3               	movwf	??__div_to_l_+3
  7805  0D8A  1003               	clrc
  7806  0D8B  0D22               	rlf	??__div_to_l_+2,w
  7807  0D8C  0D23               	rlf	??__div_to_l_+3,w
  7808  0D8D  00A4               	movwf	??__div_to_l_+4
  7809  0D8E  0824               	movf	??__div_to_l_+4,w
  7810  0D8F  00AD               	movwf	__div_to_l_@exp1
  7811  0D90  082D               	movf	__div_to_l_@exp1,w
  7812  0D91  1D03               	btfss	3,2
  7813  0D92  2D9C               	goto	l3316
  7814  0D93  3000               	movlw	0
  7815  0D94  00F4               	movwf	?__div_to_l_+3
  7816  0D95  3000               	movlw	0
  7817  0D96  00F3               	movwf	?__div_to_l_+2
  7818  0D97  3000               	movlw	0
  7819  0D98  00F2               	movwf	?__div_to_l_+1
  7820  0D99  3000               	movlw	0
  7821  0D9A  00F1               	movwf	?__div_to_l_
  7822  0D9B  0008               	return
  7823  0D9C                     l3316:	
  7824  0D9C  3074               	movlw	low (__div_to_l_@f2| 0)
  7825  0D9D  0086               	movwf	6
  7826  0D9E  0187               	clrf	7
  7827  0D9F  3F40               	moviw [0]fsr1
  7828  0DA0  00A0               	movwf	??__div_to_l_
  7829  0DA1  3F41               	moviw [1]fsr1
  7830  0DA2  00A1               	movwf	??__div_to_l_+1
  7831  0DA3  3F42               	moviw [2]fsr1
  7832  0DA4  00A2               	movwf	??__div_to_l_+2
  7833  0DA5  3F43               	moviw [3]fsr1
  7834  0DA6  00A3               	movwf	??__div_to_l_+3
  7835  0DA7  1003               	clrc
  7836  0DA8  0D22               	rlf	??__div_to_l_+2,w
  7837  0DA9  0D23               	rlf	??__div_to_l_+3,w
  7838  0DAA  00A4               	movwf	??__div_to_l_+4
  7839  0DAB  0824               	movf	??__div_to_l_+4,w
  7840  0DAC  00AC               	movwf	__div_to_l_@cntr
  7841  0DAD  082C               	movf	__div_to_l_@cntr,w
  7842  0DAE  1D03               	btfss	3,2
  7843  0DAF  2DB9               	goto	l3322
  7844  0DB0  3000               	movlw	0
  7845  0DB1  00F4               	movwf	?__div_to_l_+3
  7846  0DB2  3000               	movlw	0
  7847  0DB3  00F3               	movwf	?__div_to_l_+2
  7848  0DB4  3000               	movlw	0
  7849  0DB5  00F2               	movwf	?__div_to_l_+1
  7850  0DB6  3000               	movlw	0
  7851  0DB7  00F1               	movwf	?__div_to_l_
  7852  0DB8  0008               	return
  7853  0DB9                     l3322:	
  7854  0DB9  3071               	movlw	low (__div_to_l_@f1| 0)
  7855  0DBA  0086               	movwf	6
  7856  0DBB  0187               	clrf	7
  7857  0DBC  3000               	movlw	0
  7858  0DBD  0481               	iorwf	1,f
  7859  0DBE  3141               	addfsr 1,1
  7860  0DBF  3000               	movlw	0
  7861  0DC0  0481               	iorwf	1,f
  7862  0DC1  3141               	addfsr 1,1
  7863  0DC2  3080               	movlw	128
  7864  0DC3  0481               	iorwf	1,f
  7865  0DC4  3141               	addfsr 1,1
  7866  0DC5  3000               	movlw	0
  7867  0DC6  0481               	iorwf	1,f
  7868  0DC7  3071               	movlw	low (__div_to_l_@f1| 0)
  7869  0DC8  0086               	movwf	6
  7870  0DC9  0187               	clrf	7
  7871  0DCA  30FF               	movlw	255
  7872  0DCB  0581               	andwf	1,f
  7873  0DCC  3141               	addfsr 1,1
  7874  0DCD  30FF               	movlw	255
  7875  0DCE  0581               	andwf	1,f
  7876  0DCF  3141               	addfsr 1,1
  7877  0DD0  30FF               	movlw	255
  7878  0DD1  0581               	andwf	1,f
  7879  0DD2  3141               	addfsr 1,1
  7880  0DD3  3000               	movlw	0
  7881  0DD4  0581               	andwf	1,f
  7882  0DD5  3074               	movlw	low (__div_to_l_@f2| 0)
  7883  0DD6  0086               	movwf	6
  7884  0DD7  0187               	clrf	7
  7885  0DD8  3000               	movlw	0
  7886  0DD9  0481               	iorwf	1,f
  7887  0DDA  3141               	addfsr 1,1
  7888  0DDB  3000               	movlw	0
  7889  0DDC  0481               	iorwf	1,f
  7890  0DDD  3141               	addfsr 1,1
  7891  0DDE  3080               	movlw	128
  7892  0DDF  0481               	iorwf	1,f
  7893  0DE0  3141               	addfsr 1,1
  7894  0DE1  3000               	movlw	0
  7895  0DE2  0481               	iorwf	1,f
  7896  0DE3  3074               	movlw	low (__div_to_l_@f2| 0)
  7897  0DE4  0086               	movwf	6
  7898  0DE5  0187               	clrf	7
  7899  0DE6  30FF               	movlw	255
  7900  0DE7  0581               	andwf	1,f
  7901  0DE8  3141               	addfsr 1,1
  7902  0DE9  30FF               	movlw	255
  7903  0DEA  0581               	andwf	1,f
  7904  0DEB  3141               	addfsr 1,1
  7905  0DEC  30FF               	movlw	255
  7906  0DED  0581               	andwf	1,f
  7907  0DEE  3141               	addfsr 1,1
  7908  0DEF  3000               	movlw	0
  7909  0DF0  0581               	andwf	1,f
  7910  0DF1  3000               	movlw	0
  7911  0DF2  00AB               	movwf	__div_to_l_@quot+3
  7912  0DF3  3000               	movlw	0
  7913  0DF4  00AA               	movwf	__div_to_l_@quot+2
  7914  0DF5  3000               	movlw	0
  7915  0DF6  00A9               	movwf	__div_to_l_@quot+1
  7916  0DF7  3000               	movlw	0
  7917  0DF8  00A8               	movwf	__div_to_l_@quot
  7918  0DF9  307F               	movlw	127
  7919  0DFA  02AD               	subwf	__div_to_l_@exp1,f
  7920  0DFB  30A0               	movlw	160
  7921  0DFC  072C               	addwf	__div_to_l_@cntr,w
  7922  0DFD  00A0               	movwf	??__div_to_l_
  7923  0DFE  0820               	movf	??__div_to_l_,w
  7924  0DFF  02AD               	subwf	__div_to_l_@exp1,f
  7925  0E00  3020               	movlw	32
  7926  0E01  00A0               	movwf	??__div_to_l_
  7927  0E02  0820               	movf	??__div_to_l_,w
  7928  0E03  00AC               	movwf	__div_to_l_@cntr
  7929  0E04                     l3332:	
  7930  0E04  3001               	movlw	1
  7931  0E05                     u5085:	
  7932  0E05  35A8               	lslf	__div_to_l_@quot,f
  7933  0E06  0DA9               	rlf	__div_to_l_@quot+1,f
  7934  0E07  0DAA               	rlf	__div_to_l_@quot+2,f
  7935  0E08  0DAB               	rlf	__div_to_l_@quot+3,f
  7936  0E09  0B89               	decfsz	9,f
  7937  0E0A  2E05               	goto	u5085
  7938  0E0B  3074               	movlw	low (__div_to_l_@f2| 0)
  7939  0E0C  0086               	movwf	6
  7940  0E0D  0187               	clrf	7
  7941  0E0E  3F40               	moviw [0]fsr1
  7942  0E0F  00A0               	movwf	??__div_to_l_
  7943  0E10  3F41               	moviw [1]fsr1
  7944  0E11  00A1               	movwf	??__div_to_l_+1
  7945  0E12  3F42               	moviw [2]fsr1
  7946  0E13  00A2               	movwf	??__div_to_l_+2
  7947  0E14  3F43               	moviw [3]fsr1
  7948  0E15  00A3               	movwf	??__div_to_l_+3
  7949  0E16  3071               	movlw	low (__div_to_l_@f1| 0)
  7950  0E17  0086               	movwf	6
  7951  0E18  0187               	clrf	7
  7952  0E19  3F40               	moviw [0]fsr1
  7953  0E1A  00A4               	movwf	??__div_to_l_+4
  7954  0E1B  3F41               	moviw [1]fsr1
  7955  0E1C  00A5               	movwf	??__div_to_l_+5
  7956  0E1D  3F42               	moviw [2]fsr1
  7957  0E1E  00A6               	movwf	??__div_to_l_+6
  7958  0E1F  3F43               	moviw [3]fsr1
  7959  0E20  00A7               	movwf	??__div_to_l_+7
  7960  0E21  0823               	movf	??__div_to_l_+3,w
  7961  0E22  0227               	subwf	??__div_to_l_+7,w
  7962  0E23  1D03               	skipz
  7963  0E24  2E2F               	goto	u5095
  7964  0E25  0822               	movf	??__div_to_l_+2,w
  7965  0E26  0226               	subwf	??__div_to_l_+6,w
  7966  0E27  1D03               	skipz
  7967  0E28  2E2F               	goto	u5095
  7968  0E29  0821               	movf	??__div_to_l_+1,w
  7969  0E2A  0225               	subwf	??__div_to_l_+5,w
  7970  0E2B  1D03               	skipz
  7971  0E2C  2E2F               	goto	u5095
  7972  0E2D  0820               	movf	??__div_to_l_,w
  7973  0E2E  0224               	subwf	??__div_to_l_+4,w
  7974  0E2F                     u5095:	
  7975  0E2F  1C03               	skipc
  7976  0E30  2E4C               	goto	l3340
  7977  0E31  3074               	movlw	low (__div_to_l_@f2| 0)
  7978  0E32  0086               	movwf	6
  7979  0E33  0187               	clrf	7
  7980  0E34  3F40               	moviw [0]fsr1
  7981  0E35  00A0               	movwf	??__div_to_l_
  7982  0E36  3F41               	moviw [1]fsr1
  7983  0E37  00A1               	movwf	??__div_to_l_+1
  7984  0E38  3F42               	moviw [2]fsr1
  7985  0E39  00A2               	movwf	??__div_to_l_+2
  7986  0E3A  3F43               	moviw [3]fsr1
  7987  0E3B  00A3               	movwf	??__div_to_l_+3
  7988  0E3C  3071               	movlw	low (__div_to_l_@f1| 0)
  7989  0E3D  0086               	movwf	6
  7990  0E3E  0187               	clrf	7
  7991  0E3F  0820               	movf	??__div_to_l_,w
  7992  0E40  0281               	subwf	1,f
  7993  0E41  3141               	addfsr 1,1
  7994  0E42  0821               	movf	??__div_to_l_+1,w
  7995  0E43  3B81               	subwfb	1,f
  7996  0E44  3141               	addfsr 1,1
  7997  0E45  0822               	movf	??__div_to_l_+2,w
  7998  0E46  3B81               	subwfb	1,f
  7999  0E47  3141               	addfsr 1,1
  8000  0E48  0823               	movf	??__div_to_l_+3,w
  8001  0E49  3B81               	subwfb	1,f
  8002  0E4A  317D               	addfsr 1,-3
  8003  0E4B  1428               	bsf	__div_to_l_@quot,0
  8004  0E4C                     l3340:	
  8005  0E4C  3071               	movlw	low (__div_to_l_@f1| 0)
  8006  0E4D  0086               	movwf	6
  8007  0E4E  0187               	clrf	7
  8008  0E4F  3581               	lslf	1,f
  8009  0E50  3141               	addfsr 1,1
  8010  0E51  0D81               	rlf	1,f
  8011  0E52  3141               	addfsr 1,1
  8012  0E53  0D81               	rlf	1,f
  8013  0E54  3141               	addfsr 1,1
  8014  0E55  0D81               	rlf	1,f
  8015  0E56  317D               	addfsr 1,-3
  8016  0E57  3001               	movlw	1
  8017  0E58  02AC               	subwf	__div_to_l_@cntr,f
  8018  0E59  1D03               	btfss	3,2
  8019  0E5A  2E04               	goto	l3332
  8020  0E5B  1FAD               	btfss	__div_to_l_@exp1,7
  8021  0E5C  2E79               	goto	l3352
  8022  0E5D  082D               	movf	__div_to_l_@exp1,w
  8023  0E5E  3A80               	xorlw	128
  8024  0E5F  3E9F               	addlw	159
  8025  0E60  1803               	skipnc
  8026  0E61  2E6B               	goto	l3350
  8027  0E62  3000               	movlw	0
  8028  0E63  00F4               	movwf	?__div_to_l_+3
  8029  0E64  3000               	movlw	0
  8030  0E65  00F3               	movwf	?__div_to_l_+2
  8031  0E66  3000               	movlw	0
  8032  0E67  00F2               	movwf	?__div_to_l_+1
  8033  0E68  3000               	movlw	0
  8034  0E69  00F1               	movwf	?__div_to_l_
  8035  0E6A  0008               	return
  8036  0E6B                     l3350:	
  8037  0E6B  3001               	movlw	1
  8038  0E6C                     u5135:	
  8039  0E6C  36AB               	lsrf	__div_to_l_@quot+3,f
  8040  0E6D  0CAA               	rrf	__div_to_l_@quot+2,f
  8041  0E6E  0CA9               	rrf	__div_to_l_@quot+1,f
  8042  0E6F  0CA8               	rrf	__div_to_l_@quot,f
  8043  0E70  0B89               	decfsz	9,f
  8044  0E71  2E6C               	goto	u5135
  8045  0E72  3001               	movlw	1
  8046  0E73  00A0               	movwf	??__div_to_l_
  8047  0E74  0820               	movf	??__div_to_l_,w
  8048  0E75  07AD               	addwf	__div_to_l_@exp1,f
  8049  0E76  1903               	btfsc	3,2
  8050  0E77  2E92               	goto	l3360
  8051  0E78  2E6B               	goto	l3350
  8052  0E79                     l3352:	
  8053  0E79  3020               	movlw	32
  8054  0E7A  022D               	subwf	__div_to_l_@exp1,w
  8055  0E7B  1C03               	skipc
  8056  0E7C  2E8F               	goto	l624
  8057  0E7D  3000               	movlw	0
  8058  0E7E  00F4               	movwf	?__div_to_l_+3
  8059  0E7F  3000               	movlw	0
  8060  0E80  00F3               	movwf	?__div_to_l_+2
  8061  0E81  3000               	movlw	0
  8062  0E82  00F2               	movwf	?__div_to_l_+1
  8063  0E83  3000               	movlw	0
  8064  0E84  00F1               	movwf	?__div_to_l_
  8065  0E85  0008               	return
  8066  0E86                     l3358:	
  8067  0E86  3001               	movlw	1
  8068  0E87                     u5165:	
  8069  0E87  35A8               	lslf	__div_to_l_@quot,f
  8070  0E88  0DA9               	rlf	__div_to_l_@quot+1,f
  8071  0E89  0DAA               	rlf	__div_to_l_@quot+2,f
  8072  0E8A  0DAB               	rlf	__div_to_l_@quot+3,f
  8073  0E8B  0B89               	decfsz	9,f
  8074  0E8C  2E87               	goto	u5165
  8075  0E8D  3001               	movlw	1
  8076  0E8E  02AD               	subwf	__div_to_l_@exp1,f
  8077  0E8F                     l624:	
  8078  0E8F  082D               	movf	__div_to_l_@exp1,w
  8079  0E90  1D03               	btfss	3,2
  8080  0E91  2E86               	goto	l3358
  8081  0E92                     l3360:	
  8082  0E92  082B               	movf	__div_to_l_@quot+3,w
  8083  0E93  00F4               	movwf	?__div_to_l_+3
  8084  0E94  082A               	movf	__div_to_l_@quot+2,w
  8085  0E95  00F3               	movwf	?__div_to_l_+2
  8086  0E96  0829               	movf	__div_to_l_@quot+1,w
  8087  0E97  00F2               	movwf	?__div_to_l_+1
  8088  0E98  0828               	movf	__div_to_l_@quot,w
  8089  0E99  00F1               	movwf	?__div_to_l_
  8090  0E9A  0008               	return
  8091  0E9B                     __end_of__div_to_l_:	
  8092                           
  8093                           	psect	text35
  8094  175D                     __ptext35:	
  8095 ;; *************** function ___lltoft *****************
  8096 ;; Defined at:
  8097 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
  8098 ;; Parameters:    Size  Location     Type
  8099 ;;  c               4    0[BANK0 ] unsigned long 
  8100 ;; Auto vars:     Size  Location     Type
  8101 ;;  exp             1   10[COMMON] unsigned char 
  8102 ;; Return value:  Size  Location     Type
  8103 ;;                  3    0[BANK0 ] float 
  8104 ;; Registers used:
  8105 ;;		wreg, status,2, status,0, pclath, cstack
  8106 ;; Tracked objects:
  8107 ;;		On entry : 0/0
  8108 ;;		On exit  : 0/0
  8109 ;;		Unchanged: 0/0
  8110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8111 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8112 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8113 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8114 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8115 ;;Total ram usage:        6 bytes
  8116 ;; Hardware stack levels used:    1
  8117 ;; Hardware stack levels required when called:    3
  8118 ;; This function calls:
  8119 ;;		___ftpack
  8120 ;; This function is called by:
  8121 ;;		_printf
  8122 ;; This function uses a non-reentrant model
  8123 ;;
  8124                           
  8125                           
  8126                           ;psect for function ___lltoft
  8127  175D                     ___lltoft:	
  8128                           
  8129                           ;incstack = 0
  8130                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  8131  175D  308E               	movlw	142
  8132  175E  00F9               	movwf	??___lltoft
  8133  175F  0879               	movf	??___lltoft,w
  8134  1760  00FA               	movwf	___lltoft@exp
  8135  1761                     l3490:	
  8136  1761  30FF               	movlw	255
  8137  1762  0020               	movlb	0	; select bank0
  8138  1763  0523               	andwf	___lltoft@c+3,w
  8139  1764  1903               	btfsc	3,2
  8140  1765  2F73               	goto	l3492
  8141  1766  3001               	movlw	1
  8142  1767                     u5465:	
  8143  1767  0020               	movlb	0	; select bank0
  8144  1768  36A3               	lsrf	___lltoft@c+3,f
  8145  1769  0CA2               	rrf	___lltoft@c+2,f
  8146  176A  0CA1               	rrf	___lltoft@c+1,f
  8147  176B  0CA0               	rrf	___lltoft@c,f
  8148  176C  0B89               	decfsz	9,f
  8149  176D  2F67               	goto	u5465
  8150  176E  3001               	movlw	1
  8151  176F  00F9               	movwf	??___lltoft
  8152  1770  0879               	movf	??___lltoft,w
  8153  1771  07FA               	addwf	___lltoft@exp,f
  8154  1772  2F61               	goto	l3490
  8155  1773                     l3492:	
  8156  1773  0820               	movf	___lltoft@c,w
  8157  1774  00F1               	movwf	___ftpack@arg
  8158  1775  0821               	movf	___lltoft@c+1,w
  8159  1776  00F2               	movwf	___ftpack@arg+1
  8160  1777  0822               	movf	___lltoft@c+2,w
  8161  1778  00F3               	movwf	___ftpack@arg+2
  8162  1779  087A               	movf	___lltoft@exp,w
  8163  177A  00F9               	movwf	??___lltoft
  8164  177B  0879               	movf	??___lltoft,w
  8165  177C  00F4               	movwf	___ftpack@exp
  8166  177D  01F5               	clrf	___ftpack@sign
  8167  177E  3189  2146         	fcall	___ftpack
  8168  1780  0871               	movf	?___ftpack,w
  8169  1781  0020               	movlb	0	; select bank0
  8170  1782  00A0               	movwf	?___lltoft
  8171  1783  0872               	movf	?___ftpack+1,w
  8172  1784  00A1               	movwf	?___lltoft+1
  8173  1785  0873               	movf	?___ftpack+2,w
  8174  1786  00A2               	movwf	?___lltoft+2
  8175  1787  0008               	return
  8176  1788                     __end_of___lltoft:	
  8177                           
  8178                           	psect	text36
  8179  0819                     __ptext36:	
  8180 ;; *************** function ___llmod *****************
  8181 ;; Defined at:
  8182 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\llmod.c"
  8183 ;; Parameters:    Size  Location     Type
  8184 ;;  divisor         4    5[BANK0 ] unsigned long 
  8185 ;;  dividend        4    9[BANK0 ] unsigned long 
  8186 ;; Auto vars:     Size  Location     Type
  8187 ;;  counter         1   11[COMMON] unsigned char 
  8188 ;; Return value:  Size  Location     Type
  8189 ;;                  4    5[BANK0 ] unsigned long 
  8190 ;; Registers used:
  8191 ;;		wreg, status,2, status,0
  8192 ;; Tracked objects:
  8193 ;;		On entry : 0/0
  8194 ;;		On exit  : 0/0
  8195 ;;		Unchanged: 0/0
  8196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8197 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8198 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8199 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8200 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8201 ;;Total ram usage:       10 bytes
  8202 ;; Hardware stack levels used:    1
  8203 ;; Hardware stack levels required when called:    2
  8204 ;; This function calls:
  8205 ;;		Nothing
  8206 ;; This function is called by:
  8207 ;;		_printf
  8208 ;; This function uses a non-reentrant model
  8209 ;;
  8210                           
  8211                           
  8212                           ;psect for function ___llmod
  8213  0819                     ___llmod:	
  8214                           
  8215                           ;incstack = 0
  8216                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  8217  0819  0020               	movlb	0	; select bank0
  8218  081A  0828               	movf	___llmod@divisor+3,w
  8219  081B  0427               	iorwf	___llmod@divisor+2,w
  8220  081C  0426               	iorwf	___llmod@divisor+1,w
  8221  081D  0425               	iorwf	___llmod@divisor,w
  8222  081E  1903               	skipnz
  8223  081F  2853               	goto	l3482
  8224  0820  01FB               	clrf	___llmod@counter
  8225  0821  0AFB               	incf	___llmod@counter,f
  8226  0822                     l3472:	
  8227  0822  1BA8               	btfsc	___llmod@divisor+3,7
  8228  0823  2830               	goto	l3474
  8229  0824  3001               	movlw	1
  8230  0825                     u5415:	
  8231  0825  35A5               	lslf	___llmod@divisor,f
  8232  0826  0DA6               	rlf	___llmod@divisor+1,f
  8233  0827  0DA7               	rlf	___llmod@divisor+2,f
  8234  0828  0DA8               	rlf	___llmod@divisor+3,f
  8235  0829  0B89               	decfsz	9,f
  8236  082A  2825               	goto	u5415
  8237  082B  3001               	movlw	1
  8238  082C  00FA               	movwf	??___llmod
  8239  082D  087A               	movf	??___llmod,w
  8240  082E  07FB               	addwf	___llmod@counter,f
  8241  082F  2822               	goto	l3472
  8242  0830                     l3474:	
  8243  0830  0828               	movf	___llmod@divisor+3,w
  8244  0831  022C               	subwf	___llmod@dividend+3,w
  8245  0832  1D03               	skipz
  8246  0833  283E               	goto	u5435
  8247  0834  0827               	movf	___llmod@divisor+2,w
  8248  0835  022B               	subwf	___llmod@dividend+2,w
  8249  0836  1D03               	skipz
  8250  0837  283E               	goto	u5435
  8251  0838  0826               	movf	___llmod@divisor+1,w
  8252  0839  022A               	subwf	___llmod@dividend+1,w
  8253  083A  1D03               	skipz
  8254  083B  283E               	goto	u5435
  8255  083C  0825               	movf	___llmod@divisor,w
  8256  083D  0229               	subwf	___llmod@dividend,w
  8257  083E                     u5435:	
  8258  083E  1C03               	skipc
  8259  083F  2848               	goto	l3478
  8260  0840  0825               	movf	___llmod@divisor,w
  8261  0841  02A9               	subwf	___llmod@dividend,f
  8262  0842  0826               	movf	___llmod@divisor+1,w
  8263  0843  3BAA               	subwfb	___llmod@dividend+1,f
  8264  0844  0827               	movf	___llmod@divisor+2,w
  8265  0845  3BAB               	subwfb	___llmod@dividend+2,f
  8266  0846  0828               	movf	___llmod@divisor+3,w
  8267  0847  3BAC               	subwfb	___llmod@dividend+3,f
  8268  0848                     l3478:	
  8269  0848  3001               	movlw	1
  8270  0849                     u5445:	
  8271  0849  36A8               	lsrf	___llmod@divisor+3,f
  8272  084A  0CA7               	rrf	___llmod@divisor+2,f
  8273  084B  0CA6               	rrf	___llmod@divisor+1,f
  8274  084C  0CA5               	rrf	___llmod@divisor,f
  8275  084D  0B89               	decfsz	9,f
  8276  084E  2849               	goto	u5445
  8277  084F  3001               	movlw	1
  8278  0850  02FB               	subwf	___llmod@counter,f
  8279  0851  1D03               	btfss	3,2
  8280  0852  2830               	goto	l3474
  8281  0853                     l3482:	
  8282  0853  082C               	movf	___llmod@dividend+3,w
  8283  0854  00A8               	movwf	?___llmod+3
  8284  0855  082B               	movf	___llmod@dividend+2,w
  8285  0856  00A7               	movwf	?___llmod+2
  8286  0857  082A               	movf	___llmod@dividend+1,w
  8287  0858  00A6               	movwf	?___llmod+1
  8288  0859  0829               	movf	___llmod@dividend,w
  8289  085A  00A5               	movwf	?___llmod
  8290  085B  0008               	return
  8291  085C                     __end_of___llmod:	
  8292                           
  8293                           	psect	text37
  8294  08F3                     __ptext37:	
  8295 ;; *************** function ___lldiv *****************
  8296 ;; Defined at:
  8297 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lldiv.c"
  8298 ;; Parameters:    Size  Location     Type
  8299 ;;  divisor         4    1[COMMON] unsigned long 
  8300 ;;  dividend        4    5[COMMON] unsigned long 
  8301 ;; Auto vars:     Size  Location     Type
  8302 ;;  quotient        4    0[BANK0 ] unsigned long 
  8303 ;;  counter         1    4[BANK0 ] unsigned char 
  8304 ;; Return value:  Size  Location     Type
  8305 ;;                  4    1[COMMON] unsigned long 
  8306 ;; Registers used:
  8307 ;;		wreg, status,2, status,0
  8308 ;; Tracked objects:
  8309 ;;		On entry : 0/0
  8310 ;;		On exit  : 0/0
  8311 ;;		Unchanged: 0/0
  8312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8313 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8314 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8315 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8316 ;;      Totals:         9       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8317 ;;Total ram usage:       14 bytes
  8318 ;; Hardware stack levels used:    1
  8319 ;; Hardware stack levels required when called:    2
  8320 ;; This function calls:
  8321 ;;		Nothing
  8322 ;; This function is called by:
  8323 ;;		_printf
  8324 ;; This function uses a non-reentrant model
  8325 ;;
  8326                           
  8327                           
  8328                           ;psect for function ___lldiv
  8329  08F3                     ___lldiv:	
  8330                           
  8331                           ;incstack = 0
  8332                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  8333  08F3  3000               	movlw	0
  8334  08F4  0020               	movlb	0	; select bank0
  8335  08F5  00A3               	movwf	___lldiv@quotient+3
  8336  08F6  3000               	movlw	0
  8337  08F7  00A2               	movwf	___lldiv@quotient+2
  8338  08F8  3000               	movlw	0
  8339  08F9  00A1               	movwf	___lldiv@quotient+1
  8340  08FA  3000               	movlw	0
  8341  08FB  00A0               	movwf	___lldiv@quotient
  8342  08FC  0874               	movf	___lldiv@divisor+3,w
  8343  08FD  0473               	iorwf	___lldiv@divisor+2,w
  8344  08FE  0472               	iorwf	___lldiv@divisor+1,w
  8345  08FF  0471               	iorwf	___lldiv@divisor,w
  8346  0900  1903               	skipnz
  8347  0901  293D               	goto	l3462
  8348  0902  01A4               	clrf	___lldiv@counter
  8349  0903  0AA4               	incf	___lldiv@counter,f
  8350  0904                     l3448:	
  8351  0904  1BF4               	btfsc	___lldiv@divisor+3,7
  8352  0905  2912               	goto	l3450
  8353  0906  3001               	movlw	1
  8354  0907                     u5345:	
  8355  0907  35F1               	lslf	___lldiv@divisor,f
  8356  0908  0DF2               	rlf	___lldiv@divisor+1,f
  8357  0909  0DF3               	rlf	___lldiv@divisor+2,f
  8358  090A  0DF4               	rlf	___lldiv@divisor+3,f
  8359  090B  0B89               	decfsz	9,f
  8360  090C  2907               	goto	u5345
  8361  090D  3001               	movlw	1
  8362  090E  00F9               	movwf	??___lldiv
  8363  090F  0879               	movf	??___lldiv,w
  8364  0910  07A4               	addwf	___lldiv@counter,f
  8365  0911  2904               	goto	l3448
  8366  0912                     l3450:	
  8367  0912  3001               	movlw	1
  8368  0913                     u5365:	
  8369  0913  35A0               	lslf	___lldiv@quotient,f
  8370  0914  0DA1               	rlf	___lldiv@quotient+1,f
  8371  0915  0DA2               	rlf	___lldiv@quotient+2,f
  8372  0916  0DA3               	rlf	___lldiv@quotient+3,f
  8373  0917  0B89               	decfsz	9,f
  8374  0918  2913               	goto	u5365
  8375  0919  0874               	movf	___lldiv@divisor+3,w
  8376  091A  0278               	subwf	___lldiv@dividend+3,w
  8377  091B  1D03               	skipz
  8378  091C  2927               	goto	u5375
  8379  091D  0873               	movf	___lldiv@divisor+2,w
  8380  091E  0277               	subwf	___lldiv@dividend+2,w
  8381  091F  1D03               	skipz
  8382  0920  2927               	goto	u5375
  8383  0921  0872               	movf	___lldiv@divisor+1,w
  8384  0922  0276               	subwf	___lldiv@dividend+1,w
  8385  0923  1D03               	skipz
  8386  0924  2927               	goto	u5375
  8387  0925  0871               	movf	___lldiv@divisor,w
  8388  0926  0275               	subwf	___lldiv@dividend,w
  8389  0927                     u5375:	
  8390  0927  1C03               	skipc
  8391  0928  2932               	goto	l3458
  8392  0929  0871               	movf	___lldiv@divisor,w
  8393  092A  02F5               	subwf	___lldiv@dividend,f
  8394  092B  0872               	movf	___lldiv@divisor+1,w
  8395  092C  3BF6               	subwfb	___lldiv@dividend+1,f
  8396  092D  0873               	movf	___lldiv@divisor+2,w
  8397  092E  3BF7               	subwfb	___lldiv@dividend+2,f
  8398  092F  0874               	movf	___lldiv@divisor+3,w
  8399  0930  3BF8               	subwfb	___lldiv@dividend+3,f
  8400  0931  1420               	bsf	___lldiv@quotient,0
  8401  0932                     l3458:	
  8402  0932  3001               	movlw	1
  8403  0933                     u5385:	
  8404  0933  36F4               	lsrf	___lldiv@divisor+3,f
  8405  0934  0CF3               	rrf	___lldiv@divisor+2,f
  8406  0935  0CF2               	rrf	___lldiv@divisor+1,f
  8407  0936  0CF1               	rrf	___lldiv@divisor,f
  8408  0937  0B89               	decfsz	9,f
  8409  0938  2933               	goto	u5385
  8410  0939  3001               	movlw	1
  8411  093A  02A4               	subwf	___lldiv@counter,f
  8412  093B  1D03               	btfss	3,2
  8413  093C  2912               	goto	l3450
  8414  093D                     l3462:	
  8415  093D  0823               	movf	___lldiv@quotient+3,w
  8416  093E  00F4               	movwf	?___lldiv+3
  8417  093F  0822               	movf	___lldiv@quotient+2,w
  8418  0940  00F3               	movwf	?___lldiv+2
  8419  0941  0821               	movf	___lldiv@quotient+1,w
  8420  0942  00F2               	movwf	?___lldiv+1
  8421  0943  0820               	movf	___lldiv@quotient,w
  8422  0944  00F1               	movwf	?___lldiv
  8423  0945  0008               	return
  8424  0946                     __end_of___lldiv:	
  8425                           
  8426                           	psect	text38
  8427  09AA                     __ptext38:	
  8428 ;; *************** function ___fttol *****************
  8429 ;; Defined at:
  8430 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  8431 ;; Parameters:    Size  Location     Type
  8432 ;;  f1              3   36[BANK0 ] float 
  8433 ;; Auto vars:     Size  Location     Type
  8434 ;;  lval            4   45[BANK0 ] unsigned long 
  8435 ;;  exp1            1   49[BANK0 ] unsigned char 
  8436 ;;  sign1           1   44[BANK0 ] unsigned char 
  8437 ;; Return value:  Size  Location     Type
  8438 ;;                  4   36[BANK0 ] long 
  8439 ;; Registers used:
  8440 ;;		wreg, status,2, status,0
  8441 ;; Tracked objects:
  8442 ;;		On entry : 0/0
  8443 ;;		On exit  : 0/0
  8444 ;;		Unchanged: 0/0
  8445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8446 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8447 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8448 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8449 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8450 ;;Total ram usage:       14 bytes
  8451 ;; Hardware stack levels used:    1
  8452 ;; Hardware stack levels required when called:    2
  8453 ;; This function calls:
  8454 ;;		Nothing
  8455 ;; This function is called by:
  8456 ;;		_printf
  8457 ;; This function uses a non-reentrant model
  8458 ;;
  8459                           
  8460                           
  8461                           ;psect for function ___fttol
  8462  09AA                     ___fttol:	
  8463                           
  8464                           ;incstack = 0
  8465                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  8466  09AA  0020               	movlb	0	; select bank0
  8467  09AB  0844               	movf	___fttol@f1,w
  8468  09AC  00C8               	movwf	??___fttol
  8469  09AD  0845               	movf	___fttol@f1+1,w
  8470  09AE  00C9               	movwf	??___fttol+1
  8471  09AF  0846               	movf	___fttol@f1+2,w
  8472  09B0  00CA               	movwf	??___fttol+2
  8473  09B1  1003               	clrc
  8474  09B2  0D49               	rlf	??___fttol+1,w
  8475  09B3  0D4A               	rlf	??___fttol+2,w
  8476  09B4  00CB               	movwf	??___fttol+3
  8477  09B5  084B               	movf	??___fttol+3,w
  8478  09B6  00D1               	movwf	___fttol@exp1
  8479  09B7  0851               	movf	___fttol@exp1,w
  8480  09B8  1D03               	btfss	3,2
  8481  09B9  29C3               	goto	l3406
  8482  09BA  3000               	movlw	0
  8483  09BB  00C7               	movwf	?___fttol+3
  8484  09BC  3000               	movlw	0
  8485  09BD  00C6               	movwf	?___fttol+2
  8486  09BE  3000               	movlw	0
  8487  09BF  00C5               	movwf	?___fttol+1
  8488  09C0  3000               	movlw	0
  8489  09C1  00C4               	movwf	?___fttol
  8490  09C2  0008               	return
  8491  09C3                     l3406:	
  8492  09C3  0844               	movf	___fttol@f1,w
  8493  09C4  00C8               	movwf	??___fttol
  8494  09C5  0845               	movf	___fttol@f1+1,w
  8495  09C6  00C9               	movwf	??___fttol+1
  8496  09C7  0846               	movf	___fttol@f1+2,w
  8497  09C8  00CA               	movwf	??___fttol+2
  8498  09C9  3017               	movlw	23
  8499  09CA                     u5245:	
  8500  09CA  36CA               	lsrf	??___fttol+2,f
  8501  09CB  0CC9               	rrf	??___fttol+1,f
  8502  09CC  0CC8               	rrf	??___fttol,f
  8503  09CD  0B89               	decfsz	9,f
  8504  09CE  29CA               	goto	u5245
  8505  09CF  0848               	movf	??___fttol,w
  8506  09D0  00CB               	movwf	??___fttol+3
  8507  09D1  084B               	movf	??___fttol+3,w
  8508  09D2  00CC               	movwf	___fttol@sign1
  8509  09D3  17C5               	bsf	___fttol@f1+1,7
  8510  09D4  30FF               	movlw	255
  8511  09D5  05C4               	andwf	___fttol@f1,f
  8512  09D6  30FF               	movlw	255
  8513  09D7  05C5               	andwf	___fttol@f1+1,f
  8514  09D8  3000               	movlw	0
  8515  09D9  05C6               	andwf	___fttol@f1+2,f
  8516  09DA  0844               	movf	___fttol@f1,w
  8517  09DB  00CD               	movwf	___fttol@lval
  8518  09DC  0845               	movf	___fttol@f1+1,w
  8519  09DD  00CE               	movwf	___fttol@lval+1
  8520  09DE  0846               	movf	___fttol@f1+2,w
  8521  09DF  00CF               	movwf	___fttol@lval+2
  8522  09E0  01D0               	clrf	___fttol@lval+3
  8523  09E1  308E               	movlw	142
  8524  09E2  02D1               	subwf	___fttol@exp1,f
  8525  09E3  1FD1               	btfss	___fttol@exp1,7
  8526  09E4  2A01               	goto	l3426
  8527  09E5  0851               	movf	___fttol@exp1,w
  8528  09E6  3A80               	xorlw	128
  8529  09E7  3E8F               	addlw	143
  8530  09E8  1803               	skipnc
  8531  09E9  29F3               	goto	l3424
  8532  09EA  3000               	movlw	0
  8533  09EB  00C7               	movwf	?___fttol+3
  8534  09EC  3000               	movlw	0
  8535  09ED  00C6               	movwf	?___fttol+2
  8536  09EE  3000               	movlw	0
  8537  09EF  00C5               	movwf	?___fttol+1
  8538  09F0  3000               	movlw	0
  8539  09F1  00C4               	movwf	?___fttol
  8540  09F2  0008               	return
  8541  09F3                     l3424:	
  8542  09F3  3001               	movlw	1
  8543  09F4                     u5275:	
  8544  09F4  36D0               	lsrf	___fttol@lval+3,f
  8545  09F5  0CCF               	rrf	___fttol@lval+2,f
  8546  09F6  0CCE               	rrf	___fttol@lval+1,f
  8547  09F7  0CCD               	rrf	___fttol@lval,f
  8548  09F8  0B89               	decfsz	9,f
  8549  09F9  29F4               	goto	u5275
  8550  09FA  3001               	movlw	1
  8551  09FB  00C8               	movwf	??___fttol
  8552  09FC  0848               	movf	??___fttol,w
  8553  09FD  07D1               	addwf	___fttol@exp1,f
  8554  09FE  1903               	btfsc	3,2
  8555  09FF  2A1A               	goto	l3434
  8556  0A00  29F3               	goto	l3424
  8557  0A01                     l3426:	
  8558  0A01  3018               	movlw	24
  8559  0A02  0251               	subwf	___fttol@exp1,w
  8560  0A03  1C03               	skipc
  8561  0A04  2A17               	goto	l744
  8562  0A05  3000               	movlw	0
  8563  0A06  00C7               	movwf	?___fttol+3
  8564  0A07  3000               	movlw	0
  8565  0A08  00C6               	movwf	?___fttol+2
  8566  0A09  3000               	movlw	0
  8567  0A0A  00C5               	movwf	?___fttol+1
  8568  0A0B  3000               	movlw	0
  8569  0A0C  00C4               	movwf	?___fttol
  8570  0A0D  0008               	return
  8571  0A0E                     l3432:	
  8572  0A0E  3001               	movlw	1
  8573  0A0F                     u5305:	
  8574  0A0F  35CD               	lslf	___fttol@lval,f
  8575  0A10  0DCE               	rlf	___fttol@lval+1,f
  8576  0A11  0DCF               	rlf	___fttol@lval+2,f
  8577  0A12  0DD0               	rlf	___fttol@lval+3,f
  8578  0A13  0B89               	decfsz	9,f
  8579  0A14  2A0F               	goto	u5305
  8580  0A15  3001               	movlw	1
  8581  0A16  02D1               	subwf	___fttol@exp1,f
  8582  0A17                     l744:	
  8583  0A17  0851               	movf	___fttol@exp1,w
  8584  0A18  1D03               	btfss	3,2
  8585  0A19  2A0E               	goto	l3432
  8586  0A1A                     l3434:	
  8587  0A1A  084C               	movf	___fttol@sign1,w
  8588  0A1B  1903               	btfsc	3,2
  8589  0A1C  2A28               	goto	l3438
  8590  0A1D  09CD               	comf	___fttol@lval,f
  8591  0A1E  09CE               	comf	___fttol@lval+1,f
  8592  0A1F  09CF               	comf	___fttol@lval+2,f
  8593  0A20  09D0               	comf	___fttol@lval+3,f
  8594  0A21  0ACD               	incf	___fttol@lval,f
  8595  0A22  1903               	skipnz
  8596  0A23  0ACE               	incf	___fttol@lval+1,f
  8597  0A24  1903               	skipnz
  8598  0A25  0ACF               	incf	___fttol@lval+2,f
  8599  0A26  1903               	skipnz
  8600  0A27  0AD0               	incf	___fttol@lval+3,f
  8601  0A28                     l3438:	
  8602  0A28  0850               	movf	___fttol@lval+3,w
  8603  0A29  00C7               	movwf	?___fttol+3
  8604  0A2A  084F               	movf	___fttol@lval+2,w
  8605  0A2B  00C6               	movwf	?___fttol+2
  8606  0A2C  084E               	movf	___fttol@lval+1,w
  8607  0A2D  00C5               	movwf	?___fttol+1
  8608  0A2E  084D               	movf	___fttol@lval,w
  8609  0A2F  00C4               	movwf	?___fttol
  8610  0A30  0008               	return
  8611  0A31                     __end_of___fttol:	
  8612                           
  8613                           	psect	text39
  8614  168C                     __ptext39:	
  8615 ;; *************** function ___ftsub *****************
  8616 ;; Defined at:
  8617 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
  8618 ;; Parameters:    Size  Location     Type
  8619 ;;  f2              3   54[BANK0 ] float 
  8620 ;;  f1              3   57[BANK0 ] float 
  8621 ;; Auto vars:     Size  Location     Type
  8622 ;;		None
  8623 ;; Return value:  Size  Location     Type
  8624 ;;                  3   54[BANK0 ] float 
  8625 ;; Registers used:
  8626 ;;		wreg, status,2, status,0, pclath, cstack
  8627 ;; Tracked objects:
  8628 ;;		On entry : 0/0
  8629 ;;		On exit  : 0/0
  8630 ;;		Unchanged: 0/0
  8631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8632 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8635 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8636 ;;Total ram usage:        6 bytes
  8637 ;; Hardware stack levels used:    1
  8638 ;; Hardware stack levels required when called:    4
  8639 ;; This function calls:
  8640 ;;		___ftadd
  8641 ;; This function is called by:
  8642 ;;		_printf
  8643 ;; This function uses a non-reentrant model
  8644 ;;
  8645                           
  8646                           
  8647                           ;psect for function ___ftsub
  8648  168C                     ___ftsub:	
  8649                           
  8650                           ;incstack = 0
  8651                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  8652  168C  0020               	movlb	0	; select bank0
  8653  168D  0858               	movf	___ftsub@f2+2,w
  8654  168E  0457               	iorwf	___ftsub@f2+1,w
  8655  168F  0456               	iorwf	___ftsub@f2,w
  8656  1690  1903               	skipnz
  8657  1691  2E94               	goto	l3396
  8658  1692  3080               	movlw	128
  8659  1693  06D8               	xorwf	___ftsub@f2+2,f
  8660  1694                     l3396:	
  8661  1694  0859               	movf	___ftsub@f1,w
  8662  1695  00C9               	movwf	___ftadd@f1
  8663  1696  085A               	movf	___ftsub@f1+1,w
  8664  1697  00CA               	movwf	___ftadd@f1+1
  8665  1698  085B               	movf	___ftsub@f1+2,w
  8666  1699  00CB               	movwf	___ftadd@f1+2
  8667  169A  0856               	movf	___ftsub@f2,w
  8668  169B  00CC               	movwf	___ftadd@f2
  8669  169C  0857               	movf	___ftsub@f2+1,w
  8670  169D  00CD               	movwf	___ftadd@f2+1
  8671  169E  0858               	movf	___ftsub@f2+2,w
  8672  169F  00CE               	movwf	___ftadd@f2+2
  8673  16A0  318C  2488         	fcall	___ftadd
  8674  16A2  0020               	movlb	0	; select bank0
  8675  16A3  0849               	movf	?___ftadd,w
  8676  16A4  00D6               	movwf	?___ftsub
  8677  16A5  084A               	movf	?___ftadd+1,w
  8678  16A6  00D7               	movwf	?___ftsub+1
  8679  16A7  084B               	movf	?___ftadd+2,w
  8680  16A8  00D8               	movwf	?___ftsub+2
  8681  16A9  0008               	return
  8682  16AA                     __end_of___ftsub:	
  8683                           
  8684                           	psect	text40
  8685  0C88                     __ptext40:	
  8686 ;; *************** function ___ftadd *****************
  8687 ;; Defined at:
  8688 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
  8689 ;; Parameters:    Size  Location     Type
  8690 ;;  f1              3   41[BANK0 ] float 
  8691 ;;  f2              3   44[BANK0 ] float 
  8692 ;; Auto vars:     Size  Location     Type
  8693 ;;  exp1            1   53[BANK0 ] unsigned char 
  8694 ;;  exp2            1   52[BANK0 ] unsigned char 
  8695 ;;  sign            1   51[BANK0 ] unsigned char 
  8696 ;; Return value:  Size  Location     Type
  8697 ;;                  3   41[BANK0 ] float 
  8698 ;; Registers used:
  8699 ;;		wreg, status,2, status,0, pclath, cstack
  8700 ;; Tracked objects:
  8701 ;;		On entry : 0/0
  8702 ;;		On exit  : 0/0
  8703 ;;		Unchanged: 0/0
  8704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8705 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8706 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8707 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8708 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8709 ;;Total ram usage:       13 bytes
  8710 ;; Hardware stack levels used:    1
  8711 ;; Hardware stack levels required when called:    3
  8712 ;; This function calls:
  8713 ;;		___ftpack
  8714 ;; This function is called by:
  8715 ;;		_printf
  8716 ;;		___ftsub
  8717 ;; This function uses a non-reentrant model
  8718 ;;
  8719                           
  8720                           
  8721                           ;psect for function ___ftadd
  8722  0C88                     ___ftadd:	
  8723                           
  8724                           ;incstack = 0
  8725                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8726  0C88  0020               	movlb	0	; select bank0
  8727  0C89  0849               	movf	___ftadd@f1,w
  8728  0C8A  00CF               	movwf	??___ftadd
  8729  0C8B  084A               	movf	___ftadd@f1+1,w
  8730  0C8C  00D0               	movwf	??___ftadd+1
  8731  0C8D  084B               	movf	___ftadd@f1+2,w
  8732  0C8E  00D1               	movwf	??___ftadd+2
  8733  0C8F  1003               	clrc
  8734  0C90  0D50               	rlf	??___ftadd+1,w
  8735  0C91  0D51               	rlf	??___ftadd+2,w
  8736  0C92  00D2               	movwf	??___ftadd+3
  8737  0C93  0852               	movf	??___ftadd+3,w
  8738  0C94  00D5               	movwf	___ftadd@exp1
  8739  0C95  084C               	movf	___ftadd@f2,w
  8740  0C96  00CF               	movwf	??___ftadd
  8741  0C97  084D               	movf	___ftadd@f2+1,w
  8742  0C98  00D0               	movwf	??___ftadd+1
  8743  0C99  084E               	movf	___ftadd@f2+2,w
  8744  0C9A  00D1               	movwf	??___ftadd+2
  8745  0C9B  1003               	clrc
  8746  0C9C  0D50               	rlf	??___ftadd+1,w
  8747  0C9D  0D51               	rlf	??___ftadd+2,w
  8748  0C9E  00D2               	movwf	??___ftadd+3
  8749  0C9F  0852               	movf	??___ftadd+3,w
  8750  0CA0  00D4               	movwf	___ftadd@exp2
  8751  0CA1  0855               	movf	___ftadd@exp1,w
  8752  0CA2  1903               	btfsc	3,2
  8753  0CA3  2CB0               	goto	l3080
  8754  0CA4  0854               	movf	___ftadd@exp2,w
  8755  0CA5  0255               	subwf	___ftadd@exp1,w
  8756  0CA6  1803               	skipnc
  8757  0CA7  2CB7               	goto	l3084
  8758  0CA8  0355               	decf	___ftadd@exp1,w
  8759  0CA9  3AFF               	xorlw	255
  8760  0CAA  0754               	addwf	___ftadd@exp2,w
  8761  0CAB  00CF               	movwf	??___ftadd
  8762  0CAC  3019               	movlw	25
  8763  0CAD  024F               	subwf	??___ftadd,w
  8764  0CAE  1C03               	skipc
  8765  0CAF  2CB7               	goto	l3084
  8766  0CB0                     l3080:	
  8767  0CB0  084C               	movf	___ftadd@f2,w
  8768  0CB1  00C9               	movwf	?___ftadd
  8769  0CB2  084D               	movf	___ftadd@f2+1,w
  8770  0CB3  00CA               	movwf	?___ftadd+1
  8771  0CB4  084E               	movf	___ftadd@f2+2,w
  8772  0CB5  00CB               	movwf	?___ftadd+2
  8773  0CB6  0008               	return
  8774  0CB7                     l3084:	
  8775  0CB7  0854               	movf	___ftadd@exp2,w
  8776  0CB8  1903               	btfsc	3,2
  8777  0CB9  0008               	return
  8778  0CBA  0855               	movf	___ftadd@exp1,w
  8779  0CBB  0254               	subwf	___ftadd@exp2,w
  8780  0CBC  1803               	skipnc
  8781  0CBD  2CC6               	goto	l3090
  8782  0CBE  0354               	decf	___ftadd@exp2,w
  8783  0CBF  3AFF               	xorlw	255
  8784  0CC0  0755               	addwf	___ftadd@exp1,w
  8785  0CC1  00CF               	movwf	??___ftadd
  8786  0CC2  3019               	movlw	25
  8787  0CC3  024F               	subwf	??___ftadd,w
  8788  0CC4  1803               	btfsc	3,0
  8789  0CC5  0008               	return
  8790  0CC6                     l3090:	
  8791  0CC6  3006               	movlw	6
  8792  0CC7  00CF               	movwf	??___ftadd
  8793  0CC8  084F               	movf	??___ftadd,w
  8794  0CC9  00D3               	movwf	___ftadd@sign
  8795  0CCA  1BCB               	btfsc	___ftadd@f1+2,7
  8796  0CCB  17D3               	bsf	___ftadd@sign,7
  8797  0CCC  1BCE               	btfsc	___ftadd@f2+2,7
  8798  0CCD  1753               	bsf	___ftadd@sign,6
  8799  0CCE  17CA               	bsf	___ftadd@f1+1,7
  8800  0CCF  30FF               	movlw	255
  8801  0CD0  05C9               	andwf	___ftadd@f1,f
  8802  0CD1  30FF               	movlw	255
  8803  0CD2  05CA               	andwf	___ftadd@f1+1,f
  8804  0CD3  3000               	movlw	0
  8805  0CD4  05CB               	andwf	___ftadd@f1+2,f
  8806  0CD5  17CD               	bsf	___ftadd@f2+1,7
  8807  0CD6  30FF               	movlw	255
  8808  0CD7  05CC               	andwf	___ftadd@f2,f
  8809  0CD8  30FF               	movlw	255
  8810  0CD9  05CD               	andwf	___ftadd@f2+1,f
  8811  0CDA  3000               	movlw	0
  8812  0CDB  05CE               	andwf	___ftadd@f2+2,f
  8813  0CDC  0854               	movf	___ftadd@exp2,w
  8814  0CDD  0255               	subwf	___ftadd@exp1,w
  8815  0CDE  1803               	skipnc
  8816  0CDF  2D02               	goto	l3112
  8817  0CE0                     l3102:	
  8818  0CE0  3001               	movlw	1
  8819  0CE1                     u4605:	
  8820  0CE1  35CC               	lslf	___ftadd@f2,f
  8821  0CE2  0DCD               	rlf	___ftadd@f2+1,f
  8822  0CE3  0DCE               	rlf	___ftadd@f2+2,f
  8823  0CE4  0B89               	decfsz	9,f
  8824  0CE5  2CE1               	goto	u4605
  8825  0CE6  3001               	movlw	1
  8826  0CE7  02D4               	subwf	___ftadd@exp2,f
  8827  0CE8  0854               	movf	___ftadd@exp2,w
  8828  0CE9  0655               	xorwf	___ftadd@exp1,w
  8829  0CEA  1903               	skipnz
  8830  0CEB  2CFD               	goto	l3110
  8831  0CEC  3001               	movlw	1
  8832  0CED  02D3               	subwf	___ftadd@sign,f
  8833  0CEE  0853               	movf	___ftadd@sign,w
  8834  0CEF  3907               	andlw	7
  8835  0CF0  1903               	btfsc	3,2
  8836  0CF1  2CFD               	goto	l3110
  8837  0CF2  2CE0               	goto	l3102
  8838  0CF3                     l3108:	
  8839  0CF3  3001               	movlw	1
  8840  0CF4                     u4635:	
  8841  0CF4  36CB               	lsrf	___ftadd@f1+2,f
  8842  0CF5  0CCA               	rrf	___ftadd@f1+1,f
  8843  0CF6  0CC9               	rrf	___ftadd@f1,f
  8844  0CF7  0B89               	decfsz	9,f
  8845  0CF8  2CF4               	goto	u4635
  8846  0CF9  3001               	movlw	1
  8847  0CFA  00CF               	movwf	??___ftadd
  8848  0CFB  084F               	movf	??___ftadd,w
  8849  0CFC  07D5               	addwf	___ftadd@exp1,f
  8850  0CFD                     l3110:	
  8851  0CFD  0855               	movf	___ftadd@exp1,w
  8852  0CFE  0654               	xorwf	___ftadd@exp2,w
  8853  0CFF  1903               	btfsc	3,2
  8854  0D00  2D27               	goto	l667
  8855  0D01  2CF3               	goto	l3108
  8856  0D02                     l3112:	
  8857  0D02  0855               	movf	___ftadd@exp1,w
  8858  0D03  0254               	subwf	___ftadd@exp2,w
  8859  0D04  1803               	skipnc
  8860  0D05  2D27               	goto	l667
  8861  0D06                     l3114:	
  8862  0D06  3001               	movlw	1
  8863  0D07                     u4665:	
  8864  0D07  35C9               	lslf	___ftadd@f1,f
  8865  0D08  0DCA               	rlf	___ftadd@f1+1,f
  8866  0D09  0DCB               	rlf	___ftadd@f1+2,f
  8867  0D0A  0B89               	decfsz	9,f
  8868  0D0B  2D07               	goto	u4665
  8869  0D0C  3001               	movlw	1
  8870  0D0D  02D5               	subwf	___ftadd@exp1,f
  8871  0D0E  0854               	movf	___ftadd@exp2,w
  8872  0D0F  0655               	xorwf	___ftadd@exp1,w
  8873  0D10  1903               	skipnz
  8874  0D11  2D23               	goto	l3122
  8875  0D12  3001               	movlw	1
  8876  0D13  02D3               	subwf	___ftadd@sign,f
  8877  0D14  0853               	movf	___ftadd@sign,w
  8878  0D15  3907               	andlw	7
  8879  0D16  1903               	btfsc	3,2
  8880  0D17  2D23               	goto	l3122
  8881  0D18  2D06               	goto	l3114
  8882  0D19                     l3120:	
  8883  0D19  3001               	movlw	1
  8884  0D1A                     u4695:	
  8885  0D1A  36CE               	lsrf	___ftadd@f2+2,f
  8886  0D1B  0CCD               	rrf	___ftadd@f2+1,f
  8887  0D1C  0CCC               	rrf	___ftadd@f2,f
  8888  0D1D  0B89               	decfsz	9,f
  8889  0D1E  2D1A               	goto	u4695
  8890  0D1F  3001               	movlw	1
  8891  0D20  00CF               	movwf	??___ftadd
  8892  0D21  084F               	movf	??___ftadd,w
  8893  0D22  07D4               	addwf	___ftadd@exp2,f
  8894  0D23                     l3122:	
  8895  0D23  0855               	movf	___ftadd@exp1,w
  8896  0D24  0654               	xorwf	___ftadd@exp2,w
  8897  0D25  1D03               	skipz
  8898  0D26  2D19               	goto	l3120
  8899  0D27                     l667:	
  8900  0D27  1FD3               	btfss	___ftadd@sign,7
  8901  0D28  2D39               	goto	l3126
  8902  0D29  30FF               	movlw	255
  8903  0D2A  06C9               	xorwf	___ftadd@f1,f
  8904  0D2B  30FF               	movlw	255
  8905  0D2C  06CA               	xorwf	___ftadd@f1+1,f
  8906  0D2D  30FF               	movlw	255
  8907  0D2E  06CB               	xorwf	___ftadd@f1+2,f
  8908  0D2F  3001               	movlw	1
  8909  0D30  07C9               	addwf	___ftadd@f1,f
  8910  0D31  3000               	movlw	0
  8911  0D32  1803               	skipnc
  8912  0D33  3001               	movlw	1
  8913  0D34  07CA               	addwf	___ftadd@f1+1,f
  8914  0D35  3000               	movlw	0
  8915  0D36  1803               	skipnc
  8916  0D37  3001               	movlw	1
  8917  0D38  07CB               	addwf	___ftadd@f1+2,f
  8918  0D39                     l3126:	
  8919  0D39  1F53               	btfss	___ftadd@sign,6
  8920  0D3A  2D4B               	goto	l3130
  8921  0D3B  30FF               	movlw	255
  8922  0D3C  06CC               	xorwf	___ftadd@f2,f
  8923  0D3D  30FF               	movlw	255
  8924  0D3E  06CD               	xorwf	___ftadd@f2+1,f
  8925  0D3F  30FF               	movlw	255
  8926  0D40  06CE               	xorwf	___ftadd@f2+2,f
  8927  0D41  3001               	movlw	1
  8928  0D42  07CC               	addwf	___ftadd@f2,f
  8929  0D43  3000               	movlw	0
  8930  0D44  1803               	skipnc
  8931  0D45  3001               	movlw	1
  8932  0D46  07CD               	addwf	___ftadd@f2+1,f
  8933  0D47  3000               	movlw	0
  8934  0D48  1803               	skipnc
  8935  0D49  3001               	movlw	1
  8936  0D4A  07CE               	addwf	___ftadd@f2+2,f
  8937  0D4B                     l3130:	
  8938  0D4B  01D3               	clrf	___ftadd@sign
  8939  0D4C  0849               	movf	___ftadd@f1,w
  8940  0D4D  07CC               	addwf	___ftadd@f2,f
  8941  0D4E  084A               	movf	___ftadd@f1+1,w
  8942  0D4F  3DCD               	addwfc	___ftadd@f2+1,f
  8943  0D50  084B               	movf	___ftadd@f1+2,w
  8944  0D51  3DCE               	addwfc	___ftadd@f2+2,f
  8945  0D52  1FCE               	btfss	___ftadd@f2+2,7
  8946  0D53  2D66               	goto	l3140
  8947  0D54  30FF               	movlw	255
  8948  0D55  06CC               	xorwf	___ftadd@f2,f
  8949  0D56  30FF               	movlw	255
  8950  0D57  06CD               	xorwf	___ftadd@f2+1,f
  8951  0D58  30FF               	movlw	255
  8952  0D59  06CE               	xorwf	___ftadd@f2+2,f
  8953  0D5A  3001               	movlw	1
  8954  0D5B  07CC               	addwf	___ftadd@f2,f
  8955  0D5C  3000               	movlw	0
  8956  0D5D  1803               	skipnc
  8957  0D5E  3001               	movlw	1
  8958  0D5F  07CD               	addwf	___ftadd@f2+1,f
  8959  0D60  3000               	movlw	0
  8960  0D61  1803               	skipnc
  8961  0D62  3001               	movlw	1
  8962  0D63  07CE               	addwf	___ftadd@f2+2,f
  8963  0D64  01D3               	clrf	___ftadd@sign
  8964  0D65  0AD3               	incf	___ftadd@sign,f
  8965  0D66                     l3140:	
  8966  0D66  084C               	movf	___ftadd@f2,w
  8967  0D67  00F1               	movwf	___ftpack@arg
  8968  0D68  084D               	movf	___ftadd@f2+1,w
  8969  0D69  00F2               	movwf	___ftpack@arg+1
  8970  0D6A  084E               	movf	___ftadd@f2+2,w
  8971  0D6B  00F3               	movwf	___ftpack@arg+2
  8972  0D6C  0855               	movf	___ftadd@exp1,w
  8973  0D6D  00CF               	movwf	??___ftadd
  8974  0D6E  084F               	movf	??___ftadd,w
  8975  0D6F  00F4               	movwf	___ftpack@exp
  8976  0D70  0853               	movf	___ftadd@sign,w
  8977  0D71  00D0               	movwf	??___ftadd+1
  8978  0D72  0850               	movf	??___ftadd+1,w
  8979  0D73  00F5               	movwf	___ftpack@sign
  8980  0D74  3189  2146         	fcall	___ftpack
  8981  0D76  0871               	movf	?___ftpack,w
  8982  0D77  0020               	movlb	0	; select bank0
  8983  0D78  00C9               	movwf	?___ftadd
  8984  0D79  0872               	movf	?___ftpack+1,w
  8985  0D7A  00CA               	movwf	?___ftadd+1
  8986  0D7B  0873               	movf	?___ftpack+2,w
  8987  0D7C  00CB               	movwf	?___ftadd+2
  8988  0D7D  0008               	return
  8989  0D7E                     __end_of___ftadd:	
  8990                           
  8991                           	psect	text41
  8992  0946                     __ptext41:	
  8993 ;; *************** function ___ftpack *****************
  8994 ;; Defined at:
  8995 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
  8996 ;; Parameters:    Size  Location     Type
  8997 ;;  arg             3    1[COMMON] unsigned um
  8998 ;;  exp             1    4[COMMON] unsigned char 
  8999 ;;  sign            1    5[COMMON] unsigned char 
  9000 ;; Auto vars:     Size  Location     Type
  9001 ;;		None
  9002 ;; Return value:  Size  Location     Type
  9003 ;;                  3    1[COMMON] float 
  9004 ;; Registers used:
  9005 ;;		wreg, status,2, status,0
  9006 ;; Tracked objects:
  9007 ;;		On entry : 0/0
  9008 ;;		On exit  : 0/0
  9009 ;;		Unchanged: 0/0
  9010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9011 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9013 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9014 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9015 ;;Total ram usage:        8 bytes
  9016 ;; Hardware stack levels used:    1
  9017 ;; Hardware stack levels required when called:    2
  9018 ;; This function calls:
  9019 ;;		Nothing
  9020 ;; This function is called by:
  9021 ;;		___awtoft
  9022 ;;		___ftadd
  9023 ;;		___ftdiv
  9024 ;;		___ftmul
  9025 ;;		___lltoft
  9026 ;; This function uses a non-reentrant model
  9027 ;;
  9028                           
  9029                           
  9030                           ;psect for function ___ftpack
  9031  0946                     ___ftpack:	
  9032                           
  9033                           ;incstack = 0
  9034                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  9035  0946  0874               	movf	___ftpack@exp,w
  9036  0947  1903               	btfsc	3,2
  9037  0948  294E               	goto	l2946
  9038  0949  0873               	movf	___ftpack@arg+2,w
  9039  094A  0472               	iorwf	___ftpack@arg+1,w
  9040  094B  0471               	iorwf	___ftpack@arg,w
  9041  094C  1D03               	skipz
  9042  094D  295F               	goto	l2952
  9043  094E                     l2946:	
  9044  094E  3000               	movlw	0
  9045  094F  00F1               	movwf	?___ftpack
  9046  0950  3000               	movlw	0
  9047  0951  00F2               	movwf	?___ftpack+1
  9048  0952  3000               	movlw	0
  9049  0953  00F3               	movwf	?___ftpack+2
  9050  0954  0008               	return
  9051  0955                     l2950:	
  9052  0955  3001               	movlw	1
  9053  0956  00F6               	movwf	??___ftpack
  9054  0957  0876               	movf	??___ftpack,w
  9055  0958  07F4               	addwf	___ftpack@exp,f
  9056  0959  3001               	movlw	1
  9057  095A                     u4175:	
  9058  095A  36F3               	lsrf	___ftpack@arg+2,f
  9059  095B  0CF2               	rrf	___ftpack@arg+1,f
  9060  095C  0CF1               	rrf	___ftpack@arg,f
  9061  095D  0B89               	decfsz	9,f
  9062  095E  295A               	goto	u4175
  9063  095F                     l2952:	
  9064  095F  30FE               	movlw	254
  9065  0960  0573               	andwf	___ftpack@arg+2,w
  9066  0961  1903               	btfsc	3,2
  9067  0962  2978               	goto	l636
  9068  0963  2955               	goto	l2950
  9069  0964                     l2954:	
  9070  0964  3001               	movlw	1
  9071  0965  00F6               	movwf	??___ftpack
  9072  0966  0876               	movf	??___ftpack,w
  9073  0967  07F4               	addwf	___ftpack@exp,f
  9074  0968  3001               	movlw	1
  9075  0969  07F1               	addwf	___ftpack@arg,f
  9076  096A  3000               	movlw	0
  9077  096B  1803               	skipnc
  9078  096C  3001               	movlw	1
  9079  096D  07F2               	addwf	___ftpack@arg+1,f
  9080  096E  3000               	movlw	0
  9081  096F  1803               	skipnc
  9082  0970  3001               	movlw	1
  9083  0971  07F3               	addwf	___ftpack@arg+2,f
  9084  0972  3001               	movlw	1
  9085  0973                     u4195:	
  9086  0973  36F3               	lsrf	___ftpack@arg+2,f
  9087  0974  0CF2               	rrf	___ftpack@arg+1,f
  9088  0975  0CF1               	rrf	___ftpack@arg,f
  9089  0976  0B89               	decfsz	9,f
  9090  0977  2973               	goto	u4195
  9091  0978                     l636:	
  9092  0978  30FF               	movlw	255
  9093  0979  0573               	andwf	___ftpack@arg+2,w
  9094  097A  1903               	btfsc	3,2
  9095  097B  2985               	goto	l2962
  9096  097C  2964               	goto	l2954
  9097  097D                     l2960:	
  9098  097D  3001               	movlw	1
  9099  097E  02F4               	subwf	___ftpack@exp,f
  9100  097F  3001               	movlw	1
  9101  0980                     u4215:	
  9102  0980  35F1               	lslf	___ftpack@arg,f
  9103  0981  0DF2               	rlf	___ftpack@arg+1,f
  9104  0982  0DF3               	rlf	___ftpack@arg+2,f
  9105  0983  0B89               	decfsz	9,f
  9106  0984  2980               	goto	u4215
  9107  0985                     l2962:	
  9108  0985  1BF2               	btfsc	___ftpack@arg+1,7
  9109  0986  298B               	goto	l643
  9110  0987  3002               	movlw	2
  9111  0988  0274               	subwf	___ftpack@exp,w
  9112  0989  1803               	skipnc
  9113  098A  297D               	goto	l2960
  9114  098B                     l643:	
  9115  098B  1874               	btfsc	___ftpack@exp,0
  9116  098C  2993               	goto	l644
  9117  098D  30FF               	movlw	255
  9118  098E  05F1               	andwf	___ftpack@arg,f
  9119  098F  307F               	movlw	127
  9120  0990  05F2               	andwf	___ftpack@arg+1,f
  9121  0991  30FF               	movlw	255
  9122  0992  05F3               	andwf	___ftpack@arg+2,f
  9123  0993                     l644:	
  9124  0993  1003               	clrc
  9125  0994  0CF4               	rrf	___ftpack@exp,f
  9126  0995  0874               	movf	___ftpack@exp,w
  9127  0996  00F6               	movwf	??___ftpack
  9128  0997  01F7               	clrf	??___ftpack+1
  9129  0998  01F8               	clrf	??___ftpack+2
  9130  0999  3010               	movlw	16
  9131  099A                     u4255:	
  9132  099A  35F6               	lslf	??___ftpack,f
  9133  099B  0DF7               	rlf	??___ftpack+1,f
  9134  099C  0DF8               	rlf	??___ftpack+2,f
  9135  099D  0B89               	decfsz	9,f
  9136  099E  299A               	goto	u4255
  9137  099F  0876               	movf	??___ftpack,w
  9138  09A0  04F1               	iorwf	___ftpack@arg,f
  9139  09A1  0877               	movf	??___ftpack+1,w
  9140  09A2  04F2               	iorwf	___ftpack@arg+1,f
  9141  09A3  0878               	movf	??___ftpack+2,w
  9142  09A4  04F3               	iorwf	___ftpack@arg+2,f
  9143  09A5  0875               	movf	___ftpack@sign,w
  9144  09A6  1903               	btfsc	3,2
  9145  09A7  0008               	return
  9146  09A8  17F3               	bsf	___ftpack@arg+2,7
  9147  09A9  0008               	return
  9148  09AA                     __end_of___ftpack:	
  9149                           
  9150                           	psect	text42
  9151  1585                     __ptext42:	
  9152 ;; *************** function ___ftneg *****************
  9153 ;; Defined at:
  9154 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
  9155 ;; Parameters:    Size  Location     Type
  9156 ;;  f1              3    1[COMMON] float 
  9157 ;; Auto vars:     Size  Location     Type
  9158 ;;		None
  9159 ;; Return value:  Size  Location     Type
  9160 ;;                  3    1[COMMON] float 
  9161 ;; Registers used:
  9162 ;;		wreg
  9163 ;; Tracked objects:
  9164 ;;		On entry : 0/0
  9165 ;;		On exit  : 0/0
  9166 ;;		Unchanged: 0/0
  9167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9168 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9171 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9172 ;;Total ram usage:        3 bytes
  9173 ;; Hardware stack levels used:    1
  9174 ;; Hardware stack levels required when called:    2
  9175 ;; This function calls:
  9176 ;;		Nothing
  9177 ;; This function is called by:
  9178 ;;		_printf
  9179 ;; This function uses a non-reentrant model
  9180 ;;
  9181                           
  9182                           
  9183                           ;psect for function ___ftneg
  9184  1585                     ___ftneg:	
  9185                           
  9186                           ;incstack = 0
  9187                           ; Regs used in ___ftneg: [wreg]
  9188  1585  0873               	movf	___ftneg@f1+2,w
  9189  1586  0472               	iorwf	___ftneg@f1+1,w
  9190  1587  0471               	iorwf	___ftneg@f1,w
  9191  1588  1903               	skipnz
  9192  1589  0008               	return
  9193  158A  3080               	movlw	128
  9194  158B  06F3               	xorwf	___ftneg@f1+2,f
  9195  158C  0008               	return
  9196  158D                     __end_of___ftneg:	
  9197                           
  9198                           	psect	text43
  9199  1788                     __ptext43:	
  9200 ;; *************** function ___ftge *****************
  9201 ;; Defined at:
  9202 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
  9203 ;; Parameters:    Size  Location     Type
  9204 ;;  ff1             3    1[COMMON] float 
  9205 ;;  ff2             3    4[COMMON] float 
  9206 ;; Auto vars:     Size  Location     Type
  9207 ;;		None
  9208 ;; Return value:  Size  Location     Type
  9209 ;;		None               void
  9210 ;; Registers used:
  9211 ;;		wreg, status,2, status,0
  9212 ;; Tracked objects:
  9213 ;;		On entry : 0/0
  9214 ;;		On exit  : 0/0
  9215 ;;		Unchanged: 0/0
  9216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9217 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9219 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9220 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9221 ;;Total ram usage:        9 bytes
  9222 ;; Hardware stack levels used:    1
  9223 ;; Hardware stack levels required when called:    2
  9224 ;; This function calls:
  9225 ;;		Nothing
  9226 ;; This function is called by:
  9227 ;;		_RadioOperation
  9228 ;;		_printf
  9229 ;; This function uses a non-reentrant model
  9230 ;;
  9231                           
  9232                           
  9233                           ;psect for function ___ftge
  9234  1788                     ___ftge:	
  9235                           
  9236                           ;incstack = 0
  9237                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  9238  1788  1FF3               	btfss	___ftge@ff1+2,7
  9239  1789  2F9E               	goto	l3368
  9240  178A  0971               	comf	___ftge@ff1,w
  9241  178B  00F7               	movwf	??___ftge
  9242  178C  0972               	comf	___ftge@ff1+1,w
  9243  178D  00F8               	movwf	??___ftge+1
  9244  178E  0973               	comf	___ftge@ff1+2,w
  9245  178F  00F9               	movwf	??___ftge+2
  9246  1790  0AF7               	incf	??___ftge,f
  9247  1791  1903               	skipnz
  9248  1792  0AF8               	incf	??___ftge+1,f
  9249  1793  1903               	skipnz
  9250  1794  0AF9               	incf	??___ftge+2,f
  9251  1795  3000               	movlw	0
  9252  1796  0777               	addwf	??___ftge,w
  9253  1797  00F1               	movwf	___ftge@ff1
  9254  1798  3000               	movlw	0
  9255  1799  3D78               	addwfc	??___ftge+1,w
  9256  179A  00F2               	movwf	___ftge@ff1+1
  9257  179B  3080               	movlw	128
  9258  179C  3D79               	addwfc	??___ftge+2,w
  9259  179D  00F3               	movwf	___ftge@ff1+2
  9260  179E                     l3368:	
  9261  179E  1FF6               	btfss	___ftge@ff2+2,7
  9262  179F  2FB4               	goto	l3372
  9263  17A0  0974               	comf	___ftge@ff2,w
  9264  17A1  00F7               	movwf	??___ftge
  9265  17A2  0975               	comf	___ftge@ff2+1,w
  9266  17A3  00F8               	movwf	??___ftge+1
  9267  17A4  0976               	comf	___ftge@ff2+2,w
  9268  17A5  00F9               	movwf	??___ftge+2
  9269  17A6  0AF7               	incf	??___ftge,f
  9270  17A7  1903               	skipnz
  9271  17A8  0AF8               	incf	??___ftge+1,f
  9272  17A9  1903               	skipnz
  9273  17AA  0AF9               	incf	??___ftge+2,f
  9274  17AB  3000               	movlw	0
  9275  17AC  0777               	addwf	??___ftge,w
  9276  17AD  00F4               	movwf	___ftge@ff2
  9277  17AE  3000               	movlw	0
  9278  17AF  3D78               	addwfc	??___ftge+1,w
  9279  17B0  00F5               	movwf	___ftge@ff2+1
  9280  17B1  3080               	movlw	128
  9281  17B2  3D79               	addwfc	??___ftge+2,w
  9282  17B3  00F6               	movwf	___ftge@ff2+2
  9283  17B4                     l3372:	
  9284  17B4  3080               	movlw	128
  9285  17B5  06F3               	xorwf	___ftge@ff1+2,f
  9286  17B6  3080               	movlw	128
  9287  17B7  06F6               	xorwf	___ftge@ff2+2,f
  9288  17B8  0876               	movf	___ftge@ff2+2,w
  9289  17B9  0273               	subwf	___ftge@ff1+2,w
  9290  17BA  1D03               	skipz
  9291  17BB  0008               	return
  9292  17BC  0875               	movf	___ftge@ff2+1,w
  9293  17BD  0272               	subwf	___ftge@ff1+1,w
  9294  17BE  1D03               	skipz
  9295  17BF  0008               	return
  9296  17C0  0874               	movf	___ftge@ff2,w
  9297  17C1  0271               	subwf	___ftge@ff1,w
  9298  17C2  0008               	return
  9299  17C3                     __end_of___ftge:	
  9300                           
  9301                           	psect	text44
  9302  161F                     __ptext44:	
  9303 ;; *************** function _Delay *****************
  9304 ;; Defined at:
  9305 ;;		line 71 in file "Function.c"
  9306 ;; Parameters:    Size  Location     Type
  9307 ;;  wait            2    1[COMMON] int 
  9308 ;; Auto vars:     Size  Location     Type
  9309 ;;  x               2    4[COMMON] int 
  9310 ;; Return value:  Size  Location     Type
  9311 ;;                  1    wreg      void 
  9312 ;; Registers used:
  9313 ;;		wreg, status,2
  9314 ;; Tracked objects:
  9315 ;;		On entry : 0/0
  9316 ;;		On exit  : 0/0
  9317 ;;		Unchanged: 0/0
  9318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9319 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9320 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9321 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9322 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9323 ;;Total ram usage:        5 bytes
  9324 ;; Hardware stack levels used:    1
  9325 ;; Hardware stack levels required when called:    2
  9326 ;; This function calls:
  9327 ;;		Nothing
  9328 ;; This function is called by:
  9329 ;;		_main
  9330 ;;		_SR_FRSStart
  9331 ;; This function uses a non-reentrant model
  9332 ;;
  9333                           
  9334                           
  9335                           ;psect for function _Delay
  9336  161F                     _Delay:	
  9337                           
  9338                           ;Function.c: 72: int x;
  9339                           ;Function.c: 73: for (x = 0; x < wait; x++) {
  9340                           
  9341                           ;incstack = 0
  9342                           ; Regs used in _Delay: [wreg+status,2]
  9343  161F  01F4               	clrf	Delay@x
  9344  1620  01F5               	clrf	Delay@x+1
  9345  1621                     l60:	
  9346  1621  0875               	movf	Delay@x+1,w
  9347  1622  3A80               	xorlw	128
  9348  1623  00F3               	movwf	??_Delay
  9349  1624  0872               	movf	Delay@wait+1,w
  9350  1625  3A80               	xorlw	128
  9351  1626  0273               	subwf	??_Delay,w
  9352  1627  1D03               	skipz
  9353  1628  2E2B               	goto	u3735
  9354  1629  0871               	movf	Delay@wait,w
  9355  162A  0274               	subwf	Delay@x,w
  9356  162B                     u3735:	
  9357  162B  1803               	btfsc	3,0
  9358  162C  0008               	return
  9359                           
  9360                           ;Function.c: 74: _delay((unsigned long)((1)*(4000000/4000.0)));
  9361  162D  30F9               	movlw	249
  9362  162E  00F3               	movwf	??_Delay
  9363  162F                     u6087:	
  9364  162F  0000               	nop
  9365  1630  0BF3               	decfsz	??_Delay,f
  9366  1631  2E2F               	goto	u6087
  9367  1632  3200               	nop2	;nop
  9368  1633  0000               	nop
  9369  1634  3001               	movlw	1
  9370  1635  07F4               	addwf	Delay@x,f
  9371  1636  3000               	movlw	0
  9372  1637  3DF5               	addwfc	Delay@x+1,f
  9373  1638  2E21               	goto	l60
  9374  1639                     __end_of_Delay:	
  9375                           
  9376                           	psect	text45
  9377  156D                     __ptext45:	
  9378 ;; *************** function _LEDOff *****************
  9379 ;; Defined at:
  9380 ;;		line 119 in file "Function.c"
  9381 ;; Parameters:    Size  Location     Type
  9382 ;;		None
  9383 ;; Auto vars:     Size  Location     Type
  9384 ;;		None
  9385 ;; Return value:  Size  Location     Type
  9386 ;;                  1    wreg      void 
  9387 ;; Registers used:
  9388 ;;		None
  9389 ;; Tracked objects:
  9390 ;;		On entry : 0/0
  9391 ;;		On exit  : 0/0
  9392 ;;		Unchanged: 0/0
  9393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9398 ;;Total ram usage:        0 bytes
  9399 ;; Hardware stack levels used:    1
  9400 ;; Hardware stack levels required when called:    2
  9401 ;; This function calls:
  9402 ;;		Nothing
  9403 ;; This function is called by:
  9404 ;;		_main
  9405 ;; This function uses a non-reentrant model
  9406 ;;
  9407                           
  9408                           
  9409                           ;psect for function _LEDOff
  9410  156D                     _LEDOff:	
  9411                           
  9412                           ;Function.c: 120: PORTCbits.RC3 = 0;
  9413                           
  9414                           ;incstack = 0
  9415                           ; Regs used in _LEDOff: []
  9416  156D  0020               	movlb	0	; select bank0
  9417  156E  118E               	bcf	14,3	;volatile
  9418                           
  9419                           ;Function.c: 121: PORTCbits.RC5 = 0;
  9420  156F  128E               	bcf	14,5	;volatile
  9421                           
  9422                           ;Function.c: 122: PORTCbits.RC4 = 0;
  9423  1570  120E               	bcf	14,4	;volatile
  9424  1571  0008               	return
  9425  1572                     __end_of_LEDOff:	
  9426                           
  9427                           	psect	intentry
  9428  0004                     __pintentry:	
  9429 ;; *************** function _INTERRUPT_InterruptManager *****************
  9430 ;; Defined at:
  9431 ;;		line 89 in file "Function.c"
  9432 ;; Parameters:    Size  Location     Type
  9433 ;;		None
  9434 ;; Auto vars:     Size  Location     Type
  9435 ;;		None
  9436 ;; Return value:  Size  Location     Type
  9437 ;;                  1    wreg      void 
  9438 ;; Registers used:
  9439 ;;		wreg, status,2, status,0, pclath, cstack
  9440 ;; Tracked objects:
  9441 ;;		On entry : 0/0
  9442 ;;		On exit  : 0/0
  9443 ;;		Unchanged: 0/0
  9444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9447 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9448 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9449 ;;Total ram usage:        1 bytes
  9450 ;; Hardware stack levels used:    1
  9451 ;; Hardware stack levels required when called:    1
  9452 ;; This function calls:
  9453 ;;		_TMR2_ISR
  9454 ;; This function is called by:
  9455 ;;		Interrupt level 1
  9456 ;; This function uses a non-reentrant model
  9457 ;;
  9458                           
  9459  0004                     _INTERRUPT_InterruptManager:	
  9460                           
  9461                           ;incstack = 0
  9462                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
  9463  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9464  0005  3180               	pagesel	$
  9465  0006  0020               	movlb	0	; select bank0
  9466  0007  087F               	movf	127,w
  9467  0008  00F0               	movwf	??_INTERRUPT_InterruptManager
  9468                           
  9469                           ;Function.c: 91: if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
  9470  0009  0021               	movlb	1	; select bank1
  9471  000A  1C91               	btfss	17,1	;volatile
  9472  000B  2811               	goto	i1l71
  9473  000C  0020               	movlb	0	; select bank0
  9474  000D  1C91               	btfss	17,1	;volatile
  9475  000E  2811               	goto	i1l71
  9476                           
  9477                           ;Function.c: 92: {
  9478                           ;Function.c: 93: TMR2_ISR();
  9479  000F  3195  257D         	fcall	_TMR2_ISR
  9480  0011                     i1l71:	
  9481                           ;Function.c: 95: else
  9482                           ;Function.c: 96: {
  9483                           
  9484                           ;Function.c: 94: }
  9485                           
  9486  0011  0870               	movf	??_INTERRUPT_InterruptManager,w
  9487  0012  0020               	movlb	0	; select bank0
  9488  0013  00FF               	movwf	127
  9489  0014  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9490  0015  0009               	retfie
  9491  0016                     __end_of_INTERRUPT_InterruptManager:	
  9492                           
  9493                           	psect	text47
  9494  157D                     __ptext47:	
  9495 ;; *************** function _TMR2_ISR *****************
  9496 ;; Defined at:
  9497 ;;		line 48 in file "Timer.c"
  9498 ;; Parameters:    Size  Location     Type
  9499 ;;		None
  9500 ;; Auto vars:     Size  Location     Type
  9501 ;;		None
  9502 ;; Return value:  Size  Location     Type
  9503 ;;                  1    wreg      void 
  9504 ;; Registers used:
  9505 ;;		wreg
  9506 ;; Tracked objects:
  9507 ;;		On entry : 0/0
  9508 ;;		On exit  : 0/0
  9509 ;;		Unchanged: 0/0
  9510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9515 ;;Total ram usage:        0 bytes
  9516 ;; Hardware stack levels used:    1
  9517 ;; This function calls:
  9518 ;;		Nothing
  9519 ;; This function is called by:
  9520 ;;		_INTERRUPT_InterruptManager
  9521 ;; This function uses a non-reentrant model
  9522 ;;
  9523                           
  9524                           
  9525                           ;psect for function _TMR2_ISR
  9526  157D                     _TMR2_ISR:	
  9527                           
  9528                           ;Timer.c: 51: ticker++;
  9529                           
  9530                           ;incstack = 0
  9531                           ; Regs used in _TMR2_ISR: [wreg]
  9532  157D  3001               	movlw	1
  9533  157E  0021               	movlb	1	; select bank1
  9534  157F  07BF               	addwf	_ticker^(0+128),f
  9535  1580  3000               	movlw	0
  9536  1581  3DC0               	addwfc	(_ticker+1)^(0+128),f
  9537                           
  9538                           ;Timer.c: 53: PIR1bits.TMR2IF = 0;
  9539  1582  0020               	movlb	0	; select bank0
  9540  1583  1091               	bcf	17,1	;volatile
  9541  1584  0008               	return
  9542  1585                     __end_of_TMR2_ISR:	
  9543  007E                     btemp	set	126	;btemp
  9544  007E                     int$flags	set	126
  9545  007E                     wtemp	set	126
  9546  007E                     wtemp0	set	126
  9547  0080                     wtemp1	set	128
  9548  0082                     wtemp2	set	130
  9549  0084                     wtemp3	set	132
  9550  0086                     wtemp4	set	134
  9551  0088                     wtemp5	set	136
  9552  007F                     wtemp6	set	127
  9553  007E                     ttemp	set	126
  9554  007E                     ttemp0	set	126
  9555  0081                     ttemp1	set	129
  9556  0084                     ttemp2	set	132
  9557  0087                     ttemp3	set	135
  9558  007F                     ttemp4	set	127
  9559  007E                     ltemp	set	126
  9560  007E                     ltemp0	set	126
  9561  0082                     ltemp1	set	130
  9562  0086                     ltemp2	set	134
  9563  0080                     ltemp3	set	128


Data Sizes:
    Strings     116
    Constant    118
    Data        1
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     80      80
    BANK1            80     32      70
    BANK2            80      0      26
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 36
		 -> STR_8(CODE[22]), STR_7(CODE[19]), STR_6(CODE[19]), STR_5(CODE[22]), 
		 -> STR_4(CODE[36]), STR_3(CODE[3]), STR_2(CODE[14]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 


Critical Paths under _main in COMMON

    _RadioOperation->___awtoft
    ___awtoft->___ftpack
    _ReadVoltage->_SetADCChannel
    _printf->___awdiv
    _printf->___llmod
    _scale->___awdiv
    _putch->_EUSART_Write
    _fround->___awdiv
    ___wmul->___awdiv
    ___ftmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _RadioOperation->___ftdiv
    ___ftdiv->___ftmul
    _SR_FRSStart->_SetMIC
    _SR_FRSStart->_SetVOX
    _SR_FRSStart->_SetVolume
    _SetVolume->_printf
    _SetVOX->_printf
    _SetPowerSave->_printf
    _SetMIC->_printf
    _SetFrequency->_printf
    _SetCommandMode->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _SR_FRSStart->_SetMIC
    _SetVolume->_printf
    _SetVOX->_printf
    _SetPowerSave->_printf
    _SetMIC->_printf
    _SetFrequency->_printf
    _SetCommandMode->_printf

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  300904
                              _Delay
                             _LEDOff
                         _RadioBegin
                     _RadioOperation
                              _Start
 ---------------------------------------------------------------------------------
 (1) _Start                                                0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RadioOperation                                       1     1      0   10506
                                             43 BANK0      1     1      0
                        _ClearTicker
                          _GetTicker
                        _ReadCharger
                        _ReadVoltage
                    _SR_FRSPowerDown
                         _SR_FRSTalk
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2678
                                             27 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    2326
                                              9 COMMON     3     0      3
                                              0 BANK0      3     3      0
                        _ReadVoltage (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _SR_FRSTalk                                           1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SR_FRSPowerDown                                      1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ReadVoltage                                          4     1      3      88
                                              2 COMMON     4     1      3
                      _SetADCChannel
 ---------------------------------------------------------------------------------
 (3) _SetADCChannel                                        1     1      0      66
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ReadCharger                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetTicker                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ClearTicker                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RadioBegin                                           0     0      0  290034
                        _SR_FRSStart
 ---------------------------------------------------------------------------------
 (2) _SR_FRSStart                                          0     0      0  290034
                              _Delay
                     _SetCommandMode
                       _SetFrequency
                             _SetMIC
                       _SetPowerSave
                             _SetVOX
                          _SetVolume
 ---------------------------------------------------------------------------------
 (3) _SetVolume                                            3     3      0   48298
                                             78 BANK0      2     2      0
                                             28 BANK1      1     1      0
                             _printf
 ---------------------------------------------------------------------------------
 (3) _SetVOX                                               3     1      2   48363
                                             78 BANK0      2     0      2
                                             28 BANK1      1     1      0
                             _printf
 ---------------------------------------------------------------------------------
 (3) _SetPowerSave                                         0     0      0   48205
                             _printf
 ---------------------------------------------------------------------------------
 (3) _SetMIC                                               6     5      1   48394
                                             78 BANK0      2     1      1
                                             28 BANK1      4     4      0
                             _printf
 ---------------------------------------------------------------------------------
 (3) _SetFrequency                                         0     0      0   48205
                             _printf
 ---------------------------------------------------------------------------------
 (3) _SetCommandMode                                       0     0      0   48205
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              53    35     18   48205
                                             60 BANK0     18     0     18
                                              0 BANK1     28    28      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (5) _scale                                               12     9      3   11217
                                             27 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0      62
                                              2 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART_Write                                         1     1      0      31
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _fround                                              17    14      3   10938
                                             27 BANK0     14    11      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    2606
                                              5 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    4566
                                             11 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              7     3      4    1603
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              9     5      4    1745
                                              8 COMMON     4     0      4
                                              0 BANK0      5     5      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) __tdiv_to_l_                                         16    10      6     584
                                              1 COMMON    10     4      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (5) __div_to_l_                                          20    14      6     803
                                              1 COMMON     6     0      6
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (5) ___lltoft                                             6     2      4    2295
                                              9 COMMON     2     2      0
                                              0 BANK0      4     0      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___llmod                                             10     2      8     752
                                             10 COMMON     2     2      0
                                              5 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             14     6      8     631
                                              1 COMMON     9     1      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             14    10      4     566
                                             36 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftsub                                              6     0      6    3839
                                             54 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftadd                                             13     7      6    3613
                                             41 BANK0     13     7      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2128
                                              1 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3     130
                                              1 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     848
                                              1 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (3) _Delay                                                5     3      2     364
                                              1 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _LEDOff                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           1     1      0       0
                                              0 COMMON     1     1      0
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR2_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay
   _LEDOff
   _RadioBegin
     _SR_FRSStart
       _Delay
       _SetCommandMode
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _EUSART_Write
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _SetFrequency
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _EUSART_Write
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _SetMIC
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _EUSART_Write
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _SetPowerSave
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _EUSART_Write
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _SetVOX
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _EUSART_Write
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _SetVolume
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _EUSART_Write
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _RadioOperation
     _ClearTicker
     _GetTicker
     _ReadCharger
     _ReadVoltage
       _SetADCChannel
     _SR_FRSPowerDown
     _SR_FRSTalk
     ___awtoft
       _ReadVoltage (ARG)
         _SetADCChannel
       ___ftpack (ARG)
     ___ftdiv
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _Start
     _ADC_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _TMR2_Initialize

 _INTERRUPT_InterruptManager (ROOT)
   _TMR2_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     20      46       7       87.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      1A       9       32.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      BD      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      BD      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue Aug 16 01:38:36 2016

                         __CFG_CP$ON 0000                                   l60 1621  
                                 l74 15ED                                   l76 15F2  
                        __CFG_CPD$ON 0000                         ___awdiv@sign 0022  
                ___wmul@multiplicand 0027                         ___ftadd@exp1 0055  
                       ___ftadd@exp2 0054                          __CFG_LVP$ON 0000  
                       ___ftadd@sign 0053                                  l150 158E  
                                l330 018E                                  l322 005B  
                                l243 0BA6                                  l270 15D1  
                                l374 050F                                  l703 0B8F  
                                l624 0E8F                                  l458 165D  
                                l643 098B                                  l644 0993  
                                l636 0978                                  l744 0A17  
                                l667 0D27                                  l693 0B16  
                         _SR_FRSTalk 15D8                                  _PR2 001B  
                      _SetADCChannel 16AA                         ___awmod@sign 0077  
                    _TMR2_Initialize 15A9                         __CFG_BORV$LO 0000  
                                wreg 0009                         ___ftdiv@cntr 0045  
                       ___ftdiv@sign 004A                                 l3000 08AC  
                               l3110 0CFD                                 l3102 0CE0  
                               l3006 08B7                                 l3120 0D19  
                               l3112 0D02                                 l3032 08EE  
                               l3024 08DD                                 l3016 08BF  
                               l3130 0D4B                                 l3122 0D23  
                               l3114 0D06                                 l3018 08CB  
                               l3140 0D66                                 l3108 0CF3  
                               l3028 08E6                                 l3044 0866  
                               l3126 0D39                                 l3070 089C  
                               l3062 088B                                 l3150 0A48  
                               l3214 0FD3                                 l3206 0F5B  
                               l3230 05B9                                 l3080 0CB0  
                               l3304 0B86                                 l3056 0873  
                               l3048 086D                                 l3240 0635  
                               l3090 0CC6                                 l3322 0DB9  
                               l3306 0B92                                 l3058 087F  
                               l3066 0894                                 l3084 0CB7  
                               l3340 0E4C                                 l3332 0E04  
                               l3316 0D9C                                 l3180 0AB5  
                               l3172 0AA1                                 l3156 0A5E  
                               l3236 0618                                 l3406 09C3  
                               l3350 0E6B                                 l3254 0737  
                               l3502 0057                                 l3432 0A0E  
                               l3424 09F3                                 l3360 0E92  
                               l3352 0E79                                 l3264 0AFE  
                               l3184 0ABD                                 l3168 0A99  
                               l3248 06D8                                 l3504 005D  
                               l3512 006D                                 l3434 0A1A  
                               l3426 0A01                                 l3450 0912  
                               l3514 0090                                 l2730 16BE  
                               l3372 17B4                                 l3612 033C  
                               l3508 0068                                 l3438 0A28  
                               l3462 093D                                 l3358 0E86  
                               l3286 0B51                                 l3278 0B37  
                               l3606 02D2                                 l2726 16B4  
                               l3368 179E                                 l3448 0904  
                               l3472 0822                                 l3296 0B6B  
                               l3640 0453                                 l3624 036B  
                               l3608 0333                                 l3552 0177  
                               l3544 012A                                 l3528 00D2  
                               l3458 0932                                 l3474 0830  
                               l3482 0853                                 l3490 1761  
                               l3298 0B79                                 l3618 0356  
                               l3570 0208                                 l3642 0458  
                               l3810 0BED                                 l3396 1694  
                               l3492 1773                                 l3652 047D  
                               l3636 044A                                 l3580 023C  
                               l2756 15F7                                 l3804 0BE2  
                               l2950 0955                                 l3478 0848  
                               l3590 0297                                 l3566 01F4  
                               l3558 01C1                                 l3726 16D3  
                               l3742 0781                                 l2960 097D  
                               l2952 095F                                 l3664 04B0  
                               l3584 0291                                 l3736 076B  
                               l3832 0C60                                 l2962 0985  
                               l2954 0964                                 l2946 094E  
                               l3674 04C4                                 l3658 0483  
                               l3842 0C82                                 l3826 0C4E  
                               l3850 1614                                 l2980 1657  
                               l3668 04BE                                 l3596 02C4  
                               l3676 0036                                 l3764 07DB  
                               l3756 07C2                                 l3838 0C79  
                               l3790 0BC1                                 STR_1 10E7  
                               STR_2 10D9                                 STR_3 10E7  
                               STR_4 1076                                 STR_5 10B0  
                               STR_6 10C6                                 STR_7 10C6  
                               STR_8 109A                                 u4215 0980  
                               u5015 0B6C                                 u4305 1663  
                       printf@tmpval 00D9                                 u5045 0B87  
                               u6005 0BD7                                 u4255 099A  
                               u4175 095A                                 u5135 0E6C  
                               u5305 0A0F                                 u4195 0973  
                               u4355 08C2                                 u6035 0BFC  
                               u4605 0CE1                                 u5245 09CA  
                               u5165 0E87                                 u5085 0E05  
                               u6045 0C5A                                 u3735 162B  
                               u5415 0825                                 u5095 0E2F  
                               u4375 08CC                                 u4455 0876  
                               u4295 165E                                 u5345 0907  
                               u4385 08D6                                 u4635 0CF4  
                               u5275 09F4                                 u5435 083E  
                               u4395 08DE                                 u4475 0885  
                               u5365 0913                                 u5445 0849  
                               u4485 088C                                 u4805 0AA8  
                               u5605 01F2                                 u5525 00E6  
                               i1l71 0011                                 u6087 162F  
                               u5375 0927                                 u4665 0D07  
                               u5385 0933                                 u5465 1767  
                               u4835 0ABE                                 u5635 02BA  
                               u4845 0AC4                                 u4765 0A6A  
                               u5565 0198                                 u4695 0D1A  
                               u4775 0A7A                                 u5575 01CB  
                               u5815 167C                                 u5745 04A6  
                               u5905 07C3                                 u4955 0B38  
                               u4795 0AA2                                 u5675 0345  
                               u5915 07D2                                 u4965 0B48  
                               u5685 0351                                 u5925 07DC  
                               u4975 0B52                                 u5885 0793  
                               u5965 0BB2                                 u5895 07A3  
                               _TMR2 001A                          _SR_FRSStart 17C3  
                       __CFG_WRT$ALL 0000                                 _Mode 00C3  
                               _main 160B                         ___ftpack@arg 0071  
                       ___ftpack@exp 0074                                 _time 00C1  
                               fsr0h 0005                                 fsr1h 0007  
                               fsr0l 0004                                 indf0 0000  
                               indf1 0001                                 fsr1l 0006  
                               btemp 007E                        __CFG_BOREN$ON 0000  
                               ltemp 007E                        ??_ReadCharger 0071  
                               start 0016                                 ttemp 007E  
                               wtemp 007E                        __CFG_IESO$OFF 0000  
                      __CFG_MCLRE$ON 0000                         ___ftmul@cntr 0039  
                       ___ftmul@sign 003A                         ___fttol@exp1 0051  
                       ___fttol@lval 004D                        ?_EUSART_Write 0070  
                      ??_ReadVoltage 0075                                ?_main 0070  
                    __end_of___awdiv 08F3                      __end_of___ftadd 0D7E  
                      __CFG_WDTE$OFF 0000                      __end_of___awmod 08A1  
                    __end_of___ftdiv 07FD                      __end_of___ftneg 158D  
                    __end_of___lldiv 0946                      __end_of___ftmul 0AE5  
                    ___awdiv@divisor 0078                      __end_of___llmod 085C  
                    __end_of___ftsub 16AA                      __end_of___fttol 0A31  
                              _T2CON 001C                     ??_SetCommandMode 007C  
                     ?_SetADCChannel 0070                      ___awdiv@counter 0021  
                              _RCREG 0199                                _RCSTA 019D  
                              _TXREG 019A                                _TXSTA 019E  
                              _Delay 161F                        __CFG_PWRTE$ON 0000  
                       ___lltoft@exp 007A                       __CFG_FCMEN$OFF 0000  
            __size_of_RadioOperation 00ED                     __end_of_TMR2_ISR 1585  
                              _Start 16E9                        ___awtoft@sign 0022  
                    __end_of_dpowers 1028                                _count 00BD  
                              _scale 0510                        ___ftpack@sign 0075  
                              _putch 1572                                ltemp0 007E  
                              ltemp1 0082                                ltemp2 0086  
                              ltemp3 0080                          _ClearTicker 1569  
                              ttemp0 007E                                ttemp1 0081  
                              ttemp2 0084                                ttemp3 0087  
                              ttemp4 007F                                status 0003  
                              wtemp0 007E                                wtemp1 0080  
                              wtemp2 0082                                wtemp3 0084  
                              wtemp4 0086                                wtemp5 0088  
                              wtemp6 007F                      __initialization 0018  
         __end_of_EUSART1_Initialize 15BE                         __end_of_main 161F  
                         _RadioBegin 07FD                  __end_of_ReadCharger 15F9  
                     ??_EUSART_Write 0071                          SetMIC@scram 006E  
            __end_of_TMR2_Initialize 15B3          ?_INTERRUPT_InterruptManager 0070  
                             ??_main 007C                        ___fttol@sign1 004C  
                        ?_SR_FRSTalk 0070                   __size_of_GetTicker 0001  
                     __CFG_PLLEN$OFF 0000                 __size_of__tdiv_to_l_ 00B6  
                             ?_Delay 0071                               ?_Start 0070  
                __end_of_ReadVoltage 15D8                     ___llmod@dividend 0029  
                             ?_scale 003B                               _ADRESL 009B  
                   ___awdiv@dividend 007A                     __end_of___awtoft 16E9  
                             ?_putch 0070                     __end_of___ftpack 09AA  
                   __end_of___lltoft 1788                               _LEDOff 156D  
                             Delay@x 0074                               _INTCON 000B  
                             _SPBRGH 019C                               _SPBRGL 019B  
                             _SetMIC 1734                               _SetVOX 1670  
                   __end_of__powers_ 1076                               ___ftge 1788  
                      _output_buffer 0120                               ___wmul 1654  
                          ??___awdiv 0020                            ??___ftadd 004F  
                     __CFG_STVREN$ON 0000                            ??___awmod 0075  
                          ??___ftdiv 0041                            ??___ftneg 0074  
                          ??___lldiv 0079                            ??___ftmul 0031  
                          ??___llmod 007A                            ??___ftsub 007C  
                          ??___fttol 0048                               _fround 0E9B  
                 __size_of_SetVolume 001B                     ___awdiv@quotient 0023  
                    ___awmod@divisor 0071                               _ticker 00BF  
                    ??_SetADCChannel 0071                      ___awmod@counter 0076  
                             _printf 0031                ___ftmul@f3_as_product 0036  
                      ?_SetFrequency 0070        __size_of_INTERRUPT_Initialize 000A  
            __end_of__initialization 002D                           ___ftadd@f1 0049  
                         ___ftadd@f2 004C                           ___ftge@ff1 0071  
                         ___ftge@ff2 0074                           ___ftdiv@f1 003E  
                         ___ftdiv@f2 003B                           ___ftdiv@f3 0046  
                __size_of_SR_FRSTalk 000F                    __end_of_GetTicker 0801  
                         ___ftneg@f1 0071                          _ReadCharger 15E7  
                         ___awtoft@c 0079                        __end_of_Delay 1639  
                         ___ftmul@f1 002B                           ___ftmul@f2 002E  
                         ___ftsub@f1 0059                           ___ftsub@f2 0056  
                         ___fttol@f1 0044                       __pcstackCOMMON 0070  
                      __end_of_Start 170E                          ?_RadioBegin 0070  
                       __pidataBANK1 0003                        ?_SetPowerSave 0070  
                          ?_TMR2_ISR 0070                           ___lltoft@c 0020  
                      __end_of_scale 0754                        __end_of_putch 1577  
                   ?_TMR2_Initialize 0070                      SetVolume@volume 00E1  
                        _ReadVoltage 15CA                       ??_SetFrequency 007C  
                         __div_to_l_ 0D7E                         SetMIC@volume 006F  
                            ??_Delay 0073                       _RadioOperation 0B9B  
                    SetADCChannel@ch 0071                              ??_Start 0071  
                    __div_to_l_@exp1 002D                      __div_to_l_@cntr 002C  
                            ??_scale 003E                      __div_to_l_@quot 0028  
                            ??_putch 0072                           __pbssBANK1 00A0  
                         __pbssBANK2 0120                         ?_SR_FRSStart 0070  
                            ?_LEDOff 0070                 __end_of_EUSART_Write 1595  
                  __end_of_SetVolume 1654                        __div_to_l_@f1 0071  
                      __div_to_l_@f2 0074                              ?_SetMIC 006E  
                            ?_SetVOX 006E                           __pmaintext 160B  
                     ??_SetPowerSave 007C                              ?___ftge 0071  
                            ?___wmul 0025                           ??_TMR2_ISR 0070  
                         __pintentry 0004                              _BAUDCON 019F  
                            ?_fround 003B             __size_of_SR_FRSPowerDown 0012  
                          ?___awtoft 0079                            ?___ftpack 0071  
                            ?_printf 005C                            ?___lltoft 0020  
            __size_of_ADC_Initialize 000A               __end_of_RadioOperation 0C88  
                __size_of_RadioBegin 0003                      __size_of_LEDOff 0005  
                            _Battery 00BA                         ?_ClearTicker 0070  
                  __end_of__npowers_ 104F                           _scale$1241 0040  
                            _Talking 007C                      __size_of_SetMIC 0029  
                    __size_of_SetVOX 001C                      __size_of___ftge 003B  
                            ___awdiv 08A1                              ___ftadd 0C88  
                            ___awmod 085C                              ___ftdiv 0754  
                            ___ftneg 1585                              ___lldiv 08F3  
                    __size_of___wmul 001C                              ___ftmul 0A31  
                            ___llmod 0819                              ___ftsub 168C  
                            ___fttol 09AA                           ??___awtoft 0020  
                         ??___ftpack 0076                      __size_of_fround 0165  
                         ??___lltoft 0079                              __ptext1 16E9  
                            __ptext2 15A9                              __ptext3 159F  
                            __ptext4 15B3                              __ptext5 1595  
                            __ptext6 0B9B                              __ptext7 0754  
                            __ptext8 16C8                              __ptext9 15D8  
                    __size_of_printf 04DF                         ??_SR_FRSTalk 0071  
                        ?__div_to_l_ 0071                      ?_RadioOperation 0070  
                            _dpowers 1000                            _T2CONbits 001C  
                   ___awmod@dividend 0073                   _EUSART1_Initialize 15B3  
                       SetVOX@volume 006E                              clrloop0 1578  
               end_of_initialization 002D                            Delay@wait 0071  
                ?_EUSART1_Initialize 0070                 __end_of_SetFrequency 1734  
                    ___lldiv@divisor 0071                     __CFG_CLKOUTEN$ON 0000  
                    ___lldiv@counter 0024                   __end_of_SR_FRSTalk 15E7  
                          _RCSTAbits 019D                              printf@c 00E0  
                            printf@f 005C                         __pstringtext 1000  
                     __tdiv_to_l_@f1 0071                       __tdiv_to_l_@f2 0074  
               ??_EUSART1_Initialize 0071                        ??__tdiv_to_l_ 0077  
                          _PORTAbits 000C                            _PORTCbits 000E  
                   __CFG_FOSC$INTOSC 0000                            _TRISAbits 008C  
                          _TRISCbits 008E                    ??_SR_FRSPowerDown 0071  
              __size_of_EUSART_Write 0008                 __end_of_SetPowerSave 15CA  
            __size_of_SetCommandMode 0018                       __end_of_LEDOff 1572  
                        ___ftdiv@exp 0049                 __size_of_SR_FRSStart 003D  
                       ?_ReadCharger 0070                  __size_of__div_to_l_ 011D  
                        ___ftmul@exp 0035                       __end_of_SetMIC 175D  
                       ??_RadioBegin 007C                       __end_of_SetVOX 168C  
                          _GetTicker 0800         __end_of_INTERRUPT_Initialize 15A9  
                     __end_of___ftge 17C3                       __end_of___wmul 1670  
                       _EUSART_Write 158D                    __size_of_TMR2_ISR 0008  
                     _ADC_Initialize 1595                         ?_ReadVoltage 0072  
                     __end_of_fround 1000                __end_of_SetADCChannel 16C8  
                     __end_of_printf 0510                  start_initialization 0018  
                __end_of__tdiv_to_l_ 0B9B                        ReadVoltage@ch 0075  
                        putch@txData 0072                   __end_of_RadioBegin 0800  
                           ??_LEDOff 0071                      ___llmod@divisor 0025  
                    ___llmod@counter 007B                 __size_of_ClearTicker 0004  
                          _SetVolume 1639                             ??_SetMIC 00E1  
                           ??_SetVOX 00E1                             ??___ftge 0077  
                           ??___wmul 007C                           ?_GetTicker 0070  
             __end_of_ADC_Initialize 159F                          __pdataBANK1 00E5  
                           ??_fround 003E                             ??_printf 00C5  
                         fround@prec 0048                    __size_of___awtoft 0021  
                  __size_of___ftpack 0064                    __size_of___lltoft 002B  
                        __pbssCOMMON 007C                            ___latbits 0002  
                      __pcstackBANK0 0020                        __pcstackBANK1 00C5  
           __size_of_TMR2_Initialize 000A                __size_of_SetFrequency 0026  
                         ?_SetVolume 0070                             ?___awdiv 0078  
                           ?___ftadd 0049                             ?___awmod 0071  
                           ?___ftdiv 003B                             ?___ftneg 0071  
                           ?___lldiv 0071                             ?___ftmul 002B  
                           ?___llmod 0025                             ?___ftsub 0056  
                          __npowers_ 1028                             ?___fttol 0044  
                   ??_RadioOperation 004B                      ?_ADC_Initialize 0070  
       ??_INTERRUPT_InterruptManager 0070                          __tdiv_to_l_ 0AE5  
                       ??__div_to_l_ 0020                __size_of_SetPowerSave 000C  
                       _SetFrequency 170E                       __size_of_Delay 001A  
                     __size_of_Start 0025                       __size_of_scale 0244  
                     __size_of_putch 0005                 _INTERRUPT_Initialize 159F  
                     _SetCommandMode 0801                       ___wmul@product 0029  
                          clear_ram0 1577                             _PIE1bits 0091  
__size_of_INTERRUPT_InterruptManager 0012                             _PIR1bits 0011  
                 __end_of__div_to_l_ 0E9B                 __size_of_ReadCharger 0012  
                        ??_GetTicker 0071                             _TMR2_ISR 157D  
                       _SetPowerSave 15BE                      _SR_FRSPowerDown 15F9  
                       _input_buffer 00A0                           _ADCON0bits 009D  
                         _ADCON1bits 009E                    ___wmul@multiplier 0025  
                         printf@flag 00CE                           printf@fval 00DD  
                         printf@prec 00D1                 __size_of_ReadVoltage 000E  
             __end_of_SetCommandMode 0819                ?_INTERRUPT_Initialize 0070  
                  ??_TMR2_Initialize 0071                          ??_SetVolume 006E  
                           _Shutdown 00C4                     __size_of___awdiv 0052  
                   __size_of___ftadd 00F6                     __size_of___awmod 0045  
                   __size_of___ftdiv 00A9                     __size_of___ftneg 0008  
                   __size_of___lldiv 0053                     __size_of___ftmul 00B4  
                   __size_of___llmod 0043                     __size_of___ftsub 001E  
                   __size_of___fttol 0087          __size_of_EUSART1_Initialize 000B  
                           ___awtoft 16C8                             ___ftpack 0946  
                        _fround$1240 0042                          _fround$1239 0045  
                           ___lltoft 175D                           _ANSELAbits 018C  
                         _ANSELCbits 018E                             __ptext10 15F9  
                           __ptext11 15CA                             __ptext20 15BE  
                           __ptext12 16AA                             __ptext21 1734  
                           __ptext13 15E7                             __ptext30 0A31  
                           __ptext22 170E                             __ptext14 0800  
                           __ptext31 085C                             __ptext23 0801  
                           __ptext15 1569                             __ptext40 0C88  
                           __ptext32 08A1                             __ptext24 0031  
                           __ptext16 07FD                             __ptext41 0946  
                           __ptext33 0AE5                             __ptext25 0510  
                           __ptext17 17C3                             __ptext42 1585  
                           __ptext34 0D7E                             __ptext26 1572  
                           __ptext18 1639                             __ptext43 1788  
                           __ptext35 175D                             __ptext27 158D  
                           __ptext19 1670                             __ptext44 161F  
                           __ptext36 0819                             __ptext28 0E9B  
                           __ptext45 156D                             __ptext37 08F3  
                           __ptext29 1654                             __ptext38 09AA  
                           __ptext47 157D                             __ptext39 168C  
                    ?_SetCommandMode 0070                             __powers_ 104F  
                      ??_SR_FRSStart 007C                        __size_of_main 0014  
                     _Transmit_stall 00E5              __end_of_SR_FRSPowerDown 160B  
                           int$flags 007E   __end_of_INTERRUPT_InterruptManager 0016  
         _INTERRUPT_InterruptManager 0004                            printf@exp 00D7  
                          printf@val 00D3                           _INTCONbits 000B  
                         _FVRCONbits 0117               ??_INTERRUPT_Initialize 0071  
                           scale@scl 0043                             intlevel1 0000  
                   __tdiv_to_l_@exp1 0025                     __tdiv_to_l_@cntr 0024  
                      ??_ClearTicker 0071                     __tdiv_to_l_@quot 0020  
                   ___lldiv@dividend 0075                     ??_ADC_Initialize 0071  
             __size_of_SetADCChannel 001E                  __end_of_SR_FRSStart 1800  
                         _OSCCONbits 0099                             printf@ap 00D0  
                       ?__tdiv_to_l_ 0071                          _printf$1242 00CB  
                   ___lldiv@quotient 0020                   EUSART_Write@txData 0071  
                   ?_SR_FRSPowerDown 0070                  __end_of_ClearTicker 156D  
