

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Thu Aug 11 15:11:11 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	intentry,global,class=CODE,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	dabs	1,0x7E,2
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0007                     	;# 
    65  0008                     	;# 
    66  0009                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000D                     	;# 
    71  000E                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0013                     	;# 
    75  0014                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  008C                     	;# 
    88  008D                     	;# 
    89  008E                     	;# 
    90  0091                     	;# 
    91  0092                     	;# 
    92  0093                     	;# 
    93  0094                     	;# 
    94  0095                     	;# 
    95  0096                     	;# 
    96  0097                     	;# 
    97  0098                     	;# 
    98  0099                     	;# 
    99  009A                     	;# 
   100  009B                     	;# 
   101  009B                     	;# 
   102  009C                     	;# 
   103  009D                     	;# 
   104  009E                     	;# 
   105  010C                     	;# 
   106  010D                     	;# 
   107  010E                     	;# 
   108  0111                     	;# 
   109  0112                     	;# 
   110  0113                     	;# 
   111  0114                     	;# 
   112  0115                     	;# 
   113  0116                     	;# 
   114  0117                     	;# 
   115  0118                     	;# 
   116  0119                     	;# 
   117  011A                     	;# 
   118  011B                     	;# 
   119  011D                     	;# 
   120  011E                     	;# 
   121  018C                     	;# 
   122  018D                     	;# 
   123  018E                     	;# 
   124  0191                     	;# 
   125  0191                     	;# 
   126  0192                     	;# 
   127  0193                     	;# 
   128  0193                     	;# 
   129  0193                     	;# 
   130  0194                     	;# 
   131  0195                     	;# 
   132  0196                     	;# 
   133  0199                     	;# 
   134  019A                     	;# 
   135  019B                     	;# 
   136  019B                     	;# 
   137  019C                     	;# 
   138  019D                     	;# 
   139  019E                     	;# 
   140  019F                     	;# 
   141  020C                     	;# 
   142  020D                     	;# 
   143  020E                     	;# 
   144  0211                     	;# 
   145  0211                     	;# 
   146  0212                     	;# 
   147  0212                     	;# 
   148  0213                     	;# 
   149  0213                     	;# 
   150  0214                     	;# 
   151  0214                     	;# 
   152  0215                     	;# 
   153  0215                     	;# 
   154  0215                     	;# 
   155  0216                     	;# 
   156  0216                     	;# 
   157  0217                     	;# 
   158  0217                     	;# 
   159  0219                     	;# 
   160  021A                     	;# 
   161  021B                     	;# 
   162  021C                     	;# 
   163  021D                     	;# 
   164  021E                     	;# 
   165  021F                     	;# 
   166  0291                     	;# 
   167  0291                     	;# 
   168  0292                     	;# 
   169  0293                     	;# 
   170  0294                     	;# 
   171  0295                     	;# 
   172  0295                     	;# 
   173  0296                     	;# 
   174  0298                     	;# 
   175  0298                     	;# 
   176  0299                     	;# 
   177  029A                     	;# 
   178  029B                     	;# 
   179  029C                     	;# 
   180  029D                     	;# 
   181  029E                     	;# 
   182  0311                     	;# 
   183  0311                     	;# 
   184  0312                     	;# 
   185  0313                     	;# 
   186  0318                     	;# 
   187  0318                     	;# 
   188  0319                     	;# 
   189  031A                     	;# 
   190  038C                     	;# 
   191  038D                     	;# 
   192  038E                     	;# 
   193  0391                     	;# 
   194  0392                     	;# 
   195  0393                     	;# 
   196  0394                     	;# 
   197  0395                     	;# 
   198  0396                     	;# 
   199  039A                     	;# 
   200  039C                     	;# 
   201  039D                     	;# 
   202  039E                     	;# 
   203  039F                     	;# 
   204  0415                     	;# 
   205  0416                     	;# 
   206  0417                     	;# 
   207  041C                     	;# 
   208  041D                     	;# 
   209  041E                     	;# 
   210  0FE4                     	;# 
   211  0FE5                     	;# 
   212  0FE6                     	;# 
   213  0FE7                     	;# 
   214  0FE8                     	;# 
   215  0FE9                     	;# 
   216  0FEA                     	;# 
   217  0FEB                     	;# 
   218  0FED                     	;# 
   219  0FEE                     	;# 
   220  0FEF                     	;# 
   221  0000                     	;# 
   222  0001                     	;# 
   223  0002                     	;# 
   224  0003                     	;# 
   225  0004                     	;# 
   226  0005                     	;# 
   227  0006                     	;# 
   228  0007                     	;# 
   229  0008                     	;# 
   230  0009                     	;# 
   231  000A                     	;# 
   232  000B                     	;# 
   233  000C                     	;# 
   234  000D                     	;# 
   235  000E                     	;# 
   236  0011                     	;# 
   237  0012                     	;# 
   238  0013                     	;# 
   239  0014                     	;# 
   240  0015                     	;# 
   241  0016                     	;# 
   242  0016                     	;# 
   243  0017                     	;# 
   244  0018                     	;# 
   245  0019                     	;# 
   246  001A                     	;# 
   247  001B                     	;# 
   248  001C                     	;# 
   249  001E                     	;# 
   250  001F                     	;# 
   251  008C                     	;# 
   252  008D                     	;# 
   253  008E                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0094                     	;# 
   258  0095                     	;# 
   259  0096                     	;# 
   260  0097                     	;# 
   261  0098                     	;# 
   262  0099                     	;# 
   263  009A                     	;# 
   264  009B                     	;# 
   265  009B                     	;# 
   266  009C                     	;# 
   267  009D                     	;# 
   268  009E                     	;# 
   269  010C                     	;# 
   270  010D                     	;# 
   271  010E                     	;# 
   272  0111                     	;# 
   273  0112                     	;# 
   274  0113                     	;# 
   275  0114                     	;# 
   276  0115                     	;# 
   277  0116                     	;# 
   278  0117                     	;# 
   279  0118                     	;# 
   280  0119                     	;# 
   281  011A                     	;# 
   282  011B                     	;# 
   283  011D                     	;# 
   284  011E                     	;# 
   285  018C                     	;# 
   286  018D                     	;# 
   287  018E                     	;# 
   288  0191                     	;# 
   289  0191                     	;# 
   290  0192                     	;# 
   291  0193                     	;# 
   292  0193                     	;# 
   293  0193                     	;# 
   294  0194                     	;# 
   295  0195                     	;# 
   296  0196                     	;# 
   297  0199                     	;# 
   298  019A                     	;# 
   299  019B                     	;# 
   300  019B                     	;# 
   301  019C                     	;# 
   302  019D                     	;# 
   303  019E                     	;# 
   304  019F                     	;# 
   305  020C                     	;# 
   306  020D                     	;# 
   307  020E                     	;# 
   308  0211                     	;# 
   309  0211                     	;# 
   310  0212                     	;# 
   311  0212                     	;# 
   312  0213                     	;# 
   313  0213                     	;# 
   314  0214                     	;# 
   315  0214                     	;# 
   316  0215                     	;# 
   317  0215                     	;# 
   318  0215                     	;# 
   319  0216                     	;# 
   320  0216                     	;# 
   321  0217                     	;# 
   322  0217                     	;# 
   323  0219                     	;# 
   324  021A                     	;# 
   325  021B                     	;# 
   326  021C                     	;# 
   327  021D                     	;# 
   328  021E                     	;# 
   329  021F                     	;# 
   330  0291                     	;# 
   331  0291                     	;# 
   332  0292                     	;# 
   333  0293                     	;# 
   334  0294                     	;# 
   335  0295                     	;# 
   336  0295                     	;# 
   337  0296                     	;# 
   338  0298                     	;# 
   339  0298                     	;# 
   340  0299                     	;# 
   341  029A                     	;# 
   342  029B                     	;# 
   343  029C                     	;# 
   344  029D                     	;# 
   345  029E                     	;# 
   346  0311                     	;# 
   347  0311                     	;# 
   348  0312                     	;# 
   349  0313                     	;# 
   350  0318                     	;# 
   351  0318                     	;# 
   352  0319                     	;# 
   353  031A                     	;# 
   354  038C                     	;# 
   355  038D                     	;# 
   356  038E                     	;# 
   357  0391                     	;# 
   358  0392                     	;# 
   359  0393                     	;# 
   360  0394                     	;# 
   361  0395                     	;# 
   362  0396                     	;# 
   363  039A                     	;# 
   364  039C                     	;# 
   365  039D                     	;# 
   366  039E                     	;# 
   367  039F                     	;# 
   368  0415                     	;# 
   369  0416                     	;# 
   370  0417                     	;# 
   371  041C                     	;# 
   372  041D                     	;# 
   373  041E                     	;# 
   374  0FE4                     	;# 
   375  0FE5                     	;# 
   376  0FE6                     	;# 
   377  0FE7                     	;# 
   378  0FE8                     	;# 
   379  0FE9                     	;# 
   380  0FEA                     	;# 
   381  0FEB                     	;# 
   382  0FED                     	;# 
   383  0FEE                     	;# 
   384  0FEF                     	;# 
   385  0000                     	;# 
   386  0001                     	;# 
   387  0002                     	;# 
   388  0003                     	;# 
   389  0004                     	;# 
   390  0005                     	;# 
   391  0006                     	;# 
   392  0007                     	;# 
   393  0008                     	;# 
   394  0009                     	;# 
   395  000A                     	;# 
   396  000B                     	;# 
   397  000C                     	;# 
   398  000D                     	;# 
   399  000E                     	;# 
   400  0011                     	;# 
   401  0012                     	;# 
   402  0013                     	;# 
   403  0014                     	;# 
   404  0015                     	;# 
   405  0016                     	;# 
   406  0016                     	;# 
   407  0017                     	;# 
   408  0018                     	;# 
   409  0019                     	;# 
   410  001A                     	;# 
   411  001B                     	;# 
   412  001C                     	;# 
   413  001E                     	;# 
   414  001F                     	;# 
   415  008C                     	;# 
   416  008D                     	;# 
   417  008E                     	;# 
   418  0091                     	;# 
   419  0092                     	;# 
   420  0093                     	;# 
   421  0094                     	;# 
   422  0095                     	;# 
   423  0096                     	;# 
   424  0097                     	;# 
   425  0098                     	;# 
   426  0099                     	;# 
   427  009A                     	;# 
   428  009B                     	;# 
   429  009B                     	;# 
   430  009C                     	;# 
   431  009D                     	;# 
   432  009E                     	;# 
   433  010C                     	;# 
   434  010D                     	;# 
   435  010E                     	;# 
   436  0111                     	;# 
   437  0112                     	;# 
   438  0113                     	;# 
   439  0114                     	;# 
   440  0115                     	;# 
   441  0116                     	;# 
   442  0117                     	;# 
   443  0118                     	;# 
   444  0119                     	;# 
   445  011A                     	;# 
   446  011B                     	;# 
   447  011D                     	;# 
   448  011E                     	;# 
   449  018C                     	;# 
   450  018D                     	;# 
   451  018E                     	;# 
   452  0191                     	;# 
   453  0191                     	;# 
   454  0192                     	;# 
   455  0193                     	;# 
   456  0193                     	;# 
   457  0193                     	;# 
   458  0194                     	;# 
   459  0195                     	;# 
   460  0196                     	;# 
   461  0199                     	;# 
   462  019A                     	;# 
   463  019B                     	;# 
   464  019B                     	;# 
   465  019C                     	;# 
   466  019D                     	;# 
   467  019E                     	;# 
   468  019F                     	;# 
   469  020C                     	;# 
   470  020D                     	;# 
   471  020E                     	;# 
   472  0211                     	;# 
   473  0211                     	;# 
   474  0212                     	;# 
   475  0212                     	;# 
   476  0213                     	;# 
   477  0213                     	;# 
   478  0214                     	;# 
   479  0214                     	;# 
   480  0215                     	;# 
   481  0215                     	;# 
   482  0215                     	;# 
   483  0216                     	;# 
   484  0216                     	;# 
   485  0217                     	;# 
   486  0217                     	;# 
   487  0219                     	;# 
   488  021A                     	;# 
   489  021B                     	;# 
   490  021C                     	;# 
   491  021D                     	;# 
   492  021E                     	;# 
   493  021F                     	;# 
   494  0291                     	;# 
   495  0291                     	;# 
   496  0292                     	;# 
   497  0293                     	;# 
   498  0294                     	;# 
   499  0295                     	;# 
   500  0295                     	;# 
   501  0296                     	;# 
   502  0298                     	;# 
   503  0298                     	;# 
   504  0299                     	;# 
   505  029A                     	;# 
   506  029B                     	;# 
   507  029C                     	;# 
   508  029D                     	;# 
   509  029E                     	;# 
   510  0311                     	;# 
   511  0311                     	;# 
   512  0312                     	;# 
   513  0313                     	;# 
   514  0318                     	;# 
   515  0318                     	;# 
   516  0319                     	;# 
   517  031A                     	;# 
   518  038C                     	;# 
   519  038D                     	;# 
   520  038E                     	;# 
   521  0391                     	;# 
   522  0392                     	;# 
   523  0393                     	;# 
   524  0394                     	;# 
   525  0395                     	;# 
   526  0396                     	;# 
   527  039A                     	;# 
   528  039C                     	;# 
   529  039D                     	;# 
   530  039E                     	;# 
   531  039F                     	;# 
   532  0415                     	;# 
   533  0416                     	;# 
   534  0417                     	;# 
   535  041C                     	;# 
   536  041D                     	;# 
   537  041E                     	;# 
   538  0FE4                     	;# 
   539  0FE5                     	;# 
   540  0FE6                     	;# 
   541  0FE7                     	;# 
   542  0FE8                     	;# 
   543  0FE9                     	;# 
   544  0FEA                     	;# 
   545  0FEB                     	;# 
   546  0FED                     	;# 
   547  0FEE                     	;# 
   548  0FEF                     	;# 
   549  0000                     	;# 
   550  0001                     	;# 
   551  0002                     	;# 
   552  0003                     	;# 
   553  0004                     	;# 
   554  0005                     	;# 
   555  0006                     	;# 
   556  0007                     	;# 
   557  0008                     	;# 
   558  0009                     	;# 
   559  000A                     	;# 
   560  000B                     	;# 
   561  000C                     	;# 
   562  000D                     	;# 
   563  000E                     	;# 
   564  0011                     	;# 
   565  0012                     	;# 
   566  0013                     	;# 
   567  0014                     	;# 
   568  0015                     	;# 
   569  0016                     	;# 
   570  0016                     	;# 
   571  0017                     	;# 
   572  0018                     	;# 
   573  0019                     	;# 
   574  001A                     	;# 
   575  001B                     	;# 
   576  001C                     	;# 
   577  001E                     	;# 
   578  001F                     	;# 
   579  008C                     	;# 
   580  008D                     	;# 
   581  008E                     	;# 
   582  0091                     	;# 
   583  0092                     	;# 
   584  0093                     	;# 
   585  0094                     	;# 
   586  0095                     	;# 
   587  0096                     	;# 
   588  0097                     	;# 
   589  0098                     	;# 
   590  0099                     	;# 
   591  009A                     	;# 
   592  009B                     	;# 
   593  009B                     	;# 
   594  009C                     	;# 
   595  009D                     	;# 
   596  009E                     	;# 
   597  010C                     	;# 
   598  010D                     	;# 
   599  010E                     	;# 
   600  0111                     	;# 
   601  0112                     	;# 
   602  0113                     	;# 
   603  0114                     	;# 
   604  0115                     	;# 
   605  0116                     	;# 
   606  0117                     	;# 
   607  0118                     	;# 
   608  0119                     	;# 
   609  011A                     	;# 
   610  011B                     	;# 
   611  011D                     	;# 
   612  011E                     	;# 
   613  018C                     	;# 
   614  018D                     	;# 
   615  018E                     	;# 
   616  0191                     	;# 
   617  0191                     	;# 
   618  0192                     	;# 
   619  0193                     	;# 
   620  0193                     	;# 
   621  0193                     	;# 
   622  0194                     	;# 
   623  0195                     	;# 
   624  0196                     	;# 
   625  0199                     	;# 
   626  019A                     	;# 
   627  019B                     	;# 
   628  019B                     	;# 
   629  019C                     	;# 
   630  019D                     	;# 
   631  019E                     	;# 
   632  019F                     	;# 
   633  020C                     	;# 
   634  020D                     	;# 
   635  020E                     	;# 
   636  0211                     	;# 
   637  0211                     	;# 
   638  0212                     	;# 
   639  0212                     	;# 
   640  0213                     	;# 
   641  0213                     	;# 
   642  0214                     	;# 
   643  0214                     	;# 
   644  0215                     	;# 
   645  0215                     	;# 
   646  0215                     	;# 
   647  0216                     	;# 
   648  0216                     	;# 
   649  0217                     	;# 
   650  0217                     	;# 
   651  0219                     	;# 
   652  021A                     	;# 
   653  021B                     	;# 
   654  021C                     	;# 
   655  021D                     	;# 
   656  021E                     	;# 
   657  021F                     	;# 
   658  0291                     	;# 
   659  0291                     	;# 
   660  0292                     	;# 
   661  0293                     	;# 
   662  0294                     	;# 
   663  0295                     	;# 
   664  0295                     	;# 
   665  0296                     	;# 
   666  0298                     	;# 
   667  0298                     	;# 
   668  0299                     	;# 
   669  029A                     	;# 
   670  029B                     	;# 
   671  029C                     	;# 
   672  029D                     	;# 
   673  029E                     	;# 
   674  0311                     	;# 
   675  0311                     	;# 
   676  0312                     	;# 
   677  0313                     	;# 
   678  0318                     	;# 
   679  0318                     	;# 
   680  0319                     	;# 
   681  031A                     	;# 
   682  038C                     	;# 
   683  038D                     	;# 
   684  038E                     	;# 
   685  0391                     	;# 
   686  0392                     	;# 
   687  0393                     	;# 
   688  0394                     	;# 
   689  0395                     	;# 
   690  0396                     	;# 
   691  039A                     	;# 
   692  039C                     	;# 
   693  039D                     	;# 
   694  039E                     	;# 
   695  039F                     	;# 
   696  0415                     	;# 
   697  0416                     	;# 
   698  0417                     	;# 
   699  041C                     	;# 
   700  041D                     	;# 
   701  041E                     	;# 
   702  0FE4                     	;# 
   703  0FE5                     	;# 
   704  0FE6                     	;# 
   705  0FE7                     	;# 
   706  0FE8                     	;# 
   707  0FE9                     	;# 
   708  0FEA                     	;# 
   709  0FEB                     	;# 
   710  0FED                     	;# 
   711  0FEE                     	;# 
   712  0FEF                     	;# 
   713  0000                     	;# 
   714  0001                     	;# 
   715  0002                     	;# 
   716  0003                     	;# 
   717  0004                     	;# 
   718  0005                     	;# 
   719  0006                     	;# 
   720  0007                     	;# 
   721  0008                     	;# 
   722  0009                     	;# 
   723  000A                     	;# 
   724  000B                     	;# 
   725  000C                     	;# 
   726  000D                     	;# 
   727  000E                     	;# 
   728  0011                     	;# 
   729  0012                     	;# 
   730  0013                     	;# 
   731  0014                     	;# 
   732  0015                     	;# 
   733  0016                     	;# 
   734  0016                     	;# 
   735  0017                     	;# 
   736  0018                     	;# 
   737  0019                     	;# 
   738  001A                     	;# 
   739  001B                     	;# 
   740  001C                     	;# 
   741  001E                     	;# 
   742  001F                     	;# 
   743  008C                     	;# 
   744  008D                     	;# 
   745  008E                     	;# 
   746  0091                     	;# 
   747  0092                     	;# 
   748  0093                     	;# 
   749  0094                     	;# 
   750  0095                     	;# 
   751  0096                     	;# 
   752  0097                     	;# 
   753  0098                     	;# 
   754  0099                     	;# 
   755  009A                     	;# 
   756  009B                     	;# 
   757  009B                     	;# 
   758  009C                     	;# 
   759  009D                     	;# 
   760  009E                     	;# 
   761  010C                     	;# 
   762  010D                     	;# 
   763  010E                     	;# 
   764  0111                     	;# 
   765  0112                     	;# 
   766  0113                     	;# 
   767  0114                     	;# 
   768  0115                     	;# 
   769  0116                     	;# 
   770  0117                     	;# 
   771  0118                     	;# 
   772  0119                     	;# 
   773  011A                     	;# 
   774  011B                     	;# 
   775  011D                     	;# 
   776  011E                     	;# 
   777  018C                     	;# 
   778  018D                     	;# 
   779  018E                     	;# 
   780  0191                     	;# 
   781  0191                     	;# 
   782  0192                     	;# 
   783  0193                     	;# 
   784  0193                     	;# 
   785  0193                     	;# 
   786  0194                     	;# 
   787  0195                     	;# 
   788  0196                     	;# 
   789  0199                     	;# 
   790  019A                     	;# 
   791  019B                     	;# 
   792  019B                     	;# 
   793  019C                     	;# 
   794  019D                     	;# 
   795  019E                     	;# 
   796  019F                     	;# 
   797  020C                     	;# 
   798  020D                     	;# 
   799  020E                     	;# 
   800  0211                     	;# 
   801  0211                     	;# 
   802  0212                     	;# 
   803  0212                     	;# 
   804  0213                     	;# 
   805  0213                     	;# 
   806  0214                     	;# 
   807  0214                     	;# 
   808  0215                     	;# 
   809  0215                     	;# 
   810  0215                     	;# 
   811  0216                     	;# 
   812  0216                     	;# 
   813  0217                     	;# 
   814  0217                     	;# 
   815  0219                     	;# 
   816  021A                     	;# 
   817  021B                     	;# 
   818  021C                     	;# 
   819  021D                     	;# 
   820  021E                     	;# 
   821  021F                     	;# 
   822  0291                     	;# 
   823  0291                     	;# 
   824  0292                     	;# 
   825  0293                     	;# 
   826  0294                     	;# 
   827  0295                     	;# 
   828  0295                     	;# 
   829  0296                     	;# 
   830  0298                     	;# 
   831  0298                     	;# 
   832  0299                     	;# 
   833  029A                     	;# 
   834  029B                     	;# 
   835  029C                     	;# 
   836  029D                     	;# 
   837  029E                     	;# 
   838  0311                     	;# 
   839  0311                     	;# 
   840  0312                     	;# 
   841  0313                     	;# 
   842  0318                     	;# 
   843  0318                     	;# 
   844  0319                     	;# 
   845  031A                     	;# 
   846  038C                     	;# 
   847  038D                     	;# 
   848  038E                     	;# 
   849  0391                     	;# 
   850  0392                     	;# 
   851  0393                     	;# 
   852  0394                     	;# 
   853  0395                     	;# 
   854  0396                     	;# 
   855  039A                     	;# 
   856  039C                     	;# 
   857  039D                     	;# 
   858  039E                     	;# 
   859  039F                     	;# 
   860  0415                     	;# 
   861  0416                     	;# 
   862  0417                     	;# 
   863  041C                     	;# 
   864  041D                     	;# 
   865  041E                     	;# 
   866  0FE4                     	;# 
   867  0FE5                     	;# 
   868  0FE6                     	;# 
   869  0FE7                     	;# 
   870  0FE8                     	;# 
   871  0FE9                     	;# 
   872  0FEA                     	;# 
   873  0FEB                     	;# 
   874  0FED                     	;# 
   875  0FEE                     	;# 
   876  0FEF                     	;# 
   877  0000                     	;# 
   878  0001                     	;# 
   879  0002                     	;# 
   880  0003                     	;# 
   881  0004                     	;# 
   882  0005                     	;# 
   883  0006                     	;# 
   884  0007                     	;# 
   885  0008                     	;# 
   886  0009                     	;# 
   887  000A                     	;# 
   888  000B                     	;# 
   889  000C                     	;# 
   890  000D                     	;# 
   891  000E                     	;# 
   892  0011                     	;# 
   893  0012                     	;# 
   894  0013                     	;# 
   895  0014                     	;# 
   896  0015                     	;# 
   897  0016                     	;# 
   898  0016                     	;# 
   899  0017                     	;# 
   900  0018                     	;# 
   901  0019                     	;# 
   902  001A                     	;# 
   903  001B                     	;# 
   904  001C                     	;# 
   905  001E                     	;# 
   906  001F                     	;# 
   907  008C                     	;# 
   908  008D                     	;# 
   909  008E                     	;# 
   910  0091                     	;# 
   911  0092                     	;# 
   912  0093                     	;# 
   913  0094                     	;# 
   914  0095                     	;# 
   915  0096                     	;# 
   916  0097                     	;# 
   917  0098                     	;# 
   918  0099                     	;# 
   919  009A                     	;# 
   920  009B                     	;# 
   921  009B                     	;# 
   922  009C                     	;# 
   923  009D                     	;# 
   924  009E                     	;# 
   925  010C                     	;# 
   926  010D                     	;# 
   927  010E                     	;# 
   928  0111                     	;# 
   929  0112                     	;# 
   930  0113                     	;# 
   931  0114                     	;# 
   932  0115                     	;# 
   933  0116                     	;# 
   934  0117                     	;# 
   935  0118                     	;# 
   936  0119                     	;# 
   937  011A                     	;# 
   938  011B                     	;# 
   939  011D                     	;# 
   940  011E                     	;# 
   941  018C                     	;# 
   942  018D                     	;# 
   943  018E                     	;# 
   944  0191                     	;# 
   945  0191                     	;# 
   946  0192                     	;# 
   947  0193                     	;# 
   948  0193                     	;# 
   949  0193                     	;# 
   950  0194                     	;# 
   951  0195                     	;# 
   952  0196                     	;# 
   953  0199                     	;# 
   954  019A                     	;# 
   955  019B                     	;# 
   956  019B                     	;# 
   957  019C                     	;# 
   958  019D                     	;# 
   959  019E                     	;# 
   960  019F                     	;# 
   961  020C                     	;# 
   962  020D                     	;# 
   963  020E                     	;# 
   964  0211                     	;# 
   965  0211                     	;# 
   966  0212                     	;# 
   967  0212                     	;# 
   968  0213                     	;# 
   969  0213                     	;# 
   970  0214                     	;# 
   971  0214                     	;# 
   972  0215                     	;# 
   973  0215                     	;# 
   974  0215                     	;# 
   975  0216                     	;# 
   976  0216                     	;# 
   977  0217                     	;# 
   978  0217                     	;# 
   979  0219                     	;# 
   980  021A                     	;# 
   981  021B                     	;# 
   982  021C                     	;# 
   983  021D                     	;# 
   984  021E                     	;# 
   985  021F                     	;# 
   986  0291                     	;# 
   987  0291                     	;# 
   988  0292                     	;# 
   989  0293                     	;# 
   990  0294                     	;# 
   991  0295                     	;# 
   992  0295                     	;# 
   993  0296                     	;# 
   994  0298                     	;# 
   995  0298                     	;# 
   996  0299                     	;# 
   997  029A                     	;# 
   998  029B                     	;# 
   999  029C                     	;# 
  1000  029D                     	;# 
  1001  029E                     	;# 
  1002  0311                     	;# 
  1003  0311                     	;# 
  1004  0312                     	;# 
  1005  0313                     	;# 
  1006  0318                     	;# 
  1007  0318                     	;# 
  1008  0319                     	;# 
  1009  031A                     	;# 
  1010  038C                     	;# 
  1011  038D                     	;# 
  1012  038E                     	;# 
  1013  0391                     	;# 
  1014  0392                     	;# 
  1015  0393                     	;# 
  1016  0394                     	;# 
  1017  0395                     	;# 
  1018  0396                     	;# 
  1019  039A                     	;# 
  1020  039C                     	;# 
  1021  039D                     	;# 
  1022  039E                     	;# 
  1023  039F                     	;# 
  1024  0415                     	;# 
  1025  0416                     	;# 
  1026  0417                     	;# 
  1027  041C                     	;# 
  1028  041D                     	;# 
  1029  041E                     	;# 
  1030  0FE4                     	;# 
  1031  0FE5                     	;# 
  1032  0FE6                     	;# 
  1033  0FE7                     	;# 
  1034  0FE8                     	;# 
  1035  0FE9                     	;# 
  1036  0FEA                     	;# 
  1037  0FEB                     	;# 
  1038  0FED                     	;# 
  1039  0FEE                     	;# 
  1040  0FEF                     	;# 
  1041  0000                     	;# 
  1042  0001                     	;# 
  1043  0002                     	;# 
  1044  0003                     	;# 
  1045  0004                     	;# 
  1046  0005                     	;# 
  1047  0006                     	;# 
  1048  0007                     	;# 
  1049  0008                     	;# 
  1050  0009                     	;# 
  1051  000A                     	;# 
  1052  000B                     	;# 
  1053  000C                     	;# 
  1054  000D                     	;# 
  1055  000E                     	;# 
  1056  0011                     	;# 
  1057  0012                     	;# 
  1058  0013                     	;# 
  1059  0014                     	;# 
  1060  0015                     	;# 
  1061  0016                     	;# 
  1062  0016                     	;# 
  1063  0017                     	;# 
  1064  0018                     	;# 
  1065  0019                     	;# 
  1066  001A                     	;# 
  1067  001B                     	;# 
  1068  001C                     	;# 
  1069  001E                     	;# 
  1070  001F                     	;# 
  1071  008C                     	;# 
  1072  008D                     	;# 
  1073  008E                     	;# 
  1074  0091                     	;# 
  1075  0092                     	;# 
  1076  0093                     	;# 
  1077  0094                     	;# 
  1078  0095                     	;# 
  1079  0096                     	;# 
  1080  0097                     	;# 
  1081  0098                     	;# 
  1082  0099                     	;# 
  1083  009A                     	;# 
  1084  009B                     	;# 
  1085  009B                     	;# 
  1086  009C                     	;# 
  1087  009D                     	;# 
  1088  009E                     	;# 
  1089  010C                     	;# 
  1090  010D                     	;# 
  1091  010E                     	;# 
  1092  0111                     	;# 
  1093  0112                     	;# 
  1094  0113                     	;# 
  1095  0114                     	;# 
  1096  0115                     	;# 
  1097  0116                     	;# 
  1098  0117                     	;# 
  1099  0118                     	;# 
  1100  0119                     	;# 
  1101  011A                     	;# 
  1102  011B                     	;# 
  1103  011D                     	;# 
  1104  011E                     	;# 
  1105  018C                     	;# 
  1106  018D                     	;# 
  1107  018E                     	;# 
  1108  0191                     	;# 
  1109  0191                     	;# 
  1110  0192                     	;# 
  1111  0193                     	;# 
  1112  0193                     	;# 
  1113  0193                     	;# 
  1114  0194                     	;# 
  1115  0195                     	;# 
  1116  0196                     	;# 
  1117  0199                     	;# 
  1118  019A                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019C                     	;# 
  1122  019D                     	;# 
  1123  019E                     	;# 
  1124  019F                     	;# 
  1125  020C                     	;# 
  1126  020D                     	;# 
  1127  020E                     	;# 
  1128  0211                     	;# 
  1129  0211                     	;# 
  1130  0212                     	;# 
  1131  0212                     	;# 
  1132  0213                     	;# 
  1133  0213                     	;# 
  1134  0214                     	;# 
  1135  0214                     	;# 
  1136  0215                     	;# 
  1137  0215                     	;# 
  1138  0215                     	;# 
  1139  0216                     	;# 
  1140  0216                     	;# 
  1141  0217                     	;# 
  1142  0217                     	;# 
  1143  0219                     	;# 
  1144  021A                     	;# 
  1145  021B                     	;# 
  1146  021C                     	;# 
  1147  021D                     	;# 
  1148  021E                     	;# 
  1149  021F                     	;# 
  1150  0291                     	;# 
  1151  0291                     	;# 
  1152  0292                     	;# 
  1153  0293                     	;# 
  1154  0294                     	;# 
  1155  0295                     	;# 
  1156  0295                     	;# 
  1157  0296                     	;# 
  1158  0298                     	;# 
  1159  0298                     	;# 
  1160  0299                     	;# 
  1161  029A                     	;# 
  1162  029B                     	;# 
  1163  029C                     	;# 
  1164  029D                     	;# 
  1165  029E                     	;# 
  1166  0311                     	;# 
  1167  0311                     	;# 
  1168  0312                     	;# 
  1169  0313                     	;# 
  1170  0318                     	;# 
  1171  0318                     	;# 
  1172  0319                     	;# 
  1173  031A                     	;# 
  1174  038C                     	;# 
  1175  038D                     	;# 
  1176  038E                     	;# 
  1177  0391                     	;# 
  1178  0392                     	;# 
  1179  0393                     	;# 
  1180  0394                     	;# 
  1181  0395                     	;# 
  1182  0396                     	;# 
  1183  039A                     	;# 
  1184  039C                     	;# 
  1185  039D                     	;# 
  1186  039E                     	;# 
  1187  039F                     	;# 
  1188  0415                     	;# 
  1189  0416                     	;# 
  1190  0417                     	;# 
  1191  041C                     	;# 
  1192  041D                     	;# 
  1193  041E                     	;# 
  1194  0FE4                     	;# 
  1195  0FE5                     	;# 
  1196  0FE6                     	;# 
  1197  0FE7                     	;# 
  1198  0FE8                     	;# 
  1199  0FE9                     	;# 
  1200  0FEA                     	;# 
  1201  0FEB                     	;# 
  1202  0FED                     	;# 
  1203  0FEE                     	;# 
  1204  0FEF                     	;# 
  1205                           
  1206                           	psect	idataBANK0
  1207  0003                     __pidataBANK0:	
  1208                           
  1209                           ;initializer for _Transmit_stall
  1210  0003  3401               	retlw	1
  1211                           
  1212                           	psect	stringtext
  1213  1000                     __pstringtext:	
  1214  1000                     _dpowers:	
  1215  1000  3401               	retlw	1
  1216  1001  3400               	retlw	0
  1217  1002  3400               	retlw	0
  1218  1003  3400               	retlw	0
  1219  1004  340A               	retlw	10
  1220  1005  3400               	retlw	0
  1221  1006  3400               	retlw	0
  1222  1007  3400               	retlw	0
  1223  1008  3464               	retlw	100
  1224  1009  3400               	retlw	0
  1225  100A  3400               	retlw	0
  1226  100B  3400               	retlw	0
  1227  100C  34E8               	retlw	232
  1228  100D  3403               	retlw	3
  1229  100E  3400               	retlw	0
  1230  100F  3400               	retlw	0
  1231  1010  3410               	retlw	16
  1232  1011  3427               	retlw	39
  1233  1012  3400               	retlw	0
  1234  1013  3400               	retlw	0
  1235  1014  34A0               	retlw	160
  1236  1015  3486               	retlw	134
  1237  1016  3401               	retlw	1
  1238  1017  3400               	retlw	0
  1239  1018  3440               	retlw	64
  1240  1019  3442               	retlw	66
  1241  101A  340F               	retlw	15
  1242  101B  3400               	retlw	0
  1243  101C  3480               	retlw	128
  1244  101D  3496               	retlw	150
  1245  101E  3498               	retlw	152
  1246  101F  3400               	retlw	0
  1247  1020  3400               	retlw	0
  1248  1021  34E1               	retlw	225
  1249  1022  34F5               	retlw	245
  1250  1023  3405               	retlw	5
  1251  1024  3400               	retlw	0
  1252  1025  34CA               	retlw	202
  1253  1026  349A               	retlw	154
  1254  1027  343B               	retlw	59
  1255  1028                     __end_of_dpowers:	
  1256  1028                     __npowers_:	
  1257  1028  3400               	retlw	0
  1258  1029  3480               	retlw	128
  1259  102A  343F               	retlw	63
  1260  102B  34CD               	retlw	205
  1261  102C  34CC               	retlw	204
  1262  102D  343D               	retlw	61
  1263  102E  34D7               	retlw	215
  1264  102F  3423               	retlw	35
  1265  1030  343C               	retlw	60
  1266  1031  3412               	retlw	18
  1267  1032  3483               	retlw	131
  1268  1033  343A               	retlw	58
  1269  1034  34B7               	retlw	183
  1270  1035  34D1               	retlw	209
  1271  1036  3438               	retlw	56
  1272  1037  34C6               	retlw	198
  1273  1038  3427               	retlw	39
  1274  1039  3437               	retlw	55
  1275  103A  3438               	retlw	56
  1276  103B  3486               	retlw	134
  1277  103C  3435               	retlw	53
  1278  103D  34C0               	retlw	192
  1279  103E  34D6               	retlw	214
  1280  103F  3433               	retlw	51
  1281  1040  34CC               	retlw	204
  1282  1041  342B               	retlw	43
  1283  1042  3432               	retlw	50
  1284  1043  3470               	retlw	112
  1285  1044  3489               	retlw	137
  1286  1045  3430               	retlw	48
  1287  1046  34E7               	retlw	231
  1288  1047  34DB               	retlw	219
  1289  1048  342E               	retlw	46
  1290  1049  34E5               	retlw	229
  1291  104A  343C               	retlw	60
  1292  104B  341E               	retlw	30
  1293  104C  3442               	retlw	66
  1294  104D  34A2               	retlw	162
  1295  104E  340D               	retlw	13
  1296  104F                     __end_of__npowers_:	
  1297  104F                     __powers_:	
  1298  104F  3400               	retlw	0
  1299  1050  3480               	retlw	128
  1300  1051  343F               	retlw	63
  1301  1052  3400               	retlw	0
  1302  1053  3420               	retlw	32
  1303  1054  3441               	retlw	65
  1304  1055  3400               	retlw	0
  1305  1056  34C8               	retlw	200
  1306  1057  3442               	retlw	66
  1307  1058  3400               	retlw	0
  1308  1059  347A               	retlw	122
  1309  105A  3444               	retlw	68
  1310  105B  3440               	retlw	64
  1311  105C  341C               	retlw	28
  1312  105D  3446               	retlw	70
  1313  105E  3450               	retlw	80
  1314  105F  34C3               	retlw	195
  1315  1060  3447               	retlw	71
  1316  1061  3424               	retlw	36
  1317  1062  3474               	retlw	116
  1318  1063  3449               	retlw	73
  1319  1064  3497               	retlw	151
  1320  1065  3418               	retlw	24
  1321  1066  344B               	retlw	75
  1322  1067  34BC               	retlw	188
  1323  1068  34BE               	retlw	190
  1324  1069  344C               	retlw	76
  1325  106A  346B               	retlw	107
  1326  106B  346E               	retlw	110
  1327  106C  344E               	retlw	78
  1328  106D  3403               	retlw	3
  1329  106E  3415               	retlw	21
  1330  106F  3450               	retlw	80
  1331  1070  3479               	retlw	121
  1332  1071  34AD               	retlw	173
  1333  1072  3460               	retlw	96
  1334  1073  34F3               	retlw	243
  1335  1074  3449               	retlw	73
  1336  1075  3471               	retlw	113
  1337  1076                     __end_of__powers_:	
  1338  000B                     _INTCON	set	11
  1339  000B                     _INTCONbits	set	11
  1340  0011                     _PIR1bits	set	17
  1341  000C                     _PORTAbits	set	12
  1342  000E                     _PORTCbits	set	14
  1343  001B                     _PR2	set	27
  1344  001C                     _T2CON	set	28
  1345  001C                     _T2CONbits	set	28
  1346  001A                     _TMR2	set	26
  1347  009D                     _ADCON0bits	set	157
  1348  009E                     _ADCON1bits	set	158
  1349  009B                     _ADRESL	set	155
  1350  0099                     _OSCCONbits	set	153
  1351  0091                     _PIE1bits	set	145
  1352  008C                     _TRISAbits	set	140
  1353  008E                     _TRISCbits	set	142
  1354  0117                     _FVRCONbits	set	279
  1355  019B                     _SPBRG	set	411
  1356  018C                     _ANSELAbits	set	396
  1357  018E                     _ANSELCbits	set	398
  1358  0199                     _RCREG	set	409
  1359  019D                     _RCSTA	set	413
  1360  019D                     _RCSTAbits	set	413
  1361  019A                     _TXREG	set	410
  1362  019E                     _TXSTA	set	414
  1363  1076                     STR_3:	
  1364  1076  3441               	retlw	65	;'A'
  1365  1077  3454               	retlw	84	;'T'
  1366  1078  342B               	retlw	43	;'+'
  1367  1079  3444               	retlw	68	;'D'
  1368  107A  344D               	retlw	77	;'M'
  1369  107B  344F               	retlw	79	;'O'
  1370  107C  3453               	retlw	83	;'S'
  1371  107D  3445               	retlw	69	;'E'
  1372  107E  3454               	retlw	84	;'T'
  1373  107F  3447               	retlw	71	;'G'
  1374  1080  3452               	retlw	82	;'R'
  1375  1081  344F               	retlw	79	;'O'
  1376  1082  3455               	retlw	85	;'U'
  1377  1083  3450               	retlw	80	;'P'
  1378  1084  343D               	retlw	61	;'='
  1379  1085  3425               	retlw	37	;'%'
  1380  1086  3464               	retlw	100	;'d'
  1381  1087  342C               	retlw	44	;','
  1382  1088  3425               	retlw	37	;'%'
  1383  1089  3466               	retlw	102	;'f'
  1384  108A  342C               	retlw	44	;','
  1385  108B  3425               	retlw	37	;'%'
  1386  108C  3466               	retlw	102	;'f'
  1387  108D  342C               	retlw	44	;','
  1388  108E  3425               	retlw	37	;'%'
  1389  108F  3464               	retlw	100	;'d'
  1390  1090  342C               	retlw	44	;','
  1391  1091  3425               	retlw	37	;'%'
  1392  1092  3464               	retlw	100	;'d'
  1393  1093  342C               	retlw	44	;','
  1394  1094  3425               	retlw	37	;'%'
  1395  1095  3464               	retlw	100	;'d'
  1396  1096  342C               	retlw	44	;','
  1397  1097  3425               	retlw	37	;'%'
  1398  1098  3464               	retlw	100	;'d'
  1399  1099  3400               	retlw	0
  1400  109A                     STR_7:	
  1401  109A  3441               	retlw	65	;'A'
  1402  109B  3454               	retlw	84	;'T'
  1403  109C  342B               	retlw	43	;'+'
  1404  109D  3444               	retlw	68	;'D'
  1405  109E  344D               	retlw	77	;'M'
  1406  109F  344F               	retlw	79	;'O'
  1407  10A0  3453               	retlw	83	;'S'
  1408  10A1  3445               	retlw	69	;'E'
  1409  10A2  3454               	retlw	84	;'T'
  1410  10A3  344D               	retlw	77	;'M'
  1411  10A4  3449               	retlw	73	;'I'
  1412  10A5  3443               	retlw	67	;'C'
  1413  10A6  343D               	retlw	61	;'='
  1414  10A7  3425               	retlw	37	;'%'
  1415  10A8  3463               	retlw	99	;'c'
  1416  10A9  342C               	retlw	44	;','
  1417  10AA  3425               	retlw	37	;'%'
  1418  10AB  3463               	retlw	99	;'c'
  1419  10AC  342C               	retlw	44	;','
  1420  10AD  3425               	retlw	37	;'%'
  1421  10AE  3463               	retlw	99	;'c'
  1422  10AF  3400               	retlw	0
  1423  10B0                     STR_4:	
  1424  10B0  3441               	retlw	65	;'A'
  1425  10B1  3454               	retlw	84	;'T'
  1426  10B2  342B               	retlw	43	;'+'
  1427  10B3  3444               	retlw	68	;'D'
  1428  10B4  344D               	retlw	77	;'M'
  1429  10B5  344F               	retlw	79	;'O'
  1430  10B6  3441               	retlw	65	;'A'
  1431  10B7  3455               	retlw	85	;'U'
  1432  10B8  3454               	retlw	84	;'T'
  1433  10B9  344F               	retlw	79	;'O'
  1434  10BA  3450               	retlw	80	;'P'
  1435  10BB  344F               	retlw	79	;'O'
  1436  10BC  3457               	retlw	87	;'W'
  1437  10BD  3443               	retlw	67	;'C'
  1438  10BE  344F               	retlw	79	;'O'
  1439  10BF  344E               	retlw	78	;'N'
  1440  10C0  3454               	retlw	84	;'T'
  1441  10C1  3452               	retlw	82	;'R'
  1442  10C2  343D               	retlw	61	;'='
  1443  10C3  3425               	retlw	37	;'%'
  1444  10C4  3463               	retlw	99	;'c'
  1445  10C5  3400               	retlw	0
  1446  10C6                     STR_5:	
  1447  10C6  3441               	retlw	65	;'A'
  1448  10C7  3454               	retlw	84	;'T'
  1449  10C8  342B               	retlw	43	;'+'
  1450  10C9  3444               	retlw	68	;'D'
  1451  10CA  344D               	retlw	77	;'M'
  1452  10CB  344F               	retlw	79	;'O'
  1453  10CC  3453               	retlw	83	;'S'
  1454  10CD  3445               	retlw	69	;'E'
  1455  10CE  3454               	retlw	84	;'T'
  1456  10CF  3456               	retlw	86	;'V'
  1457  10D0  344F               	retlw	79	;'O'
  1458  10D1  344C               	retlw	76	;'L'
  1459  10D2  3455               	retlw	85	;'U'
  1460  10D3  344D               	retlw	77	;'M'
  1461  10D4  3445               	retlw	69	;'E'
  1462  10D5  343D               	retlw	61	;'='
  1463  10D6  3425               	retlw	37	;'%'
  1464  10D7  3463               	retlw	99	;'c'
  1465  10D8  3400               	retlw	0
  1466  10D9                     STR_2:	
  1467  10D9  3441               	retlw	65	;'A'
  1468  10DA  3454               	retlw	84	;'T'
  1469  10DB  342B               	retlw	43	;'+'
  1470  10DC  3444               	retlw	68	;'D'
  1471  10DD  344D               	retlw	77	;'M'
  1472  10DE  344F               	retlw	79	;'O'
  1473  10DF  3443               	retlw	67	;'C'
  1474  10E0  344F               	retlw	79	;'O'
  1475  10E1  344E               	retlw	78	;'N'
  1476  10E2  344E               	retlw	78	;'N'
  1477  10E3  3445               	retlw	69	;'E'
  1478  10E4  3443               	retlw	67	;'C'
  1479  10E5  3454               	retlw	84	;'T'
  1480  10E6  3400               	retlw	0
  1481  10E7                     STR_1:	
  1482  10E7  3453               	retlw	83	;'S'
  1483  10E8  3474               	retlw	116	;'t'
  1484  10E9  3461               	retlw	97	;'a'
  1485  10EA  3472               	retlw	114	;'r'
  1486  10EB  3474               	retlw	116	;'t'
  1487  10EC  3400               	retlw	0
  1488  10C6                     
  1489                           ; #config settings
  1490  0000                     
  1491                           	psect	cinit
  1492  002A                     start_initialization:	
  1493  002A                     __initialization:	
  1494                           
  1495                           ; Clear objects allocated to BANK0
  1496  002A  01ED               	clrf	__pbssBANK0& (0+127)
  1497  002B  01EE               	clrf	(__pbssBANK0+1)& (0+127)
  1498                           
  1499                           ; Clear objects allocated to BANK1
  1500  002C  30C8               	movlw	low __pbssBANK1
  1501  002D  0084               	movwf	4
  1502  002E  3000               	movlw	high __pbssBANK1
  1503  002F  0085               	movwf	5
  1504  0030  3020               	movlw	32
  1505  0031  3195  2556  3180   	fcall	clear_ram0
  1506                           
  1507                           ; Clear objects allocated to BANK2
  1508  0034  3020               	movlw	low __pbssBANK2
  1509  0035  0084               	movwf	4
  1510  0036  3001               	movlw	high __pbssBANK2
  1511  0037  0085               	movwf	5
  1512  0038  3034               	movlw	52
  1513  0039  3195  2556  3180   	fcall	clear_ram0
  1514                           
  1515                           ; Initialize objects allocated to BANK0
  1516  003C  3180  2003         	fcall	__pidataBANK0	;fetch initializer
  1517  003E  00EF               	movwf	__pdataBANK0& (0+127)
  1518  003F                     end_of_initialization:	
  1519                           ;End of C runtime variable initialization code
  1520                           
  1521  003F                     __end_of__initialization:	
  1522  003F  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1523  0040  0020               	movlb	0
  1524  0041  3196  2E0C         	ljmp	_main	;jump to C main() function
  1525                           
  1526                           	psect	bssBANK0
  1527  006D                     __pbssBANK0:	
  1528  006D                     _Talking:	
  1529  006D                     	ds	1
  1530  006E                     _eusart1TxHead:	
  1531  006E                     	ds	1
  1532                           
  1533                           	psect	dataBANK0
  1534  006F                     __pdataBANK0:	
  1535  006F                     _Transmit_stall:	
  1536  006F                     	ds	1
  1537                           
  1538                           	psect	bssBANK1
  1539  00C8                     __pbssBANK1:	
  1540  00C8                     _eusart1RxBuffer:	
  1541  00C8                     	ds	8
  1542  00D0                     _eusart1TxBuffer:	
  1543  00D0                     	ds	8
  1544  00D8                     _Battery:	
  1545  00D8                     	ds	3
  1546  00DB                     _count:	
  1547  00DB                     	ds	2
  1548  00DD                     _ticker:	
  1549  00DD                     	ds	2
  1550  00DF                     _time:	
  1551  00DF                     	ds	2
  1552  00E1                     _Mode:	
  1553  00E1                     	ds	1
  1554  00E2                     _Shutdown:	
  1555  00E2                     	ds	1
  1556  00E3                     _eusart1RxCount:	
  1557  00E3                     	ds	1
  1558  00E4                     _eusart1RxHead:	
  1559  00E4                     	ds	1
  1560  00E5                     _eusart1RxTail:	
  1561  00E5                     	ds	1
  1562  00E6                     _eusart1TxBufferRemaining:	
  1563  00E6                     	ds	1
  1564  00E7                     _eusart1TxTail:	
  1565  00E7                     	ds	1
  1566                           
  1567                           	psect	bssBANK2
  1568  0120                     __pbssBANK2:	
  1569  0120                     _input_buffer:	
  1570  0120                     	ds	26
  1571  013A                     _output_buffer:	
  1572  013A                     	ds	26
  1573                           
  1574                           	psect	clrtext
  1575  1556                     clear_ram0:	
  1576                           ;	Called with FSR0 containing the base address, and
  1577                           ;	WREG with the size to clear
  1578                           
  1579  1556  0064               	clrwdt	;clear the watchdog before getting into this loop
  1580  1557                     clrloop0:	
  1581  1557  0180               	clrf	0	;clear RAM location pointed to by FSR
  1582  1558  3101               	addfsr 0,1
  1583  1559  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1584  155A  2D57               	goto	clrloop0	;have we reached the end yet?
  1585  155B  3400               	retlw	0	;all done for this memory range, return
  1586                           
  1587                           	psect	cstackBANK1
  1588  00A0                     __pcstackBANK1:	
  1589  00A0                     ?_printf:	
  1590  00A0                     printf@f:	
  1591                           ; 2 bytes @ 0x0
  1592                           
  1593                           
  1594                           ; 2 bytes @ 0x0
  1595  00A0                     	ds	18
  1596  00B2                     _printf$1315:	
  1597                           
  1598                           ; 3 bytes @ 0x12
  1599  00B2                     	ds	3
  1600  00B5                     printf@flag:	
  1601                           
  1602                           ; 2 bytes @ 0x15
  1603  00B5                     	ds	2
  1604  00B7                     printf@ap:	
  1605                           
  1606                           ; 1 bytes @ 0x17
  1607  00B7                     	ds	1
  1608  00B8                     printf@prec:	
  1609                           
  1610                           ; 2 bytes @ 0x18
  1611  00B8                     	ds	2
  1612  00BA                     printf@val:	
  1613                           
  1614                           ; 4 bytes @ 0x1A
  1615  00BA                     	ds	4
  1616  00BE                     printf@exp:	
  1617                           
  1618                           ; 2 bytes @ 0x1E
  1619  00BE                     	ds	2
  1620  00C0                     printf@tmpval:	
  1621                           
  1622                           ; 4 bytes @ 0x20
  1623  00C0                     	ds	4
  1624  00C4                     printf@fval:	
  1625                           
  1626                           ; 3 bytes @ 0x24
  1627  00C4                     	ds	3
  1628  00C7                     printf@c:	
  1629                           
  1630                           ; 1 bytes @ 0x27
  1631  00C7                     	ds	1
  1632                           
  1633                           	psect	cstackCOMMON
  1634  0070                     __pcstackCOMMON:	
  1635  0070                     ?_Start:	
  1636  0070                     ?_LEDOff:	
  1637                           ; 1 bytes @ 0x0
  1638                           
  1639  0070                     ?_ADC_Initialize:	
  1640                           ; 1 bytes @ 0x0
  1641                           
  1642  0070                     ?_EUSART1_Initialize:	
  1643                           ; 1 bytes @ 0x0
  1644                           
  1645  0070                     ?_INTERRUPT_Initialize:	
  1646                           ; 1 bytes @ 0x0
  1647                           
  1648  0070                     ?_TMR2_Initialize:	
  1649                           ; 1 bytes @ 0x0
  1650                           
  1651  0070                     ?_TMR2_ISR:	
  1652                           ; 1 bytes @ 0x0
  1653                           
  1654  0070                     ??_TMR2_ISR:	
  1655                           ; 1 bytes @ 0x0
  1656                           
  1657  0070                     ?_EUSART1_Receive_ISR:	
  1658                           ; 1 bytes @ 0x0
  1659                           
  1660  0070                     ?_EUSART1_Transmit_ISR:	
  1661                           ; 1 bytes @ 0x0
  1662                           
  1663  0070                     ?_UART_buff_init:	
  1664                           ; 1 bytes @ 0x0
  1665                           
  1666  0070                     ?_INTERRUPT_InterruptManager:	
  1667                           ; 1 bytes @ 0x0
  1668                           
  1669  0070                     ?_UART_buff_get:	
  1670                           ; 1 bytes @ 0x0
  1671                           
  1672  0070                     ?_Send_put:	
  1673                           ; 1 bytes @ 0x0
  1674                           
  1675  0070                     ?_putch:	
  1676                           ; 1 bytes @ 0x0
  1677                           
  1678  0070                     ?i1_UART_buff_get:	
  1679                           ; 1 bytes @ 0x0
  1680                           
  1681  0070                     ?_main:	
  1682                           ; 1 bytes @ 0x0
  1683                           
  1684  0070                     ?_UART_buff_size:	
  1685                           ; 2 bytes @ 0x0
  1686                           
  1687  0070                     ?i1_UART_buff_modulo_inc:	
  1688                           ; 2 bytes @ 0x0
  1689                           
  1690  0070                     i1UART_buff_modulo_inc@value:	
  1691                           ; 2 bytes @ 0x0
  1692                           
  1693                           
  1694                           ; 2 bytes @ 0x0
  1695  0070                     	ds	2
  1696  0072                     i1UART_buff_modulo_inc@modulus:	
  1697                           
  1698                           ; 2 bytes @ 0x2
  1699  0072                     	ds	1
  1700  0073                     ??_UART_buff_size:	
  1701  0073                     UART_buff_size@_this:	
  1702                           ; 1 bytes @ 0x3
  1703                           
  1704                           
  1705                           ; 1 bytes @ 0x3
  1706  0073                     	ds	1
  1707  0074                     ??i1_UART_buff_modulo_inc:	
  1708  0074                     i1UART_buff_modulo_inc@my_value:	
  1709                           ; 1 bytes @ 0x4
  1710                           
  1711                           
  1712                           ; 2 bytes @ 0x4
  1713  0074                     	ds	2
  1714  0076                     ?i1_UART_buff_put:	
  1715  0076                     ??i1_UART_buff_get:	
  1716                           ; 1 bytes @ 0x6
  1717                           
  1718  0076                     i1UART_buff_put@c:	
  1719                           ; 1 bytes @ 0x6
  1720                           
  1721                           
  1722                           ; 1 bytes @ 0x6
  1723  0076                     	ds	1
  1724  0077                     ??i1_UART_buff_put:	
  1725                           
  1726                           ; 1 bytes @ 0x7
  1727  0077                     	ds	2
  1728  0079                     i1UART_buff_get@c:	
  1729                           
  1730                           ; 1 bytes @ 0x9
  1731  0079                     	ds	1
  1732  007A                     i1UART_buff_put@_this:	
  1733  007A                     i1UART_buff_get@_this:	
  1734                           ; 1 bytes @ 0xA
  1735                           
  1736                           
  1737                           ; 1 bytes @ 0xA
  1738  007A                     	ds	1
  1739  007B                     ??_EUSART1_Receive_ISR:	
  1740  007B                     ??_EUSART1_Transmit_ISR:	
  1741                           ; 1 bytes @ 0xB
  1742                           
  1743                           
  1744                           ; 1 bytes @ 0xB
  1745  007B                     	ds	1
  1746  007C                     EUSART1_Receive_ISR@data:	
  1747                           
  1748                           ; 1 bytes @ 0xC
  1749  007C                     	ds	1
  1750  007D                     ??_INTERRUPT_InterruptManager:	
  1751                           
  1752                           ; 1 bytes @ 0xD
  1753  007D                     	ds	1
  1754                           
  1755                           	psect	cstackBANK0
  1756  0020                     __pcstackBANK0:	
  1757  0020                     ?___ftge:	
  1758  0020                     ??_LEDOff:	
  1759                           ; 1 bit 
  1760                           
  1761  0020                     ?_Delay:	
  1762                           ; 1 bytes @ 0x0
  1763                           
  1764  0020                     ??_ADC_Initialize:	
  1765                           ; 1 bytes @ 0x0
  1766                           
  1767  0020                     ??_INTERRUPT_Initialize:	
  1768                           ; 1 bytes @ 0x0
  1769                           
  1770  0020                     ??_TMR2_Initialize:	
  1771                           ; 1 bytes @ 0x0
  1772                           
  1773  0020                     ?_memset:	
  1774                           ; 1 bytes @ 0x0
  1775                           
  1776  0020                     ?_UART_buff_modulo_inc:	
  1777                           ; 1 bytes @ 0x0
  1778                           
  1779  0020                     ?___awmod:	
  1780                           ; 2 bytes @ 0x0
  1781                           
  1782  0020                     ?___ftpack:	
  1783                           ; 2 bytes @ 0x0
  1784                           
  1785  0020                     ?___ftneg:	
  1786                           ; 3 bytes @ 0x0
  1787                           
  1788  0020                     ?__tdiv_to_l_:	
  1789                           ; 3 bytes @ 0x0
  1790                           
  1791  0020                     ?__div_to_l_:	
  1792                           ; 4 bytes @ 0x0
  1793                           
  1794  0020                     ?___lldiv:	
  1795                           ; 4 bytes @ 0x0
  1796                           
  1797  0020                     Delay@wait:	
  1798                           ; 4 bytes @ 0x0
  1799                           
  1800  0020                     UART_buff_modulo_inc@value:	
  1801                           ; 2 bytes @ 0x0
  1802                           
  1803  0020                     ___awmod@divisor:	
  1804                           ; 2 bytes @ 0x0
  1805                           
  1806  0020                     memset@c:	
  1807                           ; 2 bytes @ 0x0
  1808                           
  1809  0020                     __div_to_l_@f1:	
  1810                           ; 2 bytes @ 0x0
  1811                           
  1812  0020                     ___ftpack@arg:	
  1813                           ; 3 bytes @ 0x0
  1814                           
  1815  0020                     __tdiv_to_l_@f1:	
  1816                           ; 3 bytes @ 0x0
  1817                           
  1818  0020                     ___ftge@ff1:	
  1819                           ; 3 bytes @ 0x0
  1820                           
  1821  0020                     ___ftneg@f1:	
  1822                           ; 3 bytes @ 0x0
  1823                           
  1824  0020                     ___lldiv@divisor:	
  1825                           ; 3 bytes @ 0x0
  1826                           
  1827                           
  1828                           ; 4 bytes @ 0x0
  1829  0020                     	ds	2
  1830  0022                     ??_Delay:	
  1831  0022                     UART_buff_modulo_inc@modulus:	
  1832                           ; 1 bytes @ 0x2
  1833                           
  1834  0022                     ___awmod@dividend:	
  1835                           ; 2 bytes @ 0x2
  1836                           
  1837  0022                     memset@n:	
  1838                           ; 2 bytes @ 0x2
  1839                           
  1840                           
  1841                           ; 2 bytes @ 0x2
  1842  0022                     	ds	1
  1843  0023                     ??___ftneg:	
  1844  0023                     ___ftpack@exp:	
  1845                           ; 1 bytes @ 0x3
  1846                           
  1847  0023                     Delay@x:	
  1848                           ; 1 bytes @ 0x3
  1849                           
  1850  0023                     __div_to_l_@f2:	
  1851                           ; 2 bytes @ 0x3
  1852                           
  1853  0023                     __tdiv_to_l_@f2:	
  1854                           ; 3 bytes @ 0x3
  1855                           
  1856  0023                     ___ftge@ff2:	
  1857                           ; 3 bytes @ 0x3
  1858                           
  1859                           
  1860                           ; 3 bytes @ 0x3
  1861  0023                     	ds	1
  1862  0024                     ??_memset:	
  1863  0024                     ??_UART_buff_modulo_inc:	
  1864                           ; 1 bytes @ 0x4
  1865                           
  1866  0024                     ??___awmod:	
  1867                           ; 1 bytes @ 0x4
  1868                           
  1869  0024                     ___ftpack@sign:	
  1870                           ; 1 bytes @ 0x4
  1871                           
  1872  0024                     UART_buff_modulo_inc@my_value:	
  1873                           ; 1 bytes @ 0x4
  1874                           
  1875  0024                     ___lldiv@dividend:	
  1876                           ; 2 bytes @ 0x4
  1877                           
  1878                           
  1879                           ; 4 bytes @ 0x4
  1880  0024                     	ds	1
  1881  0025                     ??___ftpack:	
  1882  0025                     ___awmod@counter:	
  1883                           ; 1 bytes @ 0x5
  1884                           
  1885  0025                     memset@p1:	
  1886                           ; 1 bytes @ 0x5
  1887                           
  1888                           
  1889                           ; 1 bytes @ 0x5
  1890  0025                     	ds	1
  1891  0026                     ??__tdiv_to_l_:	
  1892  0026                     ??__div_to_l_:	
  1893                           ; 1 bytes @ 0x6
  1894                           
  1895  0026                     ?_UART_buff_put:	
  1896                           ; 1 bytes @ 0x6
  1897                           
  1898  0026                     ??_UART_buff_get:	
  1899                           ; 1 bytes @ 0x6
  1900                           
  1901  0026                     ??___ftge:	
  1902                           ; 1 bytes @ 0x6
  1903                           
  1904  0026                     UART_buff_put@c:	
  1905                           ; 1 bytes @ 0x6
  1906                           
  1907  0026                     ___awmod@sign:	
  1908                           ; 1 bytes @ 0x6
  1909                           
  1910  0026                     memset@p:	
  1911                           ; 1 bytes @ 0x6
  1912                           
  1913                           
  1914                           ; 1 bytes @ 0x6
  1915  0026                     	ds	1
  1916  0027                     ??_UART_buff_init:	
  1917  0027                     ??_UART_buff_put:	
  1918                           ; 1 bytes @ 0x7
  1919                           
  1920  0027                     ?___awdiv:	
  1921                           ; 1 bytes @ 0x7
  1922                           
  1923  0027                     UART_buff_init@_this:	
  1924                           ; 2 bytes @ 0x7
  1925                           
  1926  0027                     ___awdiv@divisor:	
  1927                           ; 1 bytes @ 0x7
  1928                           
  1929                           
  1930                           ; 2 bytes @ 0x7
  1931  0027                     	ds	1
  1932  0028                     ??_Start:	
  1933  0028                     ??_EUSART1_Initialize:	
  1934                           ; 1 bytes @ 0x8
  1935                           
  1936  0028                     ??___lldiv:	
  1937                           ; 1 bytes @ 0x8
  1938                           
  1939  0028                     ?___lltoft:	
  1940                           ; 1 bytes @ 0x8
  1941                           
  1942  0028                     ___lltoft@c:	
  1943                           ; 3 bytes @ 0x8
  1944                           
  1945                           
  1946                           ; 4 bytes @ 0x8
  1947  0028                     	ds	1
  1948  0029                     UART_buff_get@c:	
  1949  0029                     ___awdiv@dividend:	
  1950                           ; 1 bytes @ 0x9
  1951                           
  1952  0029                     ___lldiv@quotient:	
  1953                           ; 2 bytes @ 0x9
  1954                           
  1955                           
  1956                           ; 4 bytes @ 0x9
  1957  0029                     	ds	1
  1958  002A                     UART_buff_put@_this:	
  1959  002A                     UART_buff_get@_this:	
  1960                           ; 1 bytes @ 0xA
  1961                           
  1962  002A                     __tdiv_to_l_@quot:	
  1963                           ; 1 bytes @ 0xA
  1964                           
  1965                           
  1966                           ; 4 bytes @ 0xA
  1967  002A                     	ds	1
  1968  002B                     ??_Send_put:	
  1969  002B                     ??___awdiv:	
  1970                           ; 1 bytes @ 0xB
  1971                           
  1972                           
  1973                           ; 1 bytes @ 0xB
  1974  002B                     	ds	1
  1975  002C                     ??___lltoft:	
  1976  002C                     Send_put@_data:	
  1977                           ; 1 bytes @ 0xC
  1978                           
  1979  002C                     ___awdiv@counter:	
  1980                           ; 1 bytes @ 0xC
  1981                           
  1982                           
  1983                           ; 1 bytes @ 0xC
  1984  002C                     	ds	1
  1985  002D                     ??_putch:	
  1986  002D                     putch@txData:	
  1987                           ; 1 bytes @ 0xD
  1988                           
  1989  002D                     ___awdiv@sign:	
  1990                           ; 1 bytes @ 0xD
  1991                           
  1992  002D                     ___lldiv@counter:	
  1993                           ; 1 bytes @ 0xD
  1994                           
  1995  002D                     ___lltoft@exp:	
  1996                           ; 1 bytes @ 0xD
  1997                           
  1998                           
  1999                           ; 1 bytes @ 0xD
  2000  002D                     	ds	1
  2001  002E                     ?___llmod:	
  2002  002E                     __tdiv_to_l_@cntr:	
  2003                           ; 4 bytes @ 0xE
  2004                           
  2005  002E                     ___awdiv@quotient:	
  2006                           ; 1 bytes @ 0xE
  2007                           
  2008  002E                     __div_to_l_@quot:	
  2009                           ; 2 bytes @ 0xE
  2010                           
  2011  002E                     ___llmod@divisor:	
  2012                           ; 4 bytes @ 0xE
  2013                           
  2014                           
  2015                           ; 4 bytes @ 0xE
  2016  002E                     	ds	1
  2017  002F                     __tdiv_to_l_@exp1:	
  2018                           
  2019                           ; 1 bytes @ 0xF
  2020  002F                     	ds	1
  2021  0030                     ?___wmul:	
  2022  0030                     ___wmul@multiplier:	
  2023                           ; 2 bytes @ 0x10
  2024                           
  2025                           
  2026                           ; 2 bytes @ 0x10
  2027  0030                     	ds	2
  2028  0032                     __div_to_l_@cntr:	
  2029  0032                     ___wmul@multiplicand:	
  2030                           ; 1 bytes @ 0x12
  2031                           
  2032  0032                     ___llmod@dividend:	
  2033                           ; 2 bytes @ 0x12
  2034                           
  2035                           
  2036                           ; 4 bytes @ 0x12
  2037  0032                     	ds	1
  2038  0033                     __div_to_l_@exp1:	
  2039                           
  2040                           ; 1 bytes @ 0x13
  2041  0033                     	ds	1
  2042  0034                     ??___wmul:	
  2043  0034                     ___wmul@product:	
  2044                           ; 1 bytes @ 0x14
  2045                           
  2046                           
  2047                           ; 2 bytes @ 0x14
  2048  0034                     	ds	2
  2049  0036                     ??___llmod:	
  2050  0036                     ?___ftmul:	
  2051                           ; 1 bytes @ 0x16
  2052                           
  2053  0036                     ___ftmul@f1:	
  2054                           ; 3 bytes @ 0x16
  2055                           
  2056                           
  2057                           ; 3 bytes @ 0x16
  2058  0036                     	ds	1
  2059  0037                     ___llmod@counter:	
  2060                           
  2061                           ; 1 bytes @ 0x17
  2062  0037                     	ds	2
  2063  0039                     ___ftmul@f2:	
  2064                           
  2065                           ; 3 bytes @ 0x19
  2066  0039                     	ds	3
  2067  003C                     ??___ftmul:	
  2068                           
  2069                           ; 1 bytes @ 0x1C
  2070  003C                     	ds	4
  2071  0040                     ___ftmul@exp:	
  2072                           
  2073                           ; 1 bytes @ 0x20
  2074  0040                     	ds	1
  2075  0041                     ___ftmul@f3_as_product:	
  2076                           
  2077                           ; 3 bytes @ 0x21
  2078  0041                     	ds	3
  2079  0044                     ___ftmul@cntr:	
  2080                           
  2081                           ; 1 bytes @ 0x24
  2082  0044                     	ds	1
  2083  0045                     ___ftmul@sign:	
  2084                           
  2085                           ; 1 bytes @ 0x25
  2086  0045                     	ds	1
  2087  0046                     ?_fround:	
  2088  0046                     ?_scale:	
  2089                           ; 3 bytes @ 0x26
  2090                           
  2091                           
  2092                           ; 3 bytes @ 0x26
  2093  0046                     	ds	3
  2094  0049                     ??_fround:	
  2095  0049                     ??_scale:	
  2096                           ; 1 bytes @ 0x29
  2097                           
  2098                           
  2099                           ; 1 bytes @ 0x29
  2100  0049                     	ds	2
  2101  004B                     _scale$1314:	
  2102                           
  2103                           ; 3 bytes @ 0x2B
  2104  004B                     	ds	2
  2105  004D                     _fround$1313:	
  2106                           
  2107                           ; 3 bytes @ 0x2D
  2108  004D                     	ds	1
  2109  004E                     scale@scl:	
  2110                           
  2111                           ; 1 bytes @ 0x2E
  2112  004E                     	ds	1
  2113  004F                     ?___fttol:	
  2114  004F                     ___fttol@f1:	
  2115                           ; 4 bytes @ 0x2F
  2116                           
  2117                           
  2118                           ; 3 bytes @ 0x2F
  2119  004F                     	ds	1
  2120  0050                     _fround$1312:	
  2121                           
  2122                           ; 3 bytes @ 0x30
  2123  0050                     	ds	3
  2124  0053                     ??___fttol:	
  2125  0053                     fround@prec:	
  2126                           ; 1 bytes @ 0x33
  2127                           
  2128                           
  2129                           ; 1 bytes @ 0x33
  2130  0053                     	ds	1
  2131  0054                     ?___ftadd:	
  2132  0054                     ___ftadd@f1:	
  2133                           ; 3 bytes @ 0x34
  2134                           
  2135                           
  2136                           ; 3 bytes @ 0x34
  2137  0054                     	ds	3
  2138  0057                     ___fttol@sign1:	
  2139  0057                     ___ftadd@f2:	
  2140                           ; 1 bytes @ 0x37
  2141                           
  2142                           
  2143                           ; 3 bytes @ 0x37
  2144  0057                     	ds	1
  2145  0058                     ___fttol@lval:	
  2146                           
  2147                           ; 4 bytes @ 0x38
  2148  0058                     	ds	2
  2149  005A                     ??___ftadd:	
  2150                           
  2151                           ; 1 bytes @ 0x3A
  2152  005A                     	ds	2
  2153  005C                     ___fttol@exp1:	
  2154                           
  2155                           ; 1 bytes @ 0x3C
  2156  005C                     	ds	2
  2157  005E                     ___ftadd@sign:	
  2158                           
  2159                           ; 1 bytes @ 0x3E
  2160  005E                     	ds	1
  2161  005F                     ___ftadd@exp2:	
  2162                           
  2163                           ; 1 bytes @ 0x3F
  2164  005F                     	ds	1
  2165  0060                     ___ftadd@exp1:	
  2166                           
  2167                           ; 1 bytes @ 0x40
  2168  0060                     	ds	1
  2169  0061                     ?___ftsub:	
  2170  0061                     ___ftsub@f2:	
  2171                           ; 3 bytes @ 0x41
  2172                           
  2173                           
  2174                           ; 3 bytes @ 0x41
  2175  0061                     	ds	3
  2176  0064                     ___ftsub@f1:	
  2177                           
  2178                           ; 3 bytes @ 0x44
  2179  0064                     	ds	3
  2180  0067                     ??_printf:	
  2181  0067                     ??___ftsub:	
  2182                           ; 1 bytes @ 0x47
  2183                           
  2184                           
  2185                           ; 1 bytes @ 0x47
  2186  0067                     	ds	6
  2187  006D                     ??_main:	
  2188                           
  2189                           	psect	maintext
  2190  160C                     __pmaintext:	
  2191                           ; 1 bytes @ 0x4D
  2192 ;;
  2193 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2194 ;;
  2195 ;; *************** function _main *****************
  2196 ;; Defined at:
  2197 ;;		line 16 in file "Main.c"
  2198 ;; Parameters:    Size  Location     Type
  2199 ;;		None
  2200 ;; Auto vars:     Size  Location     Type
  2201 ;;		None
  2202 ;; Return value:  Size  Location     Type
  2203 ;;                  2   10[None  ] int 
  2204 ;; Registers used:
  2205 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2206 ;; Tracked objects:
  2207 ;;		On entry : B1F/0
  2208 ;;		On exit  : 0/0
  2209 ;;		Unchanged: 0/0
  2210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2214 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2215 ;;Total ram usage:        0 bytes
  2216 ;; Hardware stack levels required when called:    9
  2217 ;; This function calls:
  2218 ;;		_Delay
  2219 ;;		_LEDOff
  2220 ;;		_Start
  2221 ;;		_printf
  2222 ;; This function is called by:
  2223 ;;		Startup code after reset
  2224 ;; This function uses a non-reentrant model
  2225 ;;
  2226                           
  2227                           
  2228                           ;psect for function _main
  2229  160C                     _main:	
  2230                           
  2231                           ;Main.c: 17: Start();
  2232                           
  2233                           ;incstack = 0
  2234                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2235  160C  3196  2694  3196   	fcall	_Start
  2236                           
  2237                           ;Main.c: 20: LEDOff();
  2238  160F  3195  254B  3196   	fcall	_LEDOff
  2239  1612                     l3093:	
  2240                           ;Main.c: 21: while(1){
  2241                           
  2242                           
  2243                           ;Main.c: 22: printf("Start");
  2244  1612  30E7               	movlw	low (STR_1| (0+32768))
  2245  1613  0021               	movlb	1	; select bank1
  2246  1614  00A0               	movwf	printf@f^(0+128)
  2247  1615  3090               	movlw	high (STR_1| (0+32768))
  2248  1616  00A1               	movwf	(printf@f^(0+128)+1)
  2249  1617  3180  2043  3196   	fcall	_printf
  2250                           
  2251                           ;Main.c: 24: Delay(100);
  2252  161A  3064               	movlw	100
  2253  161B  0020               	movlb	0	; select bank0
  2254  161C  00A0               	movwf	Delay@wait
  2255  161D  3000               	movlw	0
  2256  161E  00A1               	movwf	Delay@wait+1
  2257  161F  3187  27E3  3196   	fcall	_Delay
  2258  1622  2E12               	goto	l3093
  2259  1623                     __end_of_main:	
  2260                           ;Main.c: 25: }
  2261                           ;Main.c: 26: return 0;
  2262                           ;	Return value of _main is never used
  2263                           
  2264                           
  2265                           	psect	text1
  2266  0043                     __ptext1:	
  2267 ;; *************** function _printf *****************
  2268 ;; Defined at:
  2269 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  2270 ;; Parameters:    Size  Location     Type
  2271 ;;  f               2    0[BANK1 ] PTR const unsigned char 
  2272 ;;		 -> STR_7(22), STR_6(19), STR_5(19), STR_4(22), 
  2273 ;;		 -> STR_3(36), STR_2(14), STR_1(6), 
  2274 ;; Auto vars:     Size  Location     Type
  2275 ;;  tmpval          4   32[BANK1 ] struct .
  2276 ;;  val             4   26[BANK1 ] unsigned long 
  2277 ;;  fval            3   36[BANK1 ] unsigned long 
  2278 ;;  exp             2   30[BANK1 ] int 
  2279 ;;  prec            2   24[BANK1 ] int 
  2280 ;;  flag            2   21[BANK1 ] unsigned short 
  2281 ;;  cp              2    0        PTR const unsigned char 
  2282 ;;  len             2    0        unsigned int 
  2283 ;;  width           2    0        int 
  2284 ;;  c               1   39[BANK1 ] char 
  2285 ;;  ap              1   23[BANK1 ] PTR void [1]
  2286 ;;		 -> ?_printf(2), 
  2287 ;;  d               1    0        unsigned char 
  2288 ;; Return value:  Size  Location     Type
  2289 ;;                  2    0[BANK1 ] int 
  2290 ;; Registers used:
  2291 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2292 ;; Tracked objects:
  2293 ;;		On entry : 0/0
  2294 ;;		On exit  : 0/0
  2295 ;;		Unchanged: 0/0
  2296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2297 ;;      Params:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0
  2298 ;;      Locals:         0       0      22       0       0       0       0       0       0       0       0       0       
      +0       0
  2299 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2300 ;;      Totals:         0       6      40       0       0       0       0       0       0       0       0       0       
      +0       0
  2301 ;;Total ram usage:       46 bytes
  2302 ;; Hardware stack levels used:    1
  2303 ;; Hardware stack levels required when called:    8
  2304 ;; This function calls:
  2305 ;;		___awdiv
  2306 ;;		___ftadd
  2307 ;;		___ftge
  2308 ;;		___ftmul
  2309 ;;		___ftneg
  2310 ;;		___ftsub
  2311 ;;		___fttol
  2312 ;;		___lldiv
  2313 ;;		___llmod
  2314 ;;		___lltoft
  2315 ;;		___wmul
  2316 ;;		__div_to_l_
  2317 ;;		__tdiv_to_l_
  2318 ;;		_fround
  2319 ;;		_putch
  2320 ;;		_scale
  2321 ;; This function is called by:
  2322 ;;		_main
  2323 ;;		_SetCommandMode
  2324 ;;		_SetFrequency
  2325 ;;		_SetPowerSave
  2326 ;;		_SetVolume
  2327 ;;		_SetVOX
  2328 ;;		_SetMIC
  2329 ;; This function uses a non-reentrant model
  2330 ;;
  2331                           
  2332                           
  2333                           ;psect for function _printf
  2334  0043                     _printf:	
  2335                           
  2336                           ;doprnt.c: 466: va_list ap;
  2337                           ;doprnt.c: 499: signed char c;
  2338                           ;doprnt.c: 501: int width;
  2339                           ;doprnt.c: 504: int prec;
  2340                           ;doprnt.c: 508: unsigned short flag;
  2341                           ;doprnt.c: 515: char d;
  2342                           ;doprnt.c: 516: double fval;
  2343                           ;doprnt.c: 517: int exp;
  2344                           ;doprnt.c: 523: union {
  2345                           ;doprnt.c: 524: unsigned long vd;
  2346                           ;doprnt.c: 525: double integ;
  2347                           ;doprnt.c: 526: } tmpval;
  2348                           ;doprnt.c: 528: unsigned long val;
  2349                           ;doprnt.c: 529: unsigned len;
  2350                           ;doprnt.c: 530: const char * cp;
  2351                           ;doprnt.c: 533: *ap = __va_start();
  2352                           
  2353                           ;incstack = 0
  2354                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2355  0043  30A2               	movlw	(low ((?_printf| 0+2)))& (0+255)
  2356  0044  0020               	movlb	0	; select bank0
  2357  0045  00E7               	movwf	??_printf
  2358  0046  0867               	movf	??_printf,w
  2359  0047  0021               	movlb	1	; select bank1
  2360  0048  00B7               	movwf	printf@ap^(0+128)
  2361  0049                     l3013:	
  2362                           ;doprnt.c: 536: while(c = *f++) {
  2363                           
  2364  0049  0021               	movlb	1	; select bank1
  2365  004A  0821               	movf	(printf@f+1)^(0+128),w
  2366  004B  0020               	movlb	0	; select bank0
  2367  004C  00E8               	movwf	??_printf+1
  2368  004D  0021               	movlb	1	; select bank1
  2369  004E  0820               	movf	printf@f^(0+128),w
  2370  004F  0020               	movlb	0	; select bank0
  2371  0050  00E7               	movwf	??_printf
  2372  0051  0021               	movlb	1	; select bank1
  2373  0052  0AA0               	incf	printf@f^(0+128),f
  2374  0053  1903               	skipnz
  2375  0054  0AA1               	incf	(printf@f+1)^(0+128),f
  2376  0055  0020               	movlb	0	; select bank0
  2377  0056  0867               	movf	??_printf,w
  2378  0057  0084               	movwf	4
  2379  0058  0868               	movf	??_printf+1,w
  2380  0059  0085               	movwf	5
  2381  005A  0800               	movf	0,w	;code access
  2382  005B  00E9               	movwf	??_printf+2
  2383  005C  0869               	movf	??_printf+2,w
  2384  005D  0021               	movlb	1	; select bank1
  2385  005E  00C7               	movwf	printf@c^(0+128)
  2386  005F  0847               	movf	printf@c^(0+128),w
  2387  0060  1903               	btfsc	3,2
  2388  0061  0008               	return
  2389                           
  2390                           ;doprnt.c: 538: if(c != '%')
  2391  0062  3025               	movlw	37
  2392  0063  0647               	xorwf	printf@c^(0+128),w
  2393  0064  1903               	btfsc	3,2
  2394  0065  286B               	goto	l2837
  2395                           
  2396                           ;doprnt.c: 540: {
  2397                           ;doprnt.c: 541: (putch(c) );
  2398  0066  0847               	movf	printf@c^(0+128),w
  2399  0067  3195  2550  3180   	fcall	_putch
  2400                           
  2401                           ;doprnt.c: 542: continue;
  2402  006A  2849               	goto	l3013
  2403  006B                     l2837:	
  2404                           
  2405                           ;doprnt.c: 543: }
  2406                           ;doprnt.c: 548: flag = 0;
  2407  006B  0021               	movlb	1	; select bank1
  2408  006C  01B5               	clrf	printf@flag^(0+128)
  2409  006D  01B6               	clrf	(printf@flag+1)^(0+128)
  2410                           
  2411                           ;doprnt.c: 635: switch(c = *f++) {
  2412  006E  2885               	goto	l2847
  2413  006F                     l367:	
  2414                           ;doprnt.c: 662: case 'f':
  2415                           
  2416                           ;doprnt.c: 638: goto alldone;
  2417                           
  2418                           ;doprnt.c: 637: case 0:
  2419                           
  2420                           
  2421                           ;doprnt.c: 663: flag |= 0x400;
  2422  006F  1536               	bsf	(printf@flag^(0+128)+1),2
  2423                           
  2424                           ;doprnt.c: 698: case 'i':
  2425                           ;doprnt.c: 699: break;
  2426                           
  2427                           ;doprnt.c: 697: case 'd':
  2428                           
  2429                           ;doprnt.c: 664: break;
  2430  0070  28A9               	goto	l2849
  2431  0071                     l2839:	
  2432                           ;doprnt.c: 784: case 'c':
  2433                           
  2434                           
  2435                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2436  0071  0837               	movf	printf@ap^(0+128),w
  2437  0072  0086               	movwf	6
  2438  0073  0187               	clrf	7
  2439  0074  0801               	movf	1,w
  2440  0075  0020               	movlb	0	; select bank0
  2441  0076  00E7               	movwf	??_printf
  2442  0077  0867               	movf	??_printf,w
  2443  0078  0021               	movlb	1	; select bank1
  2444  0079  00C7               	movwf	printf@c^(0+128)
  2445  007A  3002               	movlw	2
  2446  007B  0020               	movlb	0	; select bank0
  2447  007C  00E7               	movwf	??_printf
  2448  007D  0867               	movf	??_printf,w
  2449  007E  0021               	movlb	1	; select bank1
  2450  007F  07B7               	addwf	printf@ap^(0+128),f
  2451  0080                     l2843:	
  2452                           ;doprnt.c: 802: default:
  2453                           
  2454                           
  2455                           ;doprnt.c: 809: (putch(c) );
  2456  0080  0847               	movf	printf@c^(0+128),w
  2457  0081  3195  2550  3180   	fcall	_putch
  2458                           
  2459                           ;doprnt.c: 810: continue;
  2460  0084  2849               	goto	l3013
  2461  0085                     l2847:	
  2462                           ;doprnt.c: 822: }
  2463                           
  2464  0085  0021               	movlb	1	; select bank1
  2465  0086  0821               	movf	(printf@f+1)^(0+128),w
  2466  0087  0020               	movlb	0	; select bank0
  2467  0088  00E8               	movwf	??_printf+1
  2468  0089  0021               	movlb	1	; select bank1
  2469  008A  0820               	movf	printf@f^(0+128),w
  2470  008B  0020               	movlb	0	; select bank0
  2471  008C  00E7               	movwf	??_printf
  2472  008D  0021               	movlb	1	; select bank1
  2473  008E  0AA0               	incf	printf@f^(0+128),f
  2474  008F  1903               	skipnz
  2475  0090  0AA1               	incf	(printf@f+1)^(0+128),f
  2476  0091  0020               	movlb	0	; select bank0
  2477  0092  0867               	movf	??_printf,w
  2478  0093  0084               	movwf	4
  2479  0094  0868               	movf	??_printf+1,w
  2480  0095  0085               	movwf	5
  2481  0096  0800               	movf	0,w	;code access
  2482  0097  0021               	movlb	1	; select bank1
  2483  0098  00C7               	movwf	printf@c^(0+128)
  2484                           
  2485                           ; Switch size 1, requested type "space"
  2486                           ; Number of cases is 5, Range of values is 0 to 105
  2487                           ; switch strategies available:
  2488                           ; Name         Instructions Cycles
  2489                           ; simple_byte           16     9 (average)
  2490                           ; direct_byte          218     6 (fixed)
  2491                           ; jumptable            260     6 (fixed)
  2492                           ;	Chosen strategy is simple_byte
  2493  0099  3A00               	xorlw	0	; case 0
  2494  009A  1903               	skipnz
  2495  009B  2DC6               	goto	l419
  2496  009C  3A63               	xorlw	99	; case 99
  2497  009D  1903               	skipnz
  2498  009E  2871               	goto	l2839
  2499  009F  3A07               	xorlw	7	; case 100
  2500  00A0  1903               	skipnz
  2501  00A1  28A9               	goto	l2849
  2502  00A2  3A02               	xorlw	2	; case 102
  2503  00A3  1903               	skipnz
  2504  00A4  286F               	goto	l367
  2505  00A5  3A0F               	xorlw	15	; case 105
  2506  00A6  1903               	skipnz
  2507  00A7  28A9               	goto	l2849
  2508  00A8  2880               	goto	l2843
  2509  00A9                     l2849:	
  2510                           
  2511                           ;doprnt.c: 825: if(flag & (0x700)) {
  2512  00A9  3000               	movlw	0
  2513  00AA  0021               	movlb	1	; select bank1
  2514  00AB  0535               	andwf	printf@flag^(0+128),w
  2515  00AC  0020               	movlb	0	; select bank0
  2516  00AD  00E7               	movwf	??_printf
  2517  00AE  3007               	movlw	7
  2518  00AF  0021               	movlb	1	; select bank1
  2519  00B0  0536               	andwf	(printf@flag+1)^(0+128),w
  2520  00B1  0020               	movlb	0	; select bank0
  2521  00B2  00E8               	movwf	??_printf+1
  2522  00B3  0867               	movf	??_printf,w
  2523  00B4  0468               	iorwf	??_printf+1,w
  2524  00B5  1903               	btfsc	3,2
  2525  00B6  2CF2               	goto	l2979
  2526                           
  2527                           ;doprnt.c: 829: prec = 6;
  2528  00B7  3006               	movlw	6
  2529  00B8  0021               	movlb	1	; select bank1
  2530  00B9  00B8               	movwf	printf@prec^(0+128)
  2531  00BA  3000               	movlw	0
  2532  00BB  00B9               	movwf	(printf@prec^(0+128)+1)
  2533                           
  2534                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2535  00BC  0837               	movf	printf@ap^(0+128),w
  2536  00BD  0086               	movwf	6
  2537  00BE  0187               	clrf	7
  2538  00BF  3F40               	moviw [0]fsr1
  2539  00C0  00C4               	movwf	printf@fval^(0+128)
  2540  00C1  3F41               	moviw [1]fsr1
  2541  00C2  00C5               	movwf	(printf@fval+1)^(0+128)
  2542  00C3  3F42               	moviw [2]fsr1
  2543  00C4  00C6               	movwf	(printf@fval+2)^(0+128)
  2544  00C5  3003               	movlw	3
  2545  00C6  0020               	movlb	0	; select bank0
  2546  00C7  00E7               	movwf	??_printf
  2547  00C8  0867               	movf	??_printf,w
  2548  00C9  0021               	movlb	1	; select bank1
  2549  00CA  07B7               	addwf	printf@ap^(0+128),f
  2550                           
  2551                           ;doprnt.c: 831: if(fval < 0.0) {
  2552  00CB  0844               	movf	printf@fval^(0+128),w
  2553  00CC  0020               	movlb	0	; select bank0
  2554  00CD  00A0               	movwf	___ftge@ff1
  2555  00CE  0021               	movlb	1	; select bank1
  2556  00CF  0845               	movf	(printf@fval+1)^(0+128),w
  2557  00D0  0020               	movlb	0	; select bank0
  2558  00D1  00A1               	movwf	___ftge@ff1+1
  2559  00D2  0021               	movlb	1	; select bank1
  2560  00D3  0846               	movf	(printf@fval+2)^(0+128),w
  2561  00D4  0020               	movlb	0	; select bank0
  2562  00D5  00A2               	movwf	___ftge@ff1+2
  2563  00D6  3000               	movlw	0
  2564  00D7  00A3               	movwf	___ftge@ff2
  2565  00D8  3000               	movlw	0
  2566  00D9  00A4               	movwf	___ftge@ff2+1
  2567  00DA  3000               	movlw	0
  2568  00DB  00A5               	movwf	___ftge@ff2+2
  2569  00DC  3196  26E3  3180   	fcall	___ftge
  2570  00DF  1803               	btfsc	3,0
  2571  00E0  2900               	goto	l2863
  2572                           
  2573                           ;doprnt.c: 832: fval = -fval;
  2574  00E1  0021               	movlb	1	; select bank1
  2575  00E2  0844               	movf	printf@fval^(0+128),w
  2576  00E3  0020               	movlb	0	; select bank0
  2577  00E4  00A0               	movwf	___ftneg@f1
  2578  00E5  0021               	movlb	1	; select bank1
  2579  00E6  0845               	movf	(printf@fval+1)^(0+128),w
  2580  00E7  0020               	movlb	0	; select bank0
  2581  00E8  00A1               	movwf	___ftneg@f1+1
  2582  00E9  0021               	movlb	1	; select bank1
  2583  00EA  0846               	movf	(printf@fval+2)^(0+128),w
  2584  00EB  0020               	movlb	0	; select bank0
  2585  00EC  00A2               	movwf	___ftneg@f1+2
  2586  00ED  3195  2564  3180   	fcall	___ftneg
  2587  00F0  0020               	movlb	0	; select bank0
  2588  00F1  0820               	movf	?___ftneg,w
  2589  00F2  0021               	movlb	1	; select bank1
  2590  00F3  00C4               	movwf	printf@fval^(0+128)
  2591  00F4  0020               	movlb	0	; select bank0
  2592  00F5  0821               	movf	?___ftneg+1,w
  2593  00F6  0021               	movlb	1	; select bank1
  2594  00F7  00C5               	movwf	(printf@fval+1)^(0+128)
  2595  00F8  0020               	movlb	0	; select bank0
  2596  00F9  0822               	movf	?___ftneg+2,w
  2597  00FA  0021               	movlb	1	; select bank1
  2598  00FB  00C6               	movwf	(printf@fval+2)^(0+128)
  2599                           
  2600                           ;doprnt.c: 833: flag |= 0x03;
  2601  00FC  3003               	movlw	3
  2602  00FD  04B5               	iorwf	printf@flag^(0+128),f
  2603  00FE  3000               	movlw	0
  2604  00FF  04B6               	iorwf	(printf@flag+1)^(0+128),f
  2605  0100                     l2863:	
  2606                           
  2607                           ;doprnt.c: 834: }
  2608                           ;doprnt.c: 835: exp = 0;
  2609  0100  0021               	movlb	1	; select bank1
  2610  0101  01BE               	clrf	printf@exp^(0+128)
  2611  0102  01BF               	clrf	(printf@exp+1)^(0+128)
  2612                           
  2613                           ;doprnt.c: 836: if( fval!=0) {
  2614  0103  0846               	movf	(printf@fval+2)^(0+128),w
  2615  0104  0445               	iorwf	(printf@fval+1)^(0+128),w
  2616  0105  0444               	iorwf	printf@fval^(0+128),w
  2617  0106  1903               	skipnz
  2618  0107  29D2               	goto	l375
  2619                           
  2620                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2621  0108  30C4               	movlw	low (printf@fval| 0)
  2622  0109  0086               	movwf	6
  2623  010A  0187               	clrf	7
  2624  010B  3F40               	moviw [0]fsr1
  2625  010C  0020               	movlb	0	; select bank0
  2626  010D  00E7               	movwf	??_printf
  2627  010E  3F41               	moviw [1]fsr1
  2628  010F  00E8               	movwf	??_printf+1
  2629  0110  3F42               	moviw [2]fsr1
  2630  0111  00E9               	movwf	??_printf+2
  2631  0112  3F43               	moviw [3]fsr1
  2632  0113  00EA               	movwf	??_printf+3
  2633  0114  300F               	movlw	15
  2634  0115                     u3615:	
  2635  0115  36EA               	lsrf	??_printf+3,f
  2636  0116  0CE9               	rrf	??_printf+2,f
  2637  0117  0CE8               	rrf	??_printf+1,f
  2638  0118  0CE7               	rrf	??_printf,f
  2639  0119  0B89               	decfsz	9,f
  2640  011A  2915               	goto	u3615
  2641  011B  30FF               	movlw	255
  2642  011C  0567               	andwf	??_printf,w
  2643  011D  00EB               	movwf	??_printf+4
  2644  011E  3000               	movlw	0
  2645  011F  0568               	andwf	??_printf+1,w
  2646  0120  00EC               	movwf	??_printf+5
  2647  0121  086B               	movf	??_printf+4,w
  2648  0122  3E82               	addlw	130
  2649  0123  0021               	movlb	1	; select bank1
  2650  0124  00BE               	movwf	printf@exp^(0+128)
  2651  0125  30FF               	movlw	255
  2652  0126  0020               	movlb	0	; select bank0
  2653  0127  3D6C               	addwfc	??_printf+5,w
  2654  0128  0021               	movlb	1	; select bank1
  2655  0129  00BF               	movwf	(printf@exp+1)^(0+128)
  2656                           
  2657                           ;doprnt.c: 838: exp--;
  2658  012A  30FF               	movlw	255
  2659  012B  07BE               	addwf	printf@exp^(0+128),f
  2660  012C  30FF               	movlw	255
  2661  012D  3DBF               	addwfc	(printf@exp+1)^(0+128),f
  2662                           
  2663                           ;doprnt.c: 839: exp *= 3;
  2664  012E  3003               	movlw	3
  2665  012F  0020               	movlb	0	; select bank0
  2666  0130  00B0               	movwf	___wmul@multiplier
  2667  0131  3000               	movlw	0
  2668  0132  00B1               	movwf	___wmul@multiplier+1
  2669  0133  0021               	movlb	1	; select bank1
  2670  0134  083F               	movf	(printf@exp+1)^(0+128),w
  2671  0135  0020               	movlb	0	; select bank0
  2672  0136  00B3               	movwf	___wmul@multiplicand+1
  2673  0137  0021               	movlb	1	; select bank1
  2674  0138  083E               	movf	printf@exp^(0+128),w
  2675  0139  0020               	movlb	0	; select bank0
  2676  013A  00B2               	movwf	___wmul@multiplicand
  2677  013B  3196  265A  3180   	fcall	___wmul
  2678  013E  0020               	movlb	0	; select bank0
  2679  013F  0831               	movf	?___wmul+1,w
  2680  0140  0021               	movlb	1	; select bank1
  2681  0141  00BF               	movwf	(printf@exp+1)^(0+128)
  2682  0142  0020               	movlb	0	; select bank0
  2683  0143  0830               	movf	?___wmul,w
  2684  0144  0021               	movlb	1	; select bank1
  2685  0145  00BE               	movwf	printf@exp^(0+128)
  2686                           
  2687                           ;doprnt.c: 840: exp /= 10;
  2688  0146  300A               	movlw	10
  2689  0147  0020               	movlb	0	; select bank0
  2690  0148  00A7               	movwf	___awdiv@divisor
  2691  0149  3000               	movlw	0
  2692  014A  00A8               	movwf	___awdiv@divisor+1
  2693  014B  0021               	movlb	1	; select bank1
  2694  014C  083F               	movf	(printf@exp+1)^(0+128),w
  2695  014D  0020               	movlb	0	; select bank0
  2696  014E  00AA               	movwf	___awdiv@dividend+1
  2697  014F  0021               	movlb	1	; select bank1
  2698  0150  083E               	movf	printf@exp^(0+128),w
  2699  0151  0020               	movlb	0	; select bank0
  2700  0152  00A9               	movwf	___awdiv@dividend
  2701  0153  3188  2048  3180   	fcall	___awdiv
  2702  0156  0020               	movlb	0	; select bank0
  2703  0157  0828               	movf	?___awdiv+1,w
  2704  0158  0021               	movlb	1	; select bank1
  2705  0159  00BF               	movwf	(printf@exp+1)^(0+128)
  2706  015A  0020               	movlb	0	; select bank0
  2707  015B  0827               	movf	?___awdiv,w
  2708  015C  0021               	movlb	1	; select bank1
  2709  015D  00BE               	movwf	printf@exp^(0+128)
  2710                           
  2711                           ;doprnt.c: 841: if(exp < 0)
  2712  015E  1FBF               	btfss	(printf@exp+1)^(0+128),7
  2713  015F  2964               	goto	l2879
  2714                           
  2715                           ;doprnt.c: 842: exp--;
  2716  0160  30FF               	movlw	255
  2717  0161  07BE               	addwf	printf@exp^(0+128),f
  2718  0162  30FF               	movlw	255
  2719  0163  3DBF               	addwfc	(printf@exp+1)^(0+128),f
  2720  0164                     l2879:	
  2721                           
  2722                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2723  0164  033E               	decf	printf@exp^(0+128),w
  2724  0165  3AFF               	xorlw	255
  2725  0166  318D  25BA  3180   	fcall	_scale
  2726  0169  0020               	movlb	0	; select bank0
  2727  016A  0846               	movf	?_scale,w
  2728  016B  0021               	movlb	1	; select bank1
  2729  016C  00C0               	movwf	printf@tmpval^(0+128)
  2730  016D  0020               	movlb	0	; select bank0
  2731  016E  0847               	movf	?_scale+1,w
  2732  016F  0021               	movlb	1	; select bank1
  2733  0170  00C1               	movwf	(printf@tmpval+1)^(0+128)
  2734  0171  0020               	movlb	0	; select bank0
  2735  0172  0848               	movf	?_scale+2,w
  2736  0173  0021               	movlb	1	; select bank1
  2737  0174  00C2               	movwf	(printf@tmpval+2)^(0+128)
  2738                           
  2739                           ;doprnt.c: 847: tmpval.integ *= fval;
  2740  0175  0844               	movf	printf@fval^(0+128),w
  2741  0176  0020               	movlb	0	; select bank0
  2742  0177  00B6               	movwf	___ftmul@f1
  2743  0178  0021               	movlb	1	; select bank1
  2744  0179  0845               	movf	(printf@fval+1)^(0+128),w
  2745  017A  0020               	movlb	0	; select bank0
  2746  017B  00B7               	movwf	___ftmul@f1+1
  2747  017C  0021               	movlb	1	; select bank1
  2748  017D  0846               	movf	(printf@fval+2)^(0+128),w
  2749  017E  0020               	movlb	0	; select bank0
  2750  017F  00B8               	movwf	___ftmul@f1+2
  2751  0180  0021               	movlb	1	; select bank1
  2752  0181  0840               	movf	printf@tmpval^(0+128),w
  2753  0182  0020               	movlb	0	; select bank0
  2754  0183  00B9               	movwf	___ftmul@f2
  2755  0184  0021               	movlb	1	; select bank1
  2756  0185  0841               	movf	(printf@tmpval+1)^(0+128),w
  2757  0186  0020               	movlb	0	; select bank0
  2758  0187  00BA               	movwf	___ftmul@f2+1
  2759  0188  0021               	movlb	1	; select bank1
  2760  0189  0842               	movf	(printf@tmpval+2)^(0+128),w
  2761  018A  0020               	movlb	0	; select bank0
  2762  018B  00BB               	movwf	___ftmul@f2+2
  2763  018C  318A  22F3  3180   	fcall	___ftmul
  2764  018F  0020               	movlb	0	; select bank0
  2765  0190  0836               	movf	?___ftmul,w
  2766  0191  0021               	movlb	1	; select bank1
  2767  0192  00C0               	movwf	printf@tmpval^(0+128)
  2768  0193  0020               	movlb	0	; select bank0
  2769  0194  0837               	movf	?___ftmul+1,w
  2770  0195  0021               	movlb	1	; select bank1
  2771  0196  00C1               	movwf	(printf@tmpval+1)^(0+128)
  2772  0197  0020               	movlb	0	; select bank0
  2773  0198  0838               	movf	?___ftmul+2,w
  2774  0199  0021               	movlb	1	; select bank1
  2775  019A  00C2               	movwf	(printf@tmpval+2)^(0+128)
  2776                           
  2777                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2778  019B  0840               	movf	printf@tmpval^(0+128),w
  2779  019C  0020               	movlb	0	; select bank0
  2780  019D  00A0               	movwf	___ftge@ff1
  2781  019E  0021               	movlb	1	; select bank1
  2782  019F  0841               	movf	(printf@tmpval+1)^(0+128),w
  2783  01A0  0020               	movlb	0	; select bank0
  2784  01A1  00A1               	movwf	___ftge@ff1+1
  2785  01A2  0021               	movlb	1	; select bank1
  2786  01A3  0842               	movf	(printf@tmpval+2)^(0+128),w
  2787  01A4  0020               	movlb	0	; select bank0
  2788  01A5  00A2               	movwf	___ftge@ff1+2
  2789  01A6  3000               	movlw	0
  2790  01A7  00A3               	movwf	___ftge@ff2
  2791  01A8  3080               	movlw	128
  2792  01A9  00A4               	movwf	___ftge@ff2+1
  2793  01AA  303F               	movlw	63
  2794  01AB  00A5               	movwf	___ftge@ff2+2
  2795  01AC  3196  26E3  3180   	fcall	___ftge
  2796  01AF  1803               	btfsc	3,0
  2797  01B0  29B6               	goto	l2887
  2798                           
  2799                           ;doprnt.c: 849: exp--;
  2800  01B1  30FF               	movlw	255
  2801  01B2  0021               	movlb	1	; select bank1
  2802  01B3  07BE               	addwf	printf@exp^(0+128),f
  2803  01B4  30FF               	movlw	255
  2804  01B5  29D1               	goto	L1
  2805  01B6                     l2887:	
  2806                           
  2807                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2808  01B6  0021               	movlb	1	; select bank1
  2809  01B7  0840               	movf	printf@tmpval^(0+128),w
  2810  01B8  0020               	movlb	0	; select bank0
  2811  01B9  00A0               	movwf	___ftge@ff1
  2812  01BA  0021               	movlb	1	; select bank1
  2813  01BB  0841               	movf	(printf@tmpval+1)^(0+128),w
  2814  01BC  0020               	movlb	0	; select bank0
  2815  01BD  00A1               	movwf	___ftge@ff1+1
  2816  01BE  0021               	movlb	1	; select bank1
  2817  01BF  0842               	movf	(printf@tmpval+2)^(0+128),w
  2818  01C0  0020               	movlb	0	; select bank0
  2819  01C1  00A2               	movwf	___ftge@ff1+2
  2820  01C2  3000               	movlw	0
  2821  01C3  00A3               	movwf	___ftge@ff2
  2822  01C4  3020               	movlw	32
  2823  01C5  00A4               	movwf	___ftge@ff2+1
  2824  01C6  3041               	movlw	65
  2825  01C7  00A5               	movwf	___ftge@ff2+2
  2826  01C8  3196  26E3  3180   	fcall	___ftge
  2827  01CB  1C03               	btfss	3,0
  2828  01CC  29D2               	goto	l375
  2829                           
  2830                           ;doprnt.c: 851: exp++;
  2831  01CD  3001               	movlw	1
  2832  01CE  0021               	movlb	1	; select bank1
  2833  01CF  07BE               	addwf	printf@exp^(0+128),f
  2834  01D0  3000               	movlw	0
  2835  01D1                     L1:	
  2836  01D1  3DBF               	addwfc	(printf@exp+1)^(0+128),f
  2837  01D2                     l375:	
  2838                           
  2839                           ;doprnt.c: 852: }
  2840                           ;doprnt.c: 1112: if(prec <= 12)
  2841  01D2  0021               	movlb	1	; select bank1
  2842  01D3  0839               	movf	(printf@prec+1)^(0+128),w
  2843  01D4  3A80               	xorlw	128
  2844  01D5  0020               	movlb	0	; select bank0
  2845  01D6  00E7               	movwf	??_printf
  2846  01D7  3080               	movlw	128
  2847  01D8  0267               	subwf	??_printf,w
  2848  01D9  1D03               	skipz
  2849  01DA  29DE               	goto	u3655
  2850  01DB  300D               	movlw	13
  2851  01DC  0021               	movlb	1	; select bank1
  2852  01DD  0238               	subwf	printf@prec^(0+128),w
  2853  01DE                     u3655:	
  2854  01DE  1803               	skipnc
  2855  01DF  2A07               	goto	l2893
  2856                           
  2857                           ;doprnt.c: 1113: fval += fround(prec);
  2858  01E0  0021               	movlb	1	; select bank1
  2859  01E1  0838               	movf	printf@prec^(0+128),w
  2860  01E2  3185  25C7  3180   	fcall	_fround
  2861  01E5  0020               	movlb	0	; select bank0
  2862  01E6  0846               	movf	?_fround,w
  2863  01E7  00D4               	movwf	___ftadd@f1
  2864  01E8  0847               	movf	?_fround+1,w
  2865  01E9  00D5               	movwf	___ftadd@f1+1
  2866  01EA  0848               	movf	?_fround+2,w
  2867  01EB  00D6               	movwf	___ftadd@f1+2
  2868  01EC  0021               	movlb	1	; select bank1
  2869  01ED  0844               	movf	printf@fval^(0+128),w
  2870  01EE  0020               	movlb	0	; select bank0
  2871  01EF  00D7               	movwf	___ftadd@f2
  2872  01F0  0021               	movlb	1	; select bank1
  2873  01F1  0845               	movf	(printf@fval+1)^(0+128),w
  2874  01F2  0020               	movlb	0	; select bank0
  2875  01F3  00D8               	movwf	___ftadd@f2+1
  2876  01F4  0021               	movlb	1	; select bank1
  2877  01F5  0846               	movf	(printf@fval+2)^(0+128),w
  2878  01F6  0020               	movlb	0	; select bank0
  2879  01F7  00D9               	movwf	___ftadd@f2+2
  2880  01F8  318B  23A7  3180   	fcall	___ftadd
  2881  01FB  0020               	movlb	0	; select bank0
  2882  01FC  0854               	movf	?___ftadd,w
  2883  01FD  0021               	movlb	1	; select bank1
  2884  01FE  00C4               	movwf	printf@fval^(0+128)
  2885  01FF  0020               	movlb	0	; select bank0
  2886  0200  0855               	movf	?___ftadd+1,w
  2887  0201  0021               	movlb	1	; select bank1
  2888  0202  00C5               	movwf	(printf@fval+1)^(0+128)
  2889  0203  0020               	movlb	0	; select bank0
  2890  0204  0856               	movf	?___ftadd+2,w
  2891  0205  0021               	movlb	1	; select bank1
  2892  0206  00C6               	movwf	(printf@fval+2)^(0+128)
  2893  0207                     l2893:	
  2894                           
  2895                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2896  0207  0021               	movlb	1	; select bank1
  2897  0208  083F               	movf	(printf@exp+1)^(0+128),w
  2898  0209  3A80               	xorlw	128
  2899  020A  0020               	movlb	0	; select bank0
  2900  020B  00E7               	movwf	??_printf
  2901  020C  3080               	movlw	128
  2902  020D  0267               	subwf	??_printf,w
  2903  020E  1D03               	skipz
  2904  020F  2A13               	goto	u3665
  2905  0210  300A               	movlw	10
  2906  0211  0021               	movlb	1	; select bank1
  2907  0212  023E               	subwf	printf@exp^(0+128),w
  2908  0213                     u3665:	
  2909  0213  1803               	skipnc
  2910  0214  2A3E               	goto	l2901
  2911  0215  0021               	movlb	1	; select bank1
  2912  0216  0846               	movf	(printf@fval+2)^(0+128),w
  2913  0217  0445               	iorwf	(printf@fval+1)^(0+128),w
  2914  0218  0444               	iorwf	printf@fval^(0+128),w
  2915  0219  1903               	skipnz
  2916  021A  2A9D               	goto	l2915
  2917  021B  0844               	movf	printf@fval^(0+128),w
  2918  021C  0020               	movlb	0	; select bank0
  2919  021D  00CF               	movwf	___fttol@f1
  2920  021E  0021               	movlb	1	; select bank1
  2921  021F  0845               	movf	(printf@fval+1)^(0+128),w
  2922  0220  0020               	movlb	0	; select bank0
  2923  0221  00D0               	movwf	___fttol@f1+1
  2924  0222  0021               	movlb	1	; select bank1
  2925  0223  0846               	movf	(printf@fval+2)^(0+128),w
  2926  0224  0020               	movlb	0	; select bank0
  2927  0225  00D1               	movwf	___fttol@f1+2
  2928  0226  3189  2152  3180   	fcall	___fttol
  2929  0229  0020               	movlb	0	; select bank0
  2930  022A  0852               	movf	?___fttol+3,w
  2931  022B  0451               	iorwf	?___fttol+2,w
  2932  022C  0450               	iorwf	?___fttol+1,w
  2933  022D  044F               	iorwf	?___fttol,w
  2934  022E  1D03               	skipz
  2935  022F  2A9D               	goto	l2915
  2936  0230  0021               	movlb	1	; select bank1
  2937  0231  083F               	movf	(printf@exp+1)^(0+128),w
  2938  0232  3A80               	xorlw	128
  2939  0233  0020               	movlb	0	; select bank0
  2940  0234  00E7               	movwf	??_printf
  2941  0235  3080               	movlw	128
  2942  0236  0267               	subwf	??_printf,w
  2943  0237  1D03               	skipz
  2944  0238  2A3C               	goto	u3695
  2945  0239  3002               	movlw	2
  2946  023A  0021               	movlb	1	; select bank1
  2947  023B  023E               	subwf	printf@exp^(0+128),w
  2948  023C                     u3695:	
  2949  023C  1C03               	skipc
  2950  023D  2A9D               	goto	l2915
  2951  023E                     l2901:	
  2952                           
  2953                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2954  023E  0021               	movlb	1	; select bank1
  2955  023F  0840               	movf	printf@tmpval^(0+128),w
  2956  0240  0020               	movlb	0	; select bank0
  2957  0241  00A0               	movwf	___ftge@ff1
  2958  0242  0021               	movlb	1	; select bank1
  2959  0243  0841               	movf	(printf@tmpval+1)^(0+128),w
  2960  0244  0020               	movlb	0	; select bank0
  2961  0245  00A1               	movwf	___ftge@ff1+1
  2962  0246  0021               	movlb	1	; select bank1
  2963  0247  0842               	movf	(printf@tmpval+2)^(0+128),w
  2964  0248  0020               	movlb	0	; select bank0
  2965  0249  00A2               	movwf	___ftge@ff1+2
  2966  024A  3070               	movlw	112
  2967  024B  00A3               	movwf	___ftge@ff2
  2968  024C  3089               	movlw	137
  2969  024D  00A4               	movwf	___ftge@ff2+1
  2970  024E  3040               	movlw	64
  2971  024F  00A5               	movwf	___ftge@ff2+2
  2972  0250  3196  26E3  3180   	fcall	___ftge
  2973  0253  1803               	btfsc	3,0
  2974  0254  2A57               	goto	l2905
  2975                           
  2976                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2977  0255  30F7               	movlw	247
  2978  0256  2A58               	goto	L2
  2979  0257                     l2905:	
  2980                           ;doprnt.c: 1122: }else{
  2981                           
  2982                           
  2983                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2984  0257  30F8               	movlw	248
  2985  0258                     L2:	
  2986  0258  0021               	movlb	1	; select bank1
  2987  0259  07BE               	addwf	printf@exp^(0+128),f
  2988  025A  30FF               	movlw	255
  2989  025B  3DBF               	addwfc	(printf@exp+1)^(0+128),f
  2990                           
  2991                           ;doprnt.c: 1124: }
  2992                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2993  025C  083E               	movf	printf@exp^(0+128),w
  2994  025D  318D  25BA  3180   	fcall	_scale
  2995  0260  0020               	movlb	0	; select bank0
  2996  0261  0846               	movf	?_scale,w
  2997  0262  0021               	movlb	1	; select bank1
  2998  0263  00C0               	movwf	printf@tmpval^(0+128)
  2999  0264  0020               	movlb	0	; select bank0
  3000  0265  0847               	movf	?_scale+1,w
  3001  0266  0021               	movlb	1	; select bank1
  3002  0267  00C1               	movwf	(printf@tmpval+1)^(0+128)
  3003  0268  0020               	movlb	0	; select bank0
  3004  0269  0848               	movf	?_scale+2,w
  3005  026A  0021               	movlb	1	; select bank1
  3006  026B  00C2               	movwf	(printf@tmpval+2)^(0+128)
  3007                           
  3008                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3009  026C  0844               	movf	printf@fval^(0+128),w
  3010  026D  0020               	movlb	0	; select bank0
  3011  026E  00A0               	movwf	__tdiv_to_l_@f1
  3012  026F  0021               	movlb	1	; select bank1
  3013  0270  0845               	movf	(printf@fval+1)^(0+128),w
  3014  0271  0020               	movlb	0	; select bank0
  3015  0272  00A1               	movwf	__tdiv_to_l_@f1+1
  3016  0273  0021               	movlb	1	; select bank1
  3017  0274  0846               	movf	(printf@fval+2)^(0+128),w
  3018  0275  0020               	movlb	0	; select bank0
  3019  0276  00A2               	movwf	__tdiv_to_l_@f1+2
  3020  0277  0021               	movlb	1	; select bank1
  3021  0278  0840               	movf	printf@tmpval^(0+128),w
  3022  0279  0020               	movlb	0	; select bank0
  3023  027A  00A3               	movwf	__tdiv_to_l_@f2
  3024  027B  0021               	movlb	1	; select bank1
  3025  027C  0841               	movf	(printf@tmpval+1)^(0+128),w
  3026  027D  0020               	movlb	0	; select bank0
  3027  027E  00A4               	movwf	__tdiv_to_l_@f2+1
  3028  027F  0021               	movlb	1	; select bank1
  3029  0280  0842               	movf	(printf@tmpval+2)^(0+128),w
  3030  0281  0020               	movlb	0	; select bank0
  3031  0282  00A5               	movwf	__tdiv_to_l_@f2+2
  3032  0283  3187  272D  3180   	fcall	__tdiv_to_l_
  3033  0286  0020               	movlb	0	; select bank0
  3034  0287  0823               	movf	?__tdiv_to_l_+3,w
  3035  0288  0021               	movlb	1	; select bank1
  3036  0289  00BD               	movwf	(printf@val+3)^(0+128)
  3037  028A  0020               	movlb	0	; select bank0
  3038  028B  0822               	movf	?__tdiv_to_l_+2,w
  3039  028C  0021               	movlb	1	; select bank1
  3040  028D  00BC               	movwf	(printf@val+2)^(0+128)
  3041  028E  0020               	movlb	0	; select bank0
  3042  028F  0821               	movf	?__tdiv_to_l_+1,w
  3043  0290  0021               	movlb	1	; select bank1
  3044  0291  00BB               	movwf	(printf@val+1)^(0+128)
  3045  0292  0020               	movlb	0	; select bank0
  3046  0293  0820               	movf	?__tdiv_to_l_,w
  3047  0294  0021               	movlb	1	; select bank1
  3048  0295  00BA               	movwf	printf@val^(0+128)
  3049                           
  3050                           ;doprnt.c: 1129: fval = 0.0;
  3051  0296  3000               	movlw	0
  3052  0297  00C4               	movwf	printf@fval^(0+128)
  3053  0298  3000               	movlw	0
  3054  0299  00C5               	movwf	(printf@fval+1)^(0+128)
  3055  029A  3000               	movlw	0
  3056  029B  00C6               	movwf	(printf@fval+2)^(0+128)
  3057                           
  3058                           ;doprnt.c: 1130: } else {
  3059  029C  2AF2               	goto	l2919
  3060  029D                     l2915:	
  3061                           
  3062                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3063  029D  0021               	movlb	1	; select bank1
  3064  029E  0844               	movf	printf@fval^(0+128),w
  3065  029F  0020               	movlb	0	; select bank0
  3066  02A0  00CF               	movwf	___fttol@f1
  3067  02A1  0021               	movlb	1	; select bank1
  3068  02A2  0845               	movf	(printf@fval+1)^(0+128),w
  3069  02A3  0020               	movlb	0	; select bank0
  3070  02A4  00D0               	movwf	___fttol@f1+1
  3071  02A5  0021               	movlb	1	; select bank1
  3072  02A6  0846               	movf	(printf@fval+2)^(0+128),w
  3073  02A7  0020               	movlb	0	; select bank0
  3074  02A8  00D1               	movwf	___fttol@f1+2
  3075  02A9  3189  2152  3180   	fcall	___fttol
  3076  02AC  0020               	movlb	0	; select bank0
  3077  02AD  0852               	movf	?___fttol+3,w
  3078  02AE  0021               	movlb	1	; select bank1
  3079  02AF  00BD               	movwf	(printf@val+3)^(0+128)
  3080  02B0  0020               	movlb	0	; select bank0
  3081  02B1  0851               	movf	?___fttol+2,w
  3082  02B2  0021               	movlb	1	; select bank1
  3083  02B3  00BC               	movwf	(printf@val+2)^(0+128)
  3084  02B4  0020               	movlb	0	; select bank0
  3085  02B5  0850               	movf	?___fttol+1,w
  3086  02B6  0021               	movlb	1	; select bank1
  3087  02B7  00BB               	movwf	(printf@val+1)^(0+128)
  3088  02B8  0020               	movlb	0	; select bank0
  3089  02B9  084F               	movf	?___fttol,w
  3090  02BA  0021               	movlb	1	; select bank1
  3091  02BB  00BA               	movwf	printf@val^(0+128)
  3092                           
  3093                           ;doprnt.c: 1132: fval -= (double)val;
  3094  02BC  083D               	movf	(printf@val+3)^(0+128),w
  3095  02BD  0020               	movlb	0	; select bank0
  3096  02BE  00AB               	movwf	___lltoft@c+3
  3097  02BF  0021               	movlb	1	; select bank1
  3098  02C0  083C               	movf	(printf@val+2)^(0+128),w
  3099  02C1  0020               	movlb	0	; select bank0
  3100  02C2  00AA               	movwf	___lltoft@c+2
  3101  02C3  0021               	movlb	1	; select bank1
  3102  02C4  083B               	movf	(printf@val+1)^(0+128),w
  3103  02C5  0020               	movlb	0	; select bank0
  3104  02C6  00A9               	movwf	___lltoft@c+1
  3105  02C7  0021               	movlb	1	; select bank1
  3106  02C8  083A               	movf	printf@val^(0+128),w
  3107  02C9  0020               	movlb	0	; select bank0
  3108  02CA  00A8               	movwf	___lltoft@c
  3109  02CB  3196  26B9  3180   	fcall	___lltoft
  3110  02CE  0020               	movlb	0	; select bank0
  3111  02CF  0828               	movf	?___lltoft,w
  3112  02D0  00E1               	movwf	___ftsub@f2
  3113  02D1  0829               	movf	?___lltoft+1,w
  3114  02D2  00E2               	movwf	___ftsub@f2+1
  3115  02D3  082A               	movf	?___lltoft+2,w
  3116  02D4  00E3               	movwf	___ftsub@f2+2
  3117  02D5  0021               	movlb	1	; select bank1
  3118  02D6  0844               	movf	printf@fval^(0+128),w
  3119  02D7  0020               	movlb	0	; select bank0
  3120  02D8  00E4               	movwf	___ftsub@f1
  3121  02D9  0021               	movlb	1	; select bank1
  3122  02DA  0845               	movf	(printf@fval+1)^(0+128),w
  3123  02DB  0020               	movlb	0	; select bank0
  3124  02DC  00E5               	movwf	___ftsub@f1+1
  3125  02DD  0021               	movlb	1	; select bank1
  3126  02DE  0846               	movf	(printf@fval+2)^(0+128),w
  3127  02DF  0020               	movlb	0	; select bank0
  3128  02E0  00E6               	movwf	___ftsub@f1+2
  3129  02E1  3196  2676  3180   	fcall	___ftsub
  3130  02E4  0020               	movlb	0	; select bank0
  3131  02E5  0861               	movf	?___ftsub,w
  3132  02E6  0021               	movlb	1	; select bank1
  3133  02E7  00C4               	movwf	printf@fval^(0+128)
  3134  02E8  0020               	movlb	0	; select bank0
  3135  02E9  0862               	movf	?___ftsub+1,w
  3136  02EA  0021               	movlb	1	; select bank1
  3137  02EB  00C5               	movwf	(printf@fval+1)^(0+128)
  3138  02EC  0020               	movlb	0	; select bank0
  3139  02ED  0863               	movf	?___ftsub+2,w
  3140  02EE  0021               	movlb	1	; select bank1
  3141  02EF  00C6               	movwf	(printf@fval+2)^(0+128)
  3142                           
  3143                           ;doprnt.c: 1133: exp = 0;
  3144  02F0  01BE               	clrf	printf@exp^(0+128)
  3145  02F1  01BF               	clrf	(printf@exp+1)^(0+128)
  3146  02F2                     l2919:	
  3147                           
  3148                           ;doprnt.c: 1134: }
  3149                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3150  02F2  01C7               	clrf	printf@c^(0+128)
  3151  02F3  0AC7               	incf	printf@c^(0+128),f
  3152  02F4  300A               	movlw	10
  3153  02F5  0647               	xorwf	printf@c^(0+128),w
  3154  02F6  1903               	btfsc	3,2
  3155  02F7  2B2F               	goto	l2931
  3156  02F8                     l2925:	
  3157                           
  3158                           ;doprnt.c: 1137: if(val < dpowers[c])
  3159  02F8  0847               	movf	printf@c^(0+128),w
  3160  02F9  0020               	movlb	0	; select bank0
  3161  02FA  00E7               	movwf	??_printf
  3162  02FB  01E8               	clrf	??_printf+1
  3163  02FC  35E7               	lslf	??_printf,f
  3164  02FD  0DE8               	rlf	??_printf+1,f
  3165  02FE  35E7               	lslf	??_printf,f
  3166  02FF  0DE8               	rlf	??_printf+1,f
  3167  0300  3000               	movlw	low (_dpowers| (0+32768))
  3168  0301  0767               	addwf	??_printf,w
  3169  0302  0084               	movwf	4
  3170  0303  3090               	movlw	high (_dpowers| (0+32768))
  3171  0304  3D68               	addwfc	??_printf+1,w
  3172  0305  0085               	movwf	5
  3173  0306  3F00               	moviw [0]fsr0
  3174  0307  00E9               	movwf	??_printf+2
  3175  0308  3F01               	moviw [1]fsr0
  3176  0309  00EA               	movwf	??_printf+3
  3177  030A  3F02               	moviw [2]fsr0
  3178  030B  00EB               	movwf	??_printf+4
  3179  030C  3F03               	moviw [3]fsr0
  3180  030D  00EC               	movwf	??_printf+5
  3181  030E  086C               	movf	??_printf+5,w
  3182  030F  0021               	movlb	1	; select bank1
  3183  0310  023D               	subwf	(printf@val+3)^(0+128),w
  3184  0311  1D03               	skipz
  3185  0312  2B23               	goto	u3725
  3186  0313  0020               	movlb	0	; select bank0
  3187  0314  086B               	movf	??_printf+4,w
  3188  0315  0021               	movlb	1	; select bank1
  3189  0316  023C               	subwf	(printf@val+2)^(0+128),w
  3190  0317  1D03               	skipz
  3191  0318  2B23               	goto	u3725
  3192  0319  0020               	movlb	0	; select bank0
  3193  031A  086A               	movf	??_printf+3,w
  3194  031B  0021               	movlb	1	; select bank1
  3195  031C  023B               	subwf	(printf@val+1)^(0+128),w
  3196  031D  1D03               	skipz
  3197  031E  2B23               	goto	u3725
  3198  031F  0020               	movlb	0	; select bank0
  3199  0320  0869               	movf	??_printf+2,w
  3200  0321  0021               	movlb	1	; select bank1
  3201  0322  023A               	subwf	printf@val^(0+128),w
  3202  0323                     u3725:	
  3203  0323  1C03               	btfss	3,0
  3204  0324  2B2F               	goto	l2931
  3205                           
  3206                           ;doprnt.c: 1138: break;
  3207  0325  3001               	movlw	1
  3208  0326  0020               	movlb	0	; select bank0
  3209  0327  00E7               	movwf	??_printf
  3210  0328  0867               	movf	??_printf,w
  3211  0329  0021               	movlb	1	; select bank1
  3212  032A  07C7               	addwf	printf@c^(0+128),f
  3213  032B  300A               	movlw	10
  3214  032C  0647               	xorwf	printf@c^(0+128),w
  3215  032D  1D03               	btfss	3,2
  3216  032E  2AF8               	goto	l2925
  3217  032F                     l2931:	
  3218                           
  3219                           ;doprnt.c: 1175: {
  3220                           ;doprnt.c: 1188: if(flag & 0x03)
  3221  032F  3003               	movlw	3
  3222  0330  0535               	andwf	printf@flag^(0+128),w
  3223  0331  0020               	movlb	0	; select bank0
  3224  0332  00E7               	movwf	??_printf
  3225  0333  3000               	movlw	0
  3226  0334  0021               	movlb	1	; select bank1
  3227  0335  0536               	andwf	(printf@flag+1)^(0+128),w
  3228  0336  0020               	movlb	0	; select bank0
  3229  0337  00E8               	movwf	??_printf+1
  3230  0338  0867               	movf	??_printf,w
  3231  0339  0468               	iorwf	??_printf+1,w
  3232  033A  1903               	btfsc	3,2
  3233  033B  2B40               	goto	l2941
  3234                           
  3235                           ;doprnt.c: 1190: (putch('-') );
  3236  033C  302D               	movlw	45
  3237  033D                     L5:	
  3238  033D  3195  2550  3180   	fcall	_putch
  3239  0340                     l2941:	
  3240                           ;doprnt.c: 1195: }
  3241                           ;doprnt.c: 1196: while(c--) {
  3242                           
  3243  0340  30FF               	movlw	255
  3244  0341  0020               	movlb	0	; select bank0
  3245  0342  00E7               	movwf	??_printf
  3246  0343  0867               	movf	??_printf,w
  3247  0344  0021               	movlb	1	; select bank1
  3248  0345  07C7               	addwf	printf@c^(0+128),f
  3249  0346  0A47               	incf	printf@c^(0+128),w
  3250  0347  1903               	btfsc	3,2
  3251  0348  2BBB               	goto	l2947
  3252                           
  3253                           ;doprnt.c: 1200: {
  3254                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3255  0349  0021               	movlb	1	; select bank1
  3256  034A  0847               	movf	printf@c^(0+128),w
  3257  034B  0020               	movlb	0	; select bank0
  3258  034C  00E7               	movwf	??_printf
  3259  034D  01E8               	clrf	??_printf+1
  3260  034E  35E7               	lslf	??_printf,f
  3261  034F  0DE8               	rlf	??_printf+1,f
  3262  0350  35E7               	lslf	??_printf,f
  3263  0351  0DE8               	rlf	??_printf+1,f
  3264  0352  3000               	movlw	low (_dpowers| (0+32768))
  3265  0353  0767               	addwf	??_printf,w
  3266  0354  0084               	movwf	4
  3267  0355  3090               	movlw	high (_dpowers| (0+32768))
  3268  0356  3D68               	addwfc	??_printf+1,w
  3269  0357  0085               	movwf	5
  3270  0358  3F00               	moviw [0]fsr0
  3271  0359  00A0               	movwf	___lldiv@divisor
  3272  035A  3F01               	moviw [1]fsr0
  3273  035B  00A1               	movwf	___lldiv@divisor+1
  3274  035C  3F02               	moviw [2]fsr0
  3275  035D  00A2               	movwf	___lldiv@divisor+2
  3276  035E  3F03               	moviw [3]fsr0
  3277  035F  00A3               	movwf	___lldiv@divisor+3
  3278  0360  0021               	movlb	1	; select bank1
  3279  0361  083D               	movf	(printf@val+3)^(0+128),w
  3280  0362  0020               	movlb	0	; select bank0
  3281  0363  00A7               	movwf	___lldiv@dividend+3
  3282  0364  0021               	movlb	1	; select bank1
  3283  0365  083C               	movf	(printf@val+2)^(0+128),w
  3284  0366  0020               	movlb	0	; select bank0
  3285  0367  00A6               	movwf	___lldiv@dividend+2
  3286  0368  0021               	movlb	1	; select bank1
  3287  0369  083B               	movf	(printf@val+1)^(0+128),w
  3288  036A  0020               	movlb	0	; select bank0
  3289  036B  00A5               	movwf	___lldiv@dividend+1
  3290  036C  0021               	movlb	1	; select bank1
  3291  036D  083A               	movf	printf@val^(0+128),w
  3292  036E  0020               	movlb	0	; select bank0
  3293  036F  00A4               	movwf	___lldiv@dividend
  3294  0370  3188  209A  3180   	fcall	___lldiv
  3295  0373  0020               	movlb	0	; select bank0
  3296  0374  0823               	movf	?___lldiv+3,w
  3297  0375  0021               	movlb	1	; select bank1
  3298  0376  00C3               	movwf	(printf@tmpval+3)^(0+128)
  3299  0377  0020               	movlb	0	; select bank0
  3300  0378  0822               	movf	?___lldiv+2,w
  3301  0379  0021               	movlb	1	; select bank1
  3302  037A  00C2               	movwf	(printf@tmpval+2)^(0+128)
  3303  037B  0020               	movlb	0	; select bank0
  3304  037C  0821               	movf	?___lldiv+1,w
  3305  037D  0021               	movlb	1	; select bank1
  3306  037E  00C1               	movwf	(printf@tmpval+1)^(0+128)
  3307  037F  0020               	movlb	0	; select bank0
  3308  0380  0820               	movf	?___lldiv,w
  3309  0381  0021               	movlb	1	; select bank1
  3310  0382  00C0               	movwf	printf@tmpval^(0+128)
  3311                           
  3312                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3313  0383  3000               	movlw	0
  3314  0384  0020               	movlb	0	; select bank0
  3315  0385  00B1               	movwf	___llmod@divisor+3
  3316  0386  3000               	movlw	0
  3317  0387  00B0               	movwf	___llmod@divisor+2
  3318  0388  3000               	movlw	0
  3319  0389  00AF               	movwf	___llmod@divisor+1
  3320  038A  300A               	movlw	10
  3321  038B  00AE               	movwf	___llmod@divisor
  3322  038C  0021               	movlb	1	; select bank1
  3323  038D  0843               	movf	(printf@tmpval+3)^(0+128),w
  3324  038E  0020               	movlb	0	; select bank0
  3325  038F  00B5               	movwf	___llmod@dividend+3
  3326  0390  0021               	movlb	1	; select bank1
  3327  0391  0842               	movf	(printf@tmpval+2)^(0+128),w
  3328  0392  0020               	movlb	0	; select bank0
  3329  0393  00B4               	movwf	___llmod@dividend+2
  3330  0394  0021               	movlb	1	; select bank1
  3331  0395  0841               	movf	(printf@tmpval+1)^(0+128),w
  3332  0396  0020               	movlb	0	; select bank0
  3333  0397  00B3               	movwf	___llmod@dividend+1
  3334  0398  0021               	movlb	1	; select bank1
  3335  0399  0840               	movf	printf@tmpval^(0+128),w
  3336  039A  0020               	movlb	0	; select bank0
  3337  039B  00B2               	movwf	___llmod@dividend
  3338  039C  3197  271F  3180   	fcall	___llmod
  3339  039F  0020               	movlb	0	; select bank0
  3340  03A0  0831               	movf	?___llmod+3,w
  3341  03A1  0021               	movlb	1	; select bank1
  3342  03A2  00C3               	movwf	(printf@tmpval+3)^(0+128)
  3343  03A3  0020               	movlb	0	; select bank0
  3344  03A4  0830               	movf	?___llmod+2,w
  3345  03A5  0021               	movlb	1	; select bank1
  3346  03A6  00C2               	movwf	(printf@tmpval+2)^(0+128)
  3347  03A7  0020               	movlb	0	; select bank0
  3348  03A8  082F               	movf	?___llmod+1,w
  3349  03A9  0021               	movlb	1	; select bank1
  3350  03AA  00C1               	movwf	(printf@tmpval+1)^(0+128)
  3351  03AB  0020               	movlb	0	; select bank0
  3352  03AC  082E               	movf	?___llmod,w
  3353  03AD  0021               	movlb	1	; select bank1
  3354  03AE  00C0               	movwf	printf@tmpval^(0+128)
  3355                           
  3356                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  3357  03AF  0840               	movf	printf@tmpval^(0+128),w
  3358  03B0  3E30               	addlw	48
  3359  03B1  2B3D               	goto	L5
  3360  03B2                     l2943:	
  3361                           ;doprnt.c: 1204: }
  3362                           ;doprnt.c: 1206: }
  3363                           ;doprnt.c: 1207: while(exp > 0) {
  3364                           
  3365                           
  3366                           ;doprnt.c: 1208: (putch('0') );
  3367  03B2  3030               	movlw	48
  3368  03B3  3195  2550  3180   	fcall	_putch
  3369                           
  3370                           ;doprnt.c: 1209: exp--;
  3371  03B6  30FF               	movlw	255
  3372  03B7  0021               	movlb	1	; select bank1
  3373  03B8  07BE               	addwf	printf@exp^(0+128),f
  3374  03B9  30FF               	movlw	255
  3375  03BA  3DBF               	addwfc	(printf@exp+1)^(0+128),f
  3376  03BB                     l2947:	
  3377  03BB  083F               	movf	(printf@exp+1)^(0+128),w
  3378  03BC  3A80               	xorlw	128
  3379  03BD  0020               	movlb	0	; select bank0
  3380  03BE  00E7               	movwf	??_printf
  3381  03BF  3080               	movlw	128
  3382  03C0  0267               	subwf	??_printf,w
  3383  03C1  1D03               	skipz
  3384  03C2  2BC6               	goto	u3765
  3385  03C3  3001               	movlw	1
  3386  03C4  0021               	movlb	1	; select bank1
  3387  03C5  023E               	subwf	printf@exp^(0+128),w
  3388  03C6                     u3765:	
  3389  03C6  1803               	skipnc
  3390  03C7  2BB2               	goto	l2943
  3391                           
  3392                           ;doprnt.c: 1210: }
  3393                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3394  03C8  0021               	movlb	1	; select bank1
  3395  03C9  0839               	movf	(printf@prec+1)^(0+128),w
  3396  03CA  3A80               	xorlw	128
  3397  03CB  0020               	movlb	0	; select bank0
  3398  03CC  00E7               	movwf	??_printf
  3399  03CD  3080               	movlw	128
  3400  03CE  0267               	subwf	??_printf,w
  3401  03CF  1D03               	skipz
  3402  03D0  2BD4               	goto	u3775
  3403  03D1  3009               	movlw	9
  3404  03D2  0021               	movlb	1	; select bank1
  3405  03D3  0238               	subwf	printf@prec^(0+128),w
  3406  03D4                     u3775:	
  3407  03D4  1C03               	skipc
  3408  03D5  2BD8               	goto	l2953
  3409                           
  3410                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3411  03D6  3008               	movlw	8
  3412  03D7  2BDA               	goto	L3
  3413  03D8                     l2953:	
  3414                           
  3415                           ;doprnt.c: 1213: else
  3416                           ;doprnt.c: 1214: c = prec;
  3417  03D8  0021               	movlb	1	; select bank1
  3418  03D9  0838               	movf	printf@prec^(0+128),w
  3419  03DA                     L3:	
  3420  03DA  0020               	movlb	0	; select bank0
  3421  03DB  00E7               	movwf	??_printf
  3422  03DC  0867               	movf	??_printf,w
  3423  03DD  0021               	movlb	1	; select bank1
  3424  03DE  00C7               	movwf	printf@c^(0+128)
  3425                           
  3426                           ;doprnt.c: 1215: prec -= c;
  3427  03DF  0847               	movf	printf@c^(0+128),w
  3428  03E0  0020               	movlb	0	; select bank0
  3429  03E1  00E7               	movwf	??_printf
  3430  03E2  01E8               	clrf	??_printf+1
  3431  03E3  1BE7               	btfsc	??_printf,7
  3432  03E4  03E8               	decf	??_printf+1,f
  3433  03E5  0867               	movf	??_printf,w
  3434  03E6  0021               	movlb	1	; select bank1
  3435  03E7  02B8               	subwf	printf@prec^(0+128),f
  3436  03E8  0020               	movlb	0	; select bank0
  3437  03E9  0868               	movf	??_printf+1,w
  3438  03EA  0021               	movlb	1	; select bank1
  3439  03EB  3BB9               	subwfb	(printf@prec+1)^(0+128),f
  3440                           
  3441                           ;doprnt.c: 1219: if(c)
  3442  03EC  0847               	movf	printf@c^(0+128),w
  3443  03ED  1903               	btfsc	3,2
  3444  03EE  2BF3               	goto	l2959
  3445                           
  3446                           ;doprnt.c: 1221: (putch('.') );
  3447  03EF  302E               	movlw	46
  3448  03F0  3195  2550  3180   	fcall	_putch
  3449  03F3                     l2959:	
  3450                           
  3451                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3452  03F3  0021               	movlb	1	; select bank1
  3453  03F4  0847               	movf	printf@c^(0+128),w
  3454  03F5  318D  25BA  3180   	fcall	_scale
  3455  03F8  0020               	movlb	0	; select bank0
  3456  03F9  0846               	movf	?_scale,w
  3457  03FA  0021               	movlb	1	; select bank1
  3458  03FB  00B2               	movwf	_printf$1315^(0+128)
  3459  03FC  0020               	movlb	0	; select bank0
  3460  03FD  0847               	movf	?_scale+1,w
  3461  03FE  0021               	movlb	1	; select bank1
  3462  03FF  00B3               	movwf	(_printf$1315+1)^(0+128)
  3463  0400  0020               	movlb	0	; select bank0
  3464  0401  0848               	movf	?_scale+2,w
  3465  0402  0021               	movlb	1	; select bank1
  3466  0403  00B4               	movwf	(_printf$1315+2)^(0+128)
  3467                           
  3468                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3469  0404  0832               	movf	_printf$1315^(0+128),w
  3470  0405  0020               	movlb	0	; select bank0
  3471  0406  00B9               	movwf	___ftmul@f2
  3472  0407  0021               	movlb	1	; select bank1
  3473  0408  0833               	movf	(_printf$1315+1)^(0+128),w
  3474  0409  0020               	movlb	0	; select bank0
  3475  040A  00BA               	movwf	___ftmul@f2+1
  3476  040B  0021               	movlb	1	; select bank1
  3477  040C  0834               	movf	(_printf$1315+2)^(0+128),w
  3478  040D  0020               	movlb	0	; select bank0
  3479  040E  00BB               	movwf	___ftmul@f2+2
  3480  040F  0021               	movlb	1	; select bank1
  3481  0410  0844               	movf	printf@fval^(0+128),w
  3482  0411  0020               	movlb	0	; select bank0
  3483  0412  00B6               	movwf	___ftmul@f1
  3484  0413  0021               	movlb	1	; select bank1
  3485  0414  0845               	movf	(printf@fval+1)^(0+128),w
  3486  0415  0020               	movlb	0	; select bank0
  3487  0416  00B7               	movwf	___ftmul@f1+1
  3488  0417  0021               	movlb	1	; select bank1
  3489  0418  0846               	movf	(printf@fval+2)^(0+128),w
  3490  0419  0020               	movlb	0	; select bank0
  3491  041A  00B8               	movwf	___ftmul@f1+2
  3492  041B  318A  22F3  3180   	fcall	___ftmul
  3493  041E  0020               	movlb	0	; select bank0
  3494  041F  0836               	movf	?___ftmul,w
  3495  0420  00CF               	movwf	___fttol@f1
  3496  0421  0837               	movf	?___ftmul+1,w
  3497  0422  00D0               	movwf	___fttol@f1+1
  3498  0423  0838               	movf	?___ftmul+2,w
  3499  0424  00D1               	movwf	___fttol@f1+2
  3500  0425  3189  2152  3180   	fcall	___fttol
  3501  0428  0020               	movlb	0	; select bank0
  3502  0429  0852               	movf	?___fttol+3,w
  3503  042A  0021               	movlb	1	; select bank1
  3504  042B  00BD               	movwf	(printf@val+3)^(0+128)
  3505  042C  0020               	movlb	0	; select bank0
  3506  042D  0851               	movf	?___fttol+2,w
  3507  042E  0021               	movlb	1	; select bank1
  3508  042F  00BC               	movwf	(printf@val+2)^(0+128)
  3509  0430  0020               	movlb	0	; select bank0
  3510  0431  0850               	movf	?___fttol+1,w
  3511  0432  0021               	movlb	1	; select bank1
  3512  0433  00BB               	movwf	(printf@val+1)^(0+128)
  3513  0434  0020               	movlb	0	; select bank0
  3514  0435  084F               	movf	?___fttol,w
  3515  0436                     L4:	
  3516  0436  0021               	movlb	1	; select bank1
  3517  0437  00BA               	movwf	printf@val^(0+128)
  3518  0438  30FF               	movlw	255
  3519  0439  0020               	movlb	0	; select bank0
  3520  043A  00E7               	movwf	??_printf
  3521  043B  0867               	movf	??_printf,w
  3522  043C  0021               	movlb	1	; select bank1
  3523  043D  07C7               	addwf	printf@c^(0+128),f
  3524  043E  0A47               	incf	printf@c^(0+128),w
  3525  043F  1903               	btfsc	3,2
  3526  0440  2CED               	goto	l2977
  3527                           
  3528                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3529                           
  3530                           ;doprnt.c: 1228: while(c--) {
  3531  0441  0847               	movf	printf@c^(0+128),w
  3532  0442  0020               	movlb	0	; select bank0
  3533  0443  00E7               	movwf	??_printf
  3534  0444  01E8               	clrf	??_printf+1
  3535  0445  35E7               	lslf	??_printf,f
  3536  0446  0DE8               	rlf	??_printf+1,f
  3537  0447  35E7               	lslf	??_printf,f
  3538  0448  0DE8               	rlf	??_printf+1,f
  3539  0449  3000               	movlw	low (_dpowers| (0+32768))
  3540  044A  0767               	addwf	??_printf,w
  3541  044B  0084               	movwf	4
  3542  044C  3090               	movlw	high (_dpowers| (0+32768))
  3543  044D  3D68               	addwfc	??_printf+1,w
  3544  044E  0085               	movwf	5
  3545  044F  3F00               	moviw [0]fsr0
  3546  0450  00A0               	movwf	___lldiv@divisor
  3547  0451  3F01               	moviw [1]fsr0
  3548  0452  00A1               	movwf	___lldiv@divisor+1
  3549  0453  3F02               	moviw [2]fsr0
  3550  0454  00A2               	movwf	___lldiv@divisor+2
  3551  0455  3F03               	moviw [3]fsr0
  3552  0456  00A3               	movwf	___lldiv@divisor+3
  3553  0457  0021               	movlb	1	; select bank1
  3554  0458  083D               	movf	(printf@val+3)^(0+128),w
  3555  0459  0020               	movlb	0	; select bank0
  3556  045A  00A7               	movwf	___lldiv@dividend+3
  3557  045B  0021               	movlb	1	; select bank1
  3558  045C  083C               	movf	(printf@val+2)^(0+128),w
  3559  045D  0020               	movlb	0	; select bank0
  3560  045E  00A6               	movwf	___lldiv@dividend+2
  3561  045F  0021               	movlb	1	; select bank1
  3562  0460  083B               	movf	(printf@val+1)^(0+128),w
  3563  0461  0020               	movlb	0	; select bank0
  3564  0462  00A5               	movwf	___lldiv@dividend+1
  3565  0463  0021               	movlb	1	; select bank1
  3566  0464  083A               	movf	printf@val^(0+128),w
  3567  0465  0020               	movlb	0	; select bank0
  3568  0466  00A4               	movwf	___lldiv@dividend
  3569  0467  3188  209A  3180   	fcall	___lldiv
  3570  046A  0020               	movlb	0	; select bank0
  3571  046B  0823               	movf	?___lldiv+3,w
  3572  046C  0021               	movlb	1	; select bank1
  3573  046D  00C3               	movwf	(printf@tmpval+3)^(0+128)
  3574  046E  0020               	movlb	0	; select bank0
  3575  046F  0822               	movf	?___lldiv+2,w
  3576  0470  0021               	movlb	1	; select bank1
  3577  0471  00C2               	movwf	(printf@tmpval+2)^(0+128)
  3578  0472  0020               	movlb	0	; select bank0
  3579  0473  0821               	movf	?___lldiv+1,w
  3580  0474  0021               	movlb	1	; select bank1
  3581  0475  00C1               	movwf	(printf@tmpval+1)^(0+128)
  3582  0476  0020               	movlb	0	; select bank0
  3583  0477  0820               	movf	?___lldiv,w
  3584  0478  0021               	movlb	1	; select bank1
  3585  0479  00C0               	movwf	printf@tmpval^(0+128)
  3586                           
  3587                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3588  047A  3000               	movlw	0
  3589  047B  0020               	movlb	0	; select bank0
  3590  047C  00B1               	movwf	___llmod@divisor+3
  3591  047D  3000               	movlw	0
  3592  047E  00B0               	movwf	___llmod@divisor+2
  3593  047F  3000               	movlw	0
  3594  0480  00AF               	movwf	___llmod@divisor+1
  3595  0481  300A               	movlw	10
  3596  0482  00AE               	movwf	___llmod@divisor
  3597  0483  0021               	movlb	1	; select bank1
  3598  0484  0843               	movf	(printf@tmpval+3)^(0+128),w
  3599  0485  0020               	movlb	0	; select bank0
  3600  0486  00B5               	movwf	___llmod@dividend+3
  3601  0487  0021               	movlb	1	; select bank1
  3602  0488  0842               	movf	(printf@tmpval+2)^(0+128),w
  3603  0489  0020               	movlb	0	; select bank0
  3604  048A  00B4               	movwf	___llmod@dividend+2
  3605  048B  0021               	movlb	1	; select bank1
  3606  048C  0841               	movf	(printf@tmpval+1)^(0+128),w
  3607  048D  0020               	movlb	0	; select bank0
  3608  048E  00B3               	movwf	___llmod@dividend+1
  3609  048F  0021               	movlb	1	; select bank1
  3610  0490  0840               	movf	printf@tmpval^(0+128),w
  3611  0491  0020               	movlb	0	; select bank0
  3612  0492  00B2               	movwf	___llmod@dividend
  3613  0493  3197  271F  3180   	fcall	___llmod
  3614  0496  0020               	movlb	0	; select bank0
  3615  0497  0831               	movf	?___llmod+3,w
  3616  0498  0021               	movlb	1	; select bank1
  3617  0499  00C3               	movwf	(printf@tmpval+3)^(0+128)
  3618  049A  0020               	movlb	0	; select bank0
  3619  049B  0830               	movf	?___llmod+2,w
  3620  049C  0021               	movlb	1	; select bank1
  3621  049D  00C2               	movwf	(printf@tmpval+2)^(0+128)
  3622  049E  0020               	movlb	0	; select bank0
  3623  049F  082F               	movf	?___llmod+1,w
  3624  04A0  0021               	movlb	1	; select bank1
  3625  04A1  00C1               	movwf	(printf@tmpval+1)^(0+128)
  3626  04A2  0020               	movlb	0	; select bank0
  3627  04A3  082E               	movf	?___llmod,w
  3628  04A4  0021               	movlb	1	; select bank1
  3629  04A5  00C0               	movwf	printf@tmpval^(0+128)
  3630                           
  3631                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  3632  04A6  0840               	movf	printf@tmpval^(0+128),w
  3633  04A7  3E30               	addlw	48
  3634  04A8  3195  2550  3180   	fcall	_putch
  3635                           
  3636                           ;doprnt.c: 1232: val %= dpowers[c];
  3637  04AB  0021               	movlb	1	; select bank1
  3638  04AC  0847               	movf	printf@c^(0+128),w
  3639  04AD  0020               	movlb	0	; select bank0
  3640  04AE  00E7               	movwf	??_printf
  3641  04AF  01E8               	clrf	??_printf+1
  3642  04B0  35E7               	lslf	??_printf,f
  3643  04B1  0DE8               	rlf	??_printf+1,f
  3644  04B2  35E7               	lslf	??_printf,f
  3645  04B3  0DE8               	rlf	??_printf+1,f
  3646  04B4  3000               	movlw	low (_dpowers| (0+32768))
  3647  04B5  0767               	addwf	??_printf,w
  3648  04B6  0084               	movwf	4
  3649  04B7  3090               	movlw	high (_dpowers| (0+32768))
  3650  04B8  3D68               	addwfc	??_printf+1,w
  3651  04B9  0085               	movwf	5
  3652  04BA  3F00               	moviw [0]fsr0
  3653  04BB  00AE               	movwf	___llmod@divisor
  3654  04BC  3F01               	moviw [1]fsr0
  3655  04BD  00AF               	movwf	___llmod@divisor+1
  3656  04BE  3F02               	moviw [2]fsr0
  3657  04BF  00B0               	movwf	___llmod@divisor+2
  3658  04C0  3F03               	moviw [3]fsr0
  3659  04C1  00B1               	movwf	___llmod@divisor+3
  3660  04C2  0021               	movlb	1	; select bank1
  3661  04C3  083D               	movf	(printf@val+3)^(0+128),w
  3662  04C4  0020               	movlb	0	; select bank0
  3663  04C5  00B5               	movwf	___llmod@dividend+3
  3664  04C6  0021               	movlb	1	; select bank1
  3665  04C7  083C               	movf	(printf@val+2)^(0+128),w
  3666  04C8  0020               	movlb	0	; select bank0
  3667  04C9  00B4               	movwf	___llmod@dividend+2
  3668  04CA  0021               	movlb	1	; select bank1
  3669  04CB  083B               	movf	(printf@val+1)^(0+128),w
  3670  04CC  0020               	movlb	0	; select bank0
  3671  04CD  00B3               	movwf	___llmod@dividend+1
  3672  04CE  0021               	movlb	1	; select bank1
  3673  04CF  083A               	movf	printf@val^(0+128),w
  3674  04D0  0020               	movlb	0	; select bank0
  3675  04D1  00B2               	movwf	___llmod@dividend
  3676  04D2  3197  271F  3180   	fcall	___llmod
  3677  04D5  0020               	movlb	0	; select bank0
  3678  04D6  0831               	movf	?___llmod+3,w
  3679  04D7  0021               	movlb	1	; select bank1
  3680  04D8  00BD               	movwf	(printf@val+3)^(0+128)
  3681  04D9  0020               	movlb	0	; select bank0
  3682  04DA  0830               	movf	?___llmod+2,w
  3683  04DB  0021               	movlb	1	; select bank1
  3684  04DC  00BC               	movwf	(printf@val+2)^(0+128)
  3685  04DD  0020               	movlb	0	; select bank0
  3686  04DE  082F               	movf	?___llmod+1,w
  3687  04DF  0021               	movlb	1	; select bank1
  3688  04E0  00BB               	movwf	(printf@val+1)^(0+128)
  3689  04E1  0020               	movlb	0	; select bank0
  3690  04E2  082E               	movf	?___llmod,w
  3691  04E3  2C36               	goto	L4
  3692  04E4                     l2973:	
  3693                           ;doprnt.c: 1233: }
  3694                           ;doprnt.c: 1235: while(prec) {
  3695                           
  3696                           
  3697                           ;doprnt.c: 1236: (putch('0') );
  3698  04E4  3030               	movlw	48
  3699  04E5  3195  2550  3180   	fcall	_putch
  3700                           
  3701                           ;doprnt.c: 1237: prec--;
  3702  04E8  30FF               	movlw	255
  3703  04E9  0021               	movlb	1	; select bank1
  3704  04EA  07B8               	addwf	printf@prec^(0+128),f
  3705  04EB  30FF               	movlw	255
  3706  04EC  3DB9               	addwfc	(printf@prec+1)^(0+128),f
  3707  04ED                     l2977:	
  3708  04ED  0838               	movf	printf@prec^(0+128),w
  3709  04EE  0439               	iorwf	(printf@prec+1)^(0+128),w
  3710  04EF  1903               	btfsc	3,2
  3711  04F0  2849               	goto	l3013
  3712  04F1  2CE4               	goto	l2973
  3713  04F2                     l2979:	
  3714                           ;doprnt.c: 1238: }
  3715                           ;doprnt.c: 1245: continue;
  3716                           
  3717                           
  3718                           ;doprnt.c: 1246: }
  3719                           ;doprnt.c: 1253: {
  3720                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3721  04F2  0021               	movlb	1	; select bank1
  3722  04F3  0837               	movf	printf@ap^(0+128),w
  3723  04F4  0086               	movwf	6
  3724  04F5  0187               	clrf	7
  3725  04F6  3F40               	moviw [0]fsr1
  3726  04F7  0020               	movlb	0	; select bank0
  3727  04F8  00E7               	movwf	??_printf
  3728  04F9  3F41               	moviw [1]fsr1
  3729  04FA  00E8               	movwf	??_printf+1
  3730  04FB  0867               	movf	??_printf,w
  3731  04FC  0021               	movlb	1	; select bank1
  3732  04FD  00BA               	movwf	printf@val^(0+128)
  3733  04FE  0020               	movlb	0	; select bank0
  3734  04FF  0868               	movf	??_printf+1,w
  3735  0500  0021               	movlb	1	; select bank1
  3736  0501  00BB               	movwf	(printf@val+1)^(0+128)
  3737  0502  0D89               	rlf	9,f
  3738  0503  3B89               	subwfb	9,f
  3739  0504  0989               	comf	9,f
  3740  0505  00BC               	movwf	(printf@val+2)^(0+128)
  3741  0506  00BD               	movwf	(printf@val+3)^(0+128)
  3742  0507  3002               	movlw	2
  3743  0508  0020               	movlb	0	; select bank0
  3744  0509  00E7               	movwf	??_printf
  3745  050A  0867               	movf	??_printf,w
  3746  050B  0021               	movlb	1	; select bank1
  3747  050C  07B7               	addwf	printf@ap^(0+128),f
  3748                           
  3749                           ;doprnt.c: 1261: if((long)val < 0) {
  3750  050D  1FBD               	btfss	(printf@val+3)^(0+128),7
  3751  050E  2D1E               	goto	l2989
  3752                           
  3753                           ;doprnt.c: 1262: flag |= 0x03;
  3754  050F  3003               	movlw	3
  3755  0510  04B5               	iorwf	printf@flag^(0+128),f
  3756  0511  3000               	movlw	0
  3757  0512  04B6               	iorwf	(printf@flag+1)^(0+128),f
  3758                           
  3759                           ;doprnt.c: 1263: val = -val;
  3760  0513  09BA               	comf	printf@val^(0+128),f
  3761  0514  09BB               	comf	(printf@val+1)^(0+128),f
  3762  0515  09BC               	comf	(printf@val+2)^(0+128),f
  3763  0516  09BD               	comf	(printf@val+3)^(0+128),f
  3764  0517  0ABA               	incf	printf@val^(0+128),f
  3765  0518  1903               	skipnz
  3766  0519  0ABB               	incf	(printf@val+1)^(0+128),f
  3767  051A  1903               	skipnz
  3768  051B  0ABC               	incf	(printf@val+2)^(0+128),f
  3769  051C  1903               	skipnz
  3770  051D  0ABD               	incf	(printf@val+3)^(0+128),f
  3771  051E                     l2989:	
  3772                           
  3773                           ;doprnt.c: 1264: }
  3774                           ;doprnt.c: 1266: }
  3775                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3776  051E  01C7               	clrf	printf@c^(0+128)
  3777  051F  0AC7               	incf	printf@c^(0+128),f
  3778  0520  300A               	movlw	10
  3779  0521  0647               	xorwf	printf@c^(0+128),w
  3780  0522  1903               	btfsc	3,2
  3781  0523  2D5B               	goto	l3001
  3782  0524                     l2995:	
  3783                           
  3784                           ;doprnt.c: 1306: if(val < dpowers[c])
  3785  0524  0847               	movf	printf@c^(0+128),w
  3786  0525  0020               	movlb	0	; select bank0
  3787  0526  00E7               	movwf	??_printf
  3788  0527  01E8               	clrf	??_printf+1
  3789  0528  35E7               	lslf	??_printf,f
  3790  0529  0DE8               	rlf	??_printf+1,f
  3791  052A  35E7               	lslf	??_printf,f
  3792  052B  0DE8               	rlf	??_printf+1,f
  3793  052C  3000               	movlw	low (_dpowers| (0+32768))
  3794  052D  0767               	addwf	??_printf,w
  3795  052E  0084               	movwf	4
  3796  052F  3090               	movlw	high (_dpowers| (0+32768))
  3797  0530  3D68               	addwfc	??_printf+1,w
  3798  0531  0085               	movwf	5
  3799  0532  3F00               	moviw [0]fsr0
  3800  0533  00E9               	movwf	??_printf+2
  3801  0534  3F01               	moviw [1]fsr0
  3802  0535  00EA               	movwf	??_printf+3
  3803  0536  3F02               	moviw [2]fsr0
  3804  0537  00EB               	movwf	??_printf+4
  3805  0538  3F03               	moviw [3]fsr0
  3806  0539  00EC               	movwf	??_printf+5
  3807  053A  086C               	movf	??_printf+5,w
  3808  053B  0021               	movlb	1	; select bank1
  3809  053C  023D               	subwf	(printf@val+3)^(0+128),w
  3810  053D  1D03               	skipz
  3811  053E  2D4F               	goto	u3835
  3812  053F  0020               	movlb	0	; select bank0
  3813  0540  086B               	movf	??_printf+4,w
  3814  0541  0021               	movlb	1	; select bank1
  3815  0542  023C               	subwf	(printf@val+2)^(0+128),w
  3816  0543  1D03               	skipz
  3817  0544  2D4F               	goto	u3835
  3818  0545  0020               	movlb	0	; select bank0
  3819  0546  086A               	movf	??_printf+3,w
  3820  0547  0021               	movlb	1	; select bank1
  3821  0548  023B               	subwf	(printf@val+1)^(0+128),w
  3822  0549  1D03               	skipz
  3823  054A  2D4F               	goto	u3835
  3824  054B  0020               	movlb	0	; select bank0
  3825  054C  0869               	movf	??_printf+2,w
  3826  054D  0021               	movlb	1	; select bank1
  3827  054E  023A               	subwf	printf@val^(0+128),w
  3828  054F                     u3835:	
  3829  054F  1C03               	btfss	3,0
  3830  0550  2D5B               	goto	l3001
  3831                           
  3832                           ;doprnt.c: 1307: break;
  3833  0551  3001               	movlw	1
  3834  0552  0020               	movlb	0	; select bank0
  3835  0553  00E7               	movwf	??_printf
  3836  0554  0867               	movf	??_printf,w
  3837  0555  0021               	movlb	1	; select bank1
  3838  0556  07C7               	addwf	printf@c^(0+128),f
  3839  0557  300A               	movlw	10
  3840  0558  0647               	xorwf	printf@c^(0+128),w
  3841  0559  1D03               	btfss	3,2
  3842  055A  2D24               	goto	l2995
  3843  055B                     l3001:	
  3844                           
  3845                           ;doprnt.c: 1422: {
  3846                           ;doprnt.c: 1438: if(flag & 0x03)
  3847  055B  3003               	movlw	3
  3848  055C  0535               	andwf	printf@flag^(0+128),w
  3849  055D  0020               	movlb	0	; select bank0
  3850  055E  00E7               	movwf	??_printf
  3851  055F  3000               	movlw	0
  3852  0560  0021               	movlb	1	; select bank1
  3853  0561  0536               	andwf	(printf@flag+1)^(0+128),w
  3854  0562  0020               	movlb	0	; select bank0
  3855  0563  00E8               	movwf	??_printf+1
  3856  0564  0867               	movf	??_printf,w
  3857  0565  0468               	iorwf	??_printf+1,w
  3858  0566  1903               	btfsc	3,2
  3859  0567  2D6C               	goto	l3005
  3860                           
  3861                           ;doprnt.c: 1439: (putch('-') );
  3862  0568  302D               	movlw	45
  3863  0569  3195  2550  3180   	fcall	_putch
  3864  056C                     l3005:	
  3865                           
  3866                           ;doprnt.c: 1469: }
  3867                           ;doprnt.c: 1472: prec = c;
  3868  056C  0021               	movlb	1	; select bank1
  3869  056D  0847               	movf	printf@c^(0+128),w
  3870  056E  00B8               	movwf	printf@prec^(0+128)
  3871  056F  01B9               	clrf	(printf@prec+1)^(0+128)
  3872  0570  1BB8               	btfsc	printf@prec^(0+128),7
  3873  0571  03B9               	decf	(printf@prec+1)^(0+128),f
  3874  0572                     l3011:	
  3875                           ;doprnt.c: 1474: while(prec--) {
  3876                           
  3877  0572  30FF               	movlw	255
  3878  0573  0021               	movlb	1	; select bank1
  3879  0574  07B8               	addwf	printf@prec^(0+128),f
  3880  0575  30FF               	movlw	255
  3881  0576  3DB9               	addwfc	(printf@prec+1)^(0+128),f
  3882  0577  0A38               	incf	printf@prec^(0+128),w
  3883  0578  1903               	btfsc	3,2
  3884  0579  0A39               	incf	(printf@prec+1)^(0+128),w
  3885  057A  1903               	btfsc	3,2
  3886  057B  2849               	goto	l3013
  3887                           
  3888                           ;doprnt.c: 1478: {
  3889                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3890  057C  3000               	movlw	0
  3891  057D  0020               	movlb	0	; select bank0
  3892  057E  00B1               	movwf	___llmod@divisor+3
  3893  057F  3000               	movlw	0
  3894  0580  00B0               	movwf	___llmod@divisor+2
  3895  0581  3000               	movlw	0
  3896  0582  00AF               	movwf	___llmod@divisor+1
  3897  0583  300A               	movlw	10
  3898  0584  00AE               	movwf	___llmod@divisor
  3899  0585  0021               	movlb	1	; select bank1
  3900  0586  0839               	movf	(printf@prec+1)^(0+128),w
  3901  0587  0085               	movwf	5
  3902  0588  0838               	movf	printf@prec^(0+128),w
  3903  0589  0084               	movwf	4
  3904  058A  3584               	lslf	4,f
  3905  058B  0D85               	rlf	5,f
  3906  058C  3584               	lslf	4,f
  3907  058D  0D85               	rlf	5,f
  3908  058E  3000               	movlw	low (_dpowers| (0+32768))
  3909  058F  0784               	addwf	4,f
  3910  0590  3090               	movlw	high (_dpowers| (0+32768))
  3911  0591  3D85               	addwfc	5,f
  3912  0592  3F00               	moviw [0]fsr0
  3913  0593  0020               	movlb	0	; select bank0
  3914  0594  00A0               	movwf	___lldiv@divisor
  3915  0595  3F01               	moviw [1]fsr0
  3916  0596  00A1               	movwf	___lldiv@divisor+1
  3917  0597  3F02               	moviw [2]fsr0
  3918  0598  00A2               	movwf	___lldiv@divisor+2
  3919  0599  3F03               	moviw [3]fsr0
  3920  059A  00A3               	movwf	___lldiv@divisor+3
  3921  059B  0021               	movlb	1	; select bank1
  3922  059C  083D               	movf	(printf@val+3)^(0+128),w
  3923  059D  0020               	movlb	0	; select bank0
  3924  059E  00A7               	movwf	___lldiv@dividend+3
  3925  059F  0021               	movlb	1	; select bank1
  3926  05A0  083C               	movf	(printf@val+2)^(0+128),w
  3927  05A1  0020               	movlb	0	; select bank0
  3928  05A2  00A6               	movwf	___lldiv@dividend+2
  3929  05A3  0021               	movlb	1	; select bank1
  3930  05A4  083B               	movf	(printf@val+1)^(0+128),w
  3931  05A5  0020               	movlb	0	; select bank0
  3932  05A6  00A5               	movwf	___lldiv@dividend+1
  3933  05A7  0021               	movlb	1	; select bank1
  3934  05A8  083A               	movf	printf@val^(0+128),w
  3935  05A9  0020               	movlb	0	; select bank0
  3936  05AA  00A4               	movwf	___lldiv@dividend
  3937  05AB  3188  209A  3180   	fcall	___lldiv
  3938  05AE  0020               	movlb	0	; select bank0
  3939  05AF  0823               	movf	?___lldiv+3,w
  3940  05B0  00B5               	movwf	___llmod@dividend+3
  3941  05B1  0822               	movf	?___lldiv+2,w
  3942  05B2  00B4               	movwf	___llmod@dividend+2
  3943  05B3  0821               	movf	?___lldiv+1,w
  3944  05B4  00B3               	movwf	___llmod@dividend+1
  3945  05B5  0820               	movf	?___lldiv,w
  3946  05B6  00B2               	movwf	___llmod@dividend
  3947  05B7  3197  271F  3180   	fcall	___llmod
  3948  05BA  0020               	movlb	0	; select bank0
  3949  05BB  082E               	movf	?___llmod,w
  3950  05BC  3E30               	addlw	48
  3951  05BD  00E7               	movwf	??_printf
  3952  05BE  0867               	movf	??_printf,w
  3953  05BF  0021               	movlb	1	; select bank1
  3954  05C0  00C7               	movwf	printf@c^(0+128)
  3955                           
  3956                           ;doprnt.c: 1523: }
  3957                           ;doprnt.c: 1524: (putch(c) );
  3958  05C1  0847               	movf	printf@c^(0+128),w
  3959  05C2  3195  2550  3180   	fcall	_putch
  3960  05C5  2D72               	goto	l3011
  3961  05C6                     l419:	
  3962                           ;doprnt.c: 1540: return 0;
  3963                           ;	Return value of _printf is never used
  3964                           
  3965                           ;doprnt.c: 1525: }
  3966                           ;doprnt.c: 1533: }
  3967                           ;doprnt.c: 1535: alldone:
  3968                           
  3969  05C6  0008               	return
  3970  05C7                     __end_of_printf:	
  3971                           
  3972                           	psect	text2
  3973  0DBA                     __ptext2:	
  3974 ;; *************** function _scale *****************
  3975 ;; Defined at:
  3976 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  3977 ;; Parameters:    Size  Location     Type
  3978 ;;  scl             1    wreg     char 
  3979 ;; Auto vars:     Size  Location     Type
  3980 ;;  scl             1   46[BANK0 ] char 
  3981 ;; Return value:  Size  Location     Type
  3982 ;;                  3   38[BANK0 ] char 
  3983 ;; Registers used:
  3984 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3985 ;; Tracked objects:
  3986 ;;		On entry : 0/0
  3987 ;;		On exit  : 0/0
  3988 ;;		Unchanged: 0/0
  3989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3990 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3991 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3992 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3993 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3994 ;;Total ram usage:        9 bytes
  3995 ;; Hardware stack levels used:    1
  3996 ;; Hardware stack levels required when called:    6
  3997 ;; This function calls:
  3998 ;;		___awdiv
  3999 ;;		___awmod
  4000 ;;		___ftmul
  4001 ;;		___wmul
  4002 ;; This function is called by:
  4003 ;;		_printf
  4004 ;; This function uses a non-reentrant model
  4005 ;;
  4006                           
  4007                           
  4008                           ;psect for function _scale
  4009  0DBA                     _scale:	
  4010                           
  4011                           ;incstack = 0
  4012                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4013                           ;scale@scl stored from wreg
  4014  0DBA  0020               	movlb	0	; select bank0
  4015  0DBB  00CE               	movwf	scale@scl
  4016                           
  4017                           ;doprnt.c: 428: if(scl < 0) {
  4018  0DBC  1FCE               	btfss	scale@scl,7
  4019  0DBD  2EE0               	goto	l2505
  4020                           
  4021                           ;doprnt.c: 429: scl = -scl;
  4022  0DBE  09CE               	comf	scale@scl,f
  4023  0DBF  0ACE               	incf	scale@scl,f
  4024                           
  4025                           ;doprnt.c: 430: if(scl>=110)
  4026  0DC0  084E               	movf	scale@scl,w
  4027  0DC1  3A80               	xorlw	128
  4028  0DC2  3E12               	addlw	-238
  4029  0DC3  1C03               	skipc
  4030  0DC4  2E64               	goto	l2495
  4031                           
  4032                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4033  0DC5  300A               	movlw	10
  4034  0DC6  00A7               	movwf	___awdiv@divisor
  4035  0DC7  3000               	movlw	0
  4036  0DC8  00A8               	movwf	___awdiv@divisor+1
  4037  0DC9  084E               	movf	scale@scl,w
  4038  0DCA  00A2               	movwf	___awmod@dividend
  4039  0DCB  01A3               	clrf	___awmod@dividend+1
  4040  0DCC  1BA2               	btfsc	___awmod@dividend,7
  4041  0DCD  03A3               	decf	___awmod@dividend+1,f
  4042  0DCE  3064               	movlw	100
  4043  0DCF  00A0               	movwf	___awmod@divisor
  4044  0DD0  3000               	movlw	0
  4045  0DD1  00A1               	movwf	___awmod@divisor+1
  4046  0DD2  3188  2002  318D   	fcall	___awmod
  4047  0DD5  0020               	movlb	0	; select bank0
  4048  0DD6  0821               	movf	?___awmod+1,w
  4049  0DD7  00AA               	movwf	___awdiv@dividend+1
  4050  0DD8  0820               	movf	?___awmod,w
  4051  0DD9  00A9               	movwf	___awdiv@dividend
  4052  0DDA  3188  2048  318D   	fcall	___awdiv
  4053  0DDD  0020               	movlb	0	; select bank0
  4054  0DDE  0827               	movf	?___awdiv,w
  4055  0DDF  3E09               	addlw	9
  4056  0DE0  00B0               	movwf	___wmul@multiplier
  4057  0DE1  3000               	movlw	0
  4058  0DE2  3D28               	addwfc	?___awdiv+1,w
  4059  0DE3  00B1               	movwf	___wmul@multiplier+1
  4060  0DE4  3003               	movlw	3
  4061  0DE5  00B2               	movwf	___wmul@multiplicand
  4062  0DE6  3000               	movlw	0
  4063  0DE7  00B3               	movwf	___wmul@multiplicand+1
  4064  0DE8  3196  265A  318D   	fcall	___wmul
  4065  0DEB  0020               	movlb	0	; select bank0
  4066  0DEC  0831               	movf	?___wmul+1,w
  4067  0DED  0085               	movwf	5
  4068  0DEE  0830               	movf	?___wmul,w
  4069  0DEF  0084               	movwf	4
  4070  0DF0  3028               	movlw	low (__npowers_| (0+32768))
  4071  0DF1  0784               	addwf	4,f
  4072  0DF2  3090               	movlw	high (__npowers_| (0+32768))
  4073  0DF3  3D85               	addwfc	5,f
  4074  0DF4  3F00               	moviw [0]fsr0
  4075  0DF5  00B6               	movwf	___ftmul@f1
  4076  0DF6  3F01               	moviw [1]fsr0
  4077  0DF7  00B7               	movwf	___ftmul@f1+1
  4078  0DF8  3F02               	moviw [2]fsr0
  4079  0DF9  00B8               	movwf	___ftmul@f1+2
  4080  0DFA  3064               	movlw	100
  4081  0DFB  00A7               	movwf	___awdiv@divisor
  4082  0DFC  3000               	movlw	0
  4083  0DFD  00A8               	movwf	___awdiv@divisor+1
  4084  0DFE  084E               	movf	scale@scl,w
  4085  0DFF  00A9               	movwf	___awdiv@dividend
  4086  0E00  01AA               	clrf	___awdiv@dividend+1
  4087  0E01  1BA9               	btfsc	___awdiv@dividend,7
  4088  0E02  03AA               	decf	___awdiv@dividend+1,f
  4089  0E03  3188  2048  318D   	fcall	___awdiv
  4090  0E06  0020               	movlb	0	; select bank0
  4091  0E07  0827               	movf	?___awdiv,w
  4092  0E08  3E12               	addlw	18
  4093  0E09  00B0               	movwf	___wmul@multiplier
  4094  0E0A  3000               	movlw	0
  4095  0E0B  3D28               	addwfc	?___awdiv+1,w
  4096  0E0C  00B1               	movwf	___wmul@multiplier+1
  4097  0E0D  3003               	movlw	3
  4098  0E0E  00B2               	movwf	___wmul@multiplicand
  4099  0E0F  3000               	movlw	0
  4100  0E10  00B3               	movwf	___wmul@multiplicand+1
  4101  0E11  3196  265A  318D   	fcall	___wmul
  4102  0E14  0020               	movlb	0	; select bank0
  4103  0E15  0831               	movf	?___wmul+1,w
  4104  0E16  0085               	movwf	5
  4105  0E17  0830               	movf	?___wmul,w
  4106  0E18  0084               	movwf	4
  4107  0E19  3028               	movlw	low (__npowers_| (0+32768))
  4108  0E1A  0784               	addwf	4,f
  4109  0E1B  3090               	movlw	high (__npowers_| (0+32768))
  4110  0E1C  3D85               	addwfc	5,f
  4111  0E1D  3F00               	moviw [0]fsr0
  4112  0E1E  00B9               	movwf	___ftmul@f2
  4113  0E1F  3F01               	moviw [1]fsr0
  4114  0E20  00BA               	movwf	___ftmul@f2+1
  4115  0E21  3F02               	moviw [2]fsr0
  4116  0E22  00BB               	movwf	___ftmul@f2+2
  4117  0E23  318A  22F3  318D   	fcall	___ftmul
  4118  0E26  0020               	movlb	0	; select bank0
  4119  0E27  0836               	movf	?___ftmul,w
  4120  0E28  00CB               	movwf	_scale$1314
  4121  0E29  0837               	movf	?___ftmul+1,w
  4122  0E2A  00CC               	movwf	_scale$1314+1
  4123  0E2B  0838               	movf	?___ftmul+2,w
  4124  0E2C  00CD               	movwf	_scale$1314+2
  4125                           
  4126                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4127  0E2D  084E               	movf	scale@scl,w
  4128  0E2E  00A2               	movwf	___awmod@dividend
  4129  0E2F  01A3               	clrf	___awmod@dividend+1
  4130  0E30  1BA2               	btfsc	___awmod@dividend,7
  4131  0E31  03A3               	decf	___awmod@dividend+1,f
  4132  0E32  300A               	movlw	10
  4133  0E33  00A0               	movwf	___awmod@divisor
  4134  0E34  3000               	movlw	0
  4135  0E35  00A1               	movwf	___awmod@divisor+1
  4136  0E36  3188  2002  318D   	fcall	___awmod
  4137  0E39  0020               	movlb	0	; select bank0
  4138  0E3A  0821               	movf	?___awmod+1,w
  4139  0E3B  00B1               	movwf	___wmul@multiplier+1
  4140  0E3C  0820               	movf	?___awmod,w
  4141  0E3D  00B0               	movwf	___wmul@multiplier
  4142  0E3E  3003               	movlw	3
  4143  0E3F  00B2               	movwf	___wmul@multiplicand
  4144  0E40  3000               	movlw	0
  4145  0E41  00B3               	movwf	___wmul@multiplicand+1
  4146  0E42  3196  265A  318D   	fcall	___wmul
  4147  0E45  0020               	movlb	0	; select bank0
  4148  0E46  0831               	movf	?___wmul+1,w
  4149  0E47  0085               	movwf	5
  4150  0E48  0830               	movf	?___wmul,w
  4151  0E49  0084               	movwf	4
  4152  0E4A  3028               	movlw	low (__npowers_| (0+32768))
  4153  0E4B  0784               	addwf	4,f
  4154  0E4C  3090               	movlw	high (__npowers_| (0+32768))
  4155  0E4D  3D85               	addwfc	5,f
  4156  0E4E  3F00               	moviw [0]fsr0
  4157  0E4F  00B6               	movwf	___ftmul@f1
  4158  0E50  3F01               	moviw [1]fsr0
  4159  0E51  00B7               	movwf	___ftmul@f1+1
  4160  0E52  3F02               	moviw [2]fsr0
  4161  0E53  00B8               	movwf	___ftmul@f1+2
  4162  0E54  084B               	movf	_scale$1314,w
  4163  0E55  00B9               	movwf	___ftmul@f2
  4164  0E56  084C               	movf	_scale$1314+1,w
  4165  0E57  00BA               	movwf	___ftmul@f2+1
  4166  0E58  084D               	movf	_scale$1314+2,w
  4167  0E59  00BB               	movwf	___ftmul@f2+2
  4168  0E5A  318A  22F3         	fcall	___ftmul
  4169  0E5C  0020               	movlb	0	; select bank0
  4170  0E5D  0836               	movf	?___ftmul,w
  4171  0E5E  00C6               	movwf	?_scale
  4172  0E5F  0837               	movf	?___ftmul+1,w
  4173  0E60  00C7               	movwf	?_scale+1
  4174  0E61  0838               	movf	?___ftmul+2,w
  4175  0E62  00C8               	movwf	?_scale+2
  4176  0E63  0008               	return
  4177  0E64                     l2495:	
  4178                           
  4179                           ;doprnt.c: 432: else if(scl > 10)
  4180  0E64  084E               	movf	scale@scl,w
  4181  0E65  3A80               	xorlw	128
  4182  0E66  3E75               	addlw	-139
  4183  0E67  1C03               	skipc
  4184  0E68  2EC3               	goto	l2501
  4185                           
  4186                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4187  0E69  084E               	movf	scale@scl,w
  4188  0E6A  00A2               	movwf	___awmod@dividend
  4189  0E6B  01A3               	clrf	___awmod@dividend+1
  4190  0E6C  1BA2               	btfsc	___awmod@dividend,7
  4191  0E6D  03A3               	decf	___awmod@dividend+1,f
  4192  0E6E  300A               	movlw	10
  4193  0E6F  00A0               	movwf	___awmod@divisor
  4194  0E70  3000               	movlw	0
  4195  0E71  00A1               	movwf	___awmod@divisor+1
  4196  0E72  3188  2002  318D   	fcall	___awmod
  4197  0E75  0020               	movlb	0	; select bank0
  4198  0E76  0821               	movf	?___awmod+1,w
  4199  0E77  00B1               	movwf	___wmul@multiplier+1
  4200  0E78  0820               	movf	?___awmod,w
  4201  0E79  00B0               	movwf	___wmul@multiplier
  4202  0E7A  3003               	movlw	3
  4203  0E7B  00B2               	movwf	___wmul@multiplicand
  4204  0E7C  3000               	movlw	0
  4205  0E7D  00B3               	movwf	___wmul@multiplicand+1
  4206  0E7E  3196  265A  318D   	fcall	___wmul
  4207  0E81  0020               	movlb	0	; select bank0
  4208  0E82  0831               	movf	?___wmul+1,w
  4209  0E83  0085               	movwf	5
  4210  0E84  0830               	movf	?___wmul,w
  4211  0E85  0084               	movwf	4
  4212  0E86  3028               	movlw	low (__npowers_| (0+32768))
  4213  0E87  0784               	addwf	4,f
  4214  0E88  3090               	movlw	high (__npowers_| (0+32768))
  4215  0E89  3D85               	addwfc	5,f
  4216  0E8A  3F00               	moviw [0]fsr0
  4217  0E8B  00B6               	movwf	___ftmul@f1
  4218  0E8C  3F01               	moviw [1]fsr0
  4219  0E8D  00B7               	movwf	___ftmul@f1+1
  4220  0E8E  3F02               	moviw [2]fsr0
  4221  0E8F  00B8               	movwf	___ftmul@f1+2
  4222  0E90  300A               	movlw	10
  4223  0E91  00A7               	movwf	___awdiv@divisor
  4224  0E92  3000               	movlw	0
  4225  0E93  00A8               	movwf	___awdiv@divisor+1
  4226  0E94  084E               	movf	scale@scl,w
  4227  0E95  00A9               	movwf	___awdiv@dividend
  4228  0E96  01AA               	clrf	___awdiv@dividend+1
  4229  0E97  1BA9               	btfsc	___awdiv@dividend,7
  4230  0E98  03AA               	decf	___awdiv@dividend+1,f
  4231  0E99  3188  2048  318D   	fcall	___awdiv
  4232  0E9C  0020               	movlb	0	; select bank0
  4233  0E9D  0827               	movf	?___awdiv,w
  4234  0E9E  3E09               	addlw	9
  4235  0E9F  00B0               	movwf	___wmul@multiplier
  4236  0EA0  3000               	movlw	0
  4237  0EA1  3D28               	addwfc	?___awdiv+1,w
  4238  0EA2  00B1               	movwf	___wmul@multiplier+1
  4239  0EA3  3003               	movlw	3
  4240  0EA4  00B2               	movwf	___wmul@multiplicand
  4241  0EA5  3000               	movlw	0
  4242  0EA6  00B3               	movwf	___wmul@multiplicand+1
  4243  0EA7  3196  265A  318D   	fcall	___wmul
  4244  0EAA  0020               	movlb	0	; select bank0
  4245  0EAB  0831               	movf	?___wmul+1,w
  4246  0EAC  0085               	movwf	5
  4247  0EAD  0830               	movf	?___wmul,w
  4248  0EAE  0084               	movwf	4
  4249  0EAF  3028               	movlw	low (__npowers_| (0+32768))
  4250  0EB0  0784               	addwf	4,f
  4251  0EB1  3090               	movlw	high (__npowers_| (0+32768))
  4252  0EB2  3D85               	addwfc	5,f
  4253  0EB3  3F00               	moviw [0]fsr0
  4254  0EB4  00B9               	movwf	___ftmul@f2
  4255  0EB5  3F01               	moviw [1]fsr0
  4256  0EB6  00BA               	movwf	___ftmul@f2+1
  4257  0EB7  3F02               	moviw [2]fsr0
  4258  0EB8  00BB               	movwf	___ftmul@f2+2
  4259  0EB9  318A  22F3         	fcall	___ftmul
  4260  0EBB  0020               	movlb	0	; select bank0
  4261  0EBC  0836               	movf	?___ftmul,w
  4262  0EBD  00C6               	movwf	?_scale
  4263  0EBE  0837               	movf	?___ftmul+1,w
  4264  0EBF  00C7               	movwf	?_scale+1
  4265  0EC0  0838               	movf	?___ftmul+2,w
  4266  0EC1  00C8               	movwf	?_scale+2
  4267  0EC2  0008               	return
  4268  0EC3                     l2501:	
  4269                           
  4270                           ;doprnt.c: 434: return _npowers_[scl];
  4271  0EC3  084E               	movf	scale@scl,w
  4272  0EC4  00C9               	movwf	??_scale
  4273  0EC5  01CA               	clrf	??_scale+1
  4274  0EC6  0849               	movf	??_scale,w
  4275  0EC7  00B0               	movwf	___wmul@multiplier
  4276  0EC8  084A               	movf	??_scale+1,w
  4277  0EC9  00B1               	movwf	___wmul@multiplier+1
  4278  0ECA  3003               	movlw	3
  4279  0ECB  00B2               	movwf	___wmul@multiplicand
  4280  0ECC  3000               	movlw	0
  4281  0ECD  00B3               	movwf	___wmul@multiplicand+1
  4282  0ECE  3196  265A         	fcall	___wmul
  4283  0ED0  0020               	movlb	0	; select bank0
  4284  0ED1  0831               	movf	?___wmul+1,w
  4285  0ED2  0085               	movwf	5
  4286  0ED3  0830               	movf	?___wmul,w
  4287  0ED4  0084               	movwf	4
  4288  0ED5  3028               	movlw	low (__npowers_| (0+32768))
  4289  0ED6  0784               	addwf	4,f
  4290  0ED7  3090               	movlw	high (__npowers_| (0+32768))
  4291  0ED8  3D85               	addwfc	5,f
  4292  0ED9  3F00               	moviw [0]fsr0
  4293  0EDA  00C6               	movwf	?_scale
  4294  0EDB  3F01               	moviw [1]fsr0
  4295  0EDC  00C7               	movwf	?_scale+1
  4296  0EDD  3F02               	moviw [2]fsr0
  4297  0EDE  00C8               	movwf	?_scale+2
  4298  0EDF  0008               	return
  4299  0EE0                     l2505:	
  4300                           
  4301                           ;doprnt.c: 435: }
  4302                           ;doprnt.c: 436: if(scl>=110)
  4303  0EE0  084E               	movf	scale@scl,w
  4304  0EE1  3A80               	xorlw	128
  4305  0EE2  3E12               	addlw	-238
  4306  0EE3  1C03               	skipc
  4307  0EE4  2F84               	goto	l2513
  4308                           
  4309                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4310  0EE5  300A               	movlw	10
  4311  0EE6  00A7               	movwf	___awdiv@divisor
  4312  0EE7  3000               	movlw	0
  4313  0EE8  00A8               	movwf	___awdiv@divisor+1
  4314  0EE9  084E               	movf	scale@scl,w
  4315  0EEA  00A2               	movwf	___awmod@dividend
  4316  0EEB  01A3               	clrf	___awmod@dividend+1
  4317  0EEC  1BA2               	btfsc	___awmod@dividend,7
  4318  0EED  03A3               	decf	___awmod@dividend+1,f
  4319  0EEE  3064               	movlw	100
  4320  0EEF  00A0               	movwf	___awmod@divisor
  4321  0EF0  3000               	movlw	0
  4322  0EF1  00A1               	movwf	___awmod@divisor+1
  4323  0EF2  3188  2002  318D   	fcall	___awmod
  4324  0EF5  0020               	movlb	0	; select bank0
  4325  0EF6  0821               	movf	?___awmod+1,w
  4326  0EF7  00AA               	movwf	___awdiv@dividend+1
  4327  0EF8  0820               	movf	?___awmod,w
  4328  0EF9  00A9               	movwf	___awdiv@dividend
  4329  0EFA  3188  2048  318D   	fcall	___awdiv
  4330  0EFD  0020               	movlb	0	; select bank0
  4331  0EFE  0827               	movf	?___awdiv,w
  4332  0EFF  3E09               	addlw	9
  4333  0F00  00B0               	movwf	___wmul@multiplier
  4334  0F01  3000               	movlw	0
  4335  0F02  3D28               	addwfc	?___awdiv+1,w
  4336  0F03  00B1               	movwf	___wmul@multiplier+1
  4337  0F04  3003               	movlw	3
  4338  0F05  00B2               	movwf	___wmul@multiplicand
  4339  0F06  3000               	movlw	0
  4340  0F07  00B3               	movwf	___wmul@multiplicand+1
  4341  0F08  3196  265A  318D   	fcall	___wmul
  4342  0F0B  0020               	movlb	0	; select bank0
  4343  0F0C  0831               	movf	?___wmul+1,w
  4344  0F0D  0085               	movwf	5
  4345  0F0E  0830               	movf	?___wmul,w
  4346  0F0F  0084               	movwf	4
  4347  0F10  304F               	movlw	low (__powers_| (0+32768))
  4348  0F11  0784               	addwf	4,f
  4349  0F12  3090               	movlw	high (__powers_| (0+32768))
  4350  0F13  3D85               	addwfc	5,f
  4351  0F14  3F00               	moviw [0]fsr0
  4352  0F15  00B6               	movwf	___ftmul@f1
  4353  0F16  3F01               	moviw [1]fsr0
  4354  0F17  00B7               	movwf	___ftmul@f1+1
  4355  0F18  3F02               	moviw [2]fsr0
  4356  0F19  00B8               	movwf	___ftmul@f1+2
  4357  0F1A  3064               	movlw	100
  4358  0F1B  00A7               	movwf	___awdiv@divisor
  4359  0F1C  3000               	movlw	0
  4360  0F1D  00A8               	movwf	___awdiv@divisor+1
  4361  0F1E  084E               	movf	scale@scl,w
  4362  0F1F  00A9               	movwf	___awdiv@dividend
  4363  0F20  01AA               	clrf	___awdiv@dividend+1
  4364  0F21  1BA9               	btfsc	___awdiv@dividend,7
  4365  0F22  03AA               	decf	___awdiv@dividend+1,f
  4366  0F23  3188  2048  318D   	fcall	___awdiv
  4367  0F26  0020               	movlb	0	; select bank0
  4368  0F27  0827               	movf	?___awdiv,w
  4369  0F28  3E12               	addlw	18
  4370  0F29  00B0               	movwf	___wmul@multiplier
  4371  0F2A  3000               	movlw	0
  4372  0F2B  3D28               	addwfc	?___awdiv+1,w
  4373  0F2C  00B1               	movwf	___wmul@multiplier+1
  4374  0F2D  3003               	movlw	3
  4375  0F2E  00B2               	movwf	___wmul@multiplicand
  4376  0F2F  3000               	movlw	0
  4377  0F30  00B3               	movwf	___wmul@multiplicand+1
  4378  0F31  3196  265A  318D   	fcall	___wmul
  4379  0F34  0020               	movlb	0	; select bank0
  4380  0F35  0831               	movf	?___wmul+1,w
  4381  0F36  0085               	movwf	5
  4382  0F37  0830               	movf	?___wmul,w
  4383  0F38  0084               	movwf	4
  4384  0F39  304F               	movlw	low (__powers_| (0+32768))
  4385  0F3A  0784               	addwf	4,f
  4386  0F3B  3090               	movlw	high (__powers_| (0+32768))
  4387  0F3C  3D85               	addwfc	5,f
  4388  0F3D  3F00               	moviw [0]fsr0
  4389  0F3E  00B9               	movwf	___ftmul@f2
  4390  0F3F  3F01               	moviw [1]fsr0
  4391  0F40  00BA               	movwf	___ftmul@f2+1
  4392  0F41  3F02               	moviw [2]fsr0
  4393  0F42  00BB               	movwf	___ftmul@f2+2
  4394  0F43  318A  22F3  318D   	fcall	___ftmul
  4395  0F46  0020               	movlb	0	; select bank0
  4396  0F47  0836               	movf	?___ftmul,w
  4397  0F48  00CB               	movwf	_scale$1314
  4398  0F49  0837               	movf	?___ftmul+1,w
  4399  0F4A  00CC               	movwf	_scale$1314+1
  4400  0F4B  0838               	movf	?___ftmul+2,w
  4401  0F4C  00CD               	movwf	_scale$1314+2
  4402                           
  4403                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4404  0F4D  084E               	movf	scale@scl,w
  4405  0F4E  00A2               	movwf	___awmod@dividend
  4406  0F4F  01A3               	clrf	___awmod@dividend+1
  4407  0F50  1BA2               	btfsc	___awmod@dividend,7
  4408  0F51  03A3               	decf	___awmod@dividend+1,f
  4409  0F52  300A               	movlw	10
  4410  0F53  00A0               	movwf	___awmod@divisor
  4411  0F54  3000               	movlw	0
  4412  0F55  00A1               	movwf	___awmod@divisor+1
  4413  0F56  3188  2002  318D   	fcall	___awmod
  4414  0F59  0020               	movlb	0	; select bank0
  4415  0F5A  0821               	movf	?___awmod+1,w
  4416  0F5B  00B1               	movwf	___wmul@multiplier+1
  4417  0F5C  0820               	movf	?___awmod,w
  4418  0F5D  00B0               	movwf	___wmul@multiplier
  4419  0F5E  3003               	movlw	3
  4420  0F5F  00B2               	movwf	___wmul@multiplicand
  4421  0F60  3000               	movlw	0
  4422  0F61  00B3               	movwf	___wmul@multiplicand+1
  4423  0F62  3196  265A  318D   	fcall	___wmul
  4424  0F65  0020               	movlb	0	; select bank0
  4425  0F66  0831               	movf	?___wmul+1,w
  4426  0F67  0085               	movwf	5
  4427  0F68  0830               	movf	?___wmul,w
  4428  0F69  0084               	movwf	4
  4429  0F6A  304F               	movlw	low (__powers_| (0+32768))
  4430  0F6B  0784               	addwf	4,f
  4431  0F6C  3090               	movlw	high (__powers_| (0+32768))
  4432  0F6D  3D85               	addwfc	5,f
  4433  0F6E  3F00               	moviw [0]fsr0
  4434  0F6F  00B6               	movwf	___ftmul@f1
  4435  0F70  3F01               	moviw [1]fsr0
  4436  0F71  00B7               	movwf	___ftmul@f1+1
  4437  0F72  3F02               	moviw [2]fsr0
  4438  0F73  00B8               	movwf	___ftmul@f1+2
  4439  0F74  084B               	movf	_scale$1314,w
  4440  0F75  00B9               	movwf	___ftmul@f2
  4441  0F76  084C               	movf	_scale$1314+1,w
  4442  0F77  00BA               	movwf	___ftmul@f2+1
  4443  0F78  084D               	movf	_scale$1314+2,w
  4444  0F79  00BB               	movwf	___ftmul@f2+2
  4445  0F7A  318A  22F3         	fcall	___ftmul
  4446  0F7C  0020               	movlb	0	; select bank0
  4447  0F7D  0836               	movf	?___ftmul,w
  4448  0F7E  00C6               	movwf	?_scale
  4449  0F7F  0837               	movf	?___ftmul+1,w
  4450  0F80  00C7               	movwf	?_scale+1
  4451  0F81  0838               	movf	?___ftmul+2,w
  4452  0F82  00C8               	movwf	?_scale+2
  4453  0F83  0008               	return
  4454  0F84                     l2513:	
  4455                           
  4456                           ;doprnt.c: 438: else if(scl > 10)
  4457  0F84  084E               	movf	scale@scl,w
  4458  0F85  3A80               	xorlw	128
  4459  0F86  3E75               	addlw	-139
  4460  0F87  1C03               	skipc
  4461  0F88  2FE3               	goto	l2519
  4462                           
  4463                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4464  0F89  084E               	movf	scale@scl,w
  4465  0F8A  00A2               	movwf	___awmod@dividend
  4466  0F8B  01A3               	clrf	___awmod@dividend+1
  4467  0F8C  1BA2               	btfsc	___awmod@dividend,7
  4468  0F8D  03A3               	decf	___awmod@dividend+1,f
  4469  0F8E  300A               	movlw	10
  4470  0F8F  00A0               	movwf	___awmod@divisor
  4471  0F90  3000               	movlw	0
  4472  0F91  00A1               	movwf	___awmod@divisor+1
  4473  0F92  3188  2002  318D   	fcall	___awmod
  4474  0F95  0020               	movlb	0	; select bank0
  4475  0F96  0821               	movf	?___awmod+1,w
  4476  0F97  00B1               	movwf	___wmul@multiplier+1
  4477  0F98  0820               	movf	?___awmod,w
  4478  0F99  00B0               	movwf	___wmul@multiplier
  4479  0F9A  3003               	movlw	3
  4480  0F9B  00B2               	movwf	___wmul@multiplicand
  4481  0F9C  3000               	movlw	0
  4482  0F9D  00B3               	movwf	___wmul@multiplicand+1
  4483  0F9E  3196  265A  318D   	fcall	___wmul
  4484  0FA1  0020               	movlb	0	; select bank0
  4485  0FA2  0831               	movf	?___wmul+1,w
  4486  0FA3  0085               	movwf	5
  4487  0FA4  0830               	movf	?___wmul,w
  4488  0FA5  0084               	movwf	4
  4489  0FA6  304F               	movlw	low (__powers_| (0+32768))
  4490  0FA7  0784               	addwf	4,f
  4491  0FA8  3090               	movlw	high (__powers_| (0+32768))
  4492  0FA9  3D85               	addwfc	5,f
  4493  0FAA  3F00               	moviw [0]fsr0
  4494  0FAB  00B6               	movwf	___ftmul@f1
  4495  0FAC  3F01               	moviw [1]fsr0
  4496  0FAD  00B7               	movwf	___ftmul@f1+1
  4497  0FAE  3F02               	moviw [2]fsr0
  4498  0FAF  00B8               	movwf	___ftmul@f1+2
  4499  0FB0  300A               	movlw	10
  4500  0FB1  00A7               	movwf	___awdiv@divisor
  4501  0FB2  3000               	movlw	0
  4502  0FB3  00A8               	movwf	___awdiv@divisor+1
  4503  0FB4  084E               	movf	scale@scl,w
  4504  0FB5  00A9               	movwf	___awdiv@dividend
  4505  0FB6  01AA               	clrf	___awdiv@dividend+1
  4506  0FB7  1BA9               	btfsc	___awdiv@dividend,7
  4507  0FB8  03AA               	decf	___awdiv@dividend+1,f
  4508  0FB9  3188  2048  318D   	fcall	___awdiv
  4509  0FBC  0020               	movlb	0	; select bank0
  4510  0FBD  0827               	movf	?___awdiv,w
  4511  0FBE  3E09               	addlw	9
  4512  0FBF  00B0               	movwf	___wmul@multiplier
  4513  0FC0  3000               	movlw	0
  4514  0FC1  3D28               	addwfc	?___awdiv+1,w
  4515  0FC2  00B1               	movwf	___wmul@multiplier+1
  4516  0FC3  3003               	movlw	3
  4517  0FC4  00B2               	movwf	___wmul@multiplicand
  4518  0FC5  3000               	movlw	0
  4519  0FC6  00B3               	movwf	___wmul@multiplicand+1
  4520  0FC7  3196  265A  318D   	fcall	___wmul
  4521  0FCA  0020               	movlb	0	; select bank0
  4522  0FCB  0831               	movf	?___wmul+1,w
  4523  0FCC  0085               	movwf	5
  4524  0FCD  0830               	movf	?___wmul,w
  4525  0FCE  0084               	movwf	4
  4526  0FCF  304F               	movlw	low (__powers_| (0+32768))
  4527  0FD0  0784               	addwf	4,f
  4528  0FD1  3090               	movlw	high (__powers_| (0+32768))
  4529  0FD2  3D85               	addwfc	5,f
  4530  0FD3  3F00               	moviw [0]fsr0
  4531  0FD4  00B9               	movwf	___ftmul@f2
  4532  0FD5  3F01               	moviw [1]fsr0
  4533  0FD6  00BA               	movwf	___ftmul@f2+1
  4534  0FD7  3F02               	moviw [2]fsr0
  4535  0FD8  00BB               	movwf	___ftmul@f2+2
  4536  0FD9  318A  22F3         	fcall	___ftmul
  4537  0FDB  0020               	movlb	0	; select bank0
  4538  0FDC  0836               	movf	?___ftmul,w
  4539  0FDD  00C6               	movwf	?_scale
  4540  0FDE  0837               	movf	?___ftmul+1,w
  4541  0FDF  00C7               	movwf	?_scale+1
  4542  0FE0  0838               	movf	?___ftmul+2,w
  4543  0FE1  00C8               	movwf	?_scale+2
  4544  0FE2  0008               	return
  4545  0FE3                     l2519:	
  4546                           
  4547                           ;doprnt.c: 440: return _powers_[scl];
  4548  0FE3  084E               	movf	scale@scl,w
  4549  0FE4  00C9               	movwf	??_scale
  4550  0FE5  01CA               	clrf	??_scale+1
  4551  0FE6  0849               	movf	??_scale,w
  4552  0FE7  00B0               	movwf	___wmul@multiplier
  4553  0FE8  084A               	movf	??_scale+1,w
  4554  0FE9  00B1               	movwf	___wmul@multiplier+1
  4555  0FEA  3003               	movlw	3
  4556  0FEB  00B2               	movwf	___wmul@multiplicand
  4557  0FEC  3000               	movlw	0
  4558  0FED  00B3               	movwf	___wmul@multiplicand+1
  4559  0FEE  3196  265A         	fcall	___wmul
  4560  0FF0  0020               	movlb	0	; select bank0
  4561  0FF1  0831               	movf	?___wmul+1,w
  4562  0FF2  0085               	movwf	5
  4563  0FF3  0830               	movf	?___wmul,w
  4564  0FF4  0084               	movwf	4
  4565  0FF5  304F               	movlw	low (__powers_| (0+32768))
  4566  0FF6  0784               	addwf	4,f
  4567  0FF7  3090               	movlw	high (__powers_| (0+32768))
  4568  0FF8  3D85               	addwfc	5,f
  4569  0FF9  3F00               	moviw [0]fsr0
  4570  0FFA  00C6               	movwf	?_scale
  4571  0FFB  3F01               	moviw [1]fsr0
  4572  0FFC  00C7               	movwf	?_scale+1
  4573  0FFD  3F02               	moviw [2]fsr0
  4574  0FFE  00C8               	movwf	?_scale+2
  4575  0FFF  0008               	return
  4576  1000                     __end_of_scale:	
  4577                           
  4578                           	psect	text3
  4579  1550                     __ptext3:	
  4580 ;; *************** function _putch *****************
  4581 ;; Defined at:
  4582 ;;		line 114 in file "UART.c"
  4583 ;; Parameters:    Size  Location     Type
  4584 ;;  txData          1    wreg     unsigned char 
  4585 ;; Auto vars:     Size  Location     Type
  4586 ;;  txData          1   13[BANK0 ] unsigned char 
  4587 ;; Return value:  Size  Location     Type
  4588 ;;                  1    wreg      void 
  4589 ;; Registers used:
  4590 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4591 ;; Tracked objects:
  4592 ;;		On entry : 0/0
  4593 ;;		On exit  : 0/0
  4594 ;;		Unchanged: 0/0
  4595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4597 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4599 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4600 ;;Total ram usage:        1 bytes
  4601 ;; Hardware stack levels used:    1
  4602 ;; Hardware stack levels required when called:    7
  4603 ;; This function calls:
  4604 ;;		_Send_put
  4605 ;; This function is called by:
  4606 ;;		_printf
  4607 ;; This function uses a non-reentrant model
  4608 ;;
  4609                           
  4610                           
  4611                           ;psect for function _putch
  4612  1550                     _putch:	
  4613                           
  4614                           ;incstack = 0
  4615                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4616                           ;putch@txData stored from wreg
  4617  1550  0020               	movlb	0	; select bank0
  4618  1551  00AD               	movwf	putch@txData
  4619                           
  4620                           ;UART.c: 115: Send_put(txData);
  4621  1552  082D               	movf	putch@txData,w
  4622  1553  3195  25F5         	fcall	_Send_put
  4623  1555  0008               	return
  4624  1556                     __end_of_putch:	
  4625                           
  4626                           	psect	text4
  4627  15F5                     __ptext4:	
  4628 ;; *************** function _Send_put *****************
  4629 ;; Defined at:
  4630 ;;		line 97 in file "UART.c"
  4631 ;; Parameters:    Size  Location     Type
  4632 ;;  _data           1    wreg     unsigned char 
  4633 ;; Auto vars:     Size  Location     Type
  4634 ;;  _data           1   12[BANK0 ] unsigned char 
  4635 ;; Return value:  Size  Location     Type
  4636 ;;                  1    wreg      void 
  4637 ;; Registers used:
  4638 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4639 ;; Tracked objects:
  4640 ;;		On entry : 0/0
  4641 ;;		On exit  : 0/0
  4642 ;;		Unchanged: 0/0
  4643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4645 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4646 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4647 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4648 ;;Total ram usage:        2 bytes
  4649 ;; Hardware stack levels used:    1
  4650 ;; Hardware stack levels required when called:    6
  4651 ;; This function calls:
  4652 ;;		_UART_buff_get
  4653 ;;		_UART_buff_put
  4654 ;; This function is called by:
  4655 ;;		_putch
  4656 ;; This function uses a non-reentrant model
  4657 ;;
  4658                           
  4659                           
  4660                           ;psect for function _Send_put
  4661  15F5                     _Send_put:	
  4662                           
  4663                           ;incstack = 0
  4664                           ; Regs used in _Send_put: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4665                           ;Send_put@_data stored from wreg
  4666  15F5  0020               	movlb	0	; select bank0
  4667  15F6  00AC               	movwf	Send_put@_data
  4668                           
  4669                           ;UART.c: 98: UART_buff_put(&output_buffer, _data);
  4670  15F7  082C               	movf	Send_put@_data,w
  4671  15F8  00AB               	movwf	??_Send_put
  4672  15F9  082B               	movf	??_Send_put,w
  4673  15FA  00A6               	movwf	UART_buff_put@c
  4674  15FB  303A               	movlw	(low (_output_buffer| (0+256)))& (0+255)
  4675  15FC  318A  2263  3195   	fcall	_UART_buff_put
  4676                           
  4677                           ;UART.c: 99: if (Transmit_stall == 1) {
  4678  15FF  0020               	movlb	0	; select bank0
  4679  1600  036F               	decf	_Transmit_stall,w
  4680  1601  1D03               	btfss	3,2
  4681  1602  0008               	return
  4682                           
  4683                           ;UART.c: 100: Transmit_stall = 0;
  4684  1603  01EF               	clrf	_Transmit_stall
  4685                           
  4686                           ;UART.c: 101: TXREG = UART_buff_get(&output_buffer);
  4687  1604  303A               	movlw	(low (_output_buffer| (0+256)))& (0+255)
  4688  1605  3197  27AF         	fcall	_UART_buff_get
  4689  1607  0023               	movlb	3	; select bank3
  4690  1608  009A               	movwf	26	;volatile
  4691                           
  4692                           ;UART.c: 102: PIE1bits.TXIE = 1;
  4693  1609  0021               	movlb	1	; select bank1
  4694  160A  1611               	bsf	17,4	;volatile
  4695  160B  0008               	return
  4696  160C                     __end_of_Send_put:	
  4697                           
  4698                           	psect	text5
  4699  0A63                     __ptext5:	
  4700 ;; *************** function _UART_buff_put *****************
  4701 ;; Defined at:
  4702 ;;		line 60 in file "UART.c"
  4703 ;; Parameters:    Size  Location     Type
  4704 ;;  _this           1    wreg     PTR struct UART_ring_buf
  4705 ;;		 -> output_buffer(26), input_buffer(26), 
  4706 ;;  c               1    6[BANK0 ] unsigned char 
  4707 ;; Auto vars:     Size  Location     Type
  4708 ;;  _this           1   10[BANK0 ] PTR struct UART_ring_buf
  4709 ;;		 -> output_buffer(26), input_buffer(26), 
  4710 ;; Return value:  Size  Location     Type
  4711 ;;                  1    wreg      void 
  4712 ;; Registers used:
  4713 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4714 ;; Tracked objects:
  4715 ;;		On entry : 0/0
  4716 ;;		On exit  : 0/0
  4717 ;;		Unchanged: 0/0
  4718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4719 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4720 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4721 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4722 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4723 ;;Total ram usage:        5 bytes
  4724 ;; Hardware stack levels used:    1
  4725 ;; Hardware stack levels required when called:    5
  4726 ;; This function calls:
  4727 ;;		_UART_buff_modulo_inc
  4728 ;; This function is called by:
  4729 ;;		_Send_put
  4730 ;; This function uses a non-reentrant model
  4731 ;;
  4732                           
  4733                           
  4734                           ;psect for function _UART_buff_put
  4735  0A63                     _UART_buff_put:	
  4736                           
  4737                           ;incstack = 0
  4738                           ; Regs used in _UART_buff_put: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4739                           ;UART_buff_put@_this stored from wreg
  4740  0A63  0020               	movlb	0	; select bank0
  4741  0A64  00AA               	movwf	UART_buff_put@_this
  4742                           
  4743                           ;UART.c: 61: if (_this->count < 20) {
  4744  0A65  082A               	movf	UART_buff_put@_this,w
  4745  0A66  3E18               	addlw	24
  4746  0A67  0086               	movwf	6
  4747  0A68  3001               	movlw	1	; select bank2/3
  4748  0A69  0087               	movwf	7
  4749  0A6A  3F40               	moviw [0]fsr1
  4750  0A6B  00A7               	movwf	??_UART_buff_put
  4751  0A6C  3F41               	moviw [1]fsr1
  4752  0A6D  00A8               	movwf	??_UART_buff_put+1
  4753  0A6E  0828               	movf	??_UART_buff_put+1,w
  4754  0A6F  3A80               	xorlw	128
  4755  0A70  00A9               	movwf	??_UART_buff_put+2
  4756  0A71  3080               	movlw	128
  4757  0A72  0229               	subwf	??_UART_buff_put+2,w
  4758  0A73  1D03               	skipz
  4759  0A74  2A77               	goto	u2135
  4760  0A75  3014               	movlw	20
  4761  0A76  0227               	subwf	??_UART_buff_put,w
  4762  0A77                     u2135:	
  4763  0A77  1803               	skipnc
  4764  0A78  2AAE               	goto	l2103
  4765                           
  4766                           ;UART.c: 62: _this->buf[_this->head] = c;
  4767  0A79  0020               	movlb	0	; select bank0
  4768  0A7A  0826               	movf	UART_buff_put@c,w
  4769  0A7B  00A7               	movwf	??_UART_buff_put
  4770  0A7C  082A               	movf	UART_buff_put@_this,w
  4771  0A7D  3E14               	addlw	20
  4772  0A7E  0086               	movwf	6
  4773  0A7F  3001               	movlw	1	; select bank2/3
  4774  0A80  0087               	movwf	7
  4775  0A81  0801               	movf	1,w
  4776  0A82  072A               	addwf	UART_buff_put@_this,w
  4777  0A83  00A8               	movwf	??_UART_buff_put+1
  4778  0A84  0828               	movf	??_UART_buff_put+1,w
  4779  0A85  0086               	movwf	6
  4780  0A86  3001               	movlw	1	; select bank2/3
  4781  0A87  0087               	movwf	7
  4782  0A88  0827               	movf	??_UART_buff_put,w
  4783  0A89  0081               	movwf	1
  4784                           
  4785                           ;UART.c: 63: _this->head = UART_buff_modulo_inc(_this->head, 20);
  4786  0A8A  082A               	movf	UART_buff_put@_this,w
  4787  0A8B  3E14               	addlw	20
  4788  0A8C  0086               	movwf	6
  4789  0A8D  3001               	movlw	1	; select bank2/3
  4790  0A8E  0087               	movwf	7
  4791  0A8F  3F40               	moviw [0]fsr1
  4792  0A90  00A0               	movwf	UART_buff_modulo_inc@value
  4793  0A91  3F41               	moviw [1]fsr1
  4794  0A92  00A1               	movwf	UART_buff_modulo_inc@value+1
  4795  0A93  3014               	movlw	20
  4796  0A94  00A2               	movwf	UART_buff_modulo_inc@modulus
  4797  0A95  3000               	movlw	0
  4798  0A96  00A3               	movwf	UART_buff_modulo_inc@modulus+1
  4799  0A97  3195  25DF         	fcall	_UART_buff_modulo_inc
  4800  0A99  0020               	movlb	0	; select bank0
  4801  0A9A  082A               	movf	UART_buff_put@_this,w
  4802  0A9B  3E14               	addlw	20
  4803  0A9C  0086               	movwf	6
  4804  0A9D  3001               	movlw	1	; select bank2/3
  4805  0A9E  0087               	movwf	7
  4806  0A9F  0820               	movf	?_UART_buff_modulo_inc,w
  4807  0AA0  3FC0               	movwi [0]fsr1
  4808  0AA1  0821               	movf	?_UART_buff_modulo_inc+1,w
  4809  0AA2  3FC1               	movwi [1]fsr1
  4810                           
  4811                           ;UART.c: 64: ++_this->count;
  4812  0AA3  082A               	movf	UART_buff_put@_this,w
  4813  0AA4  3E18               	addlw	24
  4814  0AA5  0086               	movwf	6
  4815  0AA6  3001               	movlw	1	; select bank2/3
  4816  0AA7  0087               	movwf	7
  4817  0AA8  3001               	movlw	1
  4818  0AA9  0781               	addwf	1,f
  4819  0AAA  3141               	addfsr 1,1
  4820  0AAB  1803               	skipnc
  4821  0AAC  0A81               	incf	1,f
  4822                           
  4823                           ;UART.c: 65: } else {
  4824  0AAD  0008               	return
  4825  0AAE                     l2103:	
  4826                           
  4827                           ;UART.c: 66: _this->buf[_this->head] = c;
  4828  0AAE  0020               	movlb	0	; select bank0
  4829  0AAF  0826               	movf	UART_buff_put@c,w
  4830  0AB0  00A7               	movwf	??_UART_buff_put
  4831  0AB1  082A               	movf	UART_buff_put@_this,w
  4832  0AB2  3E14               	addlw	20
  4833  0AB3  0086               	movwf	6
  4834  0AB4  3001               	movlw	1	; select bank2/3
  4835  0AB5  0087               	movwf	7
  4836  0AB6  0801               	movf	1,w
  4837  0AB7  072A               	addwf	UART_buff_put@_this,w
  4838  0AB8  00A8               	movwf	??_UART_buff_put+1
  4839  0AB9  0828               	movf	??_UART_buff_put+1,w
  4840  0ABA  0086               	movwf	6
  4841  0ABB  3001               	movlw	1	; select bank2/3
  4842  0ABC  0087               	movwf	7
  4843  0ABD  0827               	movf	??_UART_buff_put,w
  4844  0ABE  0081               	movwf	1
  4845                           
  4846                           ;UART.c: 67: _this->head = UART_buff_modulo_inc(_this->head, 20);
  4847  0ABF  082A               	movf	UART_buff_put@_this,w
  4848  0AC0  3E14               	addlw	20
  4849  0AC1  0086               	movwf	6
  4850  0AC2  3001               	movlw	1	; select bank2/3
  4851  0AC3  0087               	movwf	7
  4852  0AC4  3F40               	moviw [0]fsr1
  4853  0AC5  00A0               	movwf	UART_buff_modulo_inc@value
  4854  0AC6  3F41               	moviw [1]fsr1
  4855  0AC7  00A1               	movwf	UART_buff_modulo_inc@value+1
  4856  0AC8  3014               	movlw	20
  4857  0AC9  00A2               	movwf	UART_buff_modulo_inc@modulus
  4858  0ACA  3000               	movlw	0
  4859  0ACB  00A3               	movwf	UART_buff_modulo_inc@modulus+1
  4860  0ACC  3195  25DF  318A   	fcall	_UART_buff_modulo_inc
  4861  0ACF  0020               	movlb	0	; select bank0
  4862  0AD0  082A               	movf	UART_buff_put@_this,w
  4863  0AD1  3E14               	addlw	20
  4864  0AD2  0086               	movwf	6
  4865  0AD3  3001               	movlw	1	; select bank2/3
  4866  0AD4  0087               	movwf	7
  4867  0AD5  0820               	movf	?_UART_buff_modulo_inc,w
  4868  0AD6  3FC0               	movwi [0]fsr1
  4869  0AD7  0821               	movf	?_UART_buff_modulo_inc+1,w
  4870  0AD8  3FC1               	movwi [1]fsr1
  4871                           
  4872                           ;UART.c: 68: _this->tail = UART_buff_modulo_inc(_this->tail, 20);
  4873  0AD9  082A               	movf	UART_buff_put@_this,w
  4874  0ADA  3E16               	addlw	22
  4875  0ADB  0086               	movwf	6
  4876  0ADC  3001               	movlw	1	; select bank2/3
  4877  0ADD  0087               	movwf	7
  4878  0ADE  3F40               	moviw [0]fsr1
  4879  0ADF  00A0               	movwf	UART_buff_modulo_inc@value
  4880  0AE0  3F41               	moviw [1]fsr1
  4881  0AE1  00A1               	movwf	UART_buff_modulo_inc@value+1
  4882  0AE2  3014               	movlw	20
  4883  0AE3  00A2               	movwf	UART_buff_modulo_inc@modulus
  4884  0AE4  3000               	movlw	0
  4885  0AE5  00A3               	movwf	UART_buff_modulo_inc@modulus+1
  4886  0AE6  3195  25DF         	fcall	_UART_buff_modulo_inc
  4887  0AE8  0020               	movlb	0	; select bank0
  4888  0AE9  082A               	movf	UART_buff_put@_this,w
  4889  0AEA  3E16               	addlw	22
  4890  0AEB  0086               	movwf	6
  4891  0AEC  3001               	movlw	1	; select bank2/3
  4892  0AED  0087               	movwf	7
  4893  0AEE  0820               	movf	?_UART_buff_modulo_inc,w
  4894  0AEF  3FC0               	movwi [0]fsr1
  4895  0AF0  0821               	movf	?_UART_buff_modulo_inc+1,w
  4896  0AF1  3FC1               	movwi [1]fsr1
  4897  0AF2  0008               	return
  4898  0AF3                     __end_of_UART_buff_put:	
  4899                           
  4900                           	psect	text6
  4901  17AF                     __ptext6:	
  4902 ;; *************** function _UART_buff_get *****************
  4903 ;; Defined at:
  4904 ;;		line 73 in file "UART.c"
  4905 ;; Parameters:    Size  Location     Type
  4906 ;;  _this           1    wreg     PTR struct UART_ring_buf
  4907 ;;		 -> output_buffer(26), input_buffer(26), 
  4908 ;; Auto vars:     Size  Location     Type
  4909 ;;  _this           1   10[BANK0 ] PTR struct UART_ring_buf
  4910 ;;		 -> output_buffer(26), input_buffer(26), 
  4911 ;;  c               1    9[BANK0 ] unsigned char 
  4912 ;; Return value:  Size  Location     Type
  4913 ;;                  1    wreg      unsigned char 
  4914 ;; Registers used:
  4915 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4916 ;; Tracked objects:
  4917 ;;		On entry : 0/0
  4918 ;;		On exit  : 0/0
  4919 ;;		Unchanged: 0/0
  4920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4922 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4923 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4924 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4925 ;;Total ram usage:        5 bytes
  4926 ;; Hardware stack levels used:    1
  4927 ;; Hardware stack levels required when called:    5
  4928 ;; This function calls:
  4929 ;;		_UART_buff_modulo_inc
  4930 ;; This function is called by:
  4931 ;;		_Send_put
  4932 ;;		_Receive_get
  4933 ;; This function uses a non-reentrant model
  4934 ;;
  4935                           
  4936                           
  4937                           ;psect for function _UART_buff_get
  4938  17AF                     _UART_buff_get:	
  4939                           
  4940                           ;incstack = 0
  4941                           ; Regs used in _UART_buff_get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4942                           ;UART_buff_get@_this stored from wreg
  4943  17AF  0020               	movlb	0	; select bank0
  4944  17B0  00AA               	movwf	UART_buff_get@_this
  4945                           
  4946                           ;UART.c: 74: unsigned char c;
  4947                           ;UART.c: 75: if (_this->count > 0) {
  4948  17B1  082A               	movf	UART_buff_get@_this,w
  4949  17B2  3E18               	addlw	24
  4950  17B3  0086               	movwf	6
  4951  17B4  3001               	movlw	1	; select bank2/3
  4952  17B5  0087               	movwf	7
  4953  17B6  3F40               	moviw [0]fsr1
  4954  17B7  00A6               	movwf	??_UART_buff_get
  4955  17B8  3F41               	moviw [1]fsr1
  4956  17B9  00A7               	movwf	??_UART_buff_get+1
  4957  17BA  0827               	movf	??_UART_buff_get+1,w
  4958  17BB  3A80               	xorlw	128
  4959  17BC  00A8               	movwf	??_UART_buff_get+2
  4960  17BD  3080               	movlw	128
  4961  17BE  0228               	subwf	??_UART_buff_get+2,w
  4962  17BF  1D03               	skipz
  4963  17C0  2FC3               	goto	u2145
  4964  17C1  3001               	movlw	1
  4965  17C2  0226               	subwf	??_UART_buff_get,w
  4966  17C3                     u2145:	
  4967  17C3  1C03               	skipc
  4968  17C4  2FFC               	goto	l2117
  4969                           
  4970                           ;UART.c: 76: c = _this->buf[_this->tail];
  4971  17C5  0020               	movlb	0	; select bank0
  4972  17C6  082A               	movf	UART_buff_get@_this,w
  4973  17C7  3E16               	addlw	22
  4974  17C8  0086               	movwf	6
  4975  17C9  3001               	movlw	1	; select bank2/3
  4976  17CA  0087               	movwf	7
  4977  17CB  0801               	movf	1,w
  4978  17CC  072A               	addwf	UART_buff_get@_this,w
  4979  17CD  00A6               	movwf	??_UART_buff_get
  4980  17CE  0826               	movf	??_UART_buff_get,w
  4981  17CF  0086               	movwf	6
  4982  17D0  3001               	movlw	1	; select bank2/3
  4983  17D1  0087               	movwf	7
  4984  17D2  0801               	movf	1,w
  4985  17D3  00A7               	movwf	??_UART_buff_get+1
  4986  17D4  0827               	movf	??_UART_buff_get+1,w
  4987  17D5  00A9               	movwf	UART_buff_get@c
  4988                           
  4989                           ;UART.c: 77: _this->tail = UART_buff_modulo_inc(_this->tail, 20);
  4990  17D6  082A               	movf	UART_buff_get@_this,w
  4991  17D7  3E16               	addlw	22
  4992  17D8  0086               	movwf	6
  4993  17D9  3001               	movlw	1	; select bank2/3
  4994  17DA  0087               	movwf	7
  4995  17DB  3F40               	moviw [0]fsr1
  4996  17DC  00A0               	movwf	UART_buff_modulo_inc@value
  4997  17DD  3F41               	moviw [1]fsr1
  4998  17DE  00A1               	movwf	UART_buff_modulo_inc@value+1
  4999  17DF  3014               	movlw	20
  5000  17E0  00A2               	movwf	UART_buff_modulo_inc@modulus
  5001  17E1  3000               	movlw	0
  5002  17E2  00A3               	movwf	UART_buff_modulo_inc@modulus+1
  5003  17E3  3195  25DF  3197   	fcall	_UART_buff_modulo_inc
  5004  17E6  0020               	movlb	0	; select bank0
  5005  17E7  082A               	movf	UART_buff_get@_this,w
  5006  17E8  3E16               	addlw	22
  5007  17E9  0086               	movwf	6
  5008  17EA  3001               	movlw	1	; select bank2/3
  5009  17EB  0087               	movwf	7
  5010  17EC  0820               	movf	?_UART_buff_modulo_inc,w
  5011  17ED  3FC0               	movwi [0]fsr1
  5012  17EE  0821               	movf	?_UART_buff_modulo_inc+1,w
  5013  17EF  3FC1               	movwi [1]fsr1
  5014                           
  5015                           ;UART.c: 78: --_this->count;
  5016  17F0  082A               	movf	UART_buff_get@_this,w
  5017  17F1  3E18               	addlw	24
  5018  17F2  0086               	movwf	6
  5019  17F3  3001               	movlw	1	; select bank2/3
  5020  17F4  0087               	movwf	7
  5021  17F5  30FF               	movlw	255
  5022  17F6  0781               	addwf	1,f
  5023  17F7  3141               	addfsr 1,1
  5024  17F8  30FF               	movlw	255
  5025  17F9  3D81               	addwfc	1,f
  5026  17FA  317F               	addfsr 1,-1
  5027                           
  5028                           ;UART.c: 79: } else {
  5029  17FB  2FFE               	goto	l2119
  5030  17FC                     l2117:	
  5031                           
  5032                           ;UART.c: 80: c = 0;
  5033  17FC  0020               	movlb	0	; select bank0
  5034  17FD  01A9               	clrf	UART_buff_get@c
  5035  17FE                     l2119:	
  5036                           
  5037                           ;UART.c: 81: }
  5038                           ;UART.c: 82: return (c);
  5039  17FE  0829               	movf	UART_buff_get@c,w
  5040  17FF  0008               	return
  5041  1800                     __end_of_UART_buff_get:	
  5042                           
  5043                           	psect	text7
  5044  15DF                     __ptext7:	
  5045 ;; *************** function _UART_buff_modulo_inc *****************
  5046 ;; Defined at:
  5047 ;;		line 89 in file "UART.c"
  5048 ;; Parameters:    Size  Location     Type
  5049 ;;  value           2    0[BANK0 ] const unsigned int 
  5050 ;;  modulus         2    2[BANK0 ] const unsigned int 
  5051 ;; Auto vars:     Size  Location     Type
  5052 ;;  my_value        2    4[BANK0 ] unsigned int 
  5053 ;; Return value:  Size  Location     Type
  5054 ;;                  2    0[BANK0 ] unsigned int 
  5055 ;; Registers used:
  5056 ;;		wreg, status,2, status,0
  5057 ;; Tracked objects:
  5058 ;;		On entry : 0/0
  5059 ;;		On exit  : 0/0
  5060 ;;		Unchanged: 0/0
  5061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5062 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5063 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5065 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5066 ;;Total ram usage:        6 bytes
  5067 ;; Hardware stack levels used:    1
  5068 ;; Hardware stack levels required when called:    4
  5069 ;; This function calls:
  5070 ;;		Nothing
  5071 ;; This function is called by:
  5072 ;;		_UART_buff_put
  5073 ;;		_UART_buff_get
  5074 ;; This function uses a non-reentrant model
  5075 ;;
  5076                           
  5077                           
  5078                           ;psect for function _UART_buff_modulo_inc
  5079  15DF                     _UART_buff_modulo_inc:	
  5080                           
  5081                           ;UART.c: 90: unsigned int my_value = value + 1;
  5082                           
  5083                           ;incstack = 0
  5084                           ; Regs used in _UART_buff_modulo_inc: [wreg+status,2+status,0]
  5085  15DF  0020               	movlb	0	; select bank0
  5086  15E0  0820               	movf	UART_buff_modulo_inc@value,w
  5087  15E1  3E01               	addlw	1
  5088  15E2  00A4               	movwf	UART_buff_modulo_inc@my_value
  5089  15E3  3000               	movlw	0
  5090  15E4  3D21               	addwfc	UART_buff_modulo_inc@value+1,w
  5091  15E5  00A5               	movwf	UART_buff_modulo_inc@my_value+1
  5092                           
  5093                           ;UART.c: 91: if (my_value >= modulus) {
  5094  15E6  0823               	movf	UART_buff_modulo_inc@modulus+1,w
  5095  15E7  0225               	subwf	UART_buff_modulo_inc@my_value+1,w
  5096  15E8  1D03               	skipz
  5097  15E9  2DEC               	goto	u2115
  5098  15EA  0822               	movf	UART_buff_modulo_inc@modulus,w
  5099  15EB  0224               	subwf	UART_buff_modulo_inc@my_value,w
  5100  15EC                     u2115:	
  5101  15EC  1C03               	skipc
  5102  15ED  2DF0               	goto	l2083
  5103                           
  5104                           ;UART.c: 92: my_value = 0;
  5105  15EE  01A4               	clrf	UART_buff_modulo_inc@my_value
  5106  15EF  01A5               	clrf	UART_buff_modulo_inc@my_value+1
  5107  15F0                     l2083:	
  5108                           
  5109                           ;UART.c: 93: }
  5110                           ;UART.c: 94: return (my_value);
  5111  15F0  0825               	movf	UART_buff_modulo_inc@my_value+1,w
  5112  15F1  00A1               	movwf	?_UART_buff_modulo_inc+1
  5113  15F2  0824               	movf	UART_buff_modulo_inc@my_value,w
  5114  15F3  00A0               	movwf	?_UART_buff_modulo_inc
  5115  15F4  0008               	return
  5116  15F5                     __end_of_UART_buff_modulo_inc:	
  5117                           
  5118                           	psect	text8
  5119  05C7                     __ptext8:	
  5120 ;; *************** function _fround *****************
  5121 ;; Defined at:
  5122 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  5123 ;; Parameters:    Size  Location     Type
  5124 ;;  prec            1    wreg     unsigned char 
  5125 ;; Auto vars:     Size  Location     Type
  5126 ;;  prec            1   51[BANK0 ] unsigned char 
  5127 ;; Return value:  Size  Location     Type
  5128 ;;                  3   38[BANK0 ] unsigned char 
  5129 ;; Registers used:
  5130 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5131 ;; Tracked objects:
  5132 ;;		On entry : 0/0
  5133 ;;		On exit  : 0/0
  5134 ;;		Unchanged: 0/0
  5135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5136 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5137 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5138 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5139 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5140 ;;Total ram usage:       14 bytes
  5141 ;; Hardware stack levels used:    1
  5142 ;; Hardware stack levels required when called:    6
  5143 ;; This function calls:
  5144 ;;		___awdiv
  5145 ;;		___awmod
  5146 ;;		___ftmul
  5147 ;;		___wmul
  5148 ;; This function is called by:
  5149 ;;		_printf
  5150 ;; This function uses a non-reentrant model
  5151 ;;
  5152                           
  5153                           
  5154                           ;psect for function _fround
  5155  05C7                     _fround:	
  5156                           
  5157                           ;incstack = 0
  5158                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5159                           ;fround@prec stored from wreg
  5160  05C7  0020               	movlb	0	; select bank0
  5161  05C8  00D3               	movwf	fround@prec
  5162                           
  5163                           ;doprnt.c: 413: if(prec>=110)
  5164  05C9  306E               	movlw	110
  5165  05CA  0253               	subwf	fround@prec,w
  5166  05CB  1C03               	skipc
  5167  05CC  2E88               	goto	l2471
  5168                           
  5169                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5170  05CD  300A               	movlw	10
  5171  05CE  00A7               	movwf	___awdiv@divisor
  5172  05CF  3000               	movlw	0
  5173  05D0  00A8               	movwf	___awdiv@divisor+1
  5174  05D1  0853               	movf	fround@prec,w
  5175  05D2  00C9               	movwf	??_fround
  5176  05D3  01CA               	clrf	??_fround+1
  5177  05D4  0849               	movf	??_fround,w
  5178  05D5  00A2               	movwf	___awmod@dividend
  5179  05D6  084A               	movf	??_fround+1,w
  5180  05D7  00A3               	movwf	___awmod@dividend+1
  5181  05D8  3064               	movlw	100
  5182  05D9  00A0               	movwf	___awmod@divisor
  5183  05DA  3000               	movlw	0
  5184  05DB  00A1               	movwf	___awmod@divisor+1
  5185  05DC  3188  2002  3185   	fcall	___awmod
  5186  05DF  0020               	movlb	0	; select bank0
  5187  05E0  0821               	movf	?___awmod+1,w
  5188  05E1  00AA               	movwf	___awdiv@dividend+1
  5189  05E2  0820               	movf	?___awmod,w
  5190  05E3  00A9               	movwf	___awdiv@dividend
  5191  05E4  3188  2048  3185   	fcall	___awdiv
  5192  05E7  0020               	movlb	0	; select bank0
  5193  05E8  0827               	movf	?___awdiv,w
  5194  05E9  3E09               	addlw	9
  5195  05EA  00B0               	movwf	___wmul@multiplier
  5196  05EB  3000               	movlw	0
  5197  05EC  3D28               	addwfc	?___awdiv+1,w
  5198  05ED  00B1               	movwf	___wmul@multiplier+1
  5199  05EE  3003               	movlw	3
  5200  05EF  00B2               	movwf	___wmul@multiplicand
  5201  05F0  3000               	movlw	0
  5202  05F1  00B3               	movwf	___wmul@multiplicand+1
  5203  05F2  3196  265A  3185   	fcall	___wmul
  5204  05F5  0020               	movlb	0	; select bank0
  5205  05F6  0831               	movf	?___wmul+1,w
  5206  05F7  0085               	movwf	5
  5207  05F8  0830               	movf	?___wmul,w
  5208  05F9  0084               	movwf	4
  5209  05FA  3028               	movlw	low (__npowers_| (0+32768))
  5210  05FB  0784               	addwf	4,f
  5211  05FC  3090               	movlw	high (__npowers_| (0+32768))
  5212  05FD  3D85               	addwfc	5,f
  5213  05FE  3F00               	moviw [0]fsr0
  5214  05FF  00B6               	movwf	___ftmul@f1
  5215  0600  3F01               	moviw [1]fsr0
  5216  0601  00B7               	movwf	___ftmul@f1+1
  5217  0602  3F02               	moviw [2]fsr0
  5218  0603  00B8               	movwf	___ftmul@f1+2
  5219  0604  3064               	movlw	100
  5220  0605  00A7               	movwf	___awdiv@divisor
  5221  0606  3000               	movlw	0
  5222  0607  00A8               	movwf	___awdiv@divisor+1
  5223  0608  0853               	movf	fround@prec,w
  5224  0609  00CB               	movwf	??_fround+2
  5225  060A  01CC               	clrf	??_fround+3
  5226  060B  084B               	movf	??_fround+2,w
  5227  060C  00A9               	movwf	___awdiv@dividend
  5228  060D  084C               	movf	??_fround+3,w
  5229  060E  00AA               	movwf	___awdiv@dividend+1
  5230  060F  3188  2048  3185   	fcall	___awdiv
  5231  0612  0020               	movlb	0	; select bank0
  5232  0613  0827               	movf	?___awdiv,w
  5233  0614  3E12               	addlw	18
  5234  0615  00B0               	movwf	___wmul@multiplier
  5235  0616  3000               	movlw	0
  5236  0617  3D28               	addwfc	?___awdiv+1,w
  5237  0618  00B1               	movwf	___wmul@multiplier+1
  5238  0619  3003               	movlw	3
  5239  061A  00B2               	movwf	___wmul@multiplicand
  5240  061B  3000               	movlw	0
  5241  061C  00B3               	movwf	___wmul@multiplicand+1
  5242  061D  3196  265A  3185   	fcall	___wmul
  5243  0620  0020               	movlb	0	; select bank0
  5244  0621  0831               	movf	?___wmul+1,w
  5245  0622  0085               	movwf	5
  5246  0623  0830               	movf	?___wmul,w
  5247  0624  0084               	movwf	4
  5248  0625  3028               	movlw	low (__npowers_| (0+32768))
  5249  0626  0784               	addwf	4,f
  5250  0627  3090               	movlw	high (__npowers_| (0+32768))
  5251  0628  3D85               	addwfc	5,f
  5252  0629  3F00               	moviw [0]fsr0
  5253  062A  00B9               	movwf	___ftmul@f2
  5254  062B  3F01               	moviw [1]fsr0
  5255  062C  00BA               	movwf	___ftmul@f2+1
  5256  062D  3F02               	moviw [2]fsr0
  5257  062E  00BB               	movwf	___ftmul@f2+2
  5258  062F  318A  22F3  3185   	fcall	___ftmul
  5259  0632  0020               	movlb	0	; select bank0
  5260  0633  0836               	movf	?___ftmul,w
  5261  0634  00D0               	movwf	_fround$1312
  5262  0635  0837               	movf	?___ftmul+1,w
  5263  0636  00D1               	movwf	_fround$1312+1
  5264  0637  0838               	movf	?___ftmul+2,w
  5265  0638  00D2               	movwf	_fround$1312+2
  5266                           
  5267                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5268  0639  0853               	movf	fround@prec,w
  5269  063A  00C9               	movwf	??_fround
  5270  063B  01CA               	clrf	??_fround+1
  5271  063C  0849               	movf	??_fround,w
  5272  063D  00A2               	movwf	___awmod@dividend
  5273  063E  084A               	movf	??_fround+1,w
  5274  063F  00A3               	movwf	___awmod@dividend+1
  5275  0640  300A               	movlw	10
  5276  0641  00A0               	movwf	___awmod@divisor
  5277  0642  3000               	movlw	0
  5278  0643  00A1               	movwf	___awmod@divisor+1
  5279  0644  3188  2002  3185   	fcall	___awmod
  5280  0647  0020               	movlb	0	; select bank0
  5281  0648  0821               	movf	?___awmod+1,w
  5282  0649  00B1               	movwf	___wmul@multiplier+1
  5283  064A  0820               	movf	?___awmod,w
  5284  064B  00B0               	movwf	___wmul@multiplier
  5285  064C  3003               	movlw	3
  5286  064D  00B2               	movwf	___wmul@multiplicand
  5287  064E  3000               	movlw	0
  5288  064F  00B3               	movwf	___wmul@multiplicand+1
  5289  0650  3196  265A  3185   	fcall	___wmul
  5290  0653  0020               	movlb	0	; select bank0
  5291  0654  0831               	movf	?___wmul+1,w
  5292  0655  0085               	movwf	5
  5293  0656  0830               	movf	?___wmul,w
  5294  0657  0084               	movwf	4
  5295  0658  3028               	movlw	low (__npowers_| (0+32768))
  5296  0659  0784               	addwf	4,f
  5297  065A  3090               	movlw	high (__npowers_| (0+32768))
  5298  065B  3D85               	addwfc	5,f
  5299  065C  3F00               	moviw [0]fsr0
  5300  065D  00B6               	movwf	___ftmul@f1
  5301  065E  3F01               	moviw [1]fsr0
  5302  065F  00B7               	movwf	___ftmul@f1+1
  5303  0660  3F02               	moviw [2]fsr0
  5304  0661  00B8               	movwf	___ftmul@f1+2
  5305  0662  0850               	movf	_fround$1312,w
  5306  0663  00B9               	movwf	___ftmul@f2
  5307  0664  0851               	movf	_fround$1312+1,w
  5308  0665  00BA               	movwf	___ftmul@f2+1
  5309  0666  0852               	movf	_fround$1312+2,w
  5310  0667  00BB               	movwf	___ftmul@f2+2
  5311  0668  318A  22F3  3185   	fcall	___ftmul
  5312  066B  0020               	movlb	0	; select bank0
  5313  066C  0836               	movf	?___ftmul,w
  5314  066D  00CD               	movwf	_fround$1313
  5315  066E  0837               	movf	?___ftmul+1,w
  5316  066F  00CE               	movwf	_fround$1313+1
  5317  0670  0838               	movf	?___ftmul+2,w
  5318  0671  00CF               	movwf	_fround$1313+2
  5319                           
  5320                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5321  0672  3000               	movlw	0
  5322  0673  00B6               	movwf	___ftmul@f1
  5323  0674  3000               	movlw	0
  5324  0675  00B7               	movwf	___ftmul@f1+1
  5325  0676  303F               	movlw	63
  5326  0677  00B8               	movwf	___ftmul@f1+2
  5327  0678  084D               	movf	_fround$1313,w
  5328  0679  00B9               	movwf	___ftmul@f2
  5329  067A  084E               	movf	_fround$1313+1,w
  5330  067B  00BA               	movwf	___ftmul@f2+1
  5331  067C  084F               	movf	_fround$1313+2,w
  5332  067D  00BB               	movwf	___ftmul@f2+2
  5333  067E  318A  22F3         	fcall	___ftmul
  5334  0680  0020               	movlb	0	; select bank0
  5335  0681  0836               	movf	?___ftmul,w
  5336  0682  00C6               	movwf	?_fround
  5337  0683  0837               	movf	?___ftmul+1,w
  5338  0684  00C7               	movwf	?_fround+1
  5339  0685  0838               	movf	?___ftmul+2,w
  5340  0686  00C8               	movwf	?_fround+2
  5341  0687  0008               	return
  5342  0688                     l2471:	
  5343                           
  5344                           ;doprnt.c: 415: else if(prec > 10)
  5345  0688  300B               	movlw	11
  5346  0689  0253               	subwf	fround@prec,w
  5347  068A  1C03               	skipc
  5348  068B  2F00               	goto	l2479
  5349                           
  5350                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5351  068C  0853               	movf	fround@prec,w
  5352  068D  00C9               	movwf	??_fround
  5353  068E  01CA               	clrf	??_fround+1
  5354  068F  0849               	movf	??_fround,w
  5355  0690  00A2               	movwf	___awmod@dividend
  5356  0691  084A               	movf	??_fround+1,w
  5357  0692  00A3               	movwf	___awmod@dividend+1
  5358  0693  300A               	movlw	10
  5359  0694  00A0               	movwf	___awmod@divisor
  5360  0695  3000               	movlw	0
  5361  0696  00A1               	movwf	___awmod@divisor+1
  5362  0697  3188  2002  3185   	fcall	___awmod
  5363  069A  0020               	movlb	0	; select bank0
  5364  069B  0821               	movf	?___awmod+1,w
  5365  069C  00B1               	movwf	___wmul@multiplier+1
  5366  069D  0820               	movf	?___awmod,w
  5367  069E  00B0               	movwf	___wmul@multiplier
  5368  069F  3003               	movlw	3
  5369  06A0  00B2               	movwf	___wmul@multiplicand
  5370  06A1  3000               	movlw	0
  5371  06A2  00B3               	movwf	___wmul@multiplicand+1
  5372  06A3  3196  265A  3185   	fcall	___wmul
  5373  06A6  0020               	movlb	0	; select bank0
  5374  06A7  0831               	movf	?___wmul+1,w
  5375  06A8  0085               	movwf	5
  5376  06A9  0830               	movf	?___wmul,w
  5377  06AA  0084               	movwf	4
  5378  06AB  3028               	movlw	low (__npowers_| (0+32768))
  5379  06AC  0784               	addwf	4,f
  5380  06AD  3090               	movlw	high (__npowers_| (0+32768))
  5381  06AE  3D85               	addwfc	5,f
  5382  06AF  3F00               	moviw [0]fsr0
  5383  06B0  00B6               	movwf	___ftmul@f1
  5384  06B1  3F01               	moviw [1]fsr0
  5385  06B2  00B7               	movwf	___ftmul@f1+1
  5386  06B3  3F02               	moviw [2]fsr0
  5387  06B4  00B8               	movwf	___ftmul@f1+2
  5388  06B5  300A               	movlw	10
  5389  06B6  00A7               	movwf	___awdiv@divisor
  5390  06B7  3000               	movlw	0
  5391  06B8  00A8               	movwf	___awdiv@divisor+1
  5392  06B9  0853               	movf	fround@prec,w
  5393  06BA  00CB               	movwf	??_fround+2
  5394  06BB  01CC               	clrf	??_fround+3
  5395  06BC  084B               	movf	??_fround+2,w
  5396  06BD  00A9               	movwf	___awdiv@dividend
  5397  06BE  084C               	movf	??_fround+3,w
  5398  06BF  00AA               	movwf	___awdiv@dividend+1
  5399  06C0  3188  2048  3185   	fcall	___awdiv
  5400  06C3  0020               	movlb	0	; select bank0
  5401  06C4  0827               	movf	?___awdiv,w
  5402  06C5  3E09               	addlw	9
  5403  06C6  00B0               	movwf	___wmul@multiplier
  5404  06C7  3000               	movlw	0
  5405  06C8  3D28               	addwfc	?___awdiv+1,w
  5406  06C9  00B1               	movwf	___wmul@multiplier+1
  5407  06CA  3003               	movlw	3
  5408  06CB  00B2               	movwf	___wmul@multiplicand
  5409  06CC  3000               	movlw	0
  5410  06CD  00B3               	movwf	___wmul@multiplicand+1
  5411  06CE  3196  265A  3185   	fcall	___wmul
  5412  06D1  0020               	movlb	0	; select bank0
  5413  06D2  0831               	movf	?___wmul+1,w
  5414  06D3  0085               	movwf	5
  5415  06D4  0830               	movf	?___wmul,w
  5416  06D5  0084               	movwf	4
  5417  06D6  3028               	movlw	low (__npowers_| (0+32768))
  5418  06D7  0784               	addwf	4,f
  5419  06D8  3090               	movlw	high (__npowers_| (0+32768))
  5420  06D9  3D85               	addwfc	5,f
  5421  06DA  3F00               	moviw [0]fsr0
  5422  06DB  00B9               	movwf	___ftmul@f2
  5423  06DC  3F01               	moviw [1]fsr0
  5424  06DD  00BA               	movwf	___ftmul@f2+1
  5425  06DE  3F02               	moviw [2]fsr0
  5426  06DF  00BB               	movwf	___ftmul@f2+2
  5427  06E0  318A  22F3  3185   	fcall	___ftmul
  5428  06E3  0020               	movlb	0	; select bank0
  5429  06E4  0836               	movf	?___ftmul,w
  5430  06E5  00D0               	movwf	_fround$1312
  5431  06E6  0837               	movf	?___ftmul+1,w
  5432  06E7  00D1               	movwf	_fround$1312+1
  5433  06E8  0838               	movf	?___ftmul+2,w
  5434  06E9  00D2               	movwf	_fround$1312+2
  5435                           
  5436                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5437  06EA  3000               	movlw	0
  5438  06EB  00B6               	movwf	___ftmul@f1
  5439  06EC  3000               	movlw	0
  5440  06ED  00B7               	movwf	___ftmul@f1+1
  5441  06EE  303F               	movlw	63
  5442  06EF  00B8               	movwf	___ftmul@f1+2
  5443  06F0  0850               	movf	_fround$1312,w
  5444  06F1  00B9               	movwf	___ftmul@f2
  5445  06F2  0851               	movf	_fround$1312+1,w
  5446  06F3  00BA               	movwf	___ftmul@f2+1
  5447  06F4  0852               	movf	_fround$1312+2,w
  5448  06F5  00BB               	movwf	___ftmul@f2+2
  5449  06F6  318A  22F3         	fcall	___ftmul
  5450  06F8  0020               	movlb	0	; select bank0
  5451  06F9  0836               	movf	?___ftmul,w
  5452  06FA  00C6               	movwf	?_fround
  5453  06FB  0837               	movf	?___ftmul+1,w
  5454  06FC  00C7               	movwf	?_fround+1
  5455  06FD  0838               	movf	?___ftmul+2,w
  5456  06FE  00C8               	movwf	?_fround+2
  5457  06FF  0008               	return
  5458  0700                     l2479:	
  5459                           
  5460                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5461  0700  3000               	movlw	0
  5462  0701  00B6               	movwf	___ftmul@f1
  5463  0702  3000               	movlw	0
  5464  0703  00B7               	movwf	___ftmul@f1+1
  5465  0704  303F               	movlw	63
  5466  0705  00B8               	movwf	___ftmul@f1+2
  5467  0706  0853               	movf	fround@prec,w
  5468  0707  00C9               	movwf	??_fround
  5469  0708  01CA               	clrf	??_fround+1
  5470  0709  0849               	movf	??_fround,w
  5471  070A  00B0               	movwf	___wmul@multiplier
  5472  070B  084A               	movf	??_fround+1,w
  5473  070C  00B1               	movwf	___wmul@multiplier+1
  5474  070D  3003               	movlw	3
  5475  070E  00B2               	movwf	___wmul@multiplicand
  5476  070F  3000               	movlw	0
  5477  0710  00B3               	movwf	___wmul@multiplicand+1
  5478  0711  3196  265A  3185   	fcall	___wmul
  5479  0714  0020               	movlb	0	; select bank0
  5480  0715  0831               	movf	?___wmul+1,w
  5481  0716  0085               	movwf	5
  5482  0717  0830               	movf	?___wmul,w
  5483  0718  0084               	movwf	4
  5484  0719  3028               	movlw	low (__npowers_| (0+32768))
  5485  071A  0784               	addwf	4,f
  5486  071B  3090               	movlw	high (__npowers_| (0+32768))
  5487  071C  3D85               	addwfc	5,f
  5488  071D  3F00               	moviw [0]fsr0
  5489  071E  00B9               	movwf	___ftmul@f2
  5490  071F  3F01               	moviw [1]fsr0
  5491  0720  00BA               	movwf	___ftmul@f2+1
  5492  0721  3F02               	moviw [2]fsr0
  5493  0722  00BB               	movwf	___ftmul@f2+2
  5494  0723  318A  22F3         	fcall	___ftmul
  5495  0725  0020               	movlb	0	; select bank0
  5496  0726  0836               	movf	?___ftmul,w
  5497  0727  00C6               	movwf	?_fround
  5498  0728  0837               	movf	?___ftmul+1,w
  5499  0729  00C7               	movwf	?_fround+1
  5500  072A  0838               	movf	?___ftmul+2,w
  5501  072B  00C8               	movwf	?_fround+2
  5502  072C  0008               	return
  5503  072D                     __end_of_fround:	
  5504                           
  5505                           	psect	text9
  5506  165A                     __ptext9:	
  5507 ;; *************** function ___wmul *****************
  5508 ;; Defined at:
  5509 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  5510 ;; Parameters:    Size  Location     Type
  5511 ;;  multiplier      2   16[BANK0 ] unsigned int 
  5512 ;;  multiplicand    2   18[BANK0 ] unsigned int 
  5513 ;; Auto vars:     Size  Location     Type
  5514 ;;  product         2   20[BANK0 ] unsigned int 
  5515 ;; Return value:  Size  Location     Type
  5516 ;;                  2   16[BANK0 ] unsigned int 
  5517 ;; Registers used:
  5518 ;;		wreg, status,2, status,0
  5519 ;; Tracked objects:
  5520 ;;		On entry : 0/0
  5521 ;;		On exit  : 0/0
  5522 ;;		Unchanged: 0/0
  5523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5524 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5525 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5527 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5528 ;;Total ram usage:        6 bytes
  5529 ;; Hardware stack levels used:    1
  5530 ;; Hardware stack levels required when called:    4
  5531 ;; This function calls:
  5532 ;;		Nothing
  5533 ;; This function is called by:
  5534 ;;		_fround
  5535 ;;		_scale
  5536 ;;		_printf
  5537 ;; This function uses a non-reentrant model
  5538 ;;
  5539                           
  5540                           
  5541                           ;psect for function ___wmul
  5542  165A                     ___wmul:	
  5543                           
  5544                           ;incstack = 0
  5545                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5546  165A  0020               	movlb	0	; select bank0
  5547  165B  01B4               	clrf	___wmul@product
  5548  165C  01B5               	clrf	___wmul@product+1
  5549  165D                     l2169:	
  5550  165D  1C30               	btfss	___wmul@multiplier,0
  5551  165E  2E63               	goto	l503
  5552  165F  0832               	movf	___wmul@multiplicand,w
  5553  1660  07B4               	addwf	___wmul@product,f
  5554  1661  0833               	movf	___wmul@multiplicand+1,w
  5555  1662  3DB5               	addwfc	___wmul@product+1,f
  5556  1663                     l503:	
  5557  1663  3001               	movlw	1
  5558  1664                     u2295:	
  5559  1664  35B2               	lslf	___wmul@multiplicand,f
  5560  1665  0DB3               	rlf	___wmul@multiplicand+1,f
  5561  1666  0B89               	decfsz	9,f
  5562  1667  2E64               	goto	u2295
  5563  1668  3001               	movlw	1
  5564  1669                     u2305:	
  5565  1669  36B1               	lsrf	___wmul@multiplier+1,f
  5566  166A  0CB0               	rrf	___wmul@multiplier,f
  5567  166B  0B89               	decfsz	9,f
  5568  166C  2E69               	goto	u2305
  5569  166D  0830               	movf	___wmul@multiplier,w
  5570  166E  0431               	iorwf	___wmul@multiplier+1,w
  5571  166F  1D03               	btfss	3,2
  5572  1670  2E5D               	goto	l2169
  5573  1671  0835               	movf	___wmul@product+1,w
  5574  1672  00B1               	movwf	?___wmul+1
  5575  1673  0834               	movf	___wmul@product,w
  5576  1674  00B0               	movwf	?___wmul
  5577  1675  0008               	return
  5578  1676                     __end_of___wmul:	
  5579                           
  5580                           	psect	text10
  5581  0AF3                     __ptext10:	
  5582 ;; *************** function ___ftmul *****************
  5583 ;; Defined at:
  5584 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
  5585 ;; Parameters:    Size  Location     Type
  5586 ;;  f1              3   22[BANK0 ] float 
  5587 ;;  f2              3   25[BANK0 ] float 
  5588 ;; Auto vars:     Size  Location     Type
  5589 ;;  f3_as_produc    3   33[BANK0 ] unsigned um
  5590 ;;  sign            1   37[BANK0 ] unsigned char 
  5591 ;;  cntr            1   36[BANK0 ] unsigned char 
  5592 ;;  exp             1   32[BANK0 ] unsigned char 
  5593 ;; Return value:  Size  Location     Type
  5594 ;;                  3   22[BANK0 ] float 
  5595 ;; Registers used:
  5596 ;;		wreg, status,2, status,0, pclath, cstack
  5597 ;; Tracked objects:
  5598 ;;		On entry : 0/0
  5599 ;;		On exit  : 0/0
  5600 ;;		Unchanged: 0/0
  5601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5602 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5603 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5604 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5605 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5606 ;;Total ram usage:       16 bytes
  5607 ;; Hardware stack levels used:    1
  5608 ;; Hardware stack levels required when called:    5
  5609 ;; This function calls:
  5610 ;;		___ftpack
  5611 ;; This function is called by:
  5612 ;;		_fround
  5613 ;;		_scale
  5614 ;;		_printf
  5615 ;;		_RadioOperation
  5616 ;; This function uses a non-reentrant model
  5617 ;;
  5618                           
  5619                           
  5620                           ;psect for function ___ftmul
  5621  0AF3                     ___ftmul:	
  5622                           
  5623                           ;incstack = 0
  5624                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5625  0AF3  0020               	movlb	0	; select bank0
  5626  0AF4  0836               	movf	___ftmul@f1,w
  5627  0AF5  00BC               	movwf	??___ftmul
  5628  0AF6  0837               	movf	___ftmul@f1+1,w
  5629  0AF7  00BD               	movwf	??___ftmul+1
  5630  0AF8  0838               	movf	___ftmul@f1+2,w
  5631  0AF9  00BE               	movwf	??___ftmul+2
  5632  0AFA  1003               	clrc
  5633  0AFB  0D3D               	rlf	??___ftmul+1,w
  5634  0AFC  0D3E               	rlf	??___ftmul+2,w
  5635  0AFD  00BF               	movwf	??___ftmul+3
  5636  0AFE  083F               	movf	??___ftmul+3,w
  5637  0AFF  00C0               	movwf	___ftmul@exp
  5638  0B00  0840               	movf	___ftmul@exp,w
  5639  0B01  1D03               	btfss	3,2
  5640  0B02  2B0A               	goto	l2339
  5641  0B03  3000               	movlw	0
  5642  0B04  00B6               	movwf	?___ftmul
  5643  0B05  3000               	movlw	0
  5644  0B06  00B7               	movwf	?___ftmul+1
  5645  0B07  3000               	movlw	0
  5646  0B08  00B8               	movwf	?___ftmul+2
  5647  0B09  0008               	return
  5648  0B0A                     l2339:	
  5649  0B0A  0839               	movf	___ftmul@f2,w
  5650  0B0B  00BC               	movwf	??___ftmul
  5651  0B0C  083A               	movf	___ftmul@f2+1,w
  5652  0B0D  00BD               	movwf	??___ftmul+1
  5653  0B0E  083B               	movf	___ftmul@f2+2,w
  5654  0B0F  00BE               	movwf	??___ftmul+2
  5655  0B10  1003               	clrc
  5656  0B11  0D3D               	rlf	??___ftmul+1,w
  5657  0B12  0D3E               	rlf	??___ftmul+2,w
  5658  0B13  00BF               	movwf	??___ftmul+3
  5659  0B14  083F               	movf	??___ftmul+3,w
  5660  0B15  00C5               	movwf	___ftmul@sign
  5661  0B16  0845               	movf	___ftmul@sign,w
  5662  0B17  1D03               	btfss	3,2
  5663  0B18  2B20               	goto	l2345
  5664  0B19  3000               	movlw	0
  5665  0B1A  00B6               	movwf	?___ftmul
  5666  0B1B  3000               	movlw	0
  5667  0B1C  00B7               	movwf	?___ftmul+1
  5668  0B1D  3000               	movlw	0
  5669  0B1E  00B8               	movwf	?___ftmul+2
  5670  0B1F  0008               	return
  5671  0B20                     l2345:	
  5672  0B20  0845               	movf	___ftmul@sign,w
  5673  0B21  3E7B               	addlw	123
  5674  0B22  00BC               	movwf	??___ftmul
  5675  0B23  083C               	movf	??___ftmul,w
  5676  0B24  07C0               	addwf	___ftmul@exp,f
  5677  0B25  0836               	movf	___ftmul@f1,w
  5678  0B26  00BC               	movwf	??___ftmul
  5679  0B27  0837               	movf	___ftmul@f1+1,w
  5680  0B28  00BD               	movwf	??___ftmul+1
  5681  0B29  0838               	movf	___ftmul@f1+2,w
  5682  0B2A  00BE               	movwf	??___ftmul+2
  5683  0B2B  3010               	movlw	16
  5684  0B2C                     u2765:	
  5685  0B2C  36BE               	lsrf	??___ftmul+2,f
  5686  0B2D  0CBD               	rrf	??___ftmul+1,f
  5687  0B2E  0CBC               	rrf	??___ftmul,f
  5688  0B2F  0B89               	decfsz	9,f
  5689  0B30  2B2C               	goto	u2765
  5690  0B31  083C               	movf	??___ftmul,w
  5691  0B32  00BF               	movwf	??___ftmul+3
  5692  0B33  083F               	movf	??___ftmul+3,w
  5693  0B34  00C5               	movwf	___ftmul@sign
  5694  0B35  0839               	movf	___ftmul@f2,w
  5695  0B36  00BC               	movwf	??___ftmul
  5696  0B37  083A               	movf	___ftmul@f2+1,w
  5697  0B38  00BD               	movwf	??___ftmul+1
  5698  0B39  083B               	movf	___ftmul@f2+2,w
  5699  0B3A  00BE               	movwf	??___ftmul+2
  5700  0B3B  3010               	movlw	16
  5701  0B3C                     u2775:	
  5702  0B3C  36BE               	lsrf	??___ftmul+2,f
  5703  0B3D  0CBD               	rrf	??___ftmul+1,f
  5704  0B3E  0CBC               	rrf	??___ftmul,f
  5705  0B3F  0B89               	decfsz	9,f
  5706  0B40  2B3C               	goto	u2775
  5707  0B41  083C               	movf	??___ftmul,w
  5708  0B42  00BF               	movwf	??___ftmul+3
  5709  0B43  083F               	movf	??___ftmul+3,w
  5710  0B44  06C5               	xorwf	___ftmul@sign,f
  5711  0B45  3080               	movlw	128
  5712  0B46  00BC               	movwf	??___ftmul
  5713  0B47  083C               	movf	??___ftmul,w
  5714  0B48  05C5               	andwf	___ftmul@sign,f
  5715  0B49  17B7               	bsf	___ftmul@f1+1,7
  5716  0B4A  17BA               	bsf	___ftmul@f2+1,7
  5717  0B4B  30FF               	movlw	255
  5718  0B4C  05B9               	andwf	___ftmul@f2,f
  5719  0B4D  30FF               	movlw	255
  5720  0B4E  05BA               	andwf	___ftmul@f2+1,f
  5721  0B4F  3000               	movlw	0
  5722  0B50  05BB               	andwf	___ftmul@f2+2,f
  5723  0B51  3000               	movlw	0
  5724  0B52  00C1               	movwf	___ftmul@f3_as_product
  5725  0B53  3000               	movlw	0
  5726  0B54  00C2               	movwf	___ftmul@f3_as_product+1
  5727  0B55  3000               	movlw	0
  5728  0B56  00C3               	movwf	___ftmul@f3_as_product+2
  5729  0B57  3007               	movlw	7
  5730  0B58  00BC               	movwf	??___ftmul
  5731  0B59  083C               	movf	??___ftmul,w
  5732  0B5A  00C4               	movwf	___ftmul@cntr
  5733  0B5B                     l2357:	
  5734  0B5B  1C36               	btfss	___ftmul@f1,0
  5735  0B5C  2B63               	goto	l2361
  5736  0B5D  0839               	movf	___ftmul@f2,w
  5737  0B5E  07C1               	addwf	___ftmul@f3_as_product,f
  5738  0B5F  083A               	movf	___ftmul@f2+1,w
  5739  0B60  3DC2               	addwfc	___ftmul@f3_as_product+1,f
  5740  0B61  083B               	movf	___ftmul@f2+2,w
  5741  0B62  3DC3               	addwfc	___ftmul@f3_as_product+2,f
  5742  0B63                     l2361:	
  5743  0B63  3001               	movlw	1
  5744  0B64                     u2795:	
  5745  0B64  36B8               	lsrf	___ftmul@f1+2,f
  5746  0B65  0CB7               	rrf	___ftmul@f1+1,f
  5747  0B66  0CB6               	rrf	___ftmul@f1,f
  5748  0B67  0B89               	decfsz	9,f
  5749  0B68  2B64               	goto	u2795
  5750  0B69  3001               	movlw	1
  5751  0B6A                     u2805:	
  5752  0B6A  35B9               	lslf	___ftmul@f2,f
  5753  0B6B  0DBA               	rlf	___ftmul@f2+1,f
  5754  0B6C  0DBB               	rlf	___ftmul@f2+2,f
  5755  0B6D  0B89               	decfsz	9,f
  5756  0B6E  2B6A               	goto	u2805
  5757  0B6F  3001               	movlw	1
  5758  0B70  02C4               	subwf	___ftmul@cntr,f
  5759  0B71  1D03               	btfss	3,2
  5760  0B72  2B5B               	goto	l2357
  5761  0B73  3009               	movlw	9
  5762  0B74  00BC               	movwf	??___ftmul
  5763  0B75  083C               	movf	??___ftmul,w
  5764  0B76  00C4               	movwf	___ftmul@cntr
  5765  0B77                     l2369:	
  5766  0B77  1C36               	btfss	___ftmul@f1,0
  5767  0B78  2B7F               	goto	l2373
  5768  0B79  0839               	movf	___ftmul@f2,w
  5769  0B7A  07C1               	addwf	___ftmul@f3_as_product,f
  5770  0B7B  083A               	movf	___ftmul@f2+1,w
  5771  0B7C  3DC2               	addwfc	___ftmul@f3_as_product+1,f
  5772  0B7D  083B               	movf	___ftmul@f2+2,w
  5773  0B7E  3DC3               	addwfc	___ftmul@f3_as_product+2,f
  5774  0B7F                     l2373:	
  5775  0B7F  3001               	movlw	1
  5776  0B80                     u2835:	
  5777  0B80  36B8               	lsrf	___ftmul@f1+2,f
  5778  0B81  0CB7               	rrf	___ftmul@f1+1,f
  5779  0B82  0CB6               	rrf	___ftmul@f1,f
  5780  0B83  0B89               	decfsz	9,f
  5781  0B84  2B80               	goto	u2835
  5782  0B85  3001               	movlw	1
  5783  0B86                     u2845:	
  5784  0B86  36C3               	lsrf	___ftmul@f3_as_product+2,f
  5785  0B87  0CC2               	rrf	___ftmul@f3_as_product+1,f
  5786  0B88  0CC1               	rrf	___ftmul@f3_as_product,f
  5787  0B89  0B89               	decfsz	9,f
  5788  0B8A  2B86               	goto	u2845
  5789  0B8B  3001               	movlw	1
  5790  0B8C  02C4               	subwf	___ftmul@cntr,f
  5791  0B8D  1D03               	btfss	3,2
  5792  0B8E  2B77               	goto	l2369
  5793  0B8F  0841               	movf	___ftmul@f3_as_product,w
  5794  0B90  00A0               	movwf	___ftpack@arg
  5795  0B91  0842               	movf	___ftmul@f3_as_product+1,w
  5796  0B92  00A1               	movwf	___ftpack@arg+1
  5797  0B93  0843               	movf	___ftmul@f3_as_product+2,w
  5798  0B94  00A2               	movwf	___ftpack@arg+2
  5799  0B95  0840               	movf	___ftmul@exp,w
  5800  0B96  00BC               	movwf	??___ftmul
  5801  0B97  083C               	movf	??___ftmul,w
  5802  0B98  00A3               	movwf	___ftpack@exp
  5803  0B99  0845               	movf	___ftmul@sign,w
  5804  0B9A  00BD               	movwf	??___ftmul+1
  5805  0B9B  083D               	movf	??___ftmul+1,w
  5806  0B9C  00A4               	movwf	___ftpack@sign
  5807  0B9D  3188  20ED         	fcall	___ftpack
  5808  0B9F  0020               	movlb	0	; select bank0
  5809  0BA0  0820               	movf	?___ftpack,w
  5810  0BA1  00B6               	movwf	?___ftmul
  5811  0BA2  0821               	movf	?___ftpack+1,w
  5812  0BA3  00B7               	movwf	?___ftmul+1
  5813  0BA4  0822               	movf	?___ftpack+2,w
  5814  0BA5  00B8               	movwf	?___ftmul+2
  5815  0BA6  0008               	return
  5816  0BA7                     __end_of___ftmul:	
  5817                           
  5818                           	psect	text11
  5819  0802                     __ptext11:	
  5820 ;; *************** function ___awmod *****************
  5821 ;; Defined at:
  5822 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  5823 ;; Parameters:    Size  Location     Type
  5824 ;;  divisor         2    0[BANK0 ] int 
  5825 ;;  dividend        2    2[BANK0 ] int 
  5826 ;; Auto vars:     Size  Location     Type
  5827 ;;  sign            1    6[BANK0 ] unsigned char 
  5828 ;;  counter         1    5[BANK0 ] unsigned char 
  5829 ;; Return value:  Size  Location     Type
  5830 ;;                  2    0[BANK0 ] int 
  5831 ;; Registers used:
  5832 ;;		wreg, status,2, status,0
  5833 ;; Tracked objects:
  5834 ;;		On entry : 0/0
  5835 ;;		On exit  : 0/0
  5836 ;;		Unchanged: 0/0
  5837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5838 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5839 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5840 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5841 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5842 ;;Total ram usage:        7 bytes
  5843 ;; Hardware stack levels used:    1
  5844 ;; Hardware stack levels required when called:    4
  5845 ;; This function calls:
  5846 ;;		Nothing
  5847 ;; This function is called by:
  5848 ;;		_fround
  5849 ;;		_scale
  5850 ;; This function uses a non-reentrant model
  5851 ;;
  5852                           
  5853                           
  5854                           ;psect for function ___awmod
  5855  0802                     ___awmod:	
  5856                           
  5857                           ;incstack = 0
  5858                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5859  0802  0020               	movlb	0	; select bank0
  5860  0803  01A6               	clrf	___awmod@sign
  5861  0804  1FA3               	btfss	___awmod@dividend+1,7
  5862  0805  280D               	goto	l2233
  5863  0806  09A2               	comf	___awmod@dividend,f
  5864  0807  09A3               	comf	___awmod@dividend+1,f
  5865  0808  0AA2               	incf	___awmod@dividend,f
  5866  0809  1903               	skipnz
  5867  080A  0AA3               	incf	___awmod@dividend+1,f
  5868  080B  01A6               	clrf	___awmod@sign
  5869  080C  0AA6               	incf	___awmod@sign,f
  5870  080D                     l2233:	
  5871  080D  1FA1               	btfss	___awmod@divisor+1,7
  5872  080E  2814               	goto	l2237
  5873  080F  09A0               	comf	___awmod@divisor,f
  5874  0810  09A1               	comf	___awmod@divisor+1,f
  5875  0811  0AA0               	incf	___awmod@divisor,f
  5876  0812  1903               	skipnz
  5877  0813  0AA1               	incf	___awmod@divisor+1,f
  5878  0814                     l2237:	
  5879  0814  0820               	movf	___awmod@divisor,w
  5880  0815  0421               	iorwf	___awmod@divisor+1,w
  5881  0816  1903               	btfsc	3,2
  5882  0817  283B               	goto	l2255
  5883  0818  01A5               	clrf	___awmod@counter
  5884  0819  0AA5               	incf	___awmod@counter,f
  5885  081A                     l2245:	
  5886  081A  1BA1               	btfsc	___awmod@divisor+1,7
  5887  081B  2826               	goto	l2247
  5888  081C  3001               	movlw	1
  5889  081D                     u2455:	
  5890  081D  35A0               	lslf	___awmod@divisor,f
  5891  081E  0DA1               	rlf	___awmod@divisor+1,f
  5892  081F  0B89               	decfsz	9,f
  5893  0820  281D               	goto	u2455
  5894  0821  3001               	movlw	1
  5895  0822  00A4               	movwf	??___awmod
  5896  0823  0824               	movf	??___awmod,w
  5897  0824  07A5               	addwf	___awmod@counter,f
  5898  0825  281A               	goto	l2245
  5899  0826                     l2247:	
  5900  0826  0821               	movf	___awmod@divisor+1,w
  5901  0827  0223               	subwf	___awmod@dividend+1,w
  5902  0828  1D03               	skipz
  5903  0829  282C               	goto	u2475
  5904  082A  0820               	movf	___awmod@divisor,w
  5905  082B  0222               	subwf	___awmod@dividend,w
  5906  082C                     u2475:	
  5907  082C  1C03               	skipc
  5908  082D  2832               	goto	l2251
  5909  082E  0820               	movf	___awmod@divisor,w
  5910  082F  02A2               	subwf	___awmod@dividend,f
  5911  0830  0821               	movf	___awmod@divisor+1,w
  5912  0831  3BA3               	subwfb	___awmod@dividend+1,f
  5913  0832                     l2251:	
  5914  0832  3001               	movlw	1
  5915  0833                     u2485:	
  5916  0833  36A1               	lsrf	___awmod@divisor+1,f
  5917  0834  0CA0               	rrf	___awmod@divisor,f
  5918  0835  0B89               	decfsz	9,f
  5919  0836  2833               	goto	u2485
  5920  0837  3001               	movlw	1
  5921  0838  02A5               	subwf	___awmod@counter,f
  5922  0839  1D03               	btfss	3,2
  5923  083A  2826               	goto	l2247
  5924  083B                     l2255:	
  5925  083B  0826               	movf	___awmod@sign,w
  5926  083C  1903               	btfsc	3,2
  5927  083D  2843               	goto	l2259
  5928  083E  09A2               	comf	___awmod@dividend,f
  5929  083F  09A3               	comf	___awmod@dividend+1,f
  5930  0840  0AA2               	incf	___awmod@dividend,f
  5931  0841  1903               	skipnz
  5932  0842  0AA3               	incf	___awmod@dividend+1,f
  5933  0843                     l2259:	
  5934  0843  0823               	movf	___awmod@dividend+1,w
  5935  0844  00A1               	movwf	?___awmod+1
  5936  0845  0822               	movf	___awmod@dividend,w
  5937  0846  00A0               	movwf	?___awmod
  5938  0847  0008               	return
  5939  0848                     __end_of___awmod:	
  5940                           
  5941                           	psect	text12
  5942  0848                     __ptext12:	
  5943 ;; *************** function ___awdiv *****************
  5944 ;; Defined at:
  5945 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  5946 ;; Parameters:    Size  Location     Type
  5947 ;;  divisor         2    7[BANK0 ] int 
  5948 ;;  dividend        2    9[BANK0 ] int 
  5949 ;; Auto vars:     Size  Location     Type
  5950 ;;  quotient        2   14[BANK0 ] int 
  5951 ;;  sign            1   13[BANK0 ] unsigned char 
  5952 ;;  counter         1   12[BANK0 ] unsigned char 
  5953 ;; Return value:  Size  Location     Type
  5954 ;;                  2    7[BANK0 ] int 
  5955 ;; Registers used:
  5956 ;;		wreg, status,2, status,0
  5957 ;; Tracked objects:
  5958 ;;		On entry : 0/0
  5959 ;;		On exit  : 0/0
  5960 ;;		Unchanged: 0/0
  5961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5962 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5963 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5964 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5965 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5966 ;;Total ram usage:        9 bytes
  5967 ;; Hardware stack levels used:    1
  5968 ;; Hardware stack levels required when called:    4
  5969 ;; This function calls:
  5970 ;;		Nothing
  5971 ;; This function is called by:
  5972 ;;		_fround
  5973 ;;		_scale
  5974 ;;		_printf
  5975 ;; This function uses a non-reentrant model
  5976 ;;
  5977                           
  5978                           
  5979                           ;psect for function ___awdiv
  5980  0848                     ___awdiv:	
  5981                           
  5982                           ;incstack = 0
  5983                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5984  0848  0020               	movlb	0	; select bank0
  5985  0849  01AD               	clrf	___awdiv@sign
  5986  084A  1FA8               	btfss	___awdiv@divisor+1,7
  5987  084B  2853               	goto	l2189
  5988  084C  09A7               	comf	___awdiv@divisor,f
  5989  084D  09A8               	comf	___awdiv@divisor+1,f
  5990  084E  0AA7               	incf	___awdiv@divisor,f
  5991  084F  1903               	skipnz
  5992  0850  0AA8               	incf	___awdiv@divisor+1,f
  5993  0851  01AD               	clrf	___awdiv@sign
  5994  0852  0AAD               	incf	___awdiv@sign,f
  5995  0853                     l2189:	
  5996  0853  1FAA               	btfss	___awdiv@dividend+1,7
  5997  0854  285E               	goto	l2195
  5998  0855  09A9               	comf	___awdiv@dividend,f
  5999  0856  09AA               	comf	___awdiv@dividend+1,f
  6000  0857  0AA9               	incf	___awdiv@dividend,f
  6001  0858  1903               	skipnz
  6002  0859  0AAA               	incf	___awdiv@dividend+1,f
  6003  085A  3001               	movlw	1
  6004  085B  00AB               	movwf	??___awdiv
  6005  085C  082B               	movf	??___awdiv,w
  6006  085D  06AD               	xorwf	___awdiv@sign,f
  6007  085E                     l2195:	
  6008  085E  01AE               	clrf	___awdiv@quotient
  6009  085F  01AF               	clrf	___awdiv@quotient+1
  6010  0860  0827               	movf	___awdiv@divisor,w
  6011  0861  0428               	iorwf	___awdiv@divisor+1,w
  6012  0862  1903               	btfsc	3,2
  6013  0863  288D               	goto	l2217
  6014  0864  01AC               	clrf	___awdiv@counter
  6015  0865  0AAC               	incf	___awdiv@counter,f
  6016  0866                     l2205:	
  6017  0866  1BA8               	btfsc	___awdiv@divisor+1,7
  6018  0867  2872               	goto	l2207
  6019  0868  3001               	movlw	1
  6020  0869                     u2355:	
  6021  0869  35A7               	lslf	___awdiv@divisor,f
  6022  086A  0DA8               	rlf	___awdiv@divisor+1,f
  6023  086B  0B89               	decfsz	9,f
  6024  086C  2869               	goto	u2355
  6025  086D  3001               	movlw	1
  6026  086E  00AB               	movwf	??___awdiv
  6027  086F  082B               	movf	??___awdiv,w
  6028  0870  07AC               	addwf	___awdiv@counter,f
  6029  0871  2866               	goto	l2205
  6030  0872                     l2207:	
  6031  0872  3001               	movlw	1
  6032  0873                     u2375:	
  6033  0873  35AE               	lslf	___awdiv@quotient,f
  6034  0874  0DAF               	rlf	___awdiv@quotient+1,f
  6035  0875  0B89               	decfsz	9,f
  6036  0876  2873               	goto	u2375
  6037  0877  0828               	movf	___awdiv@divisor+1,w
  6038  0878  022A               	subwf	___awdiv@dividend+1,w
  6039  0879  1D03               	skipz
  6040  087A  287D               	goto	u2385
  6041  087B  0827               	movf	___awdiv@divisor,w
  6042  087C  0229               	subwf	___awdiv@dividend,w
  6043  087D                     u2385:	
  6044  087D  1C03               	skipc
  6045  087E  2884               	goto	l2213
  6046  087F  0827               	movf	___awdiv@divisor,w
  6047  0880  02A9               	subwf	___awdiv@dividend,f
  6048  0881  0828               	movf	___awdiv@divisor+1,w
  6049  0882  3BAA               	subwfb	___awdiv@dividend+1,f
  6050  0883  142E               	bsf	___awdiv@quotient,0
  6051  0884                     l2213:	
  6052  0884  3001               	movlw	1
  6053  0885                     u2395:	
  6054  0885  36A8               	lsrf	___awdiv@divisor+1,f
  6055  0886  0CA7               	rrf	___awdiv@divisor,f
  6056  0887  0B89               	decfsz	9,f
  6057  0888  2885               	goto	u2395
  6058  0889  3001               	movlw	1
  6059  088A  02AC               	subwf	___awdiv@counter,f
  6060  088B  1D03               	btfss	3,2
  6061  088C  2872               	goto	l2207
  6062  088D                     l2217:	
  6063  088D  082D               	movf	___awdiv@sign,w
  6064  088E  1903               	btfsc	3,2
  6065  088F  2895               	goto	l2221
  6066  0890  09AE               	comf	___awdiv@quotient,f
  6067  0891  09AF               	comf	___awdiv@quotient+1,f
  6068  0892  0AAE               	incf	___awdiv@quotient,f
  6069  0893  1903               	skipnz
  6070  0894  0AAF               	incf	___awdiv@quotient+1,f
  6071  0895                     l2221:	
  6072  0895  082F               	movf	___awdiv@quotient+1,w
  6073  0896  00A8               	movwf	?___awdiv+1
  6074  0897  082E               	movf	___awdiv@quotient,w
  6075  0898  00A7               	movwf	?___awdiv
  6076  0899  0008               	return
  6077  089A                     __end_of___awdiv:	
  6078                           
  6079                           	psect	text13
  6080  072D                     __ptext13:	
  6081 ;; *************** function __tdiv_to_l_ *****************
  6082 ;; Defined at:
  6083 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdivl.c"
  6084 ;; Parameters:    Size  Location     Type
  6085 ;;  f1              3    0[BANK0 ] float 
  6086 ;;  f2              3    3[BANK0 ] float 
  6087 ;; Auto vars:     Size  Location     Type
  6088 ;;  quot            4   10[BANK0 ] unsigned long 
  6089 ;;  exp1            1   15[BANK0 ] unsigned char 
  6090 ;;  cntr            1   14[BANK0 ] unsigned char 
  6091 ;; Return value:  Size  Location     Type
  6092 ;;                  4    0[BANK0 ] unsigned long 
  6093 ;; Registers used:
  6094 ;;		wreg, status,2, status,0
  6095 ;; Tracked objects:
  6096 ;;		On entry : 0/0
  6097 ;;		On exit  : 0/0
  6098 ;;		Unchanged: 0/0
  6099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6100 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6101 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6102 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6103 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6104 ;;Total ram usage:       16 bytes
  6105 ;; Hardware stack levels used:    1
  6106 ;; Hardware stack levels required when called:    4
  6107 ;; This function calls:
  6108 ;;		Nothing
  6109 ;; This function is called by:
  6110 ;;		_printf
  6111 ;; This function uses a non-reentrant model
  6112 ;;
  6113                           
  6114                           
  6115                           ;psect for function __tdiv_to_l_
  6116  072D                     __tdiv_to_l_:	
  6117                           
  6118                           ;incstack = 0
  6119                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  6120  072D  0020               	movlb	0	; select bank0
  6121  072E  0820               	movf	__tdiv_to_l_@f1,w
  6122  072F  00A6               	movwf	??__tdiv_to_l_
  6123  0730  0821               	movf	__tdiv_to_l_@f1+1,w
  6124  0731  00A7               	movwf	??__tdiv_to_l_+1
  6125  0732  0822               	movf	__tdiv_to_l_@f1+2,w
  6126  0733  00A8               	movwf	??__tdiv_to_l_+2
  6127  0734  1003               	clrc
  6128  0735  0D27               	rlf	??__tdiv_to_l_+1,w
  6129  0736  0D28               	rlf	??__tdiv_to_l_+2,w
  6130  0737  00A9               	movwf	??__tdiv_to_l_+3
  6131  0738  0829               	movf	??__tdiv_to_l_+3,w
  6132  0739  00AF               	movwf	__tdiv_to_l_@exp1
  6133  073A  082F               	movf	__tdiv_to_l_@exp1,w
  6134  073B  1D03               	btfss	3,2
  6135  073C  2F46               	goto	l2529
  6136  073D  3000               	movlw	0
  6137  073E  00A3               	movwf	?__tdiv_to_l_+3
  6138  073F  3000               	movlw	0
  6139  0740  00A2               	movwf	?__tdiv_to_l_+2
  6140  0741  3000               	movlw	0
  6141  0742  00A1               	movwf	?__tdiv_to_l_+1
  6142  0743  3000               	movlw	0
  6143  0744  00A0               	movwf	?__tdiv_to_l_
  6144  0745  0008               	return
  6145  0746                     l2529:	
  6146  0746  0823               	movf	__tdiv_to_l_@f2,w
  6147  0747  00A6               	movwf	??__tdiv_to_l_
  6148  0748  0824               	movf	__tdiv_to_l_@f2+1,w
  6149  0749  00A7               	movwf	??__tdiv_to_l_+1
  6150  074A  0825               	movf	__tdiv_to_l_@f2+2,w
  6151  074B  00A8               	movwf	??__tdiv_to_l_+2
  6152  074C  1003               	clrc
  6153  074D  0D27               	rlf	??__tdiv_to_l_+1,w
  6154  074E  0D28               	rlf	??__tdiv_to_l_+2,w
  6155  074F  00A9               	movwf	??__tdiv_to_l_+3
  6156  0750  0829               	movf	??__tdiv_to_l_+3,w
  6157  0751  00AE               	movwf	__tdiv_to_l_@cntr
  6158  0752  082E               	movf	__tdiv_to_l_@cntr,w
  6159  0753  1D03               	btfss	3,2
  6160  0754  2F5E               	goto	l738
  6161  0755  3000               	movlw	0
  6162  0756  00A3               	movwf	?__tdiv_to_l_+3
  6163  0757  3000               	movlw	0
  6164  0758  00A2               	movwf	?__tdiv_to_l_+2
  6165  0759  3000               	movlw	0
  6166  075A  00A1               	movwf	?__tdiv_to_l_+1
  6167  075B  3000               	movlw	0
  6168  075C  00A0               	movwf	?__tdiv_to_l_
  6169  075D  0008               	return
  6170  075E                     l738:	
  6171  075E  17A1               	bsf	__tdiv_to_l_@f1+1,7
  6172  075F  30FF               	movlw	255
  6173  0760  05A0               	andwf	__tdiv_to_l_@f1,f
  6174  0761  30FF               	movlw	255
  6175  0762  05A1               	andwf	__tdiv_to_l_@f1+1,f
  6176  0763  3000               	movlw	0
  6177  0764  05A2               	andwf	__tdiv_to_l_@f1+2,f
  6178  0765  17A4               	bsf	__tdiv_to_l_@f2+1,7
  6179  0766  30FF               	movlw	255
  6180  0767  05A3               	andwf	__tdiv_to_l_@f2,f
  6181  0768  30FF               	movlw	255
  6182  0769  05A4               	andwf	__tdiv_to_l_@f2+1,f
  6183  076A  3000               	movlw	0
  6184  076B  05A5               	andwf	__tdiv_to_l_@f2+2,f
  6185  076C  3000               	movlw	0
  6186  076D  00AD               	movwf	__tdiv_to_l_@quot+3
  6187  076E  3000               	movlw	0
  6188  076F  00AC               	movwf	__tdiv_to_l_@quot+2
  6189  0770  3000               	movlw	0
  6190  0771  00AB               	movwf	__tdiv_to_l_@quot+1
  6191  0772  3000               	movlw	0
  6192  0773  00AA               	movwf	__tdiv_to_l_@quot
  6193  0774  307F               	movlw	127
  6194  0775  02AF               	subwf	__tdiv_to_l_@exp1,f
  6195  0776  3098               	movlw	152
  6196  0777  072E               	addwf	__tdiv_to_l_@cntr,w
  6197  0778  00A6               	movwf	??__tdiv_to_l_
  6198  0779  0826               	movf	??__tdiv_to_l_,w
  6199  077A  02AF               	subwf	__tdiv_to_l_@exp1,f
  6200  077B  3018               	movlw	24
  6201  077C  00A6               	movwf	??__tdiv_to_l_
  6202  077D  0826               	movf	??__tdiv_to_l_,w
  6203  077E  00AE               	movwf	__tdiv_to_l_@cntr
  6204  077F                     l2543:	
  6205  077F  3001               	movlw	1
  6206  0780                     u3025:	
  6207  0780  35AA               	lslf	__tdiv_to_l_@quot,f
  6208  0781  0DAB               	rlf	__tdiv_to_l_@quot+1,f
  6209  0782  0DAC               	rlf	__tdiv_to_l_@quot+2,f
  6210  0783  0DAD               	rlf	__tdiv_to_l_@quot+3,f
  6211  0784  0B89               	decfsz	9,f
  6212  0785  2F80               	goto	u3025
  6213  0786  0825               	movf	__tdiv_to_l_@f2+2,w
  6214  0787  0222               	subwf	__tdiv_to_l_@f1+2,w
  6215  0788  1D03               	skipz
  6216  0789  2F90               	goto	u3035
  6217  078A  0824               	movf	__tdiv_to_l_@f2+1,w
  6218  078B  0221               	subwf	__tdiv_to_l_@f1+1,w
  6219  078C  1D03               	skipz
  6220  078D  2F90               	goto	u3035
  6221  078E  0823               	movf	__tdiv_to_l_@f2,w
  6222  078F  0220               	subwf	__tdiv_to_l_@f1,w
  6223  0790                     u3035:	
  6224  0790  1C03               	skipc
  6225  0791  2F99               	goto	l2551
  6226  0792  0823               	movf	__tdiv_to_l_@f2,w
  6227  0793  02A0               	subwf	__tdiv_to_l_@f1,f
  6228  0794  0824               	movf	__tdiv_to_l_@f2+1,w
  6229  0795  3BA1               	subwfb	__tdiv_to_l_@f1+1,f
  6230  0796  0825               	movf	__tdiv_to_l_@f2+2,w
  6231  0797  3BA2               	subwfb	__tdiv_to_l_@f1+2,f
  6232  0798  142A               	bsf	__tdiv_to_l_@quot,0
  6233  0799                     l2551:	
  6234  0799  3001               	movlw	1
  6235  079A                     u3045:	
  6236  079A  35A0               	lslf	__tdiv_to_l_@f1,f
  6237  079B  0DA1               	rlf	__tdiv_to_l_@f1+1,f
  6238  079C  0DA2               	rlf	__tdiv_to_l_@f1+2,f
  6239  079D  0B89               	decfsz	9,f
  6240  079E  2F9A               	goto	u3045
  6241  079F  3001               	movlw	1
  6242  07A0  02AE               	subwf	__tdiv_to_l_@cntr,f
  6243  07A1  1D03               	btfss	3,2
  6244  07A2  2F7F               	goto	l2543
  6245  07A3  1FAF               	btfss	__tdiv_to_l_@exp1,7
  6246  07A4  2FC1               	goto	l2563
  6247  07A5  082F               	movf	__tdiv_to_l_@exp1,w
  6248  07A6  3A80               	xorlw	128
  6249  07A7  3E97               	addlw	151
  6250  07A8  1803               	skipnc
  6251  07A9  2FB3               	goto	l2561
  6252  07AA  3000               	movlw	0
  6253  07AB  00A3               	movwf	?__tdiv_to_l_+3
  6254  07AC  3000               	movlw	0
  6255  07AD  00A2               	movwf	?__tdiv_to_l_+2
  6256  07AE  3000               	movlw	0
  6257  07AF  00A1               	movwf	?__tdiv_to_l_+1
  6258  07B0  3000               	movlw	0
  6259  07B1  00A0               	movwf	?__tdiv_to_l_
  6260  07B2  0008               	return
  6261  07B3                     l2561:	
  6262  07B3  3001               	movlw	1
  6263  07B4                     u3085:	
  6264  07B4  36AD               	lsrf	__tdiv_to_l_@quot+3,f
  6265  07B5  0CAC               	rrf	__tdiv_to_l_@quot+2,f
  6266  07B6  0CAB               	rrf	__tdiv_to_l_@quot+1,f
  6267  07B7  0CAA               	rrf	__tdiv_to_l_@quot,f
  6268  07B8  0B89               	decfsz	9,f
  6269  07B9  2FB4               	goto	u3085
  6270  07BA  3001               	movlw	1
  6271  07BB  00A6               	movwf	??__tdiv_to_l_
  6272  07BC  0826               	movf	??__tdiv_to_l_,w
  6273  07BD  07AF               	addwf	__tdiv_to_l_@exp1,f
  6274  07BE  1903               	btfsc	3,2
  6275  07BF  2FDA               	goto	l2571
  6276  07C0  2FB3               	goto	l2561
  6277  07C1                     l2563:	
  6278  07C1  3018               	movlw	24
  6279  07C2  022F               	subwf	__tdiv_to_l_@exp1,w
  6280  07C3  1C03               	skipc
  6281  07C4  2FD7               	goto	l748
  6282  07C5  3000               	movlw	0
  6283  07C6  00A3               	movwf	?__tdiv_to_l_+3
  6284  07C7  3000               	movlw	0
  6285  07C8  00A2               	movwf	?__tdiv_to_l_+2
  6286  07C9  3000               	movlw	0
  6287  07CA  00A1               	movwf	?__tdiv_to_l_+1
  6288  07CB  3000               	movlw	0
  6289  07CC  00A0               	movwf	?__tdiv_to_l_
  6290  07CD  0008               	return
  6291  07CE                     l2569:	
  6292  07CE  3001               	movlw	1
  6293  07CF                     u3115:	
  6294  07CF  35AA               	lslf	__tdiv_to_l_@quot,f
  6295  07D0  0DAB               	rlf	__tdiv_to_l_@quot+1,f
  6296  07D1  0DAC               	rlf	__tdiv_to_l_@quot+2,f
  6297  07D2  0DAD               	rlf	__tdiv_to_l_@quot+3,f
  6298  07D3  0B89               	decfsz	9,f
  6299  07D4  2FCF               	goto	u3115
  6300  07D5  3001               	movlw	1
  6301  07D6  02AF               	subwf	__tdiv_to_l_@exp1,f
  6302  07D7                     l748:	
  6303  07D7  082F               	movf	__tdiv_to_l_@exp1,w
  6304  07D8  1D03               	btfss	3,2
  6305  07D9  2FCE               	goto	l2569
  6306  07DA                     l2571:	
  6307  07DA  082D               	movf	__tdiv_to_l_@quot+3,w
  6308  07DB  00A3               	movwf	?__tdiv_to_l_+3
  6309  07DC  082C               	movf	__tdiv_to_l_@quot+2,w
  6310  07DD  00A2               	movwf	?__tdiv_to_l_+2
  6311  07DE  082B               	movf	__tdiv_to_l_@quot+1,w
  6312  07DF  00A1               	movwf	?__tdiv_to_l_+1
  6313  07E0  082A               	movf	__tdiv_to_l_@quot,w
  6314  07E1  00A0               	movwf	?__tdiv_to_l_
  6315  07E2  0008               	return
  6316  07E3                     __end_of__tdiv_to_l_:	
  6317                           
  6318                           	psect	text14
  6319  0C9D                     __ptext14:	
  6320 ;; *************** function __div_to_l_ *****************
  6321 ;; Defined at:
  6322 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fldivl.c"
  6323 ;; Parameters:    Size  Location     Type
  6324 ;;  f1              3    0[BANK0 ] unsigned long 
  6325 ;;  f2              3    3[BANK0 ] unsigned long 
  6326 ;; Auto vars:     Size  Location     Type
  6327 ;;  quot            4   14[BANK0 ] unsigned long 
  6328 ;;  exp1            1   19[BANK0 ] unsigned char 
  6329 ;;  cntr            1   18[BANK0 ] unsigned char 
  6330 ;; Return value:  Size  Location     Type
  6331 ;;                  4    0[BANK0 ] unsigned long 
  6332 ;; Registers used:
  6333 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6334 ;; Tracked objects:
  6335 ;;		On entry : 0/0
  6336 ;;		On exit  : 0/0
  6337 ;;		Unchanged: 0/0
  6338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6339 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6340 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6341 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6342 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6343 ;;Total ram usage:       20 bytes
  6344 ;; Hardware stack levels used:    1
  6345 ;; Hardware stack levels required when called:    4
  6346 ;; This function calls:
  6347 ;;		Nothing
  6348 ;; This function is called by:
  6349 ;;		_printf
  6350 ;; This function uses a non-reentrant model
  6351 ;;
  6352                           
  6353                           
  6354                           ;psect for function __div_to_l_
  6355  0C9D                     __div_to_l_:	
  6356                           
  6357                           ;incstack = 0
  6358                           ; Regs used in __div_to_l_: [wreg+fsr1l+fsr1h+status,2+status,0]
  6359  0C9D  3020               	movlw	low (__div_to_l_@f1| 0)
  6360  0C9E  0086               	movwf	6
  6361  0C9F  0187               	clrf	7
  6362  0CA0  3F40               	moviw [0]fsr1
  6363  0CA1  0020               	movlb	0	; select bank0
  6364  0CA2  00A6               	movwf	??__div_to_l_
  6365  0CA3  3F41               	moviw [1]fsr1
  6366  0CA4  00A7               	movwf	??__div_to_l_+1
  6367  0CA5  3F42               	moviw [2]fsr1
  6368  0CA6  00A8               	movwf	??__div_to_l_+2
  6369  0CA7  3F43               	moviw [3]fsr1
  6370  0CA8  00A9               	movwf	??__div_to_l_+3
  6371  0CA9  1003               	clrc
  6372  0CAA  0D28               	rlf	??__div_to_l_+2,w
  6373  0CAB  0D29               	rlf	??__div_to_l_+3,w
  6374  0CAC  00AA               	movwf	??__div_to_l_+4
  6375  0CAD  082A               	movf	??__div_to_l_+4,w
  6376  0CAE  00B3               	movwf	__div_to_l_@exp1
  6377  0CAF  0833               	movf	__div_to_l_@exp1,w
  6378  0CB0  1D03               	btfss	3,2
  6379  0CB1  2CBB               	goto	l2581
  6380  0CB2  3000               	movlw	0
  6381  0CB3  00A3               	movwf	?__div_to_l_+3
  6382  0CB4  3000               	movlw	0
  6383  0CB5  00A2               	movwf	?__div_to_l_+2
  6384  0CB6  3000               	movlw	0
  6385  0CB7  00A1               	movwf	?__div_to_l_+1
  6386  0CB8  3000               	movlw	0
  6387  0CB9  00A0               	movwf	?__div_to_l_
  6388  0CBA  0008               	return
  6389  0CBB                     l2581:	
  6390  0CBB  3023               	movlw	low (__div_to_l_@f2| 0)
  6391  0CBC  0086               	movwf	6
  6392  0CBD  0187               	clrf	7
  6393  0CBE  3F40               	moviw [0]fsr1
  6394  0CBF  00A6               	movwf	??__div_to_l_
  6395  0CC0  3F41               	moviw [1]fsr1
  6396  0CC1  00A7               	movwf	??__div_to_l_+1
  6397  0CC2  3F42               	moviw [2]fsr1
  6398  0CC3  00A8               	movwf	??__div_to_l_+2
  6399  0CC4  3F43               	moviw [3]fsr1
  6400  0CC5  00A9               	movwf	??__div_to_l_+3
  6401  0CC6  1003               	clrc
  6402  0CC7  0D28               	rlf	??__div_to_l_+2,w
  6403  0CC8  0D29               	rlf	??__div_to_l_+3,w
  6404  0CC9  00AA               	movwf	??__div_to_l_+4
  6405  0CCA  082A               	movf	??__div_to_l_+4,w
  6406  0CCB  00B2               	movwf	__div_to_l_@cntr
  6407  0CCC  0832               	movf	__div_to_l_@cntr,w
  6408  0CCD  1D03               	btfss	3,2
  6409  0CCE  2CD8               	goto	l2587
  6410  0CCF  3000               	movlw	0
  6411  0CD0  00A3               	movwf	?__div_to_l_+3
  6412  0CD1  3000               	movlw	0
  6413  0CD2  00A2               	movwf	?__div_to_l_+2
  6414  0CD3  3000               	movlw	0
  6415  0CD4  00A1               	movwf	?__div_to_l_+1
  6416  0CD5  3000               	movlw	0
  6417  0CD6  00A0               	movwf	?__div_to_l_
  6418  0CD7  0008               	return
  6419  0CD8                     l2587:	
  6420  0CD8  3020               	movlw	low (__div_to_l_@f1| 0)
  6421  0CD9  0086               	movwf	6
  6422  0CDA  0187               	clrf	7
  6423  0CDB  3000               	movlw	0
  6424  0CDC  0481               	iorwf	1,f
  6425  0CDD  3141               	addfsr 1,1
  6426  0CDE  3000               	movlw	0
  6427  0CDF  0481               	iorwf	1,f
  6428  0CE0  3141               	addfsr 1,1
  6429  0CE1  3080               	movlw	128
  6430  0CE2  0481               	iorwf	1,f
  6431  0CE3  3141               	addfsr 1,1
  6432  0CE4  3000               	movlw	0
  6433  0CE5  0481               	iorwf	1,f
  6434  0CE6  3020               	movlw	low (__div_to_l_@f1| 0)
  6435  0CE7  0086               	movwf	6
  6436  0CE8  0187               	clrf	7
  6437  0CE9  30FF               	movlw	255
  6438  0CEA  0581               	andwf	1,f
  6439  0CEB  3141               	addfsr 1,1
  6440  0CEC  30FF               	movlw	255
  6441  0CED  0581               	andwf	1,f
  6442  0CEE  3141               	addfsr 1,1
  6443  0CEF  30FF               	movlw	255
  6444  0CF0  0581               	andwf	1,f
  6445  0CF1  3141               	addfsr 1,1
  6446  0CF2  3000               	movlw	0
  6447  0CF3  0581               	andwf	1,f
  6448  0CF4  3023               	movlw	low (__div_to_l_@f2| 0)
  6449  0CF5  0086               	movwf	6
  6450  0CF6  0187               	clrf	7
  6451  0CF7  3000               	movlw	0
  6452  0CF8  0481               	iorwf	1,f
  6453  0CF9  3141               	addfsr 1,1
  6454  0CFA  3000               	movlw	0
  6455  0CFB  0481               	iorwf	1,f
  6456  0CFC  3141               	addfsr 1,1
  6457  0CFD  3080               	movlw	128
  6458  0CFE  0481               	iorwf	1,f
  6459  0CFF  3141               	addfsr 1,1
  6460  0D00  3000               	movlw	0
  6461  0D01  0481               	iorwf	1,f
  6462  0D02  3023               	movlw	low (__div_to_l_@f2| 0)
  6463  0D03  0086               	movwf	6
  6464  0D04  0187               	clrf	7
  6465  0D05  30FF               	movlw	255
  6466  0D06  0581               	andwf	1,f
  6467  0D07  3141               	addfsr 1,1
  6468  0D08  30FF               	movlw	255
  6469  0D09  0581               	andwf	1,f
  6470  0D0A  3141               	addfsr 1,1
  6471  0D0B  30FF               	movlw	255
  6472  0D0C  0581               	andwf	1,f
  6473  0D0D  3141               	addfsr 1,1
  6474  0D0E  3000               	movlw	0
  6475  0D0F  0581               	andwf	1,f
  6476  0D10  3000               	movlw	0
  6477  0D11  00B1               	movwf	__div_to_l_@quot+3
  6478  0D12  3000               	movlw	0
  6479  0D13  00B0               	movwf	__div_to_l_@quot+2
  6480  0D14  3000               	movlw	0
  6481  0D15  00AF               	movwf	__div_to_l_@quot+1
  6482  0D16  3000               	movlw	0
  6483  0D17  00AE               	movwf	__div_to_l_@quot
  6484  0D18  307F               	movlw	127
  6485  0D19  02B3               	subwf	__div_to_l_@exp1,f
  6486  0D1A  30A0               	movlw	160
  6487  0D1B  0732               	addwf	__div_to_l_@cntr,w
  6488  0D1C  00A6               	movwf	??__div_to_l_
  6489  0D1D  0826               	movf	??__div_to_l_,w
  6490  0D1E  02B3               	subwf	__div_to_l_@exp1,f
  6491  0D1F  3020               	movlw	32
  6492  0D20  00A6               	movwf	??__div_to_l_
  6493  0D21  0826               	movf	??__div_to_l_,w
  6494  0D22  00B2               	movwf	__div_to_l_@cntr
  6495  0D23                     l2597:	
  6496  0D23  3001               	movlw	1
  6497  0D24                     u3155:	
  6498  0D24  35AE               	lslf	__div_to_l_@quot,f
  6499  0D25  0DAF               	rlf	__div_to_l_@quot+1,f
  6500  0D26  0DB0               	rlf	__div_to_l_@quot+2,f
  6501  0D27  0DB1               	rlf	__div_to_l_@quot+3,f
  6502  0D28  0B89               	decfsz	9,f
  6503  0D29  2D24               	goto	u3155
  6504  0D2A  3023               	movlw	low (__div_to_l_@f2| 0)
  6505  0D2B  0086               	movwf	6
  6506  0D2C  0187               	clrf	7
  6507  0D2D  3F40               	moviw [0]fsr1
  6508  0D2E  00A6               	movwf	??__div_to_l_
  6509  0D2F  3F41               	moviw [1]fsr1
  6510  0D30  00A7               	movwf	??__div_to_l_+1
  6511  0D31  3F42               	moviw [2]fsr1
  6512  0D32  00A8               	movwf	??__div_to_l_+2
  6513  0D33  3F43               	moviw [3]fsr1
  6514  0D34  00A9               	movwf	??__div_to_l_+3
  6515  0D35  3020               	movlw	low (__div_to_l_@f1| 0)
  6516  0D36  0086               	movwf	6
  6517  0D37  0187               	clrf	7
  6518  0D38  3F40               	moviw [0]fsr1
  6519  0D39  00AA               	movwf	??__div_to_l_+4
  6520  0D3A  3F41               	moviw [1]fsr1
  6521  0D3B  00AB               	movwf	??__div_to_l_+5
  6522  0D3C  3F42               	moviw [2]fsr1
  6523  0D3D  00AC               	movwf	??__div_to_l_+6
  6524  0D3E  3F43               	moviw [3]fsr1
  6525  0D3F  00AD               	movwf	??__div_to_l_+7
  6526  0D40  0829               	movf	??__div_to_l_+3,w
  6527  0D41  022D               	subwf	??__div_to_l_+7,w
  6528  0D42  1D03               	skipz
  6529  0D43  2D4E               	goto	u3165
  6530  0D44  0828               	movf	??__div_to_l_+2,w
  6531  0D45  022C               	subwf	??__div_to_l_+6,w
  6532  0D46  1D03               	skipz
  6533  0D47  2D4E               	goto	u3165
  6534  0D48  0827               	movf	??__div_to_l_+1,w
  6535  0D49  022B               	subwf	??__div_to_l_+5,w
  6536  0D4A  1D03               	skipz
  6537  0D4B  2D4E               	goto	u3165
  6538  0D4C  0826               	movf	??__div_to_l_,w
  6539  0D4D  022A               	subwf	??__div_to_l_+4,w
  6540  0D4E                     u3165:	
  6541  0D4E  1C03               	skipc
  6542  0D4F  2D6B               	goto	l2605
  6543  0D50  3023               	movlw	low (__div_to_l_@f2| 0)
  6544  0D51  0086               	movwf	6
  6545  0D52  0187               	clrf	7
  6546  0D53  3F40               	moviw [0]fsr1
  6547  0D54  00A6               	movwf	??__div_to_l_
  6548  0D55  3F41               	moviw [1]fsr1
  6549  0D56  00A7               	movwf	??__div_to_l_+1
  6550  0D57  3F42               	moviw [2]fsr1
  6551  0D58  00A8               	movwf	??__div_to_l_+2
  6552  0D59  3F43               	moviw [3]fsr1
  6553  0D5A  00A9               	movwf	??__div_to_l_+3
  6554  0D5B  3020               	movlw	low (__div_to_l_@f1| 0)
  6555  0D5C  0086               	movwf	6
  6556  0D5D  0187               	clrf	7
  6557  0D5E  0826               	movf	??__div_to_l_,w
  6558  0D5F  0281               	subwf	1,f
  6559  0D60  3141               	addfsr 1,1
  6560  0D61  0827               	movf	??__div_to_l_+1,w
  6561  0D62  3B81               	subwfb	1,f
  6562  0D63  3141               	addfsr 1,1
  6563  0D64  0828               	movf	??__div_to_l_+2,w
  6564  0D65  3B81               	subwfb	1,f
  6565  0D66  3141               	addfsr 1,1
  6566  0D67  0829               	movf	??__div_to_l_+3,w
  6567  0D68  3B81               	subwfb	1,f
  6568  0D69  317D               	addfsr 1,-3
  6569  0D6A  142E               	bsf	__div_to_l_@quot,0
  6570  0D6B                     l2605:	
  6571  0D6B  3020               	movlw	low (__div_to_l_@f1| 0)
  6572  0D6C  0086               	movwf	6
  6573  0D6D  0187               	clrf	7
  6574  0D6E  3581               	lslf	1,f
  6575  0D6F  3141               	addfsr 1,1
  6576  0D70  0D81               	rlf	1,f
  6577  0D71  3141               	addfsr 1,1
  6578  0D72  0D81               	rlf	1,f
  6579  0D73  3141               	addfsr 1,1
  6580  0D74  0D81               	rlf	1,f
  6581  0D75  317D               	addfsr 1,-3
  6582  0D76  3001               	movlw	1
  6583  0D77  02B2               	subwf	__div_to_l_@cntr,f
  6584  0D78  1D03               	btfss	3,2
  6585  0D79  2D23               	goto	l2597
  6586  0D7A  1FB3               	btfss	__div_to_l_@exp1,7
  6587  0D7B  2D98               	goto	l2617
  6588  0D7C  0833               	movf	__div_to_l_@exp1,w
  6589  0D7D  3A80               	xorlw	128
  6590  0D7E  3E9F               	addlw	159
  6591  0D7F  1803               	skipnc
  6592  0D80  2D8A               	goto	l2615
  6593  0D81  3000               	movlw	0
  6594  0D82  00A3               	movwf	?__div_to_l_+3
  6595  0D83  3000               	movlw	0
  6596  0D84  00A2               	movwf	?__div_to_l_+2
  6597  0D85  3000               	movlw	0
  6598  0D86  00A1               	movwf	?__div_to_l_+1
  6599  0D87  3000               	movlw	0
  6600  0D88  00A0               	movwf	?__div_to_l_
  6601  0D89  0008               	return
  6602  0D8A                     l2615:	
  6603  0D8A  3001               	movlw	1
  6604  0D8B                     u3205:	
  6605  0D8B  36B1               	lsrf	__div_to_l_@quot+3,f
  6606  0D8C  0CB0               	rrf	__div_to_l_@quot+2,f
  6607  0D8D  0CAF               	rrf	__div_to_l_@quot+1,f
  6608  0D8E  0CAE               	rrf	__div_to_l_@quot,f
  6609  0D8F  0B89               	decfsz	9,f
  6610  0D90  2D8B               	goto	u3205
  6611  0D91  3001               	movlw	1
  6612  0D92  00A6               	movwf	??__div_to_l_
  6613  0D93  0826               	movf	??__div_to_l_,w
  6614  0D94  07B3               	addwf	__div_to_l_@exp1,f
  6615  0D95  1903               	btfsc	3,2
  6616  0D96  2DB1               	goto	l2625
  6617  0D97  2D8A               	goto	l2615
  6618  0D98                     l2617:	
  6619  0D98  3020               	movlw	32
  6620  0D99  0233               	subwf	__div_to_l_@exp1,w
  6621  0D9A  1C03               	skipc
  6622  0D9B  2DAE               	goto	l669
  6623  0D9C  3000               	movlw	0
  6624  0D9D  00A3               	movwf	?__div_to_l_+3
  6625  0D9E  3000               	movlw	0
  6626  0D9F  00A2               	movwf	?__div_to_l_+2
  6627  0DA0  3000               	movlw	0
  6628  0DA1  00A1               	movwf	?__div_to_l_+1
  6629  0DA2  3000               	movlw	0
  6630  0DA3  00A0               	movwf	?__div_to_l_
  6631  0DA4  0008               	return
  6632  0DA5                     l2623:	
  6633  0DA5  3001               	movlw	1
  6634  0DA6                     u3235:	
  6635  0DA6  35AE               	lslf	__div_to_l_@quot,f
  6636  0DA7  0DAF               	rlf	__div_to_l_@quot+1,f
  6637  0DA8  0DB0               	rlf	__div_to_l_@quot+2,f
  6638  0DA9  0DB1               	rlf	__div_to_l_@quot+3,f
  6639  0DAA  0B89               	decfsz	9,f
  6640  0DAB  2DA6               	goto	u3235
  6641  0DAC  3001               	movlw	1
  6642  0DAD  02B3               	subwf	__div_to_l_@exp1,f
  6643  0DAE                     l669:	
  6644  0DAE  0833               	movf	__div_to_l_@exp1,w
  6645  0DAF  1D03               	btfss	3,2
  6646  0DB0  2DA5               	goto	l2623
  6647  0DB1                     l2625:	
  6648  0DB1  0831               	movf	__div_to_l_@quot+3,w
  6649  0DB2  00A3               	movwf	?__div_to_l_+3
  6650  0DB3  0830               	movf	__div_to_l_@quot+2,w
  6651  0DB4  00A2               	movwf	?__div_to_l_+2
  6652  0DB5  082F               	movf	__div_to_l_@quot+1,w
  6653  0DB6  00A1               	movwf	?__div_to_l_+1
  6654  0DB7  082E               	movf	__div_to_l_@quot,w
  6655  0DB8  00A0               	movwf	?__div_to_l_
  6656  0DB9  0008               	return
  6657  0DBA                     __end_of__div_to_l_:	
  6658                           
  6659                           	psect	text15
  6660  16B9                     __ptext15:	
  6661 ;; *************** function ___lltoft *****************
  6662 ;; Defined at:
  6663 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
  6664 ;; Parameters:    Size  Location     Type
  6665 ;;  c               4    8[BANK0 ] unsigned long 
  6666 ;; Auto vars:     Size  Location     Type
  6667 ;;  exp             1   13[BANK0 ] unsigned char 
  6668 ;; Return value:  Size  Location     Type
  6669 ;;                  3    8[BANK0 ] float 
  6670 ;; Registers used:
  6671 ;;		wreg, status,2, status,0, pclath, cstack
  6672 ;; Tracked objects:
  6673 ;;		On entry : 0/0
  6674 ;;		On exit  : 0/0
  6675 ;;		Unchanged: 0/0
  6676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6677 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6678 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6679 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6680 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6681 ;;Total ram usage:        6 bytes
  6682 ;; Hardware stack levels used:    1
  6683 ;; Hardware stack levels required when called:    5
  6684 ;; This function calls:
  6685 ;;		___ftpack
  6686 ;; This function is called by:
  6687 ;;		_printf
  6688 ;; This function uses a non-reentrant model
  6689 ;;
  6690                           
  6691                           
  6692                           ;psect for function ___lltoft
  6693  16B9                     ___lltoft:	
  6694                           
  6695                           ;incstack = 0
  6696                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  6697  16B9  308E               	movlw	142
  6698  16BA  0020               	movlb	0	; select bank0
  6699  16BB  00AC               	movwf	??___lltoft
  6700  16BC  082C               	movf	??___lltoft,w
  6701  16BD  00AD               	movwf	___lltoft@exp
  6702  16BE                     l2755:	
  6703  16BE  30FF               	movlw	255
  6704  16BF  052B               	andwf	___lltoft@c+3,w
  6705  16C0  1903               	btfsc	3,2
  6706  16C1  2ECE               	goto	l2757
  6707  16C2  3001               	movlw	1
  6708  16C3                     u3535:	
  6709  16C3  36AB               	lsrf	___lltoft@c+3,f
  6710  16C4  0CAA               	rrf	___lltoft@c+2,f
  6711  16C5  0CA9               	rrf	___lltoft@c+1,f
  6712  16C6  0CA8               	rrf	___lltoft@c,f
  6713  16C7  0B89               	decfsz	9,f
  6714  16C8  2EC3               	goto	u3535
  6715  16C9  3001               	movlw	1
  6716  16CA  00AC               	movwf	??___lltoft
  6717  16CB  082C               	movf	??___lltoft,w
  6718  16CC  07AD               	addwf	___lltoft@exp,f
  6719  16CD  2EBE               	goto	l2755
  6720  16CE                     l2757:	
  6721  16CE  0828               	movf	___lltoft@c,w
  6722  16CF  00A0               	movwf	___ftpack@arg
  6723  16D0  0829               	movf	___lltoft@c+1,w
  6724  16D1  00A1               	movwf	___ftpack@arg+1
  6725  16D2  082A               	movf	___lltoft@c+2,w
  6726  16D3  00A2               	movwf	___ftpack@arg+2
  6727  16D4  082D               	movf	___lltoft@exp,w
  6728  16D5  00AC               	movwf	??___lltoft
  6729  16D6  082C               	movf	??___lltoft,w
  6730  16D7  00A3               	movwf	___ftpack@exp
  6731  16D8  01A4               	clrf	___ftpack@sign
  6732  16D9  3188  20ED         	fcall	___ftpack
  6733  16DB  0020               	movlb	0	; select bank0
  6734  16DC  0820               	movf	?___ftpack,w
  6735  16DD  00A8               	movwf	?___lltoft
  6736  16DE  0821               	movf	?___ftpack+1,w
  6737  16DF  00A9               	movwf	?___lltoft+1
  6738  16E0  0822               	movf	?___ftpack+2,w
  6739  16E1  00AA               	movwf	?___lltoft+2
  6740  16E2  0008               	return
  6741  16E3                     __end_of___lltoft:	
  6742                           
  6743                           	psect	text16
  6744  171F                     __ptext16:	
  6745 ;; *************** function ___llmod *****************
  6746 ;; Defined at:
  6747 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\llmod.c"
  6748 ;; Parameters:    Size  Location     Type
  6749 ;;  divisor         4   14[BANK0 ] unsigned long 
  6750 ;;  dividend        4   18[BANK0 ] unsigned long 
  6751 ;; Auto vars:     Size  Location     Type
  6752 ;;  counter         1   23[BANK0 ] unsigned char 
  6753 ;; Return value:  Size  Location     Type
  6754 ;;                  4   14[BANK0 ] unsigned long 
  6755 ;; Registers used:
  6756 ;;		wreg, status,2, status,0
  6757 ;; Tracked objects:
  6758 ;;		On entry : 0/0
  6759 ;;		On exit  : 0/0
  6760 ;;		Unchanged: 0/0
  6761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6762 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6763 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6764 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6765 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6766 ;;Total ram usage:       10 bytes
  6767 ;; Hardware stack levels used:    1
  6768 ;; Hardware stack levels required when called:    4
  6769 ;; This function calls:
  6770 ;;		Nothing
  6771 ;; This function is called by:
  6772 ;;		_printf
  6773 ;; This function uses a non-reentrant model
  6774 ;;
  6775                           
  6776                           
  6777                           ;psect for function ___llmod
  6778  171F                     ___llmod:	
  6779                           
  6780                           ;incstack = 0
  6781                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  6782  171F  0020               	movlb	0	; select bank0
  6783  1720  0831               	movf	___llmod@divisor+3,w
  6784  1721  0430               	iorwf	___llmod@divisor+2,w
  6785  1722  042F               	iorwf	___llmod@divisor+1,w
  6786  1723  042E               	iorwf	___llmod@divisor,w
  6787  1724  1903               	skipnz
  6788  1725  2F59               	goto	l2747
  6789  1726  01B7               	clrf	___llmod@counter
  6790  1727  0AB7               	incf	___llmod@counter,f
  6791  1728                     l2737:	
  6792  1728  1BB1               	btfsc	___llmod@divisor+3,7
  6793  1729  2F36               	goto	l2739
  6794  172A  3001               	movlw	1
  6795  172B                     u3485:	
  6796  172B  35AE               	lslf	___llmod@divisor,f
  6797  172C  0DAF               	rlf	___llmod@divisor+1,f
  6798  172D  0DB0               	rlf	___llmod@divisor+2,f
  6799  172E  0DB1               	rlf	___llmod@divisor+3,f
  6800  172F  0B89               	decfsz	9,f
  6801  1730  2F2B               	goto	u3485
  6802  1731  3001               	movlw	1
  6803  1732  00B6               	movwf	??___llmod
  6804  1733  0836               	movf	??___llmod,w
  6805  1734  07B7               	addwf	___llmod@counter,f
  6806  1735  2F28               	goto	l2737
  6807  1736                     l2739:	
  6808  1736  0831               	movf	___llmod@divisor+3,w
  6809  1737  0235               	subwf	___llmod@dividend+3,w
  6810  1738  1D03               	skipz
  6811  1739  2F44               	goto	u3505
  6812  173A  0830               	movf	___llmod@divisor+2,w
  6813  173B  0234               	subwf	___llmod@dividend+2,w
  6814  173C  1D03               	skipz
  6815  173D  2F44               	goto	u3505
  6816  173E  082F               	movf	___llmod@divisor+1,w
  6817  173F  0233               	subwf	___llmod@dividend+1,w
  6818  1740  1D03               	skipz
  6819  1741  2F44               	goto	u3505
  6820  1742  082E               	movf	___llmod@divisor,w
  6821  1743  0232               	subwf	___llmod@dividend,w
  6822  1744                     u3505:	
  6823  1744  1C03               	skipc
  6824  1745  2F4E               	goto	l2743
  6825  1746  082E               	movf	___llmod@divisor,w
  6826  1747  02B2               	subwf	___llmod@dividend,f
  6827  1748  082F               	movf	___llmod@divisor+1,w
  6828  1749  3BB3               	subwfb	___llmod@dividend+1,f
  6829  174A  0830               	movf	___llmod@divisor+2,w
  6830  174B  3BB4               	subwfb	___llmod@dividend+2,f
  6831  174C  0831               	movf	___llmod@divisor+3,w
  6832  174D  3BB5               	subwfb	___llmod@dividend+3,f
  6833  174E                     l2743:	
  6834  174E  3001               	movlw	1
  6835  174F                     u3515:	
  6836  174F  36B1               	lsrf	___llmod@divisor+3,f
  6837  1750  0CB0               	rrf	___llmod@divisor+2,f
  6838  1751  0CAF               	rrf	___llmod@divisor+1,f
  6839  1752  0CAE               	rrf	___llmod@divisor,f
  6840  1753  0B89               	decfsz	9,f
  6841  1754  2F4F               	goto	u3515
  6842  1755  3001               	movlw	1
  6843  1756  02B7               	subwf	___llmod@counter,f
  6844  1757  1D03               	btfss	3,2
  6845  1758  2F36               	goto	l2739
  6846  1759                     l2747:	
  6847  1759  0835               	movf	___llmod@dividend+3,w
  6848  175A  00B1               	movwf	?___llmod+3
  6849  175B  0834               	movf	___llmod@dividend+2,w
  6850  175C  00B0               	movwf	?___llmod+2
  6851  175D  0833               	movf	___llmod@dividend+1,w
  6852  175E  00AF               	movwf	?___llmod+1
  6853  175F  0832               	movf	___llmod@dividend,w
  6854  1760  00AE               	movwf	?___llmod
  6855  1761  0008               	return
  6856  1762                     __end_of___llmod:	
  6857                           
  6858                           	psect	text17
  6859  089A                     __ptext17:	
  6860 ;; *************** function ___lldiv *****************
  6861 ;; Defined at:
  6862 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lldiv.c"
  6863 ;; Parameters:    Size  Location     Type
  6864 ;;  divisor         4    0[BANK0 ] unsigned long 
  6865 ;;  dividend        4    4[BANK0 ] unsigned long 
  6866 ;; Auto vars:     Size  Location     Type
  6867 ;;  quotient        4    9[BANK0 ] unsigned long 
  6868 ;;  counter         1   13[BANK0 ] unsigned char 
  6869 ;; Return value:  Size  Location     Type
  6870 ;;                  4    0[BANK0 ] unsigned long 
  6871 ;; Registers used:
  6872 ;;		wreg, status,2, status,0
  6873 ;; Tracked objects:
  6874 ;;		On entry : 0/0
  6875 ;;		On exit  : 0/0
  6876 ;;		Unchanged: 0/0
  6877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6878 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6879 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6880 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6881 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6882 ;;Total ram usage:       14 bytes
  6883 ;; Hardware stack levels used:    1
  6884 ;; Hardware stack levels required when called:    4
  6885 ;; This function calls:
  6886 ;;		Nothing
  6887 ;; This function is called by:
  6888 ;;		_printf
  6889 ;; This function uses a non-reentrant model
  6890 ;;
  6891                           
  6892                           
  6893                           ;psect for function ___lldiv
  6894  089A                     ___lldiv:	
  6895                           
  6896                           ;incstack = 0
  6897                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6898  089A  3000               	movlw	0
  6899  089B  0020               	movlb	0	; select bank0
  6900  089C  00AC               	movwf	___lldiv@quotient+3
  6901  089D  3000               	movlw	0
  6902  089E  00AB               	movwf	___lldiv@quotient+2
  6903  089F  3000               	movlw	0
  6904  08A0  00AA               	movwf	___lldiv@quotient+1
  6905  08A1  3000               	movlw	0
  6906  08A2  00A9               	movwf	___lldiv@quotient
  6907  08A3  0823               	movf	___lldiv@divisor+3,w
  6908  08A4  0422               	iorwf	___lldiv@divisor+2,w
  6909  08A5  0421               	iorwf	___lldiv@divisor+1,w
  6910  08A6  0420               	iorwf	___lldiv@divisor,w
  6911  08A7  1903               	skipnz
  6912  08A8  28E4               	goto	l2727
  6913  08A9  01AD               	clrf	___lldiv@counter
  6914  08AA  0AAD               	incf	___lldiv@counter,f
  6915  08AB                     l2713:	
  6916  08AB  1BA3               	btfsc	___lldiv@divisor+3,7
  6917  08AC  28B9               	goto	l2715
  6918  08AD  3001               	movlw	1
  6919  08AE                     u3415:	
  6920  08AE  35A0               	lslf	___lldiv@divisor,f
  6921  08AF  0DA1               	rlf	___lldiv@divisor+1,f
  6922  08B0  0DA2               	rlf	___lldiv@divisor+2,f
  6923  08B1  0DA3               	rlf	___lldiv@divisor+3,f
  6924  08B2  0B89               	decfsz	9,f
  6925  08B3  28AE               	goto	u3415
  6926  08B4  3001               	movlw	1
  6927  08B5  00A8               	movwf	??___lldiv
  6928  08B6  0828               	movf	??___lldiv,w
  6929  08B7  07AD               	addwf	___lldiv@counter,f
  6930  08B8  28AB               	goto	l2713
  6931  08B9                     l2715:	
  6932  08B9  3001               	movlw	1
  6933  08BA                     u3435:	
  6934  08BA  35A9               	lslf	___lldiv@quotient,f
  6935  08BB  0DAA               	rlf	___lldiv@quotient+1,f
  6936  08BC  0DAB               	rlf	___lldiv@quotient+2,f
  6937  08BD  0DAC               	rlf	___lldiv@quotient+3,f
  6938  08BE  0B89               	decfsz	9,f
  6939  08BF  28BA               	goto	u3435
  6940  08C0  0823               	movf	___lldiv@divisor+3,w
  6941  08C1  0227               	subwf	___lldiv@dividend+3,w
  6942  08C2  1D03               	skipz
  6943  08C3  28CE               	goto	u3445
  6944  08C4  0822               	movf	___lldiv@divisor+2,w
  6945  08C5  0226               	subwf	___lldiv@dividend+2,w
  6946  08C6  1D03               	skipz
  6947  08C7  28CE               	goto	u3445
  6948  08C8  0821               	movf	___lldiv@divisor+1,w
  6949  08C9  0225               	subwf	___lldiv@dividend+1,w
  6950  08CA  1D03               	skipz
  6951  08CB  28CE               	goto	u3445
  6952  08CC  0820               	movf	___lldiv@divisor,w
  6953  08CD  0224               	subwf	___lldiv@dividend,w
  6954  08CE                     u3445:	
  6955  08CE  1C03               	skipc
  6956  08CF  28D9               	goto	l2723
  6957  08D0  0820               	movf	___lldiv@divisor,w
  6958  08D1  02A4               	subwf	___lldiv@dividend,f
  6959  08D2  0821               	movf	___lldiv@divisor+1,w
  6960  08D3  3BA5               	subwfb	___lldiv@dividend+1,f
  6961  08D4  0822               	movf	___lldiv@divisor+2,w
  6962  08D5  3BA6               	subwfb	___lldiv@dividend+2,f
  6963  08D6  0823               	movf	___lldiv@divisor+3,w
  6964  08D7  3BA7               	subwfb	___lldiv@dividend+3,f
  6965  08D8  1429               	bsf	___lldiv@quotient,0
  6966  08D9                     l2723:	
  6967  08D9  3001               	movlw	1
  6968  08DA                     u3455:	
  6969  08DA  36A3               	lsrf	___lldiv@divisor+3,f
  6970  08DB  0CA2               	rrf	___lldiv@divisor+2,f
  6971  08DC  0CA1               	rrf	___lldiv@divisor+1,f
  6972  08DD  0CA0               	rrf	___lldiv@divisor,f
  6973  08DE  0B89               	decfsz	9,f
  6974  08DF  28DA               	goto	u3455
  6975  08E0  3001               	movlw	1
  6976  08E1  02AD               	subwf	___lldiv@counter,f
  6977  08E2  1D03               	btfss	3,2
  6978  08E3  28B9               	goto	l2715
  6979  08E4                     l2727:	
  6980  08E4  082C               	movf	___lldiv@quotient+3,w
  6981  08E5  00A3               	movwf	?___lldiv+3
  6982  08E6  082B               	movf	___lldiv@quotient+2,w
  6983  08E7  00A2               	movwf	?___lldiv+2
  6984  08E8  082A               	movf	___lldiv@quotient+1,w
  6985  08E9  00A1               	movwf	?___lldiv+1
  6986  08EA  0829               	movf	___lldiv@quotient,w
  6987  08EB  00A0               	movwf	?___lldiv
  6988  08EC  0008               	return
  6989  08ED                     __end_of___lldiv:	
  6990                           
  6991                           	psect	text18
  6992  0952                     __ptext18:	
  6993 ;; *************** function ___fttol *****************
  6994 ;; Defined at:
  6995 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  6996 ;; Parameters:    Size  Location     Type
  6997 ;;  f1              3   47[BANK0 ] float 
  6998 ;; Auto vars:     Size  Location     Type
  6999 ;;  lval            4   56[BANK0 ] unsigned long 
  7000 ;;  exp1            1   60[BANK0 ] unsigned char 
  7001 ;;  sign1           1   55[BANK0 ] unsigned char 
  7002 ;; Return value:  Size  Location     Type
  7003 ;;                  4   47[BANK0 ] long 
  7004 ;; Registers used:
  7005 ;;		wreg, status,2, status,0
  7006 ;; Tracked objects:
  7007 ;;		On entry : 0/0
  7008 ;;		On exit  : 0/0
  7009 ;;		Unchanged: 0/0
  7010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7011 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7012 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7013 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7014 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7015 ;;Total ram usage:       14 bytes
  7016 ;; Hardware stack levels used:    1
  7017 ;; Hardware stack levels required when called:    4
  7018 ;; This function calls:
  7019 ;;		Nothing
  7020 ;; This function is called by:
  7021 ;;		_printf
  7022 ;; This function uses a non-reentrant model
  7023 ;;
  7024                           
  7025                           
  7026                           ;psect for function ___fttol
  7027  0952                     ___fttol:	
  7028                           
  7029                           ;incstack = 0
  7030                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  7031  0952  0020               	movlb	0	; select bank0
  7032  0953  084F               	movf	___fttol@f1,w
  7033  0954  00D3               	movwf	??___fttol
  7034  0955  0850               	movf	___fttol@f1+1,w
  7035  0956  00D4               	movwf	??___fttol+1
  7036  0957  0851               	movf	___fttol@f1+2,w
  7037  0958  00D5               	movwf	??___fttol+2
  7038  0959  1003               	clrc
  7039  095A  0D54               	rlf	??___fttol+1,w
  7040  095B  0D55               	rlf	??___fttol+2,w
  7041  095C  00D6               	movwf	??___fttol+3
  7042  095D  0856               	movf	??___fttol+3,w
  7043  095E  00DC               	movwf	___fttol@exp1
  7044  095F  085C               	movf	___fttol@exp1,w
  7045  0960  1D03               	btfss	3,2
  7046  0961  296B               	goto	l2671
  7047  0962  3000               	movlw	0
  7048  0963  00D2               	movwf	?___fttol+3
  7049  0964  3000               	movlw	0
  7050  0965  00D1               	movwf	?___fttol+2
  7051  0966  3000               	movlw	0
  7052  0967  00D0               	movwf	?___fttol+1
  7053  0968  3000               	movlw	0
  7054  0969  00CF               	movwf	?___fttol
  7055  096A  0008               	return
  7056  096B                     l2671:	
  7057  096B  084F               	movf	___fttol@f1,w
  7058  096C  00D3               	movwf	??___fttol
  7059  096D  0850               	movf	___fttol@f1+1,w
  7060  096E  00D4               	movwf	??___fttol+1
  7061  096F  0851               	movf	___fttol@f1+2,w
  7062  0970  00D5               	movwf	??___fttol+2
  7063  0971  3017               	movlw	23
  7064  0972                     u3315:	
  7065  0972  36D5               	lsrf	??___fttol+2,f
  7066  0973  0CD4               	rrf	??___fttol+1,f
  7067  0974  0CD3               	rrf	??___fttol,f
  7068  0975  0B89               	decfsz	9,f
  7069  0976  2972               	goto	u3315
  7070  0977  0853               	movf	??___fttol,w
  7071  0978  00D6               	movwf	??___fttol+3
  7072  0979  0856               	movf	??___fttol+3,w
  7073  097A  00D7               	movwf	___fttol@sign1
  7074  097B  17D0               	bsf	___fttol@f1+1,7
  7075  097C  30FF               	movlw	255
  7076  097D  05CF               	andwf	___fttol@f1,f
  7077  097E  30FF               	movlw	255
  7078  097F  05D0               	andwf	___fttol@f1+1,f
  7079  0980  3000               	movlw	0
  7080  0981  05D1               	andwf	___fttol@f1+2,f
  7081  0982  084F               	movf	___fttol@f1,w
  7082  0983  00D8               	movwf	___fttol@lval
  7083  0984  0850               	movf	___fttol@f1+1,w
  7084  0985  00D9               	movwf	___fttol@lval+1
  7085  0986  0851               	movf	___fttol@f1+2,w
  7086  0987  00DA               	movwf	___fttol@lval+2
  7087  0988  01DB               	clrf	___fttol@lval+3
  7088  0989  308E               	movlw	142
  7089  098A  02DC               	subwf	___fttol@exp1,f
  7090  098B  1FDC               	btfss	___fttol@exp1,7
  7091  098C  29A9               	goto	l2691
  7092  098D  085C               	movf	___fttol@exp1,w
  7093  098E  3A80               	xorlw	128
  7094  098F  3E8F               	addlw	143
  7095  0990  1803               	skipnc
  7096  0991  299B               	goto	l2689
  7097  0992  3000               	movlw	0
  7098  0993  00D2               	movwf	?___fttol+3
  7099  0994  3000               	movlw	0
  7100  0995  00D1               	movwf	?___fttol+2
  7101  0996  3000               	movlw	0
  7102  0997  00D0               	movwf	?___fttol+1
  7103  0998  3000               	movlw	0
  7104  0999  00CF               	movwf	?___fttol
  7105  099A  0008               	return
  7106  099B                     l2689:	
  7107  099B  3001               	movlw	1
  7108  099C                     u3345:	
  7109  099C  36DB               	lsrf	___fttol@lval+3,f
  7110  099D  0CDA               	rrf	___fttol@lval+2,f
  7111  099E  0CD9               	rrf	___fttol@lval+1,f
  7112  099F  0CD8               	rrf	___fttol@lval,f
  7113  09A0  0B89               	decfsz	9,f
  7114  09A1  299C               	goto	u3345
  7115  09A2  3001               	movlw	1
  7116  09A3  00D3               	movwf	??___fttol
  7117  09A4  0853               	movf	??___fttol,w
  7118  09A5  07DC               	addwf	___fttol@exp1,f
  7119  09A6  1903               	btfsc	3,2
  7120  09A7  29C2               	goto	l2699
  7121  09A8  299B               	goto	l2689
  7122  09A9                     l2691:	
  7123  09A9  3018               	movlw	24
  7124  09AA  025C               	subwf	___fttol@exp1,w
  7125  09AB  1C03               	skipc
  7126  09AC  29BF               	goto	l789
  7127  09AD  3000               	movlw	0
  7128  09AE  00D2               	movwf	?___fttol+3
  7129  09AF  3000               	movlw	0
  7130  09B0  00D1               	movwf	?___fttol+2
  7131  09B1  3000               	movlw	0
  7132  09B2  00D0               	movwf	?___fttol+1
  7133  09B3  3000               	movlw	0
  7134  09B4  00CF               	movwf	?___fttol
  7135  09B5  0008               	return
  7136  09B6                     l2697:	
  7137  09B6  3001               	movlw	1
  7138  09B7                     u3375:	
  7139  09B7  35D8               	lslf	___fttol@lval,f
  7140  09B8  0DD9               	rlf	___fttol@lval+1,f
  7141  09B9  0DDA               	rlf	___fttol@lval+2,f
  7142  09BA  0DDB               	rlf	___fttol@lval+3,f
  7143  09BB  0B89               	decfsz	9,f
  7144  09BC  29B7               	goto	u3375
  7145  09BD  3001               	movlw	1
  7146  09BE  02DC               	subwf	___fttol@exp1,f
  7147  09BF                     l789:	
  7148  09BF  085C               	movf	___fttol@exp1,w
  7149  09C0  1D03               	btfss	3,2
  7150  09C1  29B6               	goto	l2697
  7151  09C2                     l2699:	
  7152  09C2  0857               	movf	___fttol@sign1,w
  7153  09C3  1903               	btfsc	3,2
  7154  09C4  29D0               	goto	l2703
  7155  09C5  09D8               	comf	___fttol@lval,f
  7156  09C6  09D9               	comf	___fttol@lval+1,f
  7157  09C7  09DA               	comf	___fttol@lval+2,f
  7158  09C8  09DB               	comf	___fttol@lval+3,f
  7159  09C9  0AD8               	incf	___fttol@lval,f
  7160  09CA  1903               	skipnz
  7161  09CB  0AD9               	incf	___fttol@lval+1,f
  7162  09CC  1903               	skipnz
  7163  09CD  0ADA               	incf	___fttol@lval+2,f
  7164  09CE  1903               	skipnz
  7165  09CF  0ADB               	incf	___fttol@lval+3,f
  7166  09D0                     l2703:	
  7167  09D0  085B               	movf	___fttol@lval+3,w
  7168  09D1  00D2               	movwf	?___fttol+3
  7169  09D2  085A               	movf	___fttol@lval+2,w
  7170  09D3  00D1               	movwf	?___fttol+2
  7171  09D4  0859               	movf	___fttol@lval+1,w
  7172  09D5  00D0               	movwf	?___fttol+1
  7173  09D6  0858               	movf	___fttol@lval,w
  7174  09D7  00CF               	movwf	?___fttol
  7175  09D8  0008               	return
  7176  09D9                     __end_of___fttol:	
  7177                           
  7178                           	psect	text19
  7179  1676                     __ptext19:	
  7180 ;; *************** function ___ftsub *****************
  7181 ;; Defined at:
  7182 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
  7183 ;; Parameters:    Size  Location     Type
  7184 ;;  f2              3   65[BANK0 ] float 
  7185 ;;  f1              3   68[BANK0 ] float 
  7186 ;; Auto vars:     Size  Location     Type
  7187 ;;		None
  7188 ;; Return value:  Size  Location     Type
  7189 ;;                  3   65[BANK0 ] float 
  7190 ;; Registers used:
  7191 ;;		wreg, status,2, status,0, pclath, cstack
  7192 ;; Tracked objects:
  7193 ;;		On entry : 0/0
  7194 ;;		On exit  : 0/0
  7195 ;;		Unchanged: 0/0
  7196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7197 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7200 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7201 ;;Total ram usage:        6 bytes
  7202 ;; Hardware stack levels used:    1
  7203 ;; Hardware stack levels required when called:    6
  7204 ;; This function calls:
  7205 ;;		___ftadd
  7206 ;; This function is called by:
  7207 ;;		_printf
  7208 ;; This function uses a non-reentrant model
  7209 ;;
  7210                           
  7211                           
  7212                           ;psect for function ___ftsub
  7213  1676                     ___ftsub:	
  7214                           
  7215                           ;incstack = 0
  7216                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  7217  1676  0020               	movlb	0	; select bank0
  7218  1677  0863               	movf	___ftsub@f2+2,w
  7219  1678  0462               	iorwf	___ftsub@f2+1,w
  7220  1679  0461               	iorwf	___ftsub@f2,w
  7221  167A  1903               	skipnz
  7222  167B  2E7E               	goto	l2661
  7223  167C  3080               	movlw	128
  7224  167D  06E3               	xorwf	___ftsub@f2+2,f
  7225  167E                     l2661:	
  7226  167E  0864               	movf	___ftsub@f1,w
  7227  167F  00D4               	movwf	___ftadd@f1
  7228  1680  0865               	movf	___ftsub@f1+1,w
  7229  1681  00D5               	movwf	___ftadd@f1+1
  7230  1682  0866               	movf	___ftsub@f1+2,w
  7231  1683  00D6               	movwf	___ftadd@f1+2
  7232  1684  0861               	movf	___ftsub@f2,w
  7233  1685  00D7               	movwf	___ftadd@f2
  7234  1686  0862               	movf	___ftsub@f2+1,w
  7235  1687  00D8               	movwf	___ftadd@f2+1
  7236  1688  0863               	movf	___ftsub@f2+2,w
  7237  1689  00D9               	movwf	___ftadd@f2+2
  7238  168A  318B  23A7         	fcall	___ftadd
  7239  168C  0020               	movlb	0	; select bank0
  7240  168D  0854               	movf	?___ftadd,w
  7241  168E  00E1               	movwf	?___ftsub
  7242  168F  0855               	movf	?___ftadd+1,w
  7243  1690  00E2               	movwf	?___ftsub+1
  7244  1691  0856               	movf	?___ftadd+2,w
  7245  1692  00E3               	movwf	?___ftsub+2
  7246  1693  0008               	return
  7247  1694                     __end_of___ftsub:	
  7248                           
  7249                           	psect	text20
  7250  0BA7                     __ptext20:	
  7251 ;; *************** function ___ftadd *****************
  7252 ;; Defined at:
  7253 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
  7254 ;; Parameters:    Size  Location     Type
  7255 ;;  f1              3   52[BANK0 ] float 
  7256 ;;  f2              3   55[BANK0 ] float 
  7257 ;; Auto vars:     Size  Location     Type
  7258 ;;  exp1            1   64[BANK0 ] unsigned char 
  7259 ;;  exp2            1   63[BANK0 ] unsigned char 
  7260 ;;  sign            1   62[BANK0 ] unsigned char 
  7261 ;; Return value:  Size  Location     Type
  7262 ;;                  3   52[BANK0 ] float 
  7263 ;; Registers used:
  7264 ;;		wreg, status,2, status,0, pclath, cstack
  7265 ;; Tracked objects:
  7266 ;;		On entry : 0/0
  7267 ;;		On exit  : 0/0
  7268 ;;		Unchanged: 0/0
  7269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7270 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7271 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7272 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7273 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7274 ;;Total ram usage:       13 bytes
  7275 ;; Hardware stack levels used:    1
  7276 ;; Hardware stack levels required when called:    5
  7277 ;; This function calls:
  7278 ;;		___ftpack
  7279 ;; This function is called by:
  7280 ;;		_printf
  7281 ;;		___ftsub
  7282 ;; This function uses a non-reentrant model
  7283 ;;
  7284                           
  7285                           
  7286                           ;psect for function ___ftadd
  7287  0BA7                     ___ftadd:	
  7288                           
  7289                           ;incstack = 0
  7290                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7291  0BA7  0020               	movlb	0	; select bank0
  7292  0BA8  0854               	movf	___ftadd@f1,w
  7293  0BA9  00DA               	movwf	??___ftadd
  7294  0BAA  0855               	movf	___ftadd@f1+1,w
  7295  0BAB  00DB               	movwf	??___ftadd+1
  7296  0BAC  0856               	movf	___ftadd@f1+2,w
  7297  0BAD  00DC               	movwf	??___ftadd+2
  7298  0BAE  1003               	clrc
  7299  0BAF  0D5B               	rlf	??___ftadd+1,w
  7300  0BB0  0D5C               	rlf	??___ftadd+2,w
  7301  0BB1  00DD               	movwf	??___ftadd+3
  7302  0BB2  085D               	movf	??___ftadd+3,w
  7303  0BB3  00E0               	movwf	___ftadd@exp1
  7304  0BB4  0857               	movf	___ftadd@f2,w
  7305  0BB5  00DA               	movwf	??___ftadd
  7306  0BB6  0858               	movf	___ftadd@f2+1,w
  7307  0BB7  00DB               	movwf	??___ftadd+1
  7308  0BB8  0859               	movf	___ftadd@f2+2,w
  7309  0BB9  00DC               	movwf	??___ftadd+2
  7310  0BBA  1003               	clrc
  7311  0BBB  0D5B               	rlf	??___ftadd+1,w
  7312  0BBC  0D5C               	rlf	??___ftadd+2,w
  7313  0BBD  00DD               	movwf	??___ftadd+3
  7314  0BBE  085D               	movf	??___ftadd+3,w
  7315  0BBF  00DF               	movwf	___ftadd@exp2
  7316  0BC0  0860               	movf	___ftadd@exp1,w
  7317  0BC1  1903               	btfsc	3,2
  7318  0BC2  2BCF               	goto	l2269
  7319  0BC3  085F               	movf	___ftadd@exp2,w
  7320  0BC4  0260               	subwf	___ftadd@exp1,w
  7321  0BC5  1803               	skipnc
  7322  0BC6  2BD6               	goto	l2273
  7323  0BC7  0360               	decf	___ftadd@exp1,w
  7324  0BC8  3AFF               	xorlw	255
  7325  0BC9  075F               	addwf	___ftadd@exp2,w
  7326  0BCA  00DA               	movwf	??___ftadd
  7327  0BCB  3019               	movlw	25
  7328  0BCC  025A               	subwf	??___ftadd,w
  7329  0BCD  1C03               	skipc
  7330  0BCE  2BD6               	goto	l2273
  7331  0BCF                     l2269:	
  7332  0BCF  0857               	movf	___ftadd@f2,w
  7333  0BD0  00D4               	movwf	?___ftadd
  7334  0BD1  0858               	movf	___ftadd@f2+1,w
  7335  0BD2  00D5               	movwf	?___ftadd+1
  7336  0BD3  0859               	movf	___ftadd@f2+2,w
  7337  0BD4  00D6               	movwf	?___ftadd+2
  7338  0BD5  0008               	return
  7339  0BD6                     l2273:	
  7340  0BD6  085F               	movf	___ftadd@exp2,w
  7341  0BD7  1903               	btfsc	3,2
  7342  0BD8  0008               	return
  7343  0BD9  0860               	movf	___ftadd@exp1,w
  7344  0BDA  025F               	subwf	___ftadd@exp2,w
  7345  0BDB  1803               	skipnc
  7346  0BDC  2BE5               	goto	l2279
  7347  0BDD  035F               	decf	___ftadd@exp2,w
  7348  0BDE  3AFF               	xorlw	255
  7349  0BDF  0760               	addwf	___ftadd@exp1,w
  7350  0BE0  00DA               	movwf	??___ftadd
  7351  0BE1  3019               	movlw	25
  7352  0BE2  025A               	subwf	??___ftadd,w
  7353  0BE3  1803               	btfsc	3,0
  7354  0BE4  0008               	return
  7355  0BE5                     l2279:	
  7356  0BE5  3006               	movlw	6
  7357  0BE6  00DA               	movwf	??___ftadd
  7358  0BE7  085A               	movf	??___ftadd,w
  7359  0BE8  00DE               	movwf	___ftadd@sign
  7360  0BE9  1BD6               	btfsc	___ftadd@f1+2,7
  7361  0BEA  17DE               	bsf	___ftadd@sign,7
  7362  0BEB  1BD9               	btfsc	___ftadd@f2+2,7
  7363  0BEC  175E               	bsf	___ftadd@sign,6
  7364  0BED  17D5               	bsf	___ftadd@f1+1,7
  7365  0BEE  30FF               	movlw	255
  7366  0BEF  05D4               	andwf	___ftadd@f1,f
  7367  0BF0  30FF               	movlw	255
  7368  0BF1  05D5               	andwf	___ftadd@f1+1,f
  7369  0BF2  3000               	movlw	0
  7370  0BF3  05D6               	andwf	___ftadd@f1+2,f
  7371  0BF4  17D8               	bsf	___ftadd@f2+1,7
  7372  0BF5  30FF               	movlw	255
  7373  0BF6  05D7               	andwf	___ftadd@f2,f
  7374  0BF7  30FF               	movlw	255
  7375  0BF8  05D8               	andwf	___ftadd@f2+1,f
  7376  0BF9  3000               	movlw	0
  7377  0BFA  05D9               	andwf	___ftadd@f2+2,f
  7378  0BFB  085F               	movf	___ftadd@exp2,w
  7379  0BFC  0260               	subwf	___ftadd@exp1,w
  7380  0BFD  1803               	skipnc
  7381  0BFE  2C21               	goto	l2301
  7382  0BFF                     l2291:	
  7383  0BFF  3001               	movlw	1
  7384  0C00                     u2605:	
  7385  0C00  35D7               	lslf	___ftadd@f2,f
  7386  0C01  0DD8               	rlf	___ftadd@f2+1,f
  7387  0C02  0DD9               	rlf	___ftadd@f2+2,f
  7388  0C03  0B89               	decfsz	9,f
  7389  0C04  2C00               	goto	u2605
  7390  0C05  3001               	movlw	1
  7391  0C06  02DF               	subwf	___ftadd@exp2,f
  7392  0C07  085F               	movf	___ftadd@exp2,w
  7393  0C08  0660               	xorwf	___ftadd@exp1,w
  7394  0C09  1903               	skipnz
  7395  0C0A  2C1C               	goto	l2299
  7396  0C0B  3001               	movlw	1
  7397  0C0C  02DE               	subwf	___ftadd@sign,f
  7398  0C0D  085E               	movf	___ftadd@sign,w
  7399  0C0E  3907               	andlw	7
  7400  0C0F  1903               	btfsc	3,2
  7401  0C10  2C1C               	goto	l2299
  7402  0C11  2BFF               	goto	l2291
  7403  0C12                     l2297:	
  7404  0C12  3001               	movlw	1
  7405  0C13                     u2635:	
  7406  0C13  36D6               	lsrf	___ftadd@f1+2,f
  7407  0C14  0CD5               	rrf	___ftadd@f1+1,f
  7408  0C15  0CD4               	rrf	___ftadd@f1,f
  7409  0C16  0B89               	decfsz	9,f
  7410  0C17  2C13               	goto	u2635
  7411  0C18  3001               	movlw	1
  7412  0C19  00DA               	movwf	??___ftadd
  7413  0C1A  085A               	movf	??___ftadd,w
  7414  0C1B  07E0               	addwf	___ftadd@exp1,f
  7415  0C1C                     l2299:	
  7416  0C1C  0860               	movf	___ftadd@exp1,w
  7417  0C1D  065F               	xorwf	___ftadd@exp2,w
  7418  0C1E  1903               	btfsc	3,2
  7419  0C1F  2C46               	goto	l712
  7420  0C20  2C12               	goto	l2297
  7421  0C21                     l2301:	
  7422  0C21  0860               	movf	___ftadd@exp1,w
  7423  0C22  025F               	subwf	___ftadd@exp2,w
  7424  0C23  1803               	skipnc
  7425  0C24  2C46               	goto	l712
  7426  0C25                     l2303:	
  7427  0C25  3001               	movlw	1
  7428  0C26                     u2665:	
  7429  0C26  35D4               	lslf	___ftadd@f1,f
  7430  0C27  0DD5               	rlf	___ftadd@f1+1,f
  7431  0C28  0DD6               	rlf	___ftadd@f1+2,f
  7432  0C29  0B89               	decfsz	9,f
  7433  0C2A  2C26               	goto	u2665
  7434  0C2B  3001               	movlw	1
  7435  0C2C  02E0               	subwf	___ftadd@exp1,f
  7436  0C2D  085F               	movf	___ftadd@exp2,w
  7437  0C2E  0660               	xorwf	___ftadd@exp1,w
  7438  0C2F  1903               	skipnz
  7439  0C30  2C42               	goto	l2311
  7440  0C31  3001               	movlw	1
  7441  0C32  02DE               	subwf	___ftadd@sign,f
  7442  0C33  085E               	movf	___ftadd@sign,w
  7443  0C34  3907               	andlw	7
  7444  0C35  1903               	btfsc	3,2
  7445  0C36  2C42               	goto	l2311
  7446  0C37  2C25               	goto	l2303
  7447  0C38                     l2309:	
  7448  0C38  3001               	movlw	1
  7449  0C39                     u2695:	
  7450  0C39  36D9               	lsrf	___ftadd@f2+2,f
  7451  0C3A  0CD8               	rrf	___ftadd@f2+1,f
  7452  0C3B  0CD7               	rrf	___ftadd@f2,f
  7453  0C3C  0B89               	decfsz	9,f
  7454  0C3D  2C39               	goto	u2695
  7455  0C3E  3001               	movlw	1
  7456  0C3F  00DA               	movwf	??___ftadd
  7457  0C40  085A               	movf	??___ftadd,w
  7458  0C41  07DF               	addwf	___ftadd@exp2,f
  7459  0C42                     l2311:	
  7460  0C42  0860               	movf	___ftadd@exp1,w
  7461  0C43  065F               	xorwf	___ftadd@exp2,w
  7462  0C44  1D03               	skipz
  7463  0C45  2C38               	goto	l2309
  7464  0C46                     l712:	
  7465  0C46  1FDE               	btfss	___ftadd@sign,7
  7466  0C47  2C58               	goto	l2315
  7467  0C48  30FF               	movlw	255
  7468  0C49  06D4               	xorwf	___ftadd@f1,f
  7469  0C4A  30FF               	movlw	255
  7470  0C4B  06D5               	xorwf	___ftadd@f1+1,f
  7471  0C4C  30FF               	movlw	255
  7472  0C4D  06D6               	xorwf	___ftadd@f1+2,f
  7473  0C4E  3001               	movlw	1
  7474  0C4F  07D4               	addwf	___ftadd@f1,f
  7475  0C50  3000               	movlw	0
  7476  0C51  1803               	skipnc
  7477  0C52  3001               	movlw	1
  7478  0C53  07D5               	addwf	___ftadd@f1+1,f
  7479  0C54  3000               	movlw	0
  7480  0C55  1803               	skipnc
  7481  0C56  3001               	movlw	1
  7482  0C57  07D6               	addwf	___ftadd@f1+2,f
  7483  0C58                     l2315:	
  7484  0C58  1F5E               	btfss	___ftadd@sign,6
  7485  0C59  2C6A               	goto	l2319
  7486  0C5A  30FF               	movlw	255
  7487  0C5B  06D7               	xorwf	___ftadd@f2,f
  7488  0C5C  30FF               	movlw	255
  7489  0C5D  06D8               	xorwf	___ftadd@f2+1,f
  7490  0C5E  30FF               	movlw	255
  7491  0C5F  06D9               	xorwf	___ftadd@f2+2,f
  7492  0C60  3001               	movlw	1
  7493  0C61  07D7               	addwf	___ftadd@f2,f
  7494  0C62  3000               	movlw	0
  7495  0C63  1803               	skipnc
  7496  0C64  3001               	movlw	1
  7497  0C65  07D8               	addwf	___ftadd@f2+1,f
  7498  0C66  3000               	movlw	0
  7499  0C67  1803               	skipnc
  7500  0C68  3001               	movlw	1
  7501  0C69  07D9               	addwf	___ftadd@f2+2,f
  7502  0C6A                     l2319:	
  7503  0C6A  01DE               	clrf	___ftadd@sign
  7504  0C6B  0854               	movf	___ftadd@f1,w
  7505  0C6C  07D7               	addwf	___ftadd@f2,f
  7506  0C6D  0855               	movf	___ftadd@f1+1,w
  7507  0C6E  3DD8               	addwfc	___ftadd@f2+1,f
  7508  0C6F  0856               	movf	___ftadd@f1+2,w
  7509  0C70  3DD9               	addwfc	___ftadd@f2+2,f
  7510  0C71  1FD9               	btfss	___ftadd@f2+2,7
  7511  0C72  2C85               	goto	l2329
  7512  0C73  30FF               	movlw	255
  7513  0C74  06D7               	xorwf	___ftadd@f2,f
  7514  0C75  30FF               	movlw	255
  7515  0C76  06D8               	xorwf	___ftadd@f2+1,f
  7516  0C77  30FF               	movlw	255
  7517  0C78  06D9               	xorwf	___ftadd@f2+2,f
  7518  0C79  3001               	movlw	1
  7519  0C7A  07D7               	addwf	___ftadd@f2,f
  7520  0C7B  3000               	movlw	0
  7521  0C7C  1803               	skipnc
  7522  0C7D  3001               	movlw	1
  7523  0C7E  07D8               	addwf	___ftadd@f2+1,f
  7524  0C7F  3000               	movlw	0
  7525  0C80  1803               	skipnc
  7526  0C81  3001               	movlw	1
  7527  0C82  07D9               	addwf	___ftadd@f2+2,f
  7528  0C83  01DE               	clrf	___ftadd@sign
  7529  0C84  0ADE               	incf	___ftadd@sign,f
  7530  0C85                     l2329:	
  7531  0C85  0857               	movf	___ftadd@f2,w
  7532  0C86  00A0               	movwf	___ftpack@arg
  7533  0C87  0858               	movf	___ftadd@f2+1,w
  7534  0C88  00A1               	movwf	___ftpack@arg+1
  7535  0C89  0859               	movf	___ftadd@f2+2,w
  7536  0C8A  00A2               	movwf	___ftpack@arg+2
  7537  0C8B  0860               	movf	___ftadd@exp1,w
  7538  0C8C  00DA               	movwf	??___ftadd
  7539  0C8D  085A               	movf	??___ftadd,w
  7540  0C8E  00A3               	movwf	___ftpack@exp
  7541  0C8F  085E               	movf	___ftadd@sign,w
  7542  0C90  00DB               	movwf	??___ftadd+1
  7543  0C91  085B               	movf	??___ftadd+1,w
  7544  0C92  00A4               	movwf	___ftpack@sign
  7545  0C93  3188  20ED         	fcall	___ftpack
  7546  0C95  0020               	movlb	0	; select bank0
  7547  0C96  0820               	movf	?___ftpack,w
  7548  0C97  00D4               	movwf	?___ftadd
  7549  0C98  0821               	movf	?___ftpack+1,w
  7550  0C99  00D5               	movwf	?___ftadd+1
  7551  0C9A  0822               	movf	?___ftpack+2,w
  7552  0C9B  00D6               	movwf	?___ftadd+2
  7553  0C9C  0008               	return
  7554  0C9D                     __end_of___ftadd:	
  7555                           
  7556                           	psect	text21
  7557  08ED                     __ptext21:	
  7558 ;; *************** function ___ftpack *****************
  7559 ;; Defined at:
  7560 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
  7561 ;; Parameters:    Size  Location     Type
  7562 ;;  arg             3    0[BANK0 ] unsigned um
  7563 ;;  exp             1    3[BANK0 ] unsigned char 
  7564 ;;  sign            1    4[BANK0 ] unsigned char 
  7565 ;; Auto vars:     Size  Location     Type
  7566 ;;		None
  7567 ;; Return value:  Size  Location     Type
  7568 ;;                  3    0[BANK0 ] float 
  7569 ;; Registers used:
  7570 ;;		wreg, status,2, status,0
  7571 ;; Tracked objects:
  7572 ;;		On entry : 0/0
  7573 ;;		On exit  : 0/0
  7574 ;;		Unchanged: 0/0
  7575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7576 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7578 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7579 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7580 ;;Total ram usage:        8 bytes
  7581 ;; Hardware stack levels used:    1
  7582 ;; Hardware stack levels required when called:    4
  7583 ;; This function calls:
  7584 ;;		Nothing
  7585 ;; This function is called by:
  7586 ;;		___ftadd
  7587 ;;		___ftmul
  7588 ;;		___lltoft
  7589 ;;		___ftdiv
  7590 ;;		___awtoft
  7591 ;; This function uses a non-reentrant model
  7592 ;;
  7593                           
  7594                           
  7595                           ;psect for function ___ftpack
  7596  08ED                     ___ftpack:	
  7597                           
  7598                           ;incstack = 0
  7599                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7600  08ED  0020               	movlb	0	; select bank0
  7601  08EE  0823               	movf	___ftpack@exp,w
  7602  08EF  1903               	btfsc	3,2
  7603  08F0  28F6               	goto	l2127
  7604  08F1  0822               	movf	___ftpack@arg+2,w
  7605  08F2  0421               	iorwf	___ftpack@arg+1,w
  7606  08F3  0420               	iorwf	___ftpack@arg,w
  7607  08F4  1D03               	skipz
  7608  08F5  2907               	goto	l2133
  7609  08F6                     l2127:	
  7610  08F6  3000               	movlw	0
  7611  08F7  00A0               	movwf	?___ftpack
  7612  08F8  3000               	movlw	0
  7613  08F9  00A1               	movwf	?___ftpack+1
  7614  08FA  3000               	movlw	0
  7615  08FB  00A2               	movwf	?___ftpack+2
  7616  08FC  0008               	return
  7617  08FD                     l2131:	
  7618  08FD  3001               	movlw	1
  7619  08FE  00A5               	movwf	??___ftpack
  7620  08FF  0825               	movf	??___ftpack,w
  7621  0900  07A3               	addwf	___ftpack@exp,f
  7622  0901  3001               	movlw	1
  7623  0902                     u2175:	
  7624  0902  36A2               	lsrf	___ftpack@arg+2,f
  7625  0903  0CA1               	rrf	___ftpack@arg+1,f
  7626  0904  0CA0               	rrf	___ftpack@arg,f
  7627  0905  0B89               	decfsz	9,f
  7628  0906  2902               	goto	u2175
  7629  0907                     l2133:	
  7630  0907  30FE               	movlw	254
  7631  0908  0522               	andwf	___ftpack@arg+2,w
  7632  0909  1903               	btfsc	3,2
  7633  090A  2920               	goto	l681
  7634  090B  28FD               	goto	l2131
  7635  090C                     l2135:	
  7636  090C  3001               	movlw	1
  7637  090D  00A5               	movwf	??___ftpack
  7638  090E  0825               	movf	??___ftpack,w
  7639  090F  07A3               	addwf	___ftpack@exp,f
  7640  0910  3001               	movlw	1
  7641  0911  07A0               	addwf	___ftpack@arg,f
  7642  0912  3000               	movlw	0
  7643  0913  1803               	skipnc
  7644  0914  3001               	movlw	1
  7645  0915  07A1               	addwf	___ftpack@arg+1,f
  7646  0916  3000               	movlw	0
  7647  0917  1803               	skipnc
  7648  0918  3001               	movlw	1
  7649  0919  07A2               	addwf	___ftpack@arg+2,f
  7650  091A  3001               	movlw	1
  7651  091B                     u2195:	
  7652  091B  36A2               	lsrf	___ftpack@arg+2,f
  7653  091C  0CA1               	rrf	___ftpack@arg+1,f
  7654  091D  0CA0               	rrf	___ftpack@arg,f
  7655  091E  0B89               	decfsz	9,f
  7656  091F  291B               	goto	u2195
  7657  0920                     l681:	
  7658  0920  30FF               	movlw	255
  7659  0921  0522               	andwf	___ftpack@arg+2,w
  7660  0922  1903               	btfsc	3,2
  7661  0923  292D               	goto	l2143
  7662  0924  290C               	goto	l2135
  7663  0925                     l2141:	
  7664  0925  3001               	movlw	1
  7665  0926  02A3               	subwf	___ftpack@exp,f
  7666  0927  3001               	movlw	1
  7667  0928                     u2215:	
  7668  0928  35A0               	lslf	___ftpack@arg,f
  7669  0929  0DA1               	rlf	___ftpack@arg+1,f
  7670  092A  0DA2               	rlf	___ftpack@arg+2,f
  7671  092B  0B89               	decfsz	9,f
  7672  092C  2928               	goto	u2215
  7673  092D                     l2143:	
  7674  092D  1BA1               	btfsc	___ftpack@arg+1,7
  7675  092E  2933               	goto	l688
  7676  092F  3002               	movlw	2
  7677  0930  0223               	subwf	___ftpack@exp,w
  7678  0931  1803               	skipnc
  7679  0932  2925               	goto	l2141
  7680  0933                     l688:	
  7681  0933  1823               	btfsc	___ftpack@exp,0
  7682  0934  293B               	goto	l689
  7683  0935  30FF               	movlw	255
  7684  0936  05A0               	andwf	___ftpack@arg,f
  7685  0937  307F               	movlw	127
  7686  0938  05A1               	andwf	___ftpack@arg+1,f
  7687  0939  30FF               	movlw	255
  7688  093A  05A2               	andwf	___ftpack@arg+2,f
  7689  093B                     l689:	
  7690  093B  1003               	clrc
  7691  093C  0CA3               	rrf	___ftpack@exp,f
  7692  093D  0823               	movf	___ftpack@exp,w
  7693  093E  00A5               	movwf	??___ftpack
  7694  093F  01A6               	clrf	??___ftpack+1
  7695  0940  01A7               	clrf	??___ftpack+2
  7696  0941  3010               	movlw	16
  7697  0942                     u2255:	
  7698  0942  35A5               	lslf	??___ftpack,f
  7699  0943  0DA6               	rlf	??___ftpack+1,f
  7700  0944  0DA7               	rlf	??___ftpack+2,f
  7701  0945  0B89               	decfsz	9,f
  7702  0946  2942               	goto	u2255
  7703  0947  0825               	movf	??___ftpack,w
  7704  0948  04A0               	iorwf	___ftpack@arg,f
  7705  0949  0826               	movf	??___ftpack+1,w
  7706  094A  04A1               	iorwf	___ftpack@arg+1,f
  7707  094B  0827               	movf	??___ftpack+2,w
  7708  094C  04A2               	iorwf	___ftpack@arg+2,f
  7709  094D  0824               	movf	___ftpack@sign,w
  7710  094E  1903               	btfsc	3,2
  7711  094F  0008               	return
  7712  0950  17A2               	bsf	___ftpack@arg+2,7
  7713  0951  0008               	return
  7714  0952                     __end_of___ftpack:	
  7715                           
  7716                           	psect	text22
  7717  1564                     __ptext22:	
  7718 ;; *************** function ___ftneg *****************
  7719 ;; Defined at:
  7720 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
  7721 ;; Parameters:    Size  Location     Type
  7722 ;;  f1              3    0[BANK0 ] float 
  7723 ;; Auto vars:     Size  Location     Type
  7724 ;;		None
  7725 ;; Return value:  Size  Location     Type
  7726 ;;                  3    0[BANK0 ] float 
  7727 ;; Registers used:
  7728 ;;		wreg
  7729 ;; Tracked objects:
  7730 ;;		On entry : 0/0
  7731 ;;		On exit  : 0/0
  7732 ;;		Unchanged: 0/0
  7733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7734 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7737 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7738 ;;Total ram usage:        3 bytes
  7739 ;; Hardware stack levels used:    1
  7740 ;; Hardware stack levels required when called:    4
  7741 ;; This function calls:
  7742 ;;		Nothing
  7743 ;; This function is called by:
  7744 ;;		_printf
  7745 ;; This function uses a non-reentrant model
  7746 ;;
  7747                           
  7748                           
  7749                           ;psect for function ___ftneg
  7750  1564                     ___ftneg:	
  7751                           
  7752                           ;incstack = 0
  7753                           ; Regs used in ___ftneg: [wreg]
  7754  1564  0020               	movlb	0	; select bank0
  7755  1565  0822               	movf	___ftneg@f1+2,w
  7756  1566  0421               	iorwf	___ftneg@f1+1,w
  7757  1567  0420               	iorwf	___ftneg@f1,w
  7758  1568  1903               	skipnz
  7759  1569  0008               	return
  7760  156A  3080               	movlw	128
  7761  156B  06A2               	xorwf	___ftneg@f1+2,f
  7762  156C  0008               	return
  7763  156D                     __end_of___ftneg:	
  7764                           
  7765                           	psect	text23
  7766  16E3                     __ptext23:	
  7767 ;; *************** function ___ftge *****************
  7768 ;; Defined at:
  7769 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
  7770 ;; Parameters:    Size  Location     Type
  7771 ;;  ff1             3    0[BANK0 ] float 
  7772 ;;  ff2             3    3[BANK0 ] float 
  7773 ;; Auto vars:     Size  Location     Type
  7774 ;;		None
  7775 ;; Return value:  Size  Location     Type
  7776 ;;		None               void
  7777 ;; Registers used:
  7778 ;;		wreg, status,2, status,0
  7779 ;; Tracked objects:
  7780 ;;		On entry : 0/0
  7781 ;;		On exit  : 0/0
  7782 ;;		Unchanged: 0/0
  7783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7784 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7786 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7787 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7788 ;;Total ram usage:        9 bytes
  7789 ;; Hardware stack levels used:    1
  7790 ;; Hardware stack levels required when called:    4
  7791 ;; This function calls:
  7792 ;;		Nothing
  7793 ;; This function is called by:
  7794 ;;		_printf
  7795 ;;		_RadioOperation
  7796 ;; This function uses a non-reentrant model
  7797 ;;
  7798                           
  7799                           
  7800                           ;psect for function ___ftge
  7801  16E3                     ___ftge:	
  7802                           
  7803                           ;incstack = 0
  7804                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  7805  16E3  0020               	movlb	0	; select bank0
  7806  16E4  1FA2               	btfss	___ftge@ff1+2,7
  7807  16E5  2EFA               	goto	l2633
  7808  16E6  0920               	comf	___ftge@ff1,w
  7809  16E7  00A6               	movwf	??___ftge
  7810  16E8  0921               	comf	___ftge@ff1+1,w
  7811  16E9  00A7               	movwf	??___ftge+1
  7812  16EA  0922               	comf	___ftge@ff1+2,w
  7813  16EB  00A8               	movwf	??___ftge+2
  7814  16EC  0AA6               	incf	??___ftge,f
  7815  16ED  1903               	skipnz
  7816  16EE  0AA7               	incf	??___ftge+1,f
  7817  16EF  1903               	skipnz
  7818  16F0  0AA8               	incf	??___ftge+2,f
  7819  16F1  3000               	movlw	0
  7820  16F2  0726               	addwf	??___ftge,w
  7821  16F3  00A0               	movwf	___ftge@ff1
  7822  16F4  3000               	movlw	0
  7823  16F5  3D27               	addwfc	??___ftge+1,w
  7824  16F6  00A1               	movwf	___ftge@ff1+1
  7825  16F7  3080               	movlw	128
  7826  16F8  3D28               	addwfc	??___ftge+2,w
  7827  16F9  00A2               	movwf	___ftge@ff1+2
  7828  16FA                     l2633:	
  7829  16FA  1FA5               	btfss	___ftge@ff2+2,7
  7830  16FB  2F10               	goto	l2637
  7831  16FC  0923               	comf	___ftge@ff2,w
  7832  16FD  00A6               	movwf	??___ftge
  7833  16FE  0924               	comf	___ftge@ff2+1,w
  7834  16FF  00A7               	movwf	??___ftge+1
  7835  1700  0925               	comf	___ftge@ff2+2,w
  7836  1701  00A8               	movwf	??___ftge+2
  7837  1702  0AA6               	incf	??___ftge,f
  7838  1703  1903               	skipnz
  7839  1704  0AA7               	incf	??___ftge+1,f
  7840  1705  1903               	skipnz
  7841  1706  0AA8               	incf	??___ftge+2,f
  7842  1707  3000               	movlw	0
  7843  1708  0726               	addwf	??___ftge,w
  7844  1709  00A3               	movwf	___ftge@ff2
  7845  170A  3000               	movlw	0
  7846  170B  3D27               	addwfc	??___ftge+1,w
  7847  170C  00A4               	movwf	___ftge@ff2+1
  7848  170D  3080               	movlw	128
  7849  170E  3D28               	addwfc	??___ftge+2,w
  7850  170F  00A5               	movwf	___ftge@ff2+2
  7851  1710                     l2637:	
  7852  1710  3080               	movlw	128
  7853  1711  06A2               	xorwf	___ftge@ff1+2,f
  7854  1712  3080               	movlw	128
  7855  1713  06A5               	xorwf	___ftge@ff2+2,f
  7856  1714  0825               	movf	___ftge@ff2+2,w
  7857  1715  0222               	subwf	___ftge@ff1+2,w
  7858  1716  1D03               	skipz
  7859  1717  0008               	return
  7860  1718  0824               	movf	___ftge@ff2+1,w
  7861  1719  0221               	subwf	___ftge@ff1+1,w
  7862  171A  1D03               	skipz
  7863  171B  0008               	return
  7864  171C  0823               	movf	___ftge@ff2,w
  7865  171D  0220               	subwf	___ftge@ff1,w
  7866  171E  0008               	return
  7867  171F                     __end_of___ftge:	
  7868                           
  7869                           	psect	text24
  7870  1694                     __ptext24:	
  7871 ;; *************** function _Start *****************
  7872 ;; Defined at:
  7873 ;;		line 28 in file "Function.c"
  7874 ;; Parameters:    Size  Location     Type
  7875 ;;		None
  7876 ;; Auto vars:     Size  Location     Type
  7877 ;;		None
  7878 ;; Return value:  Size  Location     Type
  7879 ;;                  1    wreg      void 
  7880 ;; Registers used:
  7881 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7882 ;; Tracked objects:
  7883 ;;		On entry : 0/0
  7884 ;;		On exit  : 0/0
  7885 ;;		Unchanged: 0/0
  7886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7890 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7891 ;;Total ram usage:        0 bytes
  7892 ;; Hardware stack levels used:    1
  7893 ;; Hardware stack levels required when called:    7
  7894 ;; This function calls:
  7895 ;;		_ADC_Initialize
  7896 ;;		_EUSART1_Initialize
  7897 ;;		_INTERRUPT_Initialize
  7898 ;;		_TMR2_Initialize
  7899 ;; This function is called by:
  7900 ;;		_main
  7901 ;; This function uses a non-reentrant model
  7902 ;;
  7903                           
  7904                           
  7905                           ;psect for function _Start
  7906  1694                     _Start:	
  7907                           
  7908                           ;Function.c: 32: OSCCONbits.IRCF = 13;
  7909                           
  7910                           ;incstack = 0
  7911                           ; Regs used in _Start: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7912  1694  0021               	movlb	1	; select bank1
  7913  1695  0819               	movf	25,w	;volatile
  7914  1696  3987               	andlw	-121
  7915  1697  3868               	iorlw	104
  7916  1698  0099               	movwf	25	;volatile
  7917                           
  7918                           ;Function.c: 33: OSCCONbits.SCS = 2;
  7919  1699  0819               	movf	25,w	;volatile
  7920  169A  39FC               	andlw	-4
  7921  169B  3802               	iorlw	2
  7922  169C  0099               	movwf	25	;volatile
  7923                           
  7924                           ;Function.c: 34: OSCCONbits.SPLLEN = 0;
  7925  169D  1399               	bcf	25,7	;volatile
  7926                           
  7927                           ;Function.c: 38: TRISCbits.TRISC7 = 0;
  7928  169E  138E               	bcf	14,7	;volatile
  7929                           
  7930                           ;Function.c: 39: TRISCbits.TRISC6 = 0;
  7931  169F  130E               	bcf	14,6	;volatile
  7932                           
  7933                           ;Function.c: 40: TRISCbits.TRISC5 = 0;
  7934  16A0  128E               	bcf	14,5	;volatile
  7935                           
  7936                           ;Function.c: 41: TRISCbits.TRISC4 = 0;
  7937  16A1  120E               	bcf	14,4	;volatile
  7938                           
  7939                           ;Function.c: 42: TRISCbits.TRISC3 = 0;
  7940  16A2  118E               	bcf	14,3	;volatile
  7941                           
  7942                           ;Function.c: 43: TRISAbits.TRISA2 = 1;
  7943  16A3  150C               	bsf	12,2	;volatile
  7944                           
  7945                           ;Function.c: 44: TRISCbits.TRISC0 = 1;
  7946  16A4  140E               	bsf	14,0	;volatile
  7947                           
  7948                           ;Function.c: 45: TRISCbits.TRISC1 = 1;
  7949  16A5  148E               	bsf	14,1	;volatile
  7950                           
  7951                           ;Function.c: 49: ANSELCbits.ANSC0 = 0;
  7952  16A6  0023               	movlb	3	; select bank3
  7953  16A7  100E               	bcf	14,0	;volatile
  7954                           
  7955                           ;Function.c: 50: ANSELCbits.ANSC1 = 0;
  7956  16A8  108E               	bcf	14,1	;volatile
  7957                           
  7958                           ;Function.c: 51: ANSELAbits.ANSA2 = 0;
  7959  16A9  110C               	bcf	12,2	;volatile
  7960                           
  7961                           ;Function.c: 52: ANSELCbits.ANSC3 = 0;
  7962  16AA  118E               	bcf	14,3	;volatile
  7963                           
  7964                           ;Function.c: 53: ANSELCbits.ANSC6 = 0;
  7965  16AB  130E               	bcf	14,6	;volatile
  7966                           
  7967                           ;Function.c: 54: ANSELCbits.ANSC7 = 0;
  7968  16AC  138E               	bcf	14,7	;volatile
  7969                           
  7970                           ;Function.c: 58: ADC_Initialize();
  7971  16AD  3195  256D  3196   	fcall	_ADC_Initialize
  7972                           
  7973                           ;Function.c: 62: EUSART1_Initialize();
  7974  16B0  3195  25C9  3196   	fcall	_EUSART1_Initialize
  7975                           
  7976                           ;Function.c: 66: INTERRUPT_Initialize();
  7977  16B3  3195  2577  3196   	fcall	_INTERRUPT_Initialize
  7978                           
  7979                           ;Function.c: 67: TMR2_Initialize();
  7980  16B6  3195  2581         	fcall	_TMR2_Initialize
  7981  16B8  0008               	return
  7982  16B9                     __end_of_Start:	
  7983                           
  7984                           	psect	text25
  7985  1581                     __ptext25:	
  7986 ;; *************** function _TMR2_Initialize *****************
  7987 ;; Defined at:
  7988 ;;		line 9 in file "Timer.c"
  7989 ;; Parameters:    Size  Location     Type
  7990 ;;		None
  7991 ;; Auto vars:     Size  Location     Type
  7992 ;;		None
  7993 ;; Return value:  Size  Location     Type
  7994 ;;                  1    wreg      void 
  7995 ;; Registers used:
  7996 ;;		wreg, status,2
  7997 ;; Tracked objects:
  7998 ;;		On entry : 0/0
  7999 ;;		On exit  : 0/0
  8000 ;;		Unchanged: 0/0
  8001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8005 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8006 ;;Total ram usage:        0 bytes
  8007 ;; Hardware stack levels used:    1
  8008 ;; Hardware stack levels required when called:    4
  8009 ;; This function calls:
  8010 ;;		Nothing
  8011 ;; This function is called by:
  8012 ;;		_Start
  8013 ;; This function uses a non-reentrant model
  8014 ;;
  8015                           
  8016                           
  8017                           ;psect for function _TMR2_Initialize
  8018  1581                     _TMR2_Initialize:	
  8019                           
  8020                           ;Timer.c: 14: T2CON = 0x00;
  8021                           
  8022                           ;incstack = 0
  8023                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  8024  1581  0020               	movlb	0	; select bank0
  8025  1582  019C               	clrf	28	;volatile
  8026                           
  8027                           ;Timer.c: 15: T2CONbits.TMR2ON = 0;
  8028  1583  111C               	bcf	28,2	;volatile
  8029                           
  8030                           ;Timer.c: 18: PR2 = 18;
  8031  1584  3012               	movlw	18
  8032  1585  009B               	movwf	27	;volatile
  8033                           
  8034                           ;Timer.c: 21: TMR2 = 0;
  8035  1586  019A               	clrf	26	;volatile
  8036                           
  8037                           ;Timer.c: 24: PIR1bits.TMR2IF = 0;
  8038  1587  1091               	bcf	17,1	;volatile
  8039                           
  8040                           ;Timer.c: 27: PIE1bits.TMR2IE = 1;
  8041  1588  0021               	movlb	1	; select bank1
  8042  1589  1491               	bsf	17,1	;volatile
  8043  158A  0008               	return
  8044  158B                     __end_of_TMR2_Initialize:	
  8045                           
  8046                           	psect	text26
  8047  1577                     __ptext26:	
  8048 ;; *************** function _INTERRUPT_Initialize *****************
  8049 ;; Defined at:
  8050 ;;		line 78 in file "Function.c"
  8051 ;; Parameters:    Size  Location     Type
  8052 ;;		None
  8053 ;; Auto vars:     Size  Location     Type
  8054 ;;		None
  8055 ;; Return value:  Size  Location     Type
  8056 ;;                  1    wreg      void 
  8057 ;; Registers used:
  8058 ;;		status,2
  8059 ;; Tracked objects:
  8060 ;;		On entry : 0/0
  8061 ;;		On exit  : 0/0
  8062 ;;		Unchanged: 0/0
  8063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8068 ;;Total ram usage:        0 bytes
  8069 ;; Hardware stack levels used:    1
  8070 ;; Hardware stack levels required when called:    4
  8071 ;; This function calls:
  8072 ;;		Nothing
  8073 ;; This function is called by:
  8074 ;;		_Start
  8075 ;; This function uses a non-reentrant model
  8076 ;;
  8077                           
  8078                           
  8079                           ;psect for function _INTERRUPT_Initialize
  8080  1577                     _INTERRUPT_Initialize:	
  8081                           
  8082                           ;Function.c: 80: INTCON = 0;
  8083                           
  8084                           ;incstack = 0
  8085                           ; Regs used in _INTERRUPT_Initialize: [status,2]
  8086  1577  018B               	clrf	11	;volatile
  8087                           
  8088                           ;Function.c: 81: INTCONbits.TMR0IE = 0;
  8089  1578  128B               	bcf	11,5	;volatile
  8090                           
  8091                           ;Function.c: 82: PIR1bits.TMR2IF = 0;
  8092  1579  0020               	movlb	0	; select bank0
  8093  157A  1091               	bcf	17,1	;volatile
  8094                           
  8095                           ;Function.c: 83: PIE1bits.TMR2IE = 1;
  8096  157B  0021               	movlb	1	; select bank1
  8097  157C  1491               	bsf	17,1	;volatile
  8098                           
  8099                           ;Function.c: 84: INTCONbits.TMR0IF = 0;
  8100  157D  110B               	bcf	11,2	;volatile
  8101                           
  8102                           ;Function.c: 85: INTCONbits.GIE = 1;
  8103  157E  178B               	bsf	11,7	;volatile
  8104                           
  8105                           ;Function.c: 86: INTCONbits.PEIE = 1;
  8106  157F  170B               	bsf	11,6	;volatile
  8107  1580  0008               	return
  8108  1581                     __end_of_INTERRUPT_Initialize:	
  8109                           
  8110                           	psect	text27
  8111  15C9                     __ptext27:	
  8112 ;; *************** function _EUSART1_Initialize *****************
  8113 ;; Defined at:
  8114 ;;		line 30 in file "UART.c"
  8115 ;; Parameters:    Size  Location     Type
  8116 ;;		None
  8117 ;; Auto vars:     Size  Location     Type
  8118 ;;		None
  8119 ;; Return value:  Size  Location     Type
  8120 ;;                  1    wreg      void 
  8121 ;; Registers used:
  8122 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8123 ;; Tracked objects:
  8124 ;;		On entry : 0/0
  8125 ;;		On exit  : 0/0
  8126 ;;		Unchanged: 0/0
  8127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8132 ;;Total ram usage:        0 bytes
  8133 ;; Hardware stack levels used:    1
  8134 ;; Hardware stack levels required when called:    6
  8135 ;; This function calls:
  8136 ;;		_UART_buff_init
  8137 ;; This function is called by:
  8138 ;;		_Start
  8139 ;; This function uses a non-reentrant model
  8140 ;;
  8141                           
  8142                           
  8143                           ;psect for function _EUSART1_Initialize
  8144  15C9                     _EUSART1_Initialize:	
  8145                           
  8146                           ;UART.c: 32: PIE1bits.RCIE = 0;
  8147                           
  8148                           ;incstack = 0
  8149                           ; Regs used in _EUSART1_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8150  15C9  0021               	movlb	1	; select bank1
  8151  15CA  1291               	bcf	17,5	;volatile
  8152                           
  8153                           ;UART.c: 33: PIE1bits.TXIE = 0;
  8154  15CB  1211               	bcf	17,4	;volatile
  8155                           
  8156                           ;UART.c: 35: SPBRG = (((4000000/9600)/4)-1);
  8157  15CC  3000               	movlw	0
  8158  15CD  0023               	movlb	3	; select bank3
  8159  15CE  009C               	movwf	28	;volatile
  8160  15CF  3067               	movlw	103
  8161  15D0  009B               	movwf	27	;volatile
  8162                           
  8163                           ;UART.c: 37: RCSTA = 0b10010000;
  8164  15D1  3090               	movlw	144
  8165  15D2  009D               	movwf	29	;volatile
  8166                           
  8167                           ;UART.c: 39: TXSTA = 0b00100000;
  8168  15D3  3020               	movlw	32
  8169  15D4  009E               	movwf	30	;volatile
  8170                           
  8171                           ;UART.c: 41: UART_buff_init(&input_buffer);
  8172  15D5  3020               	movlw	(low (_input_buffer| (0+256)))& (0+255)
  8173  15D6  3195  2596  3195   	fcall	_UART_buff_init
  8174                           
  8175                           ;UART.c: 42: UART_buff_init(&output_buffer);
  8176  15D9  303A               	movlw	(low (_output_buffer| (0+256)))& (0+255)
  8177  15DA  3195  2596         	fcall	_UART_buff_init
  8178                           
  8179                           ;UART.c: 44: PIE1bits.RCIE = 1;
  8180  15DC  0021               	movlb	1	; select bank1
  8181  15DD  1691               	bsf	17,5	;volatile
  8182  15DE  0008               	return
  8183  15DF                     __end_of_EUSART1_Initialize:	
  8184                           
  8185                           	psect	text28
  8186  1596                     __ptext28:	
  8187 ;; *************** function _UART_buff_init *****************
  8188 ;; Defined at:
  8189 ;;		line 48 in file "UART.c"
  8190 ;; Parameters:    Size  Location     Type
  8191 ;;  _this           1    wreg     PTR struct UART_ring_buf
  8192 ;;		 -> output_buffer(26), input_buffer(26), 
  8193 ;; Auto vars:     Size  Location     Type
  8194 ;;  _this           1    7[BANK0 ] PTR struct UART_ring_buf
  8195 ;;		 -> output_buffer(26), input_buffer(26), 
  8196 ;; Return value:  Size  Location     Type
  8197 ;;                  1    wreg      void 
  8198 ;; Registers used:
  8199 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8200 ;; Tracked objects:
  8201 ;;		On entry : 0/0
  8202 ;;		On exit  : 0/0
  8203 ;;		Unchanged: 0/0
  8204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8208 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8209 ;;Total ram usage:        1 bytes
  8210 ;; Hardware stack levels used:    1
  8211 ;; Hardware stack levels required when called:    5
  8212 ;; This function calls:
  8213 ;;		_memset
  8214 ;; This function is called by:
  8215 ;;		_EUSART1_Initialize
  8216 ;; This function uses a non-reentrant model
  8217 ;;
  8218                           
  8219                           
  8220                           ;psect for function _UART_buff_init
  8221  1596                     _UART_buff_init:	
  8222                           
  8223                           ;incstack = 0
  8224                           ; Regs used in _UART_buff_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8225                           ;UART_buff_init@_this stored from wreg
  8226  1596  0020               	movlb	0	; select bank0
  8227  1597  00A7               	movwf	UART_buff_init@_this
  8228                           
  8229                           ;UART.c: 57: memset(_this, 0, sizeof (*_this));
  8230  1598  3000               	movlw	0
  8231  1599  00A0               	movwf	memset@c
  8232  159A  00A1               	movwf	memset@c+1
  8233  159B  301A               	movlw	26
  8234  159C  00A2               	movwf	memset@n
  8235  159D  3000               	movlw	0
  8236  159E  00A3               	movwf	memset@n+1
  8237  159F  0827               	movf	UART_buff_init@_this,w
  8238  15A0  3196  263E         	fcall	_memset
  8239  15A2  0008               	return
  8240  15A3                     __end_of_UART_buff_init:	
  8241                           
  8242                           	psect	text29
  8243  163E                     __ptext29:	
  8244 ;; *************** function _memset *****************
  8245 ;; Defined at:
  8246 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  8247 ;; Parameters:    Size  Location     Type
  8248 ;;  p1              1    wreg     PTR void 
  8249 ;;		 -> output_buffer(26), input_buffer(26), 
  8250 ;;  c               2    0[BANK0 ] int 
  8251 ;;  n               2    2[BANK0 ] unsigned int 
  8252 ;; Auto vars:     Size  Location     Type
  8253 ;;  p1              1    5[BANK0 ] PTR void 
  8254 ;;		 -> output_buffer(26), input_buffer(26), 
  8255 ;;  p               1    6[BANK0 ] PTR unsigned char 
  8256 ;;		 -> output_buffer(26), input_buffer(26), 
  8257 ;; Return value:  Size  Location     Type
  8258 ;;                  1    wreg      PTR void 
  8259 ;; Registers used:
  8260 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8261 ;; Tracked objects:
  8262 ;;		On entry : 0/0
  8263 ;;		On exit  : 0/0
  8264 ;;		Unchanged: 0/0
  8265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8266 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8267 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8268 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8269 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8270 ;;Total ram usage:        7 bytes
  8271 ;; Hardware stack levels used:    1
  8272 ;; Hardware stack levels required when called:    4
  8273 ;; This function calls:
  8274 ;;		Nothing
  8275 ;; This function is called by:
  8276 ;;		_UART_buff_init
  8277 ;; This function uses a non-reentrant model
  8278 ;;
  8279                           
  8280                           
  8281                           ;psect for function _memset
  8282  163E                     _memset:	
  8283                           
  8284                           ;incstack = 0
  8285                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  8286                           ;memset@p1 stored from wreg
  8287  163E  0020               	movlb	0	; select bank0
  8288  163F  00A5               	movwf	memset@p1
  8289  1640  0825               	movf	memset@p1,w
  8290  1641  00A4               	movwf	??_memset
  8291  1642  0824               	movf	??_memset,w
  8292  1643  00A6               	movwf	memset@p
  8293  1644                     l2093:	
  8294  1644  3001               	movlw	1
  8295  1645  02A2               	subwf	memset@n,f
  8296  1646  3000               	movlw	0
  8297  1647  3BA3               	subwfb	memset@n+1,f
  8298  1648  0A22               	incf	memset@n,w
  8299  1649  1903               	btfsc	3,2
  8300  164A  0A23               	incf	memset@n+1,w
  8301  164B  1903               	btfsc	3,2
  8302  164C  0008               	return
  8303  164D  0820               	movf	memset@c,w
  8304  164E  00A4               	movwf	??_memset
  8305  164F  0826               	movf	memset@p,w
  8306  1650  0086               	movwf	6
  8307  1651  3001               	movlw	1	; select bank2/3
  8308  1652  0087               	movwf	7
  8309  1653  0824               	movf	??_memset,w
  8310  1654  0081               	movwf	1
  8311  1655  3001               	movlw	1
  8312  1656  00A4               	movwf	??_memset
  8313  1657  0824               	movf	??_memset,w
  8314  1658  07A6               	addwf	memset@p,f
  8315  1659  2E44               	goto	l2093
  8316  165A                     __end_of_memset:	
  8317                           ;	Return value of _memset is never used
  8318                           
  8319                           
  8320                           	psect	text30
  8321  156D                     __ptext30:	
  8322 ;; *************** function _ADC_Initialize *****************
  8323 ;; Defined at:
  8324 ;;		line 4 in file "ADC.c"
  8325 ;; Parameters:    Size  Location     Type
  8326 ;;		None
  8327 ;; Auto vars:     Size  Location     Type
  8328 ;;		None
  8329 ;; Return value:  Size  Location     Type
  8330 ;;                  1    wreg      void 
  8331 ;; Registers used:
  8332 ;;		None
  8333 ;; Tracked objects:
  8334 ;;		On entry : 0/0
  8335 ;;		On exit  : 0/0
  8336 ;;		Unchanged: 0/0
  8337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8341 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8342 ;;Total ram usage:        0 bytes
  8343 ;; Hardware stack levels used:    1
  8344 ;; Hardware stack levels required when called:    4
  8345 ;; This function calls:
  8346 ;;		Nothing
  8347 ;; This function is called by:
  8348 ;;		_Start
  8349 ;; This function uses a non-reentrant model
  8350 ;;
  8351                           
  8352                           
  8353                           ;psect for function _ADC_Initialize
  8354  156D                     _ADC_Initialize:	
  8355                           
  8356                           ;ADC.c: 5: FVRCONbits.ADFVR0 = 1;
  8357                           
  8358                           ;incstack = 0
  8359                           ; Regs used in _ADC_Initialize: []
  8360  156D  0022               	movlb	2	; select bank2
  8361  156E  1417               	bsf	23,0	;volatile
  8362                           
  8363                           ;ADC.c: 6: FVRCONbits.ADFVR1 = 1;
  8364  156F  1497               	bsf	23,1	;volatile
  8365                           
  8366                           ;ADC.c: 7: ADCON1bits.ADFM = 1;
  8367  1570  0021               	movlb	1	; select bank1
  8368  1571  179E               	bsf	30,7	;volatile
  8369                           
  8370                           ;ADC.c: 8: ADCON1bits.ADCS0 = 0;
  8371  1572  121E               	bcf	30,4	;volatile
  8372                           
  8373                           ;ADC.c: 9: ADCON1bits.ADCS1 = 0;
  8374  1573  129E               	bcf	30,5	;volatile
  8375                           
  8376                           ;ADC.c: 10: ADCON1bits.ADCS2 = 1;
  8377  1574  171E               	bsf	30,6	;volatile
  8378                           
  8379                           ;ADC.c: 11: ADCON0bits.ADON = 1;
  8380  1575  141D               	bsf	29,0	;volatile
  8381  1576  0008               	return
  8382  1577                     __end_of_ADC_Initialize:	
  8383                           
  8384                           	psect	text31
  8385  154B                     __ptext31:	
  8386 ;; *************** function _LEDOff *****************
  8387 ;; Defined at:
  8388 ;;		line 127 in file "Function.c"
  8389 ;; Parameters:    Size  Location     Type
  8390 ;;		None
  8391 ;; Auto vars:     Size  Location     Type
  8392 ;;		None
  8393 ;; Return value:  Size  Location     Type
  8394 ;;                  1    wreg      void 
  8395 ;; Registers used:
  8396 ;;		None
  8397 ;; Tracked objects:
  8398 ;;		On entry : 0/0
  8399 ;;		On exit  : 0/0
  8400 ;;		Unchanged: 0/0
  8401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8406 ;;Total ram usage:        0 bytes
  8407 ;; Hardware stack levels used:    1
  8408 ;; Hardware stack levels required when called:    4
  8409 ;; This function calls:
  8410 ;;		Nothing
  8411 ;; This function is called by:
  8412 ;;		_main
  8413 ;; This function uses a non-reentrant model
  8414 ;;
  8415                           
  8416                           
  8417                           ;psect for function _LEDOff
  8418  154B                     _LEDOff:	
  8419                           
  8420                           ;Function.c: 128: PORTCbits.RC3 = 0;
  8421                           
  8422                           ;incstack = 0
  8423                           ; Regs used in _LEDOff: []
  8424  154B  0020               	movlb	0	; select bank0
  8425  154C  118E               	bcf	14,3	;volatile
  8426                           
  8427                           ;Function.c: 129: PORTCbits.RC5 = 0;
  8428  154D  128E               	bcf	14,5	;volatile
  8429                           
  8430                           ;Function.c: 130: PORTCbits.RC4 = 0;
  8431  154E  120E               	bcf	14,4	;volatile
  8432  154F  0008               	return
  8433  1550                     __end_of_LEDOff:	
  8434                           
  8435                           	psect	text32
  8436  07E3                     __ptext32:	
  8437 ;; *************** function _Delay *****************
  8438 ;; Defined at:
  8439 ;;		line 71 in file "Function.c"
  8440 ;; Parameters:    Size  Location     Type
  8441 ;;  wait            2    0[BANK0 ] int 
  8442 ;; Auto vars:     Size  Location     Type
  8443 ;;  x               2    3[BANK0 ] int 
  8444 ;; Return value:  Size  Location     Type
  8445 ;;                  1    wreg      void 
  8446 ;; Registers used:
  8447 ;;		wreg, status,2
  8448 ;; Tracked objects:
  8449 ;;		On entry : 0/0
  8450 ;;		On exit  : 0/0
  8451 ;;		Unchanged: 0/0
  8452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8453 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8454 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8455 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8456 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8457 ;;Total ram usage:        5 bytes
  8458 ;; Hardware stack levels used:    1
  8459 ;; Hardware stack levels required when called:    4
  8460 ;; This function calls:
  8461 ;;		Nothing
  8462 ;; This function is called by:
  8463 ;;		_main
  8464 ;;		_SR_FRSStart
  8465 ;; This function uses a non-reentrant model
  8466 ;;
  8467                           
  8468                           
  8469                           ;psect for function _Delay
  8470  07E3                     _Delay:	
  8471                           
  8472                           ;Function.c: 72: int x;
  8473                           ;Function.c: 73: for (x = 0; x < wait; x++) {
  8474                           
  8475                           ;incstack = 0
  8476                           ; Regs used in _Delay: [wreg+status,2]
  8477  07E3  0020               	movlb	0	; select bank0
  8478  07E4  01A3               	clrf	Delay@x
  8479  07E5  01A4               	clrf	Delay@x+1
  8480  07E6                     l62:	
  8481  07E6  0824               	movf	Delay@x+1,w
  8482  07E7  3A80               	xorlw	128
  8483  07E8  00A2               	movwf	??_Delay
  8484  07E9  0821               	movf	Delay@wait+1,w
  8485  07EA  3A80               	xorlw	128
  8486  07EB  0222               	subwf	??_Delay,w
  8487  07EC  1D03               	skipz
  8488  07ED  2FF0               	goto	u3885
  8489  07EE  0820               	movf	Delay@wait,w
  8490  07EF  0223               	subwf	Delay@x,w
  8491  07F0                     u3885:	
  8492  07F0  1803               	btfsc	3,0
  8493  07F1  0008               	return
  8494                           
  8495                           ;Function.c: 74: _delay((unsigned long)((1)*(4000000/4000.0)));
  8496  07F2  30F9               	movlw	249
  8497  07F3  0020               	movlb	0	; select bank0
  8498  07F4  00A2               	movwf	??_Delay
  8499  07F5                     u4307:	
  8500  07F5  0000               	nop
  8501  07F6  0BA2               	decfsz	??_Delay,f
  8502  07F7  2FF5               	goto	u4307
  8503  07F8  3200               	nop2	;nop
  8504  07F9  0000               	nop
  8505  07FA  3001               	movlw	1
  8506  07FB  0020               	movlb	0	; select bank0
  8507  07FC  07A3               	addwf	Delay@x,f
  8508  07FD  3000               	movlw	0
  8509  07FE  3DA4               	addwfc	Delay@x+1,f
  8510  07FF  2FE6               	goto	l62
  8511  0800                     __end_of_Delay:	
  8512                           
  8513                           	psect	intentry
  8514  0004                     __pintentry:	
  8515 ;; *************** function _INTERRUPT_InterruptManager *****************
  8516 ;; Defined at:
  8517 ;;		line 89 in file "Function.c"
  8518 ;; Parameters:    Size  Location     Type
  8519 ;;		None
  8520 ;; Auto vars:     Size  Location     Type
  8521 ;;		None
  8522 ;; Return value:  Size  Location     Type
  8523 ;;                  1    wreg      void 
  8524 ;; Registers used:
  8525 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8526 ;; Tracked objects:
  8527 ;;		On entry : 0/0
  8528 ;;		On exit  : 0/0
  8529 ;;		Unchanged: 0/0
  8530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8533 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8534 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8535 ;;Total ram usage:        1 bytes
  8536 ;; Hardware stack levels used:    1
  8537 ;; Hardware stack levels required when called:    3
  8538 ;; This function calls:
  8539 ;;		_EUSART1_Receive_ISR
  8540 ;;		_EUSART1_Transmit_ISR
  8541 ;;		_TMR2_ISR
  8542 ;; This function is called by:
  8543 ;;		Interrupt level 1
  8544 ;; This function uses a non-reentrant model
  8545 ;;
  8546                           
  8547  0004                     _INTERRUPT_InterruptManager:	
  8548                           
  8549                           ;incstack = 0
  8550                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8551  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  8552  0005  3180               	pagesel	$
  8553  0006  0020               	movlb	0	; select bank0
  8554  0007  087F               	movf	127,w
  8555  0008  00FD               	movwf	??_INTERRUPT_InterruptManager
  8556                           
  8557                           ;Function.c: 91: if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
  8558  0009  0021               	movlb	1	; select bank1
  8559  000A  1C91               	btfss	17,1	;volatile
  8560  000B  2812               	goto	i1l3103
  8561  000C  0020               	movlb	0	; select bank0
  8562  000D  1C91               	btfss	17,1	;volatile
  8563  000E  2812               	goto	i1l3103
  8564                           
  8565                           ;Function.c: 92: {
  8566                           ;Function.c: 93: TMR2_ISR();
  8567  000F  3195  255C  3180   	fcall	_TMR2_ISR
  8568  0012                     i1l3103:	
  8569                           
  8570                           ;Function.c: 94: }
  8571                           ;Function.c: 95: if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
  8572  0012  0021               	movlb	1	; select bank1
  8573  0013  1E91               	btfss	17,5	;volatile
  8574  0014  281B               	goto	i1l3109
  8575  0015  0020               	movlb	0	; select bank0
  8576  0016  1E91               	btfss	17,5	;volatile
  8577  0017  281B               	goto	i1l3109
  8578                           
  8579                           ;Function.c: 96: {
  8580                           ;Function.c: 97: EUSART1_Receive_ISR();
  8581  0018  3195  25A3  3180   	fcall	_EUSART1_Receive_ISR
  8582  001B                     i1l3109:	
  8583                           
  8584                           ;Function.c: 98: }
  8585                           ;Function.c: 99: if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
  8586  001B  0021               	movlb	1	; select bank1
  8587  001C  1E11               	btfss	17,4	;volatile
  8588  001D  2823               	goto	i1l75
  8589  001E  0020               	movlb	0	; select bank0
  8590  001F  1E11               	btfss	17,4	;volatile
  8591  0020  2823               	goto	i1l75
  8592                           
  8593                           ;Function.c: 100: {
  8594                           ;Function.c: 101: EUSART1_Transmit_ISR();
  8595  0021  3196  2623         	fcall	_EUSART1_Transmit_ISR
  8596  0023                     i1l75:	
  8597                           ;Function.c: 103: else
  8598                           ;Function.c: 104: {
  8599                           
  8600                           ;Function.c: 102: }
  8601                           
  8602  0023  087D               	movf	??_INTERRUPT_InterruptManager,w
  8603  0024  0020               	movlb	0	; select bank0
  8604  0025  00FF               	movwf	127
  8605  0026  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  8606  0027  0009               	retfie
  8607  0028                     __end_of_INTERRUPT_InterruptManager:	
  8608                           
  8609                           	psect	text34
  8610  155C                     __ptext34:	
  8611 ;; *************** function _TMR2_ISR *****************
  8612 ;; Defined at:
  8613 ;;		line 48 in file "Timer.c"
  8614 ;; Parameters:    Size  Location     Type
  8615 ;;		None
  8616 ;; Auto vars:     Size  Location     Type
  8617 ;;		None
  8618 ;; Return value:  Size  Location     Type
  8619 ;;                  1    wreg      void 
  8620 ;; Registers used:
  8621 ;;		wreg
  8622 ;; Tracked objects:
  8623 ;;		On entry : 0/0
  8624 ;;		On exit  : 0/0
  8625 ;;		Unchanged: 0/0
  8626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8631 ;;Total ram usage:        0 bytes
  8632 ;; Hardware stack levels used:    1
  8633 ;; This function calls:
  8634 ;;		Nothing
  8635 ;; This function is called by:
  8636 ;;		_INTERRUPT_InterruptManager
  8637 ;; This function uses a non-reentrant model
  8638 ;;
  8639                           
  8640                           
  8641                           ;psect for function _TMR2_ISR
  8642  155C                     _TMR2_ISR:	
  8643                           
  8644                           ;Timer.c: 51: ticker++;
  8645                           
  8646                           ;incstack = 0
  8647                           ; Regs used in _TMR2_ISR: [wreg]
  8648  155C  3001               	movlw	1
  8649  155D  0021               	movlb	1	; select bank1
  8650  155E  07DD               	addwf	_ticker^(0+128),f
  8651  155F  3000               	movlw	0
  8652  1560  3DDE               	addwfc	(_ticker+1)^(0+128),f
  8653                           
  8654                           ;Timer.c: 53: PIR1bits.TMR2IF = 0;
  8655  1561  0020               	movlb	0	; select bank0
  8656  1562  1091               	bcf	17,1	;volatile
  8657  1563  0008               	return
  8658  1564                     __end_of_TMR2_ISR:	
  8659                           
  8660                           	psect	text35
  8661  1623                     __ptext35:	
  8662 ;; *************** function _EUSART1_Transmit_ISR *****************
  8663 ;; Defined at:
  8664 ;;		line 129 in file "UART.c"
  8665 ;; Parameters:    Size  Location     Type
  8666 ;;		None
  8667 ;; Auto vars:     Size  Location     Type
  8668 ;;		None
  8669 ;; Return value:  Size  Location     Type
  8670 ;;                  1    wreg      void 
  8671 ;; Registers used:
  8672 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8673 ;; Tracked objects:
  8674 ;;		On entry : 0/0
  8675 ;;		On exit  : 0/0
  8676 ;;		Unchanged: 0/0
  8677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8680 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8681 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8682 ;;Total ram usage:        1 bytes
  8683 ;; Hardware stack levels used:    1
  8684 ;; Hardware stack levels required when called:    2
  8685 ;; This function calls:
  8686 ;;		_UART_buff_size
  8687 ;;		i1_UART_buff_get
  8688 ;; This function is called by:
  8689 ;;		_INTERRUPT_InterruptManager
  8690 ;; This function uses a non-reentrant model
  8691 ;;
  8692                           
  8693                           
  8694                           ;psect for function _EUSART1_Transmit_ISR
  8695  1623                     _EUSART1_Transmit_ISR:	
  8696                           
  8697                           ;UART.c: 131: if (UART_buff_size(&output_buffer) > 0) {
  8698                           
  8699                           ;incstack = 0
  8700                           ; Regs used in _EUSART1_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8701  1623  303A               	movlw	(low (_output_buffer| (0+256)))& (0+255)
  8702  1624  3195  258B  3196   	fcall	_UART_buff_size
  8703  1627  0871               	movf	?_UART_buff_size+1,w
  8704  1628  3A80               	xorlw	128
  8705  1629  00FB               	movwf	??_EUSART1_Transmit_ISR
  8706  162A  3080               	movlw	128
  8707  162B  027B               	subwf	??_EUSART1_Transmit_ISR,w
  8708  162C  1D03               	skipz
  8709  162D  2E30               	goto	u390_25
  8710  162E  3001               	movlw	1
  8711  162F  0270               	subwf	?_UART_buff_size,w
  8712  1630                     u390_25:	
  8713  1630  1C03               	skipc
  8714  1631  2E38               	goto	i1l202
  8715                           
  8716                           ;UART.c: 132: TXREG = UART_buff_get(&output_buffer);
  8717  1632  303A               	movlw	(low (_output_buffer| (0+256)))& (0+255)
  8718  1633  3197  2762         	fcall	i1_UART_buff_get
  8719  1635  0023               	movlb	3	; select bank3
  8720  1636  009A               	movwf	26	;volatile
  8721                           
  8722                           ;UART.c: 133: } else {
  8723  1637  0008               	return
  8724  1638                     i1l202:	
  8725                           
  8726                           ;UART.c: 134: Transmit_stall = 1;
  8727  1638  0020               	movlb	0	; select bank0
  8728  1639  01EF               	clrf	_Transmit_stall
  8729  163A  0AEF               	incf	_Transmit_stall,f
  8730                           
  8731                           ;UART.c: 135: PIE1bits.TXIE = 0;
  8732  163B  0021               	movlb	1	; select bank1
  8733  163C  1211               	bcf	17,4	;volatile
  8734  163D  0008               	return
  8735  163E                     __end_of_EUSART1_Transmit_ISR:	
  8736                           
  8737                           	psect	text36
  8738  1762                     __ptext36:	
  8739 ;; *************** function i1_UART_buff_get *****************
  8740 ;; Defined at:
  8741 ;;		line 73 in file "UART.c"
  8742 ;; Parameters:    Size  Location     Type
  8743 ;;  _this           1    wreg     PTR struct UART_ring_buf
  8744 ;;		 -> output_buffer(26), input_buffer(26), 
  8745 ;; Auto vars:     Size  Location     Type
  8746 ;;  _this           1   10[COMMON] PTR struct UART_ring_buf
  8747 ;;		 -> output_buffer(26), input_buffer(26), 
  8748 ;;  UART_buff_ge    1    9[COMMON] unsigned char 
  8749 ;; Return value:  Size  Location     Type
  8750 ;;                  1    wreg      unsigned char 
  8751 ;; Registers used:
  8752 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8753 ;; Tracked objects:
  8754 ;;		On entry : 0/0
  8755 ;;		On exit  : 0/0
  8756 ;;		Unchanged: 0/0
  8757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8759 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8760 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8761 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8762 ;;Total ram usage:        5 bytes
  8763 ;; Hardware stack levels used:    1
  8764 ;; Hardware stack levels required when called:    1
  8765 ;; This function calls:
  8766 ;;		i1_UART_buff_modulo_inc
  8767 ;; This function is called by:
  8768 ;;		_EUSART1_Transmit_ISR
  8769 ;; This function uses a non-reentrant model
  8770 ;;
  8771                           
  8772                           
  8773                           ;psect for function i1_UART_buff_get
  8774  1762                     i1_UART_buff_get:	
  8775                           
  8776                           ;incstack = 0
  8777                           ; Regs used in i1_UART_buff_get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8778                           ;i1UART_buff_get@_this stored from wreg
  8779  1762  00FA               	movwf	i1UART_buff_get@_this
  8780                           
  8781                           ;UART.c: 74: unsigned char c;
  8782                           ;UART.c: 75: if (_this->count > 0) {
  8783  1763  087A               	movf	i1UART_buff_get@_this,w
  8784  1764  3E18               	addlw	24
  8785  1765  0086               	movwf	6
  8786  1766  3001               	movlw	1	; select bank2/3
  8787  1767  0087               	movwf	7
  8788  1768  3F40               	moviw [0]fsr1
  8789  1769  00F6               	movwf	??i1_UART_buff_get
  8790  176A  3F41               	moviw [1]fsr1
  8791  176B  00F7               	movwf	??i1_UART_buff_get+1
  8792  176C  0877               	movf	??i1_UART_buff_get+1,w
  8793  176D  3A80               	xorlw	128
  8794  176E  00F8               	movwf	??i1_UART_buff_get+2
  8795  176F  3080               	movlw	128
  8796  1770  0278               	subwf	??i1_UART_buff_get+2,w
  8797  1771  1D03               	skipz
  8798  1772  2F75               	goto	u356_25
  8799  1773  3001               	movlw	1
  8800  1774  0276               	subwf	??i1_UART_buff_get,w
  8801  1775                     u356_25:	
  8802  1775  1C03               	skipc
  8803  1776  2FAC               	goto	i1l2783
  8804                           
  8805                           ;UART.c: 76: c = _this->buf[_this->tail];
  8806  1777  087A               	movf	i1UART_buff_get@_this,w
  8807  1778  3E16               	addlw	22
  8808  1779  0086               	movwf	6
  8809  177A  3001               	movlw	1	; select bank2/3
  8810  177B  0087               	movwf	7
  8811  177C  0801               	movf	1,w
  8812  177D  077A               	addwf	i1UART_buff_get@_this,w
  8813  177E  00F6               	movwf	??i1_UART_buff_get
  8814  177F  0876               	movf	??i1_UART_buff_get,w
  8815  1780  0086               	movwf	6
  8816  1781  3001               	movlw	1	; select bank2/3
  8817  1782  0087               	movwf	7
  8818  1783  0801               	movf	1,w
  8819  1784  00F7               	movwf	??i1_UART_buff_get+1
  8820  1785  0877               	movf	??i1_UART_buff_get+1,w
  8821  1786  00F9               	movwf	i1UART_buff_get@c
  8822                           
  8823                           ;UART.c: 77: _this->tail = UART_buff_modulo_inc(_this->tail, 20);
  8824  1787  087A               	movf	i1UART_buff_get@_this,w
  8825  1788  3E16               	addlw	22
  8826  1789  0086               	movwf	6
  8827  178A  3001               	movlw	1	; select bank2/3
  8828  178B  0087               	movwf	7
  8829  178C  3F40               	moviw [0]fsr1
  8830  178D  00F0               	movwf	i1UART_buff_modulo_inc@value
  8831  178E  3F41               	moviw [1]fsr1
  8832  178F  00F1               	movwf	i1UART_buff_modulo_inc@value+1
  8833  1790  3014               	movlw	20
  8834  1791  00F2               	movwf	i1UART_buff_modulo_inc@modulus
  8835  1792  3000               	movlw	0
  8836  1793  00F3               	movwf	i1UART_buff_modulo_inc@modulus+1
  8837  1794  3195  25B4  3197   	fcall	i1_UART_buff_modulo_inc
  8838  1797  087A               	movf	i1UART_buff_get@_this,w
  8839  1798  3E16               	addlw	22
  8840  1799  0086               	movwf	6
  8841  179A  3001               	movlw	1	; select bank2/3
  8842  179B  0087               	movwf	7
  8843  179C  0870               	movf	?i1_UART_buff_modulo_inc,w
  8844  179D  3FC0               	movwi [0]fsr1
  8845  179E  0871               	movf	?i1_UART_buff_modulo_inc+1,w
  8846  179F  3FC1               	movwi [1]fsr1
  8847                           
  8848                           ;UART.c: 78: --_this->count;
  8849  17A0  087A               	movf	i1UART_buff_get@_this,w
  8850  17A1  3E18               	addlw	24
  8851  17A2  0086               	movwf	6
  8852  17A3  3001               	movlw	1	; select bank2/3
  8853  17A4  0087               	movwf	7
  8854  17A5  30FF               	movlw	255
  8855  17A6  0781               	addwf	1,f
  8856  17A7  3141               	addfsr 1,1
  8857  17A8  30FF               	movlw	255
  8858  17A9  3D81               	addwfc	1,f
  8859  17AA  317F               	addfsr 1,-1
  8860                           
  8861                           ;UART.c: 79: } else {
  8862  17AB  2FAD               	goto	i1l2785
  8863  17AC                     i1l2783:	
  8864                           
  8865                           ;UART.c: 80: c = 0;
  8866  17AC  01F9               	clrf	i1UART_buff_get@c
  8867  17AD                     i1l2785:	
  8868                           
  8869                           ;UART.c: 81: }
  8870                           ;UART.c: 82: return (c);
  8871  17AD  0879               	movf	i1UART_buff_get@c,w
  8872  17AE  0008               	return
  8873  17AF                     __end_ofi1_UART_buff_get:	
  8874                           
  8875                           	psect	text37
  8876  158B                     __ptext37:	
  8877 ;; *************** function _UART_buff_size *****************
  8878 ;; Defined at:
  8879 ;;		line 85 in file "UART.c"
  8880 ;; Parameters:    Size  Location     Type
  8881 ;;  _this           1    wreg     PTR struct UART_ring_buf
  8882 ;;		 -> output_buffer(26), 
  8883 ;; Auto vars:     Size  Location     Type
  8884 ;;  _this           1    3[COMMON] PTR struct UART_ring_buf
  8885 ;;		 -> output_buffer(26), 
  8886 ;; Return value:  Size  Location     Type
  8887 ;;                  2    0[COMMON] int 
  8888 ;; Registers used:
  8889 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8890 ;; Tracked objects:
  8891 ;;		On entry : 0/0
  8892 ;;		On exit  : 0/0
  8893 ;;		Unchanged: 0/0
  8894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8895 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8896 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8898 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8899 ;;Total ram usage:        4 bytes
  8900 ;; Hardware stack levels used:    1
  8901 ;; This function calls:
  8902 ;;		Nothing
  8903 ;; This function is called by:
  8904 ;;		_EUSART1_Transmit_ISR
  8905 ;; This function uses a non-reentrant model
  8906 ;;
  8907                           
  8908                           
  8909                           ;psect for function _UART_buff_size
  8910  158B                     _UART_buff_size:	
  8911                           
  8912                           ;incstack = 0
  8913                           ; Regs used in _UART_buff_size: [wreg+fsr1l+fsr1h+status,2+status,0]
  8914                           ;UART_buff_size@_this stored from wreg
  8915  158B  00F3               	movwf	UART_buff_size@_this
  8916                           
  8917                           ;UART.c: 86: return (_this->count);
  8918  158C  0873               	movf	UART_buff_size@_this,w
  8919  158D  3E18               	addlw	24
  8920  158E  0086               	movwf	6
  8921  158F  3001               	movlw	1	; select bank2/3
  8922  1590  0087               	movwf	7
  8923  1591  3F40               	moviw [0]fsr1
  8924  1592  00F0               	movwf	?_UART_buff_size
  8925  1593  3F41               	moviw [1]fsr1
  8926  1594  00F1               	movwf	?_UART_buff_size+1
  8927  1595  0008               	return
  8928  1596                     __end_of_UART_buff_size:	
  8929                           
  8930                           	psect	text38
  8931  15A3                     __ptext38:	
  8932 ;; *************** function _EUSART1_Receive_ISR *****************
  8933 ;; Defined at:
  8934 ;;		line 118 in file "UART.c"
  8935 ;; Parameters:    Size  Location     Type
  8936 ;;		None
  8937 ;; Auto vars:     Size  Location     Type
  8938 ;;  data            1   12[COMMON] unsigned char 
  8939 ;; Return value:  Size  Location     Type
  8940 ;;                  1    wreg      void 
  8941 ;; Registers used:
  8942 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8943 ;; Tracked objects:
  8944 ;;		On entry : 0/0
  8945 ;;		On exit  : 0/0
  8946 ;;		Unchanged: 0/0
  8947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8949 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8950 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8951 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8952 ;;Total ram usage:        2 bytes
  8953 ;; Hardware stack levels used:    1
  8954 ;; Hardware stack levels required when called:    2
  8955 ;; This function calls:
  8956 ;;		i1_UART_buff_put
  8957 ;; This function is called by:
  8958 ;;		_INTERRUPT_InterruptManager
  8959 ;; This function uses a non-reentrant model
  8960 ;;
  8961                           
  8962                           
  8963                           ;psect for function _EUSART1_Receive_ISR
  8964  15A3                     _EUSART1_Receive_ISR:	
  8965                           
  8966                           ;UART.c: 119: if (1 == RCSTAbits.OERR) {
  8967                           
  8968                           ;incstack = 0
  8969                           ; Regs used in _EUSART1_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8970  15A3  0023               	movlb	3	; select bank3
  8971  15A4  1C9D               	btfss	29,1	;volatile
  8972  15A5  2DA8               	goto	i1l3027
  8973                           
  8974                           ;UART.c: 122: RCSTAbits.CREN = 0;
  8975  15A6  121D               	bcf	29,4	;volatile
  8976                           
  8977                           ;UART.c: 123: RCSTAbits.CREN = 1;
  8978  15A7  161D               	bsf	29,4	;volatile
  8979  15A8                     i1l3027:	
  8980                           
  8981                           ;UART.c: 124: }
  8982                           ;UART.c: 125: unsigned char data = RCREG;
  8983  15A8  0819               	movf	25,w	;volatile
  8984  15A9  00FB               	movwf	??_EUSART1_Receive_ISR
  8985  15AA  087B               	movf	??_EUSART1_Receive_ISR,w
  8986  15AB  00FC               	movwf	EUSART1_Receive_ISR@data
  8987                           
  8988                           ;UART.c: 126: UART_buff_put(&input_buffer, data);
  8989  15AC  087C               	movf	EUSART1_Receive_ISR@data,w
  8990  15AD  00FB               	movwf	??_EUSART1_Receive_ISR
  8991  15AE  087B               	movf	??_EUSART1_Receive_ISR,w
  8992  15AF  00F6               	movwf	i1UART_buff_put@c
  8993  15B0  3020               	movlw	(low (_input_buffer| (0+256)))& (0+255)
  8994  15B1  3189  21D9         	fcall	i1_UART_buff_put
  8995  15B3  0008               	return
  8996  15B4                     __end_of_EUSART1_Receive_ISR:	
  8997                           
  8998                           	psect	text39
  8999  09D9                     __ptext39:	
  9000 ;; *************** function i1_UART_buff_put *****************
  9001 ;; Defined at:
  9002 ;;		line 60 in file "UART.c"
  9003 ;; Parameters:    Size  Location     Type
  9004 ;;  _this           1    wreg     PTR struct UART_ring_buf
  9005 ;;		 -> output_buffer(26), input_buffer(26), 
  9006 ;;  c               1    6[COMMON] unsigned char 
  9007 ;; Auto vars:     Size  Location     Type
  9008 ;;  _this           1   10[COMMON] PTR struct UART_ring_buf
  9009 ;;		 -> output_buffer(26), input_buffer(26), 
  9010 ;; Return value:  Size  Location     Type
  9011 ;;                  1    wreg      void 
  9012 ;; Registers used:
  9013 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9014 ;; Tracked objects:
  9015 ;;		On entry : 0/0
  9016 ;;		On exit  : 0/0
  9017 ;;		Unchanged: 0/0
  9018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9019 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9020 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9021 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9022 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9023 ;;Total ram usage:        5 bytes
  9024 ;; Hardware stack levels used:    1
  9025 ;; Hardware stack levels required when called:    1
  9026 ;; This function calls:
  9027 ;;		i1_UART_buff_modulo_inc
  9028 ;; This function is called by:
  9029 ;;		_EUSART1_Receive_ISR
  9030 ;; This function uses a non-reentrant model
  9031 ;;
  9032                           
  9033                           
  9034                           ;psect for function i1_UART_buff_put
  9035  09D9                     i1_UART_buff_put:	
  9036                           
  9037                           ;incstack = 0
  9038                           ; Regs used in i1_UART_buff_put: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9039                           ;i1UART_buff_put@_this stored from wreg
  9040  09D9  00FA               	movwf	i1UART_buff_put@_this
  9041                           
  9042                           ;UART.c: 61: if (_this->count < 20) {
  9043  09DA  087A               	movf	i1UART_buff_put@_this,w
  9044  09DB  3E18               	addlw	24
  9045  09DC  0086               	movwf	6
  9046  09DD  3001               	movlw	1	; select bank2/3
  9047  09DE  0087               	movwf	7
  9048  09DF  3F40               	moviw [0]fsr1
  9049  09E0  00F7               	movwf	??i1_UART_buff_put
  9050  09E1  3F41               	moviw [1]fsr1
  9051  09E2  00F8               	movwf	??i1_UART_buff_put+1
  9052  09E3  0878               	movf	??i1_UART_buff_put+1,w
  9053  09E4  3A80               	xorlw	128
  9054  09E5  00F9               	movwf	??i1_UART_buff_put+2
  9055  09E6  3080               	movlw	128
  9056  09E7  0279               	subwf	??i1_UART_buff_put+2,w
  9057  09E8  1D03               	skipz
  9058  09E9  29EC               	goto	u355_25
  9059  09EA  3014               	movlw	20
  9060  09EB  0277               	subwf	??i1_UART_buff_put,w
  9061  09EC                     u355_25:	
  9062  09EC  1803               	skipnc
  9063  09ED  2A21               	goto	i1l2769
  9064                           
  9065                           ;UART.c: 62: _this->buf[_this->head] = c;
  9066  09EE  0876               	movf	i1UART_buff_put@c,w
  9067  09EF  00F7               	movwf	??i1_UART_buff_put
  9068  09F0  087A               	movf	i1UART_buff_put@_this,w
  9069  09F1  3E14               	addlw	20
  9070  09F2  0086               	movwf	6
  9071  09F3  3001               	movlw	1	; select bank2/3
  9072  09F4  0087               	movwf	7
  9073  09F5  0801               	movf	1,w
  9074  09F6  077A               	addwf	i1UART_buff_put@_this,w
  9075  09F7  00F8               	movwf	??i1_UART_buff_put+1
  9076  09F8  0878               	movf	??i1_UART_buff_put+1,w
  9077  09F9  0086               	movwf	6
  9078  09FA  3001               	movlw	1	; select bank2/3
  9079  09FB  0087               	movwf	7
  9080  09FC  0877               	movf	??i1_UART_buff_put,w
  9081  09FD  0081               	movwf	1
  9082                           
  9083                           ;UART.c: 63: _this->head = UART_buff_modulo_inc(_this->head, 20);
  9084  09FE  087A               	movf	i1UART_buff_put@_this,w
  9085  09FF  3E14               	addlw	20
  9086  0A00  0086               	movwf	6
  9087  0A01  3001               	movlw	1	; select bank2/3
  9088  0A02  0087               	movwf	7
  9089  0A03  3F40               	moviw [0]fsr1
  9090  0A04  00F0               	movwf	i1UART_buff_modulo_inc@value
  9091  0A05  3F41               	moviw [1]fsr1
  9092  0A06  00F1               	movwf	i1UART_buff_modulo_inc@value+1
  9093  0A07  3014               	movlw	20
  9094  0A08  00F2               	movwf	i1UART_buff_modulo_inc@modulus
  9095  0A09  3000               	movlw	0
  9096  0A0A  00F3               	movwf	i1UART_buff_modulo_inc@modulus+1
  9097  0A0B  3195  25B4         	fcall	i1_UART_buff_modulo_inc
  9098  0A0D  087A               	movf	i1UART_buff_put@_this,w
  9099  0A0E  3E14               	addlw	20
  9100  0A0F  0086               	movwf	6
  9101  0A10  3001               	movlw	1	; select bank2/3
  9102  0A11  0087               	movwf	7
  9103  0A12  0870               	movf	?i1_UART_buff_modulo_inc,w
  9104  0A13  3FC0               	movwi [0]fsr1
  9105  0A14  0871               	movf	?i1_UART_buff_modulo_inc+1,w
  9106  0A15  3FC1               	movwi [1]fsr1
  9107                           
  9108                           ;UART.c: 64: ++_this->count;
  9109  0A16  087A               	movf	i1UART_buff_put@_this,w
  9110  0A17  3E18               	addlw	24
  9111  0A18  0086               	movwf	6
  9112  0A19  3001               	movlw	1	; select bank2/3
  9113  0A1A  0087               	movwf	7
  9114  0A1B  3001               	movlw	1
  9115  0A1C  0781               	addwf	1,f
  9116  0A1D  3141               	addfsr 1,1
  9117  0A1E  1803               	skipnc
  9118  0A1F  0A81               	incf	1,f
  9119                           
  9120                           ;UART.c: 65: } else {
  9121  0A20  0008               	return
  9122  0A21                     i1l2769:	
  9123                           
  9124                           ;UART.c: 66: _this->buf[_this->head] = c;
  9125  0A21  0876               	movf	i1UART_buff_put@c,w
  9126  0A22  00F7               	movwf	??i1_UART_buff_put
  9127  0A23  087A               	movf	i1UART_buff_put@_this,w
  9128  0A24  3E14               	addlw	20
  9129  0A25  0086               	movwf	6
  9130  0A26  3001               	movlw	1	; select bank2/3
  9131  0A27  0087               	movwf	7
  9132  0A28  0801               	movf	1,w
  9133  0A29  077A               	addwf	i1UART_buff_put@_this,w
  9134  0A2A  00F8               	movwf	??i1_UART_buff_put+1
  9135  0A2B  0878               	movf	??i1_UART_buff_put+1,w
  9136  0A2C  0086               	movwf	6
  9137  0A2D  3001               	movlw	1	; select bank2/3
  9138  0A2E  0087               	movwf	7
  9139  0A2F  0877               	movf	??i1_UART_buff_put,w
  9140  0A30  0081               	movwf	1
  9141                           
  9142                           ;UART.c: 67: _this->head = UART_buff_modulo_inc(_this->head, 20);
  9143  0A31  087A               	movf	i1UART_buff_put@_this,w
  9144  0A32  3E14               	addlw	20
  9145  0A33  0086               	movwf	6
  9146  0A34  3001               	movlw	1	; select bank2/3
  9147  0A35  0087               	movwf	7
  9148  0A36  3F40               	moviw [0]fsr1
  9149  0A37  00F0               	movwf	i1UART_buff_modulo_inc@value
  9150  0A38  3F41               	moviw [1]fsr1
  9151  0A39  00F1               	movwf	i1UART_buff_modulo_inc@value+1
  9152  0A3A  3014               	movlw	20
  9153  0A3B  00F2               	movwf	i1UART_buff_modulo_inc@modulus
  9154  0A3C  3000               	movlw	0
  9155  0A3D  00F3               	movwf	i1UART_buff_modulo_inc@modulus+1
  9156  0A3E  3195  25B4  3189   	fcall	i1_UART_buff_modulo_inc
  9157  0A41  087A               	movf	i1UART_buff_put@_this,w
  9158  0A42  3E14               	addlw	20
  9159  0A43  0086               	movwf	6
  9160  0A44  3001               	movlw	1	; select bank2/3
  9161  0A45  0087               	movwf	7
  9162  0A46  0870               	movf	?i1_UART_buff_modulo_inc,w
  9163  0A47  3FC0               	movwi [0]fsr1
  9164  0A48  0871               	movf	?i1_UART_buff_modulo_inc+1,w
  9165  0A49  3FC1               	movwi [1]fsr1
  9166                           
  9167                           ;UART.c: 68: _this->tail = UART_buff_modulo_inc(_this->tail, 20);
  9168  0A4A  087A               	movf	i1UART_buff_put@_this,w
  9169  0A4B  3E16               	addlw	22
  9170  0A4C  0086               	movwf	6
  9171  0A4D  3001               	movlw	1	; select bank2/3
  9172  0A4E  0087               	movwf	7
  9173  0A4F  3F40               	moviw [0]fsr1
  9174  0A50  00F0               	movwf	i1UART_buff_modulo_inc@value
  9175  0A51  3F41               	moviw [1]fsr1
  9176  0A52  00F1               	movwf	i1UART_buff_modulo_inc@value+1
  9177  0A53  3014               	movlw	20
  9178  0A54  00F2               	movwf	i1UART_buff_modulo_inc@modulus
  9179  0A55  3000               	movlw	0
  9180  0A56  00F3               	movwf	i1UART_buff_modulo_inc@modulus+1
  9181  0A57  3195  25B4         	fcall	i1_UART_buff_modulo_inc
  9182  0A59  087A               	movf	i1UART_buff_put@_this,w
  9183  0A5A  3E16               	addlw	22
  9184  0A5B  0086               	movwf	6
  9185  0A5C  3001               	movlw	1	; select bank2/3
  9186  0A5D  0087               	movwf	7
  9187  0A5E  0870               	movf	?i1_UART_buff_modulo_inc,w
  9188  0A5F  3FC0               	movwi [0]fsr1
  9189  0A60  0871               	movf	?i1_UART_buff_modulo_inc+1,w
  9190  0A61  3FC1               	movwi [1]fsr1
  9191  0A62  0008               	return
  9192  0A63                     __end_ofi1_UART_buff_put:	
  9193                           
  9194                           	psect	text40
  9195  15B4                     __ptext40:	
  9196 ;; *************** function i1_UART_buff_modulo_inc *****************
  9197 ;; Defined at:
  9198 ;;		line 89 in file "UART.c"
  9199 ;; Parameters:    Size  Location     Type
  9200 ;;  value           2    0[COMMON] const unsigned int 
  9201 ;;  modulus         2    2[COMMON] const unsigned int 
  9202 ;; Auto vars:     Size  Location     Type
  9203 ;;  UART_buff_mo    2    4[COMMON] unsigned int 
  9204 ;; Return value:  Size  Location     Type
  9205 ;;                  2    0[COMMON] unsigned int 
  9206 ;; Registers used:
  9207 ;;		wreg, status,2, status,0
  9208 ;; Tracked objects:
  9209 ;;		On entry : 0/0
  9210 ;;		On exit  : 0/0
  9211 ;;		Unchanged: 0/0
  9212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9213 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9214 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9216 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9217 ;;Total ram usage:        6 bytes
  9218 ;; Hardware stack levels used:    1
  9219 ;; This function calls:
  9220 ;;		Nothing
  9221 ;; This function is called by:
  9222 ;;		i1_UART_buff_put
  9223 ;;		i1_UART_buff_get
  9224 ;; This function uses a non-reentrant model
  9225 ;;
  9226                           
  9227                           
  9228                           ;psect for function i1_UART_buff_modulo_inc
  9229  15B4                     i1_UART_buff_modulo_inc:	
  9230                           
  9231                           ;UART.c: 90: unsigned int my_value = value + 1;
  9232                           
  9233                           ;incstack = 0
  9234                           ; Regs used in i1_UART_buff_modulo_inc: [wreg+status,2+status,0]
  9235  15B4  0870               	movf	i1UART_buff_modulo_inc@value,w
  9236  15B5  3E01               	addlw	1
  9237  15B6  00F4               	movwf	i1UART_buff_modulo_inc@my_value
  9238  15B7  3000               	movlw	0
  9239  15B8  3D71               	addwfc	i1UART_buff_modulo_inc@value+1,w
  9240  15B9  00F5               	movwf	i1UART_buff_modulo_inc@my_value+1
  9241                           
  9242                           ;UART.c: 91: if (my_value >= modulus) {
  9243  15BA  0873               	movf	i1UART_buff_modulo_inc@modulus+1,w
  9244  15BB  0275               	subwf	i1UART_buff_modulo_inc@my_value+1,w
  9245  15BC  1D03               	skipz
  9246  15BD  2DC0               	goto	u286_25
  9247  15BE  0872               	movf	i1UART_buff_modulo_inc@modulus,w
  9248  15BF  0274               	subwf	i1UART_buff_modulo_inc@my_value,w
  9249  15C0                     u286_25:	
  9250  15C0  1C03               	skipc
  9251  15C1  2DC4               	goto	i1l2389
  9252                           
  9253                           ;UART.c: 92: my_value = 0;
  9254  15C2  01F4               	clrf	i1UART_buff_modulo_inc@my_value
  9255  15C3  01F5               	clrf	i1UART_buff_modulo_inc@my_value+1
  9256  15C4                     i1l2389:	
  9257                           
  9258                           ;UART.c: 93: }
  9259                           ;UART.c: 94: return (my_value);
  9260  15C4  0875               	movf	i1UART_buff_modulo_inc@my_value+1,w
  9261  15C5  00F1               	movwf	?i1_UART_buff_modulo_inc+1
  9262  15C6  0874               	movf	i1UART_buff_modulo_inc@my_value,w
  9263  15C7  00F0               	movwf	?i1_UART_buff_modulo_inc
  9264  15C8  0008               	return
  9265  15C9                     __end_ofi1_UART_buff_modulo_inc:	
  9266  007E                     btemp	set	126	;btemp
  9267  007E                     int$flags	set	126
  9268  007E                     wtemp	set	126
  9269  007E                     wtemp0	set	126
  9270  0080                     wtemp1	set	128
  9271  0082                     wtemp2	set	130
  9272  0084                     wtemp3	set	132
  9273  0086                     wtemp4	set	134
  9274  0088                     wtemp5	set	136
  9275  007F                     wtemp6	set	127
  9276  007E                     ttemp	set	126
  9277  007E                     ttemp0	set	126
  9278  0081                     ttemp1	set	129
  9279  0084                     ttemp2	set	132
  9280  0087                     ttemp3	set	135
  9281  007F                     ttemp4	set	127
  9282  007E                     ltemp	set	126
  9283  007E                     ltemp0	set	126
  9284  0082                     ltemp1	set	130
  9285  0086                     ltemp2	set	134
  9286  0080                     ltemp3	set	128


Data Sizes:
    Strings     119
    Constant    118
    Data        1
    BSS         86
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     77      80
    BANK1            80     40      72
    BANK2            80      0      52
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 

    memset@p	PTR unsigned char  size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 36
		 -> STR_7(CODE[22]), STR_6(CODE[19]), STR_5(CODE[19]), STR_4(CODE[22]), 
		 -> STR_3(CODE[36]), STR_2(CODE[14]), STR_1(CODE[6]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK1[2]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 

    sp__memset	PTR void  size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->i1_UART_buff_get
    i1_UART_buff_get->i1_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i1_UART_buff_put
    i1_UART_buff_put->i1_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_Send_put
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _UART_buff_get->_UART_buff_modulo_inc
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_printf

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   39564
                              _Delay
                             _LEDOff
                              _Start
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              53    35     18   38895
                                             71 BANK0      6     6      0
                                              0 BANK1     40    22     18
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               12     9      3    8795
                                             38 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    1751
                                             13 BANK0      1     1      0
                           _Send_put
 ---------------------------------------------------------------------------------
 (3) _Send_put                                             2     2      0    1729
                                             11 BANK0      2     2      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (4) _UART_buff_put                                        5     4      1     956
                                              6 BANK0      5     4      1
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (4) _UART_buff_get                                        5     5      0     751
                                              6 BANK0      5     5      0
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _UART_buff_modulo_inc                                 6     2      4     514
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _fround                                              17    14      3    8597
                                             38 BANK0     14    11      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2106
                                             16 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    3590
                                             22 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1250
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1360
                                              7 BANK0      9     5      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         16    10      6     409
                                              0 BANK0     16    10      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          20    14      6     552
                                              0 BANK0     20    14      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             6     2      4    1796
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     583
                                             14 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     480
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     411
                                             47 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    2899
                                             65 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    2726
                                             52 BANK0     13     7      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1674
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3      98
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     666
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (1) _Start                                                0     0      0     305
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     305
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       1     1      0     305
                                              7 BANK0      1     1      0
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               7     3      4     229
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LEDOff                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Delay                                                5     3      2     364
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           1     1      0    1158
                                             13 COMMON     1     1      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR2_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 1     1      0     503
                                             11 COMMON     1     1      0
                     _UART_buff_size
                    i1_UART_buff_get
 ---------------------------------------------------------------------------------
 (8) i1_UART_buff_get                                      5     5      0     454
                                              6 COMMON     5     5      0
             i1_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _UART_buff_size                                       4     1      3      49
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  2     2      0     655
                                             11 COMMON     2     2      0
                    i1_UART_buff_put
 ---------------------------------------------------------------------------------
 (8) i1_UART_buff_put                                      5     4      1     632
                                              6 COMMON     5     4      1
             i1_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (9) i1_UART_buff_modulo_inc                               6     2      4     298
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay
   _LEDOff
   _Start
     _ADC_Initialize
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _INTERRUPT_Initialize
     _TMR2_Initialize
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _putch
       _Send_put
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     i1_UART_buff_put
       i1_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     _UART_buff_size
     i1_UART_buff_get
       i1_UART_buff_modulo_inc
   _TMR2_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4D      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     28      48       7       90.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      34       9       65.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      DA      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      DA      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Thu Aug 11 15:11:11 2016

           _eusart1TxBufferRemaining 00E6                           __CFG_CP$ON 0000  
                                 l62 07E6                          __CFG_CPD$ON 0000  
                       ___awdiv@sign 002D                  ___wmul@multiplicand 0032  
               i1UART_buff_get@_this 007A                         ___ftadd@exp1 0060  
                       ___ftadd@exp2 005F                          __CFG_LVP$ON 0000  
                       ___ftadd@sign 005E                                  l503 1663  
                                l419 05C6                                  l375 01D2  
                                l367 006F                                  l712 0C46  
                                l681 0920                                  l738 075E  
                                l748 07D7                                  l669 0DAE  
                                l688 0933                                  l689 093B  
                                l789 09BF                                  _PR2 001B  
            __end_ofi1_UART_buff_get 17AF              __end_ofi1_UART_buff_put 0A63  
                       ___awmod@sign 0026                      _TMR2_Initialize 1581  
                       __CFG_BORV$LO 0000                                  wreg 0009  
                               l2103 0AAE                                 l3001 055B  
                               l2131 08FD                                 l3011 0572  
                               l2141 0925                                 l2133 0907  
                               l2301 0C21                                 l2221 0895  
                               l2213 0884                                 l2205 0866  
                               l2117 17FC                                 l3005 056C  
                               l3013 0049                                 l2143 092D  
                               l2135 090C                                 l2127 08F6  
                               l2311 0C42                                 l2303 0C25  
                               l2207 0872                                 l2119 17FE  
                               l2217 088D                                 l2233 080D  
                               l2315 0C58                                 l2251 0832  
                               l2083 15F0                                 l2093 1644  
                               l2309 0C38                                 l2245 081A  
                               l2237 0814                                 l2501 0EC3  
                               l2319 0C6A                                 l2247 0826  
                               l2255 083B                                 l2329 0C85  
                               l2273 0BD6                                 l2361 0B63  
                               l2345 0B20                                 l2169 165D  
                               l2513 0F84                                 l2505 0EE0  
                               l2291 0BFF                                 l2195 085E  
                               l2259 0843                                 l2339 0B0A  
                               l2269 0BCF                                 l2605 0D6B  
                               l2189 0853                                 l2373 0B7F  
                               l2357 0B5B                                 l3093 1612  
                               l2279 0BE5                                 l2703 09D0  
                               l2623 0DA5                                 l2615 0D8A  
                               l2551 0799                                 l2543 077F  
                               l2471 0688                                 l2519 0FE3  
                               l2633 16FA                                 l2297 0C12  
                               l2713 08AB                                 l2625 0DB1  
                               l2617 0D98                                 l2561 07B3  
                               l2529 0746                                 l2369 0B77  
                               l2299 0C1C                                 l2723 08D9  
                               l2715 08B9                                 l2571 07DA  
                               l2563 07C1                                 l2637 1710  
                               l2661 167E                                 l2581 0CBB  
                               l2901 023E                                 l2671 096B  
                               l2727 08E4                                 l2743 174E  
                               l2479 0700                                 l2495 0E64  
                               l2737 1728                                 l2569 07CE  
                               l2905 0257                                 l2691 09A9  
                               l2739 1736                                 l2747 1759  
                               l2755 16BE                                 l2587 0CD8  
                               l2931 032F                                 l2915 029D  
                               l2843 0080                                 l2757 16CE  
                               l2597 0D23                                 l2941 0340  
                               l2925 02F8                                 l2837 006B  
                               l2943 03B2                                 l2919 02F2  
                               l2863 0100                                 l2839 0071  
                               l2847 0085                                 l2697 09B6  
                               l2689 099B                                 l2953 03D8  
                               l2849 00A9                                 l2699 09C2  
                               l2947 03BB                                 l2973 04E4  
                               l2893 0207                                 l2959 03F3  
                               l2887 01B6                                 l2879 0164  
                               l2977 04ED                                 l2995 0524  
                               l2979 04F2                                 l2989 051E  
                               STR_1 10E7                                 STR_2 10D9  
                               STR_3 1076                                 STR_4 10B0  
                               STR_5 10C6                                 STR_7 109A  
                               u2115 15EC                                 u2215 0928  
                               u2135 0A77                                 u3025 0780  
                               u2305 1669                                 u2145 17C3  
                               u3115 07CF                                 u3035 0790  
                               u3205 0D8B                                 u3045 079A  
                               u2255 0942                                 u2175 0902  
                               u2195 091B                                 u3315 0972  
                               u3235 0DA6                                 u3155 0D24  
                               u2355 0869                                 u2605 0C00  
                               u3165 0D4E                                 u3085 07B4  
                               u3415 08AE                                 u2375 0873  
                               u2455 081D                                 u2295 1664  
                               u3345 099C                                 u3505 1744  
                               u2385 087D                                 u4307 07F5  
                               u2635 0C13                                 u3435 08BA  
                               u3515 174F                                 u2395 0885  
                               u2475 082C                         printf@tmpval 00C0  
                               u3445 08CE                                 u2485 0833  
                               u2805 0B6A                                 u3375 09B7  
                               u3455 08DA                                 u3535 16C3  
                               u3615 0115                                 u2665 0C26  
                               u2835 0B80                                 u3485 172B  
                               u2845 0B86                                 u2765 0B2C  
                               u3725 0323                                 u2695 0C39  
                               u2775 0B3C                                 u3655 01DE  
                               u3665 0213                                 u2795 0B64  
                               u3835 054F                                 u3765 03C6  
                               u3775 03D4                                 u3695 023C  
                               i1l75 0023                                 u3885 07F0  
                               _TMR2 001A                         __CFG_WRT$ALL 0000  
                               _Mode 00E1                                 _main 160C  
                       ___ftpack@arg 0020                         ___ftpack@exp 0023  
                               _time 00DF                                 fsr0h 0005  
                               fsr1h 0007                                 fsr0l 0004  
                               indf0 0000                                 indf1 0001  
                               fsr1l 0006                                 btemp 007E  
                      __CFG_BOREN$ON 0000                                 ltemp 007E  
                               start 0028                                 ttemp 007E  
                               wtemp 007E                        __CFG_IESO$OFF 0000  
                      __CFG_MCLRE$ON 0000                         ___ftmul@cntr 0044  
                       ___ftmul@sign 0045                         ___fttol@exp1 005C  
                       ___fttol@lval 0058                                ?_main 0070  
                    __end_of___awdiv 089A                      __end_of___ftadd 0C9D  
                      __CFG_WDTE$OFF 0000                      __end_of___awmod 0848  
                    __end_of___ftneg 156D                      __end_of___lldiv 08ED  
                    __end_of___ftmul 0BA7                      ___awdiv@divisor 0027  
                    __end_of___llmod 1762                      __end_of___ftsub 1694  
                    __end_of___fttol 09D9                                _T2CON 001C  
                              i1l202 1638                 i1UART_buff_put@_this 007A  
                    ___awdiv@counter 002C                                _RCREG 0199  
                              _RCSTA 019D                                _SPBRG 019B  
                              _TXREG 019A                                _TXSTA 019E  
                              _Delay 07E3                        __CFG_PWRTE$ON 0000  
                       ___lltoft@exp 002D                 _EUSART1_Transmit_ISR 1623  
                     __CFG_FCMEN$OFF 0000                     __end_of_TMR2_ISR 1564  
                              _Start 1694             ??i1_UART_buff_modulo_inc 0074  
                    __end_of_dpowers 1028                                _count 00DB  
                              _scale 0DBA                        ___ftpack@sign 0024  
                              _putch 1550                                ltemp0 007E  
                              ltemp1 0082                                ltemp2 0086  
                              ltemp3 0080                                ttemp0 007E  
                              ttemp1 0081                                ttemp2 0084  
                              ttemp3 0087                                ttemp4 007F  
                              status 0003                                wtemp0 007E  
                              wtemp1 0080                                wtemp2 0082  
                              wtemp3 0084                                wtemp4 0086  
                              wtemp5 0088                                wtemp6 007F  
                    __initialization 002A           __end_of_EUSART1_Initialize 15DF  
                       __end_of_main 1623       i1UART_buff_modulo_inc@my_value 0074  
            __end_of_TMR2_Initialize 158B          ?_INTERRUPT_InterruptManager 0070  
                             ??_main 006D                        ___fttol@sign1 0057  
                   __end_of_Send_put 160C                       __CFG_PLLEN$OFF 0000  
                   ?i1_UART_buff_get 0070                 __size_of__tdiv_to_l_ 00B6  
                   ?i1_UART_buff_put 0076                               ?_Delay 0020  
              ?_EUSART1_Transmit_ISR 0070                               ?_Start 0070  
                   ___llmod@dividend 0032                               ?_scale 0046  
                             _ADRESL 009B                     ___awdiv@dividend 0029  
                             ?_putch 0070                     __end_of___ftpack 0952  
                   __end_of___lltoft 16E3                               i1l3103 0012  
                             i1l3027 15A8                               i1l3109 001B  
                             _LEDOff 154B                               i1l2389 15C4  
                             i1l2783 17AC                               i1l2769 0A21  
                             i1l2785 17AD                               Delay@x 0023  
        UART_buff_modulo_inc@modulus 0022                               _INTCON 000B  
                             u355_25 09EC                               u356_25 1775  
                             u286_25 15C0                               u390_25 1630  
                   __end_of__powers_ 1076                               ___ftge 16E3  
                      _output_buffer 013A                               ___wmul 165A  
                          ??___awdiv 002B                            ??___ftadd 005A  
                     __CFG_STVREN$ON 0000                            ??___awmod 0024  
                          ??___ftneg 0023                            ??___lldiv 0028  
                          ??___ftmul 003C                            ??___llmod 0036  
                          ??___ftsub 0067                            ??___fttol 0053  
                             _memset 163E                               _fround 05C7  
                   ___awdiv@quotient 002E                      ___awmod@divisor 0020  
                             _ticker 00DD                      ___awmod@counter 0025  
                             _printf 0043                ___ftmul@f3_as_product 0041  
                      Send_put@_data 002C         __end_of_UART_buff_modulo_inc 15F5  
    __size_ofi1_UART_buff_modulo_inc 0015                      _eusart1RxBuffer 00C8  
      __size_of_INTERRUPT_Initialize 000A                      _eusart1TxBuffer 00D0  
            __end_of__initialization 003F                           ___ftadd@f1 0054  
                         ___ftadd@f2 0057                           ___ftge@ff1 0020  
                         ___ftge@ff2 0023                           ___ftneg@f1 0020  
                      __end_of_Delay 0800                           ___ftmul@f1 0036  
                         ___ftmul@f2 0039                           ___ftsub@f1 0064  
                         ___ftsub@f2 0061                           ___fttol@f1 004F  
                     __pcstackCOMMON 0070                        __end_of_Start 16B9  
                       __pidataBANK0 0003                            ?_TMR2_ISR 0070  
                         ___lltoft@c 0028                        __end_of_scale 1000  
                      __end_of_putch 1556                     ?_TMR2_Initialize 0070  
                 UART_buff_get@_this 002A                __end_of_UART_buff_get 1800  
             ??_EUSART1_Transmit_ISR 007B                __end_of_UART_buff_put 0AF3  
                         __div_to_l_ 0C9D                              ??_Delay 0022  
        __end_of_EUSART1_Receive_ISR 15B4                              ??_Start 0028  
                    __div_to_l_@exp1 0033                      __div_to_l_@cntr 0032  
                            ??_scale 0049                      __div_to_l_@quot 002E  
                            ??_putch 002D                        _eusart1RxHead 00E4  
                      _eusart1TxHead 006E                        _eusart1RxTail 00E5  
                         __pbssBANK0 006D                           __pbssBANK1 00C8  
                         __pbssBANK2 0120                        _eusart1TxTail 00E7  
                            ?_LEDOff 0070              __size_of_UART_buff_init 000D  
            __size_of_UART_buff_size 000B                        __div_to_l_@f1 0020  
                      __div_to_l_@f2 0023                            ?_Send_put 0070  
                         __pmaintext 160C               i1_UART_buff_modulo_inc 15B4  
                            ?___ftge 0020                              ?___wmul 0030  
                         ??_TMR2_ISR 0070                           __pintentry 0004  
                            ?_memset 0020                              ?_fround 0046  
                          ?___ftpack 0020                              ?_printf 00A0  
                          ?___lltoft 0028              __size_of_ADC_Initialize 000A  
                 UART_buff_put@_this 002A         UART_buff_modulo_inc@my_value 0024  
                    __size_of_LEDOff 0005                              _Battery 00D8  
                  __end_of__npowers_ 104F                           ??_Send_put 002B  
                         _scale$1314 004B                              _Talking 006D  
                    __size_of___ftge 003C                              ___awdiv 0848  
                            ___ftadd 0BA7                 _UART_buff_modulo_inc 15DF  
                            ___awmod 0802                              ___ftneg 1564  
                            ___lldiv 089A                      __size_of___wmul 001C  
                            ___ftmul 0AF3                              ___llmod 171F  
                            ___ftsub 1676                              ___fttol 0952  
                         ??___ftpack 0025                      __size_of_memset 001C  
                    __size_of_fround 0166                           ??___lltoft 002C  
                            __ptext1 0043                              __ptext2 0DBA  
                            __ptext3 1550                              __ptext4 15F5  
                            __ptext5 0A63                              __ptext6 17AF  
                            __ptext7 15DF                              __ptext8 05C7  
                            __ptext9 165A                      __size_of_printf 0584  
                        ?__div_to_l_ 0020                              _dpowers 1000  
                          _T2CONbits 001C                     ___awmod@dividend 0022  
                 _EUSART1_Initialize 15C9                              clrloop0 1557  
               end_of_initialization 003F                            Delay@wait 0020  
                ?_EUSART1_Initialize 0070                              memset@c 0020  
                            memset@n 0022                              memset@p 0026  
                    ___lldiv@divisor 0020                     __CFG_CLKOUTEN$ON 0000  
                    ___lldiv@counter 002D                            _RCSTAbits 019D  
                            printf@c 00C7                              printf@f 00A0  
              ?_UART_buff_modulo_inc 0020                         __pstringtext 1000  
                     __tdiv_to_l_@f1 0020                       __tdiv_to_l_@f2 0023  
               ??_EUSART1_Initialize 0028                        ??__tdiv_to_l_ 0026  
                          _PORTAbits 000C                            _PORTCbits 000E  
                   __CFG_FOSC$INTOSC 0000                            _TRISAbits 008C  
                          _TRISCbits 008E             __size_ofi1_UART_buff_get 004D  
           __size_ofi1_UART_buff_put 008A                       __end_of_LEDOff 1550  
                     _UART_buff_init 1596                       _UART_buff_size 158B  
                __size_of__div_to_l_ 011D                          ___ftmul@exp 0040  
       __end_of_INTERRUPT_Initialize 1581                       __end_of___ftge 171F  
                     __end_of___wmul 1676                    __size_of_TMR2_ISR 0008  
                     _ADC_Initialize 156D                       __end_of_memset 165A  
                     __end_of_fround 072D                       __end_of_printf 05C7  
                start_initialization 002A                  __end_of__tdiv_to_l_ 07E3  
      i1UART_buff_modulo_inc@modulus 0072                          putch@txData 002D  
                           ??_LEDOff 0020               __end_of_UART_buff_init 15A3  
                     UART_buff_get@c 0029               __end_of_UART_buff_size 1596  
                     UART_buff_put@c 0026                      ___llmod@divisor 002E  
                    ___llmod@counter 0037              ?i1_UART_buff_modulo_inc 0070  
             ??_UART_buff_modulo_inc 0024                             ??___ftge 0026  
                  __size_of_Send_put 0017                             ??___wmul 0034  
             __end_of_ADC_Initialize 1577                          __pdataBANK0 006F  
                           ??_memset 0024                             ??_fround 0049  
                           ??_printf 0067                       _eusart1RxCount 00E3  
                         fround@prec 0053                    __size_of___ftpack 0065  
                  __size_of___lltoft 002A                            ___latbits 0002  
      __size_of_EUSART1_Transmit_ISR 001B                        __pcstackBANK0 0020  
                      __pcstackBANK1 00A0             __size_of_TMR2_Initialize 000A  
                UART_buff_init@_this 0027                      ?_UART_buff_init 0070  
                    ?_UART_buff_size 0070         __size_of_EUSART1_Receive_ISR 0011  
     __end_ofi1_UART_buff_modulo_inc 15C9               __size_of_UART_buff_get 0051  
             __size_of_UART_buff_put 0090                    ??i1_UART_buff_get 0076  
                  ??i1_UART_buff_put 0077                             ?___awdiv 0027  
                           ?___ftadd 0054                             ?___awmod 0020  
                           ?___ftneg 0020                             ?___lldiv 0020  
                           ?___ftmul 0036                             ?___llmod 002E  
                           ?___ftsub 0061                            __npowers_ 1028  
                           ?___fttol 004F                      ?_ADC_Initialize 0070  
       ??_INTERRUPT_InterruptManager 007D                          __tdiv_to_l_ 072D  
                       ??__div_to_l_ 0026                       __size_of_Delay 001D  
                     __size_of_Start 0025                       __size_of_scale 0246  
                     __size_of_putch 0006                 _INTERRUPT_Initialize 1577  
                     ___wmul@product 0034                  UART_buff_size@_this 0073  
                          clear_ram0 1556                             _PIE1bits 0091  
__size_of_INTERRUPT_InterruptManager 0024                             _PIR1bits 0011  
                 __end_of__div_to_l_ 0DBA                             _TMR2_ISR 155C  
                       _input_buffer 0120                           _ADCON0bits 009D  
                         _ADCON1bits 009E                    ___wmul@multiplier 0030  
                         printf@flag 00B5                           printf@fval 00C4  
                      _UART_buff_get 17AF                           printf@prec 00B8  
                      _UART_buff_put 0A63                ?_INTERRUPT_Initialize 0070  
                  ??_TMR2_Initialize 0020                             _Send_put 15F5  
                           _Shutdown 00E2                     __size_of___awdiv 0052  
                   __size_of___ftadd 00F6                     __size_of___awmod 0046  
                   __size_of___ftneg 0009                     __size_of___lldiv 0053  
                   __size_of___ftmul 00B4                     __size_of___llmod 0043  
                   __size_of___ftsub 001E                     __size_of___fttol 0087  
        __size_of_EUSART1_Initialize 0016                             ___ftpack 08ED  
                        _fround$1312 0050                          _fround$1313 004D  
                           ___lltoft 16B9                           _ANSELAbits 018C  
                         _ANSELCbits 018E                       ?_UART_buff_get 0070  
                     ?_UART_buff_put 0026                             __ptext10 0AF3  
                           __ptext11 0802                             __ptext20 0BA7  
                           __ptext12 0848                             __ptext21 08ED  
                           __ptext13 072D                             __ptext30 156D  
                           __ptext22 1564                             __ptext14 0C9D  
                           __ptext31 154B                             __ptext23 16E3  
                           __ptext15 16B9                             __ptext40 15B4  
                           __ptext32 07E3                             __ptext24 1694  
                           __ptext16 171F                             __ptext25 1581  
                           __ptext17 089A                             __ptext34 155C  
                           __ptext26 1577                             __ptext18 0952  
                           __ptext35 1623                             __ptext27 15C9  
                           __ptext19 1676                             __ptext36 1762  
                           __ptext28 1596                             __ptext37 158B  
                           __ptext29 163E                             __ptext38 15A3  
                           __ptext39 09D9                             __powers_ 104F  
            EUSART1_Receive_ISR@data 007C                        __size_of_main 0017  
                     _Transmit_stall 006F                             int$flags 007E  
                   i1UART_buff_get@c 0079   __end_of_INTERRUPT_InterruptManager 0028  
         _INTERRUPT_InterruptManager 0004                            printf@exp 00BE  
                          printf@val 00BA                     i1UART_buff_put@c 0076  
                _EUSART1_Receive_ISR 15A3                           _INTCONbits 000B  
          UART_buff_modulo_inc@value 0020                           _FVRCONbits 0117  
                   ??_UART_buff_init 0027                     ??_UART_buff_size 0073  
             ??_INTERRUPT_Initialize 0020                             memset@p1 0025  
                           scale@scl 004E                      i1_UART_buff_get 1762  
                    i1_UART_buff_put 09D9                             intlevel1 0000  
                   __tdiv_to_l_@exp1 002F                     __tdiv_to_l_@cntr 002E  
                   __tdiv_to_l_@quot 002A                 ?_EUSART1_Receive_ISR 0070  
                   ___lldiv@dividend 0024         __end_of_EUSART1_Transmit_ISR 163E  
                   ??_ADC_Initialize 0020                           _OSCCONbits 0099  
                           printf@ap 00B7        __size_of_UART_buff_modulo_inc 0016  
                    ??_UART_buff_get 0026                      ??_UART_buff_put 0027  
                       ?__tdiv_to_l_ 0020                          _printf$1315 00B2  
                   ___lldiv@quotient 0029                ??_EUSART1_Receive_ISR 007B  
        i1UART_buff_modulo_inc@value 0070  
