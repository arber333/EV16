

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Aug 05 01:56:22 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2
    52                           	psect	text38,local,class=CODE,merge=1,delta=2
    53                           	psect	text39,local,class=CODE,merge=1,delta=2
    54                           	psect	text40,local,class=CODE,merge=1,delta=2
    55                           	psect	text41,local,class=CODE,merge=1,delta=2
    56                           	psect	text42,local,class=CODE,merge=1,delta=2
    57                           	psect	text43,local,class=CODE,merge=1,delta=2
    58                           	psect	text44,local,class=CODE,merge=1,delta=2
    59                           	psect	text45,local,class=CODE,merge=1,delta=2
    60                           	psect	text46,local,class=CODE,merge=1,delta=2
    61                           	psect	text47,local,class=CODE,merge=1,delta=2
    62                           	psect	text48,local,class=CODE,merge=1,delta=2
    63                           	psect	text49,local,class=CODE,merge=1,delta=2
    64                           	psect	text50,local,class=CODE,merge=1,delta=2
    65                           	psect	text51,local,class=CODE,merge=1,delta=2
    66                           	psect	text52,local,class=CODE,merge=1,delta=2
    67                           	psect	intentry,global,class=CODE,delta=2
    68                           	psect	text54,local,class=CODE,merge=1,delta=2
    69                           	psect	text55,local,class=CODE,merge=1,delta=2
    70                           	psect	text56,local,class=CODE,merge=1,delta=2
    71                           	psect	text57,local,class=CODE,merge=1,delta=2
    72                           	psect	text58,local,class=CODE,merge=1,delta=2
    73                           	psect	text59,local,class=CODE,merge=1,delta=2
    74                           	psect	text60,local,class=CODE,merge=1,delta=2
    75                           	dabs	1,0x7E,2
    76  0000                     	;# 
    77  0001                     	;# 
    78  0002                     	;# 
    79  0003                     	;# 
    80  0004                     	;# 
    81  0005                     	;# 
    82  0006                     	;# 
    83  0007                     	;# 
    84  0008                     	;# 
    85  0009                     	;# 
    86  000A                     	;# 
    87  000B                     	;# 
    88  000C                     	;# 
    89  000D                     	;# 
    90  000E                     	;# 
    91  0011                     	;# 
    92  0012                     	;# 
    93  0013                     	;# 
    94  0014                     	;# 
    95  0015                     	;# 
    96  0016                     	;# 
    97  0016                     	;# 
    98  0017                     	;# 
    99  0018                     	;# 
   100  0019                     	;# 
   101  001A                     	;# 
   102  001B                     	;# 
   103  001C                     	;# 
   104  001E                     	;# 
   105  001F                     	;# 
   106  008C                     	;# 
   107  008D                     	;# 
   108  008E                     	;# 
   109  0091                     	;# 
   110  0092                     	;# 
   111  0093                     	;# 
   112  0094                     	;# 
   113  0095                     	;# 
   114  0096                     	;# 
   115  0097                     	;# 
   116  0098                     	;# 
   117  0099                     	;# 
   118  009A                     	;# 
   119  009B                     	;# 
   120  009B                     	;# 
   121  009C                     	;# 
   122  009D                     	;# 
   123  009E                     	;# 
   124  010C                     	;# 
   125  010D                     	;# 
   126  010E                     	;# 
   127  0111                     	;# 
   128  0112                     	;# 
   129  0113                     	;# 
   130  0114                     	;# 
   131  0115                     	;# 
   132  0116                     	;# 
   133  0117                     	;# 
   134  0118                     	;# 
   135  0119                     	;# 
   136  011A                     	;# 
   137  011B                     	;# 
   138  011D                     	;# 
   139  011E                     	;# 
   140  018C                     	;# 
   141  018D                     	;# 
   142  018E                     	;# 
   143  0191                     	;# 
   144  0191                     	;# 
   145  0192                     	;# 
   146  0193                     	;# 
   147  0193                     	;# 
   148  0193                     	;# 
   149  0194                     	;# 
   150  0195                     	;# 
   151  0196                     	;# 
   152  0199                     	;# 
   153  019A                     	;# 
   154  019B                     	;# 
   155  019B                     	;# 
   156  019C                     	;# 
   157  019D                     	;# 
   158  019E                     	;# 
   159  019F                     	;# 
   160  020C                     	;# 
   161  020D                     	;# 
   162  020E                     	;# 
   163  0211                     	;# 
   164  0211                     	;# 
   165  0212                     	;# 
   166  0212                     	;# 
   167  0213                     	;# 
   168  0213                     	;# 
   169  0214                     	;# 
   170  0214                     	;# 
   171  0215                     	;# 
   172  0215                     	;# 
   173  0215                     	;# 
   174  0216                     	;# 
   175  0216                     	;# 
   176  0217                     	;# 
   177  0217                     	;# 
   178  0219                     	;# 
   179  021A                     	;# 
   180  021B                     	;# 
   181  021C                     	;# 
   182  021D                     	;# 
   183  021E                     	;# 
   184  021F                     	;# 
   185  0291                     	;# 
   186  0291                     	;# 
   187  0292                     	;# 
   188  0293                     	;# 
   189  0294                     	;# 
   190  0295                     	;# 
   191  0295                     	;# 
   192  0296                     	;# 
   193  0298                     	;# 
   194  0298                     	;# 
   195  0299                     	;# 
   196  029A                     	;# 
   197  029B                     	;# 
   198  029C                     	;# 
   199  029D                     	;# 
   200  029E                     	;# 
   201  0311                     	;# 
   202  0311                     	;# 
   203  0312                     	;# 
   204  0313                     	;# 
   205  0318                     	;# 
   206  0318                     	;# 
   207  0319                     	;# 
   208  031A                     	;# 
   209  038C                     	;# 
   210  038D                     	;# 
   211  038E                     	;# 
   212  0391                     	;# 
   213  0392                     	;# 
   214  0393                     	;# 
   215  0394                     	;# 
   216  0395                     	;# 
   217  0396                     	;# 
   218  039A                     	;# 
   219  039C                     	;# 
   220  039D                     	;# 
   221  039E                     	;# 
   222  039F                     	;# 
   223  0415                     	;# 
   224  0416                     	;# 
   225  0417                     	;# 
   226  041C                     	;# 
   227  041D                     	;# 
   228  041E                     	;# 
   229  0FE4                     	;# 
   230  0FE5                     	;# 
   231  0FE6                     	;# 
   232  0FE7                     	;# 
   233  0FE8                     	;# 
   234  0FE9                     	;# 
   235  0FEA                     	;# 
   236  0FEB                     	;# 
   237  0FED                     	;# 
   238  0FEE                     	;# 
   239  0FEF                     	;# 
   240  0000                     	;# 
   241  0001                     	;# 
   242  0002                     	;# 
   243  0003                     	;# 
   244  0004                     	;# 
   245  0005                     	;# 
   246  0006                     	;# 
   247  0007                     	;# 
   248  0008                     	;# 
   249  0009                     	;# 
   250  000A                     	;# 
   251  000B                     	;# 
   252  000C                     	;# 
   253  000D                     	;# 
   254  000E                     	;# 
   255  0011                     	;# 
   256  0012                     	;# 
   257  0013                     	;# 
   258  0014                     	;# 
   259  0015                     	;# 
   260  0016                     	;# 
   261  0016                     	;# 
   262  0017                     	;# 
   263  0018                     	;# 
   264  0019                     	;# 
   265  001A                     	;# 
   266  001B                     	;# 
   267  001C                     	;# 
   268  001E                     	;# 
   269  001F                     	;# 
   270  008C                     	;# 
   271  008D                     	;# 
   272  008E                     	;# 
   273  0091                     	;# 
   274  0092                     	;# 
   275  0093                     	;# 
   276  0094                     	;# 
   277  0095                     	;# 
   278  0096                     	;# 
   279  0097                     	;# 
   280  0098                     	;# 
   281  0099                     	;# 
   282  009A                     	;# 
   283  009B                     	;# 
   284  009B                     	;# 
   285  009C                     	;# 
   286  009D                     	;# 
   287  009E                     	;# 
   288  010C                     	;# 
   289  010D                     	;# 
   290  010E                     	;# 
   291  0111                     	;# 
   292  0112                     	;# 
   293  0113                     	;# 
   294  0114                     	;# 
   295  0115                     	;# 
   296  0116                     	;# 
   297  0117                     	;# 
   298  0118                     	;# 
   299  0119                     	;# 
   300  011A                     	;# 
   301  011B                     	;# 
   302  011D                     	;# 
   303  011E                     	;# 
   304  018C                     	;# 
   305  018D                     	;# 
   306  018E                     	;# 
   307  0191                     	;# 
   308  0191                     	;# 
   309  0192                     	;# 
   310  0193                     	;# 
   311  0193                     	;# 
   312  0193                     	;# 
   313  0194                     	;# 
   314  0195                     	;# 
   315  0196                     	;# 
   316  0199                     	;# 
   317  019A                     	;# 
   318  019B                     	;# 
   319  019B                     	;# 
   320  019C                     	;# 
   321  019D                     	;# 
   322  019E                     	;# 
   323  019F                     	;# 
   324  020C                     	;# 
   325  020D                     	;# 
   326  020E                     	;# 
   327  0211                     	;# 
   328  0211                     	;# 
   329  0212                     	;# 
   330  0212                     	;# 
   331  0213                     	;# 
   332  0213                     	;# 
   333  0214                     	;# 
   334  0214                     	;# 
   335  0215                     	;# 
   336  0215                     	;# 
   337  0215                     	;# 
   338  0216                     	;# 
   339  0216                     	;# 
   340  0217                     	;# 
   341  0217                     	;# 
   342  0219                     	;# 
   343  021A                     	;# 
   344  021B                     	;# 
   345  021C                     	;# 
   346  021D                     	;# 
   347  021E                     	;# 
   348  021F                     	;# 
   349  0291                     	;# 
   350  0291                     	;# 
   351  0292                     	;# 
   352  0293                     	;# 
   353  0294                     	;# 
   354  0295                     	;# 
   355  0295                     	;# 
   356  0296                     	;# 
   357  0298                     	;# 
   358  0298                     	;# 
   359  0299                     	;# 
   360  029A                     	;# 
   361  029B                     	;# 
   362  029C                     	;# 
   363  029D                     	;# 
   364  029E                     	;# 
   365  0311                     	;# 
   366  0311                     	;# 
   367  0312                     	;# 
   368  0313                     	;# 
   369  0318                     	;# 
   370  0318                     	;# 
   371  0319                     	;# 
   372  031A                     	;# 
   373  038C                     	;# 
   374  038D                     	;# 
   375  038E                     	;# 
   376  0391                     	;# 
   377  0392                     	;# 
   378  0393                     	;# 
   379  0394                     	;# 
   380  0395                     	;# 
   381  0396                     	;# 
   382  039A                     	;# 
   383  039C                     	;# 
   384  039D                     	;# 
   385  039E                     	;# 
   386  039F                     	;# 
   387  0415                     	;# 
   388  0416                     	;# 
   389  0417                     	;# 
   390  041C                     	;# 
   391  041D                     	;# 
   392  041E                     	;# 
   393  0FE4                     	;# 
   394  0FE5                     	;# 
   395  0FE6                     	;# 
   396  0FE7                     	;# 
   397  0FE8                     	;# 
   398  0FE9                     	;# 
   399  0FEA                     	;# 
   400  0FEB                     	;# 
   401  0FED                     	;# 
   402  0FEE                     	;# 
   403  0FEF                     	;# 
   404  0000                     	;# 
   405  0001                     	;# 
   406  0002                     	;# 
   407  0003                     	;# 
   408  0004                     	;# 
   409  0005                     	;# 
   410  0006                     	;# 
   411  0007                     	;# 
   412  0008                     	;# 
   413  0009                     	;# 
   414  000A                     	;# 
   415  000B                     	;# 
   416  000C                     	;# 
   417  000D                     	;# 
   418  000E                     	;# 
   419  0011                     	;# 
   420  0012                     	;# 
   421  0013                     	;# 
   422  0014                     	;# 
   423  0015                     	;# 
   424  0016                     	;# 
   425  0016                     	;# 
   426  0017                     	;# 
   427  0018                     	;# 
   428  0019                     	;# 
   429  001A                     	;# 
   430  001B                     	;# 
   431  001C                     	;# 
   432  001E                     	;# 
   433  001F                     	;# 
   434  008C                     	;# 
   435  008D                     	;# 
   436  008E                     	;# 
   437  0091                     	;# 
   438  0092                     	;# 
   439  0093                     	;# 
   440  0094                     	;# 
   441  0095                     	;# 
   442  0096                     	;# 
   443  0097                     	;# 
   444  0098                     	;# 
   445  0099                     	;# 
   446  009A                     	;# 
   447  009B                     	;# 
   448  009B                     	;# 
   449  009C                     	;# 
   450  009D                     	;# 
   451  009E                     	;# 
   452  010C                     	;# 
   453  010D                     	;# 
   454  010E                     	;# 
   455  0111                     	;# 
   456  0112                     	;# 
   457  0113                     	;# 
   458  0114                     	;# 
   459  0115                     	;# 
   460  0116                     	;# 
   461  0117                     	;# 
   462  0118                     	;# 
   463  0119                     	;# 
   464  011A                     	;# 
   465  011B                     	;# 
   466  011D                     	;# 
   467  011E                     	;# 
   468  018C                     	;# 
   469  018D                     	;# 
   470  018E                     	;# 
   471  0191                     	;# 
   472  0191                     	;# 
   473  0192                     	;# 
   474  0193                     	;# 
   475  0193                     	;# 
   476  0193                     	;# 
   477  0194                     	;# 
   478  0195                     	;# 
   479  0196                     	;# 
   480  0199                     	;# 
   481  019A                     	;# 
   482  019B                     	;# 
   483  019B                     	;# 
   484  019C                     	;# 
   485  019D                     	;# 
   486  019E                     	;# 
   487  019F                     	;# 
   488  020C                     	;# 
   489  020D                     	;# 
   490  020E                     	;# 
   491  0211                     	;# 
   492  0211                     	;# 
   493  0212                     	;# 
   494  0212                     	;# 
   495  0213                     	;# 
   496  0213                     	;# 
   497  0214                     	;# 
   498  0214                     	;# 
   499  0215                     	;# 
   500  0215                     	;# 
   501  0215                     	;# 
   502  0216                     	;# 
   503  0216                     	;# 
   504  0217                     	;# 
   505  0217                     	;# 
   506  0219                     	;# 
   507  021A                     	;# 
   508  021B                     	;# 
   509  021C                     	;# 
   510  021D                     	;# 
   511  021E                     	;# 
   512  021F                     	;# 
   513  0291                     	;# 
   514  0291                     	;# 
   515  0292                     	;# 
   516  0293                     	;# 
   517  0294                     	;# 
   518  0295                     	;# 
   519  0295                     	;# 
   520  0296                     	;# 
   521  0298                     	;# 
   522  0298                     	;# 
   523  0299                     	;# 
   524  029A                     	;# 
   525  029B                     	;# 
   526  029C                     	;# 
   527  029D                     	;# 
   528  029E                     	;# 
   529  0311                     	;# 
   530  0311                     	;# 
   531  0312                     	;# 
   532  0313                     	;# 
   533  0318                     	;# 
   534  0318                     	;# 
   535  0319                     	;# 
   536  031A                     	;# 
   537  038C                     	;# 
   538  038D                     	;# 
   539  038E                     	;# 
   540  0391                     	;# 
   541  0392                     	;# 
   542  0393                     	;# 
   543  0394                     	;# 
   544  0395                     	;# 
   545  0396                     	;# 
   546  039A                     	;# 
   547  039C                     	;# 
   548  039D                     	;# 
   549  039E                     	;# 
   550  039F                     	;# 
   551  0415                     	;# 
   552  0416                     	;# 
   553  0417                     	;# 
   554  041C                     	;# 
   555  041D                     	;# 
   556  041E                     	;# 
   557  0FE4                     	;# 
   558  0FE5                     	;# 
   559  0FE6                     	;# 
   560  0FE7                     	;# 
   561  0FE8                     	;# 
   562  0FE9                     	;# 
   563  0FEA                     	;# 
   564  0FEB                     	;# 
   565  0FED                     	;# 
   566  0FEE                     	;# 
   567  0FEF                     	;# 
   568  0000                     	;# 
   569  0001                     	;# 
   570  0002                     	;# 
   571  0003                     	;# 
   572  0004                     	;# 
   573  0005                     	;# 
   574  0006                     	;# 
   575  0007                     	;# 
   576  0008                     	;# 
   577  0009                     	;# 
   578  000A                     	;# 
   579  000B                     	;# 
   580  000C                     	;# 
   581  000D                     	;# 
   582  000E                     	;# 
   583  0011                     	;# 
   584  0012                     	;# 
   585  0013                     	;# 
   586  0014                     	;# 
   587  0015                     	;# 
   588  0016                     	;# 
   589  0016                     	;# 
   590  0017                     	;# 
   591  0018                     	;# 
   592  0019                     	;# 
   593  001A                     	;# 
   594  001B                     	;# 
   595  001C                     	;# 
   596  001E                     	;# 
   597  001F                     	;# 
   598  008C                     	;# 
   599  008D                     	;# 
   600  008E                     	;# 
   601  0091                     	;# 
   602  0092                     	;# 
   603  0093                     	;# 
   604  0094                     	;# 
   605  0095                     	;# 
   606  0096                     	;# 
   607  0097                     	;# 
   608  0098                     	;# 
   609  0099                     	;# 
   610  009A                     	;# 
   611  009B                     	;# 
   612  009B                     	;# 
   613  009C                     	;# 
   614  009D                     	;# 
   615  009E                     	;# 
   616  010C                     	;# 
   617  010D                     	;# 
   618  010E                     	;# 
   619  0111                     	;# 
   620  0112                     	;# 
   621  0113                     	;# 
   622  0114                     	;# 
   623  0115                     	;# 
   624  0116                     	;# 
   625  0117                     	;# 
   626  0118                     	;# 
   627  0119                     	;# 
   628  011A                     	;# 
   629  011B                     	;# 
   630  011D                     	;# 
   631  011E                     	;# 
   632  018C                     	;# 
   633  018D                     	;# 
   634  018E                     	;# 
   635  0191                     	;# 
   636  0191                     	;# 
   637  0192                     	;# 
   638  0193                     	;# 
   639  0193                     	;# 
   640  0193                     	;# 
   641  0194                     	;# 
   642  0195                     	;# 
   643  0196                     	;# 
   644  0199                     	;# 
   645  019A                     	;# 
   646  019B                     	;# 
   647  019B                     	;# 
   648  019C                     	;# 
   649  019D                     	;# 
   650  019E                     	;# 
   651  019F                     	;# 
   652  020C                     	;# 
   653  020D                     	;# 
   654  020E                     	;# 
   655  0211                     	;# 
   656  0211                     	;# 
   657  0212                     	;# 
   658  0212                     	;# 
   659  0213                     	;# 
   660  0213                     	;# 
   661  0214                     	;# 
   662  0214                     	;# 
   663  0215                     	;# 
   664  0215                     	;# 
   665  0215                     	;# 
   666  0216                     	;# 
   667  0216                     	;# 
   668  0217                     	;# 
   669  0217                     	;# 
   670  0219                     	;# 
   671  021A                     	;# 
   672  021B                     	;# 
   673  021C                     	;# 
   674  021D                     	;# 
   675  021E                     	;# 
   676  021F                     	;# 
   677  0291                     	;# 
   678  0291                     	;# 
   679  0292                     	;# 
   680  0293                     	;# 
   681  0294                     	;# 
   682  0295                     	;# 
   683  0295                     	;# 
   684  0296                     	;# 
   685  0298                     	;# 
   686  0298                     	;# 
   687  0299                     	;# 
   688  029A                     	;# 
   689  029B                     	;# 
   690  029C                     	;# 
   691  029D                     	;# 
   692  029E                     	;# 
   693  0311                     	;# 
   694  0311                     	;# 
   695  0312                     	;# 
   696  0313                     	;# 
   697  0318                     	;# 
   698  0318                     	;# 
   699  0319                     	;# 
   700  031A                     	;# 
   701  038C                     	;# 
   702  038D                     	;# 
   703  038E                     	;# 
   704  0391                     	;# 
   705  0392                     	;# 
   706  0393                     	;# 
   707  0394                     	;# 
   708  0395                     	;# 
   709  0396                     	;# 
   710  039A                     	;# 
   711  039C                     	;# 
   712  039D                     	;# 
   713  039E                     	;# 
   714  039F                     	;# 
   715  0415                     	;# 
   716  0416                     	;# 
   717  0417                     	;# 
   718  041C                     	;# 
   719  041D                     	;# 
   720  041E                     	;# 
   721  0FE4                     	;# 
   722  0FE5                     	;# 
   723  0FE6                     	;# 
   724  0FE7                     	;# 
   725  0FE8                     	;# 
   726  0FE9                     	;# 
   727  0FEA                     	;# 
   728  0FEB                     	;# 
   729  0FED                     	;# 
   730  0FEE                     	;# 
   731  0FEF                     	;# 
   732  0000                     	;# 
   733  0001                     	;# 
   734  0002                     	;# 
   735  0003                     	;# 
   736  0004                     	;# 
   737  0005                     	;# 
   738  0006                     	;# 
   739  0007                     	;# 
   740  0008                     	;# 
   741  0009                     	;# 
   742  000A                     	;# 
   743  000B                     	;# 
   744  000C                     	;# 
   745  000D                     	;# 
   746  000E                     	;# 
   747  0011                     	;# 
   748  0012                     	;# 
   749  0013                     	;# 
   750  0014                     	;# 
   751  0015                     	;# 
   752  0016                     	;# 
   753  0016                     	;# 
   754  0017                     	;# 
   755  0018                     	;# 
   756  0019                     	;# 
   757  001A                     	;# 
   758  001B                     	;# 
   759  001C                     	;# 
   760  001E                     	;# 
   761  001F                     	;# 
   762  008C                     	;# 
   763  008D                     	;# 
   764  008E                     	;# 
   765  0091                     	;# 
   766  0092                     	;# 
   767  0093                     	;# 
   768  0094                     	;# 
   769  0095                     	;# 
   770  0096                     	;# 
   771  0097                     	;# 
   772  0098                     	;# 
   773  0099                     	;# 
   774  009A                     	;# 
   775  009B                     	;# 
   776  009B                     	;# 
   777  009C                     	;# 
   778  009D                     	;# 
   779  009E                     	;# 
   780  010C                     	;# 
   781  010D                     	;# 
   782  010E                     	;# 
   783  0111                     	;# 
   784  0112                     	;# 
   785  0113                     	;# 
   786  0114                     	;# 
   787  0115                     	;# 
   788  0116                     	;# 
   789  0117                     	;# 
   790  0118                     	;# 
   791  0119                     	;# 
   792  011A                     	;# 
   793  011B                     	;# 
   794  011D                     	;# 
   795  011E                     	;# 
   796  018C                     	;# 
   797  018D                     	;# 
   798  018E                     	;# 
   799  0191                     	;# 
   800  0191                     	;# 
   801  0192                     	;# 
   802  0193                     	;# 
   803  0193                     	;# 
   804  0193                     	;# 
   805  0194                     	;# 
   806  0195                     	;# 
   807  0196                     	;# 
   808  0199                     	;# 
   809  019A                     	;# 
   810  019B                     	;# 
   811  019B                     	;# 
   812  019C                     	;# 
   813  019D                     	;# 
   814  019E                     	;# 
   815  019F                     	;# 
   816  020C                     	;# 
   817  020D                     	;# 
   818  020E                     	;# 
   819  0211                     	;# 
   820  0211                     	;# 
   821  0212                     	;# 
   822  0212                     	;# 
   823  0213                     	;# 
   824  0213                     	;# 
   825  0214                     	;# 
   826  0214                     	;# 
   827  0215                     	;# 
   828  0215                     	;# 
   829  0215                     	;# 
   830  0216                     	;# 
   831  0216                     	;# 
   832  0217                     	;# 
   833  0217                     	;# 
   834  0219                     	;# 
   835  021A                     	;# 
   836  021B                     	;# 
   837  021C                     	;# 
   838  021D                     	;# 
   839  021E                     	;# 
   840  021F                     	;# 
   841  0291                     	;# 
   842  0291                     	;# 
   843  0292                     	;# 
   844  0293                     	;# 
   845  0294                     	;# 
   846  0295                     	;# 
   847  0295                     	;# 
   848  0296                     	;# 
   849  0298                     	;# 
   850  0298                     	;# 
   851  0299                     	;# 
   852  029A                     	;# 
   853  029B                     	;# 
   854  029C                     	;# 
   855  029D                     	;# 
   856  029E                     	;# 
   857  0311                     	;# 
   858  0311                     	;# 
   859  0312                     	;# 
   860  0313                     	;# 
   861  0318                     	;# 
   862  0318                     	;# 
   863  0319                     	;# 
   864  031A                     	;# 
   865  038C                     	;# 
   866  038D                     	;# 
   867  038E                     	;# 
   868  0391                     	;# 
   869  0392                     	;# 
   870  0393                     	;# 
   871  0394                     	;# 
   872  0395                     	;# 
   873  0396                     	;# 
   874  039A                     	;# 
   875  039C                     	;# 
   876  039D                     	;# 
   877  039E                     	;# 
   878  039F                     	;# 
   879  0415                     	;# 
   880  0416                     	;# 
   881  0417                     	;# 
   882  041C                     	;# 
   883  041D                     	;# 
   884  041E                     	;# 
   885  0FE4                     	;# 
   886  0FE5                     	;# 
   887  0FE6                     	;# 
   888  0FE7                     	;# 
   889  0FE8                     	;# 
   890  0FE9                     	;# 
   891  0FEA                     	;# 
   892  0FEB                     	;# 
   893  0FED                     	;# 
   894  0FEE                     	;# 
   895  0FEF                     	;# 
   896  0000                     	;# 
   897  0001                     	;# 
   898  0002                     	;# 
   899  0003                     	;# 
   900  0004                     	;# 
   901  0005                     	;# 
   902  0006                     	;# 
   903  0007                     	;# 
   904  0008                     	;# 
   905  0009                     	;# 
   906  000A                     	;# 
   907  000B                     	;# 
   908  000C                     	;# 
   909  000D                     	;# 
   910  000E                     	;# 
   911  0011                     	;# 
   912  0012                     	;# 
   913  0013                     	;# 
   914  0014                     	;# 
   915  0015                     	;# 
   916  0016                     	;# 
   917  0016                     	;# 
   918  0017                     	;# 
   919  0018                     	;# 
   920  0019                     	;# 
   921  001A                     	;# 
   922  001B                     	;# 
   923  001C                     	;# 
   924  001E                     	;# 
   925  001F                     	;# 
   926  008C                     	;# 
   927  008D                     	;# 
   928  008E                     	;# 
   929  0091                     	;# 
   930  0092                     	;# 
   931  0093                     	;# 
   932  0094                     	;# 
   933  0095                     	;# 
   934  0096                     	;# 
   935  0097                     	;# 
   936  0098                     	;# 
   937  0099                     	;# 
   938  009A                     	;# 
   939  009B                     	;# 
   940  009B                     	;# 
   941  009C                     	;# 
   942  009D                     	;# 
   943  009E                     	;# 
   944  010C                     	;# 
   945  010D                     	;# 
   946  010E                     	;# 
   947  0111                     	;# 
   948  0112                     	;# 
   949  0113                     	;# 
   950  0114                     	;# 
   951  0115                     	;# 
   952  0116                     	;# 
   953  0117                     	;# 
   954  0118                     	;# 
   955  0119                     	;# 
   956  011A                     	;# 
   957  011B                     	;# 
   958  011D                     	;# 
   959  011E                     	;# 
   960  018C                     	;# 
   961  018D                     	;# 
   962  018E                     	;# 
   963  0191                     	;# 
   964  0191                     	;# 
   965  0192                     	;# 
   966  0193                     	;# 
   967  0193                     	;# 
   968  0193                     	;# 
   969  0194                     	;# 
   970  0195                     	;# 
   971  0196                     	;# 
   972  0199                     	;# 
   973  019A                     	;# 
   974  019B                     	;# 
   975  019B                     	;# 
   976  019C                     	;# 
   977  019D                     	;# 
   978  019E                     	;# 
   979  019F                     	;# 
   980  020C                     	;# 
   981  020D                     	;# 
   982  020E                     	;# 
   983  0211                     	;# 
   984  0211                     	;# 
   985  0212                     	;# 
   986  0212                     	;# 
   987  0213                     	;# 
   988  0213                     	;# 
   989  0214                     	;# 
   990  0214                     	;# 
   991  0215                     	;# 
   992  0215                     	;# 
   993  0215                     	;# 
   994  0216                     	;# 
   995  0216                     	;# 
   996  0217                     	;# 
   997  0217                     	;# 
   998  0219                     	;# 
   999  021A                     	;# 
  1000  021B                     	;# 
  1001  021C                     	;# 
  1002  021D                     	;# 
  1003  021E                     	;# 
  1004  021F                     	;# 
  1005  0291                     	;# 
  1006  0291                     	;# 
  1007  0292                     	;# 
  1008  0293                     	;# 
  1009  0294                     	;# 
  1010  0295                     	;# 
  1011  0295                     	;# 
  1012  0296                     	;# 
  1013  0298                     	;# 
  1014  0298                     	;# 
  1015  0299                     	;# 
  1016  029A                     	;# 
  1017  029B                     	;# 
  1018  029C                     	;# 
  1019  029D                     	;# 
  1020  029E                     	;# 
  1021  0311                     	;# 
  1022  0311                     	;# 
  1023  0312                     	;# 
  1024  0313                     	;# 
  1025  0318                     	;# 
  1026  0318                     	;# 
  1027  0319                     	;# 
  1028  031A                     	;# 
  1029  038C                     	;# 
  1030  038D                     	;# 
  1031  038E                     	;# 
  1032  0391                     	;# 
  1033  0392                     	;# 
  1034  0393                     	;# 
  1035  0394                     	;# 
  1036  0395                     	;# 
  1037  0396                     	;# 
  1038  039A                     	;# 
  1039  039C                     	;# 
  1040  039D                     	;# 
  1041  039E                     	;# 
  1042  039F                     	;# 
  1043  0415                     	;# 
  1044  0416                     	;# 
  1045  0417                     	;# 
  1046  041C                     	;# 
  1047  041D                     	;# 
  1048  041E                     	;# 
  1049  0FE4                     	;# 
  1050  0FE5                     	;# 
  1051  0FE6                     	;# 
  1052  0FE7                     	;# 
  1053  0FE8                     	;# 
  1054  0FE9                     	;# 
  1055  0FEA                     	;# 
  1056  0FEB                     	;# 
  1057  0FED                     	;# 
  1058  0FEE                     	;# 
  1059  0FEF                     	;# 
  1060  0000                     	;# 
  1061  0001                     	;# 
  1062  0002                     	;# 
  1063  0003                     	;# 
  1064  0004                     	;# 
  1065  0005                     	;# 
  1066  0006                     	;# 
  1067  0007                     	;# 
  1068  0008                     	;# 
  1069  0009                     	;# 
  1070  000A                     	;# 
  1071  000B                     	;# 
  1072  000C                     	;# 
  1073  000D                     	;# 
  1074  000E                     	;# 
  1075  0011                     	;# 
  1076  0012                     	;# 
  1077  0013                     	;# 
  1078  0014                     	;# 
  1079  0015                     	;# 
  1080  0016                     	;# 
  1081  0016                     	;# 
  1082  0017                     	;# 
  1083  0018                     	;# 
  1084  0019                     	;# 
  1085  001A                     	;# 
  1086  001B                     	;# 
  1087  001C                     	;# 
  1088  001E                     	;# 
  1089  001F                     	;# 
  1090  008C                     	;# 
  1091  008D                     	;# 
  1092  008E                     	;# 
  1093  0091                     	;# 
  1094  0092                     	;# 
  1095  0093                     	;# 
  1096  0094                     	;# 
  1097  0095                     	;# 
  1098  0096                     	;# 
  1099  0097                     	;# 
  1100  0098                     	;# 
  1101  0099                     	;# 
  1102  009A                     	;# 
  1103  009B                     	;# 
  1104  009B                     	;# 
  1105  009C                     	;# 
  1106  009D                     	;# 
  1107  009E                     	;# 
  1108  010C                     	;# 
  1109  010D                     	;# 
  1110  010E                     	;# 
  1111  0111                     	;# 
  1112  0112                     	;# 
  1113  0113                     	;# 
  1114  0114                     	;# 
  1115  0115                     	;# 
  1116  0116                     	;# 
  1117  0117                     	;# 
  1118  0118                     	;# 
  1119  0119                     	;# 
  1120  011A                     	;# 
  1121  011B                     	;# 
  1122  011D                     	;# 
  1123  011E                     	;# 
  1124  018C                     	;# 
  1125  018D                     	;# 
  1126  018E                     	;# 
  1127  0191                     	;# 
  1128  0191                     	;# 
  1129  0192                     	;# 
  1130  0193                     	;# 
  1131  0193                     	;# 
  1132  0193                     	;# 
  1133  0194                     	;# 
  1134  0195                     	;# 
  1135  0196                     	;# 
  1136  0199                     	;# 
  1137  019A                     	;# 
  1138  019B                     	;# 
  1139  019B                     	;# 
  1140  019C                     	;# 
  1141  019D                     	;# 
  1142  019E                     	;# 
  1143  019F                     	;# 
  1144  020C                     	;# 
  1145  020D                     	;# 
  1146  020E                     	;# 
  1147  0211                     	;# 
  1148  0211                     	;# 
  1149  0212                     	;# 
  1150  0212                     	;# 
  1151  0213                     	;# 
  1152  0213                     	;# 
  1153  0214                     	;# 
  1154  0214                     	;# 
  1155  0215                     	;# 
  1156  0215                     	;# 
  1157  0215                     	;# 
  1158  0216                     	;# 
  1159  0216                     	;# 
  1160  0217                     	;# 
  1161  0217                     	;# 
  1162  0219                     	;# 
  1163  021A                     	;# 
  1164  021B                     	;# 
  1165  021C                     	;# 
  1166  021D                     	;# 
  1167  021E                     	;# 
  1168  021F                     	;# 
  1169  0291                     	;# 
  1170  0291                     	;# 
  1171  0292                     	;# 
  1172  0293                     	;# 
  1173  0294                     	;# 
  1174  0295                     	;# 
  1175  0295                     	;# 
  1176  0296                     	;# 
  1177  0298                     	;# 
  1178  0298                     	;# 
  1179  0299                     	;# 
  1180  029A                     	;# 
  1181  029B                     	;# 
  1182  029C                     	;# 
  1183  029D                     	;# 
  1184  029E                     	;# 
  1185  0311                     	;# 
  1186  0311                     	;# 
  1187  0312                     	;# 
  1188  0313                     	;# 
  1189  0318                     	;# 
  1190  0318                     	;# 
  1191  0319                     	;# 
  1192  031A                     	;# 
  1193  038C                     	;# 
  1194  038D                     	;# 
  1195  038E                     	;# 
  1196  0391                     	;# 
  1197  0392                     	;# 
  1198  0393                     	;# 
  1199  0394                     	;# 
  1200  0395                     	;# 
  1201  0396                     	;# 
  1202  039A                     	;# 
  1203  039C                     	;# 
  1204  039D                     	;# 
  1205  039E                     	;# 
  1206  039F                     	;# 
  1207  0415                     	;# 
  1208  0416                     	;# 
  1209  0417                     	;# 
  1210  041C                     	;# 
  1211  041D                     	;# 
  1212  041E                     	;# 
  1213  0FE4                     	;# 
  1214  0FE5                     	;# 
  1215  0FE6                     	;# 
  1216  0FE7                     	;# 
  1217  0FE8                     	;# 
  1218  0FE9                     	;# 
  1219  0FEA                     	;# 
  1220  0FEB                     	;# 
  1221  0FED                     	;# 
  1222  0FEE                     	;# 
  1223  0FEF                     	;# 
  1224                           
  1225                           	psect	idataBANK1
  1226  0003                     __pidataBANK1:	
  1227                           
  1228                           ;initializer for _Transmit_stall
  1229  0003  3401               	retlw	1
  1230                           
  1231                           	psect	stringtext
  1232  1000                     __pstringtext:	
  1233  1000                     _dpowers:	
  1234  1000  3401               	retlw	1
  1235  1001  3400               	retlw	0
  1236  1002  3400               	retlw	0
  1237  1003  3400               	retlw	0
  1238  1004  340A               	retlw	10
  1239  1005  3400               	retlw	0
  1240  1006  3400               	retlw	0
  1241  1007  3400               	retlw	0
  1242  1008  3464               	retlw	100
  1243  1009  3400               	retlw	0
  1244  100A  3400               	retlw	0
  1245  100B  3400               	retlw	0
  1246  100C  34E8               	retlw	232
  1247  100D  3403               	retlw	3
  1248  100E  3400               	retlw	0
  1249  100F  3400               	retlw	0
  1250  1010  3410               	retlw	16
  1251  1011  3427               	retlw	39
  1252  1012  3400               	retlw	0
  1253  1013  3400               	retlw	0
  1254  1014  34A0               	retlw	160
  1255  1015  3486               	retlw	134
  1256  1016  3401               	retlw	1
  1257  1017  3400               	retlw	0
  1258  1018  3440               	retlw	64
  1259  1019  3442               	retlw	66
  1260  101A  340F               	retlw	15
  1261  101B  3400               	retlw	0
  1262  101C  3480               	retlw	128
  1263  101D  3496               	retlw	150
  1264  101E  3498               	retlw	152
  1265  101F  3400               	retlw	0
  1266  1020  3400               	retlw	0
  1267  1021  34E1               	retlw	225
  1268  1022  34F5               	retlw	245
  1269  1023  3405               	retlw	5
  1270  1024  3400               	retlw	0
  1271  1025  34CA               	retlw	202
  1272  1026  349A               	retlw	154
  1273  1027  343B               	retlw	59
  1274  1028                     __end_of_dpowers:	
  1275  1028                     __npowers_:	
  1276  1028  3400               	retlw	0
  1277  1029  3480               	retlw	128
  1278  102A  343F               	retlw	63
  1279  102B  34CD               	retlw	205
  1280  102C  34CC               	retlw	204
  1281  102D  343D               	retlw	61
  1282  102E  34D7               	retlw	215
  1283  102F  3423               	retlw	35
  1284  1030  343C               	retlw	60
  1285  1031  3412               	retlw	18
  1286  1032  3483               	retlw	131
  1287  1033  343A               	retlw	58
  1288  1034  34B7               	retlw	183
  1289  1035  34D1               	retlw	209
  1290  1036  3438               	retlw	56
  1291  1037  34C6               	retlw	198
  1292  1038  3427               	retlw	39
  1293  1039  3437               	retlw	55
  1294  103A  3438               	retlw	56
  1295  103B  3486               	retlw	134
  1296  103C  3435               	retlw	53
  1297  103D  34C0               	retlw	192
  1298  103E  34D6               	retlw	214
  1299  103F  3433               	retlw	51
  1300  1040  34CC               	retlw	204
  1301  1041  342B               	retlw	43
  1302  1042  3432               	retlw	50
  1303  1043  3470               	retlw	112
  1304  1044  3489               	retlw	137
  1305  1045  3430               	retlw	48
  1306  1046  34E7               	retlw	231
  1307  1047  34DB               	retlw	219
  1308  1048  342E               	retlw	46
  1309  1049  34E5               	retlw	229
  1310  104A  343C               	retlw	60
  1311  104B  341E               	retlw	30
  1312  104C  3442               	retlw	66
  1313  104D  34A2               	retlw	162
  1314  104E  340D               	retlw	13
  1315  104F                     __end_of__npowers_:	
  1316  104F                     __powers_:	
  1317  104F  3400               	retlw	0
  1318  1050  3480               	retlw	128
  1319  1051  343F               	retlw	63
  1320  1052  3400               	retlw	0
  1321  1053  3420               	retlw	32
  1322  1054  3441               	retlw	65
  1323  1055  3400               	retlw	0
  1324  1056  34C8               	retlw	200
  1325  1057  3442               	retlw	66
  1326  1058  3400               	retlw	0
  1327  1059  347A               	retlw	122
  1328  105A  3444               	retlw	68
  1329  105B  3440               	retlw	64
  1330  105C  341C               	retlw	28
  1331  105D  3446               	retlw	70
  1332  105E  3450               	retlw	80
  1333  105F  34C3               	retlw	195
  1334  1060  3447               	retlw	71
  1335  1061  3424               	retlw	36
  1336  1062  3474               	retlw	116
  1337  1063  3449               	retlw	73
  1338  1064  3497               	retlw	151
  1339  1065  3418               	retlw	24
  1340  1066  344B               	retlw	75
  1341  1067  34BC               	retlw	188
  1342  1068  34BE               	retlw	190
  1343  1069  344C               	retlw	76
  1344  106A  346B               	retlw	107
  1345  106B  346E               	retlw	110
  1346  106C  344E               	retlw	78
  1347  106D  3403               	retlw	3
  1348  106E  3415               	retlw	21
  1349  106F  3450               	retlw	80
  1350  1070  3479               	retlw	121
  1351  1071  34AD               	retlw	173
  1352  1072  3460               	retlw	96
  1353  1073  34F3               	retlw	243
  1354  1074  3449               	retlw	73
  1355  1075  3471               	retlw	113
  1356  1076                     __end_of__powers_:	
  1357  000B                     _INTCON	set	11
  1358  000B                     _INTCONbits	set	11
  1359  0011                     _PIR1bits	set	17
  1360  000C                     _PORTAbits	set	12
  1361  000E                     _PORTCbits	set	14
  1362  001B                     _PR2	set	27
  1363  001C                     _T2CON	set	28
  1364  001C                     _T2CONbits	set	28
  1365  001A                     _TMR2	set	26
  1366  009D                     _ADCON0bits	set	157
  1367  009E                     _ADCON1bits	set	158
  1368  009B                     _ADRESL	set	155
  1369  0091                     _PIE1bits	set	145
  1370  008C                     _TRISAbits	set	140
  1371  008E                     _TRISCbits	set	142
  1372  0117                     _FVRCONbits	set	279
  1373  019B                     _SPBRG	set	411
  1374  018C                     _ANSELAbits	set	396
  1375  018E                     _ANSELCbits	set	398
  1376  0199                     _RCREG	set	409
  1377  019D                     _RCSTA	set	413
  1378  019D                     _RCSTAbits	set	413
  1379  019A                     _TXREG	set	410
  1380  019E                     _TXSTA	set	414
  1381  1076                     STR_2:	
  1382  1076  3441               	retlw	65	;'A'
  1383  1077  3454               	retlw	84	;'T'
  1384  1078  342B               	retlw	43	;'+'
  1385  1079  3444               	retlw	68	;'D'
  1386  107A  344D               	retlw	77	;'M'
  1387  107B  344F               	retlw	79	;'O'
  1388  107C  3453               	retlw	83	;'S'
  1389  107D  3445               	retlw	69	;'E'
  1390  107E  3454               	retlw	84	;'T'
  1391  107F  3447               	retlw	71	;'G'
  1392  1080  3452               	retlw	82	;'R'
  1393  1081  344F               	retlw	79	;'O'
  1394  1082  3455               	retlw	85	;'U'
  1395  1083  3450               	retlw	80	;'P'
  1396  1084  343D               	retlw	61	;'='
  1397  1085  3425               	retlw	37	;'%'
  1398  1086  3464               	retlw	100	;'d'
  1399  1087  342C               	retlw	44	;','
  1400  1088  3425               	retlw	37	;'%'
  1401  1089  3466               	retlw	102	;'f'
  1402  108A  342C               	retlw	44	;','
  1403  108B  3425               	retlw	37	;'%'
  1404  108C  3466               	retlw	102	;'f'
  1405  108D  342C               	retlw	44	;','
  1406  108E  3425               	retlw	37	;'%'
  1407  108F  3464               	retlw	100	;'d'
  1408  1090  342C               	retlw	44	;','
  1409  1091  3425               	retlw	37	;'%'
  1410  1092  3464               	retlw	100	;'d'
  1411  1093  342C               	retlw	44	;','
  1412  1094  3425               	retlw	37	;'%'
  1413  1095  3464               	retlw	100	;'d'
  1414  1096  342C               	retlw	44	;','
  1415  1097  3425               	retlw	37	;'%'
  1416  1098  3464               	retlw	100	;'d'
  1417  1099  3400               	retlw	0
  1418  109A                     STR_6:	
  1419  109A  3441               	retlw	65	;'A'
  1420  109B  3454               	retlw	84	;'T'
  1421  109C  342B               	retlw	43	;'+'
  1422  109D  3444               	retlw	68	;'D'
  1423  109E  344D               	retlw	77	;'M'
  1424  109F  344F               	retlw	79	;'O'
  1425  10A0  3453               	retlw	83	;'S'
  1426  10A1  3445               	retlw	69	;'E'
  1427  10A2  3454               	retlw	84	;'T'
  1428  10A3  344D               	retlw	77	;'M'
  1429  10A4  3449               	retlw	73	;'I'
  1430  10A5  3443               	retlw	67	;'C'
  1431  10A6  343D               	retlw	61	;'='
  1432  10A7  3425               	retlw	37	;'%'
  1433  10A8  3463               	retlw	99	;'c'
  1434  10A9  342C               	retlw	44	;','
  1435  10AA  3425               	retlw	37	;'%'
  1436  10AB  3463               	retlw	99	;'c'
  1437  10AC  342C               	retlw	44	;','
  1438  10AD  3425               	retlw	37	;'%'
  1439  10AE  3463               	retlw	99	;'c'
  1440  10AF  3400               	retlw	0
  1441  10B0                     STR_3:	
  1442  10B0  3441               	retlw	65	;'A'
  1443  10B1  3454               	retlw	84	;'T'
  1444  10B2  342B               	retlw	43	;'+'
  1445  10B3  3444               	retlw	68	;'D'
  1446  10B4  344D               	retlw	77	;'M'
  1447  10B5  344F               	retlw	79	;'O'
  1448  10B6  3441               	retlw	65	;'A'
  1449  10B7  3455               	retlw	85	;'U'
  1450  10B8  3454               	retlw	84	;'T'
  1451  10B9  344F               	retlw	79	;'O'
  1452  10BA  3450               	retlw	80	;'P'
  1453  10BB  344F               	retlw	79	;'O'
  1454  10BC  3457               	retlw	87	;'W'
  1455  10BD  3443               	retlw	67	;'C'
  1456  10BE  344F               	retlw	79	;'O'
  1457  10BF  344E               	retlw	78	;'N'
  1458  10C0  3454               	retlw	84	;'T'
  1459  10C1  3452               	retlw	82	;'R'
  1460  10C2  343D               	retlw	61	;'='
  1461  10C3  3425               	retlw	37	;'%'
  1462  10C4  3463               	retlw	99	;'c'
  1463  10C5  3400               	retlw	0
  1464  10C6                     STR_4:	
  1465  10C6  3441               	retlw	65	;'A'
  1466  10C7  3454               	retlw	84	;'T'
  1467  10C8  342B               	retlw	43	;'+'
  1468  10C9  3444               	retlw	68	;'D'
  1469  10CA  344D               	retlw	77	;'M'
  1470  10CB  344F               	retlw	79	;'O'
  1471  10CC  3453               	retlw	83	;'S'
  1472  10CD  3445               	retlw	69	;'E'
  1473  10CE  3454               	retlw	84	;'T'
  1474  10CF  3456               	retlw	86	;'V'
  1475  10D0  344F               	retlw	79	;'O'
  1476  10D1  344C               	retlw	76	;'L'
  1477  10D2  3455               	retlw	85	;'U'
  1478  10D3  344D               	retlw	77	;'M'
  1479  10D4  3445               	retlw	69	;'E'
  1480  10D5  343D               	retlw	61	;'='
  1481  10D6  3425               	retlw	37	;'%'
  1482  10D7  3463               	retlw	99	;'c'
  1483  10D8  3400               	retlw	0
  1484  10D9                     STR_1:	
  1485  10D9  3441               	retlw	65	;'A'
  1486  10DA  3454               	retlw	84	;'T'
  1487  10DB  342B               	retlw	43	;'+'
  1488  10DC  3444               	retlw	68	;'D'
  1489  10DD  344D               	retlw	77	;'M'
  1490  10DE  344F               	retlw	79	;'O'
  1491  10DF  3443               	retlw	67	;'C'
  1492  10E0  344F               	retlw	79	;'O'
  1493  10E1  344E               	retlw	78	;'N'
  1494  10E2  344E               	retlw	78	;'N'
  1495  10E3  3445               	retlw	69	;'E'
  1496  10E4  3443               	retlw	67	;'C'
  1497  10E5  3454               	retlw	84	;'T'
  1498  10E6  3400               	retlw	0
  1499  10C6                     
  1500                           	psect	cinit
  1501  002A                     start_initialization:	
  1502                           ; #config settings
  1503                           
  1504  002A                     __initialization:	
  1505                           
  1506                           ; Clear objects allocated to BANK1
  1507  002A  30CC               	movlw	low __pbssBANK1
  1508  002B  0084               	movwf	4
  1509  002C  3000               	movlw	high __pbssBANK1
  1510  002D  0085               	movwf	5
  1511  002E  3022               	movlw	34
  1512  002F  3192  2266  3180   	fcall	clear_ram0
  1513                           
  1514                           ; Clear objects allocated to BANK2
  1515  0032  3020               	movlw	low __pbssBANK2
  1516  0033  0084               	movwf	4
  1517  0034  3001               	movlw	high __pbssBANK2
  1518  0035  0085               	movwf	5
  1519  0036  3034               	movlw	52
  1520  0037  3192  2266  3180   	fcall	clear_ram0
  1521                           
  1522                           ; Initialize objects allocated to BANK1
  1523  003A  0021               	movlb	1	; select bank1
  1524  003B  3180  2003         	fcall	__pidataBANK1	;fetch initializer
  1525  003D  00EE               	movwf	__pdataBANK1& (0+127)
  1526  003E                     end_of_initialization:	
  1527                           ;End of C runtime variable initialization code
  1528                           
  1529  003E                     __end_of__initialization:	
  1530  003E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1531  003F  0020               	movlb	0
  1532  0040  3193  2B5D         	ljmp	_main	;jump to C main() function
  1533                           
  1534                           	psect	bssBANK1
  1535  00CC                     __pbssBANK1:	
  1536  00CC                     _eusart1RxBuffer:	
  1537  00CC                     	ds	8
  1538  00D4                     _eusart1TxBuffer:	
  1539  00D4                     	ds	8
  1540  00DC                     _Battery:	
  1541  00DC                     	ds	3
  1542  00DF                     _count:	
  1543  00DF                     	ds	2
  1544  00E1                     _ticker:	
  1545  00E1                     	ds	2
  1546  00E3                     _time:	
  1547  00E3                     	ds	2
  1548  00E5                     _Mode:	
  1549  00E5                     	ds	1
  1550  00E6                     _Shutdown:	
  1551  00E6                     	ds	1
  1552  00E7                     _Talking:	
  1553  00E7                     	ds	1
  1554  00E8                     _eusart1RxCount:	
  1555  00E8                     	ds	1
  1556  00E9                     _eusart1RxHead:	
  1557  00E9                     	ds	1
  1558  00EA                     _eusart1RxTail:	
  1559  00EA                     	ds	1
  1560  00EB                     _eusart1TxBufferRemaining:	
  1561  00EB                     	ds	1
  1562  00EC                     _eusart1TxHead:	
  1563  00EC                     	ds	1
  1564  00ED                     _eusart1TxTail:	
  1565  00ED                     	ds	1
  1566                           
  1567                           	psect	dataBANK1
  1568  00EE                     __pdataBANK1:	
  1569  00EE                     _Transmit_stall:	
  1570  00EE                     	ds	1
  1571                           
  1572                           	psect	bssBANK2
  1573  0120                     __pbssBANK2:	
  1574  0120                     _input_buffer:	
  1575  0120                     	ds	26
  1576  013A                     _output_buffer:	
  1577  013A                     	ds	26
  1578                           
  1579                           	psect	clrtext
  1580  1266                     clear_ram0:	
  1581                           ;	Called with FSR0 containing the base address, and
  1582                           ;	WREG with the size to clear
  1583                           
  1584  1266  0064               	clrwdt	;clear the watchdog before getting into this loop
  1585  1267                     clrloop0:	
  1586  1267  0180               	clrf	0	;clear RAM location pointed to by FSR
  1587  1268  3101               	addfsr 0,1
  1588  1269  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1589  126A  2A67               	goto	clrloop0	;have we reached the end yet?
  1590  126B  3400               	retlw	0	;all done for this memory range, return
  1591                           
  1592                           	psect	cstackBANK1
  1593  00A0                     __pcstackBANK1:	
  1594  00A0                     ?_printf:	
  1595  00A0                     printf@f:	
  1596                           ; 2 bytes @ 0x0
  1597                           
  1598                           
  1599                           ; 2 bytes @ 0x0
  1600  00A0                     	ds	18
  1601  00B2                     _printf$1277:	
  1602                           
  1603                           ; 3 bytes @ 0x12
  1604  00B2                     	ds	3
  1605  00B5                     printf@flag:	
  1606                           
  1607                           ; 2 bytes @ 0x15
  1608  00B5                     	ds	2
  1609  00B7                     printf@ap:	
  1610                           
  1611                           ; 1 bytes @ 0x17
  1612  00B7                     	ds	1
  1613  00B8                     printf@prec:	
  1614                           
  1615                           ; 2 bytes @ 0x18
  1616  00B8                     	ds	2
  1617  00BA                     printf@val:	
  1618                           
  1619                           ; 4 bytes @ 0x1A
  1620  00BA                     	ds	4
  1621  00BE                     printf@exp:	
  1622                           
  1623                           ; 2 bytes @ 0x1E
  1624  00BE                     	ds	2
  1625  00C0                     printf@tmpval:	
  1626                           
  1627                           ; 4 bytes @ 0x20
  1628  00C0                     	ds	4
  1629  00C4                     printf@fval:	
  1630                           
  1631                           ; 3 bytes @ 0x24
  1632  00C4                     	ds	3
  1633  00C7                     printf@c:	
  1634                           
  1635                           ; 1 bytes @ 0x27
  1636  00C7                     	ds	1
  1637  00C8                     ??_SetMIC:	
  1638                           
  1639                           ; 1 bytes @ 0x28
  1640  00C8                     	ds	4
  1641                           
  1642                           	psect	cstackCOMMON
  1643  0070                     __pcstackCOMMON:	
  1644  0070                     ?_Start:	
  1645  0070                     ?_RadioBegin:	
  1646                           ; 1 bytes @ 0x0
  1647                           
  1648  0070                     ?_TMR2_StartTimer:	
  1649                           ; 1 bytes @ 0x0
  1650                           
  1651  0070                     ?_LEDOff:	
  1652                           ; 1 bytes @ 0x0
  1653                           
  1654  0070                     ?_RadioOperation:	
  1655                           ; 1 bytes @ 0x0
  1656                           
  1657  0070                     ?_ADC_Initialize:	
  1658                           ; 1 bytes @ 0x0
  1659                           
  1660  0070                     ?_EUSART1_Initialize:	
  1661                           ; 1 bytes @ 0x0
  1662                           
  1663  0070                     ?_INTERRUPT_Initialize:	
  1664                           ; 1 bytes @ 0x0
  1665                           
  1666  0070                     ?_TMR2_Initialize:	
  1667                           ; 1 bytes @ 0x0
  1668                           
  1669  0070                     ?_TMR2_ISR:	
  1670                           ; 1 bytes @ 0x0
  1671                           
  1672  0070                     ??_TMR2_ISR:	
  1673                           ; 1 bytes @ 0x0
  1674                           
  1675  0070                     ?_EUSART1_Receive_ISR:	
  1676                           ; 1 bytes @ 0x0
  1677                           
  1678  0070                     ?_EUSART1_Transmit_ISR:	
  1679                           ; 1 bytes @ 0x0
  1680                           
  1681  0070                     ?_UART_buff_init:	
  1682                           ; 1 bytes @ 0x0
  1683                           
  1684  0070                     ?_SetCommandMode:	
  1685                           ; 1 bytes @ 0x0
  1686                           
  1687  0070                     ?_SetFrequency:	
  1688                           ; 1 bytes @ 0x0
  1689                           
  1690  0070                     ?_SetPowerSave:	
  1691                           ; 1 bytes @ 0x0
  1692                           
  1693  0070                     ?_SetVolume:	
  1694                           ; 1 bytes @ 0x0
  1695                           
  1696  0070                     ?_SetADCChannel:	
  1697                           ; 1 bytes @ 0x0
  1698                           
  1699  0070                     ?_INTERRUPT_InterruptManager:	
  1700                           ; 1 bytes @ 0x0
  1701                           
  1702  0070                     ?_ReadCharger:	
  1703                           ; 1 bytes @ 0x0
  1704                           
  1705  0070                     ?_TMR2_StopTimer:	
  1706                           ; 1 bytes @ 0x0
  1707                           
  1708  0070                     ?_ClearTicker:	
  1709                           ; 1 bytes @ 0x0
  1710                           
  1711  0070                     ?_UART_buff_get:	
  1712                           ; 1 bytes @ 0x0
  1713                           
  1714  0070                     ?_Send_put:	
  1715                           ; 1 bytes @ 0x0
  1716                           
  1717  0070                     ?_putch:	
  1718                           ; 1 bytes @ 0x0
  1719                           
  1720  0070                     ?_SR_FRSTalk:	
  1721                           ; 1 bytes @ 0x0
  1722                           
  1723  0070                     ?_SR_FRSPowerDown:	
  1724                           ; 1 bytes @ 0x0
  1725                           
  1726  0070                     ?_SR_FRSStart:	
  1727                           ; 1 bytes @ 0x0
  1728                           
  1729  0070                     ?i1_UART_buff_get:	
  1730                           ; 1 bytes @ 0x0
  1731                           
  1732  0070                     ?_main:	
  1733                           ; 1 bytes @ 0x0
  1734                           
  1735  0070                     ?_GetTicker:	
  1736                           ; 2 bytes @ 0x0
  1737                           
  1738  0070                     ?_UART_buff_size:	
  1739                           ; 2 bytes @ 0x0
  1740                           
  1741  0070                     ?i1_UART_buff_modulo_inc:	
  1742                           ; 2 bytes @ 0x0
  1743                           
  1744  0070                     i1UART_buff_modulo_inc@value:	
  1745                           ; 2 bytes @ 0x0
  1746                           
  1747                           
  1748                           ; 2 bytes @ 0x0
  1749  0070                     	ds	2
  1750  0072                     i1UART_buff_modulo_inc@modulus:	
  1751                           
  1752                           ; 2 bytes @ 0x2
  1753  0072                     	ds	1
  1754  0073                     ??_UART_buff_size:	
  1755  0073                     UART_buff_size@_this:	
  1756                           ; 1 bytes @ 0x3
  1757                           
  1758                           
  1759                           ; 1 bytes @ 0x3
  1760  0073                     	ds	1
  1761  0074                     ??i1_UART_buff_modulo_inc:	
  1762  0074                     i1UART_buff_modulo_inc@my_value:	
  1763                           ; 1 bytes @ 0x4
  1764                           
  1765                           
  1766                           ; 2 bytes @ 0x4
  1767  0074                     	ds	2
  1768  0076                     ?i1_UART_buff_put:	
  1769  0076                     ??i1_UART_buff_get:	
  1770                           ; 1 bytes @ 0x6
  1771                           
  1772  0076                     i1UART_buff_put@c:	
  1773                           ; 1 bytes @ 0x6
  1774                           
  1775                           
  1776                           ; 1 bytes @ 0x6
  1777  0076                     	ds	1
  1778  0077                     ??i1_UART_buff_put:	
  1779                           
  1780                           ; 1 bytes @ 0x7
  1781  0077                     	ds	2
  1782  0079                     i1UART_buff_get@c:	
  1783                           
  1784                           ; 1 bytes @ 0x9
  1785  0079                     	ds	1
  1786  007A                     i1UART_buff_put@_this:	
  1787  007A                     i1UART_buff_get@_this:	
  1788                           ; 1 bytes @ 0xA
  1789                           
  1790                           
  1791                           ; 1 bytes @ 0xA
  1792  007A                     	ds	1
  1793  007B                     ??_EUSART1_Receive_ISR:	
  1794  007B                     ??_EUSART1_Transmit_ISR:	
  1795                           ; 1 bytes @ 0xB
  1796                           
  1797                           
  1798                           ; 1 bytes @ 0xB
  1799  007B                     	ds	1
  1800  007C                     EUSART1_Receive_ISR@data:	
  1801                           
  1802                           ; 1 bytes @ 0xC
  1803  007C                     	ds	1
  1804  007D                     ??_INTERRUPT_InterruptManager:	
  1805                           
  1806                           ; 1 bytes @ 0xD
  1807  007D                     	ds	1
  1808                           
  1809                           	psect	cstackBANK0
  1810  0020                     __pcstackBANK0:	
  1811  0020                     ?___ftge:	
  1812  0020                     ??_TMR2_StartTimer:	
  1813                           ; 1 bit 
  1814                           
  1815  0020                     ??_LEDOff:	
  1816                           ; 1 bytes @ 0x0
  1817                           
  1818  0020                     ?_Delay:	
  1819                           ; 1 bytes @ 0x0
  1820                           
  1821  0020                     ??_ADC_Initialize:	
  1822                           ; 1 bytes @ 0x0
  1823                           
  1824  0020                     ??_INTERRUPT_Initialize:	
  1825                           ; 1 bytes @ 0x0
  1826                           
  1827  0020                     ??_TMR2_Initialize:	
  1828                           ; 1 bytes @ 0x0
  1829                           
  1830  0020                     ?_memset:	
  1831                           ; 1 bytes @ 0x0
  1832                           
  1833  0020                     ??_SetADCChannel:	
  1834                           ; 1 bytes @ 0x0
  1835                           
  1836  0020                     ??_ReadCharger:	
  1837                           ; 1 bytes @ 0x0
  1838                           
  1839  0020                     ??_TMR2_StopTimer:	
  1840                           ; 1 bytes @ 0x0
  1841                           
  1842  0020                     ??_ClearTicker:	
  1843                           ; 1 bytes @ 0x0
  1844                           
  1845  0020                     ??_GetTicker:	
  1846                           ; 1 bytes @ 0x0
  1847                           
  1848  0020                     ??_SR_FRSTalk:	
  1849                           ; 1 bytes @ 0x0
  1850                           
  1851  0020                     ??_SR_FRSPowerDown:	
  1852                           ; 1 bytes @ 0x0
  1853                           
  1854  0020                     ?_UART_buff_modulo_inc:	
  1855                           ; 1 bytes @ 0x0
  1856                           
  1857  0020                     ?___awmod:	
  1858                           ; 2 bytes @ 0x0
  1859                           
  1860  0020                     ?___ftpack:	
  1861                           ; 2 bytes @ 0x0
  1862                           
  1863  0020                     ?___ftneg:	
  1864                           ; 3 bytes @ 0x0
  1865                           
  1866  0020                     ?__tdiv_to_l_:	
  1867                           ; 3 bytes @ 0x0
  1868                           
  1869  0020                     ?__div_to_l_:	
  1870                           ; 4 bytes @ 0x0
  1871                           
  1872  0020                     ?___lldiv:	
  1873                           ; 4 bytes @ 0x0
  1874                           
  1875  0020                     SetADCChannel@ch:	
  1876                           ; 4 bytes @ 0x0
  1877                           
  1878  0020                     Delay@wait:	
  1879                           ; 1 bytes @ 0x0
  1880                           
  1881  0020                     UART_buff_modulo_inc@value:	
  1882                           ; 2 bytes @ 0x0
  1883                           
  1884  0020                     ___awmod@divisor:	
  1885                           ; 2 bytes @ 0x0
  1886                           
  1887  0020                     memset@c:	
  1888                           ; 2 bytes @ 0x0
  1889                           
  1890  0020                     __div_to_l_@f1:	
  1891                           ; 2 bytes @ 0x0
  1892                           
  1893  0020                     ___ftpack@arg:	
  1894                           ; 3 bytes @ 0x0
  1895                           
  1896  0020                     __tdiv_to_l_@f1:	
  1897                           ; 3 bytes @ 0x0
  1898                           
  1899  0020                     ___ftge@ff1:	
  1900                           ; 3 bytes @ 0x0
  1901                           
  1902  0020                     ___ftneg@f1:	
  1903                           ; 3 bytes @ 0x0
  1904                           
  1905  0020                     ___lldiv@divisor:	
  1906                           ; 3 bytes @ 0x0
  1907                           
  1908                           
  1909                           ; 4 bytes @ 0x0
  1910  0020                     	ds	1
  1911  0021                     ?_ReadVoltage:	
  1912                           
  1913                           ; 2 bytes @ 0x1
  1914  0021                     	ds	1
  1915  0022                     ??_Delay:	
  1916  0022                     UART_buff_modulo_inc@modulus:	
  1917                           ; 1 bytes @ 0x2
  1918                           
  1919  0022                     ___awmod@dividend:	
  1920                           ; 2 bytes @ 0x2
  1921                           
  1922  0022                     memset@n:	
  1923                           ; 2 bytes @ 0x2
  1924                           
  1925                           
  1926                           ; 2 bytes @ 0x2
  1927  0022                     	ds	1
  1928  0023                     ??___ftneg:	
  1929  0023                     ___ftpack@exp:	
  1930                           ; 1 bytes @ 0x3
  1931                           
  1932  0023                     Delay@x:	
  1933                           ; 1 bytes @ 0x3
  1934                           
  1935  0023                     __div_to_l_@f2:	
  1936                           ; 2 bytes @ 0x3
  1937                           
  1938  0023                     __tdiv_to_l_@f2:	
  1939                           ; 3 bytes @ 0x3
  1940                           
  1941  0023                     ___ftge@ff2:	
  1942                           ; 3 bytes @ 0x3
  1943                           
  1944                           
  1945                           ; 3 bytes @ 0x3
  1946  0023                     	ds	1
  1947  0024                     ??_memset:	
  1948  0024                     ??_UART_buff_modulo_inc:	
  1949                           ; 1 bytes @ 0x4
  1950                           
  1951  0024                     ??_ReadVoltage:	
  1952                           ; 1 bytes @ 0x4
  1953                           
  1954  0024                     ??___awmod:	
  1955                           ; 1 bytes @ 0x4
  1956                           
  1957  0024                     ReadVoltage@ch:	
  1958                           ; 1 bytes @ 0x4
  1959                           
  1960  0024                     ___ftpack@sign:	
  1961                           ; 1 bytes @ 0x4
  1962                           
  1963  0024                     UART_buff_modulo_inc@my_value:	
  1964                           ; 1 bytes @ 0x4
  1965                           
  1966  0024                     ___lldiv@dividend:	
  1967                           ; 2 bytes @ 0x4
  1968                           
  1969                           
  1970                           ; 4 bytes @ 0x4
  1971  0024                     	ds	1
  1972  0025                     ??___ftpack:	
  1973  0025                     ___awmod@counter:	
  1974                           ; 1 bytes @ 0x5
  1975                           
  1976  0025                     memset@p1:	
  1977                           ; 1 bytes @ 0x5
  1978                           
  1979                           
  1980                           ; 1 bytes @ 0x5
  1981  0025                     	ds	1
  1982  0026                     ??__tdiv_to_l_:	
  1983  0026                     ??__div_to_l_:	
  1984                           ; 1 bytes @ 0x6
  1985                           
  1986  0026                     ?_UART_buff_put:	
  1987                           ; 1 bytes @ 0x6
  1988                           
  1989  0026                     ??_UART_buff_get:	
  1990                           ; 1 bytes @ 0x6
  1991                           
  1992  0026                     ??___ftge:	
  1993                           ; 1 bytes @ 0x6
  1994                           
  1995  0026                     UART_buff_put@c:	
  1996                           ; 1 bytes @ 0x6
  1997                           
  1998  0026                     ___awmod@sign:	
  1999                           ; 1 bytes @ 0x6
  2000                           
  2001  0026                     memset@p:	
  2002                           ; 1 bytes @ 0x6
  2003                           
  2004                           
  2005                           ; 1 bytes @ 0x6
  2006  0026                     	ds	1
  2007  0027                     ??_UART_buff_init:	
  2008  0027                     ??_UART_buff_put:	
  2009                           ; 1 bytes @ 0x7
  2010                           
  2011  0027                     ?___awdiv:	
  2012                           ; 1 bytes @ 0x7
  2013                           
  2014  0027                     UART_buff_init@_this:	
  2015                           ; 2 bytes @ 0x7
  2016                           
  2017  0027                     ___awdiv@divisor:	
  2018                           ; 1 bytes @ 0x7
  2019                           
  2020                           
  2021                           ; 2 bytes @ 0x7
  2022  0027                     	ds	1
  2023  0028                     ??_Start:	
  2024  0028                     ??_EUSART1_Initialize:	
  2025                           ; 1 bytes @ 0x8
  2026                           
  2027  0028                     ??___lldiv:	
  2028                           ; 1 bytes @ 0x8
  2029                           
  2030  0028                     ?___awtoft:	
  2031                           ; 1 bytes @ 0x8
  2032                           
  2033  0028                     ?___lltoft:	
  2034                           ; 3 bytes @ 0x8
  2035                           
  2036  0028                     ___awtoft@c:	
  2037                           ; 3 bytes @ 0x8
  2038                           
  2039  0028                     ___lltoft@c:	
  2040                           ; 2 bytes @ 0x8
  2041                           
  2042                           
  2043                           ; 4 bytes @ 0x8
  2044  0028                     	ds	1
  2045  0029                     UART_buff_get@c:	
  2046  0029                     ___awdiv@dividend:	
  2047                           ; 1 bytes @ 0x9
  2048                           
  2049  0029                     ___lldiv@quotient:	
  2050                           ; 2 bytes @ 0x9
  2051                           
  2052                           
  2053                           ; 4 bytes @ 0x9
  2054  0029                     	ds	1
  2055  002A                     UART_buff_put@_this:	
  2056  002A                     UART_buff_get@_this:	
  2057                           ; 1 bytes @ 0xA
  2058                           
  2059  002A                     __tdiv_to_l_@quot:	
  2060                           ; 1 bytes @ 0xA
  2061                           
  2062                           
  2063                           ; 4 bytes @ 0xA
  2064  002A                     	ds	1
  2065  002B                     ??_Send_put:	
  2066  002B                     ??___awdiv:	
  2067                           ; 1 bytes @ 0xB
  2068                           
  2069  002B                     ??___awtoft:	
  2070                           ; 1 bytes @ 0xB
  2071                           
  2072                           
  2073                           ; 1 bytes @ 0xB
  2074  002B                     	ds	1
  2075  002C                     ??___lltoft:	
  2076  002C                     Send_put@_data:	
  2077                           ; 1 bytes @ 0xC
  2078                           
  2079  002C                     ___awdiv@counter:	
  2080                           ; 1 bytes @ 0xC
  2081                           
  2082                           
  2083                           ; 1 bytes @ 0xC
  2084  002C                     	ds	1
  2085  002D                     ??_putch:	
  2086  002D                     putch@txData:	
  2087                           ; 1 bytes @ 0xD
  2088                           
  2089  002D                     ___awdiv@sign:	
  2090                           ; 1 bytes @ 0xD
  2091                           
  2092  002D                     ___awtoft@sign:	
  2093                           ; 1 bytes @ 0xD
  2094                           
  2095  002D                     ___lldiv@counter:	
  2096                           ; 1 bytes @ 0xD
  2097                           
  2098  002D                     ___lltoft@exp:	
  2099                           ; 1 bytes @ 0xD
  2100                           
  2101                           
  2102                           ; 1 bytes @ 0xD
  2103  002D                     	ds	1
  2104  002E                     ?___llmod:	
  2105  002E                     __tdiv_to_l_@cntr:	
  2106                           ; 4 bytes @ 0xE
  2107                           
  2108  002E                     ___awdiv@quotient:	
  2109                           ; 1 bytes @ 0xE
  2110                           
  2111  002E                     __div_to_l_@quot:	
  2112                           ; 2 bytes @ 0xE
  2113                           
  2114  002E                     ___llmod@divisor:	
  2115                           ; 4 bytes @ 0xE
  2116                           
  2117                           
  2118                           ; 4 bytes @ 0xE
  2119  002E                     	ds	1
  2120  002F                     __tdiv_to_l_@exp1:	
  2121                           
  2122                           ; 1 bytes @ 0xF
  2123  002F                     	ds	1
  2124  0030                     ?___wmul:	
  2125  0030                     ___wmul@multiplier:	
  2126                           ; 2 bytes @ 0x10
  2127                           
  2128                           
  2129                           ; 2 bytes @ 0x10
  2130  0030                     	ds	2
  2131  0032                     __div_to_l_@cntr:	
  2132  0032                     ___wmul@multiplicand:	
  2133                           ; 1 bytes @ 0x12
  2134                           
  2135  0032                     ___llmod@dividend:	
  2136                           ; 2 bytes @ 0x12
  2137                           
  2138                           
  2139                           ; 4 bytes @ 0x12
  2140  0032                     	ds	1
  2141  0033                     __div_to_l_@exp1:	
  2142                           
  2143                           ; 1 bytes @ 0x13
  2144  0033                     	ds	1
  2145  0034                     ??___wmul:	
  2146  0034                     ___wmul@product:	
  2147                           ; 1 bytes @ 0x14
  2148                           
  2149                           
  2150                           ; 2 bytes @ 0x14
  2151  0034                     	ds	2
  2152  0036                     ??___llmod:	
  2153  0036                     ?___ftmul:	
  2154                           ; 1 bytes @ 0x16
  2155                           
  2156  0036                     ___ftmul@f1:	
  2157                           ; 3 bytes @ 0x16
  2158                           
  2159                           
  2160                           ; 3 bytes @ 0x16
  2161  0036                     	ds	1
  2162  0037                     ___llmod@counter:	
  2163                           
  2164                           ; 1 bytes @ 0x17
  2165  0037                     	ds	2
  2166  0039                     ___ftmul@f2:	
  2167                           
  2168                           ; 3 bytes @ 0x19
  2169  0039                     	ds	3
  2170  003C                     ??___ftmul:	
  2171                           
  2172                           ; 1 bytes @ 0x1C
  2173  003C                     	ds	4
  2174  0040                     ___ftmul@exp:	
  2175                           
  2176                           ; 1 bytes @ 0x20
  2177  0040                     	ds	1
  2178  0041                     ___ftmul@f3_as_product:	
  2179                           
  2180                           ; 3 bytes @ 0x21
  2181  0041                     	ds	3
  2182  0044                     ___ftmul@cntr:	
  2183                           
  2184                           ; 1 bytes @ 0x24
  2185  0044                     	ds	1
  2186  0045                     ___ftmul@sign:	
  2187                           
  2188                           ; 1 bytes @ 0x25
  2189  0045                     	ds	1
  2190  0046                     ?_fround:	
  2191  0046                     ?_scale:	
  2192                           ; 3 bytes @ 0x26
  2193                           
  2194  0046                     ?___ftdiv:	
  2195                           ; 3 bytes @ 0x26
  2196                           
  2197  0046                     ___ftdiv@f2:	
  2198                           ; 3 bytes @ 0x26
  2199                           
  2200                           
  2201                           ; 3 bytes @ 0x26
  2202  0046                     	ds	3
  2203  0049                     ??_fround:	
  2204  0049                     ??_scale:	
  2205                           ; 1 bytes @ 0x29
  2206                           
  2207  0049                     ___ftdiv@f1:	
  2208                           ; 1 bytes @ 0x29
  2209                           
  2210                           
  2211                           ; 3 bytes @ 0x29
  2212  0049                     	ds	2
  2213  004B                     _scale$1276:	
  2214                           
  2215                           ; 3 bytes @ 0x2B
  2216  004B                     	ds	1
  2217  004C                     ??___ftdiv:	
  2218                           
  2219                           ; 1 bytes @ 0x2C
  2220  004C                     	ds	1
  2221  004D                     _fround$1275:	
  2222                           
  2223                           ; 3 bytes @ 0x2D
  2224  004D                     	ds	1
  2225  004E                     scale@scl:	
  2226                           
  2227                           ; 1 bytes @ 0x2E
  2228  004E                     	ds	1
  2229  004F                     ?___fttol:	
  2230  004F                     ___fttol@f1:	
  2231                           ; 4 bytes @ 0x2F
  2232                           
  2233                           
  2234                           ; 3 bytes @ 0x2F
  2235  004F                     	ds	1
  2236  0050                     ___ftdiv@cntr:	
  2237  0050                     _fround$1274:	
  2238                           ; 1 bytes @ 0x30
  2239                           
  2240                           
  2241                           ; 3 bytes @ 0x30
  2242  0050                     	ds	1
  2243  0051                     ___ftdiv@f3:	
  2244                           
  2245                           ; 3 bytes @ 0x31
  2246  0051                     	ds	2
  2247  0053                     ??___fttol:	
  2248  0053                     fround@prec:	
  2249                           ; 1 bytes @ 0x33
  2250                           
  2251                           
  2252                           ; 1 bytes @ 0x33
  2253  0053                     	ds	1
  2254  0054                     ?___ftadd:	
  2255  0054                     ___ftdiv@exp:	
  2256                           ; 3 bytes @ 0x34
  2257                           
  2258  0054                     ___ftadd@f1:	
  2259                           ; 1 bytes @ 0x34
  2260                           
  2261                           
  2262                           ; 3 bytes @ 0x34
  2263  0054                     	ds	1
  2264  0055                     ___ftdiv@sign:	
  2265                           
  2266                           ; 1 bytes @ 0x35
  2267  0055                     	ds	1
  2268  0056                     ??_RadioOperation:	
  2269                           
  2270                           ; 1 bytes @ 0x36
  2271  0056                     	ds	1
  2272  0057                     ___fttol@sign1:	
  2273  0057                     ___ftadd@f2:	
  2274                           ; 1 bytes @ 0x37
  2275                           
  2276                           
  2277                           ; 3 bytes @ 0x37
  2278  0057                     	ds	1
  2279  0058                     ___fttol@lval:	
  2280                           
  2281                           ; 4 bytes @ 0x38
  2282  0058                     	ds	2
  2283  005A                     ??___ftadd:	
  2284                           
  2285                           ; 1 bytes @ 0x3A
  2286  005A                     	ds	2
  2287  005C                     ___fttol@exp1:	
  2288                           
  2289                           ; 1 bytes @ 0x3C
  2290  005C                     	ds	2
  2291  005E                     ___ftadd@sign:	
  2292                           
  2293                           ; 1 bytes @ 0x3E
  2294  005E                     	ds	1
  2295  005F                     ___ftadd@exp2:	
  2296                           
  2297                           ; 1 bytes @ 0x3F
  2298  005F                     	ds	1
  2299  0060                     ___ftadd@exp1:	
  2300                           
  2301                           ; 1 bytes @ 0x40
  2302  0060                     	ds	1
  2303  0061                     ?___ftsub:	
  2304  0061                     ___ftsub@f2:	
  2305                           ; 3 bytes @ 0x41
  2306                           
  2307                           
  2308                           ; 3 bytes @ 0x41
  2309  0061                     	ds	3
  2310  0064                     ___ftsub@f1:	
  2311                           
  2312                           ; 3 bytes @ 0x44
  2313  0064                     	ds	3
  2314  0067                     ??_printf:	
  2315  0067                     ??___ftsub:	
  2316                           ; 1 bytes @ 0x47
  2317                           
  2318                           
  2319                           ; 1 bytes @ 0x47
  2320  0067                     	ds	6
  2321  006D                     ??_SetCommandMode:	
  2322  006D                     ??_SetFrequency:	
  2323                           ; 1 bytes @ 0x4D
  2324                           
  2325  006D                     ??_SetPowerSave:	
  2326                           ; 1 bytes @ 0x4D
  2327                           
  2328  006D                     ??_SetVolume:	
  2329                           ; 1 bytes @ 0x4D
  2330                           
  2331  006D                     ?_SetVOX:	
  2332                           ; 1 bytes @ 0x4D
  2333                           
  2334  006D                     ?_SetMIC:	
  2335                           ; 1 bytes @ 0x4D
  2336                           
  2337  006D                     SetMIC@scram:	
  2338                           ; 1 bytes @ 0x4D
  2339                           
  2340  006D                     SetVOX@volume:	
  2341                           ; 1 bytes @ 0x4D
  2342                           
  2343                           
  2344                           ; 2 bytes @ 0x4D
  2345  006D                     	ds	1
  2346  006E                     SetMIC@volume:	
  2347                           
  2348                           ; 1 bytes @ 0x4E
  2349  006E                     	ds	1
  2350  006F                     ??_SetVOX:	
  2351  006F                     SetVolume@volume:	
  2352                           ; 1 bytes @ 0x4F
  2353                           
  2354                           
  2355                           ; 1 bytes @ 0x4F
  2356  006F                     	ds	1
  2357  0070                     ??_RadioBegin:	
  2358  0070                     ??_main:	
  2359                           ; 1 bytes @ 0x50
  2360                           
  2361  0070                     ??_SR_FRSStart:	
  2362                           ; 1 bytes @ 0x50
  2363                           
  2364                           
  2365                           	psect	maintext
  2366  135D                     __pmaintext:	
  2367                           ; 1 bytes @ 0x50
  2368 ;;
  2369 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2370 ;;
  2371 ;; *************** function _main *****************
  2372 ;; Defined at:
  2373 ;;		line 14 in file "Main.c"
  2374 ;; Parameters:    Size  Location     Type
  2375 ;;		None
  2376 ;; Auto vars:     Size  Location     Type
  2377 ;;		None
  2378 ;; Return value:  Size  Location     Type
  2379 ;;                  2   14[None  ] int 
  2380 ;; Registers used:
  2381 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2382 ;; Tracked objects:
  2383 ;;		On entry : B1F/0
  2384 ;;		On exit  : 0/0
  2385 ;;		Unchanged: 0/0
  2386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2391 ;;Total ram usage:        0 bytes
  2392 ;; Hardware stack levels required when called:   12
  2393 ;; This function calls:
  2394 ;;		_Delay
  2395 ;;		_LEDOff
  2396 ;;		_RadioBegin
  2397 ;;		_RadioOperation
  2398 ;;		_Start
  2399 ;;		_TMR2_StartTimer
  2400 ;; This function is called by:
  2401 ;;		Startup code after reset
  2402 ;; This function uses a non-reentrant model
  2403 ;;
  2404                           
  2405                           
  2406                           ;psect for function _main
  2407  135D                     _main:	
  2408                           
  2409                           ;Main.c: 15: Start();
  2410                           
  2411                           ;incstack = 0
  2412                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2413  135D  3193  23C7  3193   	fcall	_Start
  2414                           
  2415                           ;Main.c: 16: RadioBegin();
  2416  1360  3192  224E  3193   	fcall	_RadioBegin
  2417                           
  2418                           ;Main.c: 17: TMR2_StartTimer();
  2419  1363  3192  2251  3193   	fcall	_TMR2_StartTimer
  2420                           
  2421                           ;Main.c: 18: LEDOff();
  2422  1366  3192  225B  3193   	fcall	_LEDOff
  2423  1369                     l3238:	
  2424                           ;Main.c: 19: while(1){
  2425                           
  2426                           
  2427                           ;Main.c: 20: RadioOperation();
  2428  1369  318B  23A0  3193   	fcall	_RadioOperation
  2429                           
  2430                           ;Main.c: 21: Delay(100);
  2431  136C  3064               	movlw	100
  2432  136D  0020               	movlb	0	; select bank0
  2433  136E  00A0               	movwf	Delay@wait
  2434  136F  3000               	movlw	0
  2435  1370  00A1               	movwf	Delay@wait+1
  2436  1371  3193  23E3  3193   	fcall	_Delay
  2437  1374  2B69               	goto	l3238
  2438  1375                     __end_of_main:	
  2439                           ;Main.c: 22: }
  2440                           ;Main.c: 23: return 0;
  2441                           ;	Return value of _main is never used
  2442                           
  2443                           
  2444                           	psect	text1
  2445  13C7                     __ptext1:	
  2446 ;; *************** function _Start *****************
  2447 ;; Defined at:
  2448 ;;		line 9 in file "Function.c"
  2449 ;; Parameters:    Size  Location     Type
  2450 ;;		None
  2451 ;; Auto vars:     Size  Location     Type
  2452 ;;		None
  2453 ;; Return value:  Size  Location     Type
  2454 ;;                  1    wreg      void 
  2455 ;; Registers used:
  2456 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2457 ;; Tracked objects:
  2458 ;;		On entry : 0/0
  2459 ;;		On exit  : 0/0
  2460 ;;		Unchanged: 0/0
  2461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2466 ;;Total ram usage:        0 bytes
  2467 ;; Hardware stack levels used:    1
  2468 ;; Hardware stack levels required when called:    7
  2469 ;; This function calls:
  2470 ;;		_ADC_Initialize
  2471 ;;		_EUSART1_Initialize
  2472 ;;		_INTERRUPT_Initialize
  2473 ;;		_TMR2_Initialize
  2474 ;; This function is called by:
  2475 ;;		_main
  2476 ;; This function uses a non-reentrant model
  2477 ;;
  2478                           
  2479                           
  2480                           ;psect for function _Start
  2481  13C7                     _Start:	
  2482                           
  2483                           ;Function.c: 13: TRISCbits.TRISC7 = 0;
  2484                           
  2485                           ;incstack = 0
  2486                           ; Regs used in _Start: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2487  13C7  0021               	movlb	1	; select bank1
  2488  13C8  138E               	bcf	14,7	;volatile
  2489                           
  2490                           ;Function.c: 14: TRISCbits.TRISC6 = 0;
  2491  13C9  130E               	bcf	14,6	;volatile
  2492                           
  2493                           ;Function.c: 15: TRISCbits.TRISC5 = 0;
  2494  13CA  128E               	bcf	14,5	;volatile
  2495                           
  2496                           ;Function.c: 16: TRISCbits.TRISC4 = 0;
  2497  13CB  120E               	bcf	14,4	;volatile
  2498                           
  2499                           ;Function.c: 17: TRISCbits.TRISC3 = 0;
  2500  13CC  118E               	bcf	14,3	;volatile
  2501                           
  2502                           ;Function.c: 18: TRISAbits.TRISA2 = 1;
  2503  13CD  150C               	bsf	12,2	;volatile
  2504                           
  2505                           ;Function.c: 19: TRISCbits.TRISC0 = 1;
  2506  13CE  140E               	bsf	14,0	;volatile
  2507                           
  2508                           ;Function.c: 20: TRISCbits.TRISC1 = 1;
  2509  13CF  148E               	bsf	14,1	;volatile
  2510                           
  2511                           ;Function.c: 24: ANSELCbits.ANSC0 = 0;
  2512  13D0  0023               	movlb	3	; select bank3
  2513  13D1  100E               	bcf	14,0	;volatile
  2514                           
  2515                           ;Function.c: 25: ANSELCbits.ANSC1 = 0;
  2516  13D2  108E               	bcf	14,1	;volatile
  2517                           
  2518                           ;Function.c: 26: ANSELAbits.ANSA2 = 0;
  2519  13D3  110C               	bcf	12,2	;volatile
  2520                           
  2521                           ;Function.c: 27: ANSELCbits.ANSC3 = 0;
  2522  13D4  118E               	bcf	14,3	;volatile
  2523                           
  2524                           ;Function.c: 28: ANSELCbits.ANSC6 = 0;
  2525  13D5  130E               	bcf	14,6	;volatile
  2526                           
  2527                           ;Function.c: 29: ANSELCbits.ANSC7 = 0;
  2528  13D6  138E               	bcf	14,7	;volatile
  2529                           
  2530                           ;Function.c: 33: ADC_Initialize();
  2531  13D7  3192  228E  3193   	fcall	_ADC_Initialize
  2532                           
  2533                           ;Function.c: 37: EUSART1_Initialize();
  2534  13DA  3193  2330  3193   	fcall	_EUSART1_Initialize
  2535                           
  2536                           ;Function.c: 41: INTERRUPT_Initialize();
  2537  13DD  3192  2298  3193   	fcall	_INTERRUPT_Initialize
  2538                           
  2539                           ;Function.c: 42: TMR2_Initialize();
  2540  13E0  3192  22A2         	fcall	_TMR2_Initialize
  2541  13E2  0008               	return
  2542  13E3                     __end_of_Start:	
  2543                           
  2544                           	psect	text2
  2545  12A2                     __ptext2:	
  2546 ;; *************** function _TMR2_Initialize *****************
  2547 ;; Defined at:
  2548 ;;		line 9 in file "Timer.c"
  2549 ;; Parameters:    Size  Location     Type
  2550 ;;		None
  2551 ;; Auto vars:     Size  Location     Type
  2552 ;;		None
  2553 ;; Return value:  Size  Location     Type
  2554 ;;                  1    wreg      void 
  2555 ;; Registers used:
  2556 ;;		wreg, status,2
  2557 ;; Tracked objects:
  2558 ;;		On entry : 0/0
  2559 ;;		On exit  : 0/0
  2560 ;;		Unchanged: 0/0
  2561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2565 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2566 ;;Total ram usage:        0 bytes
  2567 ;; Hardware stack levels used:    1
  2568 ;; Hardware stack levels required when called:    4
  2569 ;; This function calls:
  2570 ;;		Nothing
  2571 ;; This function is called by:
  2572 ;;		_Start
  2573 ;; This function uses a non-reentrant model
  2574 ;;
  2575                           
  2576                           
  2577                           ;psect for function _TMR2_Initialize
  2578  12A2                     _TMR2_Initialize:	
  2579                           
  2580                           ;Timer.c: 14: T2CON = 0x00;
  2581                           
  2582                           ;incstack = 0
  2583                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  2584  12A2  0020               	movlb	0	; select bank0
  2585  12A3  019C               	clrf	28	;volatile
  2586                           
  2587                           ;Timer.c: 15: T2CONbits.TMR2ON = 0;
  2588  12A4  111C               	bcf	28,2	;volatile
  2589                           
  2590                           ;Timer.c: 18: PR2 = 18;
  2591  12A5  3012               	movlw	18
  2592  12A6  009B               	movwf	27	;volatile
  2593                           
  2594                           ;Timer.c: 21: TMR2 = 0;
  2595  12A7  019A               	clrf	26	;volatile
  2596                           
  2597                           ;Timer.c: 24: PIR1bits.TMR2IF = 0;
  2598  12A8  1091               	bcf	17,1	;volatile
  2599                           
  2600                           ;Timer.c: 27: PIE1bits.TMR2IE = 1;
  2601  12A9  0021               	movlb	1	; select bank1
  2602  12AA  1491               	bsf	17,1	;volatile
  2603  12AB  0008               	return
  2604  12AC                     __end_of_TMR2_Initialize:	
  2605                           
  2606                           	psect	text3
  2607  1298                     __ptext3:	
  2608 ;; *************** function _INTERRUPT_Initialize *****************
  2609 ;; Defined at:
  2610 ;;		line 53 in file "Function.c"
  2611 ;; Parameters:    Size  Location     Type
  2612 ;;		None
  2613 ;; Auto vars:     Size  Location     Type
  2614 ;;		None
  2615 ;; Return value:  Size  Location     Type
  2616 ;;                  1    wreg      void 
  2617 ;; Registers used:
  2618 ;;		status,2
  2619 ;; Tracked objects:
  2620 ;;		On entry : 0/0
  2621 ;;		On exit  : 0/0
  2622 ;;		Unchanged: 0/0
  2623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2628 ;;Total ram usage:        0 bytes
  2629 ;; Hardware stack levels used:    1
  2630 ;; Hardware stack levels required when called:    4
  2631 ;; This function calls:
  2632 ;;		Nothing
  2633 ;; This function is called by:
  2634 ;;		_Start
  2635 ;; This function uses a non-reentrant model
  2636 ;;
  2637                           
  2638                           
  2639                           ;psect for function _INTERRUPT_Initialize
  2640  1298                     _INTERRUPT_Initialize:	
  2641                           
  2642                           ;Function.c: 55: INTCON = 0;
  2643                           
  2644                           ;incstack = 0
  2645                           ; Regs used in _INTERRUPT_Initialize: [status,2]
  2646  1298  018B               	clrf	11	;volatile
  2647                           
  2648                           ;Function.c: 56: INTCONbits.TMR0IE = 0;
  2649  1299  128B               	bcf	11,5	;volatile
  2650                           
  2651                           ;Function.c: 57: PIR1bits.TMR2IF = 0;
  2652  129A  0020               	movlb	0	; select bank0
  2653  129B  1091               	bcf	17,1	;volatile
  2654                           
  2655                           ;Function.c: 58: PIE1bits.TMR2IE = 1;
  2656  129C  0021               	movlb	1	; select bank1
  2657  129D  1491               	bsf	17,1	;volatile
  2658                           
  2659                           ;Function.c: 59: INTCONbits.TMR0IF = 0;
  2660  129E  110B               	bcf	11,2	;volatile
  2661                           
  2662                           ;Function.c: 60: INTCONbits.GIE = 1;
  2663  129F  178B               	bsf	11,7	;volatile
  2664                           
  2665                           ;Function.c: 61: INTCONbits.PEIE = 1;
  2666  12A0  170B               	bsf	11,6	;volatile
  2667  12A1  0008               	return
  2668  12A2                     __end_of_INTERRUPT_Initialize:	
  2669                           
  2670                           	psect	text4
  2671  1330                     __ptext4:	
  2672 ;; *************** function _EUSART1_Initialize *****************
  2673 ;; Defined at:
  2674 ;;		line 30 in file "UART.c"
  2675 ;; Parameters:    Size  Location     Type
  2676 ;;		None
  2677 ;; Auto vars:     Size  Location     Type
  2678 ;;		None
  2679 ;; Return value:  Size  Location     Type
  2680 ;;                  1    wreg      void 
  2681 ;; Registers used:
  2682 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2683 ;; Tracked objects:
  2684 ;;		On entry : 0/0
  2685 ;;		On exit  : 0/0
  2686 ;;		Unchanged: 0/0
  2687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2692 ;;Total ram usage:        0 bytes
  2693 ;; Hardware stack levels used:    1
  2694 ;; Hardware stack levels required when called:    6
  2695 ;; This function calls:
  2696 ;;		_UART_buff_init
  2697 ;; This function is called by:
  2698 ;;		_Start
  2699 ;; This function uses a non-reentrant model
  2700 ;;
  2701                           
  2702                           
  2703                           ;psect for function _EUSART1_Initialize
  2704  1330                     _EUSART1_Initialize:	
  2705                           
  2706                           ;UART.c: 32: PIE1bits.RCIE = 0;
  2707                           
  2708                           ;incstack = 0
  2709                           ; Regs used in _EUSART1_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2710  1330  0021               	movlb	1	; select bank1
  2711  1331  1291               	bcf	17,5	;volatile
  2712                           
  2713                           ;UART.c: 33: PIE1bits.TXIE = 0;
  2714  1332  1211               	bcf	17,4	;volatile
  2715                           
  2716                           ;UART.c: 35: SPBRG = 0x25;
  2717  1333  3000               	movlw	0
  2718  1334  0023               	movlb	3	; select bank3
  2719  1335  009C               	movwf	28	;volatile
  2720  1336  3025               	movlw	37
  2721  1337  009B               	movwf	27	;volatile
  2722                           
  2723                           ;UART.c: 37: RCSTA = 0b10010000;
  2724  1338  3090               	movlw	144
  2725  1339  009D               	movwf	29	;volatile
  2726                           
  2727                           ;UART.c: 39: TXSTA = 0b00100000;
  2728  133A  3020               	movlw	32
  2729  133B  009E               	movwf	30	;volatile
  2730                           
  2731                           ;UART.c: 41: UART_buff_init(&input_buffer);
  2732  133C  3020               	movlw	(low (_input_buffer| (0+256)))& (0+255)
  2733  133D  3192  22C3  3193   	fcall	_UART_buff_init
  2734                           
  2735                           ;UART.c: 42: UART_buff_init(&output_buffer);
  2736  1340  303A               	movlw	(low (_output_buffer| (0+256)))& (0+255)
  2737  1341  3192  22C3         	fcall	_UART_buff_init
  2738                           
  2739                           ;UART.c: 44: PIE1bits.RCIE = 1;
  2740  1343  0021               	movlb	1	; select bank1
  2741  1344  1691               	bsf	17,5	;volatile
  2742  1345  0008               	return
  2743  1346                     __end_of_EUSART1_Initialize:	
  2744                           
  2745                           	psect	text5
  2746  12C3                     __ptext5:	
  2747 ;; *************** function _UART_buff_init *****************
  2748 ;; Defined at:
  2749 ;;		line 48 in file "UART.c"
  2750 ;; Parameters:    Size  Location     Type
  2751 ;;  _this           1    wreg     PTR struct UART_ring_buf
  2752 ;;		 -> output_buffer(26), input_buffer(26), 
  2753 ;; Auto vars:     Size  Location     Type
  2754 ;;  _this           1    7[BANK0 ] PTR struct UART_ring_buf
  2755 ;;		 -> output_buffer(26), input_buffer(26), 
  2756 ;; Return value:  Size  Location     Type
  2757 ;;                  1    wreg      void 
  2758 ;; Registers used:
  2759 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2760 ;; Tracked objects:
  2761 ;;		On entry : 0/0
  2762 ;;		On exit  : 0/0
  2763 ;;		Unchanged: 0/0
  2764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2766 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2768 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2769 ;;Total ram usage:        1 bytes
  2770 ;; Hardware stack levels used:    1
  2771 ;; Hardware stack levels required when called:    5
  2772 ;; This function calls:
  2773 ;;		_memset
  2774 ;; This function is called by:
  2775 ;;		_EUSART1_Initialize
  2776 ;; This function uses a non-reentrant model
  2777 ;;
  2778                           
  2779                           
  2780                           ;psect for function _UART_buff_init
  2781  12C3                     _UART_buff_init:	
  2782                           
  2783                           ;incstack = 0
  2784                           ; Regs used in _UART_buff_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2785                           ;UART_buff_init@_this stored from wreg
  2786  12C3  0020               	movlb	0	; select bank0
  2787  12C4  00A7               	movwf	UART_buff_init@_this
  2788                           
  2789                           ;UART.c: 57: memset(_this, 0, sizeof (*_this));
  2790  12C5  3000               	movlw	0
  2791  12C6  00A0               	movwf	memset@c
  2792  12C7  00A1               	movwf	memset@c+1
  2793  12C8  301A               	movlw	26
  2794  12C9  00A2               	movwf	memset@n
  2795  12CA  3000               	movlw	0
  2796  12CB  00A3               	movwf	memset@n+1
  2797  12CC  0827               	movf	UART_buff_init@_this,w
  2798  12CD  3193  23AB         	fcall	_memset
  2799  12CF  0008               	return
  2800  12D0                     __end_of_UART_buff_init:	
  2801                           
  2802                           	psect	text6
  2803  13AB                     __ptext6:	
  2804 ;; *************** function _memset *****************
  2805 ;; Defined at:
  2806 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  2807 ;; Parameters:    Size  Location     Type
  2808 ;;  p1              1    wreg     PTR void 
  2809 ;;		 -> output_buffer(26), input_buffer(26), 
  2810 ;;  c               2    0[BANK0 ] int 
  2811 ;;  n               2    2[BANK0 ] unsigned int 
  2812 ;; Auto vars:     Size  Location     Type
  2813 ;;  p1              1    5[BANK0 ] PTR void 
  2814 ;;		 -> output_buffer(26), input_buffer(26), 
  2815 ;;  p               1    6[BANK0 ] PTR unsigned char 
  2816 ;;		 -> output_buffer(26), input_buffer(26), 
  2817 ;; Return value:  Size  Location     Type
  2818 ;;                  1    wreg      PTR void 
  2819 ;; Registers used:
  2820 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2821 ;; Tracked objects:
  2822 ;;		On entry : 0/0
  2823 ;;		On exit  : 0/0
  2824 ;;		Unchanged: 0/0
  2825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2826 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2827 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2828 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2829 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2830 ;;Total ram usage:        7 bytes
  2831 ;; Hardware stack levels used:    1
  2832 ;; Hardware stack levels required when called:    4
  2833 ;; This function calls:
  2834 ;;		Nothing
  2835 ;; This function is called by:
  2836 ;;		_UART_buff_init
  2837 ;; This function uses a non-reentrant model
  2838 ;;
  2839                           
  2840                           
  2841                           ;psect for function _memset
  2842  13AB                     _memset:	
  2843                           
  2844                           ;incstack = 0
  2845                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  2846                           ;memset@p1 stored from wreg
  2847  13AB  0020               	movlb	0	; select bank0
  2848  13AC  00A5               	movwf	memset@p1
  2849  13AD  0825               	movf	memset@p1,w
  2850  13AE  00A4               	movwf	??_memset
  2851  13AF  0824               	movf	??_memset,w
  2852  13B0  00A6               	movwf	memset@p
  2853  13B1                     l2708:	
  2854  13B1  3001               	movlw	1
  2855  13B2  02A2               	subwf	memset@n,f
  2856  13B3  3000               	movlw	0
  2857  13B4  3BA3               	subwfb	memset@n+1,f
  2858  13B5  0A22               	incf	memset@n,w
  2859  13B6  1903               	btfsc	3,2
  2860  13B7  0A23               	incf	memset@n+1,w
  2861  13B8  1903               	btfsc	3,2
  2862  13B9  0008               	return
  2863  13BA  0820               	movf	memset@c,w
  2864  13BB  00A4               	movwf	??_memset
  2865  13BC  0826               	movf	memset@p,w
  2866  13BD  0086               	movwf	6
  2867  13BE  3001               	movlw	1	; select bank2/3
  2868  13BF  0087               	movwf	7
  2869  13C0  0824               	movf	??_memset,w
  2870  13C1  0081               	movwf	1
  2871  13C2  3001               	movlw	1
  2872  13C3  00A4               	movwf	??_memset
  2873  13C4  0824               	movf	??_memset,w
  2874  13C5  07A6               	addwf	memset@p,f
  2875  13C6  2BB1               	goto	l2708
  2876  13C7                     __end_of_memset:	
  2877                           ;	Return value of _memset is never used
  2878                           
  2879                           
  2880                           	psect	text7
  2881  128E                     __ptext7:	
  2882 ;; *************** function _ADC_Initialize *****************
  2883 ;; Defined at:
  2884 ;;		line 4 in file "ADC.c"
  2885 ;; Parameters:    Size  Location     Type
  2886 ;;		None
  2887 ;; Auto vars:     Size  Location     Type
  2888 ;;		None
  2889 ;; Return value:  Size  Location     Type
  2890 ;;                  1    wreg      void 
  2891 ;; Registers used:
  2892 ;;		None
  2893 ;; Tracked objects:
  2894 ;;		On entry : 0/0
  2895 ;;		On exit  : 0/0
  2896 ;;		Unchanged: 0/0
  2897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2902 ;;Total ram usage:        0 bytes
  2903 ;; Hardware stack levels used:    1
  2904 ;; Hardware stack levels required when called:    4
  2905 ;; This function calls:
  2906 ;;		Nothing
  2907 ;; This function is called by:
  2908 ;;		_Start
  2909 ;; This function uses a non-reentrant model
  2910 ;;
  2911                           
  2912                           
  2913                           ;psect for function _ADC_Initialize
  2914  128E                     _ADC_Initialize:	
  2915                           
  2916                           ;ADC.c: 5: FVRCONbits.ADFVR0 = 1;
  2917                           
  2918                           ;incstack = 0
  2919                           ; Regs used in _ADC_Initialize: []
  2920  128E  0022               	movlb	2	; select bank2
  2921  128F  1417               	bsf	23,0	;volatile
  2922                           
  2923                           ;ADC.c: 6: FVRCONbits.ADFVR1 = 1;
  2924  1290  1497               	bsf	23,1	;volatile
  2925                           
  2926                           ;ADC.c: 7: ADCON1bits.ADFM = 1;
  2927  1291  0021               	movlb	1	; select bank1
  2928  1292  179E               	bsf	30,7	;volatile
  2929                           
  2930                           ;ADC.c: 8: ADCON1bits.ADCS0 = 0;
  2931  1293  121E               	bcf	30,4	;volatile
  2932                           
  2933                           ;ADC.c: 9: ADCON1bits.ADCS1 = 0;
  2934  1294  129E               	bcf	30,5	;volatile
  2935                           
  2936                           ;ADC.c: 10: ADCON1bits.ADCS2 = 1;
  2937  1295  171E               	bsf	30,6	;volatile
  2938                           
  2939                           ;ADC.c: 11: ADCON0bits.ADON = 1;
  2940  1296  141D               	bsf	29,0	;volatile
  2941  1297  0008               	return
  2942  1298                     __end_of_ADC_Initialize:	
  2943                           
  2944                           	psect	text8
  2945  0BA0                     __ptext8:	
  2946 ;; *************** function _RadioOperation *****************
  2947 ;; Defined at:
  2948 ;;		line 25 in file "Radio.c"
  2949 ;; Parameters:    Size  Location     Type
  2950 ;;		None
  2951 ;; Auto vars:     Size  Location     Type
  2952 ;;		None
  2953 ;; Return value:  Size  Location     Type
  2954 ;;                  1    wreg      void 
  2955 ;; Registers used:
  2956 ;;		wreg, status,2, status,0, pclath, cstack
  2957 ;; Tracked objects:
  2958 ;;		On entry : 0/0
  2959 ;;		On exit  : 0/0
  2960 ;;		Unchanged: 0/0
  2961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2964 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2965 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2966 ;;Total ram usage:        1 bytes
  2967 ;; Hardware stack levels used:    1
  2968 ;; Hardware stack levels required when called:    6
  2969 ;; This function calls:
  2970 ;;		_ClearTicker
  2971 ;;		_GetTicker
  2972 ;;		_ReadCharger
  2973 ;;		_ReadVoltage
  2974 ;;		_SR_FRSPowerDown
  2975 ;;		_SR_FRSTalk
  2976 ;;		_TMR2_StartTimer
  2977 ;;		_TMR2_StopTimer
  2978 ;;		___awtoft
  2979 ;;		___ftdiv
  2980 ;;		___ftge
  2981 ;;		___ftmul
  2982 ;; This function is called by:
  2983 ;;		_main
  2984 ;; This function uses a non-reentrant model
  2985 ;;
  2986                           
  2987                           
  2988                           ;psect for function _RadioOperation
  2989  0BA0                     _RadioOperation:	
  2990                           
  2991                           ;Radio.c: 26: if(!PORTAbits.RA2 && !Talking){
  2992                           
  2993                           ;incstack = 0
  2994                           ; Regs used in _RadioOperation: [wreg+status,2+status,0+pclath+cstack]
  2995  0BA0  0020               	movlb	0	; select bank0
  2996  0BA1  190C               	btfsc	12,2	;volatile
  2997  0BA2  2BAB               	goto	l294
  2998  0BA3  0021               	movlb	1	; select bank1
  2999  0BA4  0867               	movf	_Talking^(0+128),w
  3000  0BA5  1D03               	btfss	3,2
  3001  0BA6  2BAB               	goto	l294
  3002                           
  3003                           ;Radio.c: 27: count++;
  3004  0BA7  3001               	movlw	1
  3005  0BA8  07DF               	addwf	_count^(0+128),f
  3006  0BA9  3000               	movlw	0
  3007  0BAA  3DE0               	addwfc	(_count+1)^(0+128),f
  3008  0BAB                     l294:	
  3009                           
  3010                           ;Radio.c: 28: }
  3011                           ;Radio.c: 29: if((count > 5) && !Talking){
  3012  0BAB  0021               	movlb	1	; select bank1
  3013  0BAC  0860               	movf	(_count+1)^(0+128),w
  3014  0BAD  3A80               	xorlw	128
  3015  0BAE  0020               	movlb	0	; select bank0
  3016  0BAF  00D6               	movwf	??_RadioOperation
  3017  0BB0  3080               	movlw	128
  3018  0BB1  0256               	subwf	??_RadioOperation,w
  3019  0BB2  1D03               	skipz
  3020  0BB3  2BB7               	goto	u4225
  3021  0BB4  3006               	movlw	6
  3022  0BB5  0021               	movlb	1	; select bank1
  3023  0BB6  025F               	subwf	_count^(0+128),w
  3024  0BB7                     u4225:	
  3025  0BB7  1C03               	skipc
  3026  0BB8  2BCB               	goto	l3160
  3027  0BB9  0021               	movlb	1	; select bank1
  3028  0BBA  0867               	movf	_Talking^(0+128),w
  3029  0BBB  1D03               	btfss	3,2
  3030  0BBC  2BCB               	goto	l3160
  3031                           
  3032                           ;Radio.c: 30: SR_FRSTalk();
  3033  0BBD  3188  2000  318B   	fcall	_SR_FRSTalk
  3034                           
  3035                           ;Radio.c: 31: PORTCbits.RC3 = 0;
  3036  0BC0  0020               	movlb	0	; select bank0
  3037  0BC1  118E               	bcf	14,3	;volatile
  3038                           
  3039                           ;Radio.c: 32: Talking = 1;
  3040  0BC2  0021               	movlb	1	; select bank1
  3041  0BC3  01E7               	clrf	_Talking^(0+128)
  3042  0BC4  0AE7               	incf	_Talking^(0+128),f
  3043                           
  3044                           ;Radio.c: 33: TMR2_StopTimer();
  3045  0BC5  3192  2254  318B   	fcall	_TMR2_StopTimer
  3046                           
  3047                           ;Radio.c: 34: ClearTicker();
  3048  0BC8  3192  2257  318B   	fcall	_ClearTicker
  3049  0BCB                     l3160:	
  3050                           
  3051                           ;Radio.c: 35: }
  3052                           ;Radio.c: 36: if(Talking && PORTAbits.RA2){
  3053  0BCB  0021               	movlb	1	; select bank1
  3054  0BCC  0867               	movf	_Talking^(0+128),w
  3055  0BCD  1903               	btfsc	3,2
  3056  0BCE  2BF0               	goto	l296
  3057  0BCF  0020               	movlb	0	; select bank0
  3058  0BD0  1D0C               	btfss	12,2	;volatile
  3059  0BD1  2BF0               	goto	l296
  3060                           
  3061                           ;Radio.c: 37: count--;
  3062  0BD2  30FF               	movlw	255
  3063  0BD3  0021               	movlb	1	; select bank1
  3064  0BD4  07DF               	addwf	_count^(0+128),f
  3065  0BD5  30FF               	movlw	255
  3066  0BD6  3DE0               	addwfc	(_count+1)^(0+128),f
  3067                           
  3068                           ;Radio.c: 38: if(count < 2){
  3069  0BD7  0860               	movf	(_count+1)^(0+128),w
  3070  0BD8  3A80               	xorlw	128
  3071  0BD9  0020               	movlb	0	; select bank0
  3072  0BDA  00D6               	movwf	??_RadioOperation
  3073  0BDB  3080               	movlw	128
  3074  0BDC  0256               	subwf	??_RadioOperation,w
  3075  0BDD  1D03               	skipz
  3076  0BDE  2BE2               	goto	u4265
  3077  0BDF  3002               	movlw	2
  3078  0BE0  0021               	movlb	1	; select bank1
  3079  0BE1  025F               	subwf	_count^(0+128),w
  3080  0BE2                     u4265:	
  3081  0BE2  1803               	skipnc
  3082  0BE3  2BF0               	goto	l296
  3083                           
  3084                           ;Radio.c: 39: PORTCbits.RC3 = 1;
  3085  0BE4  0020               	movlb	0	; select bank0
  3086  0BE5  158E               	bsf	14,3	;volatile
  3087                           
  3088                           ;Radio.c: 40: SR_FRSTalk();
  3089  0BE6  3188  2000  318B   	fcall	_SR_FRSTalk
  3090                           
  3091                           ;Radio.c: 41: TMR2_StartTimer();
  3092  0BE9  3192  2251  318B   	fcall	_TMR2_StartTimer
  3093                           
  3094                           ;Radio.c: 42: count = 0;
  3095  0BEC  0021               	movlb	1	; select bank1
  3096  0BED  01DF               	clrf	_count^(0+128)
  3097  0BEE  01E0               	clrf	(_count+1)^(0+128)
  3098                           
  3099                           ;Radio.c: 43: Talking = 0;
  3100  0BEF  01E7               	clrf	_Talking^(0+128)
  3101  0BF0                     l296:	
  3102                           
  3103                           ;Radio.c: 44: }
  3104                           ;Radio.c: 45: }
  3105                           ;Radio.c: 46: if(GetTicker() > 100000){
  3106  0BF0  3180  2002  318B   	fcall	_GetTicker
  3107                           
  3108                           ;Radio.c: 50: }
  3109                           ;Radio.c: 51: if(time > 150){
  3110                           
  3111                           ;Radio.c: 49: PORTCbits.RC5 = 0;
  3112                           
  3113                           ;Radio.c: 48: SR_FRSPowerDown();
  3114  0BF3  0021               	movlb	1	; select bank1
  3115  0BF4  0864               	movf	(_time+1)^(0+128),w
  3116  0BF5  3A80               	xorlw	128
  3117  0BF6  0020               	movlb	0	; select bank0
  3118  0BF7  00D6               	movwf	??_RadioOperation
  3119  0BF8  3080               	movlw	128
  3120  0BF9  0256               	subwf	??_RadioOperation,w
  3121  0BFA  1D03               	skipz
  3122  0BFB  2BFF               	goto	u4275
  3123  0BFC  3097               	movlw	151
  3124  0BFD  0021               	movlb	1	; select bank1
  3125  0BFE  0263               	subwf	_time^(0+128),w
  3126  0BFF                     u4275:	
  3127  0BFF  1C03               	skipc
  3128  0C00  2C57               	goto	l3188
  3129                           
  3130                           ;Radio.c: 52: PORTCbits.RC4 = 0;
  3131  0C01  0020               	movlb	0	; select bank0
  3132  0C02  120E               	bcf	14,4	;volatile
  3133                           
  3134                           ;Radio.c: 53: Battery = ReadVoltage(1);
  3135  0C03  3001               	movlw	1
  3136  0C04  3192  22F3  318B   	fcall	_ReadVoltage
  3137  0C07  0020               	movlb	0	; select bank0
  3138  0C08  0822               	movf	?_ReadVoltage+1,w
  3139  0C09  00A9               	movwf	___awtoft@c+1
  3140  0C0A  0821               	movf	?_ReadVoltage,w
  3141  0C0B  00A8               	movwf	___awtoft@c
  3142  0C0C  3194  245C  318B   	fcall	___awtoft
  3143  0C0F  0020               	movlb	0	; select bank0
  3144  0C10  0828               	movf	?___awtoft,w
  3145  0C11  0021               	movlb	1	; select bank1
  3146  0C12  00DC               	movwf	_Battery^(0+128)
  3147  0C13  0020               	movlb	0	; select bank0
  3148  0C14  0829               	movf	?___awtoft+1,w
  3149  0C15  0021               	movlb	1	; select bank1
  3150  0C16  00DD               	movwf	(_Battery+1)^(0+128)
  3151  0C17  0020               	movlb	0	; select bank0
  3152  0C18  082A               	movf	?___awtoft+2,w
  3153  0C19  0021               	movlb	1	; select bank1
  3154  0C1A  00DE               	movwf	(_Battery+2)^(0+128)
  3155                           
  3156                           ;Radio.c: 54: Battery = (Battery*5.0)/1023.0;
  3157  0C1B  30C0               	movlw	192
  3158  0C1C  0020               	movlb	0	; select bank0
  3159  0C1D  00C6               	movwf	___ftdiv@f2
  3160  0C1E  307F               	movlw	127
  3161  0C1F  00C7               	movwf	___ftdiv@f2+1
  3162  0C20  3044               	movlw	68
  3163  0C21  00C8               	movwf	___ftdiv@f2+2
  3164  0C22  3000               	movlw	0
  3165  0C23  00B6               	movwf	___ftmul@f1
  3166  0C24  30A0               	movlw	160
  3167  0C25  00B7               	movwf	___ftmul@f1+1
  3168  0C26  3040               	movlw	64
  3169  0C27  00B8               	movwf	___ftmul@f1+2
  3170  0C28  0021               	movlb	1	; select bank1
  3171  0C29  085C               	movf	_Battery^(0+128),w
  3172  0C2A  0020               	movlb	0	; select bank0
  3173  0C2B  00B9               	movwf	___ftmul@f2
  3174  0C2C  0021               	movlb	1	; select bank1
  3175  0C2D  085D               	movf	(_Battery+1)^(0+128),w
  3176  0C2E  0020               	movlb	0	; select bank0
  3177  0C2F  00BA               	movwf	___ftmul@f2+1
  3178  0C30  0021               	movlb	1	; select bank1
  3179  0C31  085E               	movf	(_Battery+2)^(0+128),w
  3180  0C32  0020               	movlb	0	; select bank0
  3181  0C33  00BB               	movwf	___ftmul@f2+2
  3182  0C34  3189  21F6  318B   	fcall	___ftmul
  3183  0C37  0020               	movlb	0	; select bank0
  3184  0C38  0836               	movf	?___ftmul,w
  3185  0C39  00C9               	movwf	___ftdiv@f1
  3186  0C3A  0837               	movf	?___ftmul+1,w
  3187  0C3B  00CA               	movwf	___ftdiv@f1+1
  3188  0C3C  0838               	movf	?___ftmul+2,w
  3189  0C3D  00CB               	movwf	___ftdiv@f1+2
  3190  0C3E  3189  214D  318B   	fcall	___ftdiv
  3191  0C41  0020               	movlb	0	; select bank0
  3192  0C42  0846               	movf	?___ftdiv,w
  3193  0C43  0021               	movlb	1	; select bank1
  3194  0C44  00DC               	movwf	_Battery^(0+128)
  3195  0C45  0020               	movlb	0	; select bank0
  3196  0C46  0847               	movf	?___ftdiv+1,w
  3197  0C47  0021               	movlb	1	; select bank1
  3198  0C48  00DD               	movwf	(_Battery+1)^(0+128)
  3199  0C49  0020               	movlb	0	; select bank0
  3200  0C4A  0848               	movf	?___ftdiv+2,w
  3201  0C4B  0021               	movlb	1	; select bank1
  3202  0C4C  00DE               	movwf	(_Battery+2)^(0+128)
  3203                           
  3204                           ;Radio.c: 55: time = 0;
  3205  0C4D  01E3               	clrf	_time^(0+128)
  3206  0C4E  01E4               	clrf	(_time+1)^(0+128)
  3207                           
  3208                           ;Radio.c: 56: Mode = ReadCharger();
  3209  0C4F  3192  22E1  318B   	fcall	_ReadCharger
  3210  0C52  0020               	movlb	0	; select bank0
  3211  0C53  00D6               	movwf	??_RadioOperation
  3212  0C54  0856               	movf	??_RadioOperation,w
  3213  0C55  0021               	movlb	1	; select bank1
  3214  0C56  00E5               	movwf	_Mode^(0+128)
  3215  0C57                     l3188:	
  3216                           
  3217                           ;Radio.c: 57: }
  3218                           ;Radio.c: 58: if((time > 2) && (PORTCbits.RC4 == 0)){
  3219  0C57  0021               	movlb	1	; select bank1
  3220  0C58  0864               	movf	(_time+1)^(0+128),w
  3221  0C59  3A80               	xorlw	128
  3222  0C5A  0020               	movlb	0	; select bank0
  3223  0C5B  00D6               	movwf	??_RadioOperation
  3224  0C5C  3080               	movlw	128
  3225  0C5D  0256               	subwf	??_RadioOperation,w
  3226  0C5E  1D03               	skipz
  3227  0C5F  2C63               	goto	u4285
  3228  0C60  3003               	movlw	3
  3229  0C61  0021               	movlb	1	; select bank1
  3230  0C62  0263               	subwf	_time^(0+128),w
  3231  0C63                     u4285:	
  3232  0C63  1C03               	skipc
  3233  0C64  2C69               	goto	l3194
  3234  0C65  0020               	movlb	0	; select bank0
  3235  0C66  1A0E               	btfsc	14,4	;volatile
  3236  0C67  2C69               	goto	l3194
  3237                           
  3238                           ;Radio.c: 59: PORTCbits.RC4 = 1;
  3239  0C68  160E               	bsf	14,4	;volatile
  3240  0C69                     l3194:	
  3241                           
  3242                           ;Radio.c: 60: }
  3243                           ;Radio.c: 61: if(Battery < 6.2){
  3244  0C69  0021               	movlb	1	; select bank1
  3245  0C6A  085C               	movf	_Battery^(0+128),w
  3246  0C6B  0020               	movlb	0	; select bank0
  3247  0C6C  00A0               	movwf	___ftge@ff1
  3248  0C6D  0021               	movlb	1	; select bank1
  3249  0C6E  085D               	movf	(_Battery+1)^(0+128),w
  3250  0C6F  0020               	movlb	0	; select bank0
  3251  0C70  00A1               	movwf	___ftge@ff1+1
  3252  0C71  0021               	movlb	1	; select bank1
  3253  0C72  085E               	movf	(_Battery+2)^(0+128),w
  3254  0C73  0020               	movlb	0	; select bank0
  3255  0C74  00A2               	movwf	___ftge@ff1+2
  3256  0C75  3066               	movlw	102
  3257  0C76  00A3               	movwf	___ftge@ff2
  3258  0C77  30C6               	movlw	198
  3259  0C78  00A4               	movwf	___ftge@ff2+1
  3260  0C79  3040               	movlw	64
  3261  0C7A  00A5               	movwf	___ftge@ff2+2
  3262  0C7B  3194  24CA  318B   	fcall	___ftge
  3263  0C7E  1803               	btfsc	3,0
  3264  0C7F  2C85               	goto	l3200
  3265                           
  3266                           ;Radio.c: 62: SR_FRSPowerDown();
  3267  0C80  3192  2285  318B   	fcall	_SR_FRSPowerDown
  3268                           
  3269                           ;Radio.c: 63: PORTCbits.RC3 = 0;
  3270  0C83  0020               	movlb	0	; select bank0
  3271  0C84  118E               	bcf	14,3	;volatile
  3272  0C85                     l3200:	
  3273                           
  3274                           ;Radio.c: 64: }
  3275                           ;Radio.c: 65: if(ReadCharger() == 1){
  3276  0C85  3192  22E1  318B   	fcall	_ReadCharger
  3277  0C88  3A01               	xorlw	1
  3278  0C89  1D03               	skipz
  3279  0C8A  2C8E               	goto	l3204
  3280                           
  3281                           ;Radio.c: 66: PORTCbits.RC4 = 0;
  3282  0C8B  0020               	movlb	0	; select bank0
  3283  0C8C  120E               	bcf	14,4	;volatile
  3284                           
  3285                           ;Radio.c: 67: PORTCbits.RC5 = 0;
  3286  0C8D  128E               	bcf	14,5	;volatile
  3287  0C8E                     l3204:	
  3288                           
  3289                           ;Radio.c: 68: }
  3290                           ;Radio.c: 69: if(ReadCharger() == 2){
  3291  0C8E  3192  22E1  318B   	fcall	_ReadCharger
  3292  0C91  3A02               	xorlw	2
  3293  0C92  1D03               	skipz
  3294  0C93  2C97               	goto	l3208
  3295                           
  3296                           ;Radio.c: 70: PORTCbits.RC5 = 1;
  3297  0C94  0020               	movlb	0	; select bank0
  3298  0C95  168E               	bsf	14,5	;volatile
  3299                           
  3300                           ;Radio.c: 71: PORTCbits.RC4 = 0;
  3301  0C96  120E               	bcf	14,4	;volatile
  3302  0C97                     l3208:	
  3303                           
  3304                           ;Radio.c: 72: }
  3305                           ;Radio.c: 73: time++;
  3306  0C97  3001               	movlw	1
  3307  0C98  0021               	movlb	1	; select bank1
  3308  0C99  07E3               	addwf	_time^(0+128),f
  3309  0C9A  3000               	movlw	0
  3310  0C9B  3DE4               	addwfc	(_time+1)^(0+128),f
  3311  0C9C  0008               	return
  3312  0C9D                     __end_of_RadioOperation:	
  3313                           
  3314                           	psect	text9
  3315  094D                     __ptext9:	
  3316 ;; *************** function ___ftdiv *****************
  3317 ;; Defined at:
  3318 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;  f2              3   38[BANK0 ] float 
  3321 ;;  f1              3   41[BANK0 ] float 
  3322 ;; Auto vars:     Size  Location     Type
  3323 ;;  f3              3   49[BANK0 ] float 
  3324 ;;  sign            1   53[BANK0 ] unsigned char 
  3325 ;;  exp             1   52[BANK0 ] unsigned char 
  3326 ;;  cntr            1   48[BANK0 ] unsigned char 
  3327 ;; Return value:  Size  Location     Type
  3328 ;;                  3   38[BANK0 ] float 
  3329 ;; Registers used:
  3330 ;;		wreg, status,2, status,0, pclath, cstack
  3331 ;; Tracked objects:
  3332 ;;		On entry : 0/0
  3333 ;;		On exit  : 0/0
  3334 ;;		Unchanged: 0/0
  3335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3336 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3337 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3338 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3339 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3340 ;;Total ram usage:       16 bytes
  3341 ;; Hardware stack levels used:    1
  3342 ;; Hardware stack levels required when called:    5
  3343 ;; This function calls:
  3344 ;;		___ftpack
  3345 ;; This function is called by:
  3346 ;;		_RadioOperation
  3347 ;; This function uses a non-reentrant model
  3348 ;;
  3349                           
  3350                           
  3351                           ;psect for function ___ftdiv
  3352  094D                     ___ftdiv:	
  3353                           
  3354                           ;incstack = 0
  3355                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  3356  094D  0020               	movlb	0	; select bank0
  3357  094E  0849               	movf	___ftdiv@f1,w
  3358  094F  00CC               	movwf	??___ftdiv
  3359  0950  084A               	movf	___ftdiv@f1+1,w
  3360  0951  00CD               	movwf	??___ftdiv+1
  3361  0952  084B               	movf	___ftdiv@f1+2,w
  3362  0953  00CE               	movwf	??___ftdiv+2
  3363  0954  1003               	clrc
  3364  0955  0D4D               	rlf	??___ftdiv+1,w
  3365  0956  0D4E               	rlf	??___ftdiv+2,w
  3366  0957  00CF               	movwf	??___ftdiv+3
  3367  0958  084F               	movf	??___ftdiv+3,w
  3368  0959  00D4               	movwf	___ftdiv@exp
  3369  095A  0854               	movf	___ftdiv@exp,w
  3370  095B  1D03               	btfss	3,2
  3371  095C  2964               	goto	l3068
  3372  095D  3000               	movlw	0
  3373  095E  00C6               	movwf	?___ftdiv
  3374  095F  3000               	movlw	0
  3375  0960  00C7               	movwf	?___ftdiv+1
  3376  0961  3000               	movlw	0
  3377  0962  00C8               	movwf	?___ftdiv+2
  3378  0963  0008               	return
  3379  0964                     l3068:	
  3380  0964  0846               	movf	___ftdiv@f2,w
  3381  0965  00CC               	movwf	??___ftdiv
  3382  0966  0847               	movf	___ftdiv@f2+1,w
  3383  0967  00CD               	movwf	??___ftdiv+1
  3384  0968  0848               	movf	___ftdiv@f2+2,w
  3385  0969  00CE               	movwf	??___ftdiv+2
  3386  096A  1003               	clrc
  3387  096B  0D4D               	rlf	??___ftdiv+1,w
  3388  096C  0D4E               	rlf	??___ftdiv+2,w
  3389  096D  00CF               	movwf	??___ftdiv+3
  3390  096E  084F               	movf	??___ftdiv+3,w
  3391  096F  00D5               	movwf	___ftdiv@sign
  3392  0970  0855               	movf	___ftdiv@sign,w
  3393  0971  1D03               	btfss	3,2
  3394  0972  297A               	goto	l3074
  3395  0973  3000               	movlw	0
  3396  0974  00C6               	movwf	?___ftdiv
  3397  0975  3000               	movlw	0
  3398  0976  00C7               	movwf	?___ftdiv+1
  3399  0977  3000               	movlw	0
  3400  0978  00C8               	movwf	?___ftdiv+2
  3401  0979  0008               	return
  3402  097A                     l3074:	
  3403  097A  3000               	movlw	0
  3404  097B  00D1               	movwf	___ftdiv@f3
  3405  097C  3000               	movlw	0
  3406  097D  00D2               	movwf	___ftdiv@f3+1
  3407  097E  3000               	movlw	0
  3408  097F  00D3               	movwf	___ftdiv@f3+2
  3409  0980  3089               	movlw	137
  3410  0981  0755               	addwf	___ftdiv@sign,w
  3411  0982  00CC               	movwf	??___ftdiv
  3412  0983  084C               	movf	??___ftdiv,w
  3413  0984  02D4               	subwf	___ftdiv@exp,f
  3414  0985  0849               	movf	___ftdiv@f1,w
  3415  0986  00CC               	movwf	??___ftdiv
  3416  0987  084A               	movf	___ftdiv@f1+1,w
  3417  0988  00CD               	movwf	??___ftdiv+1
  3418  0989  084B               	movf	___ftdiv@f1+2,w
  3419  098A  00CE               	movwf	??___ftdiv+2
  3420  098B  3010               	movlw	16
  3421  098C                     u4125:	
  3422  098C  36CE               	lsrf	??___ftdiv+2,f
  3423  098D  0CCD               	rrf	??___ftdiv+1,f
  3424  098E  0CCC               	rrf	??___ftdiv,f
  3425  098F  0B89               	decfsz	9,f
  3426  0990  298C               	goto	u4125
  3427  0991  084C               	movf	??___ftdiv,w
  3428  0992  00CF               	movwf	??___ftdiv+3
  3429  0993  084F               	movf	??___ftdiv+3,w
  3430  0994  00D5               	movwf	___ftdiv@sign
  3431  0995  0846               	movf	___ftdiv@f2,w
  3432  0996  00CC               	movwf	??___ftdiv
  3433  0997  0847               	movf	___ftdiv@f2+1,w
  3434  0998  00CD               	movwf	??___ftdiv+1
  3435  0999  0848               	movf	___ftdiv@f2+2,w
  3436  099A  00CE               	movwf	??___ftdiv+2
  3437  099B  3010               	movlw	16
  3438  099C                     u4135:	
  3439  099C  36CE               	lsrf	??___ftdiv+2,f
  3440  099D  0CCD               	rrf	??___ftdiv+1,f
  3441  099E  0CCC               	rrf	??___ftdiv,f
  3442  099F  0B89               	decfsz	9,f
  3443  09A0  299C               	goto	u4135
  3444  09A1  084C               	movf	??___ftdiv,w
  3445  09A2  00CF               	movwf	??___ftdiv+3
  3446  09A3  084F               	movf	??___ftdiv+3,w
  3447  09A4  06D5               	xorwf	___ftdiv@sign,f
  3448  09A5  3080               	movlw	128
  3449  09A6  00CC               	movwf	??___ftdiv
  3450  09A7  084C               	movf	??___ftdiv,w
  3451  09A8  05D5               	andwf	___ftdiv@sign,f
  3452  09A9  17CA               	bsf	___ftdiv@f1+1,7
  3453  09AA  30FF               	movlw	255
  3454  09AB  05C9               	andwf	___ftdiv@f1,f
  3455  09AC  30FF               	movlw	255
  3456  09AD  05CA               	andwf	___ftdiv@f1+1,f
  3457  09AE  3000               	movlw	0
  3458  09AF  05CB               	andwf	___ftdiv@f1+2,f
  3459  09B0  17C7               	bsf	___ftdiv@f2+1,7
  3460  09B1  30FF               	movlw	255
  3461  09B2  05C6               	andwf	___ftdiv@f2,f
  3462  09B3  30FF               	movlw	255
  3463  09B4  05C7               	andwf	___ftdiv@f2+1,f
  3464  09B5  3000               	movlw	0
  3465  09B6  05C8               	andwf	___ftdiv@f2+2,f
  3466  09B7  3018               	movlw	24
  3467  09B8  00CC               	movwf	??___ftdiv
  3468  09B9  084C               	movf	??___ftdiv,w
  3469  09BA  00D0               	movwf	___ftdiv@cntr
  3470  09BB                     l3088:	
  3471  09BB  3001               	movlw	1
  3472  09BC                     u4145:	
  3473  09BC  35D1               	lslf	___ftdiv@f3,f
  3474  09BD  0DD2               	rlf	___ftdiv@f3+1,f
  3475  09BE  0DD3               	rlf	___ftdiv@f3+2,f
  3476  09BF  0B89               	decfsz	9,f
  3477  09C0  29BC               	goto	u4145
  3478  09C1  0848               	movf	___ftdiv@f2+2,w
  3479  09C2  024B               	subwf	___ftdiv@f1+2,w
  3480  09C3  1D03               	skipz
  3481  09C4  29CB               	goto	u4155
  3482  09C5  0847               	movf	___ftdiv@f2+1,w
  3483  09C6  024A               	subwf	___ftdiv@f1+1,w
  3484  09C7  1D03               	skipz
  3485  09C8  29CB               	goto	u4155
  3486  09C9  0846               	movf	___ftdiv@f2,w
  3487  09CA  0249               	subwf	___ftdiv@f1,w
  3488  09CB                     u4155:	
  3489  09CB  1C03               	skipc
  3490  09CC  29D4               	goto	l3096
  3491  09CD  0846               	movf	___ftdiv@f2,w
  3492  09CE  02C9               	subwf	___ftdiv@f1,f
  3493  09CF  0847               	movf	___ftdiv@f2+1,w
  3494  09D0  3BCA               	subwfb	___ftdiv@f1+1,f
  3495  09D1  0848               	movf	___ftdiv@f2+2,w
  3496  09D2  3BCB               	subwfb	___ftdiv@f1+2,f
  3497  09D3  1451               	bsf	___ftdiv@f3,0
  3498  09D4                     l3096:	
  3499  09D4  3001               	movlw	1
  3500  09D5                     u4165:	
  3501  09D5  35C9               	lslf	___ftdiv@f1,f
  3502  09D6  0DCA               	rlf	___ftdiv@f1+1,f
  3503  09D7  0DCB               	rlf	___ftdiv@f1+2,f
  3504  09D8  0B89               	decfsz	9,f
  3505  09D9  29D5               	goto	u4165
  3506  09DA  3001               	movlw	1
  3507  09DB  02D0               	subwf	___ftdiv@cntr,f
  3508  09DC  1D03               	btfss	3,2
  3509  09DD  29BB               	goto	l3088
  3510  09DE  0851               	movf	___ftdiv@f3,w
  3511  09DF  00A0               	movwf	___ftpack@arg
  3512  09E0  0852               	movf	___ftdiv@f3+1,w
  3513  09E1  00A1               	movwf	___ftpack@arg+1
  3514  09E2  0853               	movf	___ftdiv@f3+2,w
  3515  09E3  00A2               	movwf	___ftpack@arg+2
  3516  09E4  0854               	movf	___ftdiv@exp,w
  3517  09E5  00CC               	movwf	??___ftdiv
  3518  09E6  084C               	movf	??___ftdiv,w
  3519  09E7  00A3               	movwf	___ftpack@exp
  3520  09E8  0855               	movf	___ftdiv@sign,w
  3521  09E9  00CD               	movwf	??___ftdiv+1
  3522  09EA  084D               	movf	??___ftdiv+1,w
  3523  09EB  00A4               	movwf	___ftpack@sign
  3524  09EC  3197  2714         	fcall	___ftpack
  3525  09EE  0020               	movlb	0	; select bank0
  3526  09EF  0820               	movf	?___ftpack,w
  3527  09F0  00C6               	movwf	?___ftdiv
  3528  09F1  0821               	movf	?___ftpack+1,w
  3529  09F2  00C7               	movwf	?___ftdiv+1
  3530  09F3  0822               	movf	?___ftpack+2,w
  3531  09F4  00C8               	movwf	?___ftdiv+2
  3532  09F5  0008               	return
  3533  09F6                     __end_of___ftdiv:	
  3534                           
  3535                           	psect	text10
  3536  145C                     __ptext10:	
  3537 ;; *************** function ___awtoft *****************
  3538 ;; Defined at:
  3539 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
  3540 ;; Parameters:    Size  Location     Type
  3541 ;;  c               2    8[BANK0 ] int 
  3542 ;; Auto vars:     Size  Location     Type
  3543 ;;  sign            1   13[BANK0 ] unsigned char 
  3544 ;; Return value:  Size  Location     Type
  3545 ;;                  3    8[BANK0 ] float 
  3546 ;; Registers used:
  3547 ;;		wreg, status,2, status,0, pclath, cstack
  3548 ;; Tracked objects:
  3549 ;;		On entry : 0/0
  3550 ;;		On exit  : 0/0
  3551 ;;		Unchanged: 0/0
  3552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3553 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3554 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3555 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3556 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3557 ;;Total ram usage:        6 bytes
  3558 ;; Hardware stack levels used:    1
  3559 ;; Hardware stack levels required when called:    5
  3560 ;; This function calls:
  3561 ;;		___ftpack
  3562 ;; This function is called by:
  3563 ;;		_RadioOperation
  3564 ;; This function uses a non-reentrant model
  3565 ;;
  3566                           
  3567                           
  3568                           ;psect for function ___awtoft
  3569  145C                     ___awtoft:	
  3570                           
  3571                           ;incstack = 0
  3572                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  3573  145C  0020               	movlb	0	; select bank0
  3574  145D  01AD               	clrf	___awtoft@sign
  3575  145E  1FA9               	btfss	___awtoft@c+1,7
  3576  145F  2C67               	goto	l3058
  3577  1460  09A8               	comf	___awtoft@c,f
  3578  1461  09A9               	comf	___awtoft@c+1,f
  3579  1462  0AA8               	incf	___awtoft@c,f
  3580  1463  1903               	skipnz
  3581  1464  0AA9               	incf	___awtoft@c+1,f
  3582  1465  01AD               	clrf	___awtoft@sign
  3583  1466  0AAD               	incf	___awtoft@sign,f
  3584  1467                     l3058:	
  3585  1467  0828               	movf	___awtoft@c,w
  3586  1468  00A0               	movwf	___ftpack@arg
  3587  1469  0829               	movf	___awtoft@c+1,w
  3588  146A  00A1               	movwf	___ftpack@arg+1
  3589  146B  01A2               	clrf	___ftpack@arg+2
  3590  146C  308E               	movlw	142
  3591  146D  00AB               	movwf	??___awtoft
  3592  146E  082B               	movf	??___awtoft,w
  3593  146F  00A3               	movwf	___ftpack@exp
  3594  1470  082D               	movf	___awtoft@sign,w
  3595  1471  00AC               	movwf	??___awtoft+1
  3596  1472  082C               	movf	??___awtoft+1,w
  3597  1473  00A4               	movwf	___ftpack@sign
  3598  1474  3197  2714         	fcall	___ftpack
  3599  1476  0020               	movlb	0	; select bank0
  3600  1477  0820               	movf	?___ftpack,w
  3601  1478  00A8               	movwf	?___awtoft
  3602  1479  0821               	movf	?___ftpack+1,w
  3603  147A  00A9               	movwf	?___awtoft+1
  3604  147B  0822               	movf	?___ftpack+2,w
  3605  147C  00AA               	movwf	?___awtoft+2
  3606  147D  0008               	return
  3607  147E                     __end_of___awtoft:	
  3608                           
  3609                           	psect	text11
  3610  1254                     __ptext11:	
  3611 ;; *************** function _TMR2_StopTimer *****************
  3612 ;; Defined at:
  3613 ;;		line 42 in file "Timer.c"
  3614 ;; Parameters:    Size  Location     Type
  3615 ;;		None
  3616 ;; Auto vars:     Size  Location     Type
  3617 ;;		None
  3618 ;; Return value:  Size  Location     Type
  3619 ;;                  1    wreg      void 
  3620 ;; Registers used:
  3621 ;;		None
  3622 ;; Tracked objects:
  3623 ;;		On entry : 0/0
  3624 ;;		On exit  : 0/0
  3625 ;;		Unchanged: 0/0
  3626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3631 ;;Total ram usage:        0 bytes
  3632 ;; Hardware stack levels used:    1
  3633 ;; Hardware stack levels required when called:    4
  3634 ;; This function calls:
  3635 ;;		Nothing
  3636 ;; This function is called by:
  3637 ;;		_RadioOperation
  3638 ;; This function uses a non-reentrant model
  3639 ;;
  3640                           
  3641                           
  3642                           ;psect for function _TMR2_StopTimer
  3643  1254                     _TMR2_StopTimer:	
  3644                           
  3645                           ;Timer.c: 45: T2CONbits.TMR2ON = 0;
  3646                           
  3647                           ;incstack = 0
  3648                           ; Regs used in _TMR2_StopTimer: []
  3649  1254  0020               	movlb	0	; select bank0
  3650  1255  111C               	bcf	28,2	;volatile
  3651  1256  0008               	return
  3652  1257                     __end_of_TMR2_StopTimer:	
  3653                           
  3654                           	psect	text12
  3655  1251                     __ptext12:	
  3656 ;; *************** function _TMR2_StartTimer *****************
  3657 ;; Defined at:
  3658 ;;		line 36 in file "Timer.c"
  3659 ;; Parameters:    Size  Location     Type
  3660 ;;		None
  3661 ;; Auto vars:     Size  Location     Type
  3662 ;;		None
  3663 ;; Return value:  Size  Location     Type
  3664 ;;                  1    wreg      void 
  3665 ;; Registers used:
  3666 ;;		None
  3667 ;; Tracked objects:
  3668 ;;		On entry : 0/0
  3669 ;;		On exit  : 0/0
  3670 ;;		Unchanged: 0/0
  3671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3676 ;;Total ram usage:        0 bytes
  3677 ;; Hardware stack levels used:    1
  3678 ;; Hardware stack levels required when called:    4
  3679 ;; This function calls:
  3680 ;;		Nothing
  3681 ;; This function is called by:
  3682 ;;		_main
  3683 ;;		_RadioOperation
  3684 ;; This function uses a non-reentrant model
  3685 ;;
  3686                           
  3687                           
  3688                           ;psect for function _TMR2_StartTimer
  3689  1251                     _TMR2_StartTimer:	
  3690                           
  3691                           ;Timer.c: 39: T2CONbits.TMR2ON = 1;
  3692                           
  3693                           ;incstack = 0
  3694                           ; Regs used in _TMR2_StartTimer: []
  3695  1251  0020               	movlb	0	; select bank0
  3696  1252  151C               	bsf	28,2	;volatile
  3697  1253  0008               	return
  3698  1254                     __end_of_TMR2_StartTimer:	
  3699                           
  3700                           	psect	text13
  3701  0800                     __ptext13:	
  3702 ;; *************** function _SR_FRSTalk *****************
  3703 ;; Defined at:
  3704 ;;		line 7 in file "SR_FRS.c"
  3705 ;; Parameters:    Size  Location     Type
  3706 ;;		None
  3707 ;; Auto vars:     Size  Location     Type
  3708 ;;		None
  3709 ;; Return value:  Size  Location     Type
  3710 ;;                  1    wreg      void 
  3711 ;; Registers used:
  3712 ;;		None
  3713 ;; Tracked objects:
  3714 ;;		On entry : 0/0
  3715 ;;		On exit  : 0/0
  3716 ;;		Unchanged: 0/0
  3717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3722 ;;Total ram usage:        0 bytes
  3723 ;; Hardware stack levels used:    1
  3724 ;; Hardware stack levels required when called:    4
  3725 ;; This function calls:
  3726 ;;		Nothing
  3727 ;; This function is called by:
  3728 ;;		_RadioOperation
  3729 ;; This function uses a non-reentrant model
  3730 ;;
  3731                           
  3732                           
  3733                           ;psect for function _SR_FRSTalk
  3734  0800                     _SR_FRSTalk:	
  3735                           
  3736                           ;SR_FRS.c: 8: PORTCbits.RC7 ^= PORTCbits.RC7;
  3737                           
  3738                           ;incstack = 0
  3739                           ; Regs used in _SR_FRSTalk: []
  3740  0800  0020               	movlb	0	; select bank0
  3741  0801  1F8E               	btfss	14,7	;volatile
  3742  0802  0008               	return
  3743  0803  1B8E               	btfsc	14,7	;volatile
  3744  0804  2807               	goto	u4060
  3745  0805  178E               	bsf	14,7	;volatile
  3746  0806  0008               	return
  3747  0807                     u4060:	
  3748  0807  138E               	bcf	14,7	;volatile
  3749  0808  0008               	return
  3750  0809                     __end_of_SR_FRSTalk:	
  3751                           
  3752                           	psect	text14
  3753  1285                     __ptext14:	
  3754 ;; *************** function _SR_FRSPowerDown *****************
  3755 ;; Defined at:
  3756 ;;		line 11 in file "SR_FRS.c"
  3757 ;; Parameters:    Size  Location     Type
  3758 ;;		None
  3759 ;; Auto vars:     Size  Location     Type
  3760 ;;		None
  3761 ;; Return value:  Size  Location     Type
  3762 ;;                  1    wreg      void 
  3763 ;; Registers used:
  3764 ;;		None
  3765 ;; Tracked objects:
  3766 ;;		On entry : 0/0
  3767 ;;		On exit  : 0/0
  3768 ;;		Unchanged: 0/0
  3769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3774 ;;Total ram usage:        0 bytes
  3775 ;; Hardware stack levels used:    1
  3776 ;; Hardware stack levels required when called:    4
  3777 ;; This function calls:
  3778 ;;		Nothing
  3779 ;; This function is called by:
  3780 ;;		_RadioOperation
  3781 ;; This function uses a non-reentrant model
  3782 ;;
  3783                           
  3784                           
  3785                           ;psect for function _SR_FRSPowerDown
  3786  1285                     _SR_FRSPowerDown:	
  3787                           
  3788                           ;SR_FRS.c: 12: PORTCbits.RC6 ^= PORTCbits.RC6;
  3789                           
  3790                           ;incstack = 0
  3791                           ; Regs used in _SR_FRSPowerDown: []
  3792  1285  0020               	movlb	0	; select bank0
  3793  1286  1F0E               	btfss	14,6	;volatile
  3794  1287  0008               	return
  3795  1288  1B0E               	btfsc	14,6	;volatile
  3796  1289  2A8C               	goto	u4070
  3797  128A  170E               	bsf	14,6	;volatile
  3798  128B  0008               	return
  3799  128C                     u4070:	
  3800  128C  130E               	bcf	14,6	;volatile
  3801  128D  0008               	return
  3802  128E                     __end_of_SR_FRSPowerDown:	
  3803                           
  3804                           	psect	text15
  3805  12F3                     __ptext15:	
  3806 ;; *************** function _ReadVoltage *****************
  3807 ;; Defined at:
  3808 ;;		line 14 in file "ADC.c"
  3809 ;; Parameters:    Size  Location     Type
  3810 ;;  ch              1    wreg     unsigned char 
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;  ch              1    4[BANK0 ] unsigned char 
  3813 ;; Return value:  Size  Location     Type
  3814 ;;                  2    1[BANK0 ] int 
  3815 ;; Registers used:
  3816 ;;		wreg, status,2, status,0, pclath, cstack
  3817 ;; Tracked objects:
  3818 ;;		On entry : 0/0
  3819 ;;		On exit  : 0/0
  3820 ;;		Unchanged: 0/0
  3821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3822 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3823 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3825 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3826 ;;Total ram usage:        4 bytes
  3827 ;; Hardware stack levels used:    1
  3828 ;; Hardware stack levels required when called:    5
  3829 ;; This function calls:
  3830 ;;		_SetADCChannel
  3831 ;; This function is called by:
  3832 ;;		_RadioOperation
  3833 ;; This function uses a non-reentrant model
  3834 ;;
  3835                           
  3836                           
  3837                           ;psect for function _ReadVoltage
  3838  12F3                     _ReadVoltage:	
  3839                           
  3840                           ;incstack = 0
  3841                           ; Regs used in _ReadVoltage: [wreg+status,2+status,0+pclath+cstack]
  3842                           ;ReadVoltage@ch stored from wreg
  3843  12F3  0020               	movlb	0	; select bank0
  3844  12F4  00A4               	movwf	ReadVoltage@ch
  3845                           
  3846                           ;ADC.c: 15: SetADCChannel(ch);
  3847  12F5  0824               	movf	ReadVoltage@ch,w
  3848  12F6  3194  243B  3192   	fcall	_SetADCChannel
  3849                           
  3850                           ;ADC.c: 16: ADCON0bits.GO_nDONE = 1;
  3851  12F9  0021               	movlb	1	; select bank1
  3852  12FA  149D               	bsf	29,1	;volatile
  3853  12FB                     l320:	
  3854                           ;ADC.c: 17: while(ADCON0bits.GO_nDONE);
  3855                           
  3856  12FB  189D               	btfsc	29,1	;volatile
  3857  12FC  2AFB               	goto	l320
  3858                           
  3859                           ;ADC.c: 18: return ((ADRESL << 8) + ADRESL);
  3860  12FD  081B               	movf	27,w	;volatile
  3861  12FE  0020               	movlb	0	; select bank0
  3862  12FF  00A2               	movwf	?_ReadVoltage+1
  3863  1300  0021               	movlb	1	; select bank1
  3864  1301  081B               	movf	27,w	;volatile
  3865  1302  0020               	movlb	0	; select bank0
  3866  1303  00A1               	movwf	?_ReadVoltage
  3867  1304  0008               	return
  3868  1305                     __end_of_ReadVoltage:	
  3869                           
  3870                           	psect	text16
  3871  143B                     __ptext16:	
  3872 ;; *************** function _SetADCChannel *****************
  3873 ;; Defined at:
  3874 ;;		line 21 in file "ADC.c"
  3875 ;; Parameters:    Size  Location     Type
  3876 ;;  ch              1    wreg     unsigned char 
  3877 ;; Auto vars:     Size  Location     Type
  3878 ;;  ch              1    0[BANK0 ] unsigned char 
  3879 ;; Return value:  Size  Location     Type
  3880 ;;                  1    wreg      void 
  3881 ;; Registers used:
  3882 ;;		wreg, status,2, status,0
  3883 ;; Tracked objects:
  3884 ;;		On entry : 0/0
  3885 ;;		On exit  : 0/0
  3886 ;;		Unchanged: 0/0
  3887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3889 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3891 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3892 ;;Total ram usage:        1 bytes
  3893 ;; Hardware stack levels used:    1
  3894 ;; Hardware stack levels required when called:    4
  3895 ;; This function calls:
  3896 ;;		Nothing
  3897 ;; This function is called by:
  3898 ;;		_ReadVoltage
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902                           
  3903                           ;psect for function _SetADCChannel
  3904  143B                     _SetADCChannel:	
  3905                           
  3906                           ;incstack = 0
  3907                           ; Regs used in _SetADCChannel: [wreg+status,2+status,0]
  3908                           ;SetADCChannel@ch stored from wreg
  3909  143B  0020               	movlb	0	; select bank0
  3910  143C  00A0               	movwf	SetADCChannel@ch
  3911                           
  3912                           ;ADC.c: 22: if(ch == 1){
  3913  143D  0320               	decf	SetADCChannel@ch,w
  3914  143E  1D03               	btfss	3,2
  3915  143F  2C46               	goto	l2928
  3916                           
  3917                           ;ADC.c: 23: ADCON0bits.CHS = 6;
  3918  1440  0021               	movlb	1	; select bank1
  3919  1441  081D               	movf	29,w	;volatile
  3920  1442  3983               	andlw	-125
  3921  1443  3818               	iorlw	24
  3922  1444  009D               	movwf	29	;volatile
  3923                           
  3924                           ;ADC.c: 24: }
  3925  1445  0008               	return
  3926  1446                     l2928:	
  3927                           
  3928                           ;ADC.c: 25: else if(ch == 2){
  3929  1446  3002               	movlw	2
  3930  1447  0020               	movlb	0	; select bank0
  3931  1448  0620               	xorwf	SetADCChannel@ch,w
  3932  1449  1D03               	btfss	3,2
  3933  144A  2C51               	goto	l2932
  3934                           
  3935                           ;ADC.c: 26: ADCON0bits.CHS = 29;
  3936  144B  0021               	movlb	1	; select bank1
  3937  144C  081D               	movf	29,w	;volatile
  3938  144D  3983               	andlw	-125
  3939  144E  3874               	iorlw	116
  3940  144F  009D               	movwf	29	;volatile
  3941                           
  3942                           ;ADC.c: 27: }
  3943  1450  0008               	return
  3944  1451                     l2932:	
  3945                           
  3946                           ;ADC.c: 28: else if(ch == 3){
  3947  1451  3003               	movlw	3
  3948  1452  0020               	movlb	0	; select bank0
  3949  1453  0620               	xorwf	SetADCChannel@ch,w
  3950  1454  1D03               	btfss	3,2
  3951  1455  0008               	return
  3952                           
  3953                           ;ADC.c: 29: ADCON0bits.CHS = 3;
  3954  1456  0021               	movlb	1	; select bank1
  3955  1457  081D               	movf	29,w	;volatile
  3956  1458  3983               	andlw	-125
  3957  1459  380C               	iorlw	12
  3958  145A  009D               	movwf	29	;volatile
  3959  145B  0008               	return
  3960  145C                     __end_of_SetADCChannel:	
  3961                           
  3962                           	psect	text17
  3963  12E1                     __ptext17:	
  3964 ;; *************** function _ReadCharger *****************
  3965 ;; Defined at:
  3966 ;;		line 84 in file "Function.c"
  3967 ;; Parameters:    Size  Location     Type
  3968 ;;		None
  3969 ;; Auto vars:     Size  Location     Type
  3970 ;;		None
  3971 ;; Return value:  Size  Location     Type
  3972 ;;                  1    wreg      unsigned char 
  3973 ;; Registers used:
  3974 ;;		wreg
  3975 ;; Tracked objects:
  3976 ;;		On entry : 0/0
  3977 ;;		On exit  : 0/0
  3978 ;;		Unchanged: 0/0
  3979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3984 ;;Total ram usage:        0 bytes
  3985 ;; Hardware stack levels used:    1
  3986 ;; Hardware stack levels required when called:    4
  3987 ;; This function calls:
  3988 ;;		Nothing
  3989 ;; This function is called by:
  3990 ;;		_RadioOperation
  3991 ;; This function uses a non-reentrant model
  3992 ;;
  3993                           
  3994                           
  3995                           ;psect for function _ReadCharger
  3996  12E1                     _ReadCharger:	
  3997                           
  3998                           ;Function.c: 86: if(!PORTCbits.RC0 && PORTCbits.RC1){
  3999                           
  4000                           ;incstack = 0
  4001                           ; Regs used in _ReadCharger: [wreg]
  4002  12E1  0020               	movlb	0	; select bank0
  4003  12E2  1C0E               	btfss	14,0	;volatile
  4004  12E3  1C8E               	btfss	14,1	;volatile
  4005  12E4  2AE7               	goto	l80
  4006                           
  4007                           ;Function.c: 87: return 1;
  4008  12E5  3001               	movlw	1
  4009  12E6  0008               	return
  4010  12E7                     l80:	
  4011                           
  4012                           ;Function.c: 88: }
  4013                           ;Function.c: 90: if(PORTCbits.RC0 && !PORTCbits.RC1){
  4014  12E7  180E               	btfsc	14,0	;volatile
  4015  12E8  188E               	btfsc	14,1	;volatile
  4016  12E9  2AEC               	goto	l82
  4017                           
  4018                           ;Function.c: 91: return 2;
  4019  12EA  3002               	movlw	2
  4020  12EB  0008               	return
  4021  12EC                     l82:	
  4022                           
  4023                           ;Function.c: 92: }
  4024                           ;Function.c: 94: if(PORTCbits.RC0 && PORTCbits.RC1){
  4025  12EC  180E               	btfsc	14,0	;volatile
  4026  12ED  1C8E               	btfss	14,1	;volatile
  4027  12EE  2AF1               	goto	l3008
  4028                           
  4029                           ;Function.c: 95: return 0;
  4030  12EF  3000               	movlw	0
  4031                           
  4032                           ;Function.c: 96: }
  4033  12F0  0008               	return
  4034  12F1                     l3008:	
  4035                           
  4036                           ;Function.c: 97: else{
  4037                           ;Function.c: 98: return 255;
  4038  12F1  30FF               	movlw	255
  4039  12F2  0008               	return
  4040  12F3                     __end_of_ReadCharger:	
  4041                           
  4042                           	psect	text18
  4043  0002                     __ptext18:	
  4044 ;; *************** function _GetTicker *****************
  4045 ;; Defined at:
  4046 ;;		line 61 in file "Timer.c"
  4047 ;; Parameters:    Size  Location     Type
  4048 ;;		None
  4049 ;; Auto vars:     Size  Location     Type
  4050 ;;		None
  4051 ;; Return value:  Size  Location     Type
  4052 ;;                  2  118[None  ] unsigned int 
  4053 ;; Registers used:
  4054 ;;		None
  4055 ;; Tracked objects:
  4056 ;;		On entry : 0/0
  4057 ;;		On exit  : 0/0
  4058 ;;		Unchanged: 0/0
  4059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4064 ;;Total ram usage:        0 bytes
  4065 ;; Hardware stack levels used:    1
  4066 ;; Hardware stack levels required when called:    4
  4067 ;; This function calls:
  4068 ;;		Nothing
  4069 ;; This function is called by:
  4070 ;;		_RadioOperation
  4071 ;; This function uses a non-reentrant model
  4072 ;;
  4073                           
  4074                           
  4075                           ;psect for function _GetTicker
  4076  0002                     _GetTicker:	
  4077                           
  4078                           ;Timer.c: 62: return ticker;
  4079                           ;	Return value of _GetTicker is never used
  4080                           
  4081                           ;incstack = 0
  4082                           ; Regs used in _GetTicker: []
  4083  0002  0008               	return
  4084  0003                     __end_of_GetTicker:	
  4085                           
  4086                           	psect	text19
  4087  1257                     __ptext19:	
  4088 ;; *************** function _ClearTicker *****************
  4089 ;; Defined at:
  4090 ;;		line 57 in file "Timer.c"
  4091 ;; Parameters:    Size  Location     Type
  4092 ;;		None
  4093 ;; Auto vars:     Size  Location     Type
  4094 ;;		None
  4095 ;; Return value:  Size  Location     Type
  4096 ;;                  1    wreg      void 
  4097 ;; Registers used:
  4098 ;;		status,2
  4099 ;; Tracked objects:
  4100 ;;		On entry : 0/0
  4101 ;;		On exit  : 0/0
  4102 ;;		Unchanged: 0/0
  4103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4108 ;;Total ram usage:        0 bytes
  4109 ;; Hardware stack levels used:    1
  4110 ;; Hardware stack levels required when called:    4
  4111 ;; This function calls:
  4112 ;;		Nothing
  4113 ;; This function is called by:
  4114 ;;		_RadioOperation
  4115 ;; This function uses a non-reentrant model
  4116 ;;
  4117                           
  4118                           
  4119                           ;psect for function _ClearTicker
  4120  1257                     _ClearTicker:	
  4121                           
  4122                           ;Timer.c: 58: ticker = 0;
  4123                           
  4124                           ;incstack = 0
  4125                           ; Regs used in _ClearTicker: [status,2]
  4126  1257  0021               	movlb	1	; select bank1
  4127  1258  01E1               	clrf	_ticker^(0+128)
  4128  1259  01E2               	clrf	(_ticker+1)^(0+128)
  4129  125A  0008               	return
  4130  125B                     __end_of_ClearTicker:	
  4131                           
  4132                           	psect	text20
  4133  124E                     __ptext20:	
  4134 ;; *************** function _RadioBegin *****************
  4135 ;; Defined at:
  4136 ;;		line 21 in file "Radio.c"
  4137 ;; Parameters:    Size  Location     Type
  4138 ;;		None
  4139 ;; Auto vars:     Size  Location     Type
  4140 ;;		None
  4141 ;; Return value:  Size  Location     Type
  4142 ;;                  1    wreg      void 
  4143 ;; Registers used:
  4144 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4145 ;; Tracked objects:
  4146 ;;		On entry : 0/0
  4147 ;;		On exit  : 0/0
  4148 ;;		Unchanged: 0/0
  4149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4154 ;;Total ram usage:        0 bytes
  4155 ;; Hardware stack levels used:    1
  4156 ;; Hardware stack levels required when called:   11
  4157 ;; This function calls:
  4158 ;;		_SR_FRSStart
  4159 ;; This function is called by:
  4160 ;;		_main
  4161 ;; This function uses a non-reentrant model
  4162 ;;
  4163                           
  4164                           
  4165                           ;psect for function _RadioBegin
  4166  124E                     _RadioBegin:	
  4167                           
  4168                           ;Radio.c: 22: SR_FRSStart();
  4169                           
  4170                           ;incstack = 0
  4171                           ; Regs used in _RadioBegin: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4172  124E  3195  2506         	fcall	_SR_FRSStart
  4173  1250  0008               	return
  4174  1251                     __end_of_RadioBegin:	
  4175                           
  4176                           	psect	text21
  4177  1506                     __ptext21:	
  4178 ;; *************** function _SR_FRSStart *****************
  4179 ;; Defined at:
  4180 ;;		line 15 in file "SR_FRS.c"
  4181 ;; Parameters:    Size  Location     Type
  4182 ;;		None
  4183 ;; Auto vars:     Size  Location     Type
  4184 ;;		None
  4185 ;; Return value:  Size  Location     Type
  4186 ;;                  1    wreg      void 
  4187 ;; Registers used:
  4188 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4189 ;; Tracked objects:
  4190 ;;		On entry : 0/0
  4191 ;;		On exit  : 0/0
  4192 ;;		Unchanged: 0/0
  4193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4197 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4198 ;;Total ram usage:        0 bytes
  4199 ;; Hardware stack levels used:    1
  4200 ;; Hardware stack levels required when called:   10
  4201 ;; This function calls:
  4202 ;;		_Delay
  4203 ;;		_SetCommandMode
  4204 ;;		_SetFrequency
  4205 ;;		_SetMIC
  4206 ;;		_SetPowerSave
  4207 ;;		_SetVOX
  4208 ;;		_SetVolume
  4209 ;; This function is called by:
  4210 ;;		_RadioBegin
  4211 ;; This function uses a non-reentrant model
  4212 ;;
  4213                           
  4214                           
  4215                           ;psect for function _SR_FRSStart
  4216  1506                     _SR_FRSStart:	
  4217                           
  4218                           ;SR_FRS.c: 16: SetCommandMode();
  4219                           
  4220                           ;incstack = 0
  4221                           ; Regs used in _SR_FRSStart: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4222  1506  3192  2274  3195   	fcall	_SetCommandMode
  4223                           
  4224                           ;SR_FRS.c: 17: Delay(100);
  4225  1509  3064               	movlw	100
  4226  150A  0020               	movlb	0	; select bank0
  4227  150B  00A0               	movwf	Delay@wait
  4228  150C  3000               	movlw	0
  4229  150D  00A1               	movwf	Delay@wait+1
  4230  150E  3193  23E3  3195   	fcall	_Delay
  4231                           
  4232                           ;SR_FRS.c: 19: SetFrequency();
  4233  1511  3194  247E  3195   	fcall	_SetFrequency
  4234                           
  4235                           ;SR_FRS.c: 20: Delay(100);
  4236  1514  3064               	movlw	100
  4237  1515  0020               	movlb	0	; select bank0
  4238  1516  00A0               	movwf	Delay@wait
  4239  1517  3000               	movlw	0
  4240  1518  00A1               	movwf	Delay@wait+1
  4241  1519  3193  23E3  3195   	fcall	_Delay
  4242                           
  4243                           ;SR_FRS.c: 22: SetPowerSave();
  4244  151C  3192  22B7  3195   	fcall	_SetPowerSave
  4245                           
  4246                           ;SR_FRS.c: 23: Delay(100);
  4247  151F  3064               	movlw	100
  4248  1520  0020               	movlb	0	; select bank0
  4249  1521  00A0               	movwf	Delay@wait
  4250  1522  3000               	movlw	0
  4251  1523  00A1               	movwf	Delay@wait+1
  4252  1524  3193  23E3  3195   	fcall	_Delay
  4253                           
  4254                           ;SR_FRS.c: 25: SetVolume(5);
  4255  1527  3005               	movlw	5
  4256  1528  3194  2400  3195   	fcall	_SetVolume
  4257                           
  4258                           ;SR_FRS.c: 26: Delay(100);
  4259  152B  3064               	movlw	100
  4260  152C  0020               	movlb	0	; select bank0
  4261  152D  00A0               	movwf	Delay@wait
  4262  152E  3000               	movlw	0
  4263  152F  00A1               	movwf	Delay@wait+1
  4264  1530  3193  23E3  3195   	fcall	_Delay
  4265                           
  4266                           ;SR_FRS.c: 28: SetVOX(0);
  4267  1533  3000               	movlw	0
  4268  1534  0020               	movlb	0	; select bank0
  4269  1535  00ED               	movwf	SetVOX@volume
  4270  1536  00EE               	movwf	SetVOX@volume+1
  4271  1537  3187  27E2  3195   	fcall	_SetVOX
  4272                           
  4273                           ;SR_FRS.c: 29: Delay(100);
  4274  153A  3064               	movlw	100
  4275  153B  0020               	movlb	0	; select bank0
  4276  153C  00A0               	movwf	Delay@wait
  4277  153D  3000               	movlw	0
  4278  153E  00A1               	movwf	Delay@wait+1
  4279  153F  3193  23E3  3195   	fcall	_Delay
  4280                           
  4281                           ;SR_FRS.c: 31: SetMIC(5,0);
  4282  1542  0020               	movlb	0	; select bank0
  4283  1543  01ED               	clrf	SetMIC@scram
  4284  1544  3005               	movlw	5
  4285  1545  3194  24A4         	fcall	_SetMIC
  4286  1547  0008               	return
  4287  1548                     __end_of_SR_FRSStart:	
  4288                           
  4289                           	psect	text22
  4290  1400                     __ptext22:	
  4291 ;; *************** function _SetVolume *****************
  4292 ;; Defined at:
  4293 ;;		line 47 in file "SR_FRS.c"
  4294 ;; Parameters:    Size  Location     Type
  4295 ;;  volume          1    wreg     unsigned char 
  4296 ;; Auto vars:     Size  Location     Type
  4297 ;;  volume          1   79[BANK0 ] unsigned char 
  4298 ;; Return value:  Size  Location     Type
  4299 ;;                  1    wreg      void 
  4300 ;; Registers used:
  4301 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4302 ;; Tracked objects:
  4303 ;;		On entry : 0/0
  4304 ;;		On exit  : 0/0
  4305 ;;		Unchanged: 0/0
  4306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4308 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4309 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4310 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4311 ;;Total ram usage:        3 bytes
  4312 ;; Hardware stack levels used:    1
  4313 ;; Hardware stack levels required when called:    9
  4314 ;; This function calls:
  4315 ;;		_printf
  4316 ;; This function is called by:
  4317 ;;		_SR_FRSStart
  4318 ;; This function uses a non-reentrant model
  4319 ;;
  4320                           
  4321                           
  4322                           ;psect for function _SetVolume
  4323  1400                     _SetVolume:	
  4324                           
  4325                           ;incstack = 0
  4326                           ; Regs used in _SetVolume: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4327                           ;SetVolume@volume stored from wreg
  4328  1400  0020               	movlb	0	; select bank0
  4329  1401  00EF               	movwf	SetVolume@volume
  4330                           
  4331                           ;SR_FRS.c: 48: if((volume < 9) && (volume > 1)){
  4332  1402  3009               	movlw	9
  4333  1403  026F               	subwf	SetVolume@volume,w
  4334  1404  1803               	skipnc
  4335  1405  0008               	return
  4336  1406  3002               	movlw	2
  4337  1407  026F               	subwf	SetVolume@volume,w
  4338  1408  1C03               	skipc
  4339  1409  0008               	return
  4340                           
  4341                           ;SR_FRS.c: 49: printf("AT+DMOSETVOLUME=%c",volume);
  4342  140A  30C6               	movlw	low (STR_4| (0+32768))
  4343  140B  0021               	movlb	1	; select bank1
  4344  140C  00A0               	movwf	printf@f^(0+128)
  4345  140D  3090               	movlw	high (STR_4| (0+32768))
  4346  140E  00A1               	movwf	(printf@f^(0+128)+1)
  4347  140F  0020               	movlb	0	; select bank0
  4348  1410  086F               	movf	SetVolume@volume,w
  4349  1411  00ED               	movwf	??_SetVolume
  4350  1412  01EE               	clrf	??_SetVolume+1
  4351  1413  086D               	movf	??_SetVolume,w
  4352  1414  0021               	movlb	1	; select bank1
  4353  1415  00A2               	movwf	(?_printf^(0+128)+2)
  4354  1416  0020               	movlb	0	; select bank0
  4355  1417  086E               	movf	??_SetVolume+1,w
  4356  1418  0021               	movlb	1	; select bank1
  4357  1419  00A3               	movwf	((?_printf+1)^(0+128)+2)
  4358  141A  3180  2042         	fcall	_printf
  4359  141C  0008               	return
  4360  141D                     __end_of_SetVolume:	
  4361                           
  4362                           	psect	text23
  4363  07E2                     __ptext23:	
  4364 ;; *************** function _SetVOX *****************
  4365 ;; Defined at:
  4366 ;;		line 53 in file "SR_FRS.c"
  4367 ;; Parameters:    Size  Location     Type
  4368 ;;  volume          2   77[BANK0 ] int 
  4369 ;; Auto vars:     Size  Location     Type
  4370 ;;		None
  4371 ;; Return value:  Size  Location     Type
  4372 ;;                  1    wreg      void 
  4373 ;; Registers used:
  4374 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4375 ;; Tracked objects:
  4376 ;;		On entry : 0/0
  4377 ;;		On exit  : 0/0
  4378 ;;		Unchanged: 0/0
  4379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4380 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4382 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4383 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4384 ;;Total ram usage:        3 bytes
  4385 ;; Hardware stack levels used:    1
  4386 ;; Hardware stack levels required when called:    9
  4387 ;; This function calls:
  4388 ;;		_printf
  4389 ;; This function is called by:
  4390 ;;		_SR_FRSStart
  4391 ;; This function uses a non-reentrant model
  4392 ;;
  4393                           
  4394                           
  4395                           ;psect for function _SetVOX
  4396  07E2                     _SetVOX:	
  4397                           
  4398                           ;SR_FRS.c: 54: if((volume < 8) && (volume >= 0)){
  4399                           
  4400                           ;incstack = 0
  4401                           ; Regs used in _SetVOX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4402  07E2  0020               	movlb	0	; select bank0
  4403  07E3  086E               	movf	SetVOX@volume+1,w
  4404  07E4  3A80               	xorlw	128
  4405  07E5  00EF               	movwf	??_SetVOX
  4406  07E6  3080               	movlw	128
  4407  07E7  026F               	subwf	??_SetVOX,w
  4408  07E8  3008               	movlw	8
  4409  07E9  1903               	btfsc	3,2
  4410  07EA  026D               	subwf	SetVOX@volume,w
  4411  07EB  1803               	skipnc
  4412  07EC  0008               	return
  4413  07ED  0020               	movlb	0	; select bank0
  4414  07EE  1BEE               	btfsc	SetVOX@volume+1,7
  4415  07EF  0008               	return
  4416                           
  4417                           ;SR_FRS.c: 55: printf("AT+DMOSETVOLUME=%c",volume);
  4418  07F0  30C6               	movlw	low (STR_4| (0+32768))
  4419  07F1  0021               	movlb	1	; select bank1
  4420  07F2  00A0               	movwf	printf@f^(0+128)
  4421  07F3  3090               	movlw	high (STR_4| (0+32768))
  4422  07F4  00A1               	movwf	(printf@f^(0+128)+1)
  4423  07F5  0020               	movlb	0	; select bank0
  4424  07F6  086E               	movf	SetVOX@volume+1,w
  4425  07F7  0021               	movlb	1	; select bank1
  4426  07F8  00A3               	movwf	((?_printf+1)^(0+128)+2)
  4427  07F9  0020               	movlb	0	; select bank0
  4428  07FA  086D               	movf	SetVOX@volume,w
  4429  07FB  0021               	movlb	1	; select bank1
  4430  07FC  00A2               	movwf	(?_printf^(0+128)+2)
  4431  07FD  3180  2042         	fcall	_printf
  4432  07FF  0008               	return
  4433  0800                     __end_of_SetVOX:	
  4434                           
  4435                           	psect	text24
  4436  12B7                     __ptext24:	
  4437 ;; *************** function _SetPowerSave *****************
  4438 ;; Defined at:
  4439 ;;		line 42 in file "SR_FRS.c"
  4440 ;; Parameters:    Size  Location     Type
  4441 ;;		None
  4442 ;; Auto vars:     Size  Location     Type
  4443 ;;		None
  4444 ;; Return value:  Size  Location     Type
  4445 ;;                  1    wreg      void 
  4446 ;; Registers used:
  4447 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4448 ;; Tracked objects:
  4449 ;;		On entry : 0/0
  4450 ;;		On exit  : 0/0
  4451 ;;		Unchanged: 0/0
  4452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4457 ;;Total ram usage:        0 bytes
  4458 ;; Hardware stack levels used:    1
  4459 ;; Hardware stack levels required when called:    9
  4460 ;; This function calls:
  4461 ;;		_printf
  4462 ;; This function is called by:
  4463 ;;		_SR_FRSStart
  4464 ;; This function uses a non-reentrant model
  4465 ;;
  4466                           
  4467                           
  4468                           ;psect for function _SetPowerSave
  4469  12B7                     _SetPowerSave:	
  4470                           
  4471                           ;SR_FRS.c: 44: printf("AT+DMOAUTOPOWCONTR=%c",1);
  4472                           
  4473                           ;incstack = 0
  4474                           ; Regs used in _SetPowerSave: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4475  12B7  30B0               	movlw	low (STR_3| (0+32768))
  4476  12B8  0021               	movlb	1	; select bank1
  4477  12B9  00A0               	movwf	printf@f^(0+128)
  4478  12BA  3090               	movlw	high (STR_3| (0+32768))
  4479  12BB  00A1               	movwf	(printf@f^(0+128)+1)
  4480  12BC  3001               	movlw	1
  4481  12BD  00A2               	movwf	(?_printf^(0+128)+2)
  4482  12BE  3000               	movlw	0
  4483  12BF  00A3               	movwf	(?_printf^(0+128)+3)
  4484  12C0  3180  2042         	fcall	_printf
  4485  12C2  0008               	return
  4486  12C3                     __end_of_SetPowerSave:	
  4487                           
  4488                           	psect	text25
  4489  14A4                     __ptext25:	
  4490 ;; *************** function _SetMIC *****************
  4491 ;; Defined at:
  4492 ;;		line 59 in file "SR_FRS.c"
  4493 ;; Parameters:    Size  Location     Type
  4494 ;;  volume          1    wreg     unsigned char 
  4495 ;;  scram           1   77[BANK0 ] unsigned char 
  4496 ;; Auto vars:     Size  Location     Type
  4497 ;;  volume          1   78[BANK0 ] unsigned char 
  4498 ;; Return value:  Size  Location     Type
  4499 ;;                  1    wreg      void 
  4500 ;; Registers used:
  4501 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4502 ;; Tracked objects:
  4503 ;;		On entry : 0/0
  4504 ;;		On exit  : 0/0
  4505 ;;		Unchanged: 0/0
  4506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4507 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4508 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4509 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4510 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4511 ;;Total ram usage:        6 bytes
  4512 ;; Hardware stack levels used:    1
  4513 ;; Hardware stack levels required when called:    9
  4514 ;; This function calls:
  4515 ;;		_printf
  4516 ;; This function is called by:
  4517 ;;		_SR_FRSStart
  4518 ;; This function uses a non-reentrant model
  4519 ;;
  4520                           
  4521                           
  4522                           ;psect for function _SetMIC
  4523  14A4                     _SetMIC:	
  4524                           
  4525                           ;incstack = 0
  4526                           ; Regs used in _SetMIC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4527                           ;SetMIC@volume stored from wreg
  4528  14A4  0020               	movlb	0	; select bank0
  4529  14A5  00EE               	movwf	SetMIC@volume
  4530                           
  4531                           ;SR_FRS.c: 60: if((volume < 8) && (volume > 0)){
  4532  14A6  3008               	movlw	8
  4533  14A7  026E               	subwf	SetMIC@volume,w
  4534  14A8  1803               	skipnc
  4535  14A9  0008               	return
  4536  14AA  086E               	movf	SetMIC@volume,w
  4537  14AB  1903               	btfsc	3,2
  4538  14AC  0008               	return
  4539                           
  4540                           ;SR_FRS.c: 61: printf("AT+DMOSETMIC=%c,%c,%c",volume,scram,0);
  4541  14AD  309A               	movlw	low (STR_6| (0+32768))
  4542  14AE  0021               	movlb	1	; select bank1
  4543  14AF  00A0               	movwf	printf@f^(0+128)
  4544  14B0  3090               	movlw	high (STR_6| (0+32768))
  4545  14B1  00A1               	movwf	(printf@f^(0+128)+1)
  4546  14B2  0020               	movlb	0	; select bank0
  4547  14B3  086E               	movf	SetMIC@volume,w
  4548  14B4  0021               	movlb	1	; select bank1
  4549  14B5  00C8               	movwf	??_SetMIC^(0+128)
  4550  14B6  01C9               	clrf	(??_SetMIC^(0+128)+1)
  4551  14B7  0848               	movf	??_SetMIC^(0+128),w
  4552  14B8  00A2               	movwf	(?_printf^(0+128)+2)
  4553  14B9  0849               	movf	(??_SetMIC+1)^(0+128),w
  4554  14BA  00A3               	movwf	((?_printf+1)^(0+128)+2)
  4555  14BB  0020               	movlb	0	; select bank0
  4556  14BC  086D               	movf	SetMIC@scram,w
  4557  14BD  0021               	movlb	1	; select bank1
  4558  14BE  00CA               	movwf	(??_SetMIC+2)^(0+128)
  4559  14BF  01CB               	clrf	((??_SetMIC+2)^(0+128)+1)
  4560  14C0  084A               	movf	(??_SetMIC+2)^(0+128),w
  4561  14C1  00A4               	movwf	(?_printf^(0+128)+4)
  4562  14C2  084B               	movf	(??_SetMIC+3)^(0+128),w
  4563  14C3  00A5               	movwf	((?_printf+1)^(0+128)+4)
  4564  14C4  3000               	movlw	0
  4565  14C5  00A6               	movwf	(?_printf^(0+128)+6)
  4566  14C6  00A7               	movwf	((?_printf+1)^(0+128)+6)
  4567  14C7  3180  2042         	fcall	_printf
  4568  14C9  0008               	return
  4569  14CA                     __end_of_SetMIC:	
  4570                           
  4571                           	psect	text26
  4572  147E                     __ptext26:	
  4573 ;; *************** function _SetFrequency *****************
  4574 ;; Defined at:
  4575 ;;		line 38 in file "SR_FRS.c"
  4576 ;; Parameters:    Size  Location     Type
  4577 ;;		None
  4578 ;; Auto vars:     Size  Location     Type
  4579 ;;		None
  4580 ;; Return value:  Size  Location     Type
  4581 ;;                  1    wreg      void 
  4582 ;; Registers used:
  4583 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4584 ;; Tracked objects:
  4585 ;;		On entry : 0/0
  4586 ;;		On exit  : 0/0
  4587 ;;		Unchanged: 0/0
  4588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4593 ;;Total ram usage:        0 bytes
  4594 ;; Hardware stack levels used:    1
  4595 ;; Hardware stack levels required when called:    9
  4596 ;; This function calls:
  4597 ;;		_printf
  4598 ;; This function is called by:
  4599 ;;		_SR_FRSStart
  4600 ;; This function uses a non-reentrant model
  4601 ;;
  4602                           
  4603                           
  4604                           ;psect for function _SetFrequency
  4605  147E                     _SetFrequency:	
  4606                           
  4607                           ;SR_FRS.c: 39: printf("AT+DMOSETGROUP=%d,%f,%f,%d,%d,%d,%d",0,450.0250,450.0250,83,2,83,
      +                          0);
  4608                           
  4609                           ;incstack = 0
  4610                           ; Regs used in _SetFrequency: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4611  147E  3076               	movlw	low (STR_2| (0+32768))
  4612  147F  0021               	movlb	1	; select bank1
  4613  1480  00A0               	movwf	printf@f^(0+128)
  4614  1481  3090               	movlw	high (STR_2| (0+32768))
  4615  1482  00A1               	movwf	(printf@f^(0+128)+1)
  4616  1483  3000               	movlw	0
  4617  1484  00A2               	movwf	(?_printf^(0+128)+2)
  4618  1485  00A3               	movwf	((?_printf+1)^(0+128)+2)
  4619  1486  3003               	movlw	3
  4620  1487  00A4               	movwf	(?_printf^(0+128)+4)
  4621  1488  30E1               	movlw	225
  4622  1489  00A5               	movwf	((?_printf+1)^(0+128)+4)
  4623  148A  3043               	movlw	67
  4624  148B  00A6               	movwf	((?_printf+2)^(0+128)+4)
  4625  148C  3003               	movlw	3
  4626  148D  00A7               	movwf	(?_printf^(0+128)+7)
  4627  148E  30E1               	movlw	225
  4628  148F  00A8               	movwf	((?_printf+1)^(0+128)+7)
  4629  1490  3043               	movlw	67
  4630  1491  00A9               	movwf	((?_printf+2)^(0+128)+7)
  4631  1492  3053               	movlw	83
  4632  1493  00AA               	movwf	(?_printf^(0+128)+10)
  4633  1494  3000               	movlw	0
  4634  1495  00AB               	movwf	(?_printf^(0+128)+11)
  4635  1496  3002               	movlw	2
  4636  1497  00AC               	movwf	(?_printf^(0+128)+12)
  4637  1498  3000               	movlw	0
  4638  1499  00AD               	movwf	(?_printf^(0+128)+13)
  4639  149A  3053               	movlw	83
  4640  149B  00AE               	movwf	(?_printf^(0+128)+14)
  4641  149C  3000               	movlw	0
  4642  149D  00AF               	movwf	(?_printf^(0+128)+15)
  4643  149E  3000               	movlw	0
  4644  149F  00B0               	movwf	(?_printf^(0+128)+16)
  4645  14A0  00B1               	movwf	((?_printf+1)^(0+128)+16)
  4646  14A1  3180  2042         	fcall	_printf
  4647  14A3  0008               	return
  4648  14A4                     __end_of_SetFrequency:	
  4649                           
  4650                           	psect	text27
  4651  1274                     __ptext27:	
  4652 ;; *************** function _SetCommandMode *****************
  4653 ;; Defined at:
  4654 ;;		line 34 in file "SR_FRS.c"
  4655 ;; Parameters:    Size  Location     Type
  4656 ;;		None
  4657 ;; Auto vars:     Size  Location     Type
  4658 ;;		None
  4659 ;; Return value:  Size  Location     Type
  4660 ;;                  1    wreg      void 
  4661 ;; Registers used:
  4662 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4663 ;; Tracked objects:
  4664 ;;		On entry : 0/0
  4665 ;;		On exit  : 0/0
  4666 ;;		Unchanged: 0/0
  4667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4672 ;;Total ram usage:        0 bytes
  4673 ;; Hardware stack levels used:    1
  4674 ;; Hardware stack levels required when called:    9
  4675 ;; This function calls:
  4676 ;;		_printf
  4677 ;; This function is called by:
  4678 ;;		_SR_FRSStart
  4679 ;; This function uses a non-reentrant model
  4680 ;;
  4681                           
  4682                           
  4683                           ;psect for function _SetCommandMode
  4684  1274                     _SetCommandMode:	
  4685                           
  4686                           ;SR_FRS.c: 35: printf("AT+DMOCONNECT");
  4687                           
  4688                           ;incstack = 0
  4689                           ; Regs used in _SetCommandMode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4690  1274  30D9               	movlw	low (STR_1| (0+32768))
  4691  1275  0021               	movlb	1	; select bank1
  4692  1276  00A0               	movwf	printf@f^(0+128)
  4693  1277  3090               	movlw	high (STR_1| (0+32768))
  4694  1278  00A1               	movwf	(printf@f^(0+128)+1)
  4695  1279  3180  2042         	fcall	_printf
  4696  127B  0008               	return
  4697  127C                     __end_of_SetCommandMode:	
  4698                           
  4699                           	psect	text28
  4700  0042                     __ptext28:	
  4701 ;; *************** function _printf *****************
  4702 ;; Defined at:
  4703 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  4704 ;; Parameters:    Size  Location     Type
  4705 ;;  f               2    0[BANK1 ] PTR const unsigned char 
  4706 ;;		 -> STR_6(22), STR_5(19), STR_4(19), STR_3(22), 
  4707 ;;		 -> STR_2(36), STR_1(14), 
  4708 ;; Auto vars:     Size  Location     Type
  4709 ;;  tmpval          4   32[BANK1 ] struct .
  4710 ;;  val             4   26[BANK1 ] unsigned long 
  4711 ;;  fval            3   36[BANK1 ] unsigned long 
  4712 ;;  exp             2   30[BANK1 ] int 
  4713 ;;  prec            2   24[BANK1 ] int 
  4714 ;;  flag            2   21[BANK1 ] unsigned short 
  4715 ;;  cp              2    0        PTR const unsigned char 
  4716 ;;  len             2    0        unsigned int 
  4717 ;;  width           2    0        int 
  4718 ;;  c               1   39[BANK1 ] char 
  4719 ;;  ap              1   23[BANK1 ] PTR void [1]
  4720 ;;		 -> ?_printf(2), 
  4721 ;;  d               1    0        unsigned char 
  4722 ;; Return value:  Size  Location     Type
  4723 ;;                  2    0[BANK1 ] int 
  4724 ;; Registers used:
  4725 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4726 ;; Tracked objects:
  4727 ;;		On entry : 0/0
  4728 ;;		On exit  : 0/0
  4729 ;;		Unchanged: 0/0
  4730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4731 ;;      Params:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0
  4732 ;;      Locals:         0       0      22       0       0       0       0       0       0       0       0       0       
      +0       0
  4733 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4734 ;;      Totals:         0       6      40       0       0       0       0       0       0       0       0       0       
      +0       0
  4735 ;;Total ram usage:       46 bytes
  4736 ;; Hardware stack levels used:    1
  4737 ;; Hardware stack levels required when called:    8
  4738 ;; This function calls:
  4739 ;;		___awdiv
  4740 ;;		___ftadd
  4741 ;;		___ftge
  4742 ;;		___ftmul
  4743 ;;		___ftneg
  4744 ;;		___ftsub
  4745 ;;		___fttol
  4746 ;;		___lldiv
  4747 ;;		___llmod
  4748 ;;		___lltoft
  4749 ;;		___wmul
  4750 ;;		__div_to_l_
  4751 ;;		__tdiv_to_l_
  4752 ;;		_fround
  4753 ;;		_putch
  4754 ;;		_scale
  4755 ;; This function is called by:
  4756 ;;		_SetCommandMode
  4757 ;;		_SetFrequency
  4758 ;;		_SetPowerSave
  4759 ;;		_SetVolume
  4760 ;;		_SetVOX
  4761 ;;		_SetMIC
  4762 ;; This function uses a non-reentrant model
  4763 ;;
  4764                           
  4765                           
  4766                           ;psect for function _printf
  4767  0042                     _printf:	
  4768                           
  4769                           ;doprnt.c: 466: va_list ap;
  4770                           ;doprnt.c: 499: signed char c;
  4771                           ;doprnt.c: 501: int width;
  4772                           ;doprnt.c: 504: int prec;
  4773                           ;doprnt.c: 508: unsigned short flag;
  4774                           ;doprnt.c: 515: char d;
  4775                           ;doprnt.c: 516: double fval;
  4776                           ;doprnt.c: 517: int exp;
  4777                           ;doprnt.c: 523: union {
  4778                           ;doprnt.c: 524: unsigned long vd;
  4779                           ;doprnt.c: 525: double integ;
  4780                           ;doprnt.c: 526: } tmpval;
  4781                           ;doprnt.c: 528: unsigned long val;
  4782                           ;doprnt.c: 529: unsigned len;
  4783                           ;doprnt.c: 530: const char * cp;
  4784                           ;doprnt.c: 533: *ap = __va_start();
  4785                           
  4786                           ;incstack = 0
  4787                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4788  0042  30A2               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4789  0043  0020               	movlb	0	; select bank0
  4790  0044  00E7               	movwf	??_printf
  4791  0045  0867               	movf	??_printf,w
  4792  0046  0021               	movlb	1	; select bank1
  4793  0047  00B7               	movwf	printf@ap^(0+128)
  4794  0048                     l2892:	
  4795                           ;doprnt.c: 536: while(c = *f++) {
  4796                           
  4797  0048  0021               	movlb	1	; select bank1
  4798  0049  0821               	movf	(printf@f+1)^(0+128),w
  4799  004A  0020               	movlb	0	; select bank0
  4800  004B  00E8               	movwf	??_printf+1
  4801  004C  0021               	movlb	1	; select bank1
  4802  004D  0820               	movf	printf@f^(0+128),w
  4803  004E  0020               	movlb	0	; select bank0
  4804  004F  00E7               	movwf	??_printf
  4805  0050  0021               	movlb	1	; select bank1
  4806  0051  0AA0               	incf	printf@f^(0+128),f
  4807  0052  1903               	skipnz
  4808  0053  0AA1               	incf	(printf@f+1)^(0+128),f
  4809  0054  0020               	movlb	0	; select bank0
  4810  0055  0867               	movf	??_printf,w
  4811  0056  0084               	movwf	4
  4812  0057  0868               	movf	??_printf+1,w
  4813  0058  0085               	movwf	5
  4814  0059  0800               	movf	0,w	;code access
  4815  005A  00E9               	movwf	??_printf+2
  4816  005B  0869               	movf	??_printf+2,w
  4817  005C  0021               	movlb	1	; select bank1
  4818  005D  00C7               	movwf	printf@c^(0+128)
  4819  005E  0847               	movf	printf@c^(0+128),w
  4820  005F  1903               	btfsc	3,2
  4821  0060  0008               	return
  4822                           
  4823                           ;doprnt.c: 538: if(c != '%')
  4824  0061  3025               	movlw	37
  4825  0062  0647               	xorwf	printf@c^(0+128),w
  4826  0063  1903               	btfsc	3,2
  4827  0064  286A               	goto	l2716
  4828                           
  4829                           ;doprnt.c: 540: {
  4830                           ;doprnt.c: 541: (putch(c) );
  4831  0065  0847               	movf	printf@c^(0+128),w
  4832  0066  3192  2260  3180   	fcall	_putch
  4833                           
  4834                           ;doprnt.c: 542: continue;
  4835  0069  2848               	goto	l2892
  4836  006A                     l2716:	
  4837                           
  4838                           ;doprnt.c: 543: }
  4839                           ;doprnt.c: 548: flag = 0;
  4840  006A  0021               	movlb	1	; select bank1
  4841  006B  01B5               	clrf	printf@flag^(0+128)
  4842  006C  01B6               	clrf	(printf@flag+1)^(0+128)
  4843                           
  4844                           ;doprnt.c: 635: switch(c = *f++) {
  4845  006D  2884               	goto	l2726
  4846  006E                     l372:	
  4847                           ;doprnt.c: 662: case 'f':
  4848                           
  4849                           ;doprnt.c: 638: goto alldone;
  4850                           
  4851                           ;doprnt.c: 637: case 0:
  4852                           
  4853                           
  4854                           ;doprnt.c: 663: flag |= 0x400;
  4855  006E  1536               	bsf	(printf@flag^(0+128)+1),2
  4856                           
  4857                           ;doprnt.c: 698: case 'i':
  4858                           ;doprnt.c: 699: break;
  4859                           
  4860                           ;doprnt.c: 697: case 'd':
  4861                           
  4862                           ;doprnt.c: 664: break;
  4863  006F  28A8               	goto	l2728
  4864  0070                     l2718:	
  4865                           ;doprnt.c: 784: case 'c':
  4866                           
  4867                           
  4868                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4869  0070  0837               	movf	printf@ap^(0+128),w
  4870  0071  0086               	movwf	6
  4871  0072  0187               	clrf	7
  4872  0073  0801               	movf	1,w
  4873  0074  0020               	movlb	0	; select bank0
  4874  0075  00E7               	movwf	??_printf
  4875  0076  0867               	movf	??_printf,w
  4876  0077  0021               	movlb	1	; select bank1
  4877  0078  00C7               	movwf	printf@c^(0+128)
  4878  0079  3002               	movlw	2
  4879  007A  0020               	movlb	0	; select bank0
  4880  007B  00E7               	movwf	??_printf
  4881  007C  0867               	movf	??_printf,w
  4882  007D  0021               	movlb	1	; select bank1
  4883  007E  07B7               	addwf	printf@ap^(0+128),f
  4884  007F                     l2722:	
  4885                           ;doprnt.c: 802: default:
  4886                           
  4887                           
  4888                           ;doprnt.c: 809: (putch(c) );
  4889  007F  0847               	movf	printf@c^(0+128),w
  4890  0080  3192  2260  3180   	fcall	_putch
  4891                           
  4892                           ;doprnt.c: 810: continue;
  4893  0083  2848               	goto	l2892
  4894  0084                     l2726:	
  4895                           ;doprnt.c: 822: }
  4896                           
  4897  0084  0021               	movlb	1	; select bank1
  4898  0085  0821               	movf	(printf@f+1)^(0+128),w
  4899  0086  0020               	movlb	0	; select bank0
  4900  0087  00E8               	movwf	??_printf+1
  4901  0088  0021               	movlb	1	; select bank1
  4902  0089  0820               	movf	printf@f^(0+128),w
  4903  008A  0020               	movlb	0	; select bank0
  4904  008B  00E7               	movwf	??_printf
  4905  008C  0021               	movlb	1	; select bank1
  4906  008D  0AA0               	incf	printf@f^(0+128),f
  4907  008E  1903               	skipnz
  4908  008F  0AA1               	incf	(printf@f+1)^(0+128),f
  4909  0090  0020               	movlb	0	; select bank0
  4910  0091  0867               	movf	??_printf,w
  4911  0092  0084               	movwf	4
  4912  0093  0868               	movf	??_printf+1,w
  4913  0094  0085               	movwf	5
  4914  0095  0800               	movf	0,w	;code access
  4915  0096  0021               	movlb	1	; select bank1
  4916  0097  00C7               	movwf	printf@c^(0+128)
  4917                           
  4918                           ; Switch size 1, requested type "space"
  4919                           ; Number of cases is 5, Range of values is 0 to 105
  4920                           ; switch strategies available:
  4921                           ; Name         Instructions Cycles
  4922                           ; simple_byte           16     9 (average)
  4923                           ; direct_byte          218     6 (fixed)
  4924                           ; jumptable            260     6 (fixed)
  4925                           ;	Chosen strategy is simple_byte
  4926  0098  3A00               	xorlw	0	; case 0
  4927  0099  1903               	skipnz
  4928  009A  2DC5               	goto	l424
  4929  009B  3A63               	xorlw	99	; case 99
  4930  009C  1903               	skipnz
  4931  009D  2870               	goto	l2718
  4932  009E  3A07               	xorlw	7	; case 100
  4933  009F  1903               	skipnz
  4934  00A0  28A8               	goto	l2728
  4935  00A1  3A02               	xorlw	2	; case 102
  4936  00A2  1903               	skipnz
  4937  00A3  286E               	goto	l372
  4938  00A4  3A0F               	xorlw	15	; case 105
  4939  00A5  1903               	skipnz
  4940  00A6  28A8               	goto	l2728
  4941  00A7  287F               	goto	l2722
  4942  00A8                     l2728:	
  4943                           
  4944                           ;doprnt.c: 825: if(flag & (0x700)) {
  4945  00A8  3000               	movlw	0
  4946  00A9  0021               	movlb	1	; select bank1
  4947  00AA  0535               	andwf	printf@flag^(0+128),w
  4948  00AB  0020               	movlb	0	; select bank0
  4949  00AC  00E7               	movwf	??_printf
  4950  00AD  3007               	movlw	7
  4951  00AE  0021               	movlb	1	; select bank1
  4952  00AF  0536               	andwf	(printf@flag+1)^(0+128),w
  4953  00B0  0020               	movlb	0	; select bank0
  4954  00B1  00E8               	movwf	??_printf+1
  4955  00B2  0867               	movf	??_printf,w
  4956  00B3  0468               	iorwf	??_printf+1,w
  4957  00B4  1903               	btfsc	3,2
  4958  00B5  2CF1               	goto	l2858
  4959                           
  4960                           ;doprnt.c: 829: prec = 6;
  4961  00B6  3006               	movlw	6
  4962  00B7  0021               	movlb	1	; select bank1
  4963  00B8  00B8               	movwf	printf@prec^(0+128)
  4964  00B9  3000               	movlw	0
  4965  00BA  00B9               	movwf	(printf@prec^(0+128)+1)
  4966                           
  4967                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4968  00BB  0837               	movf	printf@ap^(0+128),w
  4969  00BC  0086               	movwf	6
  4970  00BD  0187               	clrf	7
  4971  00BE  3F40               	moviw [0]fsr1
  4972  00BF  00C4               	movwf	printf@fval^(0+128)
  4973  00C0  3F41               	moviw [1]fsr1
  4974  00C1  00C5               	movwf	(printf@fval+1)^(0+128)
  4975  00C2  3F42               	moviw [2]fsr1
  4976  00C3  00C6               	movwf	(printf@fval+2)^(0+128)
  4977  00C4  3003               	movlw	3
  4978  00C5  0020               	movlb	0	; select bank0
  4979  00C6  00E7               	movwf	??_printf
  4980  00C7  0867               	movf	??_printf,w
  4981  00C8  0021               	movlb	1	; select bank1
  4982  00C9  07B7               	addwf	printf@ap^(0+128),f
  4983                           
  4984                           ;doprnt.c: 831: if(fval < 0.0) {
  4985  00CA  0844               	movf	printf@fval^(0+128),w
  4986  00CB  0020               	movlb	0	; select bank0
  4987  00CC  00A0               	movwf	___ftge@ff1
  4988  00CD  0021               	movlb	1	; select bank1
  4989  00CE  0845               	movf	(printf@fval+1)^(0+128),w
  4990  00CF  0020               	movlb	0	; select bank0
  4991  00D0  00A1               	movwf	___ftge@ff1+1
  4992  00D1  0021               	movlb	1	; select bank1
  4993  00D2  0846               	movf	(printf@fval+2)^(0+128),w
  4994  00D3  0020               	movlb	0	; select bank0
  4995  00D4  00A2               	movwf	___ftge@ff1+2
  4996  00D5  3000               	movlw	0
  4997  00D6  00A3               	movwf	___ftge@ff2
  4998  00D7  3000               	movlw	0
  4999  00D8  00A4               	movwf	___ftge@ff2+1
  5000  00D9  3000               	movlw	0
  5001  00DA  00A5               	movwf	___ftge@ff2+2
  5002  00DB  3194  24CA  3180   	fcall	___ftge
  5003  00DE  1803               	btfsc	3,0
  5004  00DF  28FF               	goto	l2742
  5005                           
  5006                           ;doprnt.c: 832: fval = -fval;
  5007  00E0  0021               	movlb	1	; select bank1
  5008  00E1  0844               	movf	printf@fval^(0+128),w
  5009  00E2  0020               	movlb	0	; select bank0
  5010  00E3  00A0               	movwf	___ftneg@f1
  5011  00E4  0021               	movlb	1	; select bank1
  5012  00E5  0845               	movf	(printf@fval+1)^(0+128),w
  5013  00E6  0020               	movlb	0	; select bank0
  5014  00E7  00A1               	movwf	___ftneg@f1+1
  5015  00E8  0021               	movlb	1	; select bank1
  5016  00E9  0846               	movf	(printf@fval+2)^(0+128),w
  5017  00EA  0020               	movlb	0	; select bank0
  5018  00EB  00A2               	movwf	___ftneg@f1+2
  5019  00EC  3192  227C  3180   	fcall	___ftneg
  5020  00EF  0020               	movlb	0	; select bank0
  5021  00F0  0820               	movf	?___ftneg,w
  5022  00F1  0021               	movlb	1	; select bank1
  5023  00F2  00C4               	movwf	printf@fval^(0+128)
  5024  00F3  0020               	movlb	0	; select bank0
  5025  00F4  0821               	movf	?___ftneg+1,w
  5026  00F5  0021               	movlb	1	; select bank1
  5027  00F6  00C5               	movwf	(printf@fval+1)^(0+128)
  5028  00F7  0020               	movlb	0	; select bank0
  5029  00F8  0822               	movf	?___ftneg+2,w
  5030  00F9  0021               	movlb	1	; select bank1
  5031  00FA  00C6               	movwf	(printf@fval+2)^(0+128)
  5032                           
  5033                           ;doprnt.c: 833: flag |= 0x03;
  5034  00FB  3003               	movlw	3
  5035  00FC  04B5               	iorwf	printf@flag^(0+128),f
  5036  00FD  3000               	movlw	0
  5037  00FE  04B6               	iorwf	(printf@flag+1)^(0+128),f
  5038  00FF                     l2742:	
  5039                           
  5040                           ;doprnt.c: 834: }
  5041                           ;doprnt.c: 835: exp = 0;
  5042  00FF  0021               	movlb	1	; select bank1
  5043  0100  01BE               	clrf	printf@exp^(0+128)
  5044  0101  01BF               	clrf	(printf@exp+1)^(0+128)
  5045                           
  5046                           ;doprnt.c: 836: if( fval!=0) {
  5047  0102  0846               	movf	(printf@fval+2)^(0+128),w
  5048  0103  0445               	iorwf	(printf@fval+1)^(0+128),w
  5049  0104  0444               	iorwf	printf@fval^(0+128),w
  5050  0105  1903               	skipnz
  5051  0106  29D1               	goto	l380
  5052                           
  5053                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  5054  0107  30C4               	movlw	low (printf@fval| 0)
  5055  0108  0086               	movwf	6
  5056  0109  0187               	clrf	7
  5057  010A  3F40               	moviw [0]fsr1
  5058  010B  0020               	movlb	0	; select bank0
  5059  010C  00E7               	movwf	??_printf
  5060  010D  3F41               	moviw [1]fsr1
  5061  010E  00E8               	movwf	??_printf+1
  5062  010F  3F42               	moviw [2]fsr1
  5063  0110  00E9               	movwf	??_printf+2
  5064  0111  3F43               	moviw [3]fsr1
  5065  0112  00EA               	movwf	??_printf+3
  5066  0113  300F               	movlw	15
  5067  0114                     u3625:	
  5068  0114  36EA               	lsrf	??_printf+3,f
  5069  0115  0CE9               	rrf	??_printf+2,f
  5070  0116  0CE8               	rrf	??_printf+1,f
  5071  0117  0CE7               	rrf	??_printf,f
  5072  0118  0B89               	decfsz	9,f
  5073  0119  2914               	goto	u3625
  5074  011A  30FF               	movlw	255
  5075  011B  0567               	andwf	??_printf,w
  5076  011C  00EB               	movwf	??_printf+4
  5077  011D  3000               	movlw	0
  5078  011E  0568               	andwf	??_printf+1,w
  5079  011F  00EC               	movwf	??_printf+5
  5080  0120  086B               	movf	??_printf+4,w
  5081  0121  3E82               	addlw	130
  5082  0122  0021               	movlb	1	; select bank1
  5083  0123  00BE               	movwf	printf@exp^(0+128)
  5084  0124  30FF               	movlw	255
  5085  0125  0020               	movlb	0	; select bank0
  5086  0126  3D6C               	addwfc	??_printf+5,w
  5087  0127  0021               	movlb	1	; select bank1
  5088  0128  00BF               	movwf	(printf@exp+1)^(0+128)
  5089                           
  5090                           ;doprnt.c: 838: exp--;
  5091  0129  30FF               	movlw	255
  5092  012A  07BE               	addwf	printf@exp^(0+128),f
  5093  012B  30FF               	movlw	255
  5094  012C  3DBF               	addwfc	(printf@exp+1)^(0+128),f
  5095                           
  5096                           ;doprnt.c: 839: exp *= 3;
  5097  012D  3003               	movlw	3
  5098  012E  0020               	movlb	0	; select bank0
  5099  012F  00B0               	movwf	___wmul@multiplier
  5100  0130  3000               	movlw	0
  5101  0131  00B1               	movwf	___wmul@multiplier+1
  5102  0132  0021               	movlb	1	; select bank1
  5103  0133  083F               	movf	(printf@exp+1)^(0+128),w
  5104  0134  0020               	movlb	0	; select bank0
  5105  0135  00B3               	movwf	___wmul@multiplicand+1
  5106  0136  0021               	movlb	1	; select bank1
  5107  0137  083E               	movf	printf@exp^(0+128),w
  5108  0138  0020               	movlb	0	; select bank0
  5109  0139  00B2               	movwf	___wmul@multiplicand
  5110  013A  3193  238F  3180   	fcall	___wmul
  5111  013D  0020               	movlb	0	; select bank0
  5112  013E  0831               	movf	?___wmul+1,w
  5113  013F  0021               	movlb	1	; select bank1
  5114  0140  00BF               	movwf	(printf@exp+1)^(0+128)
  5115  0141  0020               	movlb	0	; select bank0
  5116  0142  0830               	movf	?___wmul,w
  5117  0143  0021               	movlb	1	; select bank1
  5118  0144  00BE               	movwf	printf@exp^(0+128)
  5119                           
  5120                           ;doprnt.c: 840: exp /= 10;
  5121  0145  300A               	movlw	10
  5122  0146  0020               	movlb	0	; select bank0
  5123  0147  00A7               	movwf	___awdiv@divisor
  5124  0148  3000               	movlw	0
  5125  0149  00A8               	movwf	___awdiv@divisor+1
  5126  014A  0021               	movlb	1	; select bank1
  5127  014B  083F               	movf	(printf@exp+1)^(0+128),w
  5128  014C  0020               	movlb	0	; select bank0
  5129  014D  00AA               	movwf	___awdiv@dividend+1
  5130  014E  0021               	movlb	1	; select bank1
  5131  014F  083E               	movf	printf@exp^(0+128),w
  5132  0150  0020               	movlb	0	; select bank0
  5133  0151  00A9               	movwf	___awdiv@dividend
  5134  0152  3196  266F  3180   	fcall	___awdiv
  5135  0155  0020               	movlb	0	; select bank0
  5136  0156  0828               	movf	?___awdiv+1,w
  5137  0157  0021               	movlb	1	; select bank1
  5138  0158  00BF               	movwf	(printf@exp+1)^(0+128)
  5139  0159  0020               	movlb	0	; select bank0
  5140  015A  0827               	movf	?___awdiv,w
  5141  015B  0021               	movlb	1	; select bank1
  5142  015C  00BE               	movwf	printf@exp^(0+128)
  5143                           
  5144                           ;doprnt.c: 841: if(exp < 0)
  5145  015D  1FBF               	btfss	(printf@exp+1)^(0+128),7
  5146  015E  2963               	goto	l2758
  5147                           
  5148                           ;doprnt.c: 842: exp--;
  5149  015F  30FF               	movlw	255
  5150  0160  07BE               	addwf	printf@exp^(0+128),f
  5151  0161  30FF               	movlw	255
  5152  0162  3DBF               	addwfc	(printf@exp+1)^(0+128),f
  5153  0163                     l2758:	
  5154                           
  5155                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  5156  0163  033E               	decf	printf@exp^(0+128),w
  5157  0164  3AFF               	xorlw	255
  5158  0165  318D  25BA  3180   	fcall	_scale
  5159  0168  0020               	movlb	0	; select bank0
  5160  0169  0846               	movf	?_scale,w
  5161  016A  0021               	movlb	1	; select bank1
  5162  016B  00C0               	movwf	printf@tmpval^(0+128)
  5163  016C  0020               	movlb	0	; select bank0
  5164  016D  0847               	movf	?_scale+1,w
  5165  016E  0021               	movlb	1	; select bank1
  5166  016F  00C1               	movwf	(printf@tmpval+1)^(0+128)
  5167  0170  0020               	movlb	0	; select bank0
  5168  0171  0848               	movf	?_scale+2,w
  5169  0172  0021               	movlb	1	; select bank1
  5170  0173  00C2               	movwf	(printf@tmpval+2)^(0+128)
  5171                           
  5172                           ;doprnt.c: 847: tmpval.integ *= fval;
  5173  0174  0844               	movf	printf@fval^(0+128),w
  5174  0175  0020               	movlb	0	; select bank0
  5175  0176  00B6               	movwf	___ftmul@f1
  5176  0177  0021               	movlb	1	; select bank1
  5177  0178  0845               	movf	(printf@fval+1)^(0+128),w
  5178  0179  0020               	movlb	0	; select bank0
  5179  017A  00B7               	movwf	___ftmul@f1+1
  5180  017B  0021               	movlb	1	; select bank1
  5181  017C  0846               	movf	(printf@fval+2)^(0+128),w
  5182  017D  0020               	movlb	0	; select bank0
  5183  017E  00B8               	movwf	___ftmul@f1+2
  5184  017F  0021               	movlb	1	; select bank1
  5185  0180  0840               	movf	printf@tmpval^(0+128),w
  5186  0181  0020               	movlb	0	; select bank0
  5187  0182  00B9               	movwf	___ftmul@f2
  5188  0183  0021               	movlb	1	; select bank1
  5189  0184  0841               	movf	(printf@tmpval+1)^(0+128),w
  5190  0185  0020               	movlb	0	; select bank0
  5191  0186  00BA               	movwf	___ftmul@f2+1
  5192  0187  0021               	movlb	1	; select bank1
  5193  0188  0842               	movf	(printf@tmpval+2)^(0+128),w
  5194  0189  0020               	movlb	0	; select bank0
  5195  018A  00BB               	movwf	___ftmul@f2+2
  5196  018B  3189  21F6  3180   	fcall	___ftmul
  5197  018E  0020               	movlb	0	; select bank0
  5198  018F  0836               	movf	?___ftmul,w
  5199  0190  0021               	movlb	1	; select bank1
  5200  0191  00C0               	movwf	printf@tmpval^(0+128)
  5201  0192  0020               	movlb	0	; select bank0
  5202  0193  0837               	movf	?___ftmul+1,w
  5203  0194  0021               	movlb	1	; select bank1
  5204  0195  00C1               	movwf	(printf@tmpval+1)^(0+128)
  5205  0196  0020               	movlb	0	; select bank0
  5206  0197  0838               	movf	?___ftmul+2,w
  5207  0198  0021               	movlb	1	; select bank1
  5208  0199  00C2               	movwf	(printf@tmpval+2)^(0+128)
  5209                           
  5210                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  5211  019A  0840               	movf	printf@tmpval^(0+128),w
  5212  019B  0020               	movlb	0	; select bank0
  5213  019C  00A0               	movwf	___ftge@ff1
  5214  019D  0021               	movlb	1	; select bank1
  5215  019E  0841               	movf	(printf@tmpval+1)^(0+128),w
  5216  019F  0020               	movlb	0	; select bank0
  5217  01A0  00A1               	movwf	___ftge@ff1+1
  5218  01A1  0021               	movlb	1	; select bank1
  5219  01A2  0842               	movf	(printf@tmpval+2)^(0+128),w
  5220  01A3  0020               	movlb	0	; select bank0
  5221  01A4  00A2               	movwf	___ftge@ff1+2
  5222  01A5  3000               	movlw	0
  5223  01A6  00A3               	movwf	___ftge@ff2
  5224  01A7  3080               	movlw	128
  5225  01A8  00A4               	movwf	___ftge@ff2+1
  5226  01A9  303F               	movlw	63
  5227  01AA  00A5               	movwf	___ftge@ff2+2
  5228  01AB  3194  24CA  3180   	fcall	___ftge
  5229  01AE  1803               	btfsc	3,0
  5230  01AF  29B5               	goto	l2766
  5231                           
  5232                           ;doprnt.c: 849: exp--;
  5233  01B0  30FF               	movlw	255
  5234  01B1  0021               	movlb	1	; select bank1
  5235  01B2  07BE               	addwf	printf@exp^(0+128),f
  5236  01B3  30FF               	movlw	255
  5237  01B4  29D0               	goto	L1
  5238  01B5                     l2766:	
  5239                           
  5240                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  5241  01B5  0021               	movlb	1	; select bank1
  5242  01B6  0840               	movf	printf@tmpval^(0+128),w
  5243  01B7  0020               	movlb	0	; select bank0
  5244  01B8  00A0               	movwf	___ftge@ff1
  5245  01B9  0021               	movlb	1	; select bank1
  5246  01BA  0841               	movf	(printf@tmpval+1)^(0+128),w
  5247  01BB  0020               	movlb	0	; select bank0
  5248  01BC  00A1               	movwf	___ftge@ff1+1
  5249  01BD  0021               	movlb	1	; select bank1
  5250  01BE  0842               	movf	(printf@tmpval+2)^(0+128),w
  5251  01BF  0020               	movlb	0	; select bank0
  5252  01C0  00A2               	movwf	___ftge@ff1+2
  5253  01C1  3000               	movlw	0
  5254  01C2  00A3               	movwf	___ftge@ff2
  5255  01C3  3020               	movlw	32
  5256  01C4  00A4               	movwf	___ftge@ff2+1
  5257  01C5  3041               	movlw	65
  5258  01C6  00A5               	movwf	___ftge@ff2+2
  5259  01C7  3194  24CA  3180   	fcall	___ftge
  5260  01CA  1C03               	btfss	3,0
  5261  01CB  29D1               	goto	l380
  5262                           
  5263                           ;doprnt.c: 851: exp++;
  5264  01CC  3001               	movlw	1
  5265  01CD  0021               	movlb	1	; select bank1
  5266  01CE  07BE               	addwf	printf@exp^(0+128),f
  5267  01CF  3000               	movlw	0
  5268  01D0                     L1:	
  5269  01D0  3DBF               	addwfc	(printf@exp+1)^(0+128),f
  5270  01D1                     l380:	
  5271                           
  5272                           ;doprnt.c: 852: }
  5273                           ;doprnt.c: 1112: if(prec <= 12)
  5274  01D1  0021               	movlb	1	; select bank1
  5275  01D2  0839               	movf	(printf@prec+1)^(0+128),w
  5276  01D3  3A80               	xorlw	128
  5277  01D4  0020               	movlb	0	; select bank0
  5278  01D5  00E7               	movwf	??_printf
  5279  01D6  3080               	movlw	128
  5280  01D7  0267               	subwf	??_printf,w
  5281  01D8  1D03               	skipz
  5282  01D9  29DD               	goto	u3665
  5283  01DA  300D               	movlw	13
  5284  01DB  0021               	movlb	1	; select bank1
  5285  01DC  0238               	subwf	printf@prec^(0+128),w
  5286  01DD                     u3665:	
  5287  01DD  1803               	skipnc
  5288  01DE  2A06               	goto	l2772
  5289                           
  5290                           ;doprnt.c: 1113: fval += fround(prec);
  5291  01DF  0021               	movlb	1	; select bank1
  5292  01E0  0838               	movf	printf@prec^(0+128),w
  5293  01E1  3185  25C6  3180   	fcall	_fround
  5294  01E4  0020               	movlb	0	; select bank0
  5295  01E5  0846               	movf	?_fround,w
  5296  01E6  00D4               	movwf	___ftadd@f1
  5297  01E7  0847               	movf	?_fround+1,w
  5298  01E8  00D5               	movwf	___ftadd@f1+1
  5299  01E9  0848               	movf	?_fround+2,w
  5300  01EA  00D6               	movwf	___ftadd@f1+2
  5301  01EB  0021               	movlb	1	; select bank1
  5302  01EC  0844               	movf	printf@fval^(0+128),w
  5303  01ED  0020               	movlb	0	; select bank0
  5304  01EE  00D7               	movwf	___ftadd@f2
  5305  01EF  0021               	movlb	1	; select bank1
  5306  01F0  0845               	movf	(printf@fval+1)^(0+128),w
  5307  01F1  0020               	movlb	0	; select bank0
  5308  01F2  00D8               	movwf	___ftadd@f2+1
  5309  01F3  0021               	movlb	1	; select bank1
  5310  01F4  0846               	movf	(printf@fval+2)^(0+128),w
  5311  01F5  0020               	movlb	0	; select bank0
  5312  01F6  00D9               	movwf	___ftadd@f2+2
  5313  01F7  318A  22AA  3180   	fcall	___ftadd
  5314  01FA  0020               	movlb	0	; select bank0
  5315  01FB  0854               	movf	?___ftadd,w
  5316  01FC  0021               	movlb	1	; select bank1
  5317  01FD  00C4               	movwf	printf@fval^(0+128)
  5318  01FE  0020               	movlb	0	; select bank0
  5319  01FF  0855               	movf	?___ftadd+1,w
  5320  0200  0021               	movlb	1	; select bank1
  5321  0201  00C5               	movwf	(printf@fval+1)^(0+128)
  5322  0202  0020               	movlb	0	; select bank0
  5323  0203  0856               	movf	?___ftadd+2,w
  5324  0204  0021               	movlb	1	; select bank1
  5325  0205  00C6               	movwf	(printf@fval+2)^(0+128)
  5326  0206                     l2772:	
  5327                           
  5328                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5329  0206  0021               	movlb	1	; select bank1
  5330  0207  083F               	movf	(printf@exp+1)^(0+128),w
  5331  0208  3A80               	xorlw	128
  5332  0209  0020               	movlb	0	; select bank0
  5333  020A  00E7               	movwf	??_printf
  5334  020B  3080               	movlw	128
  5335  020C  0267               	subwf	??_printf,w
  5336  020D  1D03               	skipz
  5337  020E  2A12               	goto	u3675
  5338  020F  300A               	movlw	10
  5339  0210  0021               	movlb	1	; select bank1
  5340  0211  023E               	subwf	printf@exp^(0+128),w
  5341  0212                     u3675:	
  5342  0212  1803               	skipnc
  5343  0213  2A3D               	goto	l2780
  5344  0214  0021               	movlb	1	; select bank1
  5345  0215  0846               	movf	(printf@fval+2)^(0+128),w
  5346  0216  0445               	iorwf	(printf@fval+1)^(0+128),w
  5347  0217  0444               	iorwf	printf@fval^(0+128),w
  5348  0218  1903               	skipnz
  5349  0219  2A9C               	goto	l2794
  5350  021A  0844               	movf	printf@fval^(0+128),w
  5351  021B  0020               	movlb	0	; select bank0
  5352  021C  00CF               	movwf	___fttol@f1
  5353  021D  0021               	movlb	1	; select bank1
  5354  021E  0845               	movf	(printf@fval+1)^(0+128),w
  5355  021F  0020               	movlb	0	; select bank0
  5356  0220  00D0               	movwf	___fttol@f1+1
  5357  0221  0021               	movlb	1	; select bank1
  5358  0222  0846               	movf	(printf@fval+2)^(0+128),w
  5359  0223  0020               	movlb	0	; select bank0
  5360  0224  00D1               	movwf	___fttol@f1+2
  5361  0225  3197  2779  3180   	fcall	___fttol
  5362  0228  0020               	movlb	0	; select bank0
  5363  0229  0852               	movf	?___fttol+3,w
  5364  022A  0451               	iorwf	?___fttol+2,w
  5365  022B  0450               	iorwf	?___fttol+1,w
  5366  022C  044F               	iorwf	?___fttol,w
  5367  022D  1D03               	skipz
  5368  022E  2A9C               	goto	l2794
  5369  022F  0021               	movlb	1	; select bank1
  5370  0230  083F               	movf	(printf@exp+1)^(0+128),w
  5371  0231  3A80               	xorlw	128
  5372  0232  0020               	movlb	0	; select bank0
  5373  0233  00E7               	movwf	??_printf
  5374  0234  3080               	movlw	128
  5375  0235  0267               	subwf	??_printf,w
  5376  0236  1D03               	skipz
  5377  0237  2A3B               	goto	u3705
  5378  0238  3002               	movlw	2
  5379  0239  0021               	movlb	1	; select bank1
  5380  023A  023E               	subwf	printf@exp^(0+128),w
  5381  023B                     u3705:	
  5382  023B  1C03               	skipc
  5383  023C  2A9C               	goto	l2794
  5384  023D                     l2780:	
  5385                           
  5386                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  5387  023D  0021               	movlb	1	; select bank1
  5388  023E  0840               	movf	printf@tmpval^(0+128),w
  5389  023F  0020               	movlb	0	; select bank0
  5390  0240  00A0               	movwf	___ftge@ff1
  5391  0241  0021               	movlb	1	; select bank1
  5392  0242  0841               	movf	(printf@tmpval+1)^(0+128),w
  5393  0243  0020               	movlb	0	; select bank0
  5394  0244  00A1               	movwf	___ftge@ff1+1
  5395  0245  0021               	movlb	1	; select bank1
  5396  0246  0842               	movf	(printf@tmpval+2)^(0+128),w
  5397  0247  0020               	movlb	0	; select bank0
  5398  0248  00A2               	movwf	___ftge@ff1+2
  5399  0249  3070               	movlw	112
  5400  024A  00A3               	movwf	___ftge@ff2
  5401  024B  3089               	movlw	137
  5402  024C  00A4               	movwf	___ftge@ff2+1
  5403  024D  3040               	movlw	64
  5404  024E  00A5               	movwf	___ftge@ff2+2
  5405  024F  3194  24CA  3180   	fcall	___ftge
  5406  0252  1803               	btfsc	3,0
  5407  0253  2A56               	goto	l2784
  5408                           
  5409                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5410  0254  30F7               	movlw	247
  5411  0255  2A57               	goto	L2
  5412  0256                     l2784:	
  5413                           ;doprnt.c: 1122: }else{
  5414                           
  5415                           
  5416                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5417  0256  30F8               	movlw	248
  5418  0257                     L2:	
  5419  0257  0021               	movlb	1	; select bank1
  5420  0258  07BE               	addwf	printf@exp^(0+128),f
  5421  0259  30FF               	movlw	255
  5422  025A  3DBF               	addwfc	(printf@exp+1)^(0+128),f
  5423                           
  5424                           ;doprnt.c: 1124: }
  5425                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  5426  025B  083E               	movf	printf@exp^(0+128),w
  5427  025C  318D  25BA  3180   	fcall	_scale
  5428  025F  0020               	movlb	0	; select bank0
  5429  0260  0846               	movf	?_scale,w
  5430  0261  0021               	movlb	1	; select bank1
  5431  0262  00C0               	movwf	printf@tmpval^(0+128)
  5432  0263  0020               	movlb	0	; select bank0
  5433  0264  0847               	movf	?_scale+1,w
  5434  0265  0021               	movlb	1	; select bank1
  5435  0266  00C1               	movwf	(printf@tmpval+1)^(0+128)
  5436  0267  0020               	movlb	0	; select bank0
  5437  0268  0848               	movf	?_scale+2,w
  5438  0269  0021               	movlb	1	; select bank1
  5439  026A  00C2               	movwf	(printf@tmpval+2)^(0+128)
  5440                           
  5441                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5442  026B  0844               	movf	printf@fval^(0+128),w
  5443  026C  0020               	movlb	0	; select bank0
  5444  026D  00A0               	movwf	__tdiv_to_l_@f1
  5445  026E  0021               	movlb	1	; select bank1
  5446  026F  0845               	movf	(printf@fval+1)^(0+128),w
  5447  0270  0020               	movlb	0	; select bank0
  5448  0271  00A1               	movwf	__tdiv_to_l_@f1+1
  5449  0272  0021               	movlb	1	; select bank1
  5450  0273  0846               	movf	(printf@fval+2)^(0+128),w
  5451  0274  0020               	movlb	0	; select bank0
  5452  0275  00A2               	movwf	__tdiv_to_l_@f1+2
  5453  0276  0021               	movlb	1	; select bank1
  5454  0277  0840               	movf	printf@tmpval^(0+128),w
  5455  0278  0020               	movlb	0	; select bank0
  5456  0279  00A3               	movwf	__tdiv_to_l_@f2
  5457  027A  0021               	movlb	1	; select bank1
  5458  027B  0841               	movf	(printf@tmpval+1)^(0+128),w
  5459  027C  0020               	movlb	0	; select bank0
  5460  027D  00A4               	movwf	__tdiv_to_l_@f2+1
  5461  027E  0021               	movlb	1	; select bank1
  5462  027F  0842               	movf	(printf@tmpval+2)^(0+128),w
  5463  0280  0020               	movlb	0	; select bank0
  5464  0281  00A5               	movwf	__tdiv_to_l_@f2+2
  5465  0282  3187  272C  3180   	fcall	__tdiv_to_l_
  5466  0285  0020               	movlb	0	; select bank0
  5467  0286  0823               	movf	?__tdiv_to_l_+3,w
  5468  0287  0021               	movlb	1	; select bank1
  5469  0288  00BD               	movwf	(printf@val+3)^(0+128)
  5470  0289  0020               	movlb	0	; select bank0
  5471  028A  0822               	movf	?__tdiv_to_l_+2,w
  5472  028B  0021               	movlb	1	; select bank1
  5473  028C  00BC               	movwf	(printf@val+2)^(0+128)
  5474  028D  0020               	movlb	0	; select bank0
  5475  028E  0821               	movf	?__tdiv_to_l_+1,w
  5476  028F  0021               	movlb	1	; select bank1
  5477  0290  00BB               	movwf	(printf@val+1)^(0+128)
  5478  0291  0020               	movlb	0	; select bank0
  5479  0292  0820               	movf	?__tdiv_to_l_,w
  5480  0293  0021               	movlb	1	; select bank1
  5481  0294  00BA               	movwf	printf@val^(0+128)
  5482                           
  5483                           ;doprnt.c: 1129: fval = 0.0;
  5484  0295  3000               	movlw	0
  5485  0296  00C4               	movwf	printf@fval^(0+128)
  5486  0297  3000               	movlw	0
  5487  0298  00C5               	movwf	(printf@fval+1)^(0+128)
  5488  0299  3000               	movlw	0
  5489  029A  00C6               	movwf	(printf@fval+2)^(0+128)
  5490                           
  5491                           ;doprnt.c: 1130: } else {
  5492  029B  2AF1               	goto	l2798
  5493  029C                     l2794:	
  5494                           
  5495                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5496  029C  0021               	movlb	1	; select bank1
  5497  029D  0844               	movf	printf@fval^(0+128),w
  5498  029E  0020               	movlb	0	; select bank0
  5499  029F  00CF               	movwf	___fttol@f1
  5500  02A0  0021               	movlb	1	; select bank1
  5501  02A1  0845               	movf	(printf@fval+1)^(0+128),w
  5502  02A2  0020               	movlb	0	; select bank0
  5503  02A3  00D0               	movwf	___fttol@f1+1
  5504  02A4  0021               	movlb	1	; select bank1
  5505  02A5  0846               	movf	(printf@fval+2)^(0+128),w
  5506  02A6  0020               	movlb	0	; select bank0
  5507  02A7  00D1               	movwf	___fttol@f1+2
  5508  02A8  3197  2779  3180   	fcall	___fttol
  5509  02AB  0020               	movlb	0	; select bank0
  5510  02AC  0852               	movf	?___fttol+3,w
  5511  02AD  0021               	movlb	1	; select bank1
  5512  02AE  00BD               	movwf	(printf@val+3)^(0+128)
  5513  02AF  0020               	movlb	0	; select bank0
  5514  02B0  0851               	movf	?___fttol+2,w
  5515  02B1  0021               	movlb	1	; select bank1
  5516  02B2  00BC               	movwf	(printf@val+2)^(0+128)
  5517  02B3  0020               	movlb	0	; select bank0
  5518  02B4  0850               	movf	?___fttol+1,w
  5519  02B5  0021               	movlb	1	; select bank1
  5520  02B6  00BB               	movwf	(printf@val+1)^(0+128)
  5521  02B7  0020               	movlb	0	; select bank0
  5522  02B8  084F               	movf	?___fttol,w
  5523  02B9  0021               	movlb	1	; select bank1
  5524  02BA  00BA               	movwf	printf@val^(0+128)
  5525                           
  5526                           ;doprnt.c: 1132: fval -= (double)val;
  5527  02BB  083D               	movf	(printf@val+3)^(0+128),w
  5528  02BC  0020               	movlb	0	; select bank0
  5529  02BD  00AB               	movwf	___lltoft@c+3
  5530  02BE  0021               	movlb	1	; select bank1
  5531  02BF  083C               	movf	(printf@val+2)^(0+128),w
  5532  02C0  0020               	movlb	0	; select bank0
  5533  02C1  00AA               	movwf	___lltoft@c+2
  5534  02C2  0021               	movlb	1	; select bank1
  5535  02C3  083B               	movf	(printf@val+1)^(0+128),w
  5536  02C4  0020               	movlb	0	; select bank0
  5537  02C5  00A9               	movwf	___lltoft@c+1
  5538  02C6  0021               	movlb	1	; select bank1
  5539  02C7  083A               	movf	printf@val^(0+128),w
  5540  02C8  0020               	movlb	0	; select bank0
  5541  02C9  00A8               	movwf	___lltoft@c
  5542  02CA  3188  2009  3180   	fcall	___lltoft
  5543  02CD  0020               	movlb	0	; select bank0
  5544  02CE  0828               	movf	?___lltoft,w
  5545  02CF  00E1               	movwf	___ftsub@f2
  5546  02D0  0829               	movf	?___lltoft+1,w
  5547  02D1  00E2               	movwf	___ftsub@f2+1
  5548  02D2  082A               	movf	?___lltoft+2,w
  5549  02D3  00E3               	movwf	___ftsub@f2+2
  5550  02D4  0021               	movlb	1	; select bank1
  5551  02D5  0844               	movf	printf@fval^(0+128),w
  5552  02D6  0020               	movlb	0	; select bank0
  5553  02D7  00E4               	movwf	___ftsub@f1
  5554  02D8  0021               	movlb	1	; select bank1
  5555  02D9  0845               	movf	(printf@fval+1)^(0+128),w
  5556  02DA  0020               	movlb	0	; select bank0
  5557  02DB  00E5               	movwf	___ftsub@f1+1
  5558  02DC  0021               	movlb	1	; select bank1
  5559  02DD  0846               	movf	(printf@fval+2)^(0+128),w
  5560  02DE  0020               	movlb	0	; select bank0
  5561  02DF  00E6               	movwf	___ftsub@f1+2
  5562  02E0  3194  241D  3180   	fcall	___ftsub
  5563  02E3  0020               	movlb	0	; select bank0
  5564  02E4  0861               	movf	?___ftsub,w
  5565  02E5  0021               	movlb	1	; select bank1
  5566  02E6  00C4               	movwf	printf@fval^(0+128)
  5567  02E7  0020               	movlb	0	; select bank0
  5568  02E8  0862               	movf	?___ftsub+1,w
  5569  02E9  0021               	movlb	1	; select bank1
  5570  02EA  00C5               	movwf	(printf@fval+1)^(0+128)
  5571  02EB  0020               	movlb	0	; select bank0
  5572  02EC  0863               	movf	?___ftsub+2,w
  5573  02ED  0021               	movlb	1	; select bank1
  5574  02EE  00C6               	movwf	(printf@fval+2)^(0+128)
  5575                           
  5576                           ;doprnt.c: 1133: exp = 0;
  5577  02EF  01BE               	clrf	printf@exp^(0+128)
  5578  02F0  01BF               	clrf	(printf@exp+1)^(0+128)
  5579  02F1                     l2798:	
  5580                           
  5581                           ;doprnt.c: 1134: }
  5582                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5583  02F1  01C7               	clrf	printf@c^(0+128)
  5584  02F2  0AC7               	incf	printf@c^(0+128),f
  5585  02F3  300A               	movlw	10
  5586  02F4  0647               	xorwf	printf@c^(0+128),w
  5587  02F5  1903               	btfsc	3,2
  5588  02F6  2B2E               	goto	l2810
  5589  02F7                     l2804:	
  5590                           
  5591                           ;doprnt.c: 1137: if(val < dpowers[c])
  5592  02F7  0847               	movf	printf@c^(0+128),w
  5593  02F8  0020               	movlb	0	; select bank0
  5594  02F9  00E7               	movwf	??_printf
  5595  02FA  01E8               	clrf	??_printf+1
  5596  02FB  35E7               	lslf	??_printf,f
  5597  02FC  0DE8               	rlf	??_printf+1,f
  5598  02FD  35E7               	lslf	??_printf,f
  5599  02FE  0DE8               	rlf	??_printf+1,f
  5600  02FF  3000               	movlw	low (_dpowers| (0+32768))
  5601  0300  0767               	addwf	??_printf,w
  5602  0301  0084               	movwf	4
  5603  0302  3090               	movlw	high (_dpowers| (0+32768))
  5604  0303  3D68               	addwfc	??_printf+1,w
  5605  0304  0085               	movwf	5
  5606  0305  3F00               	moviw [0]fsr0
  5607  0306  00E9               	movwf	??_printf+2
  5608  0307  3F01               	moviw [1]fsr0
  5609  0308  00EA               	movwf	??_printf+3
  5610  0309  3F02               	moviw [2]fsr0
  5611  030A  00EB               	movwf	??_printf+4
  5612  030B  3F03               	moviw [3]fsr0
  5613  030C  00EC               	movwf	??_printf+5
  5614  030D  086C               	movf	??_printf+5,w
  5615  030E  0021               	movlb	1	; select bank1
  5616  030F  023D               	subwf	(printf@val+3)^(0+128),w
  5617  0310  1D03               	skipz
  5618  0311  2B22               	goto	u3735
  5619  0312  0020               	movlb	0	; select bank0
  5620  0313  086B               	movf	??_printf+4,w
  5621  0314  0021               	movlb	1	; select bank1
  5622  0315  023C               	subwf	(printf@val+2)^(0+128),w
  5623  0316  1D03               	skipz
  5624  0317  2B22               	goto	u3735
  5625  0318  0020               	movlb	0	; select bank0
  5626  0319  086A               	movf	??_printf+3,w
  5627  031A  0021               	movlb	1	; select bank1
  5628  031B  023B               	subwf	(printf@val+1)^(0+128),w
  5629  031C  1D03               	skipz
  5630  031D  2B22               	goto	u3735
  5631  031E  0020               	movlb	0	; select bank0
  5632  031F  0869               	movf	??_printf+2,w
  5633  0320  0021               	movlb	1	; select bank1
  5634  0321  023A               	subwf	printf@val^(0+128),w
  5635  0322                     u3735:	
  5636  0322  1C03               	btfss	3,0
  5637  0323  2B2E               	goto	l2810
  5638                           
  5639                           ;doprnt.c: 1138: break;
  5640  0324  3001               	movlw	1
  5641  0325  0020               	movlb	0	; select bank0
  5642  0326  00E7               	movwf	??_printf
  5643  0327  0867               	movf	??_printf,w
  5644  0328  0021               	movlb	1	; select bank1
  5645  0329  07C7               	addwf	printf@c^(0+128),f
  5646  032A  300A               	movlw	10
  5647  032B  0647               	xorwf	printf@c^(0+128),w
  5648  032C  1D03               	btfss	3,2
  5649  032D  2AF7               	goto	l2804
  5650  032E                     l2810:	
  5651                           
  5652                           ;doprnt.c: 1175: {
  5653                           ;doprnt.c: 1188: if(flag & 0x03)
  5654  032E  3003               	movlw	3
  5655  032F  0535               	andwf	printf@flag^(0+128),w
  5656  0330  0020               	movlb	0	; select bank0
  5657  0331  00E7               	movwf	??_printf
  5658  0332  3000               	movlw	0
  5659  0333  0021               	movlb	1	; select bank1
  5660  0334  0536               	andwf	(printf@flag+1)^(0+128),w
  5661  0335  0020               	movlb	0	; select bank0
  5662  0336  00E8               	movwf	??_printf+1
  5663  0337  0867               	movf	??_printf,w
  5664  0338  0468               	iorwf	??_printf+1,w
  5665  0339  1903               	btfsc	3,2
  5666  033A  2B3F               	goto	l2820
  5667                           
  5668                           ;doprnt.c: 1190: (putch('-') );
  5669  033B  302D               	movlw	45
  5670  033C                     L5:	
  5671  033C  3192  2260  3180   	fcall	_putch
  5672  033F                     l2820:	
  5673                           ;doprnt.c: 1195: }
  5674                           ;doprnt.c: 1196: while(c--) {
  5675                           
  5676  033F  30FF               	movlw	255
  5677  0340  0020               	movlb	0	; select bank0
  5678  0341  00E7               	movwf	??_printf
  5679  0342  0867               	movf	??_printf,w
  5680  0343  0021               	movlb	1	; select bank1
  5681  0344  07C7               	addwf	printf@c^(0+128),f
  5682  0345  0A47               	incf	printf@c^(0+128),w
  5683  0346  1903               	btfsc	3,2
  5684  0347  2BBA               	goto	l2826
  5685                           
  5686                           ;doprnt.c: 1200: {
  5687                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  5688  0348  0021               	movlb	1	; select bank1
  5689  0349  0847               	movf	printf@c^(0+128),w
  5690  034A  0020               	movlb	0	; select bank0
  5691  034B  00E7               	movwf	??_printf
  5692  034C  01E8               	clrf	??_printf+1
  5693  034D  35E7               	lslf	??_printf,f
  5694  034E  0DE8               	rlf	??_printf+1,f
  5695  034F  35E7               	lslf	??_printf,f
  5696  0350  0DE8               	rlf	??_printf+1,f
  5697  0351  3000               	movlw	low (_dpowers| (0+32768))
  5698  0352  0767               	addwf	??_printf,w
  5699  0353  0084               	movwf	4
  5700  0354  3090               	movlw	high (_dpowers| (0+32768))
  5701  0355  3D68               	addwfc	??_printf+1,w
  5702  0356  0085               	movwf	5
  5703  0357  3F00               	moviw [0]fsr0
  5704  0358  00A0               	movwf	___lldiv@divisor
  5705  0359  3F01               	moviw [1]fsr0
  5706  035A  00A1               	movwf	___lldiv@divisor+1
  5707  035B  3F02               	moviw [2]fsr0
  5708  035C  00A2               	movwf	___lldiv@divisor+2
  5709  035D  3F03               	moviw [3]fsr0
  5710  035E  00A3               	movwf	___lldiv@divisor+3
  5711  035F  0021               	movlb	1	; select bank1
  5712  0360  083D               	movf	(printf@val+3)^(0+128),w
  5713  0361  0020               	movlb	0	; select bank0
  5714  0362  00A7               	movwf	___lldiv@dividend+3
  5715  0363  0021               	movlb	1	; select bank1
  5716  0364  083C               	movf	(printf@val+2)^(0+128),w
  5717  0365  0020               	movlb	0	; select bank0
  5718  0366  00A6               	movwf	___lldiv@dividend+2
  5719  0367  0021               	movlb	1	; select bank1
  5720  0368  083B               	movf	(printf@val+1)^(0+128),w
  5721  0369  0020               	movlb	0	; select bank0
  5722  036A  00A5               	movwf	___lldiv@dividend+1
  5723  036B  0021               	movlb	1	; select bank1
  5724  036C  083A               	movf	printf@val^(0+128),w
  5725  036D  0020               	movlb	0	; select bank0
  5726  036E  00A4               	movwf	___lldiv@dividend
  5727  036F  3196  26C1  3180   	fcall	___lldiv
  5728  0372  0020               	movlb	0	; select bank0
  5729  0373  0823               	movf	?___lldiv+3,w
  5730  0374  0021               	movlb	1	; select bank1
  5731  0375  00C3               	movwf	(printf@tmpval+3)^(0+128)
  5732  0376  0020               	movlb	0	; select bank0
  5733  0377  0822               	movf	?___lldiv+2,w
  5734  0378  0021               	movlb	1	; select bank1
  5735  0379  00C2               	movwf	(printf@tmpval+2)^(0+128)
  5736  037A  0020               	movlb	0	; select bank0
  5737  037B  0821               	movf	?___lldiv+1,w
  5738  037C  0021               	movlb	1	; select bank1
  5739  037D  00C1               	movwf	(printf@tmpval+1)^(0+128)
  5740  037E  0020               	movlb	0	; select bank0
  5741  037F  0820               	movf	?___lldiv,w
  5742  0380  0021               	movlb	1	; select bank1
  5743  0381  00C0               	movwf	printf@tmpval^(0+128)
  5744                           
  5745                           ;doprnt.c: 1202: tmpval.vd %= 10;
  5746  0382  3000               	movlw	0
  5747  0383  0020               	movlb	0	; select bank0
  5748  0384  00B1               	movwf	___llmod@divisor+3
  5749  0385  3000               	movlw	0
  5750  0386  00B0               	movwf	___llmod@divisor+2
  5751  0387  3000               	movlw	0
  5752  0388  00AF               	movwf	___llmod@divisor+1
  5753  0389  300A               	movlw	10
  5754  038A  00AE               	movwf	___llmod@divisor
  5755  038B  0021               	movlb	1	; select bank1
  5756  038C  0843               	movf	(printf@tmpval+3)^(0+128),w
  5757  038D  0020               	movlb	0	; select bank0
  5758  038E  00B5               	movwf	___llmod@dividend+3
  5759  038F  0021               	movlb	1	; select bank1
  5760  0390  0842               	movf	(printf@tmpval+2)^(0+128),w
  5761  0391  0020               	movlb	0	; select bank0
  5762  0392  00B4               	movwf	___llmod@dividend+2
  5763  0393  0021               	movlb	1	; select bank1
  5764  0394  0841               	movf	(printf@tmpval+1)^(0+128),w
  5765  0395  0020               	movlb	0	; select bank0
  5766  0396  00B3               	movwf	___llmod@dividend+1
  5767  0397  0021               	movlb	1	; select bank1
  5768  0398  0840               	movf	printf@tmpval^(0+128),w
  5769  0399  0020               	movlb	0	; select bank0
  5770  039A  00B2               	movwf	___llmod@dividend
  5771  039B  3195  2548  3180   	fcall	___llmod
  5772  039E  0020               	movlb	0	; select bank0
  5773  039F  0831               	movf	?___llmod+3,w
  5774  03A0  0021               	movlb	1	; select bank1
  5775  03A1  00C3               	movwf	(printf@tmpval+3)^(0+128)
  5776  03A2  0020               	movlb	0	; select bank0
  5777  03A3  0830               	movf	?___llmod+2,w
  5778  03A4  0021               	movlb	1	; select bank1
  5779  03A5  00C2               	movwf	(printf@tmpval+2)^(0+128)
  5780  03A6  0020               	movlb	0	; select bank0
  5781  03A7  082F               	movf	?___llmod+1,w
  5782  03A8  0021               	movlb	1	; select bank1
  5783  03A9  00C1               	movwf	(printf@tmpval+1)^(0+128)
  5784  03AA  0020               	movlb	0	; select bank0
  5785  03AB  082E               	movf	?___llmod,w
  5786  03AC  0021               	movlb	1	; select bank1
  5787  03AD  00C0               	movwf	printf@tmpval^(0+128)
  5788                           
  5789                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  5790  03AE  0840               	movf	printf@tmpval^(0+128),w
  5791  03AF  3E30               	addlw	48
  5792  03B0  2B3C               	goto	L5
  5793  03B1                     l2822:	
  5794                           ;doprnt.c: 1204: }
  5795                           ;doprnt.c: 1206: }
  5796                           ;doprnt.c: 1207: while(exp > 0) {
  5797                           
  5798                           
  5799                           ;doprnt.c: 1208: (putch('0') );
  5800  03B1  3030               	movlw	48
  5801  03B2  3192  2260  3180   	fcall	_putch
  5802                           
  5803                           ;doprnt.c: 1209: exp--;
  5804  03B5  30FF               	movlw	255
  5805  03B6  0021               	movlb	1	; select bank1
  5806  03B7  07BE               	addwf	printf@exp^(0+128),f
  5807  03B8  30FF               	movlw	255
  5808  03B9  3DBF               	addwfc	(printf@exp+1)^(0+128),f
  5809  03BA                     l2826:	
  5810  03BA  083F               	movf	(printf@exp+1)^(0+128),w
  5811  03BB  3A80               	xorlw	128
  5812  03BC  0020               	movlb	0	; select bank0
  5813  03BD  00E7               	movwf	??_printf
  5814  03BE  3080               	movlw	128
  5815  03BF  0267               	subwf	??_printf,w
  5816  03C0  1D03               	skipz
  5817  03C1  2BC5               	goto	u3775
  5818  03C2  3001               	movlw	1
  5819  03C3  0021               	movlb	1	; select bank1
  5820  03C4  023E               	subwf	printf@exp^(0+128),w
  5821  03C5                     u3775:	
  5822  03C5  1803               	skipnc
  5823  03C6  2BB1               	goto	l2822
  5824                           
  5825                           ;doprnt.c: 1210: }
  5826                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5827  03C7  0021               	movlb	1	; select bank1
  5828  03C8  0839               	movf	(printf@prec+1)^(0+128),w
  5829  03C9  3A80               	xorlw	128
  5830  03CA  0020               	movlb	0	; select bank0
  5831  03CB  00E7               	movwf	??_printf
  5832  03CC  3080               	movlw	128
  5833  03CD  0267               	subwf	??_printf,w
  5834  03CE  1D03               	skipz
  5835  03CF  2BD3               	goto	u3785
  5836  03D0  3009               	movlw	9
  5837  03D1  0021               	movlb	1	; select bank1
  5838  03D2  0238               	subwf	printf@prec^(0+128),w
  5839  03D3                     u3785:	
  5840  03D3  1C03               	skipc
  5841  03D4  2BD7               	goto	l2832
  5842                           
  5843                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5844  03D5  3008               	movlw	8
  5845  03D6  2BD9               	goto	L3
  5846  03D7                     l2832:	
  5847                           
  5848                           ;doprnt.c: 1213: else
  5849                           ;doprnt.c: 1214: c = prec;
  5850  03D7  0021               	movlb	1	; select bank1
  5851  03D8  0838               	movf	printf@prec^(0+128),w
  5852  03D9                     L3:	
  5853  03D9  0020               	movlb	0	; select bank0
  5854  03DA  00E7               	movwf	??_printf
  5855  03DB  0867               	movf	??_printf,w
  5856  03DC  0021               	movlb	1	; select bank1
  5857  03DD  00C7               	movwf	printf@c^(0+128)
  5858                           
  5859                           ;doprnt.c: 1215: prec -= c;
  5860  03DE  0847               	movf	printf@c^(0+128),w
  5861  03DF  0020               	movlb	0	; select bank0
  5862  03E0  00E7               	movwf	??_printf
  5863  03E1  01E8               	clrf	??_printf+1
  5864  03E2  1BE7               	btfsc	??_printf,7
  5865  03E3  03E8               	decf	??_printf+1,f
  5866  03E4  0867               	movf	??_printf,w
  5867  03E5  0021               	movlb	1	; select bank1
  5868  03E6  02B8               	subwf	printf@prec^(0+128),f
  5869  03E7  0020               	movlb	0	; select bank0
  5870  03E8  0868               	movf	??_printf+1,w
  5871  03E9  0021               	movlb	1	; select bank1
  5872  03EA  3BB9               	subwfb	(printf@prec+1)^(0+128),f
  5873                           
  5874                           ;doprnt.c: 1219: if(c)
  5875  03EB  0847               	movf	printf@c^(0+128),w
  5876  03EC  1903               	btfsc	3,2
  5877  03ED  2BF2               	goto	l2838
  5878                           
  5879                           ;doprnt.c: 1221: (putch('.') );
  5880  03EE  302E               	movlw	46
  5881  03EF  3192  2260  3180   	fcall	_putch
  5882  03F2                     l2838:	
  5883                           
  5884                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5885  03F2  0021               	movlb	1	; select bank1
  5886  03F3  0847               	movf	printf@c^(0+128),w
  5887  03F4  318D  25BA  3180   	fcall	_scale
  5888  03F7  0020               	movlb	0	; select bank0
  5889  03F8  0846               	movf	?_scale,w
  5890  03F9  0021               	movlb	1	; select bank1
  5891  03FA  00B2               	movwf	_printf$1277^(0+128)
  5892  03FB  0020               	movlb	0	; select bank0
  5893  03FC  0847               	movf	?_scale+1,w
  5894  03FD  0021               	movlb	1	; select bank1
  5895  03FE  00B3               	movwf	(_printf$1277+1)^(0+128)
  5896  03FF  0020               	movlb	0	; select bank0
  5897  0400  0848               	movf	?_scale+2,w
  5898  0401  0021               	movlb	1	; select bank1
  5899  0402  00B4               	movwf	(_printf$1277+2)^(0+128)
  5900                           
  5901                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5902  0403  0832               	movf	_printf$1277^(0+128),w
  5903  0404  0020               	movlb	0	; select bank0
  5904  0405  00B9               	movwf	___ftmul@f2
  5905  0406  0021               	movlb	1	; select bank1
  5906  0407  0833               	movf	(_printf$1277+1)^(0+128),w
  5907  0408  0020               	movlb	0	; select bank0
  5908  0409  00BA               	movwf	___ftmul@f2+1
  5909  040A  0021               	movlb	1	; select bank1
  5910  040B  0834               	movf	(_printf$1277+2)^(0+128),w
  5911  040C  0020               	movlb	0	; select bank0
  5912  040D  00BB               	movwf	___ftmul@f2+2
  5913  040E  0021               	movlb	1	; select bank1
  5914  040F  0844               	movf	printf@fval^(0+128),w
  5915  0410  0020               	movlb	0	; select bank0
  5916  0411  00B6               	movwf	___ftmul@f1
  5917  0412  0021               	movlb	1	; select bank1
  5918  0413  0845               	movf	(printf@fval+1)^(0+128),w
  5919  0414  0020               	movlb	0	; select bank0
  5920  0415  00B7               	movwf	___ftmul@f1+1
  5921  0416  0021               	movlb	1	; select bank1
  5922  0417  0846               	movf	(printf@fval+2)^(0+128),w
  5923  0418  0020               	movlb	0	; select bank0
  5924  0419  00B8               	movwf	___ftmul@f1+2
  5925  041A  3189  21F6  3180   	fcall	___ftmul
  5926  041D  0020               	movlb	0	; select bank0
  5927  041E  0836               	movf	?___ftmul,w
  5928  041F  00CF               	movwf	___fttol@f1
  5929  0420  0837               	movf	?___ftmul+1,w
  5930  0421  00D0               	movwf	___fttol@f1+1
  5931  0422  0838               	movf	?___ftmul+2,w
  5932  0423  00D1               	movwf	___fttol@f1+2
  5933  0424  3197  2779  3180   	fcall	___fttol
  5934  0427  0020               	movlb	0	; select bank0
  5935  0428  0852               	movf	?___fttol+3,w
  5936  0429  0021               	movlb	1	; select bank1
  5937  042A  00BD               	movwf	(printf@val+3)^(0+128)
  5938  042B  0020               	movlb	0	; select bank0
  5939  042C  0851               	movf	?___fttol+2,w
  5940  042D  0021               	movlb	1	; select bank1
  5941  042E  00BC               	movwf	(printf@val+2)^(0+128)
  5942  042F  0020               	movlb	0	; select bank0
  5943  0430  0850               	movf	?___fttol+1,w
  5944  0431  0021               	movlb	1	; select bank1
  5945  0432  00BB               	movwf	(printf@val+1)^(0+128)
  5946  0433  0020               	movlb	0	; select bank0
  5947  0434  084F               	movf	?___fttol,w
  5948  0435                     L4:	
  5949  0435  0021               	movlb	1	; select bank1
  5950  0436  00BA               	movwf	printf@val^(0+128)
  5951  0437  30FF               	movlw	255
  5952  0438  0020               	movlb	0	; select bank0
  5953  0439  00E7               	movwf	??_printf
  5954  043A  0867               	movf	??_printf,w
  5955  043B  0021               	movlb	1	; select bank1
  5956  043C  07C7               	addwf	printf@c^(0+128),f
  5957  043D  0A47               	incf	printf@c^(0+128),w
  5958  043E  1903               	btfsc	3,2
  5959  043F  2CEC               	goto	l2856
  5960                           
  5961                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  5962                           
  5963                           ;doprnt.c: 1228: while(c--) {
  5964  0440  0847               	movf	printf@c^(0+128),w
  5965  0441  0020               	movlb	0	; select bank0
  5966  0442  00E7               	movwf	??_printf
  5967  0443  01E8               	clrf	??_printf+1
  5968  0444  35E7               	lslf	??_printf,f
  5969  0445  0DE8               	rlf	??_printf+1,f
  5970  0446  35E7               	lslf	??_printf,f
  5971  0447  0DE8               	rlf	??_printf+1,f
  5972  0448  3000               	movlw	low (_dpowers| (0+32768))
  5973  0449  0767               	addwf	??_printf,w
  5974  044A  0084               	movwf	4
  5975  044B  3090               	movlw	high (_dpowers| (0+32768))
  5976  044C  3D68               	addwfc	??_printf+1,w
  5977  044D  0085               	movwf	5
  5978  044E  3F00               	moviw [0]fsr0
  5979  044F  00A0               	movwf	___lldiv@divisor
  5980  0450  3F01               	moviw [1]fsr0
  5981  0451  00A1               	movwf	___lldiv@divisor+1
  5982  0452  3F02               	moviw [2]fsr0
  5983  0453  00A2               	movwf	___lldiv@divisor+2
  5984  0454  3F03               	moviw [3]fsr0
  5985  0455  00A3               	movwf	___lldiv@divisor+3
  5986  0456  0021               	movlb	1	; select bank1
  5987  0457  083D               	movf	(printf@val+3)^(0+128),w
  5988  0458  0020               	movlb	0	; select bank0
  5989  0459  00A7               	movwf	___lldiv@dividend+3
  5990  045A  0021               	movlb	1	; select bank1
  5991  045B  083C               	movf	(printf@val+2)^(0+128),w
  5992  045C  0020               	movlb	0	; select bank0
  5993  045D  00A6               	movwf	___lldiv@dividend+2
  5994  045E  0021               	movlb	1	; select bank1
  5995  045F  083B               	movf	(printf@val+1)^(0+128),w
  5996  0460  0020               	movlb	0	; select bank0
  5997  0461  00A5               	movwf	___lldiv@dividend+1
  5998  0462  0021               	movlb	1	; select bank1
  5999  0463  083A               	movf	printf@val^(0+128),w
  6000  0464  0020               	movlb	0	; select bank0
  6001  0465  00A4               	movwf	___lldiv@dividend
  6002  0466  3196  26C1  3180   	fcall	___lldiv
  6003  0469  0020               	movlb	0	; select bank0
  6004  046A  0823               	movf	?___lldiv+3,w
  6005  046B  0021               	movlb	1	; select bank1
  6006  046C  00C3               	movwf	(printf@tmpval+3)^(0+128)
  6007  046D  0020               	movlb	0	; select bank0
  6008  046E  0822               	movf	?___lldiv+2,w
  6009  046F  0021               	movlb	1	; select bank1
  6010  0470  00C2               	movwf	(printf@tmpval+2)^(0+128)
  6011  0471  0020               	movlb	0	; select bank0
  6012  0472  0821               	movf	?___lldiv+1,w
  6013  0473  0021               	movlb	1	; select bank1
  6014  0474  00C1               	movwf	(printf@tmpval+1)^(0+128)
  6015  0475  0020               	movlb	0	; select bank0
  6016  0476  0820               	movf	?___lldiv,w
  6017  0477  0021               	movlb	1	; select bank1
  6018  0478  00C0               	movwf	printf@tmpval^(0+128)
  6019                           
  6020                           ;doprnt.c: 1230: tmpval.vd %= 10;
  6021  0479  3000               	movlw	0
  6022  047A  0020               	movlb	0	; select bank0
  6023  047B  00B1               	movwf	___llmod@divisor+3
  6024  047C  3000               	movlw	0
  6025  047D  00B0               	movwf	___llmod@divisor+2
  6026  047E  3000               	movlw	0
  6027  047F  00AF               	movwf	___llmod@divisor+1
  6028  0480  300A               	movlw	10
  6029  0481  00AE               	movwf	___llmod@divisor
  6030  0482  0021               	movlb	1	; select bank1
  6031  0483  0843               	movf	(printf@tmpval+3)^(0+128),w
  6032  0484  0020               	movlb	0	; select bank0
  6033  0485  00B5               	movwf	___llmod@dividend+3
  6034  0486  0021               	movlb	1	; select bank1
  6035  0487  0842               	movf	(printf@tmpval+2)^(0+128),w
  6036  0488  0020               	movlb	0	; select bank0
  6037  0489  00B4               	movwf	___llmod@dividend+2
  6038  048A  0021               	movlb	1	; select bank1
  6039  048B  0841               	movf	(printf@tmpval+1)^(0+128),w
  6040  048C  0020               	movlb	0	; select bank0
  6041  048D  00B3               	movwf	___llmod@dividend+1
  6042  048E  0021               	movlb	1	; select bank1
  6043  048F  0840               	movf	printf@tmpval^(0+128),w
  6044  0490  0020               	movlb	0	; select bank0
  6045  0491  00B2               	movwf	___llmod@dividend
  6046  0492  3195  2548  3180   	fcall	___llmod
  6047  0495  0020               	movlb	0	; select bank0
  6048  0496  0831               	movf	?___llmod+3,w
  6049  0497  0021               	movlb	1	; select bank1
  6050  0498  00C3               	movwf	(printf@tmpval+3)^(0+128)
  6051  0499  0020               	movlb	0	; select bank0
  6052  049A  0830               	movf	?___llmod+2,w
  6053  049B  0021               	movlb	1	; select bank1
  6054  049C  00C2               	movwf	(printf@tmpval+2)^(0+128)
  6055  049D  0020               	movlb	0	; select bank0
  6056  049E  082F               	movf	?___llmod+1,w
  6057  049F  0021               	movlb	1	; select bank1
  6058  04A0  00C1               	movwf	(printf@tmpval+1)^(0+128)
  6059  04A1  0020               	movlb	0	; select bank0
  6060  04A2  082E               	movf	?___llmod,w
  6061  04A3  0021               	movlb	1	; select bank1
  6062  04A4  00C0               	movwf	printf@tmpval^(0+128)
  6063                           
  6064                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  6065  04A5  0840               	movf	printf@tmpval^(0+128),w
  6066  04A6  3E30               	addlw	48
  6067  04A7  3192  2260  3180   	fcall	_putch
  6068                           
  6069                           ;doprnt.c: 1232: val %= dpowers[c];
  6070  04AA  0021               	movlb	1	; select bank1
  6071  04AB  0847               	movf	printf@c^(0+128),w
  6072  04AC  0020               	movlb	0	; select bank0
  6073  04AD  00E7               	movwf	??_printf
  6074  04AE  01E8               	clrf	??_printf+1
  6075  04AF  35E7               	lslf	??_printf,f
  6076  04B0  0DE8               	rlf	??_printf+1,f
  6077  04B1  35E7               	lslf	??_printf,f
  6078  04B2  0DE8               	rlf	??_printf+1,f
  6079  04B3  3000               	movlw	low (_dpowers| (0+32768))
  6080  04B4  0767               	addwf	??_printf,w
  6081  04B5  0084               	movwf	4
  6082  04B6  3090               	movlw	high (_dpowers| (0+32768))
  6083  04B7  3D68               	addwfc	??_printf+1,w
  6084  04B8  0085               	movwf	5
  6085  04B9  3F00               	moviw [0]fsr0
  6086  04BA  00AE               	movwf	___llmod@divisor
  6087  04BB  3F01               	moviw [1]fsr0
  6088  04BC  00AF               	movwf	___llmod@divisor+1
  6089  04BD  3F02               	moviw [2]fsr0
  6090  04BE  00B0               	movwf	___llmod@divisor+2
  6091  04BF  3F03               	moviw [3]fsr0
  6092  04C0  00B1               	movwf	___llmod@divisor+3
  6093  04C1  0021               	movlb	1	; select bank1
  6094  04C2  083D               	movf	(printf@val+3)^(0+128),w
  6095  04C3  0020               	movlb	0	; select bank0
  6096  04C4  00B5               	movwf	___llmod@dividend+3
  6097  04C5  0021               	movlb	1	; select bank1
  6098  04C6  083C               	movf	(printf@val+2)^(0+128),w
  6099  04C7  0020               	movlb	0	; select bank0
  6100  04C8  00B4               	movwf	___llmod@dividend+2
  6101  04C9  0021               	movlb	1	; select bank1
  6102  04CA  083B               	movf	(printf@val+1)^(0+128),w
  6103  04CB  0020               	movlb	0	; select bank0
  6104  04CC  00B3               	movwf	___llmod@dividend+1
  6105  04CD  0021               	movlb	1	; select bank1
  6106  04CE  083A               	movf	printf@val^(0+128),w
  6107  04CF  0020               	movlb	0	; select bank0
  6108  04D0  00B2               	movwf	___llmod@dividend
  6109  04D1  3195  2548  3180   	fcall	___llmod
  6110  04D4  0020               	movlb	0	; select bank0
  6111  04D5  0831               	movf	?___llmod+3,w
  6112  04D6  0021               	movlb	1	; select bank1
  6113  04D7  00BD               	movwf	(printf@val+3)^(0+128)
  6114  04D8  0020               	movlb	0	; select bank0
  6115  04D9  0830               	movf	?___llmod+2,w
  6116  04DA  0021               	movlb	1	; select bank1
  6117  04DB  00BC               	movwf	(printf@val+2)^(0+128)
  6118  04DC  0020               	movlb	0	; select bank0
  6119  04DD  082F               	movf	?___llmod+1,w
  6120  04DE  0021               	movlb	1	; select bank1
  6121  04DF  00BB               	movwf	(printf@val+1)^(0+128)
  6122  04E0  0020               	movlb	0	; select bank0
  6123  04E1  082E               	movf	?___llmod,w
  6124  04E2  2C35               	goto	L4
  6125  04E3                     l2852:	
  6126                           ;doprnt.c: 1233: }
  6127                           ;doprnt.c: 1235: while(prec) {
  6128                           
  6129                           
  6130                           ;doprnt.c: 1236: (putch('0') );
  6131  04E3  3030               	movlw	48
  6132  04E4  3192  2260  3180   	fcall	_putch
  6133                           
  6134                           ;doprnt.c: 1237: prec--;
  6135  04E7  30FF               	movlw	255
  6136  04E8  0021               	movlb	1	; select bank1
  6137  04E9  07B8               	addwf	printf@prec^(0+128),f
  6138  04EA  30FF               	movlw	255
  6139  04EB  3DB9               	addwfc	(printf@prec+1)^(0+128),f
  6140  04EC                     l2856:	
  6141  04EC  0838               	movf	printf@prec^(0+128),w
  6142  04ED  0439               	iorwf	(printf@prec+1)^(0+128),w
  6143  04EE  1903               	btfsc	3,2
  6144  04EF  2848               	goto	l2892
  6145  04F0  2CE3               	goto	l2852
  6146  04F1                     l2858:	
  6147                           ;doprnt.c: 1238: }
  6148                           ;doprnt.c: 1245: continue;
  6149                           
  6150                           
  6151                           ;doprnt.c: 1246: }
  6152                           ;doprnt.c: 1253: {
  6153                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  6154  04F1  0021               	movlb	1	; select bank1
  6155  04F2  0837               	movf	printf@ap^(0+128),w
  6156  04F3  0086               	movwf	6
  6157  04F4  0187               	clrf	7
  6158  04F5  3F40               	moviw [0]fsr1
  6159  04F6  0020               	movlb	0	; select bank0
  6160  04F7  00E7               	movwf	??_printf
  6161  04F8  3F41               	moviw [1]fsr1
  6162  04F9  00E8               	movwf	??_printf+1
  6163  04FA  0867               	movf	??_printf,w
  6164  04FB  0021               	movlb	1	; select bank1
  6165  04FC  00BA               	movwf	printf@val^(0+128)
  6166  04FD  0020               	movlb	0	; select bank0
  6167  04FE  0868               	movf	??_printf+1,w
  6168  04FF  0021               	movlb	1	; select bank1
  6169  0500  00BB               	movwf	(printf@val+1)^(0+128)
  6170  0501  0D89               	rlf	9,f
  6171  0502  3B89               	subwfb	9,f
  6172  0503  0989               	comf	9,f
  6173  0504  00BC               	movwf	(printf@val+2)^(0+128)
  6174  0505  00BD               	movwf	(printf@val+3)^(0+128)
  6175  0506  3002               	movlw	2
  6176  0507  0020               	movlb	0	; select bank0
  6177  0508  00E7               	movwf	??_printf
  6178  0509  0867               	movf	??_printf,w
  6179  050A  0021               	movlb	1	; select bank1
  6180  050B  07B7               	addwf	printf@ap^(0+128),f
  6181                           
  6182                           ;doprnt.c: 1261: if((long)val < 0) {
  6183  050C  1FBD               	btfss	(printf@val+3)^(0+128),7
  6184  050D  2D1D               	goto	l2868
  6185                           
  6186                           ;doprnt.c: 1262: flag |= 0x03;
  6187  050E  3003               	movlw	3
  6188  050F  04B5               	iorwf	printf@flag^(0+128),f
  6189  0510  3000               	movlw	0
  6190  0511  04B6               	iorwf	(printf@flag+1)^(0+128),f
  6191                           
  6192                           ;doprnt.c: 1263: val = -val;
  6193  0512  09BA               	comf	printf@val^(0+128),f
  6194  0513  09BB               	comf	(printf@val+1)^(0+128),f
  6195  0514  09BC               	comf	(printf@val+2)^(0+128),f
  6196  0515  09BD               	comf	(printf@val+3)^(0+128),f
  6197  0516  0ABA               	incf	printf@val^(0+128),f
  6198  0517  1903               	skipnz
  6199  0518  0ABB               	incf	(printf@val+1)^(0+128),f
  6200  0519  1903               	skipnz
  6201  051A  0ABC               	incf	(printf@val+2)^(0+128),f
  6202  051B  1903               	skipnz
  6203  051C  0ABD               	incf	(printf@val+3)^(0+128),f
  6204  051D                     l2868:	
  6205                           
  6206                           ;doprnt.c: 1264: }
  6207                           ;doprnt.c: 1266: }
  6208                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6209  051D  01C7               	clrf	printf@c^(0+128)
  6210  051E  0AC7               	incf	printf@c^(0+128),f
  6211  051F  300A               	movlw	10
  6212  0520  0647               	xorwf	printf@c^(0+128),w
  6213  0521  1903               	btfsc	3,2
  6214  0522  2D5A               	goto	l2880
  6215  0523                     l2874:	
  6216                           
  6217                           ;doprnt.c: 1306: if(val < dpowers[c])
  6218  0523  0847               	movf	printf@c^(0+128),w
  6219  0524  0020               	movlb	0	; select bank0
  6220  0525  00E7               	movwf	??_printf
  6221  0526  01E8               	clrf	??_printf+1
  6222  0527  35E7               	lslf	??_printf,f
  6223  0528  0DE8               	rlf	??_printf+1,f
  6224  0529  35E7               	lslf	??_printf,f
  6225  052A  0DE8               	rlf	??_printf+1,f
  6226  052B  3000               	movlw	low (_dpowers| (0+32768))
  6227  052C  0767               	addwf	??_printf,w
  6228  052D  0084               	movwf	4
  6229  052E  3090               	movlw	high (_dpowers| (0+32768))
  6230  052F  3D68               	addwfc	??_printf+1,w
  6231  0530  0085               	movwf	5
  6232  0531  3F00               	moviw [0]fsr0
  6233  0532  00E9               	movwf	??_printf+2
  6234  0533  3F01               	moviw [1]fsr0
  6235  0534  00EA               	movwf	??_printf+3
  6236  0535  3F02               	moviw [2]fsr0
  6237  0536  00EB               	movwf	??_printf+4
  6238  0537  3F03               	moviw [3]fsr0
  6239  0538  00EC               	movwf	??_printf+5
  6240  0539  086C               	movf	??_printf+5,w
  6241  053A  0021               	movlb	1	; select bank1
  6242  053B  023D               	subwf	(printf@val+3)^(0+128),w
  6243  053C  1D03               	skipz
  6244  053D  2D4E               	goto	u3845
  6245  053E  0020               	movlb	0	; select bank0
  6246  053F  086B               	movf	??_printf+4,w
  6247  0540  0021               	movlb	1	; select bank1
  6248  0541  023C               	subwf	(printf@val+2)^(0+128),w
  6249  0542  1D03               	skipz
  6250  0543  2D4E               	goto	u3845
  6251  0544  0020               	movlb	0	; select bank0
  6252  0545  086A               	movf	??_printf+3,w
  6253  0546  0021               	movlb	1	; select bank1
  6254  0547  023B               	subwf	(printf@val+1)^(0+128),w
  6255  0548  1D03               	skipz
  6256  0549  2D4E               	goto	u3845
  6257  054A  0020               	movlb	0	; select bank0
  6258  054B  0869               	movf	??_printf+2,w
  6259  054C  0021               	movlb	1	; select bank1
  6260  054D  023A               	subwf	printf@val^(0+128),w
  6261  054E                     u3845:	
  6262  054E  1C03               	btfss	3,0
  6263  054F  2D5A               	goto	l2880
  6264                           
  6265                           ;doprnt.c: 1307: break;
  6266  0550  3001               	movlw	1
  6267  0551  0020               	movlb	0	; select bank0
  6268  0552  00E7               	movwf	??_printf
  6269  0553  0867               	movf	??_printf,w
  6270  0554  0021               	movlb	1	; select bank1
  6271  0555  07C7               	addwf	printf@c^(0+128),f
  6272  0556  300A               	movlw	10
  6273  0557  0647               	xorwf	printf@c^(0+128),w
  6274  0558  1D03               	btfss	3,2
  6275  0559  2D23               	goto	l2874
  6276  055A                     l2880:	
  6277                           
  6278                           ;doprnt.c: 1422: {
  6279                           ;doprnt.c: 1438: if(flag & 0x03)
  6280  055A  3003               	movlw	3
  6281  055B  0535               	andwf	printf@flag^(0+128),w
  6282  055C  0020               	movlb	0	; select bank0
  6283  055D  00E7               	movwf	??_printf
  6284  055E  3000               	movlw	0
  6285  055F  0021               	movlb	1	; select bank1
  6286  0560  0536               	andwf	(printf@flag+1)^(0+128),w
  6287  0561  0020               	movlb	0	; select bank0
  6288  0562  00E8               	movwf	??_printf+1
  6289  0563  0867               	movf	??_printf,w
  6290  0564  0468               	iorwf	??_printf+1,w
  6291  0565  1903               	btfsc	3,2
  6292  0566  2D6B               	goto	l2884
  6293                           
  6294                           ;doprnt.c: 1439: (putch('-') );
  6295  0567  302D               	movlw	45
  6296  0568  3192  2260  3180   	fcall	_putch
  6297  056B                     l2884:	
  6298                           
  6299                           ;doprnt.c: 1469: }
  6300                           ;doprnt.c: 1472: prec = c;
  6301  056B  0021               	movlb	1	; select bank1
  6302  056C  0847               	movf	printf@c^(0+128),w
  6303  056D  00B8               	movwf	printf@prec^(0+128)
  6304  056E  01B9               	clrf	(printf@prec+1)^(0+128)
  6305  056F  1BB8               	btfsc	printf@prec^(0+128),7
  6306  0570  03B9               	decf	(printf@prec+1)^(0+128),f
  6307  0571                     l2890:	
  6308                           ;doprnt.c: 1474: while(prec--) {
  6309                           
  6310  0571  30FF               	movlw	255
  6311  0572  0021               	movlb	1	; select bank1
  6312  0573  07B8               	addwf	printf@prec^(0+128),f
  6313  0574  30FF               	movlw	255
  6314  0575  3DB9               	addwfc	(printf@prec+1)^(0+128),f
  6315  0576  0A38               	incf	printf@prec^(0+128),w
  6316  0577  1903               	btfsc	3,2
  6317  0578  0A39               	incf	(printf@prec+1)^(0+128),w
  6318  0579  1903               	btfsc	3,2
  6319  057A  2848               	goto	l2892
  6320                           
  6321                           ;doprnt.c: 1478: {
  6322                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6323  057B  3000               	movlw	0
  6324  057C  0020               	movlb	0	; select bank0
  6325  057D  00B1               	movwf	___llmod@divisor+3
  6326  057E  3000               	movlw	0
  6327  057F  00B0               	movwf	___llmod@divisor+2
  6328  0580  3000               	movlw	0
  6329  0581  00AF               	movwf	___llmod@divisor+1
  6330  0582  300A               	movlw	10
  6331  0583  00AE               	movwf	___llmod@divisor
  6332  0584  0021               	movlb	1	; select bank1
  6333  0585  0839               	movf	(printf@prec+1)^(0+128),w
  6334  0586  0085               	movwf	5
  6335  0587  0838               	movf	printf@prec^(0+128),w
  6336  0588  0084               	movwf	4
  6337  0589  3584               	lslf	4,f
  6338  058A  0D85               	rlf	5,f
  6339  058B  3584               	lslf	4,f
  6340  058C  0D85               	rlf	5,f
  6341  058D  3000               	movlw	low (_dpowers| (0+32768))
  6342  058E  0784               	addwf	4,f
  6343  058F  3090               	movlw	high (_dpowers| (0+32768))
  6344  0590  3D85               	addwfc	5,f
  6345  0591  3F00               	moviw [0]fsr0
  6346  0592  0020               	movlb	0	; select bank0
  6347  0593  00A0               	movwf	___lldiv@divisor
  6348  0594  3F01               	moviw [1]fsr0
  6349  0595  00A1               	movwf	___lldiv@divisor+1
  6350  0596  3F02               	moviw [2]fsr0
  6351  0597  00A2               	movwf	___lldiv@divisor+2
  6352  0598  3F03               	moviw [3]fsr0
  6353  0599  00A3               	movwf	___lldiv@divisor+3
  6354  059A  0021               	movlb	1	; select bank1
  6355  059B  083D               	movf	(printf@val+3)^(0+128),w
  6356  059C  0020               	movlb	0	; select bank0
  6357  059D  00A7               	movwf	___lldiv@dividend+3
  6358  059E  0021               	movlb	1	; select bank1
  6359  059F  083C               	movf	(printf@val+2)^(0+128),w
  6360  05A0  0020               	movlb	0	; select bank0
  6361  05A1  00A6               	movwf	___lldiv@dividend+2
  6362  05A2  0021               	movlb	1	; select bank1
  6363  05A3  083B               	movf	(printf@val+1)^(0+128),w
  6364  05A4  0020               	movlb	0	; select bank0
  6365  05A5  00A5               	movwf	___lldiv@dividend+1
  6366  05A6  0021               	movlb	1	; select bank1
  6367  05A7  083A               	movf	printf@val^(0+128),w
  6368  05A8  0020               	movlb	0	; select bank0
  6369  05A9  00A4               	movwf	___lldiv@dividend
  6370  05AA  3196  26C1  3180   	fcall	___lldiv
  6371  05AD  0020               	movlb	0	; select bank0
  6372  05AE  0823               	movf	?___lldiv+3,w
  6373  05AF  00B5               	movwf	___llmod@dividend+3
  6374  05B0  0822               	movf	?___lldiv+2,w
  6375  05B1  00B4               	movwf	___llmod@dividend+2
  6376  05B2  0821               	movf	?___lldiv+1,w
  6377  05B3  00B3               	movwf	___llmod@dividend+1
  6378  05B4  0820               	movf	?___lldiv,w
  6379  05B5  00B2               	movwf	___llmod@dividend
  6380  05B6  3195  2548  3180   	fcall	___llmod
  6381  05B9  0020               	movlb	0	; select bank0
  6382  05BA  082E               	movf	?___llmod,w
  6383  05BB  3E30               	addlw	48
  6384  05BC  00E7               	movwf	??_printf
  6385  05BD  0867               	movf	??_printf,w
  6386  05BE  0021               	movlb	1	; select bank1
  6387  05BF  00C7               	movwf	printf@c^(0+128)
  6388                           
  6389                           ;doprnt.c: 1523: }
  6390                           ;doprnt.c: 1524: (putch(c) );
  6391  05C0  0847               	movf	printf@c^(0+128),w
  6392  05C1  3192  2260  3180   	fcall	_putch
  6393  05C4  2D71               	goto	l2890
  6394  05C5                     l424:	
  6395                           ;doprnt.c: 1540: return 0;
  6396                           ;	Return value of _printf is never used
  6397                           
  6398                           ;doprnt.c: 1525: }
  6399                           ;doprnt.c: 1533: }
  6400                           ;doprnt.c: 1535: alldone:
  6401                           
  6402  05C5  0008               	return
  6403  05C6                     __end_of_printf:	
  6404                           
  6405                           	psect	text29
  6406  0DBA                     __ptext29:	
  6407 ;; *************** function _scale *****************
  6408 ;; Defined at:
  6409 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  6410 ;; Parameters:    Size  Location     Type
  6411 ;;  scl             1    wreg     char 
  6412 ;; Auto vars:     Size  Location     Type
  6413 ;;  scl             1   46[BANK0 ] char 
  6414 ;; Return value:  Size  Location     Type
  6415 ;;                  3   38[BANK0 ] char 
  6416 ;; Registers used:
  6417 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6418 ;; Tracked objects:
  6419 ;;		On entry : 0/0
  6420 ;;		On exit  : 0/0
  6421 ;;		Unchanged: 0/0
  6422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6423 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6424 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6425 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6426 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6427 ;;Total ram usage:        9 bytes
  6428 ;; Hardware stack levels used:    1
  6429 ;; Hardware stack levels required when called:    6
  6430 ;; This function calls:
  6431 ;;		___awdiv
  6432 ;;		___awmod
  6433 ;;		___ftmul
  6434 ;;		___wmul
  6435 ;; This function is called by:
  6436 ;;		_printf
  6437 ;; This function uses a non-reentrant model
  6438 ;;
  6439                           
  6440                           
  6441                           ;psect for function _scale
  6442  0DBA                     _scale:	
  6443                           
  6444                           ;incstack = 0
  6445                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6446                           ;scale@scl stored from wreg
  6447  0DBA  0020               	movlb	0	; select bank0
  6448  0DBB  00CE               	movwf	scale@scl
  6449                           
  6450                           ;doprnt.c: 428: if(scl < 0) {
  6451  0DBC  1FCE               	btfss	scale@scl,7
  6452  0DBD  2EE0               	goto	l2446
  6453                           
  6454                           ;doprnt.c: 429: scl = -scl;
  6455  0DBE  09CE               	comf	scale@scl,f
  6456  0DBF  0ACE               	incf	scale@scl,f
  6457                           
  6458                           ;doprnt.c: 430: if(scl>=110)
  6459  0DC0  084E               	movf	scale@scl,w
  6460  0DC1  3A80               	xorlw	128
  6461  0DC2  3E12               	addlw	-238
  6462  0DC3  1C03               	skipc
  6463  0DC4  2E64               	goto	l2436
  6464                           
  6465                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6466  0DC5  300A               	movlw	10
  6467  0DC6  00A7               	movwf	___awdiv@divisor
  6468  0DC7  3000               	movlw	0
  6469  0DC8  00A8               	movwf	___awdiv@divisor+1
  6470  0DC9  084E               	movf	scale@scl,w
  6471  0DCA  00A2               	movwf	___awmod@dividend
  6472  0DCB  01A3               	clrf	___awmod@dividend+1
  6473  0DCC  1BA2               	btfsc	___awmod@dividend,7
  6474  0DCD  03A3               	decf	___awmod@dividend+1,f
  6475  0DCE  3064               	movlw	100
  6476  0DCF  00A0               	movwf	___awmod@divisor
  6477  0DD0  3000               	movlw	0
  6478  0DD1  00A1               	movwf	___awmod@divisor+1
  6479  0DD2  3195  258B  318D   	fcall	___awmod
  6480  0DD5  0020               	movlb	0	; select bank0
  6481  0DD6  0821               	movf	?___awmod+1,w
  6482  0DD7  00AA               	movwf	___awdiv@dividend+1
  6483  0DD8  0820               	movf	?___awmod,w
  6484  0DD9  00A9               	movwf	___awdiv@dividend
  6485  0DDA  3196  266F  318D   	fcall	___awdiv
  6486  0DDD  0020               	movlb	0	; select bank0
  6487  0DDE  0827               	movf	?___awdiv,w
  6488  0DDF  3E09               	addlw	9
  6489  0DE0  00B0               	movwf	___wmul@multiplier
  6490  0DE1  3000               	movlw	0
  6491  0DE2  3D28               	addwfc	?___awdiv+1,w
  6492  0DE3  00B1               	movwf	___wmul@multiplier+1
  6493  0DE4  3003               	movlw	3
  6494  0DE5  00B2               	movwf	___wmul@multiplicand
  6495  0DE6  3000               	movlw	0
  6496  0DE7  00B3               	movwf	___wmul@multiplicand+1
  6497  0DE8  3193  238F  318D   	fcall	___wmul
  6498  0DEB  0020               	movlb	0	; select bank0
  6499  0DEC  0831               	movf	?___wmul+1,w
  6500  0DED  0085               	movwf	5
  6501  0DEE  0830               	movf	?___wmul,w
  6502  0DEF  0084               	movwf	4
  6503  0DF0  3028               	movlw	low (__npowers_| (0+32768))
  6504  0DF1  0784               	addwf	4,f
  6505  0DF2  3090               	movlw	high (__npowers_| (0+32768))
  6506  0DF3  3D85               	addwfc	5,f
  6507  0DF4  3F00               	moviw [0]fsr0
  6508  0DF5  00B6               	movwf	___ftmul@f1
  6509  0DF6  3F01               	moviw [1]fsr0
  6510  0DF7  00B7               	movwf	___ftmul@f1+1
  6511  0DF8  3F02               	moviw [2]fsr0
  6512  0DF9  00B8               	movwf	___ftmul@f1+2
  6513  0DFA  3064               	movlw	100
  6514  0DFB  00A7               	movwf	___awdiv@divisor
  6515  0DFC  3000               	movlw	0
  6516  0DFD  00A8               	movwf	___awdiv@divisor+1
  6517  0DFE  084E               	movf	scale@scl,w
  6518  0DFF  00A9               	movwf	___awdiv@dividend
  6519  0E00  01AA               	clrf	___awdiv@dividend+1
  6520  0E01  1BA9               	btfsc	___awdiv@dividend,7
  6521  0E02  03AA               	decf	___awdiv@dividend+1,f
  6522  0E03  3196  266F  318D   	fcall	___awdiv
  6523  0E06  0020               	movlb	0	; select bank0
  6524  0E07  0827               	movf	?___awdiv,w
  6525  0E08  3E12               	addlw	18
  6526  0E09  00B0               	movwf	___wmul@multiplier
  6527  0E0A  3000               	movlw	0
  6528  0E0B  3D28               	addwfc	?___awdiv+1,w
  6529  0E0C  00B1               	movwf	___wmul@multiplier+1
  6530  0E0D  3003               	movlw	3
  6531  0E0E  00B2               	movwf	___wmul@multiplicand
  6532  0E0F  3000               	movlw	0
  6533  0E10  00B3               	movwf	___wmul@multiplicand+1
  6534  0E11  3193  238F  318D   	fcall	___wmul
  6535  0E14  0020               	movlb	0	; select bank0
  6536  0E15  0831               	movf	?___wmul+1,w
  6537  0E16  0085               	movwf	5
  6538  0E17  0830               	movf	?___wmul,w
  6539  0E18  0084               	movwf	4
  6540  0E19  3028               	movlw	low (__npowers_| (0+32768))
  6541  0E1A  0784               	addwf	4,f
  6542  0E1B  3090               	movlw	high (__npowers_| (0+32768))
  6543  0E1C  3D85               	addwfc	5,f
  6544  0E1D  3F00               	moviw [0]fsr0
  6545  0E1E  00B9               	movwf	___ftmul@f2
  6546  0E1F  3F01               	moviw [1]fsr0
  6547  0E20  00BA               	movwf	___ftmul@f2+1
  6548  0E21  3F02               	moviw [2]fsr0
  6549  0E22  00BB               	movwf	___ftmul@f2+2
  6550  0E23  3189  21F6  318D   	fcall	___ftmul
  6551  0E26  0020               	movlb	0	; select bank0
  6552  0E27  0836               	movf	?___ftmul,w
  6553  0E28  00CB               	movwf	_scale$1276
  6554  0E29  0837               	movf	?___ftmul+1,w
  6555  0E2A  00CC               	movwf	_scale$1276+1
  6556  0E2B  0838               	movf	?___ftmul+2,w
  6557  0E2C  00CD               	movwf	_scale$1276+2
  6558                           
  6559                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6560  0E2D  084E               	movf	scale@scl,w
  6561  0E2E  00A2               	movwf	___awmod@dividend
  6562  0E2F  01A3               	clrf	___awmod@dividend+1
  6563  0E30  1BA2               	btfsc	___awmod@dividend,7
  6564  0E31  03A3               	decf	___awmod@dividend+1,f
  6565  0E32  300A               	movlw	10
  6566  0E33  00A0               	movwf	___awmod@divisor
  6567  0E34  3000               	movlw	0
  6568  0E35  00A1               	movwf	___awmod@divisor+1
  6569  0E36  3195  258B  318D   	fcall	___awmod
  6570  0E39  0020               	movlb	0	; select bank0
  6571  0E3A  0821               	movf	?___awmod+1,w
  6572  0E3B  00B1               	movwf	___wmul@multiplier+1
  6573  0E3C  0820               	movf	?___awmod,w
  6574  0E3D  00B0               	movwf	___wmul@multiplier
  6575  0E3E  3003               	movlw	3
  6576  0E3F  00B2               	movwf	___wmul@multiplicand
  6577  0E40  3000               	movlw	0
  6578  0E41  00B3               	movwf	___wmul@multiplicand+1
  6579  0E42  3193  238F  318D   	fcall	___wmul
  6580  0E45  0020               	movlb	0	; select bank0
  6581  0E46  0831               	movf	?___wmul+1,w
  6582  0E47  0085               	movwf	5
  6583  0E48  0830               	movf	?___wmul,w
  6584  0E49  0084               	movwf	4
  6585  0E4A  3028               	movlw	low (__npowers_| (0+32768))
  6586  0E4B  0784               	addwf	4,f
  6587  0E4C  3090               	movlw	high (__npowers_| (0+32768))
  6588  0E4D  3D85               	addwfc	5,f
  6589  0E4E  3F00               	moviw [0]fsr0
  6590  0E4F  00B6               	movwf	___ftmul@f1
  6591  0E50  3F01               	moviw [1]fsr0
  6592  0E51  00B7               	movwf	___ftmul@f1+1
  6593  0E52  3F02               	moviw [2]fsr0
  6594  0E53  00B8               	movwf	___ftmul@f1+2
  6595  0E54  084B               	movf	_scale$1276,w
  6596  0E55  00B9               	movwf	___ftmul@f2
  6597  0E56  084C               	movf	_scale$1276+1,w
  6598  0E57  00BA               	movwf	___ftmul@f2+1
  6599  0E58  084D               	movf	_scale$1276+2,w
  6600  0E59  00BB               	movwf	___ftmul@f2+2
  6601  0E5A  3189  21F6         	fcall	___ftmul
  6602  0E5C  0020               	movlb	0	; select bank0
  6603  0E5D  0836               	movf	?___ftmul,w
  6604  0E5E  00C6               	movwf	?_scale
  6605  0E5F  0837               	movf	?___ftmul+1,w
  6606  0E60  00C7               	movwf	?_scale+1
  6607  0E61  0838               	movf	?___ftmul+2,w
  6608  0E62  00C8               	movwf	?_scale+2
  6609  0E63  0008               	return
  6610  0E64                     l2436:	
  6611                           
  6612                           ;doprnt.c: 432: else if(scl > 10)
  6613  0E64  084E               	movf	scale@scl,w
  6614  0E65  3A80               	xorlw	128
  6615  0E66  3E75               	addlw	-139
  6616  0E67  1C03               	skipc
  6617  0E68  2EC3               	goto	l2442
  6618                           
  6619                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6620  0E69  084E               	movf	scale@scl,w
  6621  0E6A  00A2               	movwf	___awmod@dividend
  6622  0E6B  01A3               	clrf	___awmod@dividend+1
  6623  0E6C  1BA2               	btfsc	___awmod@dividend,7
  6624  0E6D  03A3               	decf	___awmod@dividend+1,f
  6625  0E6E  300A               	movlw	10
  6626  0E6F  00A0               	movwf	___awmod@divisor
  6627  0E70  3000               	movlw	0
  6628  0E71  00A1               	movwf	___awmod@divisor+1
  6629  0E72  3195  258B  318D   	fcall	___awmod
  6630  0E75  0020               	movlb	0	; select bank0
  6631  0E76  0821               	movf	?___awmod+1,w
  6632  0E77  00B1               	movwf	___wmul@multiplier+1
  6633  0E78  0820               	movf	?___awmod,w
  6634  0E79  00B0               	movwf	___wmul@multiplier
  6635  0E7A  3003               	movlw	3
  6636  0E7B  00B2               	movwf	___wmul@multiplicand
  6637  0E7C  3000               	movlw	0
  6638  0E7D  00B3               	movwf	___wmul@multiplicand+1
  6639  0E7E  3193  238F  318D   	fcall	___wmul
  6640  0E81  0020               	movlb	0	; select bank0
  6641  0E82  0831               	movf	?___wmul+1,w
  6642  0E83  0085               	movwf	5
  6643  0E84  0830               	movf	?___wmul,w
  6644  0E85  0084               	movwf	4
  6645  0E86  3028               	movlw	low (__npowers_| (0+32768))
  6646  0E87  0784               	addwf	4,f
  6647  0E88  3090               	movlw	high (__npowers_| (0+32768))
  6648  0E89  3D85               	addwfc	5,f
  6649  0E8A  3F00               	moviw [0]fsr0
  6650  0E8B  00B6               	movwf	___ftmul@f1
  6651  0E8C  3F01               	moviw [1]fsr0
  6652  0E8D  00B7               	movwf	___ftmul@f1+1
  6653  0E8E  3F02               	moviw [2]fsr0
  6654  0E8F  00B8               	movwf	___ftmul@f1+2
  6655  0E90  300A               	movlw	10
  6656  0E91  00A7               	movwf	___awdiv@divisor
  6657  0E92  3000               	movlw	0
  6658  0E93  00A8               	movwf	___awdiv@divisor+1
  6659  0E94  084E               	movf	scale@scl,w
  6660  0E95  00A9               	movwf	___awdiv@dividend
  6661  0E96  01AA               	clrf	___awdiv@dividend+1
  6662  0E97  1BA9               	btfsc	___awdiv@dividend,7
  6663  0E98  03AA               	decf	___awdiv@dividend+1,f
  6664  0E99  3196  266F  318D   	fcall	___awdiv
  6665  0E9C  0020               	movlb	0	; select bank0
  6666  0E9D  0827               	movf	?___awdiv,w
  6667  0E9E  3E09               	addlw	9
  6668  0E9F  00B0               	movwf	___wmul@multiplier
  6669  0EA0  3000               	movlw	0
  6670  0EA1  3D28               	addwfc	?___awdiv+1,w
  6671  0EA2  00B1               	movwf	___wmul@multiplier+1
  6672  0EA3  3003               	movlw	3
  6673  0EA4  00B2               	movwf	___wmul@multiplicand
  6674  0EA5  3000               	movlw	0
  6675  0EA6  00B3               	movwf	___wmul@multiplicand+1
  6676  0EA7  3193  238F  318D   	fcall	___wmul
  6677  0EAA  0020               	movlb	0	; select bank0
  6678  0EAB  0831               	movf	?___wmul+1,w
  6679  0EAC  0085               	movwf	5
  6680  0EAD  0830               	movf	?___wmul,w
  6681  0EAE  0084               	movwf	4
  6682  0EAF  3028               	movlw	low (__npowers_| (0+32768))
  6683  0EB0  0784               	addwf	4,f
  6684  0EB1  3090               	movlw	high (__npowers_| (0+32768))
  6685  0EB2  3D85               	addwfc	5,f
  6686  0EB3  3F00               	moviw [0]fsr0
  6687  0EB4  00B9               	movwf	___ftmul@f2
  6688  0EB5  3F01               	moviw [1]fsr0
  6689  0EB6  00BA               	movwf	___ftmul@f2+1
  6690  0EB7  3F02               	moviw [2]fsr0
  6691  0EB8  00BB               	movwf	___ftmul@f2+2
  6692  0EB9  3189  21F6         	fcall	___ftmul
  6693  0EBB  0020               	movlb	0	; select bank0
  6694  0EBC  0836               	movf	?___ftmul,w
  6695  0EBD  00C6               	movwf	?_scale
  6696  0EBE  0837               	movf	?___ftmul+1,w
  6697  0EBF  00C7               	movwf	?_scale+1
  6698  0EC0  0838               	movf	?___ftmul+2,w
  6699  0EC1  00C8               	movwf	?_scale+2
  6700  0EC2  0008               	return
  6701  0EC3                     l2442:	
  6702                           
  6703                           ;doprnt.c: 434: return _npowers_[scl];
  6704  0EC3  084E               	movf	scale@scl,w
  6705  0EC4  00C9               	movwf	??_scale
  6706  0EC5  01CA               	clrf	??_scale+1
  6707  0EC6  0849               	movf	??_scale,w
  6708  0EC7  00B0               	movwf	___wmul@multiplier
  6709  0EC8  084A               	movf	??_scale+1,w
  6710  0EC9  00B1               	movwf	___wmul@multiplier+1
  6711  0ECA  3003               	movlw	3
  6712  0ECB  00B2               	movwf	___wmul@multiplicand
  6713  0ECC  3000               	movlw	0
  6714  0ECD  00B3               	movwf	___wmul@multiplicand+1
  6715  0ECE  3193  238F         	fcall	___wmul
  6716  0ED0  0020               	movlb	0	; select bank0
  6717  0ED1  0831               	movf	?___wmul+1,w
  6718  0ED2  0085               	movwf	5
  6719  0ED3  0830               	movf	?___wmul,w
  6720  0ED4  0084               	movwf	4
  6721  0ED5  3028               	movlw	low (__npowers_| (0+32768))
  6722  0ED6  0784               	addwf	4,f
  6723  0ED7  3090               	movlw	high (__npowers_| (0+32768))
  6724  0ED8  3D85               	addwfc	5,f
  6725  0ED9  3F00               	moviw [0]fsr0
  6726  0EDA  00C6               	movwf	?_scale
  6727  0EDB  3F01               	moviw [1]fsr0
  6728  0EDC  00C7               	movwf	?_scale+1
  6729  0EDD  3F02               	moviw [2]fsr0
  6730  0EDE  00C8               	movwf	?_scale+2
  6731  0EDF  0008               	return
  6732  0EE0                     l2446:	
  6733                           
  6734                           ;doprnt.c: 435: }
  6735                           ;doprnt.c: 436: if(scl>=110)
  6736  0EE0  084E               	movf	scale@scl,w
  6737  0EE1  3A80               	xorlw	128
  6738  0EE2  3E12               	addlw	-238
  6739  0EE3  1C03               	skipc
  6740  0EE4  2F84               	goto	l2454
  6741                           
  6742                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6743  0EE5  300A               	movlw	10
  6744  0EE6  00A7               	movwf	___awdiv@divisor
  6745  0EE7  3000               	movlw	0
  6746  0EE8  00A8               	movwf	___awdiv@divisor+1
  6747  0EE9  084E               	movf	scale@scl,w
  6748  0EEA  00A2               	movwf	___awmod@dividend
  6749  0EEB  01A3               	clrf	___awmod@dividend+1
  6750  0EEC  1BA2               	btfsc	___awmod@dividend,7
  6751  0EED  03A3               	decf	___awmod@dividend+1,f
  6752  0EEE  3064               	movlw	100
  6753  0EEF  00A0               	movwf	___awmod@divisor
  6754  0EF0  3000               	movlw	0
  6755  0EF1  00A1               	movwf	___awmod@divisor+1
  6756  0EF2  3195  258B  318D   	fcall	___awmod
  6757  0EF5  0020               	movlb	0	; select bank0
  6758  0EF6  0821               	movf	?___awmod+1,w
  6759  0EF7  00AA               	movwf	___awdiv@dividend+1
  6760  0EF8  0820               	movf	?___awmod,w
  6761  0EF9  00A9               	movwf	___awdiv@dividend
  6762  0EFA  3196  266F  318D   	fcall	___awdiv
  6763  0EFD  0020               	movlb	0	; select bank0
  6764  0EFE  0827               	movf	?___awdiv,w
  6765  0EFF  3E09               	addlw	9
  6766  0F00  00B0               	movwf	___wmul@multiplier
  6767  0F01  3000               	movlw	0
  6768  0F02  3D28               	addwfc	?___awdiv+1,w
  6769  0F03  00B1               	movwf	___wmul@multiplier+1
  6770  0F04  3003               	movlw	3
  6771  0F05  00B2               	movwf	___wmul@multiplicand
  6772  0F06  3000               	movlw	0
  6773  0F07  00B3               	movwf	___wmul@multiplicand+1
  6774  0F08  3193  238F  318D   	fcall	___wmul
  6775  0F0B  0020               	movlb	0	; select bank0
  6776  0F0C  0831               	movf	?___wmul+1,w
  6777  0F0D  0085               	movwf	5
  6778  0F0E  0830               	movf	?___wmul,w
  6779  0F0F  0084               	movwf	4
  6780  0F10  304F               	movlw	low (__powers_| (0+32768))
  6781  0F11  0784               	addwf	4,f
  6782  0F12  3090               	movlw	high (__powers_| (0+32768))
  6783  0F13  3D85               	addwfc	5,f
  6784  0F14  3F00               	moviw [0]fsr0
  6785  0F15  00B6               	movwf	___ftmul@f1
  6786  0F16  3F01               	moviw [1]fsr0
  6787  0F17  00B7               	movwf	___ftmul@f1+1
  6788  0F18  3F02               	moviw [2]fsr0
  6789  0F19  00B8               	movwf	___ftmul@f1+2
  6790  0F1A  3064               	movlw	100
  6791  0F1B  00A7               	movwf	___awdiv@divisor
  6792  0F1C  3000               	movlw	0
  6793  0F1D  00A8               	movwf	___awdiv@divisor+1
  6794  0F1E  084E               	movf	scale@scl,w
  6795  0F1F  00A9               	movwf	___awdiv@dividend
  6796  0F20  01AA               	clrf	___awdiv@dividend+1
  6797  0F21  1BA9               	btfsc	___awdiv@dividend,7
  6798  0F22  03AA               	decf	___awdiv@dividend+1,f
  6799  0F23  3196  266F  318D   	fcall	___awdiv
  6800  0F26  0020               	movlb	0	; select bank0
  6801  0F27  0827               	movf	?___awdiv,w
  6802  0F28  3E12               	addlw	18
  6803  0F29  00B0               	movwf	___wmul@multiplier
  6804  0F2A  3000               	movlw	0
  6805  0F2B  3D28               	addwfc	?___awdiv+1,w
  6806  0F2C  00B1               	movwf	___wmul@multiplier+1
  6807  0F2D  3003               	movlw	3
  6808  0F2E  00B2               	movwf	___wmul@multiplicand
  6809  0F2F  3000               	movlw	0
  6810  0F30  00B3               	movwf	___wmul@multiplicand+1
  6811  0F31  3193  238F  318D   	fcall	___wmul
  6812  0F34  0020               	movlb	0	; select bank0
  6813  0F35  0831               	movf	?___wmul+1,w
  6814  0F36  0085               	movwf	5
  6815  0F37  0830               	movf	?___wmul,w
  6816  0F38  0084               	movwf	4
  6817  0F39  304F               	movlw	low (__powers_| (0+32768))
  6818  0F3A  0784               	addwf	4,f
  6819  0F3B  3090               	movlw	high (__powers_| (0+32768))
  6820  0F3C  3D85               	addwfc	5,f
  6821  0F3D  3F00               	moviw [0]fsr0
  6822  0F3E  00B9               	movwf	___ftmul@f2
  6823  0F3F  3F01               	moviw [1]fsr0
  6824  0F40  00BA               	movwf	___ftmul@f2+1
  6825  0F41  3F02               	moviw [2]fsr0
  6826  0F42  00BB               	movwf	___ftmul@f2+2
  6827  0F43  3189  21F6  318D   	fcall	___ftmul
  6828  0F46  0020               	movlb	0	; select bank0
  6829  0F47  0836               	movf	?___ftmul,w
  6830  0F48  00CB               	movwf	_scale$1276
  6831  0F49  0837               	movf	?___ftmul+1,w
  6832  0F4A  00CC               	movwf	_scale$1276+1
  6833  0F4B  0838               	movf	?___ftmul+2,w
  6834  0F4C  00CD               	movwf	_scale$1276+2
  6835                           
  6836                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6837  0F4D  084E               	movf	scale@scl,w
  6838  0F4E  00A2               	movwf	___awmod@dividend
  6839  0F4F  01A3               	clrf	___awmod@dividend+1
  6840  0F50  1BA2               	btfsc	___awmod@dividend,7
  6841  0F51  03A3               	decf	___awmod@dividend+1,f
  6842  0F52  300A               	movlw	10
  6843  0F53  00A0               	movwf	___awmod@divisor
  6844  0F54  3000               	movlw	0
  6845  0F55  00A1               	movwf	___awmod@divisor+1
  6846  0F56  3195  258B  318D   	fcall	___awmod
  6847  0F59  0020               	movlb	0	; select bank0
  6848  0F5A  0821               	movf	?___awmod+1,w
  6849  0F5B  00B1               	movwf	___wmul@multiplier+1
  6850  0F5C  0820               	movf	?___awmod,w
  6851  0F5D  00B0               	movwf	___wmul@multiplier
  6852  0F5E  3003               	movlw	3
  6853  0F5F  00B2               	movwf	___wmul@multiplicand
  6854  0F60  3000               	movlw	0
  6855  0F61  00B3               	movwf	___wmul@multiplicand+1
  6856  0F62  3193  238F  318D   	fcall	___wmul
  6857  0F65  0020               	movlb	0	; select bank0
  6858  0F66  0831               	movf	?___wmul+1,w
  6859  0F67  0085               	movwf	5
  6860  0F68  0830               	movf	?___wmul,w
  6861  0F69  0084               	movwf	4
  6862  0F6A  304F               	movlw	low (__powers_| (0+32768))
  6863  0F6B  0784               	addwf	4,f
  6864  0F6C  3090               	movlw	high (__powers_| (0+32768))
  6865  0F6D  3D85               	addwfc	5,f
  6866  0F6E  3F00               	moviw [0]fsr0
  6867  0F6F  00B6               	movwf	___ftmul@f1
  6868  0F70  3F01               	moviw [1]fsr0
  6869  0F71  00B7               	movwf	___ftmul@f1+1
  6870  0F72  3F02               	moviw [2]fsr0
  6871  0F73  00B8               	movwf	___ftmul@f1+2
  6872  0F74  084B               	movf	_scale$1276,w
  6873  0F75  00B9               	movwf	___ftmul@f2
  6874  0F76  084C               	movf	_scale$1276+1,w
  6875  0F77  00BA               	movwf	___ftmul@f2+1
  6876  0F78  084D               	movf	_scale$1276+2,w
  6877  0F79  00BB               	movwf	___ftmul@f2+2
  6878  0F7A  3189  21F6         	fcall	___ftmul
  6879  0F7C  0020               	movlb	0	; select bank0
  6880  0F7D  0836               	movf	?___ftmul,w
  6881  0F7E  00C6               	movwf	?_scale
  6882  0F7F  0837               	movf	?___ftmul+1,w
  6883  0F80  00C7               	movwf	?_scale+1
  6884  0F81  0838               	movf	?___ftmul+2,w
  6885  0F82  00C8               	movwf	?_scale+2
  6886  0F83  0008               	return
  6887  0F84                     l2454:	
  6888                           
  6889                           ;doprnt.c: 438: else if(scl > 10)
  6890  0F84  084E               	movf	scale@scl,w
  6891  0F85  3A80               	xorlw	128
  6892  0F86  3E75               	addlw	-139
  6893  0F87  1C03               	skipc
  6894  0F88  2FE3               	goto	l2460
  6895                           
  6896                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6897  0F89  084E               	movf	scale@scl,w
  6898  0F8A  00A2               	movwf	___awmod@dividend
  6899  0F8B  01A3               	clrf	___awmod@dividend+1
  6900  0F8C  1BA2               	btfsc	___awmod@dividend,7
  6901  0F8D  03A3               	decf	___awmod@dividend+1,f
  6902  0F8E  300A               	movlw	10
  6903  0F8F  00A0               	movwf	___awmod@divisor
  6904  0F90  3000               	movlw	0
  6905  0F91  00A1               	movwf	___awmod@divisor+1
  6906  0F92  3195  258B  318D   	fcall	___awmod
  6907  0F95  0020               	movlb	0	; select bank0
  6908  0F96  0821               	movf	?___awmod+1,w
  6909  0F97  00B1               	movwf	___wmul@multiplier+1
  6910  0F98  0820               	movf	?___awmod,w
  6911  0F99  00B0               	movwf	___wmul@multiplier
  6912  0F9A  3003               	movlw	3
  6913  0F9B  00B2               	movwf	___wmul@multiplicand
  6914  0F9C  3000               	movlw	0
  6915  0F9D  00B3               	movwf	___wmul@multiplicand+1
  6916  0F9E  3193  238F  318D   	fcall	___wmul
  6917  0FA1  0020               	movlb	0	; select bank0
  6918  0FA2  0831               	movf	?___wmul+1,w
  6919  0FA3  0085               	movwf	5
  6920  0FA4  0830               	movf	?___wmul,w
  6921  0FA5  0084               	movwf	4
  6922  0FA6  304F               	movlw	low (__powers_| (0+32768))
  6923  0FA7  0784               	addwf	4,f
  6924  0FA8  3090               	movlw	high (__powers_| (0+32768))
  6925  0FA9  3D85               	addwfc	5,f
  6926  0FAA  3F00               	moviw [0]fsr0
  6927  0FAB  00B6               	movwf	___ftmul@f1
  6928  0FAC  3F01               	moviw [1]fsr0
  6929  0FAD  00B7               	movwf	___ftmul@f1+1
  6930  0FAE  3F02               	moviw [2]fsr0
  6931  0FAF  00B8               	movwf	___ftmul@f1+2
  6932  0FB0  300A               	movlw	10
  6933  0FB1  00A7               	movwf	___awdiv@divisor
  6934  0FB2  3000               	movlw	0
  6935  0FB3  00A8               	movwf	___awdiv@divisor+1
  6936  0FB4  084E               	movf	scale@scl,w
  6937  0FB5  00A9               	movwf	___awdiv@dividend
  6938  0FB6  01AA               	clrf	___awdiv@dividend+1
  6939  0FB7  1BA9               	btfsc	___awdiv@dividend,7
  6940  0FB8  03AA               	decf	___awdiv@dividend+1,f
  6941  0FB9  3196  266F  318D   	fcall	___awdiv
  6942  0FBC  0020               	movlb	0	; select bank0
  6943  0FBD  0827               	movf	?___awdiv,w
  6944  0FBE  3E09               	addlw	9
  6945  0FBF  00B0               	movwf	___wmul@multiplier
  6946  0FC0  3000               	movlw	0
  6947  0FC1  3D28               	addwfc	?___awdiv+1,w
  6948  0FC2  00B1               	movwf	___wmul@multiplier+1
  6949  0FC3  3003               	movlw	3
  6950  0FC4  00B2               	movwf	___wmul@multiplicand
  6951  0FC5  3000               	movlw	0
  6952  0FC6  00B3               	movwf	___wmul@multiplicand+1
  6953  0FC7  3193  238F  318D   	fcall	___wmul
  6954  0FCA  0020               	movlb	0	; select bank0
  6955  0FCB  0831               	movf	?___wmul+1,w
  6956  0FCC  0085               	movwf	5
  6957  0FCD  0830               	movf	?___wmul,w
  6958  0FCE  0084               	movwf	4
  6959  0FCF  304F               	movlw	low (__powers_| (0+32768))
  6960  0FD0  0784               	addwf	4,f
  6961  0FD1  3090               	movlw	high (__powers_| (0+32768))
  6962  0FD2  3D85               	addwfc	5,f
  6963  0FD3  3F00               	moviw [0]fsr0
  6964  0FD4  00B9               	movwf	___ftmul@f2
  6965  0FD5  3F01               	moviw [1]fsr0
  6966  0FD6  00BA               	movwf	___ftmul@f2+1
  6967  0FD7  3F02               	moviw [2]fsr0
  6968  0FD8  00BB               	movwf	___ftmul@f2+2
  6969  0FD9  3189  21F6         	fcall	___ftmul
  6970  0FDB  0020               	movlb	0	; select bank0
  6971  0FDC  0836               	movf	?___ftmul,w
  6972  0FDD  00C6               	movwf	?_scale
  6973  0FDE  0837               	movf	?___ftmul+1,w
  6974  0FDF  00C7               	movwf	?_scale+1
  6975  0FE0  0838               	movf	?___ftmul+2,w
  6976  0FE1  00C8               	movwf	?_scale+2
  6977  0FE2  0008               	return
  6978  0FE3                     l2460:	
  6979                           
  6980                           ;doprnt.c: 440: return _powers_[scl];
  6981  0FE3  084E               	movf	scale@scl,w
  6982  0FE4  00C9               	movwf	??_scale
  6983  0FE5  01CA               	clrf	??_scale+1
  6984  0FE6  0849               	movf	??_scale,w
  6985  0FE7  00B0               	movwf	___wmul@multiplier
  6986  0FE8  084A               	movf	??_scale+1,w
  6987  0FE9  00B1               	movwf	___wmul@multiplier+1
  6988  0FEA  3003               	movlw	3
  6989  0FEB  00B2               	movwf	___wmul@multiplicand
  6990  0FEC  3000               	movlw	0
  6991  0FED  00B3               	movwf	___wmul@multiplicand+1
  6992  0FEE  3193  238F         	fcall	___wmul
  6993  0FF0  0020               	movlb	0	; select bank0
  6994  0FF1  0831               	movf	?___wmul+1,w
  6995  0FF2  0085               	movwf	5
  6996  0FF3  0830               	movf	?___wmul,w
  6997  0FF4  0084               	movwf	4
  6998  0FF5  304F               	movlw	low (__powers_| (0+32768))
  6999  0FF6  0784               	addwf	4,f
  7000  0FF7  3090               	movlw	high (__powers_| (0+32768))
  7001  0FF8  3D85               	addwfc	5,f
  7002  0FF9  3F00               	moviw [0]fsr0
  7003  0FFA  00C6               	movwf	?_scale
  7004  0FFB  3F01               	moviw [1]fsr0
  7005  0FFC  00C7               	movwf	?_scale+1
  7006  0FFD  3F02               	moviw [2]fsr0
  7007  0FFE  00C8               	movwf	?_scale+2
  7008  0FFF  0008               	return
  7009  1000                     __end_of_scale:	
  7010                           
  7011                           	psect	text30
  7012  1260                     __ptext30:	
  7013 ;; *************** function _putch *****************
  7014 ;; Defined at:
  7015 ;;		line 114 in file "UART.c"
  7016 ;; Parameters:    Size  Location     Type
  7017 ;;  txData          1    wreg     unsigned char 
  7018 ;; Auto vars:     Size  Location     Type
  7019 ;;  txData          1   13[BANK0 ] unsigned char 
  7020 ;; Return value:  Size  Location     Type
  7021 ;;                  1    wreg      void 
  7022 ;; Registers used:
  7023 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7024 ;; Tracked objects:
  7025 ;;		On entry : 0/0
  7026 ;;		On exit  : 0/0
  7027 ;;		Unchanged: 0/0
  7028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7030 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7032 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7033 ;;Total ram usage:        1 bytes
  7034 ;; Hardware stack levels used:    1
  7035 ;; Hardware stack levels required when called:    7
  7036 ;; This function calls:
  7037 ;;		_Send_put
  7038 ;; This function is called by:
  7039 ;;		_printf
  7040 ;; This function uses a non-reentrant model
  7041 ;;
  7042                           
  7043                           
  7044                           ;psect for function _putch
  7045  1260                     _putch:	
  7046                           
  7047                           ;incstack = 0
  7048                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7049                           ;putch@txData stored from wreg
  7050  1260  0020               	movlb	0	; select bank0
  7051  1261  00AD               	movwf	putch@txData
  7052                           
  7053                           ;UART.c: 115: Send_put(txData);
  7054  1262  082D               	movf	putch@txData,w
  7055  1263  3193  2346         	fcall	_Send_put
  7056  1265  0008               	return
  7057  1266                     __end_of_putch:	
  7058                           
  7059                           	psect	text31
  7060  1346                     __ptext31:	
  7061 ;; *************** function _Send_put *****************
  7062 ;; Defined at:
  7063 ;;		line 97 in file "UART.c"
  7064 ;; Parameters:    Size  Location     Type
  7065 ;;  _data           1    wreg     unsigned char 
  7066 ;; Auto vars:     Size  Location     Type
  7067 ;;  _data           1   12[BANK0 ] unsigned char 
  7068 ;; Return value:  Size  Location     Type
  7069 ;;                  1    wreg      void 
  7070 ;; Registers used:
  7071 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7072 ;; Tracked objects:
  7073 ;;		On entry : 0/0
  7074 ;;		On exit  : 0/0
  7075 ;;		Unchanged: 0/0
  7076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7078 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7079 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7080 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7081 ;;Total ram usage:        2 bytes
  7082 ;; Hardware stack levels used:    1
  7083 ;; Hardware stack levels required when called:    6
  7084 ;; This function calls:
  7085 ;;		_UART_buff_get
  7086 ;;		_UART_buff_put
  7087 ;; This function is called by:
  7088 ;;		_putch
  7089 ;; This function uses a non-reentrant model
  7090 ;;
  7091                           
  7092                           
  7093                           ;psect for function _Send_put
  7094  1346                     _Send_put:	
  7095                           
  7096                           ;incstack = 0
  7097                           ; Regs used in _Send_put: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7098                           ;Send_put@_data stored from wreg
  7099  1346  0020               	movlb	0	; select bank0
  7100  1347  00AC               	movwf	Send_put@_data
  7101                           
  7102                           ;UART.c: 98: UART_buff_put(&output_buffer, _data);
  7103  1348  082C               	movf	Send_put@_data,w
  7104  1349  00AB               	movwf	??_Send_put
  7105  134A  082B               	movf	??_Send_put,w
  7106  134B  00A6               	movwf	UART_buff_put@c
  7107  134C  303A               	movlw	(low (_output_buffer| (0+256)))& (0+255)
  7108  134D  3188  20BD  3193   	fcall	_UART_buff_put
  7109                           
  7110                           ;UART.c: 99: if (Transmit_stall == 1) {
  7111  1350  0021               	movlb	1	; select bank1
  7112  1351  036E               	decf	_Transmit_stall^(0+128),w
  7113  1352  1D03               	btfss	3,2
  7114  1353  0008               	return
  7115                           
  7116                           ;UART.c: 100: Transmit_stall = 0;
  7117  1354  01EE               	clrf	_Transmit_stall^(0+128)
  7118                           
  7119                           ;UART.c: 101: TXREG = UART_buff_get(&output_buffer);
  7120  1355  303A               	movlw	(low (_output_buffer| (0+256)))& (0+255)
  7121  1356  3196  261E         	fcall	_UART_buff_get
  7122  1358  0023               	movlb	3	; select bank3
  7123  1359  009A               	movwf	26	;volatile
  7124                           
  7125                           ;UART.c: 102: PIE1bits.TXIE = 1;
  7126  135A  0021               	movlb	1	; select bank1
  7127  135B  1611               	bsf	17,4	;volatile
  7128  135C  0008               	return
  7129  135D                     __end_of_Send_put:	
  7130                           
  7131                           	psect	text32
  7132  08BD                     __ptext32:	
  7133 ;; *************** function _UART_buff_put *****************
  7134 ;; Defined at:
  7135 ;;		line 60 in file "UART.c"
  7136 ;; Parameters:    Size  Location     Type
  7137 ;;  _this           1    wreg     PTR struct UART_ring_buf
  7138 ;;		 -> output_buffer(26), input_buffer(26), 
  7139 ;;  c               1    6[BANK0 ] unsigned char 
  7140 ;; Auto vars:     Size  Location     Type
  7141 ;;  _this           1   10[BANK0 ] PTR struct UART_ring_buf
  7142 ;;		 -> output_buffer(26), input_buffer(26), 
  7143 ;; Return value:  Size  Location     Type
  7144 ;;                  1    wreg      void 
  7145 ;; Registers used:
  7146 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7147 ;; Tracked objects:
  7148 ;;		On entry : 0/0
  7149 ;;		On exit  : 0/0
  7150 ;;		Unchanged: 0/0
  7151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7152 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7153 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7154 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7155 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7156 ;;Total ram usage:        5 bytes
  7157 ;; Hardware stack levels used:    1
  7158 ;; Hardware stack levels required when called:    5
  7159 ;; This function calls:
  7160 ;;		_UART_buff_modulo_inc
  7161 ;; This function is called by:
  7162 ;;		_Send_put
  7163 ;; This function uses a non-reentrant model
  7164 ;;
  7165                           
  7166                           
  7167                           ;psect for function _UART_buff_put
  7168  08BD                     _UART_buff_put:	
  7169                           
  7170                           ;incstack = 0
  7171                           ; Regs used in _UART_buff_put: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7172                           ;UART_buff_put@_this stored from wreg
  7173  08BD  0020               	movlb	0	; select bank0
  7174  08BE  00AA               	movwf	UART_buff_put@_this
  7175                           
  7176                           ;UART.c: 61: if (_this->count < 20) {
  7177  08BF  082A               	movf	UART_buff_put@_this,w
  7178  08C0  3E18               	addlw	24
  7179  08C1  0086               	movwf	6
  7180  08C2  3001               	movlw	1	; select bank2/3
  7181  08C3  0087               	movwf	7
  7182  08C4  3F40               	moviw [0]fsr1
  7183  08C5  00A7               	movwf	??_UART_buff_put
  7184  08C6  3F41               	moviw [1]fsr1
  7185  08C7  00A8               	movwf	??_UART_buff_put+1
  7186  08C8  0828               	movf	??_UART_buff_put+1,w
  7187  08C9  3A80               	xorlw	128
  7188  08CA  00A9               	movwf	??_UART_buff_put+2
  7189  08CB  3080               	movlw	128
  7190  08CC  0229               	subwf	??_UART_buff_put+2,w
  7191  08CD  1D03               	skipz
  7192  08CE  28D1               	goto	u2225
  7193  08CF  3014               	movlw	20
  7194  08D0  0227               	subwf	??_UART_buff_put,w
  7195  08D1                     u2225:	
  7196  08D1  1803               	skipnc
  7197  08D2  2908               	goto	l2122
  7198                           
  7199                           ;UART.c: 62: _this->buf[_this->head] = c;
  7200  08D3  0020               	movlb	0	; select bank0
  7201  08D4  0826               	movf	UART_buff_put@c,w
  7202  08D5  00A7               	movwf	??_UART_buff_put
  7203  08D6  082A               	movf	UART_buff_put@_this,w
  7204  08D7  3E14               	addlw	20
  7205  08D8  0086               	movwf	6
  7206  08D9  3001               	movlw	1	; select bank2/3
  7207  08DA  0087               	movwf	7
  7208  08DB  0801               	movf	1,w
  7209  08DC  072A               	addwf	UART_buff_put@_this,w
  7210  08DD  00A8               	movwf	??_UART_buff_put+1
  7211  08DE  0828               	movf	??_UART_buff_put+1,w
  7212  08DF  0086               	movwf	6
  7213  08E0  3001               	movlw	1	; select bank2/3
  7214  08E1  0087               	movwf	7
  7215  08E2  0827               	movf	??_UART_buff_put,w
  7216  08E3  0081               	movwf	1
  7217                           
  7218                           ;UART.c: 63: _this->head = UART_buff_modulo_inc(_this->head, 20);
  7219  08E4  082A               	movf	UART_buff_put@_this,w
  7220  08E5  3E14               	addlw	20
  7221  08E6  0086               	movwf	6
  7222  08E7  3001               	movlw	1	; select bank2/3
  7223  08E8  0087               	movwf	7
  7224  08E9  3F40               	moviw [0]fsr1
  7225  08EA  00A0               	movwf	UART_buff_modulo_inc@value
  7226  08EB  3F41               	moviw [1]fsr1
  7227  08EC  00A1               	movwf	UART_buff_modulo_inc@value+1
  7228  08ED  3014               	movlw	20
  7229  08EE  00A2               	movwf	UART_buff_modulo_inc@modulus
  7230  08EF  3000               	movlw	0
  7231  08F0  00A3               	movwf	UART_buff_modulo_inc@modulus+1
  7232  08F1  3193  231A         	fcall	_UART_buff_modulo_inc
  7233  08F3  0020               	movlb	0	; select bank0
  7234  08F4  082A               	movf	UART_buff_put@_this,w
  7235  08F5  3E14               	addlw	20
  7236  08F6  0086               	movwf	6
  7237  08F7  3001               	movlw	1	; select bank2/3
  7238  08F8  0087               	movwf	7
  7239  08F9  0820               	movf	?_UART_buff_modulo_inc,w
  7240  08FA  3FC0               	movwi [0]fsr1
  7241  08FB  0821               	movf	?_UART_buff_modulo_inc+1,w
  7242  08FC  3FC1               	movwi [1]fsr1
  7243                           
  7244                           ;UART.c: 64: ++_this->count;
  7245  08FD  082A               	movf	UART_buff_put@_this,w
  7246  08FE  3E18               	addlw	24
  7247  08FF  0086               	movwf	6
  7248  0900  3001               	movlw	1	; select bank2/3
  7249  0901  0087               	movwf	7
  7250  0902  3001               	movlw	1
  7251  0903  0781               	addwf	1,f
  7252  0904  3141               	addfsr 1,1
  7253  0905  1803               	skipnc
  7254  0906  0A81               	incf	1,f
  7255                           
  7256                           ;UART.c: 65: } else {
  7257  0907  0008               	return
  7258  0908                     l2122:	
  7259                           
  7260                           ;UART.c: 66: _this->buf[_this->head] = c;
  7261  0908  0020               	movlb	0	; select bank0
  7262  0909  0826               	movf	UART_buff_put@c,w
  7263  090A  00A7               	movwf	??_UART_buff_put
  7264  090B  082A               	movf	UART_buff_put@_this,w
  7265  090C  3E14               	addlw	20
  7266  090D  0086               	movwf	6
  7267  090E  3001               	movlw	1	; select bank2/3
  7268  090F  0087               	movwf	7
  7269  0910  0801               	movf	1,w
  7270  0911  072A               	addwf	UART_buff_put@_this,w
  7271  0912  00A8               	movwf	??_UART_buff_put+1
  7272  0913  0828               	movf	??_UART_buff_put+1,w
  7273  0914  0086               	movwf	6
  7274  0915  3001               	movlw	1	; select bank2/3
  7275  0916  0087               	movwf	7
  7276  0917  0827               	movf	??_UART_buff_put,w
  7277  0918  0081               	movwf	1
  7278                           
  7279                           ;UART.c: 67: _this->head = UART_buff_modulo_inc(_this->head, 20);
  7280  0919  082A               	movf	UART_buff_put@_this,w
  7281  091A  3E14               	addlw	20
  7282  091B  0086               	movwf	6
  7283  091C  3001               	movlw	1	; select bank2/3
  7284  091D  0087               	movwf	7
  7285  091E  3F40               	moviw [0]fsr1
  7286  091F  00A0               	movwf	UART_buff_modulo_inc@value
  7287  0920  3F41               	moviw [1]fsr1
  7288  0921  00A1               	movwf	UART_buff_modulo_inc@value+1
  7289  0922  3014               	movlw	20
  7290  0923  00A2               	movwf	UART_buff_modulo_inc@modulus
  7291  0924  3000               	movlw	0
  7292  0925  00A3               	movwf	UART_buff_modulo_inc@modulus+1
  7293  0926  3193  231A  3188   	fcall	_UART_buff_modulo_inc
  7294  0929  0020               	movlb	0	; select bank0
  7295  092A  082A               	movf	UART_buff_put@_this,w
  7296  092B  3E14               	addlw	20
  7297  092C  0086               	movwf	6
  7298  092D  3001               	movlw	1	; select bank2/3
  7299  092E  0087               	movwf	7
  7300  092F  0820               	movf	?_UART_buff_modulo_inc,w
  7301  0930  3FC0               	movwi [0]fsr1
  7302  0931  0821               	movf	?_UART_buff_modulo_inc+1,w
  7303  0932  3FC1               	movwi [1]fsr1
  7304                           
  7305                           ;UART.c: 68: _this->tail = UART_buff_modulo_inc(_this->tail, 20);
  7306  0933  082A               	movf	UART_buff_put@_this,w
  7307  0934  3E16               	addlw	22
  7308  0935  0086               	movwf	6
  7309  0936  3001               	movlw	1	; select bank2/3
  7310  0937  0087               	movwf	7
  7311  0938  3F40               	moviw [0]fsr1
  7312  0939  00A0               	movwf	UART_buff_modulo_inc@value
  7313  093A  3F41               	moviw [1]fsr1
  7314  093B  00A1               	movwf	UART_buff_modulo_inc@value+1
  7315  093C  3014               	movlw	20
  7316  093D  00A2               	movwf	UART_buff_modulo_inc@modulus
  7317  093E  3000               	movlw	0
  7318  093F  00A3               	movwf	UART_buff_modulo_inc@modulus+1
  7319  0940  3193  231A         	fcall	_UART_buff_modulo_inc
  7320  0942  0020               	movlb	0	; select bank0
  7321  0943  082A               	movf	UART_buff_put@_this,w
  7322  0944  3E16               	addlw	22
  7323  0945  0086               	movwf	6
  7324  0946  3001               	movlw	1	; select bank2/3
  7325  0947  0087               	movwf	7
  7326  0948  0820               	movf	?_UART_buff_modulo_inc,w
  7327  0949  3FC0               	movwi [0]fsr1
  7328  094A  0821               	movf	?_UART_buff_modulo_inc+1,w
  7329  094B  3FC1               	movwi [1]fsr1
  7330  094C  0008               	return
  7331  094D                     __end_of_UART_buff_put:	
  7332                           
  7333                           	psect	text33
  7334  161E                     __ptext33:	
  7335 ;; *************** function _UART_buff_get *****************
  7336 ;; Defined at:
  7337 ;;		line 73 in file "UART.c"
  7338 ;; Parameters:    Size  Location     Type
  7339 ;;  _this           1    wreg     PTR struct UART_ring_buf
  7340 ;;		 -> output_buffer(26), input_buffer(26), 
  7341 ;; Auto vars:     Size  Location     Type
  7342 ;;  _this           1   10[BANK0 ] PTR struct UART_ring_buf
  7343 ;;		 -> output_buffer(26), input_buffer(26), 
  7344 ;;  c               1    9[BANK0 ] unsigned char 
  7345 ;; Return value:  Size  Location     Type
  7346 ;;                  1    wreg      unsigned char 
  7347 ;; Registers used:
  7348 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7349 ;; Tracked objects:
  7350 ;;		On entry : 0/0
  7351 ;;		On exit  : 0/0
  7352 ;;		Unchanged: 0/0
  7353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7355 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7356 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7357 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7358 ;;Total ram usage:        5 bytes
  7359 ;; Hardware stack levels used:    1
  7360 ;; Hardware stack levels required when called:    5
  7361 ;; This function calls:
  7362 ;;		_UART_buff_modulo_inc
  7363 ;; This function is called by:
  7364 ;;		_Send_put
  7365 ;;		_Receive_get
  7366 ;; This function uses a non-reentrant model
  7367 ;;
  7368                           
  7369                           
  7370                           ;psect for function _UART_buff_get
  7371  161E                     _UART_buff_get:	
  7372                           
  7373                           ;incstack = 0
  7374                           ; Regs used in _UART_buff_get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7375                           ;UART_buff_get@_this stored from wreg
  7376  161E  0020               	movlb	0	; select bank0
  7377  161F  00AA               	movwf	UART_buff_get@_this
  7378                           
  7379                           ;UART.c: 74: unsigned char c;
  7380                           ;UART.c: 75: if (_this->count > 0) {
  7381  1620  082A               	movf	UART_buff_get@_this,w
  7382  1621  3E18               	addlw	24
  7383  1622  0086               	movwf	6
  7384  1623  3001               	movlw	1	; select bank2/3
  7385  1624  0087               	movwf	7
  7386  1625  3F40               	moviw [0]fsr1
  7387  1626  00A6               	movwf	??_UART_buff_get
  7388  1627  3F41               	moviw [1]fsr1
  7389  1628  00A7               	movwf	??_UART_buff_get+1
  7390  1629  0827               	movf	??_UART_buff_get+1,w
  7391  162A  3A80               	xorlw	128
  7392  162B  00A8               	movwf	??_UART_buff_get+2
  7393  162C  3080               	movlw	128
  7394  162D  0228               	subwf	??_UART_buff_get+2,w
  7395  162E  1D03               	skipz
  7396  162F  2E32               	goto	u2235
  7397  1630  3001               	movlw	1
  7398  1631  0226               	subwf	??_UART_buff_get,w
  7399  1632                     u2235:	
  7400  1632  1C03               	skipc
  7401  1633  2E6B               	goto	l2136
  7402                           
  7403                           ;UART.c: 76: c = _this->buf[_this->tail];
  7404  1634  0020               	movlb	0	; select bank0
  7405  1635  082A               	movf	UART_buff_get@_this,w
  7406  1636  3E16               	addlw	22
  7407  1637  0086               	movwf	6
  7408  1638  3001               	movlw	1	; select bank2/3
  7409  1639  0087               	movwf	7
  7410  163A  0801               	movf	1,w
  7411  163B  072A               	addwf	UART_buff_get@_this,w
  7412  163C  00A6               	movwf	??_UART_buff_get
  7413  163D  0826               	movf	??_UART_buff_get,w
  7414  163E  0086               	movwf	6
  7415  163F  3001               	movlw	1	; select bank2/3
  7416  1640  0087               	movwf	7
  7417  1641  0801               	movf	1,w
  7418  1642  00A7               	movwf	??_UART_buff_get+1
  7419  1643  0827               	movf	??_UART_buff_get+1,w
  7420  1644  00A9               	movwf	UART_buff_get@c
  7421                           
  7422                           ;UART.c: 77: _this->tail = UART_buff_modulo_inc(_this->tail, 20);
  7423  1645  082A               	movf	UART_buff_get@_this,w
  7424  1646  3E16               	addlw	22
  7425  1647  0086               	movwf	6
  7426  1648  3001               	movlw	1	; select bank2/3
  7427  1649  0087               	movwf	7
  7428  164A  3F40               	moviw [0]fsr1
  7429  164B  00A0               	movwf	UART_buff_modulo_inc@value
  7430  164C  3F41               	moviw [1]fsr1
  7431  164D  00A1               	movwf	UART_buff_modulo_inc@value+1
  7432  164E  3014               	movlw	20
  7433  164F  00A2               	movwf	UART_buff_modulo_inc@modulus
  7434  1650  3000               	movlw	0
  7435  1651  00A3               	movwf	UART_buff_modulo_inc@modulus+1
  7436  1652  3193  231A  3196   	fcall	_UART_buff_modulo_inc
  7437  1655  0020               	movlb	0	; select bank0
  7438  1656  082A               	movf	UART_buff_get@_this,w
  7439  1657  3E16               	addlw	22
  7440  1658  0086               	movwf	6
  7441  1659  3001               	movlw	1	; select bank2/3
  7442  165A  0087               	movwf	7
  7443  165B  0820               	movf	?_UART_buff_modulo_inc,w
  7444  165C  3FC0               	movwi [0]fsr1
  7445  165D  0821               	movf	?_UART_buff_modulo_inc+1,w
  7446  165E  3FC1               	movwi [1]fsr1
  7447                           
  7448                           ;UART.c: 78: --_this->count;
  7449  165F  082A               	movf	UART_buff_get@_this,w
  7450  1660  3E18               	addlw	24
  7451  1661  0086               	movwf	6
  7452  1662  3001               	movlw	1	; select bank2/3
  7453  1663  0087               	movwf	7
  7454  1664  30FF               	movlw	255
  7455  1665  0781               	addwf	1,f
  7456  1666  3141               	addfsr 1,1
  7457  1667  30FF               	movlw	255
  7458  1668  3D81               	addwfc	1,f
  7459  1669  317F               	addfsr 1,-1
  7460                           
  7461                           ;UART.c: 79: } else {
  7462  166A  2E6D               	goto	l2138
  7463  166B                     l2136:	
  7464                           
  7465                           ;UART.c: 80: c = 0;
  7466  166B  0020               	movlb	0	; select bank0
  7467  166C  01A9               	clrf	UART_buff_get@c
  7468  166D                     l2138:	
  7469                           
  7470                           ;UART.c: 81: }
  7471                           ;UART.c: 82: return (c);
  7472  166D  0829               	movf	UART_buff_get@c,w
  7473  166E  0008               	return
  7474  166F                     __end_of_UART_buff_get:	
  7475                           
  7476                           	psect	text34
  7477  131A                     __ptext34:	
  7478 ;; *************** function _UART_buff_modulo_inc *****************
  7479 ;; Defined at:
  7480 ;;		line 89 in file "UART.c"
  7481 ;; Parameters:    Size  Location     Type
  7482 ;;  value           2    0[BANK0 ] const unsigned int 
  7483 ;;  modulus         2    2[BANK0 ] const unsigned int 
  7484 ;; Auto vars:     Size  Location     Type
  7485 ;;  my_value        2    4[BANK0 ] unsigned int 
  7486 ;; Return value:  Size  Location     Type
  7487 ;;                  2    0[BANK0 ] unsigned int 
  7488 ;; Registers used:
  7489 ;;		wreg, status,2, status,0
  7490 ;; Tracked objects:
  7491 ;;		On entry : 0/0
  7492 ;;		On exit  : 0/0
  7493 ;;		Unchanged: 0/0
  7494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7495 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7496 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7498 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7499 ;;Total ram usage:        6 bytes
  7500 ;; Hardware stack levels used:    1
  7501 ;; Hardware stack levels required when called:    4
  7502 ;; This function calls:
  7503 ;;		Nothing
  7504 ;; This function is called by:
  7505 ;;		_UART_buff_put
  7506 ;;		_UART_buff_get
  7507 ;; This function uses a non-reentrant model
  7508 ;;
  7509                           
  7510                           
  7511                           ;psect for function _UART_buff_modulo_inc
  7512  131A                     _UART_buff_modulo_inc:	
  7513                           
  7514                           ;UART.c: 90: unsigned int my_value = value + 1;
  7515                           
  7516                           ;incstack = 0
  7517                           ; Regs used in _UART_buff_modulo_inc: [wreg+status,2+status,0]
  7518  131A  0020               	movlb	0	; select bank0
  7519  131B  0820               	movf	UART_buff_modulo_inc@value,w
  7520  131C  3E01               	addlw	1
  7521  131D  00A4               	movwf	UART_buff_modulo_inc@my_value
  7522  131E  3000               	movlw	0
  7523  131F  3D21               	addwfc	UART_buff_modulo_inc@value+1,w
  7524  1320  00A5               	movwf	UART_buff_modulo_inc@my_value+1
  7525                           
  7526                           ;UART.c: 91: if (my_value >= modulus) {
  7527  1321  0823               	movf	UART_buff_modulo_inc@modulus+1,w
  7528  1322  0225               	subwf	UART_buff_modulo_inc@my_value+1,w
  7529  1323  1D03               	skipz
  7530  1324  2B27               	goto	u2215
  7531  1325  0822               	movf	UART_buff_modulo_inc@modulus,w
  7532  1326  0224               	subwf	UART_buff_modulo_inc@my_value,w
  7533  1327                     u2215:	
  7534  1327  1C03               	skipc
  7535  1328  2B2B               	goto	l2110
  7536                           
  7537                           ;UART.c: 92: my_value = 0;
  7538  1329  01A4               	clrf	UART_buff_modulo_inc@my_value
  7539  132A  01A5               	clrf	UART_buff_modulo_inc@my_value+1
  7540  132B                     l2110:	
  7541                           
  7542                           ;UART.c: 93: }
  7543                           ;UART.c: 94: return (my_value);
  7544  132B  0825               	movf	UART_buff_modulo_inc@my_value+1,w
  7545  132C  00A1               	movwf	?_UART_buff_modulo_inc+1
  7546  132D  0824               	movf	UART_buff_modulo_inc@my_value,w
  7547  132E  00A0               	movwf	?_UART_buff_modulo_inc
  7548  132F  0008               	return
  7549  1330                     __end_of_UART_buff_modulo_inc:	
  7550                           
  7551                           	psect	text35
  7552  05C6                     __ptext35:	
  7553 ;; *************** function _fround *****************
  7554 ;; Defined at:
  7555 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  7556 ;; Parameters:    Size  Location     Type
  7557 ;;  prec            1    wreg     unsigned char 
  7558 ;; Auto vars:     Size  Location     Type
  7559 ;;  prec            1   51[BANK0 ] unsigned char 
  7560 ;; Return value:  Size  Location     Type
  7561 ;;                  3   38[BANK0 ] unsigned char 
  7562 ;; Registers used:
  7563 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7564 ;; Tracked objects:
  7565 ;;		On entry : 0/0
  7566 ;;		On exit  : 0/0
  7567 ;;		Unchanged: 0/0
  7568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7569 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7570 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7571 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7572 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7573 ;;Total ram usage:       14 bytes
  7574 ;; Hardware stack levels used:    1
  7575 ;; Hardware stack levels required when called:    6
  7576 ;; This function calls:
  7577 ;;		___awdiv
  7578 ;;		___awmod
  7579 ;;		___ftmul
  7580 ;;		___wmul
  7581 ;; This function is called by:
  7582 ;;		_printf
  7583 ;; This function uses a non-reentrant model
  7584 ;;
  7585                           
  7586                           
  7587                           ;psect for function _fround
  7588  05C6                     _fround:	
  7589                           
  7590                           ;incstack = 0
  7591                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7592                           ;fround@prec stored from wreg
  7593  05C6  0020               	movlb	0	; select bank0
  7594  05C7  00D3               	movwf	fround@prec
  7595                           
  7596                           ;doprnt.c: 413: if(prec>=110)
  7597  05C8  306E               	movlw	110
  7598  05C9  0253               	subwf	fround@prec,w
  7599  05CA  1C03               	skipc
  7600  05CB  2E87               	goto	l2412
  7601                           
  7602                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7603  05CC  300A               	movlw	10
  7604  05CD  00A7               	movwf	___awdiv@divisor
  7605  05CE  3000               	movlw	0
  7606  05CF  00A8               	movwf	___awdiv@divisor+1
  7607  05D0  0853               	movf	fround@prec,w
  7608  05D1  00C9               	movwf	??_fround
  7609  05D2  01CA               	clrf	??_fround+1
  7610  05D3  0849               	movf	??_fround,w
  7611  05D4  00A2               	movwf	___awmod@dividend
  7612  05D5  084A               	movf	??_fround+1,w
  7613  05D6  00A3               	movwf	___awmod@dividend+1
  7614  05D7  3064               	movlw	100
  7615  05D8  00A0               	movwf	___awmod@divisor
  7616  05D9  3000               	movlw	0
  7617  05DA  00A1               	movwf	___awmod@divisor+1
  7618  05DB  3195  258B  3185   	fcall	___awmod
  7619  05DE  0020               	movlb	0	; select bank0
  7620  05DF  0821               	movf	?___awmod+1,w
  7621  05E0  00AA               	movwf	___awdiv@dividend+1
  7622  05E1  0820               	movf	?___awmod,w
  7623  05E2  00A9               	movwf	___awdiv@dividend
  7624  05E3  3196  266F  3185   	fcall	___awdiv
  7625  05E6  0020               	movlb	0	; select bank0
  7626  05E7  0827               	movf	?___awdiv,w
  7627  05E8  3E09               	addlw	9
  7628  05E9  00B0               	movwf	___wmul@multiplier
  7629  05EA  3000               	movlw	0
  7630  05EB  3D28               	addwfc	?___awdiv+1,w
  7631  05EC  00B1               	movwf	___wmul@multiplier+1
  7632  05ED  3003               	movlw	3
  7633  05EE  00B2               	movwf	___wmul@multiplicand
  7634  05EF  3000               	movlw	0
  7635  05F0  00B3               	movwf	___wmul@multiplicand+1
  7636  05F1  3193  238F  3185   	fcall	___wmul
  7637  05F4  0020               	movlb	0	; select bank0
  7638  05F5  0831               	movf	?___wmul+1,w
  7639  05F6  0085               	movwf	5
  7640  05F7  0830               	movf	?___wmul,w
  7641  05F8  0084               	movwf	4
  7642  05F9  3028               	movlw	low (__npowers_| (0+32768))
  7643  05FA  0784               	addwf	4,f
  7644  05FB  3090               	movlw	high (__npowers_| (0+32768))
  7645  05FC  3D85               	addwfc	5,f
  7646  05FD  3F00               	moviw [0]fsr0
  7647  05FE  00B6               	movwf	___ftmul@f1
  7648  05FF  3F01               	moviw [1]fsr0
  7649  0600  00B7               	movwf	___ftmul@f1+1
  7650  0601  3F02               	moviw [2]fsr0
  7651  0602  00B8               	movwf	___ftmul@f1+2
  7652  0603  3064               	movlw	100
  7653  0604  00A7               	movwf	___awdiv@divisor
  7654  0605  3000               	movlw	0
  7655  0606  00A8               	movwf	___awdiv@divisor+1
  7656  0607  0853               	movf	fround@prec,w
  7657  0608  00CB               	movwf	??_fround+2
  7658  0609  01CC               	clrf	??_fround+3
  7659  060A  084B               	movf	??_fround+2,w
  7660  060B  00A9               	movwf	___awdiv@dividend
  7661  060C  084C               	movf	??_fround+3,w
  7662  060D  00AA               	movwf	___awdiv@dividend+1
  7663  060E  3196  266F  3185   	fcall	___awdiv
  7664  0611  0020               	movlb	0	; select bank0
  7665  0612  0827               	movf	?___awdiv,w
  7666  0613  3E12               	addlw	18
  7667  0614  00B0               	movwf	___wmul@multiplier
  7668  0615  3000               	movlw	0
  7669  0616  3D28               	addwfc	?___awdiv+1,w
  7670  0617  00B1               	movwf	___wmul@multiplier+1
  7671  0618  3003               	movlw	3
  7672  0619  00B2               	movwf	___wmul@multiplicand
  7673  061A  3000               	movlw	0
  7674  061B  00B3               	movwf	___wmul@multiplicand+1
  7675  061C  3193  238F  3185   	fcall	___wmul
  7676  061F  0020               	movlb	0	; select bank0
  7677  0620  0831               	movf	?___wmul+1,w
  7678  0621  0085               	movwf	5
  7679  0622  0830               	movf	?___wmul,w
  7680  0623  0084               	movwf	4
  7681  0624  3028               	movlw	low (__npowers_| (0+32768))
  7682  0625  0784               	addwf	4,f
  7683  0626  3090               	movlw	high (__npowers_| (0+32768))
  7684  0627  3D85               	addwfc	5,f
  7685  0628  3F00               	moviw [0]fsr0
  7686  0629  00B9               	movwf	___ftmul@f2
  7687  062A  3F01               	moviw [1]fsr0
  7688  062B  00BA               	movwf	___ftmul@f2+1
  7689  062C  3F02               	moviw [2]fsr0
  7690  062D  00BB               	movwf	___ftmul@f2+2
  7691  062E  3189  21F6  3185   	fcall	___ftmul
  7692  0631  0020               	movlb	0	; select bank0
  7693  0632  0836               	movf	?___ftmul,w
  7694  0633  00D0               	movwf	_fround$1274
  7695  0634  0837               	movf	?___ftmul+1,w
  7696  0635  00D1               	movwf	_fround$1274+1
  7697  0636  0838               	movf	?___ftmul+2,w
  7698  0637  00D2               	movwf	_fround$1274+2
  7699                           
  7700                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7701  0638  0853               	movf	fround@prec,w
  7702  0639  00C9               	movwf	??_fround
  7703  063A  01CA               	clrf	??_fround+1
  7704  063B  0849               	movf	??_fround,w
  7705  063C  00A2               	movwf	___awmod@dividend
  7706  063D  084A               	movf	??_fround+1,w
  7707  063E  00A3               	movwf	___awmod@dividend+1
  7708  063F  300A               	movlw	10
  7709  0640  00A0               	movwf	___awmod@divisor
  7710  0641  3000               	movlw	0
  7711  0642  00A1               	movwf	___awmod@divisor+1
  7712  0643  3195  258B  3185   	fcall	___awmod
  7713  0646  0020               	movlb	0	; select bank0
  7714  0647  0821               	movf	?___awmod+1,w
  7715  0648  00B1               	movwf	___wmul@multiplier+1
  7716  0649  0820               	movf	?___awmod,w
  7717  064A  00B0               	movwf	___wmul@multiplier
  7718  064B  3003               	movlw	3
  7719  064C  00B2               	movwf	___wmul@multiplicand
  7720  064D  3000               	movlw	0
  7721  064E  00B3               	movwf	___wmul@multiplicand+1
  7722  064F  3193  238F  3185   	fcall	___wmul
  7723  0652  0020               	movlb	0	; select bank0
  7724  0653  0831               	movf	?___wmul+1,w
  7725  0654  0085               	movwf	5
  7726  0655  0830               	movf	?___wmul,w
  7727  0656  0084               	movwf	4
  7728  0657  3028               	movlw	low (__npowers_| (0+32768))
  7729  0658  0784               	addwf	4,f
  7730  0659  3090               	movlw	high (__npowers_| (0+32768))
  7731  065A  3D85               	addwfc	5,f
  7732  065B  3F00               	moviw [0]fsr0
  7733  065C  00B6               	movwf	___ftmul@f1
  7734  065D  3F01               	moviw [1]fsr0
  7735  065E  00B7               	movwf	___ftmul@f1+1
  7736  065F  3F02               	moviw [2]fsr0
  7737  0660  00B8               	movwf	___ftmul@f1+2
  7738  0661  0850               	movf	_fround$1274,w
  7739  0662  00B9               	movwf	___ftmul@f2
  7740  0663  0851               	movf	_fround$1274+1,w
  7741  0664  00BA               	movwf	___ftmul@f2+1
  7742  0665  0852               	movf	_fround$1274+2,w
  7743  0666  00BB               	movwf	___ftmul@f2+2
  7744  0667  3189  21F6  3185   	fcall	___ftmul
  7745  066A  0020               	movlb	0	; select bank0
  7746  066B  0836               	movf	?___ftmul,w
  7747  066C  00CD               	movwf	_fround$1275
  7748  066D  0837               	movf	?___ftmul+1,w
  7749  066E  00CE               	movwf	_fround$1275+1
  7750  066F  0838               	movf	?___ftmul+2,w
  7751  0670  00CF               	movwf	_fround$1275+2
  7752                           
  7753                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7754  0671  3000               	movlw	0
  7755  0672  00B6               	movwf	___ftmul@f1
  7756  0673  3000               	movlw	0
  7757  0674  00B7               	movwf	___ftmul@f1+1
  7758  0675  303F               	movlw	63
  7759  0676  00B8               	movwf	___ftmul@f1+2
  7760  0677  084D               	movf	_fround$1275,w
  7761  0678  00B9               	movwf	___ftmul@f2
  7762  0679  084E               	movf	_fround$1275+1,w
  7763  067A  00BA               	movwf	___ftmul@f2+1
  7764  067B  084F               	movf	_fround$1275+2,w
  7765  067C  00BB               	movwf	___ftmul@f2+2
  7766  067D  3189  21F6         	fcall	___ftmul
  7767  067F  0020               	movlb	0	; select bank0
  7768  0680  0836               	movf	?___ftmul,w
  7769  0681  00C6               	movwf	?_fround
  7770  0682  0837               	movf	?___ftmul+1,w
  7771  0683  00C7               	movwf	?_fround+1
  7772  0684  0838               	movf	?___ftmul+2,w
  7773  0685  00C8               	movwf	?_fround+2
  7774  0686  0008               	return
  7775  0687                     l2412:	
  7776                           
  7777                           ;doprnt.c: 415: else if(prec > 10)
  7778  0687  300B               	movlw	11
  7779  0688  0253               	subwf	fround@prec,w
  7780  0689  1C03               	skipc
  7781  068A  2EFF               	goto	l2420
  7782                           
  7783                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7784  068B  0853               	movf	fround@prec,w
  7785  068C  00C9               	movwf	??_fround
  7786  068D  01CA               	clrf	??_fround+1
  7787  068E  0849               	movf	??_fround,w
  7788  068F  00A2               	movwf	___awmod@dividend
  7789  0690  084A               	movf	??_fround+1,w
  7790  0691  00A3               	movwf	___awmod@dividend+1
  7791  0692  300A               	movlw	10
  7792  0693  00A0               	movwf	___awmod@divisor
  7793  0694  3000               	movlw	0
  7794  0695  00A1               	movwf	___awmod@divisor+1
  7795  0696  3195  258B  3185   	fcall	___awmod
  7796  0699  0020               	movlb	0	; select bank0
  7797  069A  0821               	movf	?___awmod+1,w
  7798  069B  00B1               	movwf	___wmul@multiplier+1
  7799  069C  0820               	movf	?___awmod,w
  7800  069D  00B0               	movwf	___wmul@multiplier
  7801  069E  3003               	movlw	3
  7802  069F  00B2               	movwf	___wmul@multiplicand
  7803  06A0  3000               	movlw	0
  7804  06A1  00B3               	movwf	___wmul@multiplicand+1
  7805  06A2  3193  238F  3185   	fcall	___wmul
  7806  06A5  0020               	movlb	0	; select bank0
  7807  06A6  0831               	movf	?___wmul+1,w
  7808  06A7  0085               	movwf	5
  7809  06A8  0830               	movf	?___wmul,w
  7810  06A9  0084               	movwf	4
  7811  06AA  3028               	movlw	low (__npowers_| (0+32768))
  7812  06AB  0784               	addwf	4,f
  7813  06AC  3090               	movlw	high (__npowers_| (0+32768))
  7814  06AD  3D85               	addwfc	5,f
  7815  06AE  3F00               	moviw [0]fsr0
  7816  06AF  00B6               	movwf	___ftmul@f1
  7817  06B0  3F01               	moviw [1]fsr0
  7818  06B1  00B7               	movwf	___ftmul@f1+1
  7819  06B2  3F02               	moviw [2]fsr0
  7820  06B3  00B8               	movwf	___ftmul@f1+2
  7821  06B4  300A               	movlw	10
  7822  06B5  00A7               	movwf	___awdiv@divisor
  7823  06B6  3000               	movlw	0
  7824  06B7  00A8               	movwf	___awdiv@divisor+1
  7825  06B8  0853               	movf	fround@prec,w
  7826  06B9  00CB               	movwf	??_fround+2
  7827  06BA  01CC               	clrf	??_fround+3
  7828  06BB  084B               	movf	??_fround+2,w
  7829  06BC  00A9               	movwf	___awdiv@dividend
  7830  06BD  084C               	movf	??_fround+3,w
  7831  06BE  00AA               	movwf	___awdiv@dividend+1
  7832  06BF  3196  266F  3185   	fcall	___awdiv
  7833  06C2  0020               	movlb	0	; select bank0
  7834  06C3  0827               	movf	?___awdiv,w
  7835  06C4  3E09               	addlw	9
  7836  06C5  00B0               	movwf	___wmul@multiplier
  7837  06C6  3000               	movlw	0
  7838  06C7  3D28               	addwfc	?___awdiv+1,w
  7839  06C8  00B1               	movwf	___wmul@multiplier+1
  7840  06C9  3003               	movlw	3
  7841  06CA  00B2               	movwf	___wmul@multiplicand
  7842  06CB  3000               	movlw	0
  7843  06CC  00B3               	movwf	___wmul@multiplicand+1
  7844  06CD  3193  238F  3185   	fcall	___wmul
  7845  06D0  0020               	movlb	0	; select bank0
  7846  06D1  0831               	movf	?___wmul+1,w
  7847  06D2  0085               	movwf	5
  7848  06D3  0830               	movf	?___wmul,w
  7849  06D4  0084               	movwf	4
  7850  06D5  3028               	movlw	low (__npowers_| (0+32768))
  7851  06D6  0784               	addwf	4,f
  7852  06D7  3090               	movlw	high (__npowers_| (0+32768))
  7853  06D8  3D85               	addwfc	5,f
  7854  06D9  3F00               	moviw [0]fsr0
  7855  06DA  00B9               	movwf	___ftmul@f2
  7856  06DB  3F01               	moviw [1]fsr0
  7857  06DC  00BA               	movwf	___ftmul@f2+1
  7858  06DD  3F02               	moviw [2]fsr0
  7859  06DE  00BB               	movwf	___ftmul@f2+2
  7860  06DF  3189  21F6  3185   	fcall	___ftmul
  7861  06E2  0020               	movlb	0	; select bank0
  7862  06E3  0836               	movf	?___ftmul,w
  7863  06E4  00D0               	movwf	_fround$1274
  7864  06E5  0837               	movf	?___ftmul+1,w
  7865  06E6  00D1               	movwf	_fround$1274+1
  7866  06E7  0838               	movf	?___ftmul+2,w
  7867  06E8  00D2               	movwf	_fround$1274+2
  7868                           
  7869                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7870  06E9  3000               	movlw	0
  7871  06EA  00B6               	movwf	___ftmul@f1
  7872  06EB  3000               	movlw	0
  7873  06EC  00B7               	movwf	___ftmul@f1+1
  7874  06ED  303F               	movlw	63
  7875  06EE  00B8               	movwf	___ftmul@f1+2
  7876  06EF  0850               	movf	_fround$1274,w
  7877  06F0  00B9               	movwf	___ftmul@f2
  7878  06F1  0851               	movf	_fround$1274+1,w
  7879  06F2  00BA               	movwf	___ftmul@f2+1
  7880  06F3  0852               	movf	_fround$1274+2,w
  7881  06F4  00BB               	movwf	___ftmul@f2+2
  7882  06F5  3189  21F6         	fcall	___ftmul
  7883  06F7  0020               	movlb	0	; select bank0
  7884  06F8  0836               	movf	?___ftmul,w
  7885  06F9  00C6               	movwf	?_fround
  7886  06FA  0837               	movf	?___ftmul+1,w
  7887  06FB  00C7               	movwf	?_fround+1
  7888  06FC  0838               	movf	?___ftmul+2,w
  7889  06FD  00C8               	movwf	?_fround+2
  7890  06FE  0008               	return
  7891  06FF                     l2420:	
  7892                           
  7893                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7894  06FF  3000               	movlw	0
  7895  0700  00B6               	movwf	___ftmul@f1
  7896  0701  3000               	movlw	0
  7897  0702  00B7               	movwf	___ftmul@f1+1
  7898  0703  303F               	movlw	63
  7899  0704  00B8               	movwf	___ftmul@f1+2
  7900  0705  0853               	movf	fround@prec,w
  7901  0706  00C9               	movwf	??_fround
  7902  0707  01CA               	clrf	??_fround+1
  7903  0708  0849               	movf	??_fround,w
  7904  0709  00B0               	movwf	___wmul@multiplier
  7905  070A  084A               	movf	??_fround+1,w
  7906  070B  00B1               	movwf	___wmul@multiplier+1
  7907  070C  3003               	movlw	3
  7908  070D  00B2               	movwf	___wmul@multiplicand
  7909  070E  3000               	movlw	0
  7910  070F  00B3               	movwf	___wmul@multiplicand+1
  7911  0710  3193  238F  3185   	fcall	___wmul
  7912  0713  0020               	movlb	0	; select bank0
  7913  0714  0831               	movf	?___wmul+1,w
  7914  0715  0085               	movwf	5
  7915  0716  0830               	movf	?___wmul,w
  7916  0717  0084               	movwf	4
  7917  0718  3028               	movlw	low (__npowers_| (0+32768))
  7918  0719  0784               	addwf	4,f
  7919  071A  3090               	movlw	high (__npowers_| (0+32768))
  7920  071B  3D85               	addwfc	5,f
  7921  071C  3F00               	moviw [0]fsr0
  7922  071D  00B9               	movwf	___ftmul@f2
  7923  071E  3F01               	moviw [1]fsr0
  7924  071F  00BA               	movwf	___ftmul@f2+1
  7925  0720  3F02               	moviw [2]fsr0
  7926  0721  00BB               	movwf	___ftmul@f2+2
  7927  0722  3189  21F6         	fcall	___ftmul
  7928  0724  0020               	movlb	0	; select bank0
  7929  0725  0836               	movf	?___ftmul,w
  7930  0726  00C6               	movwf	?_fround
  7931  0727  0837               	movf	?___ftmul+1,w
  7932  0728  00C7               	movwf	?_fround+1
  7933  0729  0838               	movf	?___ftmul+2,w
  7934  072A  00C8               	movwf	?_fround+2
  7935  072B  0008               	return
  7936  072C                     __end_of_fround:	
  7937                           
  7938                           	psect	text36
  7939  138F                     __ptext36:	
  7940 ;; *************** function ___wmul *****************
  7941 ;; Defined at:
  7942 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  7943 ;; Parameters:    Size  Location     Type
  7944 ;;  multiplier      2   16[BANK0 ] unsigned int 
  7945 ;;  multiplicand    2   18[BANK0 ] unsigned int 
  7946 ;; Auto vars:     Size  Location     Type
  7947 ;;  product         2   20[BANK0 ] unsigned int 
  7948 ;; Return value:  Size  Location     Type
  7949 ;;                  2   16[BANK0 ] unsigned int 
  7950 ;; Registers used:
  7951 ;;		wreg, status,2, status,0
  7952 ;; Tracked objects:
  7953 ;;		On entry : 0/0
  7954 ;;		On exit  : 0/0
  7955 ;;		Unchanged: 0/0
  7956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7957 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7958 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7960 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7961 ;;Total ram usage:        6 bytes
  7962 ;; Hardware stack levels used:    1
  7963 ;; Hardware stack levels required when called:    4
  7964 ;; This function calls:
  7965 ;;		Nothing
  7966 ;; This function is called by:
  7967 ;;		_fround
  7968 ;;		_scale
  7969 ;;		_printf
  7970 ;; This function uses a non-reentrant model
  7971 ;;
  7972                           
  7973                           
  7974                           ;psect for function ___wmul
  7975  138F                     ___wmul:	
  7976                           
  7977                           ;incstack = 0
  7978                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7979  138F  0020               	movlb	0	; select bank0
  7980  1390  01B4               	clrf	___wmul@product
  7981  1391  01B5               	clrf	___wmul@product+1
  7982  1392                     l2186:	
  7983  1392  1C30               	btfss	___wmul@multiplier,0
  7984  1393  2B98               	goto	l508
  7985  1394  0832               	movf	___wmul@multiplicand,w
  7986  1395  07B4               	addwf	___wmul@product,f
  7987  1396  0833               	movf	___wmul@multiplicand+1,w
  7988  1397  3DB5               	addwfc	___wmul@product+1,f
  7989  1398                     l508:	
  7990  1398  3001               	movlw	1
  7991  1399                     u2385:	
  7992  1399  35B2               	lslf	___wmul@multiplicand,f
  7993  139A  0DB3               	rlf	___wmul@multiplicand+1,f
  7994  139B  0B89               	decfsz	9,f
  7995  139C  2B99               	goto	u2385
  7996  139D  3001               	movlw	1
  7997  139E                     u2395:	
  7998  139E  36B1               	lsrf	___wmul@multiplier+1,f
  7999  139F  0CB0               	rrf	___wmul@multiplier,f
  8000  13A0  0B89               	decfsz	9,f
  8001  13A1  2B9E               	goto	u2395
  8002  13A2  0830               	movf	___wmul@multiplier,w
  8003  13A3  0431               	iorwf	___wmul@multiplier+1,w
  8004  13A4  1D03               	btfss	3,2
  8005  13A5  2B92               	goto	l2186
  8006  13A6  0835               	movf	___wmul@product+1,w
  8007  13A7  00B1               	movwf	?___wmul+1
  8008  13A8  0834               	movf	___wmul@product,w
  8009  13A9  00B0               	movwf	?___wmul
  8010  13AA  0008               	return
  8011  13AB                     __end_of___wmul:	
  8012                           
  8013                           	psect	text37
  8014  09F6                     __ptext37:	
  8015 ;; *************** function ___ftmul *****************
  8016 ;; Defined at:
  8017 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
  8018 ;; Parameters:    Size  Location     Type
  8019 ;;  f1              3   22[BANK0 ] float 
  8020 ;;  f2              3   25[BANK0 ] float 
  8021 ;; Auto vars:     Size  Location     Type
  8022 ;;  f3_as_produc    3   33[BANK0 ] unsigned um
  8023 ;;  sign            1   37[BANK0 ] unsigned char 
  8024 ;;  cntr            1   36[BANK0 ] unsigned char 
  8025 ;;  exp             1   32[BANK0 ] unsigned char 
  8026 ;; Return value:  Size  Location     Type
  8027 ;;                  3   22[BANK0 ] float 
  8028 ;; Registers used:
  8029 ;;		wreg, status,2, status,0, pclath, cstack
  8030 ;; Tracked objects:
  8031 ;;		On entry : 0/0
  8032 ;;		On exit  : 0/0
  8033 ;;		Unchanged: 0/0
  8034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8035 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8036 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8037 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8038 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8039 ;;Total ram usage:       16 bytes
  8040 ;; Hardware stack levels used:    1
  8041 ;; Hardware stack levels required when called:    5
  8042 ;; This function calls:
  8043 ;;		___ftpack
  8044 ;; This function is called by:
  8045 ;;		_RadioOperation
  8046 ;;		_fround
  8047 ;;		_scale
  8048 ;;		_printf
  8049 ;; This function uses a non-reentrant model
  8050 ;;
  8051                           
  8052                           
  8053                           ;psect for function ___ftmul
  8054  09F6                     ___ftmul:	
  8055                           
  8056                           ;incstack = 0
  8057                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8058  09F6  0020               	movlb	0	; select bank0
  8059  09F7  0836               	movf	___ftmul@f1,w
  8060  09F8  00BC               	movwf	??___ftmul
  8061  09F9  0837               	movf	___ftmul@f1+1,w
  8062  09FA  00BD               	movwf	??___ftmul+1
  8063  09FB  0838               	movf	___ftmul@f1+2,w
  8064  09FC  00BE               	movwf	??___ftmul+2
  8065  09FD  1003               	clrc
  8066  09FE  0D3D               	rlf	??___ftmul+1,w
  8067  09FF  0D3E               	rlf	??___ftmul+2,w
  8068  0A00  00BF               	movwf	??___ftmul+3
  8069  0A01  083F               	movf	??___ftmul+3,w
  8070  0A02  00C0               	movwf	___ftmul@exp
  8071  0A03  0840               	movf	___ftmul@exp,w
  8072  0A04  1D03               	btfss	3,2
  8073  0A05  2A0D               	goto	l2356
  8074  0A06  3000               	movlw	0
  8075  0A07  00B6               	movwf	?___ftmul
  8076  0A08  3000               	movlw	0
  8077  0A09  00B7               	movwf	?___ftmul+1
  8078  0A0A  3000               	movlw	0
  8079  0A0B  00B8               	movwf	?___ftmul+2
  8080  0A0C  0008               	return
  8081  0A0D                     l2356:	
  8082  0A0D  0839               	movf	___ftmul@f2,w
  8083  0A0E  00BC               	movwf	??___ftmul
  8084  0A0F  083A               	movf	___ftmul@f2+1,w
  8085  0A10  00BD               	movwf	??___ftmul+1
  8086  0A11  083B               	movf	___ftmul@f2+2,w
  8087  0A12  00BE               	movwf	??___ftmul+2
  8088  0A13  1003               	clrc
  8089  0A14  0D3D               	rlf	??___ftmul+1,w
  8090  0A15  0D3E               	rlf	??___ftmul+2,w
  8091  0A16  00BF               	movwf	??___ftmul+3
  8092  0A17  083F               	movf	??___ftmul+3,w
  8093  0A18  00C5               	movwf	___ftmul@sign
  8094  0A19  0845               	movf	___ftmul@sign,w
  8095  0A1A  1D03               	btfss	3,2
  8096  0A1B  2A23               	goto	l2362
  8097  0A1C  3000               	movlw	0
  8098  0A1D  00B6               	movwf	?___ftmul
  8099  0A1E  3000               	movlw	0
  8100  0A1F  00B7               	movwf	?___ftmul+1
  8101  0A20  3000               	movlw	0
  8102  0A21  00B8               	movwf	?___ftmul+2
  8103  0A22  0008               	return
  8104  0A23                     l2362:	
  8105  0A23  0845               	movf	___ftmul@sign,w
  8106  0A24  3E7B               	addlw	123
  8107  0A25  00BC               	movwf	??___ftmul
  8108  0A26  083C               	movf	??___ftmul,w
  8109  0A27  07C0               	addwf	___ftmul@exp,f
  8110  0A28  0836               	movf	___ftmul@f1,w
  8111  0A29  00BC               	movwf	??___ftmul
  8112  0A2A  0837               	movf	___ftmul@f1+1,w
  8113  0A2B  00BD               	movwf	??___ftmul+1
  8114  0A2C  0838               	movf	___ftmul@f1+2,w
  8115  0A2D  00BE               	movwf	??___ftmul+2
  8116  0A2E  3010               	movlw	16
  8117  0A2F                     u2855:	
  8118  0A2F  36BE               	lsrf	??___ftmul+2,f
  8119  0A30  0CBD               	rrf	??___ftmul+1,f
  8120  0A31  0CBC               	rrf	??___ftmul,f
  8121  0A32  0B89               	decfsz	9,f
  8122  0A33  2A2F               	goto	u2855
  8123  0A34  083C               	movf	??___ftmul,w
  8124  0A35  00BF               	movwf	??___ftmul+3
  8125  0A36  083F               	movf	??___ftmul+3,w
  8126  0A37  00C5               	movwf	___ftmul@sign
  8127  0A38  0839               	movf	___ftmul@f2,w
  8128  0A39  00BC               	movwf	??___ftmul
  8129  0A3A  083A               	movf	___ftmul@f2+1,w
  8130  0A3B  00BD               	movwf	??___ftmul+1
  8131  0A3C  083B               	movf	___ftmul@f2+2,w
  8132  0A3D  00BE               	movwf	??___ftmul+2
  8133  0A3E  3010               	movlw	16
  8134  0A3F                     u2865:	
  8135  0A3F  36BE               	lsrf	??___ftmul+2,f
  8136  0A40  0CBD               	rrf	??___ftmul+1,f
  8137  0A41  0CBC               	rrf	??___ftmul,f
  8138  0A42  0B89               	decfsz	9,f
  8139  0A43  2A3F               	goto	u2865
  8140  0A44  083C               	movf	??___ftmul,w
  8141  0A45  00BF               	movwf	??___ftmul+3
  8142  0A46  083F               	movf	??___ftmul+3,w
  8143  0A47  06C5               	xorwf	___ftmul@sign,f
  8144  0A48  3080               	movlw	128
  8145  0A49  00BC               	movwf	??___ftmul
  8146  0A4A  083C               	movf	??___ftmul,w
  8147  0A4B  05C5               	andwf	___ftmul@sign,f
  8148  0A4C  17B7               	bsf	___ftmul@f1+1,7
  8149  0A4D  17BA               	bsf	___ftmul@f2+1,7
  8150  0A4E  30FF               	movlw	255
  8151  0A4F  05B9               	andwf	___ftmul@f2,f
  8152  0A50  30FF               	movlw	255
  8153  0A51  05BA               	andwf	___ftmul@f2+1,f
  8154  0A52  3000               	movlw	0
  8155  0A53  05BB               	andwf	___ftmul@f2+2,f
  8156  0A54  3000               	movlw	0
  8157  0A55  00C1               	movwf	___ftmul@f3_as_product
  8158  0A56  3000               	movlw	0
  8159  0A57  00C2               	movwf	___ftmul@f3_as_product+1
  8160  0A58  3000               	movlw	0
  8161  0A59  00C3               	movwf	___ftmul@f3_as_product+2
  8162  0A5A  3007               	movlw	7
  8163  0A5B  00BC               	movwf	??___ftmul
  8164  0A5C  083C               	movf	??___ftmul,w
  8165  0A5D  00C4               	movwf	___ftmul@cntr
  8166  0A5E                     l2374:	
  8167  0A5E  1C36               	btfss	___ftmul@f1,0
  8168  0A5F  2A66               	goto	l2378
  8169  0A60  0839               	movf	___ftmul@f2,w
  8170  0A61  07C1               	addwf	___ftmul@f3_as_product,f
  8171  0A62  083A               	movf	___ftmul@f2+1,w
  8172  0A63  3DC2               	addwfc	___ftmul@f3_as_product+1,f
  8173  0A64  083B               	movf	___ftmul@f2+2,w
  8174  0A65  3DC3               	addwfc	___ftmul@f3_as_product+2,f
  8175  0A66                     l2378:	
  8176  0A66  3001               	movlw	1
  8177  0A67                     u2885:	
  8178  0A67  36B8               	lsrf	___ftmul@f1+2,f
  8179  0A68  0CB7               	rrf	___ftmul@f1+1,f
  8180  0A69  0CB6               	rrf	___ftmul@f1,f
  8181  0A6A  0B89               	decfsz	9,f
  8182  0A6B  2A67               	goto	u2885
  8183  0A6C  3001               	movlw	1
  8184  0A6D                     u2895:	
  8185  0A6D  35B9               	lslf	___ftmul@f2,f
  8186  0A6E  0DBA               	rlf	___ftmul@f2+1,f
  8187  0A6F  0DBB               	rlf	___ftmul@f2+2,f
  8188  0A70  0B89               	decfsz	9,f
  8189  0A71  2A6D               	goto	u2895
  8190  0A72  3001               	movlw	1
  8191  0A73  02C4               	subwf	___ftmul@cntr,f
  8192  0A74  1D03               	btfss	3,2
  8193  0A75  2A5E               	goto	l2374
  8194  0A76  3009               	movlw	9
  8195  0A77  00BC               	movwf	??___ftmul
  8196  0A78  083C               	movf	??___ftmul,w
  8197  0A79  00C4               	movwf	___ftmul@cntr
  8198  0A7A                     l2386:	
  8199  0A7A  1C36               	btfss	___ftmul@f1,0
  8200  0A7B  2A82               	goto	l2390
  8201  0A7C  0839               	movf	___ftmul@f2,w
  8202  0A7D  07C1               	addwf	___ftmul@f3_as_product,f
  8203  0A7E  083A               	movf	___ftmul@f2+1,w
  8204  0A7F  3DC2               	addwfc	___ftmul@f3_as_product+1,f
  8205  0A80  083B               	movf	___ftmul@f2+2,w
  8206  0A81  3DC3               	addwfc	___ftmul@f3_as_product+2,f
  8207  0A82                     l2390:	
  8208  0A82  3001               	movlw	1
  8209  0A83                     u2925:	
  8210  0A83  36B8               	lsrf	___ftmul@f1+2,f
  8211  0A84  0CB7               	rrf	___ftmul@f1+1,f
  8212  0A85  0CB6               	rrf	___ftmul@f1,f
  8213  0A86  0B89               	decfsz	9,f
  8214  0A87  2A83               	goto	u2925
  8215  0A88  3001               	movlw	1
  8216  0A89                     u2935:	
  8217  0A89  36C3               	lsrf	___ftmul@f3_as_product+2,f
  8218  0A8A  0CC2               	rrf	___ftmul@f3_as_product+1,f
  8219  0A8B  0CC1               	rrf	___ftmul@f3_as_product,f
  8220  0A8C  0B89               	decfsz	9,f
  8221  0A8D  2A89               	goto	u2935
  8222  0A8E  3001               	movlw	1
  8223  0A8F  02C4               	subwf	___ftmul@cntr,f
  8224  0A90  1D03               	btfss	3,2
  8225  0A91  2A7A               	goto	l2386
  8226  0A92  0841               	movf	___ftmul@f3_as_product,w
  8227  0A93  00A0               	movwf	___ftpack@arg
  8228  0A94  0842               	movf	___ftmul@f3_as_product+1,w
  8229  0A95  00A1               	movwf	___ftpack@arg+1
  8230  0A96  0843               	movf	___ftmul@f3_as_product+2,w
  8231  0A97  00A2               	movwf	___ftpack@arg+2
  8232  0A98  0840               	movf	___ftmul@exp,w
  8233  0A99  00BC               	movwf	??___ftmul
  8234  0A9A  083C               	movf	??___ftmul,w
  8235  0A9B  00A3               	movwf	___ftpack@exp
  8236  0A9C  0845               	movf	___ftmul@sign,w
  8237  0A9D  00BD               	movwf	??___ftmul+1
  8238  0A9E  083D               	movf	??___ftmul+1,w
  8239  0A9F  00A4               	movwf	___ftpack@sign
  8240  0AA0  3197  2714         	fcall	___ftpack
  8241  0AA2  0020               	movlb	0	; select bank0
  8242  0AA3  0820               	movf	?___ftpack,w
  8243  0AA4  00B6               	movwf	?___ftmul
  8244  0AA5  0821               	movf	?___ftpack+1,w
  8245  0AA6  00B7               	movwf	?___ftmul+1
  8246  0AA7  0822               	movf	?___ftpack+2,w
  8247  0AA8  00B8               	movwf	?___ftmul+2
  8248  0AA9  0008               	return
  8249  0AAA                     __end_of___ftmul:	
  8250                           
  8251                           	psect	text38
  8252  158B                     __ptext38:	
  8253 ;; *************** function ___awmod *****************
  8254 ;; Defined at:
  8255 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  8256 ;; Parameters:    Size  Location     Type
  8257 ;;  divisor         2    0[BANK0 ] int 
  8258 ;;  dividend        2    2[BANK0 ] int 
  8259 ;; Auto vars:     Size  Location     Type
  8260 ;;  sign            1    6[BANK0 ] unsigned char 
  8261 ;;  counter         1    5[BANK0 ] unsigned char 
  8262 ;; Return value:  Size  Location     Type
  8263 ;;                  2    0[BANK0 ] int 
  8264 ;; Registers used:
  8265 ;;		wreg, status,2, status,0
  8266 ;; Tracked objects:
  8267 ;;		On entry : 0/0
  8268 ;;		On exit  : 0/0
  8269 ;;		Unchanged: 0/0
  8270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8271 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8272 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8273 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8274 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8275 ;;Total ram usage:        7 bytes
  8276 ;; Hardware stack levels used:    1
  8277 ;; Hardware stack levels required when called:    4
  8278 ;; This function calls:
  8279 ;;		Nothing
  8280 ;; This function is called by:
  8281 ;;		_fround
  8282 ;;		_scale
  8283 ;; This function uses a non-reentrant model
  8284 ;;
  8285                           
  8286                           
  8287                           ;psect for function ___awmod
  8288  158B                     ___awmod:	
  8289                           
  8290                           ;incstack = 0
  8291                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  8292  158B  0020               	movlb	0	; select bank0
  8293  158C  01A6               	clrf	___awmod@sign
  8294  158D  1FA3               	btfss	___awmod@dividend+1,7
  8295  158E  2D96               	goto	l2250
  8296  158F  09A2               	comf	___awmod@dividend,f
  8297  1590  09A3               	comf	___awmod@dividend+1,f
  8298  1591  0AA2               	incf	___awmod@dividend,f
  8299  1592  1903               	skipnz
  8300  1593  0AA3               	incf	___awmod@dividend+1,f
  8301  1594  01A6               	clrf	___awmod@sign
  8302  1595  0AA6               	incf	___awmod@sign,f
  8303  1596                     l2250:	
  8304  1596  1FA1               	btfss	___awmod@divisor+1,7
  8305  1597  2D9D               	goto	l2254
  8306  1598  09A0               	comf	___awmod@divisor,f
  8307  1599  09A1               	comf	___awmod@divisor+1,f
  8308  159A  0AA0               	incf	___awmod@divisor,f
  8309  159B  1903               	skipnz
  8310  159C  0AA1               	incf	___awmod@divisor+1,f
  8311  159D                     l2254:	
  8312  159D  0820               	movf	___awmod@divisor,w
  8313  159E  0421               	iorwf	___awmod@divisor+1,w
  8314  159F  1903               	btfsc	3,2
  8315  15A0  2DC4               	goto	l2272
  8316  15A1  01A5               	clrf	___awmod@counter
  8317  15A2  0AA5               	incf	___awmod@counter,f
  8318  15A3                     l2262:	
  8319  15A3  1BA1               	btfsc	___awmod@divisor+1,7
  8320  15A4  2DAF               	goto	l2264
  8321  15A5  3001               	movlw	1
  8322  15A6                     u2545:	
  8323  15A6  35A0               	lslf	___awmod@divisor,f
  8324  15A7  0DA1               	rlf	___awmod@divisor+1,f
  8325  15A8  0B89               	decfsz	9,f
  8326  15A9  2DA6               	goto	u2545
  8327  15AA  3001               	movlw	1
  8328  15AB  00A4               	movwf	??___awmod
  8329  15AC  0824               	movf	??___awmod,w
  8330  15AD  07A5               	addwf	___awmod@counter,f
  8331  15AE  2DA3               	goto	l2262
  8332  15AF                     l2264:	
  8333  15AF  0821               	movf	___awmod@divisor+1,w
  8334  15B0  0223               	subwf	___awmod@dividend+1,w
  8335  15B1  1D03               	skipz
  8336  15B2  2DB5               	goto	u2565
  8337  15B3  0820               	movf	___awmod@divisor,w
  8338  15B4  0222               	subwf	___awmod@dividend,w
  8339  15B5                     u2565:	
  8340  15B5  1C03               	skipc
  8341  15B6  2DBB               	goto	l2268
  8342  15B7  0820               	movf	___awmod@divisor,w
  8343  15B8  02A2               	subwf	___awmod@dividend,f
  8344  15B9  0821               	movf	___awmod@divisor+1,w
  8345  15BA  3BA3               	subwfb	___awmod@dividend+1,f
  8346  15BB                     l2268:	
  8347  15BB  3001               	movlw	1
  8348  15BC                     u2575:	
  8349  15BC  36A1               	lsrf	___awmod@divisor+1,f
  8350  15BD  0CA0               	rrf	___awmod@divisor,f
  8351  15BE  0B89               	decfsz	9,f
  8352  15BF  2DBC               	goto	u2575
  8353  15C0  3001               	movlw	1
  8354  15C1  02A5               	subwf	___awmod@counter,f
  8355  15C2  1D03               	btfss	3,2
  8356  15C3  2DAF               	goto	l2264
  8357  15C4                     l2272:	
  8358  15C4  0826               	movf	___awmod@sign,w
  8359  15C5  1903               	btfsc	3,2
  8360  15C6  2DCC               	goto	l2276
  8361  15C7  09A2               	comf	___awmod@dividend,f
  8362  15C8  09A3               	comf	___awmod@dividend+1,f
  8363  15C9  0AA2               	incf	___awmod@dividend,f
  8364  15CA  1903               	skipnz
  8365  15CB  0AA3               	incf	___awmod@dividend+1,f
  8366  15CC                     l2276:	
  8367  15CC  0823               	movf	___awmod@dividend+1,w
  8368  15CD  00A1               	movwf	?___awmod+1
  8369  15CE  0822               	movf	___awmod@dividend,w
  8370  15CF  00A0               	movwf	?___awmod
  8371  15D0  0008               	return
  8372  15D1                     __end_of___awmod:	
  8373                           
  8374                           	psect	text39
  8375  166F                     __ptext39:	
  8376 ;; *************** function ___awdiv *****************
  8377 ;; Defined at:
  8378 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  8379 ;; Parameters:    Size  Location     Type
  8380 ;;  divisor         2    7[BANK0 ] int 
  8381 ;;  dividend        2    9[BANK0 ] int 
  8382 ;; Auto vars:     Size  Location     Type
  8383 ;;  quotient        2   14[BANK0 ] int 
  8384 ;;  sign            1   13[BANK0 ] unsigned char 
  8385 ;;  counter         1   12[BANK0 ] unsigned char 
  8386 ;; Return value:  Size  Location     Type
  8387 ;;                  2    7[BANK0 ] int 
  8388 ;; Registers used:
  8389 ;;		wreg, status,2, status,0
  8390 ;; Tracked objects:
  8391 ;;		On entry : 0/0
  8392 ;;		On exit  : 0/0
  8393 ;;		Unchanged: 0/0
  8394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8395 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8396 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8397 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8398 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8399 ;;Total ram usage:        9 bytes
  8400 ;; Hardware stack levels used:    1
  8401 ;; Hardware stack levels required when called:    4
  8402 ;; This function calls:
  8403 ;;		Nothing
  8404 ;; This function is called by:
  8405 ;;		_fround
  8406 ;;		_scale
  8407 ;;		_printf
  8408 ;; This function uses a non-reentrant model
  8409 ;;
  8410                           
  8411                           
  8412                           ;psect for function ___awdiv
  8413  166F                     ___awdiv:	
  8414                           
  8415                           ;incstack = 0
  8416                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  8417  166F  0020               	movlb	0	; select bank0
  8418  1670  01AD               	clrf	___awdiv@sign
  8419  1671  1FA8               	btfss	___awdiv@divisor+1,7
  8420  1672  2E7A               	goto	l2206
  8421  1673  09A7               	comf	___awdiv@divisor,f
  8422  1674  09A8               	comf	___awdiv@divisor+1,f
  8423  1675  0AA7               	incf	___awdiv@divisor,f
  8424  1676  1903               	skipnz
  8425  1677  0AA8               	incf	___awdiv@divisor+1,f
  8426  1678  01AD               	clrf	___awdiv@sign
  8427  1679  0AAD               	incf	___awdiv@sign,f
  8428  167A                     l2206:	
  8429  167A  1FAA               	btfss	___awdiv@dividend+1,7
  8430  167B  2E85               	goto	l2212
  8431  167C  09A9               	comf	___awdiv@dividend,f
  8432  167D  09AA               	comf	___awdiv@dividend+1,f
  8433  167E  0AA9               	incf	___awdiv@dividend,f
  8434  167F  1903               	skipnz
  8435  1680  0AAA               	incf	___awdiv@dividend+1,f
  8436  1681  3001               	movlw	1
  8437  1682  00AB               	movwf	??___awdiv
  8438  1683  082B               	movf	??___awdiv,w
  8439  1684  06AD               	xorwf	___awdiv@sign,f
  8440  1685                     l2212:	
  8441  1685  01AE               	clrf	___awdiv@quotient
  8442  1686  01AF               	clrf	___awdiv@quotient+1
  8443  1687  0827               	movf	___awdiv@divisor,w
  8444  1688  0428               	iorwf	___awdiv@divisor+1,w
  8445  1689  1903               	btfsc	3,2
  8446  168A  2EB4               	goto	l2234
  8447  168B  01AC               	clrf	___awdiv@counter
  8448  168C  0AAC               	incf	___awdiv@counter,f
  8449  168D                     l2222:	
  8450  168D  1BA8               	btfsc	___awdiv@divisor+1,7
  8451  168E  2E99               	goto	l2224
  8452  168F  3001               	movlw	1
  8453  1690                     u2445:	
  8454  1690  35A7               	lslf	___awdiv@divisor,f
  8455  1691  0DA8               	rlf	___awdiv@divisor+1,f
  8456  1692  0B89               	decfsz	9,f
  8457  1693  2E90               	goto	u2445
  8458  1694  3001               	movlw	1
  8459  1695  00AB               	movwf	??___awdiv
  8460  1696  082B               	movf	??___awdiv,w
  8461  1697  07AC               	addwf	___awdiv@counter,f
  8462  1698  2E8D               	goto	l2222
  8463  1699                     l2224:	
  8464  1699  3001               	movlw	1
  8465  169A                     u2465:	
  8466  169A  35AE               	lslf	___awdiv@quotient,f
  8467  169B  0DAF               	rlf	___awdiv@quotient+1,f
  8468  169C  0B89               	decfsz	9,f
  8469  169D  2E9A               	goto	u2465
  8470  169E  0828               	movf	___awdiv@divisor+1,w
  8471  169F  022A               	subwf	___awdiv@dividend+1,w
  8472  16A0  1D03               	skipz
  8473  16A1  2EA4               	goto	u2475
  8474  16A2  0827               	movf	___awdiv@divisor,w
  8475  16A3  0229               	subwf	___awdiv@dividend,w
  8476  16A4                     u2475:	
  8477  16A4  1C03               	skipc
  8478  16A5  2EAB               	goto	l2230
  8479  16A6  0827               	movf	___awdiv@divisor,w
  8480  16A7  02A9               	subwf	___awdiv@dividend,f
  8481  16A8  0828               	movf	___awdiv@divisor+1,w
  8482  16A9  3BAA               	subwfb	___awdiv@dividend+1,f
  8483  16AA  142E               	bsf	___awdiv@quotient,0
  8484  16AB                     l2230:	
  8485  16AB  3001               	movlw	1
  8486  16AC                     u2485:	
  8487  16AC  36A8               	lsrf	___awdiv@divisor+1,f
  8488  16AD  0CA7               	rrf	___awdiv@divisor,f
  8489  16AE  0B89               	decfsz	9,f
  8490  16AF  2EAC               	goto	u2485
  8491  16B0  3001               	movlw	1
  8492  16B1  02AC               	subwf	___awdiv@counter,f
  8493  16B2  1D03               	btfss	3,2
  8494  16B3  2E99               	goto	l2224
  8495  16B4                     l2234:	
  8496  16B4  082D               	movf	___awdiv@sign,w
  8497  16B5  1903               	btfsc	3,2
  8498  16B6  2EBC               	goto	l2238
  8499  16B7  09AE               	comf	___awdiv@quotient,f
  8500  16B8  09AF               	comf	___awdiv@quotient+1,f
  8501  16B9  0AAE               	incf	___awdiv@quotient,f
  8502  16BA  1903               	skipnz
  8503  16BB  0AAF               	incf	___awdiv@quotient+1,f
  8504  16BC                     l2238:	
  8505  16BC  082F               	movf	___awdiv@quotient+1,w
  8506  16BD  00A8               	movwf	?___awdiv+1
  8507  16BE  082E               	movf	___awdiv@quotient,w
  8508  16BF  00A7               	movwf	?___awdiv
  8509  16C0  0008               	return
  8510  16C1                     __end_of___awdiv:	
  8511                           
  8512                           	psect	text40
  8513  072C                     __ptext40:	
  8514 ;; *************** function __tdiv_to_l_ *****************
  8515 ;; Defined at:
  8516 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdivl.c"
  8517 ;; Parameters:    Size  Location     Type
  8518 ;;  f1              3    0[BANK0 ] float 
  8519 ;;  f2              3    3[BANK0 ] float 
  8520 ;; Auto vars:     Size  Location     Type
  8521 ;;  quot            4   10[BANK0 ] unsigned long 
  8522 ;;  exp1            1   15[BANK0 ] unsigned char 
  8523 ;;  cntr            1   14[BANK0 ] unsigned char 
  8524 ;; Return value:  Size  Location     Type
  8525 ;;                  4    0[BANK0 ] unsigned long 
  8526 ;; Registers used:
  8527 ;;		wreg, status,2, status,0
  8528 ;; Tracked objects:
  8529 ;;		On entry : 0/0
  8530 ;;		On exit  : 0/0
  8531 ;;		Unchanged: 0/0
  8532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8533 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8534 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8535 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8536 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8537 ;;Total ram usage:       16 bytes
  8538 ;; Hardware stack levels used:    1
  8539 ;; Hardware stack levels required when called:    4
  8540 ;; This function calls:
  8541 ;;		Nothing
  8542 ;; This function is called by:
  8543 ;;		_printf
  8544 ;; This function uses a non-reentrant model
  8545 ;;
  8546                           
  8547                           
  8548                           ;psect for function __tdiv_to_l_
  8549  072C                     __tdiv_to_l_:	
  8550                           
  8551                           ;incstack = 0
  8552                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  8553  072C  0020               	movlb	0	; select bank0
  8554  072D  0820               	movf	__tdiv_to_l_@f1,w
  8555  072E  00A6               	movwf	??__tdiv_to_l_
  8556  072F  0821               	movf	__tdiv_to_l_@f1+1,w
  8557  0730  00A7               	movwf	??__tdiv_to_l_+1
  8558  0731  0822               	movf	__tdiv_to_l_@f1+2,w
  8559  0732  00A8               	movwf	??__tdiv_to_l_+2
  8560  0733  1003               	clrc
  8561  0734  0D27               	rlf	??__tdiv_to_l_+1,w
  8562  0735  0D28               	rlf	??__tdiv_to_l_+2,w
  8563  0736  00A9               	movwf	??__tdiv_to_l_+3
  8564  0737  0829               	movf	??__tdiv_to_l_+3,w
  8565  0738  00AF               	movwf	__tdiv_to_l_@exp1
  8566  0739  082F               	movf	__tdiv_to_l_@exp1,w
  8567  073A  1D03               	btfss	3,2
  8568  073B  2F45               	goto	l2470
  8569  073C  3000               	movlw	0
  8570  073D  00A3               	movwf	?__tdiv_to_l_+3
  8571  073E  3000               	movlw	0
  8572  073F  00A2               	movwf	?__tdiv_to_l_+2
  8573  0740  3000               	movlw	0
  8574  0741  00A1               	movwf	?__tdiv_to_l_+1
  8575  0742  3000               	movlw	0
  8576  0743  00A0               	movwf	?__tdiv_to_l_
  8577  0744  0008               	return
  8578  0745                     l2470:	
  8579  0745  0823               	movf	__tdiv_to_l_@f2,w
  8580  0746  00A6               	movwf	??__tdiv_to_l_
  8581  0747  0824               	movf	__tdiv_to_l_@f2+1,w
  8582  0748  00A7               	movwf	??__tdiv_to_l_+1
  8583  0749  0825               	movf	__tdiv_to_l_@f2+2,w
  8584  074A  00A8               	movwf	??__tdiv_to_l_+2
  8585  074B  1003               	clrc
  8586  074C  0D27               	rlf	??__tdiv_to_l_+1,w
  8587  074D  0D28               	rlf	??__tdiv_to_l_+2,w
  8588  074E  00A9               	movwf	??__tdiv_to_l_+3
  8589  074F  0829               	movf	??__tdiv_to_l_+3,w
  8590  0750  00AE               	movwf	__tdiv_to_l_@cntr
  8591  0751  082E               	movf	__tdiv_to_l_@cntr,w
  8592  0752  1D03               	btfss	3,2
  8593  0753  2F5D               	goto	l743
  8594  0754  3000               	movlw	0
  8595  0755  00A3               	movwf	?__tdiv_to_l_+3
  8596  0756  3000               	movlw	0
  8597  0757  00A2               	movwf	?__tdiv_to_l_+2
  8598  0758  3000               	movlw	0
  8599  0759  00A1               	movwf	?__tdiv_to_l_+1
  8600  075A  3000               	movlw	0
  8601  075B  00A0               	movwf	?__tdiv_to_l_
  8602  075C  0008               	return
  8603  075D                     l743:	
  8604  075D  17A1               	bsf	__tdiv_to_l_@f1+1,7
  8605  075E  30FF               	movlw	255
  8606  075F  05A0               	andwf	__tdiv_to_l_@f1,f
  8607  0760  30FF               	movlw	255
  8608  0761  05A1               	andwf	__tdiv_to_l_@f1+1,f
  8609  0762  3000               	movlw	0
  8610  0763  05A2               	andwf	__tdiv_to_l_@f1+2,f
  8611  0764  17A4               	bsf	__tdiv_to_l_@f2+1,7
  8612  0765  30FF               	movlw	255
  8613  0766  05A3               	andwf	__tdiv_to_l_@f2,f
  8614  0767  30FF               	movlw	255
  8615  0768  05A4               	andwf	__tdiv_to_l_@f2+1,f
  8616  0769  3000               	movlw	0
  8617  076A  05A5               	andwf	__tdiv_to_l_@f2+2,f
  8618  076B  3000               	movlw	0
  8619  076C  00AD               	movwf	__tdiv_to_l_@quot+3
  8620  076D  3000               	movlw	0
  8621  076E  00AC               	movwf	__tdiv_to_l_@quot+2
  8622  076F  3000               	movlw	0
  8623  0770  00AB               	movwf	__tdiv_to_l_@quot+1
  8624  0771  3000               	movlw	0
  8625  0772  00AA               	movwf	__tdiv_to_l_@quot
  8626  0773  307F               	movlw	127
  8627  0774  02AF               	subwf	__tdiv_to_l_@exp1,f
  8628  0775  3098               	movlw	152
  8629  0776  072E               	addwf	__tdiv_to_l_@cntr,w
  8630  0777  00A6               	movwf	??__tdiv_to_l_
  8631  0778  0826               	movf	??__tdiv_to_l_,w
  8632  0779  02AF               	subwf	__tdiv_to_l_@exp1,f
  8633  077A  3018               	movlw	24
  8634  077B  00A6               	movwf	??__tdiv_to_l_
  8635  077C  0826               	movf	??__tdiv_to_l_,w
  8636  077D  00AE               	movwf	__tdiv_to_l_@cntr
  8637  077E                     l2484:	
  8638  077E  3001               	movlw	1
  8639  077F                     u3045:	
  8640  077F  35AA               	lslf	__tdiv_to_l_@quot,f
  8641  0780  0DAB               	rlf	__tdiv_to_l_@quot+1,f
  8642  0781  0DAC               	rlf	__tdiv_to_l_@quot+2,f
  8643  0782  0DAD               	rlf	__tdiv_to_l_@quot+3,f
  8644  0783  0B89               	decfsz	9,f
  8645  0784  2F7F               	goto	u3045
  8646  0785  0825               	movf	__tdiv_to_l_@f2+2,w
  8647  0786  0222               	subwf	__tdiv_to_l_@f1+2,w
  8648  0787  1D03               	skipz
  8649  0788  2F8F               	goto	u3055
  8650  0789  0824               	movf	__tdiv_to_l_@f2+1,w
  8651  078A  0221               	subwf	__tdiv_to_l_@f1+1,w
  8652  078B  1D03               	skipz
  8653  078C  2F8F               	goto	u3055
  8654  078D  0823               	movf	__tdiv_to_l_@f2,w
  8655  078E  0220               	subwf	__tdiv_to_l_@f1,w
  8656  078F                     u3055:	
  8657  078F  1C03               	skipc
  8658  0790  2F98               	goto	l2492
  8659  0791  0823               	movf	__tdiv_to_l_@f2,w
  8660  0792  02A0               	subwf	__tdiv_to_l_@f1,f
  8661  0793  0824               	movf	__tdiv_to_l_@f2+1,w
  8662  0794  3BA1               	subwfb	__tdiv_to_l_@f1+1,f
  8663  0795  0825               	movf	__tdiv_to_l_@f2+2,w
  8664  0796  3BA2               	subwfb	__tdiv_to_l_@f1+2,f
  8665  0797  142A               	bsf	__tdiv_to_l_@quot,0
  8666  0798                     l2492:	
  8667  0798  3001               	movlw	1
  8668  0799                     u3065:	
  8669  0799  35A0               	lslf	__tdiv_to_l_@f1,f
  8670  079A  0DA1               	rlf	__tdiv_to_l_@f1+1,f
  8671  079B  0DA2               	rlf	__tdiv_to_l_@f1+2,f
  8672  079C  0B89               	decfsz	9,f
  8673  079D  2F99               	goto	u3065
  8674  079E  3001               	movlw	1
  8675  079F  02AE               	subwf	__tdiv_to_l_@cntr,f
  8676  07A0  1D03               	btfss	3,2
  8677  07A1  2F7E               	goto	l2484
  8678  07A2  1FAF               	btfss	__tdiv_to_l_@exp1,7
  8679  07A3  2FC0               	goto	l2504
  8680  07A4  082F               	movf	__tdiv_to_l_@exp1,w
  8681  07A5  3A80               	xorlw	128
  8682  07A6  3E97               	addlw	151
  8683  07A7  1803               	skipnc
  8684  07A8  2FB2               	goto	l2502
  8685  07A9  3000               	movlw	0
  8686  07AA  00A3               	movwf	?__tdiv_to_l_+3
  8687  07AB  3000               	movlw	0
  8688  07AC  00A2               	movwf	?__tdiv_to_l_+2
  8689  07AD  3000               	movlw	0
  8690  07AE  00A1               	movwf	?__tdiv_to_l_+1
  8691  07AF  3000               	movlw	0
  8692  07B0  00A0               	movwf	?__tdiv_to_l_
  8693  07B1  0008               	return
  8694  07B2                     l2502:	
  8695  07B2  3001               	movlw	1
  8696  07B3                     u3105:	
  8697  07B3  36AD               	lsrf	__tdiv_to_l_@quot+3,f
  8698  07B4  0CAC               	rrf	__tdiv_to_l_@quot+2,f
  8699  07B5  0CAB               	rrf	__tdiv_to_l_@quot+1,f
  8700  07B6  0CAA               	rrf	__tdiv_to_l_@quot,f
  8701  07B7  0B89               	decfsz	9,f
  8702  07B8  2FB3               	goto	u3105
  8703  07B9  3001               	movlw	1
  8704  07BA  00A6               	movwf	??__tdiv_to_l_
  8705  07BB  0826               	movf	??__tdiv_to_l_,w
  8706  07BC  07AF               	addwf	__tdiv_to_l_@exp1,f
  8707  07BD  1903               	btfsc	3,2
  8708  07BE  2FD9               	goto	l2512
  8709  07BF  2FB2               	goto	l2502
  8710  07C0                     l2504:	
  8711  07C0  3018               	movlw	24
  8712  07C1  022F               	subwf	__tdiv_to_l_@exp1,w
  8713  07C2  1C03               	skipc
  8714  07C3  2FD6               	goto	l753
  8715  07C4  3000               	movlw	0
  8716  07C5  00A3               	movwf	?__tdiv_to_l_+3
  8717  07C6  3000               	movlw	0
  8718  07C7  00A2               	movwf	?__tdiv_to_l_+2
  8719  07C8  3000               	movlw	0
  8720  07C9  00A1               	movwf	?__tdiv_to_l_+1
  8721  07CA  3000               	movlw	0
  8722  07CB  00A0               	movwf	?__tdiv_to_l_
  8723  07CC  0008               	return
  8724  07CD                     l2510:	
  8725  07CD  3001               	movlw	1
  8726  07CE                     u3135:	
  8727  07CE  35AA               	lslf	__tdiv_to_l_@quot,f
  8728  07CF  0DAB               	rlf	__tdiv_to_l_@quot+1,f
  8729  07D0  0DAC               	rlf	__tdiv_to_l_@quot+2,f
  8730  07D1  0DAD               	rlf	__tdiv_to_l_@quot+3,f
  8731  07D2  0B89               	decfsz	9,f
  8732  07D3  2FCE               	goto	u3135
  8733  07D4  3001               	movlw	1
  8734  07D5  02AF               	subwf	__tdiv_to_l_@exp1,f
  8735  07D6                     l753:	
  8736  07D6  082F               	movf	__tdiv_to_l_@exp1,w
  8737  07D7  1D03               	btfss	3,2
  8738  07D8  2FCD               	goto	l2510
  8739  07D9                     l2512:	
  8740  07D9  082D               	movf	__tdiv_to_l_@quot+3,w
  8741  07DA  00A3               	movwf	?__tdiv_to_l_+3
  8742  07DB  082C               	movf	__tdiv_to_l_@quot+2,w
  8743  07DC  00A2               	movwf	?__tdiv_to_l_+2
  8744  07DD  082B               	movf	__tdiv_to_l_@quot+1,w
  8745  07DE  00A1               	movwf	?__tdiv_to_l_+1
  8746  07DF  082A               	movf	__tdiv_to_l_@quot,w
  8747  07E0  00A0               	movwf	?__tdiv_to_l_
  8748  07E1  0008               	return
  8749  07E2                     __end_of__tdiv_to_l_:	
  8750                           
  8751                           	psect	text41
  8752  0C9D                     __ptext41:	
  8753 ;; *************** function __div_to_l_ *****************
  8754 ;; Defined at:
  8755 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fldivl.c"
  8756 ;; Parameters:    Size  Location     Type
  8757 ;;  f1              3    0[BANK0 ] unsigned long 
  8758 ;;  f2              3    3[BANK0 ] unsigned long 
  8759 ;; Auto vars:     Size  Location     Type
  8760 ;;  quot            4   14[BANK0 ] unsigned long 
  8761 ;;  exp1            1   19[BANK0 ] unsigned char 
  8762 ;;  cntr            1   18[BANK0 ] unsigned char 
  8763 ;; Return value:  Size  Location     Type
  8764 ;;                  4    0[BANK0 ] unsigned long 
  8765 ;; Registers used:
  8766 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8767 ;; Tracked objects:
  8768 ;;		On entry : 0/0
  8769 ;;		On exit  : 0/0
  8770 ;;		Unchanged: 0/0
  8771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8772 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8773 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8774 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8775 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8776 ;;Total ram usage:       20 bytes
  8777 ;; Hardware stack levels used:    1
  8778 ;; Hardware stack levels required when called:    4
  8779 ;; This function calls:
  8780 ;;		Nothing
  8781 ;; This function is called by:
  8782 ;;		_printf
  8783 ;; This function uses a non-reentrant model
  8784 ;;
  8785                           
  8786                           
  8787                           ;psect for function __div_to_l_
  8788  0C9D                     __div_to_l_:	
  8789                           
  8790                           ;incstack = 0
  8791                           ; Regs used in __div_to_l_: [wreg+fsr1l+fsr1h+status,2+status,0]
  8792  0C9D  3020               	movlw	low (__div_to_l_@f1| 0)
  8793  0C9E  0086               	movwf	6
  8794  0C9F  0187               	clrf	7
  8795  0CA0  3F40               	moviw [0]fsr1
  8796  0CA1  0020               	movlb	0	; select bank0
  8797  0CA2  00A6               	movwf	??__div_to_l_
  8798  0CA3  3F41               	moviw [1]fsr1
  8799  0CA4  00A7               	movwf	??__div_to_l_+1
  8800  0CA5  3F42               	moviw [2]fsr1
  8801  0CA6  00A8               	movwf	??__div_to_l_+2
  8802  0CA7  3F43               	moviw [3]fsr1
  8803  0CA8  00A9               	movwf	??__div_to_l_+3
  8804  0CA9  1003               	clrc
  8805  0CAA  0D28               	rlf	??__div_to_l_+2,w
  8806  0CAB  0D29               	rlf	??__div_to_l_+3,w
  8807  0CAC  00AA               	movwf	??__div_to_l_+4
  8808  0CAD  082A               	movf	??__div_to_l_+4,w
  8809  0CAE  00B3               	movwf	__div_to_l_@exp1
  8810  0CAF  0833               	movf	__div_to_l_@exp1,w
  8811  0CB0  1D03               	btfss	3,2
  8812  0CB1  2CBB               	goto	l2522
  8813  0CB2  3000               	movlw	0
  8814  0CB3  00A3               	movwf	?__div_to_l_+3
  8815  0CB4  3000               	movlw	0
  8816  0CB5  00A2               	movwf	?__div_to_l_+2
  8817  0CB6  3000               	movlw	0
  8818  0CB7  00A1               	movwf	?__div_to_l_+1
  8819  0CB8  3000               	movlw	0
  8820  0CB9  00A0               	movwf	?__div_to_l_
  8821  0CBA  0008               	return
  8822  0CBB                     l2522:	
  8823  0CBB  3023               	movlw	low (__div_to_l_@f2| 0)
  8824  0CBC  0086               	movwf	6
  8825  0CBD  0187               	clrf	7
  8826  0CBE  3F40               	moviw [0]fsr1
  8827  0CBF  00A6               	movwf	??__div_to_l_
  8828  0CC0  3F41               	moviw [1]fsr1
  8829  0CC1  00A7               	movwf	??__div_to_l_+1
  8830  0CC2  3F42               	moviw [2]fsr1
  8831  0CC3  00A8               	movwf	??__div_to_l_+2
  8832  0CC4  3F43               	moviw [3]fsr1
  8833  0CC5  00A9               	movwf	??__div_to_l_+3
  8834  0CC6  1003               	clrc
  8835  0CC7  0D28               	rlf	??__div_to_l_+2,w
  8836  0CC8  0D29               	rlf	??__div_to_l_+3,w
  8837  0CC9  00AA               	movwf	??__div_to_l_+4
  8838  0CCA  082A               	movf	??__div_to_l_+4,w
  8839  0CCB  00B2               	movwf	__div_to_l_@cntr
  8840  0CCC  0832               	movf	__div_to_l_@cntr,w
  8841  0CCD  1D03               	btfss	3,2
  8842  0CCE  2CD8               	goto	l2528
  8843  0CCF  3000               	movlw	0
  8844  0CD0  00A3               	movwf	?__div_to_l_+3
  8845  0CD1  3000               	movlw	0
  8846  0CD2  00A2               	movwf	?__div_to_l_+2
  8847  0CD3  3000               	movlw	0
  8848  0CD4  00A1               	movwf	?__div_to_l_+1
  8849  0CD5  3000               	movlw	0
  8850  0CD6  00A0               	movwf	?__div_to_l_
  8851  0CD7  0008               	return
  8852  0CD8                     l2528:	
  8853  0CD8  3020               	movlw	low (__div_to_l_@f1| 0)
  8854  0CD9  0086               	movwf	6
  8855  0CDA  0187               	clrf	7
  8856  0CDB  3000               	movlw	0
  8857  0CDC  0481               	iorwf	1,f
  8858  0CDD  3141               	addfsr 1,1
  8859  0CDE  3000               	movlw	0
  8860  0CDF  0481               	iorwf	1,f
  8861  0CE0  3141               	addfsr 1,1
  8862  0CE1  3080               	movlw	128
  8863  0CE2  0481               	iorwf	1,f
  8864  0CE3  3141               	addfsr 1,1
  8865  0CE4  3000               	movlw	0
  8866  0CE5  0481               	iorwf	1,f
  8867  0CE6  3020               	movlw	low (__div_to_l_@f1| 0)
  8868  0CE7  0086               	movwf	6
  8869  0CE8  0187               	clrf	7
  8870  0CE9  30FF               	movlw	255
  8871  0CEA  0581               	andwf	1,f
  8872  0CEB  3141               	addfsr 1,1
  8873  0CEC  30FF               	movlw	255
  8874  0CED  0581               	andwf	1,f
  8875  0CEE  3141               	addfsr 1,1
  8876  0CEF  30FF               	movlw	255
  8877  0CF0  0581               	andwf	1,f
  8878  0CF1  3141               	addfsr 1,1
  8879  0CF2  3000               	movlw	0
  8880  0CF3  0581               	andwf	1,f
  8881  0CF4  3023               	movlw	low (__div_to_l_@f2| 0)
  8882  0CF5  0086               	movwf	6
  8883  0CF6  0187               	clrf	7
  8884  0CF7  3000               	movlw	0
  8885  0CF8  0481               	iorwf	1,f
  8886  0CF9  3141               	addfsr 1,1
  8887  0CFA  3000               	movlw	0
  8888  0CFB  0481               	iorwf	1,f
  8889  0CFC  3141               	addfsr 1,1
  8890  0CFD  3080               	movlw	128
  8891  0CFE  0481               	iorwf	1,f
  8892  0CFF  3141               	addfsr 1,1
  8893  0D00  3000               	movlw	0
  8894  0D01  0481               	iorwf	1,f
  8895  0D02  3023               	movlw	low (__div_to_l_@f2| 0)
  8896  0D03  0086               	movwf	6
  8897  0D04  0187               	clrf	7
  8898  0D05  30FF               	movlw	255
  8899  0D06  0581               	andwf	1,f
  8900  0D07  3141               	addfsr 1,1
  8901  0D08  30FF               	movlw	255
  8902  0D09  0581               	andwf	1,f
  8903  0D0A  3141               	addfsr 1,1
  8904  0D0B  30FF               	movlw	255
  8905  0D0C  0581               	andwf	1,f
  8906  0D0D  3141               	addfsr 1,1
  8907  0D0E  3000               	movlw	0
  8908  0D0F  0581               	andwf	1,f
  8909  0D10  3000               	movlw	0
  8910  0D11  00B1               	movwf	__div_to_l_@quot+3
  8911  0D12  3000               	movlw	0
  8912  0D13  00B0               	movwf	__div_to_l_@quot+2
  8913  0D14  3000               	movlw	0
  8914  0D15  00AF               	movwf	__div_to_l_@quot+1
  8915  0D16  3000               	movlw	0
  8916  0D17  00AE               	movwf	__div_to_l_@quot
  8917  0D18  307F               	movlw	127
  8918  0D19  02B3               	subwf	__div_to_l_@exp1,f
  8919  0D1A  30A0               	movlw	160
  8920  0D1B  0732               	addwf	__div_to_l_@cntr,w
  8921  0D1C  00A6               	movwf	??__div_to_l_
  8922  0D1D  0826               	movf	??__div_to_l_,w
  8923  0D1E  02B3               	subwf	__div_to_l_@exp1,f
  8924  0D1F  3020               	movlw	32
  8925  0D20  00A6               	movwf	??__div_to_l_
  8926  0D21  0826               	movf	??__div_to_l_,w
  8927  0D22  00B2               	movwf	__div_to_l_@cntr
  8928  0D23                     l2538:	
  8929  0D23  3001               	movlw	1
  8930  0D24                     u3175:	
  8931  0D24  35AE               	lslf	__div_to_l_@quot,f
  8932  0D25  0DAF               	rlf	__div_to_l_@quot+1,f
  8933  0D26  0DB0               	rlf	__div_to_l_@quot+2,f
  8934  0D27  0DB1               	rlf	__div_to_l_@quot+3,f
  8935  0D28  0B89               	decfsz	9,f
  8936  0D29  2D24               	goto	u3175
  8937  0D2A  3023               	movlw	low (__div_to_l_@f2| 0)
  8938  0D2B  0086               	movwf	6
  8939  0D2C  0187               	clrf	7
  8940  0D2D  3F40               	moviw [0]fsr1
  8941  0D2E  00A6               	movwf	??__div_to_l_
  8942  0D2F  3F41               	moviw [1]fsr1
  8943  0D30  00A7               	movwf	??__div_to_l_+1
  8944  0D31  3F42               	moviw [2]fsr1
  8945  0D32  00A8               	movwf	??__div_to_l_+2
  8946  0D33  3F43               	moviw [3]fsr1
  8947  0D34  00A9               	movwf	??__div_to_l_+3
  8948  0D35  3020               	movlw	low (__div_to_l_@f1| 0)
  8949  0D36  0086               	movwf	6
  8950  0D37  0187               	clrf	7
  8951  0D38  3F40               	moviw [0]fsr1
  8952  0D39  00AA               	movwf	??__div_to_l_+4
  8953  0D3A  3F41               	moviw [1]fsr1
  8954  0D3B  00AB               	movwf	??__div_to_l_+5
  8955  0D3C  3F42               	moviw [2]fsr1
  8956  0D3D  00AC               	movwf	??__div_to_l_+6
  8957  0D3E  3F43               	moviw [3]fsr1
  8958  0D3F  00AD               	movwf	??__div_to_l_+7
  8959  0D40  0829               	movf	??__div_to_l_+3,w
  8960  0D41  022D               	subwf	??__div_to_l_+7,w
  8961  0D42  1D03               	skipz
  8962  0D43  2D4E               	goto	u3185
  8963  0D44  0828               	movf	??__div_to_l_+2,w
  8964  0D45  022C               	subwf	??__div_to_l_+6,w
  8965  0D46  1D03               	skipz
  8966  0D47  2D4E               	goto	u3185
  8967  0D48  0827               	movf	??__div_to_l_+1,w
  8968  0D49  022B               	subwf	??__div_to_l_+5,w
  8969  0D4A  1D03               	skipz
  8970  0D4B  2D4E               	goto	u3185
  8971  0D4C  0826               	movf	??__div_to_l_,w
  8972  0D4D  022A               	subwf	??__div_to_l_+4,w
  8973  0D4E                     u3185:	
  8974  0D4E  1C03               	skipc
  8975  0D4F  2D6B               	goto	l2546
  8976  0D50  3023               	movlw	low (__div_to_l_@f2| 0)
  8977  0D51  0086               	movwf	6
  8978  0D52  0187               	clrf	7
  8979  0D53  3F40               	moviw [0]fsr1
  8980  0D54  00A6               	movwf	??__div_to_l_
  8981  0D55  3F41               	moviw [1]fsr1
  8982  0D56  00A7               	movwf	??__div_to_l_+1
  8983  0D57  3F42               	moviw [2]fsr1
  8984  0D58  00A8               	movwf	??__div_to_l_+2
  8985  0D59  3F43               	moviw [3]fsr1
  8986  0D5A  00A9               	movwf	??__div_to_l_+3
  8987  0D5B  3020               	movlw	low (__div_to_l_@f1| 0)
  8988  0D5C  0086               	movwf	6
  8989  0D5D  0187               	clrf	7
  8990  0D5E  0826               	movf	??__div_to_l_,w
  8991  0D5F  0281               	subwf	1,f
  8992  0D60  3141               	addfsr 1,1
  8993  0D61  0827               	movf	??__div_to_l_+1,w
  8994  0D62  3B81               	subwfb	1,f
  8995  0D63  3141               	addfsr 1,1
  8996  0D64  0828               	movf	??__div_to_l_+2,w
  8997  0D65  3B81               	subwfb	1,f
  8998  0D66  3141               	addfsr 1,1
  8999  0D67  0829               	movf	??__div_to_l_+3,w
  9000  0D68  3B81               	subwfb	1,f
  9001  0D69  317D               	addfsr 1,-3
  9002  0D6A  142E               	bsf	__div_to_l_@quot,0
  9003  0D6B                     l2546:	
  9004  0D6B  3020               	movlw	low (__div_to_l_@f1| 0)
  9005  0D6C  0086               	movwf	6
  9006  0D6D  0187               	clrf	7
  9007  0D6E  3581               	lslf	1,f
  9008  0D6F  3141               	addfsr 1,1
  9009  0D70  0D81               	rlf	1,f
  9010  0D71  3141               	addfsr 1,1
  9011  0D72  0D81               	rlf	1,f
  9012  0D73  3141               	addfsr 1,1
  9013  0D74  0D81               	rlf	1,f
  9014  0D75  317D               	addfsr 1,-3
  9015  0D76  3001               	movlw	1
  9016  0D77  02B2               	subwf	__div_to_l_@cntr,f
  9017  0D78  1D03               	btfss	3,2
  9018  0D79  2D23               	goto	l2538
  9019  0D7A  1FB3               	btfss	__div_to_l_@exp1,7
  9020  0D7B  2D98               	goto	l2558
  9021  0D7C  0833               	movf	__div_to_l_@exp1,w
  9022  0D7D  3A80               	xorlw	128
  9023  0D7E  3E9F               	addlw	159
  9024  0D7F  1803               	skipnc
  9025  0D80  2D8A               	goto	l2556
  9026  0D81  3000               	movlw	0
  9027  0D82  00A3               	movwf	?__div_to_l_+3
  9028  0D83  3000               	movlw	0
  9029  0D84  00A2               	movwf	?__div_to_l_+2
  9030  0D85  3000               	movlw	0
  9031  0D86  00A1               	movwf	?__div_to_l_+1
  9032  0D87  3000               	movlw	0
  9033  0D88  00A0               	movwf	?__div_to_l_
  9034  0D89  0008               	return
  9035  0D8A                     l2556:	
  9036  0D8A  3001               	movlw	1
  9037  0D8B                     u3225:	
  9038  0D8B  36B1               	lsrf	__div_to_l_@quot+3,f
  9039  0D8C  0CB0               	rrf	__div_to_l_@quot+2,f
  9040  0D8D  0CAF               	rrf	__div_to_l_@quot+1,f
  9041  0D8E  0CAE               	rrf	__div_to_l_@quot,f
  9042  0D8F  0B89               	decfsz	9,f
  9043  0D90  2D8B               	goto	u3225
  9044  0D91  3001               	movlw	1
  9045  0D92  00A6               	movwf	??__div_to_l_
  9046  0D93  0826               	movf	??__div_to_l_,w
  9047  0D94  07B3               	addwf	__div_to_l_@exp1,f
  9048  0D95  1903               	btfsc	3,2
  9049  0D96  2DB1               	goto	l2566
  9050  0D97  2D8A               	goto	l2556
  9051  0D98                     l2558:	
  9052  0D98  3020               	movlw	32
  9053  0D99  0233               	subwf	__div_to_l_@exp1,w
  9054  0D9A  1C03               	skipc
  9055  0D9B  2DAE               	goto	l674
  9056  0D9C  3000               	movlw	0
  9057  0D9D  00A3               	movwf	?__div_to_l_+3
  9058  0D9E  3000               	movlw	0
  9059  0D9F  00A2               	movwf	?__div_to_l_+2
  9060  0DA0  3000               	movlw	0
  9061  0DA1  00A1               	movwf	?__div_to_l_+1
  9062  0DA2  3000               	movlw	0
  9063  0DA3  00A0               	movwf	?__div_to_l_
  9064  0DA4  0008               	return
  9065  0DA5                     l2564:	
  9066  0DA5  3001               	movlw	1
  9067  0DA6                     u3255:	
  9068  0DA6  35AE               	lslf	__div_to_l_@quot,f
  9069  0DA7  0DAF               	rlf	__div_to_l_@quot+1,f
  9070  0DA8  0DB0               	rlf	__div_to_l_@quot+2,f
  9071  0DA9  0DB1               	rlf	__div_to_l_@quot+3,f
  9072  0DAA  0B89               	decfsz	9,f
  9073  0DAB  2DA6               	goto	u3255
  9074  0DAC  3001               	movlw	1
  9075  0DAD  02B3               	subwf	__div_to_l_@exp1,f
  9076  0DAE                     l674:	
  9077  0DAE  0833               	movf	__div_to_l_@exp1,w
  9078  0DAF  1D03               	btfss	3,2
  9079  0DB0  2DA5               	goto	l2564
  9080  0DB1                     l2566:	
  9081  0DB1  0831               	movf	__div_to_l_@quot+3,w
  9082  0DB2  00A3               	movwf	?__div_to_l_+3
  9083  0DB3  0830               	movf	__div_to_l_@quot+2,w
  9084  0DB4  00A2               	movwf	?__div_to_l_+2
  9085  0DB5  082F               	movf	__div_to_l_@quot+1,w
  9086  0DB6  00A1               	movwf	?__div_to_l_+1
  9087  0DB7  082E               	movf	__div_to_l_@quot,w
  9088  0DB8  00A0               	movwf	?__div_to_l_
  9089  0DB9  0008               	return
  9090  0DBA                     __end_of__div_to_l_:	
  9091                           
  9092                           	psect	text42
  9093  0809                     __ptext42:	
  9094 ;; *************** function ___lltoft *****************
  9095 ;; Defined at:
  9096 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
  9097 ;; Parameters:    Size  Location     Type
  9098 ;;  c               4    8[BANK0 ] unsigned long 
  9099 ;; Auto vars:     Size  Location     Type
  9100 ;;  exp             1   13[BANK0 ] unsigned char 
  9101 ;; Return value:  Size  Location     Type
  9102 ;;                  3    8[BANK0 ] float 
  9103 ;; Registers used:
  9104 ;;		wreg, status,2, status,0, pclath, cstack
  9105 ;; Tracked objects:
  9106 ;;		On entry : 0/0
  9107 ;;		On exit  : 0/0
  9108 ;;		Unchanged: 0/0
  9109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9110 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9111 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9112 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9113 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9114 ;;Total ram usage:        6 bytes
  9115 ;; Hardware stack levels used:    1
  9116 ;; Hardware stack levels required when called:    5
  9117 ;; This function calls:
  9118 ;;		___ftpack
  9119 ;; This function is called by:
  9120 ;;		_printf
  9121 ;; This function uses a non-reentrant model
  9122 ;;
  9123                           
  9124                           
  9125                           ;psect for function ___lltoft
  9126  0809                     ___lltoft:	
  9127                           
  9128                           ;incstack = 0
  9129                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  9130  0809  308E               	movlw	142
  9131  080A  0020               	movlb	0	; select bank0
  9132  080B  00AC               	movwf	??___lltoft
  9133  080C  082C               	movf	??___lltoft,w
  9134  080D  00AD               	movwf	___lltoft@exp
  9135  080E                     l2696:	
  9136  080E  30FF               	movlw	255
  9137  080F  052B               	andwf	___lltoft@c+3,w
  9138  0810  1903               	btfsc	3,2
  9139  0811  281E               	goto	l2698
  9140  0812  3001               	movlw	1
  9141  0813                     u3555:	
  9142  0813  36AB               	lsrf	___lltoft@c+3,f
  9143  0814  0CAA               	rrf	___lltoft@c+2,f
  9144  0815  0CA9               	rrf	___lltoft@c+1,f
  9145  0816  0CA8               	rrf	___lltoft@c,f
  9146  0817  0B89               	decfsz	9,f
  9147  0818  2813               	goto	u3555
  9148  0819  3001               	movlw	1
  9149  081A  00AC               	movwf	??___lltoft
  9150  081B  082C               	movf	??___lltoft,w
  9151  081C  07AD               	addwf	___lltoft@exp,f
  9152  081D  280E               	goto	l2696
  9153  081E                     l2698:	
  9154  081E  0828               	movf	___lltoft@c,w
  9155  081F  00A0               	movwf	___ftpack@arg
  9156  0820  0829               	movf	___lltoft@c+1,w
  9157  0821  00A1               	movwf	___ftpack@arg+1
  9158  0822  082A               	movf	___lltoft@c+2,w
  9159  0823  00A2               	movwf	___ftpack@arg+2
  9160  0824  082D               	movf	___lltoft@exp,w
  9161  0825  00AC               	movwf	??___lltoft
  9162  0826  082C               	movf	??___lltoft,w
  9163  0827  00A3               	movwf	___ftpack@exp
  9164  0828  01A4               	clrf	___ftpack@sign
  9165  0829  3197  2714         	fcall	___ftpack
  9166  082B  0020               	movlb	0	; select bank0
  9167  082C  0820               	movf	?___ftpack,w
  9168  082D  00A8               	movwf	?___lltoft
  9169  082E  0821               	movf	?___ftpack+1,w
  9170  082F  00A9               	movwf	?___lltoft+1
  9171  0830  0822               	movf	?___ftpack+2,w
  9172  0831  00AA               	movwf	?___lltoft+2
  9173  0832  0008               	return
  9174  0833                     __end_of___lltoft:	
  9175                           
  9176                           	psect	text43
  9177  1548                     __ptext43:	
  9178 ;; *************** function ___llmod *****************
  9179 ;; Defined at:
  9180 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\llmod.c"
  9181 ;; Parameters:    Size  Location     Type
  9182 ;;  divisor         4   14[BANK0 ] unsigned long 
  9183 ;;  dividend        4   18[BANK0 ] unsigned long 
  9184 ;; Auto vars:     Size  Location     Type
  9185 ;;  counter         1   23[BANK0 ] unsigned char 
  9186 ;; Return value:  Size  Location     Type
  9187 ;;                  4   14[BANK0 ] unsigned long 
  9188 ;; Registers used:
  9189 ;;		wreg, status,2, status,0
  9190 ;; Tracked objects:
  9191 ;;		On entry : 0/0
  9192 ;;		On exit  : 0/0
  9193 ;;		Unchanged: 0/0
  9194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9195 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9196 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9197 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9198 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9199 ;;Total ram usage:       10 bytes
  9200 ;; Hardware stack levels used:    1
  9201 ;; Hardware stack levels required when called:    4
  9202 ;; This function calls:
  9203 ;;		Nothing
  9204 ;; This function is called by:
  9205 ;;		_printf
  9206 ;; This function uses a non-reentrant model
  9207 ;;
  9208                           
  9209                           
  9210                           ;psect for function ___llmod
  9211  1548                     ___llmod:	
  9212                           
  9213                           ;incstack = 0
  9214                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  9215  1548  0020               	movlb	0	; select bank0
  9216  1549  0831               	movf	___llmod@divisor+3,w
  9217  154A  0430               	iorwf	___llmod@divisor+2,w
  9218  154B  042F               	iorwf	___llmod@divisor+1,w
  9219  154C  042E               	iorwf	___llmod@divisor,w
  9220  154D  1903               	skipnz
  9221  154E  2D82               	goto	l2688
  9222  154F  01B7               	clrf	___llmod@counter
  9223  1550  0AB7               	incf	___llmod@counter,f
  9224  1551                     l2678:	
  9225  1551  1BB1               	btfsc	___llmod@divisor+3,7
  9226  1552  2D5F               	goto	l2680
  9227  1553  3001               	movlw	1
  9228  1554                     u3505:	
  9229  1554  35AE               	lslf	___llmod@divisor,f
  9230  1555  0DAF               	rlf	___llmod@divisor+1,f
  9231  1556  0DB0               	rlf	___llmod@divisor+2,f
  9232  1557  0DB1               	rlf	___llmod@divisor+3,f
  9233  1558  0B89               	decfsz	9,f
  9234  1559  2D54               	goto	u3505
  9235  155A  3001               	movlw	1
  9236  155B  00B6               	movwf	??___llmod
  9237  155C  0836               	movf	??___llmod,w
  9238  155D  07B7               	addwf	___llmod@counter,f
  9239  155E  2D51               	goto	l2678
  9240  155F                     l2680:	
  9241  155F  0831               	movf	___llmod@divisor+3,w
  9242  1560  0235               	subwf	___llmod@dividend+3,w
  9243  1561  1D03               	skipz
  9244  1562  2D6D               	goto	u3525
  9245  1563  0830               	movf	___llmod@divisor+2,w
  9246  1564  0234               	subwf	___llmod@dividend+2,w
  9247  1565  1D03               	skipz
  9248  1566  2D6D               	goto	u3525
  9249  1567  082F               	movf	___llmod@divisor+1,w
  9250  1568  0233               	subwf	___llmod@dividend+1,w
  9251  1569  1D03               	skipz
  9252  156A  2D6D               	goto	u3525
  9253  156B  082E               	movf	___llmod@divisor,w
  9254  156C  0232               	subwf	___llmod@dividend,w
  9255  156D                     u3525:	
  9256  156D  1C03               	skipc
  9257  156E  2D77               	goto	l2684
  9258  156F  082E               	movf	___llmod@divisor,w
  9259  1570  02B2               	subwf	___llmod@dividend,f
  9260  1571  082F               	movf	___llmod@divisor+1,w
  9261  1572  3BB3               	subwfb	___llmod@dividend+1,f
  9262  1573  0830               	movf	___llmod@divisor+2,w
  9263  1574  3BB4               	subwfb	___llmod@dividend+2,f
  9264  1575  0831               	movf	___llmod@divisor+3,w
  9265  1576  3BB5               	subwfb	___llmod@dividend+3,f
  9266  1577                     l2684:	
  9267  1577  3001               	movlw	1
  9268  1578                     u3535:	
  9269  1578  36B1               	lsrf	___llmod@divisor+3,f
  9270  1579  0CB0               	rrf	___llmod@divisor+2,f
  9271  157A  0CAF               	rrf	___llmod@divisor+1,f
  9272  157B  0CAE               	rrf	___llmod@divisor,f
  9273  157C  0B89               	decfsz	9,f
  9274  157D  2D78               	goto	u3535
  9275  157E  3001               	movlw	1
  9276  157F  02B7               	subwf	___llmod@counter,f
  9277  1580  1D03               	btfss	3,2
  9278  1581  2D5F               	goto	l2680
  9279  1582                     l2688:	
  9280  1582  0835               	movf	___llmod@dividend+3,w
  9281  1583  00B1               	movwf	?___llmod+3
  9282  1584  0834               	movf	___llmod@dividend+2,w
  9283  1585  00B0               	movwf	?___llmod+2
  9284  1586  0833               	movf	___llmod@dividend+1,w
  9285  1587  00AF               	movwf	?___llmod+1
  9286  1588  0832               	movf	___llmod@dividend,w
  9287  1589  00AE               	movwf	?___llmod
  9288  158A  0008               	return
  9289  158B                     __end_of___llmod:	
  9290                           
  9291                           	psect	text44
  9292  16C1                     __ptext44:	
  9293 ;; *************** function ___lldiv *****************
  9294 ;; Defined at:
  9295 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lldiv.c"
  9296 ;; Parameters:    Size  Location     Type
  9297 ;;  divisor         4    0[BANK0 ] unsigned long 
  9298 ;;  dividend        4    4[BANK0 ] unsigned long 
  9299 ;; Auto vars:     Size  Location     Type
  9300 ;;  quotient        4    9[BANK0 ] unsigned long 
  9301 ;;  counter         1   13[BANK0 ] unsigned char 
  9302 ;; Return value:  Size  Location     Type
  9303 ;;                  4    0[BANK0 ] unsigned long 
  9304 ;; Registers used:
  9305 ;;		wreg, status,2, status,0
  9306 ;; Tracked objects:
  9307 ;;		On entry : 0/0
  9308 ;;		On exit  : 0/0
  9309 ;;		Unchanged: 0/0
  9310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9311 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9312 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9313 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9314 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9315 ;;Total ram usage:       14 bytes
  9316 ;; Hardware stack levels used:    1
  9317 ;; Hardware stack levels required when called:    4
  9318 ;; This function calls:
  9319 ;;		Nothing
  9320 ;; This function is called by:
  9321 ;;		_printf
  9322 ;; This function uses a non-reentrant model
  9323 ;;
  9324                           
  9325                           
  9326                           ;psect for function ___lldiv
  9327  16C1                     ___lldiv:	
  9328                           
  9329                           ;incstack = 0
  9330                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  9331  16C1  3000               	movlw	0
  9332  16C2  0020               	movlb	0	; select bank0
  9333  16C3  00AC               	movwf	___lldiv@quotient+3
  9334  16C4  3000               	movlw	0
  9335  16C5  00AB               	movwf	___lldiv@quotient+2
  9336  16C6  3000               	movlw	0
  9337  16C7  00AA               	movwf	___lldiv@quotient+1
  9338  16C8  3000               	movlw	0
  9339  16C9  00A9               	movwf	___lldiv@quotient
  9340  16CA  0823               	movf	___lldiv@divisor+3,w
  9341  16CB  0422               	iorwf	___lldiv@divisor+2,w
  9342  16CC  0421               	iorwf	___lldiv@divisor+1,w
  9343  16CD  0420               	iorwf	___lldiv@divisor,w
  9344  16CE  1903               	skipnz
  9345  16CF  2F0B               	goto	l2668
  9346  16D0  01AD               	clrf	___lldiv@counter
  9347  16D1  0AAD               	incf	___lldiv@counter,f
  9348  16D2                     l2654:	
  9349  16D2  1BA3               	btfsc	___lldiv@divisor+3,7
  9350  16D3  2EE0               	goto	l2656
  9351  16D4  3001               	movlw	1
  9352  16D5                     u3435:	
  9353  16D5  35A0               	lslf	___lldiv@divisor,f
  9354  16D6  0DA1               	rlf	___lldiv@divisor+1,f
  9355  16D7  0DA2               	rlf	___lldiv@divisor+2,f
  9356  16D8  0DA3               	rlf	___lldiv@divisor+3,f
  9357  16D9  0B89               	decfsz	9,f
  9358  16DA  2ED5               	goto	u3435
  9359  16DB  3001               	movlw	1
  9360  16DC  00A8               	movwf	??___lldiv
  9361  16DD  0828               	movf	??___lldiv,w
  9362  16DE  07AD               	addwf	___lldiv@counter,f
  9363  16DF  2ED2               	goto	l2654
  9364  16E0                     l2656:	
  9365  16E0  3001               	movlw	1
  9366  16E1                     u3455:	
  9367  16E1  35A9               	lslf	___lldiv@quotient,f
  9368  16E2  0DAA               	rlf	___lldiv@quotient+1,f
  9369  16E3  0DAB               	rlf	___lldiv@quotient+2,f
  9370  16E4  0DAC               	rlf	___lldiv@quotient+3,f
  9371  16E5  0B89               	decfsz	9,f
  9372  16E6  2EE1               	goto	u3455
  9373  16E7  0823               	movf	___lldiv@divisor+3,w
  9374  16E8  0227               	subwf	___lldiv@dividend+3,w
  9375  16E9  1D03               	skipz
  9376  16EA  2EF5               	goto	u3465
  9377  16EB  0822               	movf	___lldiv@divisor+2,w
  9378  16EC  0226               	subwf	___lldiv@dividend+2,w
  9379  16ED  1D03               	skipz
  9380  16EE  2EF5               	goto	u3465
  9381  16EF  0821               	movf	___lldiv@divisor+1,w
  9382  16F0  0225               	subwf	___lldiv@dividend+1,w
  9383  16F1  1D03               	skipz
  9384  16F2  2EF5               	goto	u3465
  9385  16F3  0820               	movf	___lldiv@divisor,w
  9386  16F4  0224               	subwf	___lldiv@dividend,w
  9387  16F5                     u3465:	
  9388  16F5  1C03               	skipc
  9389  16F6  2F00               	goto	l2664
  9390  16F7  0820               	movf	___lldiv@divisor,w
  9391  16F8  02A4               	subwf	___lldiv@dividend,f
  9392  16F9  0821               	movf	___lldiv@divisor+1,w
  9393  16FA  3BA5               	subwfb	___lldiv@dividend+1,f
  9394  16FB  0822               	movf	___lldiv@divisor+2,w
  9395  16FC  3BA6               	subwfb	___lldiv@dividend+2,f
  9396  16FD  0823               	movf	___lldiv@divisor+3,w
  9397  16FE  3BA7               	subwfb	___lldiv@dividend+3,f
  9398  16FF  1429               	bsf	___lldiv@quotient,0
  9399  1700                     l2664:	
  9400  1700  3001               	movlw	1
  9401  1701                     u3475:	
  9402  1701  36A3               	lsrf	___lldiv@divisor+3,f
  9403  1702  0CA2               	rrf	___lldiv@divisor+2,f
  9404  1703  0CA1               	rrf	___lldiv@divisor+1,f
  9405  1704  0CA0               	rrf	___lldiv@divisor,f
  9406  1705  0B89               	decfsz	9,f
  9407  1706  2F01               	goto	u3475
  9408  1707  3001               	movlw	1
  9409  1708  02AD               	subwf	___lldiv@counter,f
  9410  1709  1D03               	btfss	3,2
  9411  170A  2EE0               	goto	l2656
  9412  170B                     l2668:	
  9413  170B  082C               	movf	___lldiv@quotient+3,w
  9414  170C  00A3               	movwf	?___lldiv+3
  9415  170D  082B               	movf	___lldiv@quotient+2,w
  9416  170E  00A2               	movwf	?___lldiv+2
  9417  170F  082A               	movf	___lldiv@quotient+1,w
  9418  1710  00A1               	movwf	?___lldiv+1
  9419  1711  0829               	movf	___lldiv@quotient,w
  9420  1712  00A0               	movwf	?___lldiv
  9421  1713  0008               	return
  9422  1714                     __end_of___lldiv:	
  9423                           
  9424                           	psect	text45
  9425  1779                     __ptext45:	
  9426 ;; *************** function ___fttol *****************
  9427 ;; Defined at:
  9428 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  9429 ;; Parameters:    Size  Location     Type
  9430 ;;  f1              3   47[BANK0 ] float 
  9431 ;; Auto vars:     Size  Location     Type
  9432 ;;  lval            4   56[BANK0 ] unsigned long 
  9433 ;;  exp1            1   60[BANK0 ] unsigned char 
  9434 ;;  sign1           1   55[BANK0 ] unsigned char 
  9435 ;; Return value:  Size  Location     Type
  9436 ;;                  4   47[BANK0 ] long 
  9437 ;; Registers used:
  9438 ;;		wreg, status,2, status,0
  9439 ;; Tracked objects:
  9440 ;;		On entry : 0/0
  9441 ;;		On exit  : 0/0
  9442 ;;		Unchanged: 0/0
  9443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9444 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9445 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9446 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9447 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9448 ;;Total ram usage:       14 bytes
  9449 ;; Hardware stack levels used:    1
  9450 ;; Hardware stack levels required when called:    4
  9451 ;; This function calls:
  9452 ;;		Nothing
  9453 ;; This function is called by:
  9454 ;;		_printf
  9455 ;; This function uses a non-reentrant model
  9456 ;;
  9457                           
  9458                           
  9459                           ;psect for function ___fttol
  9460  1779                     ___fttol:	
  9461                           
  9462                           ;incstack = 0
  9463                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  9464  1779  0020               	movlb	0	; select bank0
  9465  177A  084F               	movf	___fttol@f1,w
  9466  177B  00D3               	movwf	??___fttol
  9467  177C  0850               	movf	___fttol@f1+1,w
  9468  177D  00D4               	movwf	??___fttol+1
  9469  177E  0851               	movf	___fttol@f1+2,w
  9470  177F  00D5               	movwf	??___fttol+2
  9471  1780  1003               	clrc
  9472  1781  0D54               	rlf	??___fttol+1,w
  9473  1782  0D55               	rlf	??___fttol+2,w
  9474  1783  00D6               	movwf	??___fttol+3
  9475  1784  0856               	movf	??___fttol+3,w
  9476  1785  00DC               	movwf	___fttol@exp1
  9477  1786  085C               	movf	___fttol@exp1,w
  9478  1787  1D03               	btfss	3,2
  9479  1788  2F92               	goto	l2612
  9480  1789  3000               	movlw	0
  9481  178A  00D2               	movwf	?___fttol+3
  9482  178B  3000               	movlw	0
  9483  178C  00D1               	movwf	?___fttol+2
  9484  178D  3000               	movlw	0
  9485  178E  00D0               	movwf	?___fttol+1
  9486  178F  3000               	movlw	0
  9487  1790  00CF               	movwf	?___fttol
  9488  1791  0008               	return
  9489  1792                     l2612:	
  9490  1792  084F               	movf	___fttol@f1,w
  9491  1793  00D3               	movwf	??___fttol
  9492  1794  0850               	movf	___fttol@f1+1,w
  9493  1795  00D4               	movwf	??___fttol+1
  9494  1796  0851               	movf	___fttol@f1+2,w
  9495  1797  00D5               	movwf	??___fttol+2
  9496  1798  3017               	movlw	23
  9497  1799                     u3335:	
  9498  1799  36D5               	lsrf	??___fttol+2,f
  9499  179A  0CD4               	rrf	??___fttol+1,f
  9500  179B  0CD3               	rrf	??___fttol,f
  9501  179C  0B89               	decfsz	9,f
  9502  179D  2F99               	goto	u3335
  9503  179E  0853               	movf	??___fttol,w
  9504  179F  00D6               	movwf	??___fttol+3
  9505  17A0  0856               	movf	??___fttol+3,w
  9506  17A1  00D7               	movwf	___fttol@sign1
  9507  17A2  17D0               	bsf	___fttol@f1+1,7
  9508  17A3  30FF               	movlw	255
  9509  17A4  05CF               	andwf	___fttol@f1,f
  9510  17A5  30FF               	movlw	255
  9511  17A6  05D0               	andwf	___fttol@f1+1,f
  9512  17A7  3000               	movlw	0
  9513  17A8  05D1               	andwf	___fttol@f1+2,f
  9514  17A9  084F               	movf	___fttol@f1,w
  9515  17AA  00D8               	movwf	___fttol@lval
  9516  17AB  0850               	movf	___fttol@f1+1,w
  9517  17AC  00D9               	movwf	___fttol@lval+1
  9518  17AD  0851               	movf	___fttol@f1+2,w
  9519  17AE  00DA               	movwf	___fttol@lval+2
  9520  17AF  01DB               	clrf	___fttol@lval+3
  9521  17B0  308E               	movlw	142
  9522  17B1  02DC               	subwf	___fttol@exp1,f
  9523  17B2  1FDC               	btfss	___fttol@exp1,7
  9524  17B3  2FD0               	goto	l2632
  9525  17B4  085C               	movf	___fttol@exp1,w
  9526  17B5  3A80               	xorlw	128
  9527  17B6  3E8F               	addlw	143
  9528  17B7  1803               	skipnc
  9529  17B8  2FC2               	goto	l2630
  9530  17B9  3000               	movlw	0
  9531  17BA  00D2               	movwf	?___fttol+3
  9532  17BB  3000               	movlw	0
  9533  17BC  00D1               	movwf	?___fttol+2
  9534  17BD  3000               	movlw	0
  9535  17BE  00D0               	movwf	?___fttol+1
  9536  17BF  3000               	movlw	0
  9537  17C0  00CF               	movwf	?___fttol
  9538  17C1  0008               	return
  9539  17C2                     l2630:	
  9540  17C2  3001               	movlw	1
  9541  17C3                     u3365:	
  9542  17C3  36DB               	lsrf	___fttol@lval+3,f
  9543  17C4  0CDA               	rrf	___fttol@lval+2,f
  9544  17C5  0CD9               	rrf	___fttol@lval+1,f
  9545  17C6  0CD8               	rrf	___fttol@lval,f
  9546  17C7  0B89               	decfsz	9,f
  9547  17C8  2FC3               	goto	u3365
  9548  17C9  3001               	movlw	1
  9549  17CA  00D3               	movwf	??___fttol
  9550  17CB  0853               	movf	??___fttol,w
  9551  17CC  07DC               	addwf	___fttol@exp1,f
  9552  17CD  1903               	btfsc	3,2
  9553  17CE  2FE9               	goto	l2640
  9554  17CF  2FC2               	goto	l2630
  9555  17D0                     l2632:	
  9556  17D0  3018               	movlw	24
  9557  17D1  025C               	subwf	___fttol@exp1,w
  9558  17D2  1C03               	skipc
  9559  17D3  2FE6               	goto	l794
  9560  17D4  3000               	movlw	0
  9561  17D5  00D2               	movwf	?___fttol+3
  9562  17D6  3000               	movlw	0
  9563  17D7  00D1               	movwf	?___fttol+2
  9564  17D8  3000               	movlw	0
  9565  17D9  00D0               	movwf	?___fttol+1
  9566  17DA  3000               	movlw	0
  9567  17DB  00CF               	movwf	?___fttol
  9568  17DC  0008               	return
  9569  17DD                     l2638:	
  9570  17DD  3001               	movlw	1
  9571  17DE                     u3395:	
  9572  17DE  35D8               	lslf	___fttol@lval,f
  9573  17DF  0DD9               	rlf	___fttol@lval+1,f
  9574  17E0  0DDA               	rlf	___fttol@lval+2,f
  9575  17E1  0DDB               	rlf	___fttol@lval+3,f
  9576  17E2  0B89               	decfsz	9,f
  9577  17E3  2FDE               	goto	u3395
  9578  17E4  3001               	movlw	1
  9579  17E5  02DC               	subwf	___fttol@exp1,f
  9580  17E6                     l794:	
  9581  17E6  085C               	movf	___fttol@exp1,w
  9582  17E7  1D03               	btfss	3,2
  9583  17E8  2FDD               	goto	l2638
  9584  17E9                     l2640:	
  9585  17E9  0857               	movf	___fttol@sign1,w
  9586  17EA  1903               	btfsc	3,2
  9587  17EB  2FF7               	goto	l2644
  9588  17EC  09D8               	comf	___fttol@lval,f
  9589  17ED  09D9               	comf	___fttol@lval+1,f
  9590  17EE  09DA               	comf	___fttol@lval+2,f
  9591  17EF  09DB               	comf	___fttol@lval+3,f
  9592  17F0  0AD8               	incf	___fttol@lval,f
  9593  17F1  1903               	skipnz
  9594  17F2  0AD9               	incf	___fttol@lval+1,f
  9595  17F3  1903               	skipnz
  9596  17F4  0ADA               	incf	___fttol@lval+2,f
  9597  17F5  1903               	skipnz
  9598  17F6  0ADB               	incf	___fttol@lval+3,f
  9599  17F7                     l2644:	
  9600  17F7  085B               	movf	___fttol@lval+3,w
  9601  17F8  00D2               	movwf	?___fttol+3
  9602  17F9  085A               	movf	___fttol@lval+2,w
  9603  17FA  00D1               	movwf	?___fttol+2
  9604  17FB  0859               	movf	___fttol@lval+1,w
  9605  17FC  00D0               	movwf	?___fttol+1
  9606  17FD  0858               	movf	___fttol@lval,w
  9607  17FE  00CF               	movwf	?___fttol
  9608  17FF  0008               	return
  9609  1800                     __end_of___fttol:	
  9610                           
  9611                           	psect	text46
  9612  141D                     __ptext46:	
  9613 ;; *************** function ___ftsub *****************
  9614 ;; Defined at:
  9615 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
  9616 ;; Parameters:    Size  Location     Type
  9617 ;;  f2              3   65[BANK0 ] float 
  9618 ;;  f1              3   68[BANK0 ] float 
  9619 ;; Auto vars:     Size  Location     Type
  9620 ;;		None
  9621 ;; Return value:  Size  Location     Type
  9622 ;;                  3   65[BANK0 ] float 
  9623 ;; Registers used:
  9624 ;;		wreg, status,2, status,0, pclath, cstack
  9625 ;; Tracked objects:
  9626 ;;		On entry : 0/0
  9627 ;;		On exit  : 0/0
  9628 ;;		Unchanged: 0/0
  9629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9630 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9633 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9634 ;;Total ram usage:        6 bytes
  9635 ;; Hardware stack levels used:    1
  9636 ;; Hardware stack levels required when called:    6
  9637 ;; This function calls:
  9638 ;;		___ftadd
  9639 ;; This function is called by:
  9640 ;;		_printf
  9641 ;; This function uses a non-reentrant model
  9642 ;;
  9643                           
  9644                           
  9645                           ;psect for function ___ftsub
  9646  141D                     ___ftsub:	
  9647                           
  9648                           ;incstack = 0
  9649                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  9650  141D  0020               	movlb	0	; select bank0
  9651  141E  0863               	movf	___ftsub@f2+2,w
  9652  141F  0462               	iorwf	___ftsub@f2+1,w
  9653  1420  0461               	iorwf	___ftsub@f2,w
  9654  1421  1903               	skipnz
  9655  1422  2C25               	goto	l2602
  9656  1423  3080               	movlw	128
  9657  1424  06E3               	xorwf	___ftsub@f2+2,f
  9658  1425                     l2602:	
  9659  1425  0864               	movf	___ftsub@f1,w
  9660  1426  00D4               	movwf	___ftadd@f1
  9661  1427  0865               	movf	___ftsub@f1+1,w
  9662  1428  00D5               	movwf	___ftadd@f1+1
  9663  1429  0866               	movf	___ftsub@f1+2,w
  9664  142A  00D6               	movwf	___ftadd@f1+2
  9665  142B  0861               	movf	___ftsub@f2,w
  9666  142C  00D7               	movwf	___ftadd@f2
  9667  142D  0862               	movf	___ftsub@f2+1,w
  9668  142E  00D8               	movwf	___ftadd@f2+1
  9669  142F  0863               	movf	___ftsub@f2+2,w
  9670  1430  00D9               	movwf	___ftadd@f2+2
  9671  1431  318A  22AA         	fcall	___ftadd
  9672  1433  0020               	movlb	0	; select bank0
  9673  1434  0854               	movf	?___ftadd,w
  9674  1435  00E1               	movwf	?___ftsub
  9675  1436  0855               	movf	?___ftadd+1,w
  9676  1437  00E2               	movwf	?___ftsub+1
  9677  1438  0856               	movf	?___ftadd+2,w
  9678  1439  00E3               	movwf	?___ftsub+2
  9679  143A  0008               	return
  9680  143B                     __end_of___ftsub:	
  9681                           
  9682                           	psect	text47
  9683  0AAA                     __ptext47:	
  9684 ;; *************** function ___ftadd *****************
  9685 ;; Defined at:
  9686 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
  9687 ;; Parameters:    Size  Location     Type
  9688 ;;  f1              3   52[BANK0 ] float 
  9689 ;;  f2              3   55[BANK0 ] float 
  9690 ;; Auto vars:     Size  Location     Type
  9691 ;;  exp1            1   64[BANK0 ] unsigned char 
  9692 ;;  exp2            1   63[BANK0 ] unsigned char 
  9693 ;;  sign            1   62[BANK0 ] unsigned char 
  9694 ;; Return value:  Size  Location     Type
  9695 ;;                  3   52[BANK0 ] float 
  9696 ;; Registers used:
  9697 ;;		wreg, status,2, status,0, pclath, cstack
  9698 ;; Tracked objects:
  9699 ;;		On entry : 0/0
  9700 ;;		On exit  : 0/0
  9701 ;;		Unchanged: 0/0
  9702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9703 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9704 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9705 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9706 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9707 ;;Total ram usage:       13 bytes
  9708 ;; Hardware stack levels used:    1
  9709 ;; Hardware stack levels required when called:    5
  9710 ;; This function calls:
  9711 ;;		___ftpack
  9712 ;; This function is called by:
  9713 ;;		_printf
  9714 ;;		___ftsub
  9715 ;; This function uses a non-reentrant model
  9716 ;;
  9717                           
  9718                           
  9719                           ;psect for function ___ftadd
  9720  0AAA                     ___ftadd:	
  9721                           
  9722                           ;incstack = 0
  9723                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9724  0AAA  0020               	movlb	0	; select bank0
  9725  0AAB  0854               	movf	___ftadd@f1,w
  9726  0AAC  00DA               	movwf	??___ftadd
  9727  0AAD  0855               	movf	___ftadd@f1+1,w
  9728  0AAE  00DB               	movwf	??___ftadd+1
  9729  0AAF  0856               	movf	___ftadd@f1+2,w
  9730  0AB0  00DC               	movwf	??___ftadd+2
  9731  0AB1  1003               	clrc
  9732  0AB2  0D5B               	rlf	??___ftadd+1,w
  9733  0AB3  0D5C               	rlf	??___ftadd+2,w
  9734  0AB4  00DD               	movwf	??___ftadd+3
  9735  0AB5  085D               	movf	??___ftadd+3,w
  9736  0AB6  00E0               	movwf	___ftadd@exp1
  9737  0AB7  0857               	movf	___ftadd@f2,w
  9738  0AB8  00DA               	movwf	??___ftadd
  9739  0AB9  0858               	movf	___ftadd@f2+1,w
  9740  0ABA  00DB               	movwf	??___ftadd+1
  9741  0ABB  0859               	movf	___ftadd@f2+2,w
  9742  0ABC  00DC               	movwf	??___ftadd+2
  9743  0ABD  1003               	clrc
  9744  0ABE  0D5B               	rlf	??___ftadd+1,w
  9745  0ABF  0D5C               	rlf	??___ftadd+2,w
  9746  0AC0  00DD               	movwf	??___ftadd+3
  9747  0AC1  085D               	movf	??___ftadd+3,w
  9748  0AC2  00DF               	movwf	___ftadd@exp2
  9749  0AC3  0860               	movf	___ftadd@exp1,w
  9750  0AC4  1903               	btfsc	3,2
  9751  0AC5  2AD2               	goto	l2286
  9752  0AC6  085F               	movf	___ftadd@exp2,w
  9753  0AC7  0260               	subwf	___ftadd@exp1,w
  9754  0AC8  1803               	skipnc
  9755  0AC9  2AD9               	goto	l2290
  9756  0ACA  0360               	decf	___ftadd@exp1,w
  9757  0ACB  3AFF               	xorlw	255
  9758  0ACC  075F               	addwf	___ftadd@exp2,w
  9759  0ACD  00DA               	movwf	??___ftadd
  9760  0ACE  3019               	movlw	25
  9761  0ACF  025A               	subwf	??___ftadd,w
  9762  0AD0  1C03               	skipc
  9763  0AD1  2AD9               	goto	l2290
  9764  0AD2                     l2286:	
  9765  0AD2  0857               	movf	___ftadd@f2,w
  9766  0AD3  00D4               	movwf	?___ftadd
  9767  0AD4  0858               	movf	___ftadd@f2+1,w
  9768  0AD5  00D5               	movwf	?___ftadd+1
  9769  0AD6  0859               	movf	___ftadd@f2+2,w
  9770  0AD7  00D6               	movwf	?___ftadd+2
  9771  0AD8  0008               	return
  9772  0AD9                     l2290:	
  9773  0AD9  085F               	movf	___ftadd@exp2,w
  9774  0ADA  1903               	btfsc	3,2
  9775  0ADB  0008               	return
  9776  0ADC  0860               	movf	___ftadd@exp1,w
  9777  0ADD  025F               	subwf	___ftadd@exp2,w
  9778  0ADE  1803               	skipnc
  9779  0ADF  2AE8               	goto	l2296
  9780  0AE0  035F               	decf	___ftadd@exp2,w
  9781  0AE1  3AFF               	xorlw	255
  9782  0AE2  0760               	addwf	___ftadd@exp1,w
  9783  0AE3  00DA               	movwf	??___ftadd
  9784  0AE4  3019               	movlw	25
  9785  0AE5  025A               	subwf	??___ftadd,w
  9786  0AE6  1803               	btfsc	3,0
  9787  0AE7  0008               	return
  9788  0AE8                     l2296:	
  9789  0AE8  3006               	movlw	6
  9790  0AE9  00DA               	movwf	??___ftadd
  9791  0AEA  085A               	movf	??___ftadd,w
  9792  0AEB  00DE               	movwf	___ftadd@sign
  9793  0AEC  1BD6               	btfsc	___ftadd@f1+2,7
  9794  0AED  17DE               	bsf	___ftadd@sign,7
  9795  0AEE  1BD9               	btfsc	___ftadd@f2+2,7
  9796  0AEF  175E               	bsf	___ftadd@sign,6
  9797  0AF0  17D5               	bsf	___ftadd@f1+1,7
  9798  0AF1  30FF               	movlw	255
  9799  0AF2  05D4               	andwf	___ftadd@f1,f
  9800  0AF3  30FF               	movlw	255
  9801  0AF4  05D5               	andwf	___ftadd@f1+1,f
  9802  0AF5  3000               	movlw	0
  9803  0AF6  05D6               	andwf	___ftadd@f1+2,f
  9804  0AF7  17D8               	bsf	___ftadd@f2+1,7
  9805  0AF8  30FF               	movlw	255
  9806  0AF9  05D7               	andwf	___ftadd@f2,f
  9807  0AFA  30FF               	movlw	255
  9808  0AFB  05D8               	andwf	___ftadd@f2+1,f
  9809  0AFC  3000               	movlw	0
  9810  0AFD  05D9               	andwf	___ftadd@f2+2,f
  9811  0AFE  085F               	movf	___ftadd@exp2,w
  9812  0AFF  0260               	subwf	___ftadd@exp1,w
  9813  0B00  1803               	skipnc
  9814  0B01  2B24               	goto	l2318
  9815  0B02                     l2308:	
  9816  0B02  3001               	movlw	1
  9817  0B03                     u2695:	
  9818  0B03  35D7               	lslf	___ftadd@f2,f
  9819  0B04  0DD8               	rlf	___ftadd@f2+1,f
  9820  0B05  0DD9               	rlf	___ftadd@f2+2,f
  9821  0B06  0B89               	decfsz	9,f
  9822  0B07  2B03               	goto	u2695
  9823  0B08  3001               	movlw	1
  9824  0B09  02DF               	subwf	___ftadd@exp2,f
  9825  0B0A  085F               	movf	___ftadd@exp2,w
  9826  0B0B  0660               	xorwf	___ftadd@exp1,w
  9827  0B0C  1903               	skipnz
  9828  0B0D  2B1F               	goto	l2316
  9829  0B0E  3001               	movlw	1
  9830  0B0F  02DE               	subwf	___ftadd@sign,f
  9831  0B10  085E               	movf	___ftadd@sign,w
  9832  0B11  3907               	andlw	7
  9833  0B12  1903               	btfsc	3,2
  9834  0B13  2B1F               	goto	l2316
  9835  0B14  2B02               	goto	l2308
  9836  0B15                     l2314:	
  9837  0B15  3001               	movlw	1
  9838  0B16                     u2725:	
  9839  0B16  36D6               	lsrf	___ftadd@f1+2,f
  9840  0B17  0CD5               	rrf	___ftadd@f1+1,f
  9841  0B18  0CD4               	rrf	___ftadd@f1,f
  9842  0B19  0B89               	decfsz	9,f
  9843  0B1A  2B16               	goto	u2725
  9844  0B1B  3001               	movlw	1
  9845  0B1C  00DA               	movwf	??___ftadd
  9846  0B1D  085A               	movf	??___ftadd,w
  9847  0B1E  07E0               	addwf	___ftadd@exp1,f
  9848  0B1F                     l2316:	
  9849  0B1F  0860               	movf	___ftadd@exp1,w
  9850  0B20  065F               	xorwf	___ftadd@exp2,w
  9851  0B21  1903               	btfsc	3,2
  9852  0B22  2B49               	goto	l717
  9853  0B23  2B15               	goto	l2314
  9854  0B24                     l2318:	
  9855  0B24  0860               	movf	___ftadd@exp1,w
  9856  0B25  025F               	subwf	___ftadd@exp2,w
  9857  0B26  1803               	skipnc
  9858  0B27  2B49               	goto	l717
  9859  0B28                     l2320:	
  9860  0B28  3001               	movlw	1
  9861  0B29                     u2755:	
  9862  0B29  35D4               	lslf	___ftadd@f1,f
  9863  0B2A  0DD5               	rlf	___ftadd@f1+1,f
  9864  0B2B  0DD6               	rlf	___ftadd@f1+2,f
  9865  0B2C  0B89               	decfsz	9,f
  9866  0B2D  2B29               	goto	u2755
  9867  0B2E  3001               	movlw	1
  9868  0B2F  02E0               	subwf	___ftadd@exp1,f
  9869  0B30  085F               	movf	___ftadd@exp2,w
  9870  0B31  0660               	xorwf	___ftadd@exp1,w
  9871  0B32  1903               	skipnz
  9872  0B33  2B45               	goto	l2328
  9873  0B34  3001               	movlw	1
  9874  0B35  02DE               	subwf	___ftadd@sign,f
  9875  0B36  085E               	movf	___ftadd@sign,w
  9876  0B37  3907               	andlw	7
  9877  0B38  1903               	btfsc	3,2
  9878  0B39  2B45               	goto	l2328
  9879  0B3A  2B28               	goto	l2320
  9880  0B3B                     l2326:	
  9881  0B3B  3001               	movlw	1
  9882  0B3C                     u2785:	
  9883  0B3C  36D9               	lsrf	___ftadd@f2+2,f
  9884  0B3D  0CD8               	rrf	___ftadd@f2+1,f
  9885  0B3E  0CD7               	rrf	___ftadd@f2,f
  9886  0B3F  0B89               	decfsz	9,f
  9887  0B40  2B3C               	goto	u2785
  9888  0B41  3001               	movlw	1
  9889  0B42  00DA               	movwf	??___ftadd
  9890  0B43  085A               	movf	??___ftadd,w
  9891  0B44  07DF               	addwf	___ftadd@exp2,f
  9892  0B45                     l2328:	
  9893  0B45  0860               	movf	___ftadd@exp1,w
  9894  0B46  065F               	xorwf	___ftadd@exp2,w
  9895  0B47  1D03               	skipz
  9896  0B48  2B3B               	goto	l2326
  9897  0B49                     l717:	
  9898  0B49  1FDE               	btfss	___ftadd@sign,7
  9899  0B4A  2B5B               	goto	l2332
  9900  0B4B  30FF               	movlw	255
  9901  0B4C  06D4               	xorwf	___ftadd@f1,f
  9902  0B4D  30FF               	movlw	255
  9903  0B4E  06D5               	xorwf	___ftadd@f1+1,f
  9904  0B4F  30FF               	movlw	255
  9905  0B50  06D6               	xorwf	___ftadd@f1+2,f
  9906  0B51  3001               	movlw	1
  9907  0B52  07D4               	addwf	___ftadd@f1,f
  9908  0B53  3000               	movlw	0
  9909  0B54  1803               	skipnc
  9910  0B55  3001               	movlw	1
  9911  0B56  07D5               	addwf	___ftadd@f1+1,f
  9912  0B57  3000               	movlw	0
  9913  0B58  1803               	skipnc
  9914  0B59  3001               	movlw	1
  9915  0B5A  07D6               	addwf	___ftadd@f1+2,f
  9916  0B5B                     l2332:	
  9917  0B5B  1F5E               	btfss	___ftadd@sign,6
  9918  0B5C  2B6D               	goto	l2336
  9919  0B5D  30FF               	movlw	255
  9920  0B5E  06D7               	xorwf	___ftadd@f2,f
  9921  0B5F  30FF               	movlw	255
  9922  0B60  06D8               	xorwf	___ftadd@f2+1,f
  9923  0B61  30FF               	movlw	255
  9924  0B62  06D9               	xorwf	___ftadd@f2+2,f
  9925  0B63  3001               	movlw	1
  9926  0B64  07D7               	addwf	___ftadd@f2,f
  9927  0B65  3000               	movlw	0
  9928  0B66  1803               	skipnc
  9929  0B67  3001               	movlw	1
  9930  0B68  07D8               	addwf	___ftadd@f2+1,f
  9931  0B69  3000               	movlw	0
  9932  0B6A  1803               	skipnc
  9933  0B6B  3001               	movlw	1
  9934  0B6C  07D9               	addwf	___ftadd@f2+2,f
  9935  0B6D                     l2336:	
  9936  0B6D  01DE               	clrf	___ftadd@sign
  9937  0B6E  0854               	movf	___ftadd@f1,w
  9938  0B6F  07D7               	addwf	___ftadd@f2,f
  9939  0B70  0855               	movf	___ftadd@f1+1,w
  9940  0B71  3DD8               	addwfc	___ftadd@f2+1,f
  9941  0B72  0856               	movf	___ftadd@f1+2,w
  9942  0B73  3DD9               	addwfc	___ftadd@f2+2,f
  9943  0B74  1FD9               	btfss	___ftadd@f2+2,7
  9944  0B75  2B88               	goto	l2346
  9945  0B76  30FF               	movlw	255
  9946  0B77  06D7               	xorwf	___ftadd@f2,f
  9947  0B78  30FF               	movlw	255
  9948  0B79  06D8               	xorwf	___ftadd@f2+1,f
  9949  0B7A  30FF               	movlw	255
  9950  0B7B  06D9               	xorwf	___ftadd@f2+2,f
  9951  0B7C  3001               	movlw	1
  9952  0B7D  07D7               	addwf	___ftadd@f2,f
  9953  0B7E  3000               	movlw	0
  9954  0B7F  1803               	skipnc
  9955  0B80  3001               	movlw	1
  9956  0B81  07D8               	addwf	___ftadd@f2+1,f
  9957  0B82  3000               	movlw	0
  9958  0B83  1803               	skipnc
  9959  0B84  3001               	movlw	1
  9960  0B85  07D9               	addwf	___ftadd@f2+2,f
  9961  0B86  01DE               	clrf	___ftadd@sign
  9962  0B87  0ADE               	incf	___ftadd@sign,f
  9963  0B88                     l2346:	
  9964  0B88  0857               	movf	___ftadd@f2,w
  9965  0B89  00A0               	movwf	___ftpack@arg
  9966  0B8A  0858               	movf	___ftadd@f2+1,w
  9967  0B8B  00A1               	movwf	___ftpack@arg+1
  9968  0B8C  0859               	movf	___ftadd@f2+2,w
  9969  0B8D  00A2               	movwf	___ftpack@arg+2
  9970  0B8E  0860               	movf	___ftadd@exp1,w
  9971  0B8F  00DA               	movwf	??___ftadd
  9972  0B90  085A               	movf	??___ftadd,w
  9973  0B91  00A3               	movwf	___ftpack@exp
  9974  0B92  085E               	movf	___ftadd@sign,w
  9975  0B93  00DB               	movwf	??___ftadd+1
  9976  0B94  085B               	movf	??___ftadd+1,w
  9977  0B95  00A4               	movwf	___ftpack@sign
  9978  0B96  3197  2714         	fcall	___ftpack
  9979  0B98  0020               	movlb	0	; select bank0
  9980  0B99  0820               	movf	?___ftpack,w
  9981  0B9A  00D4               	movwf	?___ftadd
  9982  0B9B  0821               	movf	?___ftpack+1,w
  9983  0B9C  00D5               	movwf	?___ftadd+1
  9984  0B9D  0822               	movf	?___ftpack+2,w
  9985  0B9E  00D6               	movwf	?___ftadd+2
  9986  0B9F  0008               	return
  9987  0BA0                     __end_of___ftadd:	
  9988                           
  9989                           	psect	text48
  9990  1714                     __ptext48:	
  9991 ;; *************** function ___ftpack *****************
  9992 ;; Defined at:
  9993 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
  9994 ;; Parameters:    Size  Location     Type
  9995 ;;  arg             3    0[BANK0 ] unsigned um
  9996 ;;  exp             1    3[BANK0 ] unsigned char 
  9997 ;;  sign            1    4[BANK0 ] unsigned char 
  9998 ;; Auto vars:     Size  Location     Type
  9999 ;;		None
 10000 ;; Return value:  Size  Location     Type
 10001 ;;                  3    0[BANK0 ] float 
 10002 ;; Registers used:
 10003 ;;		wreg, status,2, status,0
 10004 ;; Tracked objects:
 10005 ;;		On entry : 0/0
 10006 ;;		On exit  : 0/0
 10007 ;;		Unchanged: 0/0
 10008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10009 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10011 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10012 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10013 ;;Total ram usage:        8 bytes
 10014 ;; Hardware stack levels used:    1
 10015 ;; Hardware stack levels required when called:    4
 10016 ;; This function calls:
 10017 ;;		Nothing
 10018 ;; This function is called by:
 10019 ;;		___awtoft
 10020 ;;		___ftadd
 10021 ;;		___ftdiv
 10022 ;;		___ftmul
 10023 ;;		___lltoft
 10024 ;; This function uses a non-reentrant model
 10025 ;;
 10026                           
 10027                           
 10028                           ;psect for function ___ftpack
 10029  1714                     ___ftpack:	
 10030                           
 10031                           ;incstack = 0
 10032                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 10033  1714  0020               	movlb	0	; select bank0
 10034  1715  0823               	movf	___ftpack@exp,w
 10035  1716  1903               	btfsc	3,2
 10036  1717  2F1D               	goto	l2146
 10037  1718  0822               	movf	___ftpack@arg+2,w
 10038  1719  0421               	iorwf	___ftpack@arg+1,w
 10039  171A  0420               	iorwf	___ftpack@arg,w
 10040  171B  1D03               	skipz
 10041  171C  2F2E               	goto	l2152
 10042  171D                     l2146:	
 10043  171D  3000               	movlw	0
 10044  171E  00A0               	movwf	?___ftpack
 10045  171F  3000               	movlw	0
 10046  1720  00A1               	movwf	?___ftpack+1
 10047  1721  3000               	movlw	0
 10048  1722  00A2               	movwf	?___ftpack+2
 10049  1723  0008               	return
 10050  1724                     l2150:	
 10051  1724  3001               	movlw	1
 10052  1725  00A5               	movwf	??___ftpack
 10053  1726  0825               	movf	??___ftpack,w
 10054  1727  07A3               	addwf	___ftpack@exp,f
 10055  1728  3001               	movlw	1
 10056  1729                     u2265:	
 10057  1729  36A2               	lsrf	___ftpack@arg+2,f
 10058  172A  0CA1               	rrf	___ftpack@arg+1,f
 10059  172B  0CA0               	rrf	___ftpack@arg,f
 10060  172C  0B89               	decfsz	9,f
 10061  172D  2F29               	goto	u2265
 10062  172E                     l2152:	
 10063  172E  30FE               	movlw	254
 10064  172F  0522               	andwf	___ftpack@arg+2,w
 10065  1730  1903               	btfsc	3,2
 10066  1731  2F47               	goto	l686
 10067  1732  2F24               	goto	l2150
 10068  1733                     l2154:	
 10069  1733  3001               	movlw	1
 10070  1734  00A5               	movwf	??___ftpack
 10071  1735  0825               	movf	??___ftpack,w
 10072  1736  07A3               	addwf	___ftpack@exp,f
 10073  1737  3001               	movlw	1
 10074  1738  07A0               	addwf	___ftpack@arg,f
 10075  1739  3000               	movlw	0
 10076  173A  1803               	skipnc
 10077  173B  3001               	movlw	1
 10078  173C  07A1               	addwf	___ftpack@arg+1,f
 10079  173D  3000               	movlw	0
 10080  173E  1803               	skipnc
 10081  173F  3001               	movlw	1
 10082  1740  07A2               	addwf	___ftpack@arg+2,f
 10083  1741  3001               	movlw	1
 10084  1742                     u2285:	
 10085  1742  36A2               	lsrf	___ftpack@arg+2,f
 10086  1743  0CA1               	rrf	___ftpack@arg+1,f
 10087  1744  0CA0               	rrf	___ftpack@arg,f
 10088  1745  0B89               	decfsz	9,f
 10089  1746  2F42               	goto	u2285
 10090  1747                     l686:	
 10091  1747  30FF               	movlw	255
 10092  1748  0522               	andwf	___ftpack@arg+2,w
 10093  1749  1903               	btfsc	3,2
 10094  174A  2F54               	goto	l2162
 10095  174B  2F33               	goto	l2154
 10096  174C                     l2160:	
 10097  174C  3001               	movlw	1
 10098  174D  02A3               	subwf	___ftpack@exp,f
 10099  174E  3001               	movlw	1
 10100  174F                     u2305:	
 10101  174F  35A0               	lslf	___ftpack@arg,f
 10102  1750  0DA1               	rlf	___ftpack@arg+1,f
 10103  1751  0DA2               	rlf	___ftpack@arg+2,f
 10104  1752  0B89               	decfsz	9,f
 10105  1753  2F4F               	goto	u2305
 10106  1754                     l2162:	
 10107  1754  1BA1               	btfsc	___ftpack@arg+1,7
 10108  1755  2F5A               	goto	l693
 10109  1756  3002               	movlw	2
 10110  1757  0223               	subwf	___ftpack@exp,w
 10111  1758  1803               	skipnc
 10112  1759  2F4C               	goto	l2160
 10113  175A                     l693:	
 10114  175A  1823               	btfsc	___ftpack@exp,0
 10115  175B  2F62               	goto	l694
 10116  175C  30FF               	movlw	255
 10117  175D  05A0               	andwf	___ftpack@arg,f
 10118  175E  307F               	movlw	127
 10119  175F  05A1               	andwf	___ftpack@arg+1,f
 10120  1760  30FF               	movlw	255
 10121  1761  05A2               	andwf	___ftpack@arg+2,f
 10122  1762                     l694:	
 10123  1762  1003               	clrc
 10124  1763  0CA3               	rrf	___ftpack@exp,f
 10125  1764  0823               	movf	___ftpack@exp,w
 10126  1765  00A5               	movwf	??___ftpack
 10127  1766  01A6               	clrf	??___ftpack+1
 10128  1767  01A7               	clrf	??___ftpack+2
 10129  1768  3010               	movlw	16
 10130  1769                     u2345:	
 10131  1769  35A5               	lslf	??___ftpack,f
 10132  176A  0DA6               	rlf	??___ftpack+1,f
 10133  176B  0DA7               	rlf	??___ftpack+2,f
 10134  176C  0B89               	decfsz	9,f
 10135  176D  2F69               	goto	u2345
 10136  176E  0825               	movf	??___ftpack,w
 10137  176F  04A0               	iorwf	___ftpack@arg,f
 10138  1770  0826               	movf	??___ftpack+1,w
 10139  1771  04A1               	iorwf	___ftpack@arg+1,f
 10140  1772  0827               	movf	??___ftpack+2,w
 10141  1773  04A2               	iorwf	___ftpack@arg+2,f
 10142  1774  0824               	movf	___ftpack@sign,w
 10143  1775  1903               	btfsc	3,2
 10144  1776  0008               	return
 10145  1777  17A2               	bsf	___ftpack@arg+2,7
 10146  1778  0008               	return
 10147  1779                     __end_of___ftpack:	
 10148                           
 10149                           	psect	text49
 10150  127C                     __ptext49:	
 10151 ;; *************** function ___ftneg *****************
 10152 ;; Defined at:
 10153 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 10154 ;; Parameters:    Size  Location     Type
 10155 ;;  f1              3    0[BANK0 ] float 
 10156 ;; Auto vars:     Size  Location     Type
 10157 ;;		None
 10158 ;; Return value:  Size  Location     Type
 10159 ;;                  3    0[BANK0 ] float 
 10160 ;; Registers used:
 10161 ;;		wreg
 10162 ;; Tracked objects:
 10163 ;;		On entry : 0/0
 10164 ;;		On exit  : 0/0
 10165 ;;		Unchanged: 0/0
 10166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10167 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10170 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10171 ;;Total ram usage:        3 bytes
 10172 ;; Hardware stack levels used:    1
 10173 ;; Hardware stack levels required when called:    4
 10174 ;; This function calls:
 10175 ;;		Nothing
 10176 ;; This function is called by:
 10177 ;;		_printf
 10178 ;; This function uses a non-reentrant model
 10179 ;;
 10180                           
 10181                           
 10182                           ;psect for function ___ftneg
 10183  127C                     ___ftneg:	
 10184                           
 10185                           ;incstack = 0
 10186                           ; Regs used in ___ftneg: [wreg]
 10187  127C  0020               	movlb	0	; select bank0
 10188  127D  0822               	movf	___ftneg@f1+2,w
 10189  127E  0421               	iorwf	___ftneg@f1+1,w
 10190  127F  0420               	iorwf	___ftneg@f1,w
 10191  1280  1903               	skipnz
 10192  1281  0008               	return
 10193  1282  3080               	movlw	128
 10194  1283  06A2               	xorwf	___ftneg@f1+2,f
 10195  1284  0008               	return
 10196  1285                     __end_of___ftneg:	
 10197                           
 10198                           	psect	text50
 10199  14CA                     __ptext50:	
 10200 ;; *************** function ___ftge *****************
 10201 ;; Defined at:
 10202 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 10203 ;; Parameters:    Size  Location     Type
 10204 ;;  ff1             3    0[BANK0 ] float 
 10205 ;;  ff2             3    3[BANK0 ] float 
 10206 ;; Auto vars:     Size  Location     Type
 10207 ;;		None
 10208 ;; Return value:  Size  Location     Type
 10209 ;;		None               void
 10210 ;; Registers used:
 10211 ;;		wreg, status,2, status,0
 10212 ;; Tracked objects:
 10213 ;;		On entry : 0/0
 10214 ;;		On exit  : 0/0
 10215 ;;		Unchanged: 0/0
 10216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10217 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10219 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10220 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10221 ;;Total ram usage:        9 bytes
 10222 ;; Hardware stack levels used:    1
 10223 ;; Hardware stack levels required when called:    4
 10224 ;; This function calls:
 10225 ;;		Nothing
 10226 ;; This function is called by:
 10227 ;;		_RadioOperation
 10228 ;;		_printf
 10229 ;; This function uses a non-reentrant model
 10230 ;;
 10231                           
 10232                           
 10233                           ;psect for function ___ftge
 10234  14CA                     ___ftge:	
 10235                           
 10236                           ;incstack = 0
 10237                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 10238  14CA  0020               	movlb	0	; select bank0
 10239  14CB  1FA2               	btfss	___ftge@ff1+2,7
 10240  14CC  2CE1               	goto	l2574
 10241  14CD  0920               	comf	___ftge@ff1,w
 10242  14CE  00A6               	movwf	??___ftge
 10243  14CF  0921               	comf	___ftge@ff1+1,w
 10244  14D0  00A7               	movwf	??___ftge+1
 10245  14D1  0922               	comf	___ftge@ff1+2,w
 10246  14D2  00A8               	movwf	??___ftge+2
 10247  14D3  0AA6               	incf	??___ftge,f
 10248  14D4  1903               	skipnz
 10249  14D5  0AA7               	incf	??___ftge+1,f
 10250  14D6  1903               	skipnz
 10251  14D7  0AA8               	incf	??___ftge+2,f
 10252  14D8  3000               	movlw	0
 10253  14D9  0726               	addwf	??___ftge,w
 10254  14DA  00A0               	movwf	___ftge@ff1
 10255  14DB  3000               	movlw	0
 10256  14DC  3D27               	addwfc	??___ftge+1,w
 10257  14DD  00A1               	movwf	___ftge@ff1+1
 10258  14DE  3080               	movlw	128
 10259  14DF  3D28               	addwfc	??___ftge+2,w
 10260  14E0  00A2               	movwf	___ftge@ff1+2
 10261  14E1                     l2574:	
 10262  14E1  1FA5               	btfss	___ftge@ff2+2,7
 10263  14E2  2CF7               	goto	l2578
 10264  14E3  0923               	comf	___ftge@ff2,w
 10265  14E4  00A6               	movwf	??___ftge
 10266  14E5  0924               	comf	___ftge@ff2+1,w
 10267  14E6  00A7               	movwf	??___ftge+1
 10268  14E7  0925               	comf	___ftge@ff2+2,w
 10269  14E8  00A8               	movwf	??___ftge+2
 10270  14E9  0AA6               	incf	??___ftge,f
 10271  14EA  1903               	skipnz
 10272  14EB  0AA7               	incf	??___ftge+1,f
 10273  14EC  1903               	skipnz
 10274  14ED  0AA8               	incf	??___ftge+2,f
 10275  14EE  3000               	movlw	0
 10276  14EF  0726               	addwf	??___ftge,w
 10277  14F0  00A3               	movwf	___ftge@ff2
 10278  14F1  3000               	movlw	0
 10279  14F2  3D27               	addwfc	??___ftge+1,w
 10280  14F3  00A4               	movwf	___ftge@ff2+1
 10281  14F4  3080               	movlw	128
 10282  14F5  3D28               	addwfc	??___ftge+2,w
 10283  14F6  00A5               	movwf	___ftge@ff2+2
 10284  14F7                     l2578:	
 10285  14F7  3080               	movlw	128
 10286  14F8  06A2               	xorwf	___ftge@ff1+2,f
 10287  14F9  3080               	movlw	128
 10288  14FA  06A5               	xorwf	___ftge@ff2+2,f
 10289  14FB  0825               	movf	___ftge@ff2+2,w
 10290  14FC  0222               	subwf	___ftge@ff1+2,w
 10291  14FD  1D03               	skipz
 10292  14FE  0008               	return
 10293  14FF  0824               	movf	___ftge@ff2+1,w
 10294  1500  0221               	subwf	___ftge@ff1+1,w
 10295  1501  1D03               	skipz
 10296  1502  0008               	return
 10297  1503  0823               	movf	___ftge@ff2,w
 10298  1504  0220               	subwf	___ftge@ff1,w
 10299  1505  0008               	return
 10300  1506                     __end_of___ftge:	
 10301                           
 10302                           	psect	text51
 10303  13E3                     __ptext51:	
 10304 ;; *************** function _Delay *****************
 10305 ;; Defined at:
 10306 ;;		line 46 in file "Function.c"
 10307 ;; Parameters:    Size  Location     Type
 10308 ;;  wait            2    0[BANK0 ] int 
 10309 ;; Auto vars:     Size  Location     Type
 10310 ;;  x               2    3[BANK0 ] int 
 10311 ;; Return value:  Size  Location     Type
 10312 ;;                  1    wreg      void 
 10313 ;; Registers used:
 10314 ;;		wreg, status,2
 10315 ;; Tracked objects:
 10316 ;;		On entry : 0/0
 10317 ;;		On exit  : 0/0
 10318 ;;		Unchanged: 0/0
 10319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10320 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10321 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10322 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10323 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10324 ;;Total ram usage:        5 bytes
 10325 ;; Hardware stack levels used:    1
 10326 ;; Hardware stack levels required when called:    4
 10327 ;; This function calls:
 10328 ;;		Nothing
 10329 ;; This function is called by:
 10330 ;;		_main
 10331 ;;		_SR_FRSStart
 10332 ;; This function uses a non-reentrant model
 10333 ;;
 10334                           
 10335                           
 10336                           ;psect for function _Delay
 10337  13E3                     _Delay:	
 10338                           
 10339                           ;Function.c: 47: int x;
 10340                           ;Function.c: 48: for (x = 0; x < wait; x++) {
 10341                           
 10342                           ;incstack = 0
 10343                           ; Regs used in _Delay: [wreg+status,2]
 10344  13E3  0020               	movlb	0	; select bank0
 10345  13E4  01A3               	clrf	Delay@x
 10346  13E5  01A4               	clrf	Delay@x+1
 10347  13E6                     l64:	
 10348  13E6  0824               	movf	Delay@x+1,w
 10349  13E7  3A80               	xorlw	128
 10350  13E8  00A2               	movwf	??_Delay
 10351  13E9  0821               	movf	Delay@wait+1,w
 10352  13EA  3A80               	xorlw	128
 10353  13EB  0222               	subwf	??_Delay,w
 10354  13EC  1D03               	skipz
 10355  13ED  2BF0               	goto	u3895
 10356  13EE  0820               	movf	Delay@wait,w
 10357  13EF  0223               	subwf	Delay@x,w
 10358  13F0                     u3895:	
 10359  13F0  1803               	btfsc	3,0
 10360  13F1  0008               	return
 10361                           
 10362                           ;Function.c: 49: _delay((unsigned long)((1)*(4000000/4000.0)));
 10363  13F2  30F9               	movlw	249
 10364  13F3  0020               	movlb	0	; select bank0
 10365  13F4  00A2               	movwf	??_Delay
 10366  13F5                     u4417:	
 10367  13F5  0000               	nop
 10368  13F6  0BA2               	decfsz	??_Delay,f
 10369  13F7  2BF5               	goto	u4417
 10370  13F8  3200               	nop2	;nop
 10371  13F9  0000               	nop
 10372  13FA  3001               	movlw	1
 10373  13FB  0020               	movlb	0	; select bank0
 10374  13FC  07A3               	addwf	Delay@x,f
 10375  13FD  3000               	movlw	0
 10376  13FE  3DA4               	addwfc	Delay@x+1,f
 10377  13FF  2BE6               	goto	l64
 10378  1400                     __end_of_Delay:	
 10379                           
 10380                           	psect	text52
 10381  125B                     __ptext52:	
 10382 ;; *************** function _LEDOff *****************
 10383 ;; Defined at:
 10384 ;;		line 102 in file "Function.c"
 10385 ;; Parameters:    Size  Location     Type
 10386 ;;		None
 10387 ;; Auto vars:     Size  Location     Type
 10388 ;;		None
 10389 ;; Return value:  Size  Location     Type
 10390 ;;                  1    wreg      void 
 10391 ;; Registers used:
 10392 ;;		None
 10393 ;; Tracked objects:
 10394 ;;		On entry : 0/0
 10395 ;;		On exit  : 0/0
 10396 ;;		Unchanged: 0/0
 10397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10402 ;;Total ram usage:        0 bytes
 10403 ;; Hardware stack levels used:    1
 10404 ;; Hardware stack levels required when called:    4
 10405 ;; This function calls:
 10406 ;;		Nothing
 10407 ;; This function is called by:
 10408 ;;		_main
 10409 ;; This function uses a non-reentrant model
 10410 ;;
 10411                           
 10412                           
 10413                           ;psect for function _LEDOff
 10414  125B                     _LEDOff:	
 10415                           
 10416                           ;Function.c: 103: PORTCbits.RC3 = 1;
 10417                           
 10418                           ;incstack = 0
 10419                           ; Regs used in _LEDOff: []
 10420  125B  0020               	movlb	0	; select bank0
 10421  125C  158E               	bsf	14,3	;volatile
 10422                           
 10423                           ;Function.c: 104: PORTCbits.RC4 = 1;
 10424  125D  160E               	bsf	14,4	;volatile
 10425                           
 10426                           ;Function.c: 105: PORTCbits.RC5 = 1;
 10427  125E  168E               	bsf	14,5	;volatile
 10428  125F  0008               	return
 10429  1260                     __end_of_LEDOff:	
 10430                           
 10431                           	psect	intentry
 10432  0004                     __pintentry:	
 10433 ;; *************** function _INTERRUPT_InterruptManager *****************
 10434 ;; Defined at:
 10435 ;;		line 64 in file "Function.c"
 10436 ;; Parameters:    Size  Location     Type
 10437 ;;		None
 10438 ;; Auto vars:     Size  Location     Type
 10439 ;;		None
 10440 ;; Return value:  Size  Location     Type
 10441 ;;                  1    wreg      void 
 10442 ;; Registers used:
 10443 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10444 ;; Tracked objects:
 10445 ;;		On entry : 0/0
 10446 ;;		On exit  : 0/0
 10447 ;;		Unchanged: 0/0
 10448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10451 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10452 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10453 ;;Total ram usage:        1 bytes
 10454 ;; Hardware stack levels used:    1
 10455 ;; Hardware stack levels required when called:    3
 10456 ;; This function calls:
 10457 ;;		_EUSART1_Receive_ISR
 10458 ;;		_EUSART1_Transmit_ISR
 10459 ;;		_TMR2_ISR
 10460 ;; This function is called by:
 10461 ;;		Interrupt level 1
 10462 ;; This function uses a non-reentrant model
 10463 ;;
 10464                           
 10465  0004                     _INTERRUPT_InterruptManager:	
 10466                           
 10467                           ;incstack = 0
 10468                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10469  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 10470  0005  3180               	pagesel	$
 10471  0006  0020               	movlb	0	; select bank0
 10472  0007  087F               	movf	127,w
 10473  0008  00FD               	movwf	??_INTERRUPT_InterruptManager
 10474                           
 10475                           ;Function.c: 66: if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
 10476  0009  0021               	movlb	1	; select bank1
 10477  000A  1C91               	btfss	17,1	;volatile
 10478  000B  2812               	goto	i1l3248
 10479  000C  0020               	movlb	0	; select bank0
 10480  000D  1C91               	btfss	17,1	;volatile
 10481  000E  2812               	goto	i1l3248
 10482                           
 10483                           ;Function.c: 67: {
 10484                           ;Function.c: 68: TMR2_ISR();
 10485  000F  3192  226C  3180   	fcall	_TMR2_ISR
 10486  0012                     i1l3248:	
 10487                           
 10488                           ;Function.c: 69: }
 10489                           ;Function.c: 70: if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
 10490  0012  0021               	movlb	1	; select bank1
 10491  0013  1E91               	btfss	17,5	;volatile
 10492  0014  281B               	goto	i1l3254
 10493  0015  0020               	movlb	0	; select bank0
 10494  0016  1E91               	btfss	17,5	;volatile
 10495  0017  281B               	goto	i1l3254
 10496                           
 10497                           ;Function.c: 71: {
 10498                           ;Function.c: 72: EUSART1_Receive_ISR();
 10499  0018  3192  22D0  3180   	fcall	_EUSART1_Receive_ISR
 10500  001B                     i1l3254:	
 10501                           
 10502                           ;Function.c: 73: }
 10503                           ;Function.c: 74: if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
 10504  001B  0021               	movlb	1	; select bank1
 10505  001C  1E11               	btfss	17,4	;volatile
 10506  001D  2823               	goto	i1l77
 10507  001E  0020               	movlb	0	; select bank0
 10508  001F  1E11               	btfss	17,4	;volatile
 10509  0020  2823               	goto	i1l77
 10510                           
 10511                           ;Function.c: 75: {
 10512                           ;Function.c: 76: EUSART1_Transmit_ISR();
 10513  0021  3193  2375         	fcall	_EUSART1_Transmit_ISR
 10514  0023                     i1l77:	
 10515                           ;Function.c: 78: else
 10516                           ;Function.c: 79: {
 10517                           
 10518                           ;Function.c: 77: }
 10519                           
 10520  0023  087D               	movf	??_INTERRUPT_InterruptManager,w
 10521  0024  0020               	movlb	0	; select bank0
 10522  0025  00FF               	movwf	127
 10523  0026  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 10524  0027  0009               	retfie
 10525  0028                     __end_of_INTERRUPT_InterruptManager:	
 10526                           
 10527                           	psect	text54
 10528  126C                     __ptext54:	
 10529 ;; *************** function _TMR2_ISR *****************
 10530 ;; Defined at:
 10531 ;;		line 48 in file "Timer.c"
 10532 ;; Parameters:    Size  Location     Type
 10533 ;;		None
 10534 ;; Auto vars:     Size  Location     Type
 10535 ;;		None
 10536 ;; Return value:  Size  Location     Type
 10537 ;;                  1    wreg      void 
 10538 ;; Registers used:
 10539 ;;		wreg
 10540 ;; Tracked objects:
 10541 ;;		On entry : 0/0
 10542 ;;		On exit  : 0/0
 10543 ;;		Unchanged: 0/0
 10544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10549 ;;Total ram usage:        0 bytes
 10550 ;; Hardware stack levels used:    1
 10551 ;; This function calls:
 10552 ;;		Nothing
 10553 ;; This function is called by:
 10554 ;;		_INTERRUPT_InterruptManager
 10555 ;; This function uses a non-reentrant model
 10556 ;;
 10557                           
 10558                           
 10559                           ;psect for function _TMR2_ISR
 10560  126C                     _TMR2_ISR:	
 10561                           
 10562                           ;Timer.c: 51: ticker++;
 10563                           
 10564                           ;incstack = 0
 10565                           ; Regs used in _TMR2_ISR: [wreg]
 10566  126C  3001               	movlw	1
 10567  126D  0021               	movlb	1	; select bank1
 10568  126E  07E1               	addwf	_ticker^(0+128),f
 10569  126F  3000               	movlw	0
 10570  1270  3DE2               	addwfc	(_ticker+1)^(0+128),f
 10571                           
 10572                           ;Timer.c: 53: PIR1bits.TMR2IF = 0;
 10573  1271  0020               	movlb	0	; select bank0
 10574  1272  1091               	bcf	17,1	;volatile
 10575  1273  0008               	return
 10576  1274                     __end_of_TMR2_ISR:	
 10577                           
 10578                           	psect	text55
 10579  1375                     __ptext55:	
 10580 ;; *************** function _EUSART1_Transmit_ISR *****************
 10581 ;; Defined at:
 10582 ;;		line 129 in file "UART.c"
 10583 ;; Parameters:    Size  Location     Type
 10584 ;;		None
 10585 ;; Auto vars:     Size  Location     Type
 10586 ;;		None
 10587 ;; Return value:  Size  Location     Type
 10588 ;;                  1    wreg      void 
 10589 ;; Registers used:
 10590 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10591 ;; Tracked objects:
 10592 ;;		On entry : 0/0
 10593 ;;		On exit  : 0/0
 10594 ;;		Unchanged: 0/0
 10595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10598 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10599 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10600 ;;Total ram usage:        1 bytes
 10601 ;; Hardware stack levels used:    1
 10602 ;; Hardware stack levels required when called:    2
 10603 ;; This function calls:
 10604 ;;		_UART_buff_size
 10605 ;;		i1_UART_buff_get
 10606 ;; This function is called by:
 10607 ;;		_INTERRUPT_InterruptManager
 10608 ;; This function uses a non-reentrant model
 10609 ;;
 10610                           
 10611                           
 10612                           ;psect for function _EUSART1_Transmit_ISR
 10613  1375                     _EUSART1_Transmit_ISR:	
 10614                           
 10615                           ;UART.c: 131: if (UART_buff_size(&output_buffer) > 0) {
 10616                           
 10617                           ;incstack = 0
 10618                           ; Regs used in _EUSART1_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10619  1375  303A               	movlw	(low (_output_buffer| (0+256)))& (0+255)
 10620  1376  3192  22AC  3193   	fcall	_UART_buff_size
 10621  1379  0871               	movf	?_UART_buff_size+1,w
 10622  137A  3A80               	xorlw	128
 10623  137B  00FB               	movwf	??_EUSART1_Transmit_ISR
 10624  137C  3080               	movlw	128
 10625  137D  027B               	subwf	??_EUSART1_Transmit_ISR,w
 10626  137E  1D03               	skipz
 10627  137F  2B82               	goto	u434_25
 10628  1380  3001               	movlw	1
 10629  1381  0270               	subwf	?_UART_buff_size,w
 10630  1382                     u434_25:	
 10631  1382  1C03               	skipc
 10632  1383  2B8A               	goto	i1l204
 10633                           
 10634                           ;UART.c: 132: TXREG = UART_buff_get(&output_buffer);
 10635  1384  303A               	movlw	(low (_output_buffer| (0+256)))& (0+255)
 10636  1385  3195  25D1         	fcall	i1_UART_buff_get
 10637  1387  0023               	movlb	3	; select bank3
 10638  1388  009A               	movwf	26	;volatile
 10639                           
 10640                           ;UART.c: 133: } else {
 10641  1389  0008               	return
 10642  138A                     i1l204:	
 10643                           
 10644                           ;UART.c: 134: Transmit_stall = 1;
 10645  138A  0021               	movlb	1	; select bank1
 10646  138B  01EE               	clrf	_Transmit_stall^(0+128)
 10647  138C  0AEE               	incf	_Transmit_stall^(0+128),f
 10648                           
 10649                           ;UART.c: 135: PIE1bits.TXIE = 0;
 10650  138D  1211               	bcf	17,4	;volatile
 10651  138E  0008               	return
 10652  138F                     __end_of_EUSART1_Transmit_ISR:	
 10653                           
 10654                           	psect	text56
 10655  15D1                     __ptext56:	
 10656 ;; *************** function i1_UART_buff_get *****************
 10657 ;; Defined at:
 10658 ;;		line 73 in file "UART.c"
 10659 ;; Parameters:    Size  Location     Type
 10660 ;;  _this           1    wreg     PTR struct UART_ring_buf
 10661 ;;		 -> output_buffer(26), input_buffer(26), 
 10662 ;; Auto vars:     Size  Location     Type
 10663 ;;  _this           1   10[COMMON] PTR struct UART_ring_buf
 10664 ;;		 -> output_buffer(26), input_buffer(26), 
 10665 ;;  UART_buff_ge    1    9[COMMON] unsigned char 
 10666 ;; Return value:  Size  Location     Type
 10667 ;;                  1    wreg      unsigned char 
 10668 ;; Registers used:
 10669 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10670 ;; Tracked objects:
 10671 ;;		On entry : 0/0
 10672 ;;		On exit  : 0/0
 10673 ;;		Unchanged: 0/0
 10674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10676 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10677 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10678 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10679 ;;Total ram usage:        5 bytes
 10680 ;; Hardware stack levels used:    1
 10681 ;; Hardware stack levels required when called:    1
 10682 ;; This function calls:
 10683 ;;		i1_UART_buff_modulo_inc
 10684 ;; This function is called by:
 10685 ;;		_EUSART1_Transmit_ISR
 10686 ;; This function uses a non-reentrant model
 10687 ;;
 10688                           
 10689                           
 10690                           ;psect for function i1_UART_buff_get
 10691  15D1                     i1_UART_buff_get:	
 10692                           
 10693                           ;incstack = 0
 10694                           ; Regs used in i1_UART_buff_get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10695                           ;i1UART_buff_get@_this stored from wreg
 10696  15D1  00FA               	movwf	i1UART_buff_get@_this
 10697                           
 10698                           ;UART.c: 74: unsigned char c;
 10699                           ;UART.c: 75: if (_this->count > 0) {
 10700  15D2  087A               	movf	i1UART_buff_get@_this,w
 10701  15D3  3E18               	addlw	24
 10702  15D4  0086               	movwf	6
 10703  15D5  3001               	movlw	1	; select bank2/3
 10704  15D6  0087               	movwf	7
 10705  15D7  3F40               	moviw [0]fsr1
 10706  15D8  00F6               	movwf	??i1_UART_buff_get
 10707  15D9  3F41               	moviw [1]fsr1
 10708  15DA  00F7               	movwf	??i1_UART_buff_get+1
 10709  15DB  0877               	movf	??i1_UART_buff_get+1,w
 10710  15DC  3A80               	xorlw	128
 10711  15DD  00F8               	movwf	??i1_UART_buff_get+2
 10712  15DE  3080               	movlw	128
 10713  15DF  0278               	subwf	??i1_UART_buff_get+2,w
 10714  15E0  1D03               	skipz
 10715  15E1  2DE4               	goto	u419_25
 10716  15E2  3001               	movlw	1
 10717  15E3  0276               	subwf	??i1_UART_buff_get,w
 10718  15E4                     u419_25:	
 10719  15E4  1C03               	skipc
 10720  15E5  2E1B               	goto	i1l3126
 10721                           
 10722                           ;UART.c: 76: c = _this->buf[_this->tail];
 10723  15E6  087A               	movf	i1UART_buff_get@_this,w
 10724  15E7  3E16               	addlw	22
 10725  15E8  0086               	movwf	6
 10726  15E9  3001               	movlw	1	; select bank2/3
 10727  15EA  0087               	movwf	7
 10728  15EB  0801               	movf	1,w
 10729  15EC  077A               	addwf	i1UART_buff_get@_this,w
 10730  15ED  00F6               	movwf	??i1_UART_buff_get
 10731  15EE  0876               	movf	??i1_UART_buff_get,w
 10732  15EF  0086               	movwf	6
 10733  15F0  3001               	movlw	1	; select bank2/3
 10734  15F1  0087               	movwf	7
 10735  15F2  0801               	movf	1,w
 10736  15F3  00F7               	movwf	??i1_UART_buff_get+1
 10737  15F4  0877               	movf	??i1_UART_buff_get+1,w
 10738  15F5  00F9               	movwf	i1UART_buff_get@c
 10739                           
 10740                           ;UART.c: 77: _this->tail = UART_buff_modulo_inc(_this->tail, 20);
 10741  15F6  087A               	movf	i1UART_buff_get@_this,w
 10742  15F7  3E16               	addlw	22
 10743  15F8  0086               	movwf	6
 10744  15F9  3001               	movlw	1	; select bank2/3
 10745  15FA  0087               	movwf	7
 10746  15FB  3F40               	moviw [0]fsr1
 10747  15FC  00F0               	movwf	i1UART_buff_modulo_inc@value
 10748  15FD  3F41               	moviw [1]fsr1
 10749  15FE  00F1               	movwf	i1UART_buff_modulo_inc@value+1
 10750  15FF  3014               	movlw	20
 10751  1600  00F2               	movwf	i1UART_buff_modulo_inc@modulus
 10752  1601  3000               	movlw	0
 10753  1602  00F3               	movwf	i1UART_buff_modulo_inc@modulus+1
 10754  1603  3193  2305  3195   	fcall	i1_UART_buff_modulo_inc
 10755  1606  087A               	movf	i1UART_buff_get@_this,w
 10756  1607  3E16               	addlw	22
 10757  1608  0086               	movwf	6
 10758  1609  3001               	movlw	1	; select bank2/3
 10759  160A  0087               	movwf	7
 10760  160B  0870               	movf	?i1_UART_buff_modulo_inc,w
 10761  160C  3FC0               	movwi [0]fsr1
 10762  160D  0871               	movf	?i1_UART_buff_modulo_inc+1,w
 10763  160E  3FC1               	movwi [1]fsr1
 10764                           
 10765                           ;UART.c: 78: --_this->count;
 10766  160F  087A               	movf	i1UART_buff_get@_this,w
 10767  1610  3E18               	addlw	24
 10768  1611  0086               	movwf	6
 10769  1612  3001               	movlw	1	; select bank2/3
 10770  1613  0087               	movwf	7
 10771  1614  30FF               	movlw	255
 10772  1615  0781               	addwf	1,f
 10773  1616  3141               	addfsr 1,1
 10774  1617  30FF               	movlw	255
 10775  1618  3D81               	addwfc	1,f
 10776  1619  317F               	addfsr 1,-1
 10777                           
 10778                           ;UART.c: 79: } else {
 10779  161A  2E1C               	goto	i1l3128
 10780  161B                     i1l3126:	
 10781                           
 10782                           ;UART.c: 80: c = 0;
 10783  161B  01F9               	clrf	i1UART_buff_get@c
 10784  161C                     i1l3128:	
 10785                           
 10786                           ;UART.c: 81: }
 10787                           ;UART.c: 82: return (c);
 10788  161C  0879               	movf	i1UART_buff_get@c,w
 10789  161D  0008               	return
 10790  161E                     __end_ofi1_UART_buff_get:	
 10791                           
 10792                           	psect	text57
 10793  12AC                     __ptext57:	
 10794 ;; *************** function _UART_buff_size *****************
 10795 ;; Defined at:
 10796 ;;		line 85 in file "UART.c"
 10797 ;; Parameters:    Size  Location     Type
 10798 ;;  _this           1    wreg     PTR struct UART_ring_buf
 10799 ;;		 -> output_buffer(26), 
 10800 ;; Auto vars:     Size  Location     Type
 10801 ;;  _this           1    3[COMMON] PTR struct UART_ring_buf
 10802 ;;		 -> output_buffer(26), 
 10803 ;; Return value:  Size  Location     Type
 10804 ;;                  2    0[COMMON] int 
 10805 ;; Registers used:
 10806 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10807 ;; Tracked objects:
 10808 ;;		On entry : 0/0
 10809 ;;		On exit  : 0/0
 10810 ;;		Unchanged: 0/0
 10811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10812 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10813 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10815 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10816 ;;Total ram usage:        4 bytes
 10817 ;; Hardware stack levels used:    1
 10818 ;; This function calls:
 10819 ;;		Nothing
 10820 ;; This function is called by:
 10821 ;;		_EUSART1_Transmit_ISR
 10822 ;; This function uses a non-reentrant model
 10823 ;;
 10824                           
 10825                           
 10826                           ;psect for function _UART_buff_size
 10827  12AC                     _UART_buff_size:	
 10828                           
 10829                           ;incstack = 0
 10830                           ; Regs used in _UART_buff_size: [wreg+fsr1l+fsr1h+status,2+status,0]
 10831                           ;UART_buff_size@_this stored from wreg
 10832  12AC  00F3               	movwf	UART_buff_size@_this
 10833                           
 10834                           ;UART.c: 86: return (_this->count);
 10835  12AD  0873               	movf	UART_buff_size@_this,w
 10836  12AE  3E18               	addlw	24
 10837  12AF  0086               	movwf	6
 10838  12B0  3001               	movlw	1	; select bank2/3
 10839  12B1  0087               	movwf	7
 10840  12B2  3F40               	moviw [0]fsr1
 10841  12B3  00F0               	movwf	?_UART_buff_size
 10842  12B4  3F41               	moviw [1]fsr1
 10843  12B5  00F1               	movwf	?_UART_buff_size+1
 10844  12B6  0008               	return
 10845  12B7                     __end_of_UART_buff_size:	
 10846                           
 10847                           	psect	text58
 10848  12D0                     __ptext58:	
 10849 ;; *************** function _EUSART1_Receive_ISR *****************
 10850 ;; Defined at:
 10851 ;;		line 118 in file "UART.c"
 10852 ;; Parameters:    Size  Location     Type
 10853 ;;		None
 10854 ;; Auto vars:     Size  Location     Type
 10855 ;;  data            1   12[COMMON] unsigned char 
 10856 ;; Return value:  Size  Location     Type
 10857 ;;                  1    wreg      void 
 10858 ;; Registers used:
 10859 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10860 ;; Tracked objects:
 10861 ;;		On entry : 0/0
 10862 ;;		On exit  : 0/0
 10863 ;;		Unchanged: 0/0
 10864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10866 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10867 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10868 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10869 ;;Total ram usage:        2 bytes
 10870 ;; Hardware stack levels used:    1
 10871 ;; Hardware stack levels required when called:    2
 10872 ;; This function calls:
 10873 ;;		i1_UART_buff_put
 10874 ;; This function is called by:
 10875 ;;		_INTERRUPT_InterruptManager
 10876 ;; This function uses a non-reentrant model
 10877 ;;
 10878                           
 10879                           
 10880                           ;psect for function _EUSART1_Receive_ISR
 10881  12D0                     _EUSART1_Receive_ISR:	
 10882                           
 10883                           ;UART.c: 119: if (1 == RCSTAbits.OERR) {
 10884                           
 10885                           ;incstack = 0
 10886                           ; Regs used in _EUSART1_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10887  12D0  0023               	movlb	3	; select bank3
 10888  12D1  1C9D               	btfss	29,1	;volatile
 10889  12D2  2AD5               	goto	i1l3218
 10890                           
 10891                           ;UART.c: 122: RCSTAbits.CREN = 0;
 10892  12D3  121D               	bcf	29,4	;volatile
 10893                           
 10894                           ;UART.c: 123: RCSTAbits.CREN = 1;
 10895  12D4  161D               	bsf	29,4	;volatile
 10896  12D5                     i1l3218:	
 10897                           
 10898                           ;UART.c: 124: }
 10899                           ;UART.c: 125: unsigned char data = RCREG;
 10900  12D5  0819               	movf	25,w	;volatile
 10901  12D6  00FB               	movwf	??_EUSART1_Receive_ISR
 10902  12D7  087B               	movf	??_EUSART1_Receive_ISR,w
 10903  12D8  00FC               	movwf	EUSART1_Receive_ISR@data
 10904                           
 10905                           ;UART.c: 126: UART_buff_put(&input_buffer, data);
 10906  12D9  087C               	movf	EUSART1_Receive_ISR@data,w
 10907  12DA  00FB               	movwf	??_EUSART1_Receive_ISR
 10908  12DB  087B               	movf	??_EUSART1_Receive_ISR,w
 10909  12DC  00F6               	movwf	i1UART_buff_put@c
 10910  12DD  3020               	movlw	(low (_input_buffer| (0+256)))& (0+255)
 10911  12DE  3188  2033         	fcall	i1_UART_buff_put
 10912  12E0  0008               	return
 10913  12E1                     __end_of_EUSART1_Receive_ISR:	
 10914                           
 10915                           	psect	text59
 10916  0833                     __ptext59:	
 10917 ;; *************** function i1_UART_buff_put *****************
 10918 ;; Defined at:
 10919 ;;		line 60 in file "UART.c"
 10920 ;; Parameters:    Size  Location     Type
 10921 ;;  _this           1    wreg     PTR struct UART_ring_buf
 10922 ;;		 -> output_buffer(26), input_buffer(26), 
 10923 ;;  c               1    6[COMMON] unsigned char 
 10924 ;; Auto vars:     Size  Location     Type
 10925 ;;  _this           1   10[COMMON] PTR struct UART_ring_buf
 10926 ;;		 -> output_buffer(26), input_buffer(26), 
 10927 ;; Return value:  Size  Location     Type
 10928 ;;                  1    wreg      void 
 10929 ;; Registers used:
 10930 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10931 ;; Tracked objects:
 10932 ;;		On entry : 0/0
 10933 ;;		On exit  : 0/0
 10934 ;;		Unchanged: 0/0
 10935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10936 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10937 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10938 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10939 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10940 ;;Total ram usage:        5 bytes
 10941 ;; Hardware stack levels used:    1
 10942 ;; Hardware stack levels required when called:    1
 10943 ;; This function calls:
 10944 ;;		i1_UART_buff_modulo_inc
 10945 ;; This function is called by:
 10946 ;;		_EUSART1_Receive_ISR
 10947 ;; This function uses a non-reentrant model
 10948 ;;
 10949                           
 10950                           
 10951                           ;psect for function i1_UART_buff_put
 10952  0833                     i1_UART_buff_put:	
 10953                           
 10954                           ;incstack = 0
 10955                           ; Regs used in i1_UART_buff_put: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10956                           ;i1UART_buff_put@_this stored from wreg
 10957  0833  00FA               	movwf	i1UART_buff_put@_this
 10958                           
 10959                           ;UART.c: 61: if (_this->count < 20) {
 10960  0834  087A               	movf	i1UART_buff_put@_this,w
 10961  0835  3E18               	addlw	24
 10962  0836  0086               	movwf	6
 10963  0837  3001               	movlw	1	; select bank2/3
 10964  0838  0087               	movwf	7
 10965  0839  3F40               	moviw [0]fsr1
 10966  083A  00F7               	movwf	??i1_UART_buff_put
 10967  083B  3F41               	moviw [1]fsr1
 10968  083C  00F8               	movwf	??i1_UART_buff_put+1
 10969  083D  0878               	movf	??i1_UART_buff_put+1,w
 10970  083E  3A80               	xorlw	128
 10971  083F  00F9               	movwf	??i1_UART_buff_put+2
 10972  0840  3080               	movlw	128
 10973  0841  0279               	subwf	??i1_UART_buff_put+2,w
 10974  0842  1D03               	skipz
 10975  0843  2846               	goto	u418_25
 10976  0844  3014               	movlw	20
 10977  0845  0277               	subwf	??i1_UART_buff_put,w
 10978  0846                     u418_25:	
 10979  0846  1803               	skipnc
 10980  0847  287B               	goto	i1l3112
 10981                           
 10982                           ;UART.c: 62: _this->buf[_this->head] = c;
 10983  0848  0876               	movf	i1UART_buff_put@c,w
 10984  0849  00F7               	movwf	??i1_UART_buff_put
 10985  084A  087A               	movf	i1UART_buff_put@_this,w
 10986  084B  3E14               	addlw	20
 10987  084C  0086               	movwf	6
 10988  084D  3001               	movlw	1	; select bank2/3
 10989  084E  0087               	movwf	7
 10990  084F  0801               	movf	1,w
 10991  0850  077A               	addwf	i1UART_buff_put@_this,w
 10992  0851  00F8               	movwf	??i1_UART_buff_put+1
 10993  0852  0878               	movf	??i1_UART_buff_put+1,w
 10994  0853  0086               	movwf	6
 10995  0854  3001               	movlw	1	; select bank2/3
 10996  0855  0087               	movwf	7
 10997  0856  0877               	movf	??i1_UART_buff_put,w
 10998  0857  0081               	movwf	1
 10999                           
 11000                           ;UART.c: 63: _this->head = UART_buff_modulo_inc(_this->head, 20);
 11001  0858  087A               	movf	i1UART_buff_put@_this,w
 11002  0859  3E14               	addlw	20
 11003  085A  0086               	movwf	6
 11004  085B  3001               	movlw	1	; select bank2/3
 11005  085C  0087               	movwf	7
 11006  085D  3F40               	moviw [0]fsr1
 11007  085E  00F0               	movwf	i1UART_buff_modulo_inc@value
 11008  085F  3F41               	moviw [1]fsr1
 11009  0860  00F1               	movwf	i1UART_buff_modulo_inc@value+1
 11010  0861  3014               	movlw	20
 11011  0862  00F2               	movwf	i1UART_buff_modulo_inc@modulus
 11012  0863  3000               	movlw	0
 11013  0864  00F3               	movwf	i1UART_buff_modulo_inc@modulus+1
 11014  0865  3193  2305         	fcall	i1_UART_buff_modulo_inc
 11015  0867  087A               	movf	i1UART_buff_put@_this,w
 11016  0868  3E14               	addlw	20
 11017  0869  0086               	movwf	6
 11018  086A  3001               	movlw	1	; select bank2/3
 11019  086B  0087               	movwf	7
 11020  086C  0870               	movf	?i1_UART_buff_modulo_inc,w
 11021  086D  3FC0               	movwi [0]fsr1
 11022  086E  0871               	movf	?i1_UART_buff_modulo_inc+1,w
 11023  086F  3FC1               	movwi [1]fsr1
 11024                           
 11025                           ;UART.c: 64: ++_this->count;
 11026  0870  087A               	movf	i1UART_buff_put@_this,w
 11027  0871  3E18               	addlw	24
 11028  0872  0086               	movwf	6
 11029  0873  3001               	movlw	1	; select bank2/3
 11030  0874  0087               	movwf	7
 11031  0875  3001               	movlw	1
 11032  0876  0781               	addwf	1,f
 11033  0877  3141               	addfsr 1,1
 11034  0878  1803               	skipnc
 11035  0879  0A81               	incf	1,f
 11036                           
 11037                           ;UART.c: 65: } else {
 11038  087A  0008               	return
 11039  087B                     i1l3112:	
 11040                           
 11041                           ;UART.c: 66: _this->buf[_this->head] = c;
 11042  087B  0876               	movf	i1UART_buff_put@c,w
 11043  087C  00F7               	movwf	??i1_UART_buff_put
 11044  087D  087A               	movf	i1UART_buff_put@_this,w
 11045  087E  3E14               	addlw	20
 11046  087F  0086               	movwf	6
 11047  0880  3001               	movlw	1	; select bank2/3
 11048  0881  0087               	movwf	7
 11049  0882  0801               	movf	1,w
 11050  0883  077A               	addwf	i1UART_buff_put@_this,w
 11051  0884  00F8               	movwf	??i1_UART_buff_put+1
 11052  0885  0878               	movf	??i1_UART_buff_put+1,w
 11053  0886  0086               	movwf	6
 11054  0887  3001               	movlw	1	; select bank2/3
 11055  0888  0087               	movwf	7
 11056  0889  0877               	movf	??i1_UART_buff_put,w
 11057  088A  0081               	movwf	1
 11058                           
 11059                           ;UART.c: 67: _this->head = UART_buff_modulo_inc(_this->head, 20);
 11060  088B  087A               	movf	i1UART_buff_put@_this,w
 11061  088C  3E14               	addlw	20
 11062  088D  0086               	movwf	6
 11063  088E  3001               	movlw	1	; select bank2/3
 11064  088F  0087               	movwf	7
 11065  0890  3F40               	moviw [0]fsr1
 11066  0891  00F0               	movwf	i1UART_buff_modulo_inc@value
 11067  0892  3F41               	moviw [1]fsr1
 11068  0893  00F1               	movwf	i1UART_buff_modulo_inc@value+1
 11069  0894  3014               	movlw	20
 11070  0895  00F2               	movwf	i1UART_buff_modulo_inc@modulus
 11071  0896  3000               	movlw	0
 11072  0897  00F3               	movwf	i1UART_buff_modulo_inc@modulus+1
 11073  0898  3193  2305  3188   	fcall	i1_UART_buff_modulo_inc
 11074  089B  087A               	movf	i1UART_buff_put@_this,w
 11075  089C  3E14               	addlw	20
 11076  089D  0086               	movwf	6
 11077  089E  3001               	movlw	1	; select bank2/3
 11078  089F  0087               	movwf	7
 11079  08A0  0870               	movf	?i1_UART_buff_modulo_inc,w
 11080  08A1  3FC0               	movwi [0]fsr1
 11081  08A2  0871               	movf	?i1_UART_buff_modulo_inc+1,w
 11082  08A3  3FC1               	movwi [1]fsr1
 11083                           
 11084                           ;UART.c: 68: _this->tail = UART_buff_modulo_inc(_this->tail, 20);
 11085  08A4  087A               	movf	i1UART_buff_put@_this,w
 11086  08A5  3E16               	addlw	22
 11087  08A6  0086               	movwf	6
 11088  08A7  3001               	movlw	1	; select bank2/3
 11089  08A8  0087               	movwf	7
 11090  08A9  3F40               	moviw [0]fsr1
 11091  08AA  00F0               	movwf	i1UART_buff_modulo_inc@value
 11092  08AB  3F41               	moviw [1]fsr1
 11093  08AC  00F1               	movwf	i1UART_buff_modulo_inc@value+1
 11094  08AD  3014               	movlw	20
 11095  08AE  00F2               	movwf	i1UART_buff_modulo_inc@modulus
 11096  08AF  3000               	movlw	0
 11097  08B0  00F3               	movwf	i1UART_buff_modulo_inc@modulus+1
 11098  08B1  3193  2305         	fcall	i1_UART_buff_modulo_inc
 11099  08B3  087A               	movf	i1UART_buff_put@_this,w
 11100  08B4  3E16               	addlw	22
 11101  08B5  0086               	movwf	6
 11102  08B6  3001               	movlw	1	; select bank2/3
 11103  08B7  0087               	movwf	7
 11104  08B8  0870               	movf	?i1_UART_buff_modulo_inc,w
 11105  08B9  3FC0               	movwi [0]fsr1
 11106  08BA  0871               	movf	?i1_UART_buff_modulo_inc+1,w
 11107  08BB  3FC1               	movwi [1]fsr1
 11108  08BC  0008               	return
 11109  08BD                     __end_ofi1_UART_buff_put:	
 11110                           
 11111                           	psect	text60
 11112  1305                     __ptext60:	
 11113 ;; *************** function i1_UART_buff_modulo_inc *****************
 11114 ;; Defined at:
 11115 ;;		line 89 in file "UART.c"
 11116 ;; Parameters:    Size  Location     Type
 11117 ;;  value           2    0[COMMON] const unsigned int 
 11118 ;;  modulus         2    2[COMMON] const unsigned int 
 11119 ;; Auto vars:     Size  Location     Type
 11120 ;;  UART_buff_mo    2    4[COMMON] unsigned int 
 11121 ;; Return value:  Size  Location     Type
 11122 ;;                  2    0[COMMON] unsigned int 
 11123 ;; Registers used:
 11124 ;;		wreg, status,2, status,0
 11125 ;; Tracked objects:
 11126 ;;		On entry : 0/0
 11127 ;;		On exit  : 0/0
 11128 ;;		Unchanged: 0/0
 11129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11130 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11131 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11133 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11134 ;;Total ram usage:        6 bytes
 11135 ;; Hardware stack levels used:    1
 11136 ;; This function calls:
 11137 ;;		Nothing
 11138 ;; This function is called by:
 11139 ;;		i1_UART_buff_put
 11140 ;;		i1_UART_buff_get
 11141 ;; This function uses a non-reentrant model
 11142 ;;
 11143                           
 11144                           
 11145                           ;psect for function i1_UART_buff_modulo_inc
 11146  1305                     i1_UART_buff_modulo_inc:	
 11147                           
 11148                           ;UART.c: 90: unsigned int my_value = value + 1;
 11149                           
 11150                           ;incstack = 0
 11151                           ; Regs used in i1_UART_buff_modulo_inc: [wreg+status,2+status,0]
 11152  1305  0870               	movf	i1UART_buff_modulo_inc@value,w
 11153  1306  3E01               	addlw	1
 11154  1307  00F4               	movwf	i1UART_buff_modulo_inc@my_value
 11155  1308  3000               	movlw	0
 11156  1309  3D71               	addwfc	i1UART_buff_modulo_inc@value+1,w
 11157  130A  00F5               	movwf	i1UART_buff_modulo_inc@my_value+1
 11158                           
 11159                           ;UART.c: 91: if (my_value >= modulus) {
 11160  130B  0873               	movf	i1UART_buff_modulo_inc@modulus+1,w
 11161  130C  0275               	subwf	i1UART_buff_modulo_inc@my_value+1,w
 11162  130D  1D03               	skipz
 11163  130E  2B11               	goto	u399_25
 11164  130F  0872               	movf	i1UART_buff_modulo_inc@modulus,w
 11165  1310  0274               	subwf	i1UART_buff_modulo_inc@my_value,w
 11166  1311                     u399_25:	
 11167  1311  1C03               	skipc
 11168  1312  2B15               	goto	i1l2942
 11169                           
 11170                           ;UART.c: 92: my_value = 0;
 11171  1313  01F4               	clrf	i1UART_buff_modulo_inc@my_value
 11172  1314  01F5               	clrf	i1UART_buff_modulo_inc@my_value+1
 11173  1315                     i1l2942:	
 11174                           
 11175                           ;UART.c: 93: }
 11176                           ;UART.c: 94: return (my_value);
 11177  1315  0875               	movf	i1UART_buff_modulo_inc@my_value+1,w
 11178  1316  00F1               	movwf	?i1_UART_buff_modulo_inc+1
 11179  1317  0874               	movf	i1UART_buff_modulo_inc@my_value,w
 11180  1318  00F0               	movwf	?i1_UART_buff_modulo_inc
 11181  1319  0008               	return
 11182  131A                     __end_ofi1_UART_buff_modulo_inc:	
 11183  007E                     btemp	set	126	;btemp
 11184  007E                     int$flags	set	126
 11185  007E                     wtemp	set	126
 11186  007E                     wtemp0	set	126
 11187  0080                     wtemp1	set	128
 11188  0082                     wtemp2	set	130
 11189  0084                     wtemp3	set	132
 11190  0086                     wtemp4	set	134
 11191  0088                     wtemp5	set	136
 11192  007F                     wtemp6	set	127
 11193  007E                     ttemp	set	126
 11194  007E                     ttemp0	set	126
 11195  0081                     ttemp1	set	129
 11196  0084                     ttemp2	set	132
 11197  0087                     ttemp3	set	135
 11198  007F                     ttemp4	set	127
 11199  007E                     ltemp	set	126
 11200  007E                     ltemp0	set	126
 11201  0082                     ltemp1	set	130
 11202  0086                     ltemp2	set	134
 11203  0080                     ltemp3	set	128


Data Sizes:
    Strings     113
    Constant    118
    Data        1
    BSS         86
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     44      79
    BANK2            80      0      52
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 

    memset@p	PTR unsigned char  size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 36
		 -> STR_6(CODE[22]), STR_5(CODE[19]), STR_4(CODE[19]), STR_3(CODE[22]), 
		 -> STR_2(CODE[36]), STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK1[2]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 

    sp__memset	PTR void  size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->i1_UART_buff_get
    i1_UART_buff_get->i1_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i1_UART_buff_put
    i1_UART_buff_put->i1_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset
    _RadioOperation->___ftdiv
    ___ftdiv->___ftmul
    ___awtoft->___ftpack
    _ReadVoltage->_SetADCChannel
    _SR_FRSStart->_SetVOX
    _SR_FRSStart->_SetVolume
    _SetVolume->_printf
    _SetVOX->_printf
    _SetPowerSave->_printf
    _SetMIC->_printf
    _SetFrequency->_printf
    _SetCommandMode->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_Send_put
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _UART_buff_get->_UART_buff_modulo_inc
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _SR_FRSStart->_SetMIC
    _SetVolume->_printf
    _SetVOX->_printf
    _SetPowerSave->_printf
    _SetMIC->_printf
    _SetFrequency->_printf
    _SetCommandMode->_printf

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  245441
                              _Delay
                             _LEDOff
                         _RadioBegin
                     _RadioOperation
                              _Start
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (1) _Start                                                0     0      0     305
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     305
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       1     1      0     305
                                              7 BANK0      1     1      0
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               7     3      4     229
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RadioOperation                                       1     1      0    8438
                                             54 BANK0      1     1      0
                        _ClearTicker
                          _GetTicker
                        _ReadCharger
                        _ReadVoltage
                    _SR_FRSPowerDown
                         _SR_FRSTalk
                    _TMR2_StartTimer
                     _TMR2_StopTimer
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2132
                                             38 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    1890
                                              8 BANK0      6     3      3
                        _ReadVoltage (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SR_FRSTalk                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SR_FRSPowerDown                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ReadVoltage                                          4     1      3      88
                                              1 BANK0      4     1      3
                      _SetADCChannel
 ---------------------------------------------------------------------------------
 (3) _SetADCChannel                                        1     1      0      66
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ReadCharger                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetTicker                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ClearTicker                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RadioBegin                                           0     0      0  236334
                        _SR_FRSStart
 ---------------------------------------------------------------------------------
 (2) _SR_FRSStart                                          0     0      0  236334
                              _Delay
                     _SetCommandMode
                       _SetFrequency
                             _SetMIC
                       _SetPowerSave
                             _SetVOX
                          _SetVolume
 ---------------------------------------------------------------------------------
 (3) _SetVolume                                            3     3      0   39340
                                             77 BANK0      3     3      0
                             _printf
 ---------------------------------------------------------------------------------
 (3) _SetVOX                                               3     1      2   39393
                                             77 BANK0      3     1      2
                             _printf
 ---------------------------------------------------------------------------------
 (3) _SetPowerSave                                         0     0      0   39274
                             _printf
 ---------------------------------------------------------------------------------
 (3) _SetMIC                                               6     5      1   39415
                                             77 BANK0      2     1      1
                                             40 BANK1      4     4      0
                             _printf
 ---------------------------------------------------------------------------------
 (3) _SetFrequency                                         0     0      0   39274
                             _printf
 ---------------------------------------------------------------------------------
 (3) _SetCommandMode                                       0     0      0   39274
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              53    35     18   39274
                                             71 BANK0      6     6      0
                                              0 BANK1     40    22     18
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (5) _scale                                               12     9      3    8867
                                             38 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0    1751
                                             13 BANK0      1     1      0
                           _Send_put
 ---------------------------------------------------------------------------------
 (6) _Send_put                                             2     2      0    1729
                                             11 BANK0      2     2      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (7) _UART_buff_put                                        5     4      1     956
                                              6 BANK0      5     4      1
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (7) _UART_buff_get                                        5     5      0     751
                                              6 BANK0      5     5      0
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _UART_buff_modulo_inc                                 6     2      4     514
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) _fround                                              17    14      3    8669
                                             38 BANK0     14    11      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    2106
                                             16 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3662
                                             22 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              7     3      4    1250
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              9     5      4    1360
                                              7 BANK0      9     5      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) __tdiv_to_l_                                         16    10      6     409
                                              0 BANK0     16    10      6
 ---------------------------------------------------------------------------------
 (5) __div_to_l_                                          20    14      6     552
                                              0 BANK0     20    14      6
 ---------------------------------------------------------------------------------
 (5) ___lltoft                                             6     2      4    1868
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___llmod                                             10     2      8     583
                                             14 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             14     6      8     480
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             14    10      4     411
                                             47 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftsub                                              6     0      6    2971
                                             65 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftadd                                             13     7      6    2798
                                             52 BANK0     13     7      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1746
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3      98
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     666
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (3) _Delay                                                5     3      2     364
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _LEDOff                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           1     1      0    1158
                                             13 COMMON     1     1      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR2_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Transmit_ISR                                1     1      0     503
                                             11 COMMON     1     1      0
                     _UART_buff_size
                    i1_UART_buff_get
 ---------------------------------------------------------------------------------
 (11) i1_UART_buff_get                                     5     5      0     454
                                              6 COMMON     5     5      0
             i1_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (11) _UART_buff_size                                      4     1      3      49
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Receive_ISR                                 2     2      0     655
                                             11 COMMON     2     2      0
                    i1_UART_buff_put
 ---------------------------------------------------------------------------------
 (11) i1_UART_buff_put                                     5     4      1     632
                                              6 COMMON     5     4      1
             i1_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (12) i1_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay
   _LEDOff
   _RadioBegin
     _SR_FRSStart
       _Delay
       _SetCommandMode
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _Send_put
               _UART_buff_get
                 _UART_buff_modulo_inc
               _UART_buff_put
                 _UART_buff_modulo_inc
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _SetFrequency
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _Send_put
               _UART_buff_get
                 _UART_buff_modulo_inc
               _UART_buff_put
                 _UART_buff_modulo_inc
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _SetMIC
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _Send_put
               _UART_buff_get
                 _UART_buff_modulo_inc
               _UART_buff_put
                 _UART_buff_modulo_inc
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _SetPowerSave
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _Send_put
               _UART_buff_get
                 _UART_buff_modulo_inc
               _UART_buff_put
                 _UART_buff_modulo_inc
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _SetVOX
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _Send_put
               _UART_buff_get
                 _UART_buff_modulo_inc
               _UART_buff_put
                 _UART_buff_modulo_inc
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _SetVolume
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _Send_put
               _UART_buff_get
                 _UART_buff_modulo_inc
               _UART_buff_put
                 _UART_buff_modulo_inc
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _RadioOperation
     _ClearTicker
     _GetTicker
     _ReadCharger
     _ReadVoltage
       _SetADCChannel
     _SR_FRSPowerDown
     _SR_FRSTalk
     _TMR2_StartTimer
     _TMR2_StopTimer
     ___awtoft
       _ReadVoltage (ARG)
         _SetADCChannel
       ___ftpack (ARG)
     ___ftdiv
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _Start
     _ADC_Initialize
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _INTERRUPT_Initialize
     _TMR2_Initialize
   _TMR2_StartTimer

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     i1_UART_buff_put
       i1_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     _UART_buff_size
     i1_UART_buff_get
       i1_UART_buff_modulo_inc
   _TMR2_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     2C      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      34       9       65.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      E1      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      E1      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Aug 05 01:56:22 2016

           _eusart1TxBufferRemaining 00EB                                   l64 13E6  
                                 l80 12E7                                   l82 12EC  
                       ___awdiv@sign 002D                  ___wmul@multiplicand 0032  
               i1UART_buff_get@_this 007A                         ___ftadd@exp1 0060  
                       ___ftadd@exp2 005F                         ___ftadd@sign 005E  
                                l320 12FB                                  l424 05C5  
                                l508 1398                                  l380 01D1  
                                l372 006E                                  l294 0BAB  
                                l296 0BF0                                  l717 0B49  
                                l743 075D                                  l753 07D6  
                                l674 0DAE                                  l693 175A  
                                l694 1762                                  l686 1747  
                                l794 17E6                           _SR_FRSTalk 0800  
                                _PR2 001B              __end_ofi1_UART_buff_get 161E  
            __end_ofi1_UART_buff_put 08BD                        _SetADCChannel 143B  
                       ___awmod@sign 0026                      _TMR2_Initialize 12A2  
                                wreg 0009                         ___ftdiv@cntr 0050  
                       ___ftdiv@sign 0055                                 l2110 132B  
                               l2122 0908                                 l2212 1685  
                               l2150 1724                                 l2230 16AB  
                               l2222 168D                                 l2206 167A  
                               l2160 174C                                 l2152 172E  
                               l2320 0B28                                 l2224 1699  
                               l2136 166B                                 l3008 12F1  
                               l3200 0C85                                 l2162 1754  
                               l2154 1733                                 l2146 171D  
                               l2314 0B15                                 l2234 16B4  
                               l2250 1596                                 l2138 166D  
                               l2332 0B5B                                 l2316 0B1F  
                               l2308 0B02                                 l2420 06FF  
                               l2412 0687                                 l3204 0C8E  
                               l2326 0B3B                                 l2318 0B24  
                               l2510 07CD                                 l2502 07B2  
                               l2238 16BC                                 l2262 15A3  
                               l2254 159D                                 l2336 0B6D  
                               l2328 0B45                                 l2512 07D9  
                               l2504 07C0                                 l2264 15AF  
                               l2272 15C4                                 l3208 0C97  
                               l3160 0BCB                                 l2346 0B88  
                               l2290 0AD9                                 l2602 1425  
                               l2522 0CBB                                 l2362 0A23  
                               l2186 1392                                 l2442 0EC3  
                               l3058 1467                                 l3074 097A  
                               l2612 1792                                 l2276 15CC  
                               l2268 15BB                                 l2356 0A0D  
                               l2460 0FE3                                 l2436 0E64  
                               l3068 0964                                 l2286 0AD2  
                               l2630 17C2                                 l2470 0745  
                               l2390 0A82                                 l2374 0A5E  
                               l2454 0F84                                 l2446 0EE0  
                               l3238 1369                                 l2296 0AE8  
                               l2640 17E9                                 l2632 17D0  
                               l2528 0CD8                                 l3096 09D4  
                               l3088 09BB                                 l2546 0D6B  
                               l2538 0D23                                 l2386 0A7A  
                               l2378 0A66                                 l2810 032E  
                               l2722 007F                                 l3194 0C69  
                               l2644 17F7                                 l2564 0DA5  
                               l2556 0D8A                                 l2492 0798  
                               l2484 077E                                 l2820 033F  
                               l2804 02F7                                 l2716 006A  
                               l3188 0C57                                 l2708 13B1  
                               l2574 14E1                                 l2638 17DD  
                               l2654 16D2                                 l2566 0DB1  
                               l2558 0D98                                 l2822 03B1  
                               l2742 00FF                                 l2718 0070  
                               l2726 0084                                 l2664 1700  
                               l2656 16E0                                 l2680 155F  
                               l2832 03D7                                 l2728 00A8  
                               l2578 14F7                                 l2826 03BA  
                               l2668 170B                                 l2684 1577  
                               l2852 04E3                                 l2780 023D  
                               l2772 0206                                 l2932 1451  
                               l2678 1551                                 l2838 03F2  
                               l2766 01B5                                 l2758 0163  
                               l2688 1582                                 l2696 080E  
                               l2880 055A                                 l2856 04EC  
                               l2784 0256                                 l2928 1446  
                               l2698 081E                                 l2890 0571  
                               l2874 0523                                 l2794 029C  
                               l2858 04F1                                 l2884 056B  
                               l2868 051D                                 l2892 0048  
                               l2798 02F1                                 STR_1 10D9  
                               STR_2 1076                                 STR_3 10B0  
                               STR_4 10C6                                 STR_5 10C6  
                               STR_6 109A                                 u2215 1327  
                               u2305 174F                                 u3105 07B3  
                               u2225 08D1                                 u2235 1632  
                               u3045 077F                                 u3135 07CE  
                               u3055 078F                                 u2345 1769  
                               u2265 1729                                 u3225 0D8B  
                               u3065 0799                                 u4060 0807  
                               u2285 1742                                 u2445 1690  
                               u4125 098C                                 u4070 128C  
                               u3335 1799                                 u3255 0DA6  
                               u3175 0D24                                 u4135 099C  
                               u3505 1554                                 u3185 0D4E  
                               u2465 169A                                 u2545 15A6  
                               u2385 1399                                 u4145 09BC  
                               u4225 0BB7                                 u3435 16D5  
                               u2475 16A4                                 u2395 139E  
                               u4155 09CB                         printf@tmpval 00C0  
                               u2725 0B16                                 u3365 17C3  
                               u3525 156D                                 u2485 16AC  
                               u2565 15B5                                 u4165 09D5  
                               u3455 16E1                                 u3535 1578  
                               u2575 15BC                                 u4417 13F5  
                               u3465 16F5                                 u3705 023B  
                               u3625 0114                                 u4265 0BE2  
                               u2755 0B29                                 u3395 17DE  
                               u3475 1701                                 u3555 0813  
                               u4275 0BFF                                 u2925 0A83  
                               u4285 0C63                                 u2695 0B03  
                               u2935 0A89                                 u2855 0A2F  
                               u3735 0322                                 u2785 0B3C  
                               u2865 0A3F                                 u3665 01DD  
                               u3675 0212                                 u2885 0A67  
                               u3845 054E                                 u2895 0A6D  
                               u3775 03C5                                 u3785 03D3  
                               i1l77 0023                                 u3895 13F0  
                               _TMR2 001A                          _SR_FRSStart 1506  
                               _Mode 00E5                                 _main 135D  
                       ___ftpack@arg 0020                         ___ftpack@exp 0023  
                               _time 00E3                                 fsr0h 0005  
                               fsr1h 0007                                 fsr0l 0004  
                               indf0 0000                                 indf1 0001  
                               fsr1l 0006                                 btemp 007E  
                               ltemp 007E                        ??_ReadCharger 0020  
                               start 0028                                 ttemp 007E  
                               wtemp 007E                         ___ftmul@cntr 0044  
                       ___ftmul@sign 0045                         ___fttol@exp1 005C  
                       ___fttol@lval 0058                        ??_ReadVoltage 0024  
                              ?_main 0070                      __end_of___awdiv 16C1  
                    __end_of___ftadd 0BA0                      __end_of___awmod 15D1  
                    __end_of___ftdiv 09F6                      __end_of___ftneg 1285  
                    __end_of___lldiv 1714                      __end_of___ftmul 0AAA  
                    ___awdiv@divisor 0027                      __end_of___llmod 158B  
                    __end_of___ftsub 143B                      __end_of___fttol 1800  
                              _T2CON 001C                                i1l204 138A  
                   ??_SetCommandMode 006D                       ?_SetADCChannel 0070  
               i1UART_buff_put@_this 007A                      ___awdiv@counter 002C  
                              _RCREG 0199                                _RCSTA 019D  
                              _SPBRG 019B                                _TXREG 019A  
                              _TXSTA 019E                                _Delay 13E3  
                       ___lltoft@exp 002D                 _EUSART1_Transmit_ISR 1375  
            __size_of_RadioOperation 00FD                     __end_of_TMR2_ISR 1274  
                              _Start 13C7             ??i1_UART_buff_modulo_inc 0074  
                      ___awtoft@sign 002D                      __end_of_dpowers 1028  
                              _count 00DF                                _scale 0DBA  
                      ___ftpack@sign 0024                                _putch 1260  
                              ltemp0 007E                                ltemp1 0082  
                              ltemp2 0086                                ltemp3 0080  
                        _ClearTicker 1257                                ttemp0 007E  
                              ttemp1 0081                                ttemp2 0084  
                              ttemp3 0087                                ttemp4 007F  
                              status 0003                                wtemp0 007E  
                              wtemp1 0080                                wtemp2 0082  
                              wtemp3 0084                                wtemp4 0086  
                              wtemp5 0088                                wtemp6 007F  
                    _TMR2_StartTimer 1251                      __initialization 002A  
         __end_of_EUSART1_Initialize 1346                         __end_of_main 1375  
                         _RadioBegin 124E                  __end_of_ReadCharger 12F3  
                        SetMIC@scram 006D       i1UART_buff_modulo_inc@my_value 0074  
            __end_of_TMR2_Initialize 12AC          ?_INTERRUPT_InterruptManager 0070  
                             ??_main 0070                        ___fttol@sign1 0057  
                        ?_SR_FRSTalk 0070                     __end_of_Send_put 135D  
                 __size_of_GetTicker 0001                     ?i1_UART_buff_get 0070  
               __size_of__tdiv_to_l_ 00B6                     ?i1_UART_buff_put 0076  
                             ?_Delay 0020                ?_EUSART1_Transmit_ISR 0070  
                             ?_Start 0070                  __end_of_ReadVoltage 1305  
                   ___llmod@dividend 0032                               ?_scale 0046  
                             _ADRESL 009B                     ___awdiv@dividend 0029  
                   __end_of___awtoft 147E                               ?_putch 0070  
                   __end_of___ftpack 1779                     __end_of___lltoft 0833  
                             i1l3112 087B                               i1l3126 161B  
                             i1l3128 161C                               i1l3218 12D5  
                             i1l3254 001B                               _LEDOff 125B  
                             i1l3248 0012                               i1l2942 1315  
                             Delay@x 0023          UART_buff_modulo_inc@modulus 0022  
                             _INTCON 000B                               u418_25 0846  
                             u434_25 1382                               u419_25 15E4  
                             u399_25 1311                               _SetMIC 14A4  
                             _SetVOX 07E2                     __end_of__powers_ 1076  
                             ___ftge 14CA                        _output_buffer 013A  
                             ___wmul 138F                            ??___awdiv 002B  
                          ??___ftadd 005A                            ??___awmod 0024  
                          ??___ftdiv 004C                            ??___ftneg 0023  
                          ??___lldiv 0028                            ??___ftmul 003C  
                          ??___llmod 0036                            ??___ftsub 0067  
                          ??___fttol 0053                               _memset 13AB  
                             _fround 05C6                   __size_of_SetVolume 001D  
                   ___awdiv@quotient 002E                      ___awmod@divisor 0020  
                             _ticker 00E1                      ??_SetADCChannel 0020  
                    ___awmod@counter 0025                               _printf 0042  
              ___ftmul@f3_as_product 0041                        ?_SetFrequency 0070  
                      Send_put@_data 002C         __end_of_UART_buff_modulo_inc 1330  
            __end_of_TMR2_StartTimer 1254      __size_ofi1_UART_buff_modulo_inc 0015  
                    _eusart1RxBuffer 00CC        __size_of_INTERRUPT_Initialize 000A  
                    _eusart1TxBuffer 00D4              __end_of__initialization 003E  
                         ___ftadd@f1 0054                           ___ftadd@f2 0057  
                         ___ftge@ff1 0020                           ___ftge@ff2 0023  
                         ___ftdiv@f1 0049                           ___ftdiv@f2 0046  
                         ___ftdiv@f3 0051                  __size_of_SR_FRSTalk 0009  
                  __end_of_GetTicker 0003                           ___ftneg@f1 0020  
                        _ReadCharger 12E1                           ___awtoft@c 0028  
                      __end_of_Delay 1400                           ___ftmul@f1 0036  
                         ___ftmul@f2 0039                           ___ftsub@f1 0064  
                         ___ftsub@f2 0061                           ___fttol@f1 004F  
                     __pcstackCOMMON 0070                        __end_of_Start 13E3  
                        ?_RadioBegin 0070                         __pidataBANK1 0003  
                      ?_SetPowerSave 0070                            ?_TMR2_ISR 0070  
                         ___lltoft@c 0028                        __end_of_scale 1000  
                      __end_of_putch 1266                     ?_TMR2_Initialize 0070  
                    SetVolume@volume 006F                   UART_buff_get@_this 002A  
                        _ReadVoltage 12F3                __end_of_UART_buff_get 166F  
             ??_EUSART1_Transmit_ISR 007B                __end_of_UART_buff_put 094D  
                     ??_SetFrequency 006D                           __div_to_l_ 0C9D  
                       SetMIC@volume 006E                              ??_Delay 0022  
                     _RadioOperation 0BA0          __end_of_EUSART1_Receive_ISR 12E1  
                    SetADCChannel@ch 0020                              ??_Start 0028  
                    __div_to_l_@exp1 0033                      __div_to_l_@cntr 0032  
                            ??_scale 0049                      __div_to_l_@quot 002E  
                            ??_putch 002D                        _eusart1RxHead 00E9  
                      _eusart1TxHead 00EC                        _eusart1RxTail 00EA  
                         __pbssBANK1 00CC                           __pbssBANK2 0120  
                      _eusart1TxTail 00ED                         ?_SR_FRSStart 0070  
                            ?_LEDOff 0070                    __end_of_SetVolume 141D  
            __size_of_UART_buff_init 000D              __size_of_UART_buff_size 000B  
                      __div_to_l_@f1 0020                        __div_to_l_@f2 0023  
                          ?_Send_put 0070                              ?_SetMIC 006D  
                            ?_SetVOX 006D                           __pmaintext 135D  
                     ??_SetPowerSave 006D               i1_UART_buff_modulo_inc 1305  
                            ?___ftge 0020                              ?___wmul 0030  
                         ??_TMR2_ISR 0070                           __pintentry 0004  
                            ?_memset 0020                              ?_fround 0046  
           __size_of_SR_FRSPowerDown 0009                            ?___awtoft 0028  
                          ?___ftpack 0020                              ?_printf 00A0  
                          ?___lltoft 0028              __size_of_ADC_Initialize 000A  
             __end_of_RadioOperation 0C9D                   UART_buff_put@_this 002A  
       UART_buff_modulo_inc@my_value 0024              __size_of_TMR2_StopTimer 0003  
                   ?_TMR2_StartTimer 0070                  __size_of_RadioBegin 0003  
                    __size_of_LEDOff 0005                              _Battery 00DC  
                       ?_ClearTicker 0070                    __end_of__npowers_ 104F  
                         ??_Send_put 002B                           _scale$1276 004B  
                            _Talking 00E7                      __size_of_SetMIC 0026  
                    __size_of_SetVOX 001E                      __size_of___ftge 003C  
                            ___awdiv 166F                              ___ftadd 0AAA  
               _UART_buff_modulo_inc 131A                              ___awmod 158B  
                            ___ftdiv 094D                              ___ftneg 127C  
                            ___lldiv 16C1                      __size_of___wmul 001C  
                            ___ftmul 09F6                              ___llmod 1548  
                            ___ftsub 141D                              ___fttol 1779  
                         ??___awtoft 002B                           ??___ftpack 0025  
                    __size_of_memset 001C                      __size_of_fround 0166  
                         ??___lltoft 002C                              __ptext1 13C7  
                            __ptext2 12A2                              __ptext3 1298  
                            __ptext4 1330                              __ptext5 12C3  
                            __ptext6 13AB                              __ptext7 128E  
                            __ptext8 0BA0                              __ptext9 094D  
                    __size_of_printf 0584                         ??_SR_FRSTalk 0020  
                        ?__div_to_l_ 0020                      ?_RadioOperation 0070  
                            _dpowers 1000                            _T2CONbits 001C  
                   ___awmod@dividend 0022                   _EUSART1_Initialize 1330  
                       SetVOX@volume 006D                              clrloop0 1267  
               end_of_initialization 003E                            Delay@wait 0020  
                ?_EUSART1_Initialize 0070                              memset@c 0020  
                            memset@n 0022                              memset@p 0026  
               __end_of_SetFrequency 14A4                      ___lldiv@divisor 0020  
                    ___lldiv@counter 002D                   __end_of_SR_FRSTalk 0809  
                          _RCSTAbits 019D                              printf@c 00C7  
                            printf@f 00A0                ?_UART_buff_modulo_inc 0020  
                       __pstringtext 1000                       __tdiv_to_l_@f1 0020  
                     __tdiv_to_l_@f2 0023                 ??_EUSART1_Initialize 0028  
                      ??__tdiv_to_l_ 0026                            _PORTAbits 000C  
                          _PORTCbits 000E                            _TRISAbits 008C  
                          _TRISCbits 008E                    ??_SR_FRSPowerDown 0020  
               __end_of_SetPowerSave 12C3             __size_ofi1_UART_buff_get 004D  
           __size_ofi1_UART_buff_put 008A              __size_of_SetCommandMode 0008  
                     __end_of_LEDOff 1260                          ___ftdiv@exp 0054  
                     _UART_buff_init 12C3                 __size_of_SR_FRSStart 0042  
                     _UART_buff_size 12AC                         ?_ReadCharger 0070  
                __size_of__div_to_l_ 011D                          ___ftmul@exp 0040  
                     __end_of_SetMIC 14CA                         ??_RadioBegin 0070  
                     __end_of_SetVOX 0800                            _GetTicker 0002  
       __end_of_INTERRUPT_Initialize 12A2                       __end_of___ftge 1506  
                     __end_of___wmul 13AB                    __size_of_TMR2_ISR 0008  
                     _ADC_Initialize 128E                         ?_ReadVoltage 0021  
                     __end_of_memset 13C7                       __end_of_fround 072C  
              __end_of_SetADCChannel 145C                       __end_of_printf 05C6  
                start_initialization 002A                  __end_of__tdiv_to_l_ 07E2  
                     _TMR2_StopTimer 1254        i1UART_buff_modulo_inc@modulus 0072  
                      ReadVoltage@ch 0024                          putch@txData 002D  
                 __end_of_RadioBegin 1251                             ??_LEDOff 0020  
             __end_of_UART_buff_init 12D0                       UART_buff_get@c 0029  
             __end_of_UART_buff_size 12B7                       UART_buff_put@c 0026  
                    ___llmod@divisor 002E                      ___llmod@counter 0037  
            ?i1_UART_buff_modulo_inc 0070                 __size_of_ClearTicker 0004  
                          _SetVolume 1400                             ??_SetMIC 00C8  
                           ??_SetVOX 006F               ??_UART_buff_modulo_inc 0024  
                           ??___ftge 0026                    __size_of_Send_put 0017  
                           ??___wmul 0034                           ?_GetTicker 0070  
             __end_of_ADC_Initialize 1298                          __pdataBANK1 00EE  
                           ??_memset 0024                             ??_fround 0049  
                           ??_printf 0067                       _eusart1RxCount 00E8  
                         fround@prec 0053                    __size_of___awtoft 0022  
                  __size_of___ftpack 0065               __end_of_TMR2_StopTimer 1257  
                  __size_of___lltoft 002A                            ___latbits 0002  
      __size_of_EUSART1_Transmit_ISR 001A                        __pcstackBANK0 0020  
                      __pcstackBANK1 00A0             __size_of_TMR2_Initialize 000A  
                UART_buff_init@_this 0027                __size_of_SetFrequency 0026  
                    ?_UART_buff_init 0070                      ?_UART_buff_size 0070  
       __size_of_EUSART1_Receive_ISR 0011       __end_ofi1_UART_buff_modulo_inc 131A  
             __size_of_UART_buff_get 0051                           ?_SetVolume 0070  
             __size_of_UART_buff_put 0090                    ??i1_UART_buff_get 0076  
                  ??i1_UART_buff_put 0077                             ?___awdiv 0027  
                           ?___ftadd 0054                             ?___awmod 0020  
                           ?___ftdiv 0046                             ?___ftneg 0020  
                           ?___lldiv 0020                             ?___ftmul 0036  
                           ?___llmod 002E                             ?___ftsub 0061  
                          __npowers_ 1028                             ?___fttol 004F  
                   ??_RadioOperation 0056                      ?_ADC_Initialize 0070  
       ??_INTERRUPT_InterruptManager 007D                          __tdiv_to_l_ 072C  
                       ??__div_to_l_ 0026                __size_of_SetPowerSave 000C  
                    ?_TMR2_StopTimer 0070                         _SetFrequency 147E  
                     __size_of_Delay 001D                       __size_of_Start 001C  
                     __size_of_scale 0246                       __size_of_putch 0006  
               _INTERRUPT_Initialize 1298                       _SetCommandMode 1274  
                     ___wmul@product 0034                  UART_buff_size@_this 0073  
                          clear_ram0 1266                             _PIE1bits 0091  
           __size_of_TMR2_StartTimer 0003  __size_of_INTERRUPT_InterruptManager 0024  
                           _PIR1bits 0011                   __end_of__div_to_l_ 0DBA  
               __size_of_ReadCharger 0012                          ??_GetTicker 0020  
                           _TMR2_ISR 126C                         _SetPowerSave 12B7  
                    _SR_FRSPowerDown 1285                         _input_buffer 0120  
                         _ADCON0bits 009D                           _ADCON1bits 009E  
                  ___wmul@multiplier 0030                           printf@flag 00B5  
                         printf@fval 00C4                        _UART_buff_get 161E  
                         printf@prec 00B8                        _UART_buff_put 08BD  
               __size_of_ReadVoltage 0012               __end_of_SetCommandMode 127C  
              ?_INTERRUPT_Initialize 0070                    ??_TMR2_Initialize 0020  
                        ??_SetVolume 006D                             _Send_put 1346  
                           _Shutdown 00E6                     __size_of___awdiv 0052  
                   __size_of___ftadd 00F6                     __size_of___awmod 0046  
                   __size_of___ftdiv 00A9                     __size_of___ftneg 0009  
                   __size_of___lldiv 0053                     __size_of___ftmul 00B4  
                   __size_of___llmod 0043                     __size_of___ftsub 001E  
                   __size_of___fttol 0087          __size_of_EUSART1_Initialize 0016  
                           ___awtoft 145C                             ___ftpack 1714  
                        _fround$1274 0050                          _fround$1275 004D  
                           ___lltoft 0809                           _ANSELAbits 018C  
                         _ANSELCbits 018E                       ?_UART_buff_get 0070  
                     ?_UART_buff_put 0026                             __ptext10 145C  
                           __ptext11 1254                             __ptext20 124E  
                           __ptext12 1251                             __ptext21 1506  
                           __ptext13 0800                             __ptext30 1260  
                           __ptext22 1400                             __ptext14 1285  
                           __ptext31 1346                             __ptext23 07E2  
                           __ptext15 12F3                             __ptext40 072C  
                           __ptext32 08BD                             __ptext24 12B7  
                           __ptext16 143B                             __ptext41 0C9D  
                           __ptext33 161E                             __ptext25 14A4  
                           __ptext17 12E1                             __ptext50 14CA  
                           __ptext42 0809                             __ptext34 131A  
                           __ptext26 147E                             __ptext18 0002  
                           __ptext51 13E3                             __ptext43 1548  
                           __ptext35 05C6                             __ptext27 1274  
                           __ptext19 1257                             __ptext60 1305  
                           __ptext52 125B                             __ptext44 16C1  
                           __ptext36 138F                             __ptext28 0042  
                           __ptext45 1779                             __ptext37 09F6  
                           __ptext29 0DBA                             __ptext54 126C  
                           __ptext46 141D                             __ptext38 158B  
                           __ptext55 1375                             __ptext47 0AAA  
                           __ptext39 166F                             __ptext56 15D1  
                           __ptext48 1714                             __ptext57 12AC  
                           __ptext49 127C                             __ptext58 12D0  
                           __ptext59 0833                      ?_SetCommandMode 0070  
                           __powers_ 104F                        ??_SR_FRSStart 0070  
            EUSART1_Receive_ISR@data 007C                        __size_of_main 0018  
                     _Transmit_stall 00EE              __end_of_SR_FRSPowerDown 128E  
                           int$flags 007E                     i1UART_buff_get@c 0079  
                  ??_TMR2_StartTimer 0020   __end_of_INTERRUPT_InterruptManager 0028  
         _INTERRUPT_InterruptManager 0004                            printf@exp 00BE  
                          printf@val 00BA                     i1UART_buff_put@c 0076  
                _EUSART1_Receive_ISR 12D0                           _INTCONbits 000B  
          UART_buff_modulo_inc@value 0020                           _FVRCONbits 0117  
                   ??_UART_buff_init 0027                     ??_UART_buff_size 0073  
             ??_INTERRUPT_Initialize 0020                             memset@p1 0025  
                           scale@scl 004E                      i1_UART_buff_get 15D1  
                    i1_UART_buff_put 0833                             intlevel1 0000  
                   __tdiv_to_l_@exp1 002F                     __tdiv_to_l_@cntr 002E  
                      ??_ClearTicker 0020                     __tdiv_to_l_@quot 002A  
               ?_EUSART1_Receive_ISR 0070                     ___lldiv@dividend 0024  
       __end_of_EUSART1_Transmit_ISR 138F                     ??_ADC_Initialize 0020  
             __size_of_SetADCChannel 0021                  __end_of_SR_FRSStart 1548  
                           printf@ap 00B7        __size_of_UART_buff_modulo_inc 0016  
                   ??_TMR2_StopTimer 0020                      ??_UART_buff_get 0026  
                    ??_UART_buff_put 0027                         ?__tdiv_to_l_ 0020  
                        _printf$1277 00B2                     ___lldiv@quotient 0029  
              ??_EUSART1_Receive_ISR 007B          i1UART_buff_modulo_inc@value 0070  
                   ?_SR_FRSPowerDown 0070                  __end_of_ClearTicker 125B  
