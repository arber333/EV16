

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Aug 05 04:12:02 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2
    52                           	psect	text38,local,class=CODE,merge=1,delta=2
    53                           	psect	text39,local,class=CODE,merge=1,delta=2
    54                           	psect	text40,local,class=CODE,merge=1,delta=2
    55                           	psect	text41,local,class=CODE,merge=1,delta=2
    56                           	psect	text42,local,class=CODE,merge=1,delta=2
    57                           	psect	text43,local,class=CODE,merge=1,delta=2
    58                           	psect	text44,local,class=CODE,merge=1,delta=2
    59                           	psect	text45,local,class=CODE,merge=1,delta=2
    60                           	psect	text46,local,class=CODE,merge=1,delta=2
    61                           	psect	text47,local,class=CODE,merge=1,delta=2
    62                           	psect	text48,local,class=CODE,merge=1,delta=2
    63                           	psect	text49,local,class=CODE,merge=1,delta=2
    64                           	psect	text50,local,class=CODE,merge=1,delta=2
    65                           	psect	text51,local,class=CODE,merge=1,delta=2
    66                           	psect	text52,local,class=CODE,merge=1,delta=2
    67                           	psect	intentry,global,class=CODE,delta=2
    68                           	psect	text54,local,class=CODE,merge=1,delta=2
    69                           	psect	text55,local,class=CODE,merge=1,delta=2
    70                           	psect	text56,local,class=CODE,merge=1,delta=2
    71                           	psect	text57,local,class=CODE,merge=1,delta=2
    72                           	psect	text58,local,class=CODE,merge=1,delta=2
    73                           	psect	text59,local,class=CODE,merge=1,delta=2
    74                           	psect	text60,local,class=CODE,merge=1,delta=2
    75                           	dabs	1,0x7E,2
    76  0000                     	;# 
    77  0001                     	;# 
    78  0002                     	;# 
    79  0003                     	;# 
    80  0004                     	;# 
    81  0005                     	;# 
    82  0006                     	;# 
    83  0007                     	;# 
    84  0008                     	;# 
    85  0009                     	;# 
    86  000A                     	;# 
    87  000B                     	;# 
    88  000C                     	;# 
    89  000D                     	;# 
    90  000E                     	;# 
    91  0011                     	;# 
    92  0012                     	;# 
    93  0013                     	;# 
    94  0014                     	;# 
    95  0015                     	;# 
    96  0016                     	;# 
    97  0016                     	;# 
    98  0017                     	;# 
    99  0018                     	;# 
   100  0019                     	;# 
   101  001A                     	;# 
   102  001B                     	;# 
   103  001C                     	;# 
   104  001E                     	;# 
   105  001F                     	;# 
   106  008C                     	;# 
   107  008D                     	;# 
   108  008E                     	;# 
   109  0091                     	;# 
   110  0092                     	;# 
   111  0093                     	;# 
   112  0094                     	;# 
   113  0095                     	;# 
   114  0096                     	;# 
   115  0097                     	;# 
   116  0098                     	;# 
   117  0099                     	;# 
   118  009A                     	;# 
   119  009B                     	;# 
   120  009B                     	;# 
   121  009C                     	;# 
   122  009D                     	;# 
   123  009E                     	;# 
   124  010C                     	;# 
   125  010D                     	;# 
   126  010E                     	;# 
   127  0111                     	;# 
   128  0112                     	;# 
   129  0113                     	;# 
   130  0114                     	;# 
   131  0115                     	;# 
   132  0116                     	;# 
   133  0117                     	;# 
   134  0118                     	;# 
   135  0119                     	;# 
   136  011A                     	;# 
   137  011B                     	;# 
   138  011D                     	;# 
   139  011E                     	;# 
   140  018C                     	;# 
   141  018D                     	;# 
   142  018E                     	;# 
   143  0191                     	;# 
   144  0191                     	;# 
   145  0192                     	;# 
   146  0193                     	;# 
   147  0193                     	;# 
   148  0193                     	;# 
   149  0194                     	;# 
   150  0195                     	;# 
   151  0196                     	;# 
   152  0199                     	;# 
   153  019A                     	;# 
   154  019B                     	;# 
   155  019B                     	;# 
   156  019C                     	;# 
   157  019D                     	;# 
   158  019E                     	;# 
   159  019F                     	;# 
   160  020C                     	;# 
   161  020D                     	;# 
   162  020E                     	;# 
   163  0211                     	;# 
   164  0211                     	;# 
   165  0212                     	;# 
   166  0212                     	;# 
   167  0213                     	;# 
   168  0213                     	;# 
   169  0214                     	;# 
   170  0214                     	;# 
   171  0215                     	;# 
   172  0215                     	;# 
   173  0215                     	;# 
   174  0216                     	;# 
   175  0216                     	;# 
   176  0217                     	;# 
   177  0217                     	;# 
   178  0219                     	;# 
   179  021A                     	;# 
   180  021B                     	;# 
   181  021C                     	;# 
   182  021D                     	;# 
   183  021E                     	;# 
   184  021F                     	;# 
   185  0291                     	;# 
   186  0291                     	;# 
   187  0292                     	;# 
   188  0293                     	;# 
   189  0294                     	;# 
   190  0295                     	;# 
   191  0295                     	;# 
   192  0296                     	;# 
   193  0298                     	;# 
   194  0298                     	;# 
   195  0299                     	;# 
   196  029A                     	;# 
   197  029B                     	;# 
   198  029C                     	;# 
   199  029D                     	;# 
   200  029E                     	;# 
   201  0311                     	;# 
   202  0311                     	;# 
   203  0312                     	;# 
   204  0313                     	;# 
   205  0318                     	;# 
   206  0318                     	;# 
   207  0319                     	;# 
   208  031A                     	;# 
   209  038C                     	;# 
   210  038D                     	;# 
   211  038E                     	;# 
   212  0391                     	;# 
   213  0392                     	;# 
   214  0393                     	;# 
   215  0394                     	;# 
   216  0395                     	;# 
   217  0396                     	;# 
   218  039A                     	;# 
   219  039C                     	;# 
   220  039D                     	;# 
   221  039E                     	;# 
   222  039F                     	;# 
   223  0415                     	;# 
   224  0416                     	;# 
   225  0417                     	;# 
   226  041C                     	;# 
   227  041D                     	;# 
   228  041E                     	;# 
   229  0FE4                     	;# 
   230  0FE5                     	;# 
   231  0FE6                     	;# 
   232  0FE7                     	;# 
   233  0FE8                     	;# 
   234  0FE9                     	;# 
   235  0FEA                     	;# 
   236  0FEB                     	;# 
   237  0FED                     	;# 
   238  0FEE                     	;# 
   239  0FEF                     	;# 
   240  0000                     	;# 
   241  0001                     	;# 
   242  0002                     	;# 
   243  0003                     	;# 
   244  0004                     	;# 
   245  0005                     	;# 
   246  0006                     	;# 
   247  0007                     	;# 
   248  0008                     	;# 
   249  0009                     	;# 
   250  000A                     	;# 
   251  000B                     	;# 
   252  000C                     	;# 
   253  000D                     	;# 
   254  000E                     	;# 
   255  0011                     	;# 
   256  0012                     	;# 
   257  0013                     	;# 
   258  0014                     	;# 
   259  0015                     	;# 
   260  0016                     	;# 
   261  0016                     	;# 
   262  0017                     	;# 
   263  0018                     	;# 
   264  0019                     	;# 
   265  001A                     	;# 
   266  001B                     	;# 
   267  001C                     	;# 
   268  001E                     	;# 
   269  001F                     	;# 
   270  008C                     	;# 
   271  008D                     	;# 
   272  008E                     	;# 
   273  0091                     	;# 
   274  0092                     	;# 
   275  0093                     	;# 
   276  0094                     	;# 
   277  0095                     	;# 
   278  0096                     	;# 
   279  0097                     	;# 
   280  0098                     	;# 
   281  0099                     	;# 
   282  009A                     	;# 
   283  009B                     	;# 
   284  009B                     	;# 
   285  009C                     	;# 
   286  009D                     	;# 
   287  009E                     	;# 
   288  010C                     	;# 
   289  010D                     	;# 
   290  010E                     	;# 
   291  0111                     	;# 
   292  0112                     	;# 
   293  0113                     	;# 
   294  0114                     	;# 
   295  0115                     	;# 
   296  0116                     	;# 
   297  0117                     	;# 
   298  0118                     	;# 
   299  0119                     	;# 
   300  011A                     	;# 
   301  011B                     	;# 
   302  011D                     	;# 
   303  011E                     	;# 
   304  018C                     	;# 
   305  018D                     	;# 
   306  018E                     	;# 
   307  0191                     	;# 
   308  0191                     	;# 
   309  0192                     	;# 
   310  0193                     	;# 
   311  0193                     	;# 
   312  0193                     	;# 
   313  0194                     	;# 
   314  0195                     	;# 
   315  0196                     	;# 
   316  0199                     	;# 
   317  019A                     	;# 
   318  019B                     	;# 
   319  019B                     	;# 
   320  019C                     	;# 
   321  019D                     	;# 
   322  019E                     	;# 
   323  019F                     	;# 
   324  020C                     	;# 
   325  020D                     	;# 
   326  020E                     	;# 
   327  0211                     	;# 
   328  0211                     	;# 
   329  0212                     	;# 
   330  0212                     	;# 
   331  0213                     	;# 
   332  0213                     	;# 
   333  0214                     	;# 
   334  0214                     	;# 
   335  0215                     	;# 
   336  0215                     	;# 
   337  0215                     	;# 
   338  0216                     	;# 
   339  0216                     	;# 
   340  0217                     	;# 
   341  0217                     	;# 
   342  0219                     	;# 
   343  021A                     	;# 
   344  021B                     	;# 
   345  021C                     	;# 
   346  021D                     	;# 
   347  021E                     	;# 
   348  021F                     	;# 
   349  0291                     	;# 
   350  0291                     	;# 
   351  0292                     	;# 
   352  0293                     	;# 
   353  0294                     	;# 
   354  0295                     	;# 
   355  0295                     	;# 
   356  0296                     	;# 
   357  0298                     	;# 
   358  0298                     	;# 
   359  0299                     	;# 
   360  029A                     	;# 
   361  029B                     	;# 
   362  029C                     	;# 
   363  029D                     	;# 
   364  029E                     	;# 
   365  0311                     	;# 
   366  0311                     	;# 
   367  0312                     	;# 
   368  0313                     	;# 
   369  0318                     	;# 
   370  0318                     	;# 
   371  0319                     	;# 
   372  031A                     	;# 
   373  038C                     	;# 
   374  038D                     	;# 
   375  038E                     	;# 
   376  0391                     	;# 
   377  0392                     	;# 
   378  0393                     	;# 
   379  0394                     	;# 
   380  0395                     	;# 
   381  0396                     	;# 
   382  039A                     	;# 
   383  039C                     	;# 
   384  039D                     	;# 
   385  039E                     	;# 
   386  039F                     	;# 
   387  0415                     	;# 
   388  0416                     	;# 
   389  0417                     	;# 
   390  041C                     	;# 
   391  041D                     	;# 
   392  041E                     	;# 
   393  0FE4                     	;# 
   394  0FE5                     	;# 
   395  0FE6                     	;# 
   396  0FE7                     	;# 
   397  0FE8                     	;# 
   398  0FE9                     	;# 
   399  0FEA                     	;# 
   400  0FEB                     	;# 
   401  0FED                     	;# 
   402  0FEE                     	;# 
   403  0FEF                     	;# 
   404  0000                     	;# 
   405  0001                     	;# 
   406  0002                     	;# 
   407  0003                     	;# 
   408  0004                     	;# 
   409  0005                     	;# 
   410  0006                     	;# 
   411  0007                     	;# 
   412  0008                     	;# 
   413  0009                     	;# 
   414  000A                     	;# 
   415  000B                     	;# 
   416  000C                     	;# 
   417  000D                     	;# 
   418  000E                     	;# 
   419  0011                     	;# 
   420  0012                     	;# 
   421  0013                     	;# 
   422  0014                     	;# 
   423  0015                     	;# 
   424  0016                     	;# 
   425  0016                     	;# 
   426  0017                     	;# 
   427  0018                     	;# 
   428  0019                     	;# 
   429  001A                     	;# 
   430  001B                     	;# 
   431  001C                     	;# 
   432  001E                     	;# 
   433  001F                     	;# 
   434  008C                     	;# 
   435  008D                     	;# 
   436  008E                     	;# 
   437  0091                     	;# 
   438  0092                     	;# 
   439  0093                     	;# 
   440  0094                     	;# 
   441  0095                     	;# 
   442  0096                     	;# 
   443  0097                     	;# 
   444  0098                     	;# 
   445  0099                     	;# 
   446  009A                     	;# 
   447  009B                     	;# 
   448  009B                     	;# 
   449  009C                     	;# 
   450  009D                     	;# 
   451  009E                     	;# 
   452  010C                     	;# 
   453  010D                     	;# 
   454  010E                     	;# 
   455  0111                     	;# 
   456  0112                     	;# 
   457  0113                     	;# 
   458  0114                     	;# 
   459  0115                     	;# 
   460  0116                     	;# 
   461  0117                     	;# 
   462  0118                     	;# 
   463  0119                     	;# 
   464  011A                     	;# 
   465  011B                     	;# 
   466  011D                     	;# 
   467  011E                     	;# 
   468  018C                     	;# 
   469  018D                     	;# 
   470  018E                     	;# 
   471  0191                     	;# 
   472  0191                     	;# 
   473  0192                     	;# 
   474  0193                     	;# 
   475  0193                     	;# 
   476  0193                     	;# 
   477  0194                     	;# 
   478  0195                     	;# 
   479  0196                     	;# 
   480  0199                     	;# 
   481  019A                     	;# 
   482  019B                     	;# 
   483  019B                     	;# 
   484  019C                     	;# 
   485  019D                     	;# 
   486  019E                     	;# 
   487  019F                     	;# 
   488  020C                     	;# 
   489  020D                     	;# 
   490  020E                     	;# 
   491  0211                     	;# 
   492  0211                     	;# 
   493  0212                     	;# 
   494  0212                     	;# 
   495  0213                     	;# 
   496  0213                     	;# 
   497  0214                     	;# 
   498  0214                     	;# 
   499  0215                     	;# 
   500  0215                     	;# 
   501  0215                     	;# 
   502  0216                     	;# 
   503  0216                     	;# 
   504  0217                     	;# 
   505  0217                     	;# 
   506  0219                     	;# 
   507  021A                     	;# 
   508  021B                     	;# 
   509  021C                     	;# 
   510  021D                     	;# 
   511  021E                     	;# 
   512  021F                     	;# 
   513  0291                     	;# 
   514  0291                     	;# 
   515  0292                     	;# 
   516  0293                     	;# 
   517  0294                     	;# 
   518  0295                     	;# 
   519  0295                     	;# 
   520  0296                     	;# 
   521  0298                     	;# 
   522  0298                     	;# 
   523  0299                     	;# 
   524  029A                     	;# 
   525  029B                     	;# 
   526  029C                     	;# 
   527  029D                     	;# 
   528  029E                     	;# 
   529  0311                     	;# 
   530  0311                     	;# 
   531  0312                     	;# 
   532  0313                     	;# 
   533  0318                     	;# 
   534  0318                     	;# 
   535  0319                     	;# 
   536  031A                     	;# 
   537  038C                     	;# 
   538  038D                     	;# 
   539  038E                     	;# 
   540  0391                     	;# 
   541  0392                     	;# 
   542  0393                     	;# 
   543  0394                     	;# 
   544  0395                     	;# 
   545  0396                     	;# 
   546  039A                     	;# 
   547  039C                     	;# 
   548  039D                     	;# 
   549  039E                     	;# 
   550  039F                     	;# 
   551  0415                     	;# 
   552  0416                     	;# 
   553  0417                     	;# 
   554  041C                     	;# 
   555  041D                     	;# 
   556  041E                     	;# 
   557  0FE4                     	;# 
   558  0FE5                     	;# 
   559  0FE6                     	;# 
   560  0FE7                     	;# 
   561  0FE8                     	;# 
   562  0FE9                     	;# 
   563  0FEA                     	;# 
   564  0FEB                     	;# 
   565  0FED                     	;# 
   566  0FEE                     	;# 
   567  0FEF                     	;# 
   568  0000                     	;# 
   569  0001                     	;# 
   570  0002                     	;# 
   571  0003                     	;# 
   572  0004                     	;# 
   573  0005                     	;# 
   574  0006                     	;# 
   575  0007                     	;# 
   576  0008                     	;# 
   577  0009                     	;# 
   578  000A                     	;# 
   579  000B                     	;# 
   580  000C                     	;# 
   581  000D                     	;# 
   582  000E                     	;# 
   583  0011                     	;# 
   584  0012                     	;# 
   585  0013                     	;# 
   586  0014                     	;# 
   587  0015                     	;# 
   588  0016                     	;# 
   589  0016                     	;# 
   590  0017                     	;# 
   591  0018                     	;# 
   592  0019                     	;# 
   593  001A                     	;# 
   594  001B                     	;# 
   595  001C                     	;# 
   596  001E                     	;# 
   597  001F                     	;# 
   598  008C                     	;# 
   599  008D                     	;# 
   600  008E                     	;# 
   601  0091                     	;# 
   602  0092                     	;# 
   603  0093                     	;# 
   604  0094                     	;# 
   605  0095                     	;# 
   606  0096                     	;# 
   607  0097                     	;# 
   608  0098                     	;# 
   609  0099                     	;# 
   610  009A                     	;# 
   611  009B                     	;# 
   612  009B                     	;# 
   613  009C                     	;# 
   614  009D                     	;# 
   615  009E                     	;# 
   616  010C                     	;# 
   617  010D                     	;# 
   618  010E                     	;# 
   619  0111                     	;# 
   620  0112                     	;# 
   621  0113                     	;# 
   622  0114                     	;# 
   623  0115                     	;# 
   624  0116                     	;# 
   625  0117                     	;# 
   626  0118                     	;# 
   627  0119                     	;# 
   628  011A                     	;# 
   629  011B                     	;# 
   630  011D                     	;# 
   631  011E                     	;# 
   632  018C                     	;# 
   633  018D                     	;# 
   634  018E                     	;# 
   635  0191                     	;# 
   636  0191                     	;# 
   637  0192                     	;# 
   638  0193                     	;# 
   639  0193                     	;# 
   640  0193                     	;# 
   641  0194                     	;# 
   642  0195                     	;# 
   643  0196                     	;# 
   644  0199                     	;# 
   645  019A                     	;# 
   646  019B                     	;# 
   647  019B                     	;# 
   648  019C                     	;# 
   649  019D                     	;# 
   650  019E                     	;# 
   651  019F                     	;# 
   652  020C                     	;# 
   653  020D                     	;# 
   654  020E                     	;# 
   655  0211                     	;# 
   656  0211                     	;# 
   657  0212                     	;# 
   658  0212                     	;# 
   659  0213                     	;# 
   660  0213                     	;# 
   661  0214                     	;# 
   662  0214                     	;# 
   663  0215                     	;# 
   664  0215                     	;# 
   665  0215                     	;# 
   666  0216                     	;# 
   667  0216                     	;# 
   668  0217                     	;# 
   669  0217                     	;# 
   670  0219                     	;# 
   671  021A                     	;# 
   672  021B                     	;# 
   673  021C                     	;# 
   674  021D                     	;# 
   675  021E                     	;# 
   676  021F                     	;# 
   677  0291                     	;# 
   678  0291                     	;# 
   679  0292                     	;# 
   680  0293                     	;# 
   681  0294                     	;# 
   682  0295                     	;# 
   683  0295                     	;# 
   684  0296                     	;# 
   685  0298                     	;# 
   686  0298                     	;# 
   687  0299                     	;# 
   688  029A                     	;# 
   689  029B                     	;# 
   690  029C                     	;# 
   691  029D                     	;# 
   692  029E                     	;# 
   693  0311                     	;# 
   694  0311                     	;# 
   695  0312                     	;# 
   696  0313                     	;# 
   697  0318                     	;# 
   698  0318                     	;# 
   699  0319                     	;# 
   700  031A                     	;# 
   701  038C                     	;# 
   702  038D                     	;# 
   703  038E                     	;# 
   704  0391                     	;# 
   705  0392                     	;# 
   706  0393                     	;# 
   707  0394                     	;# 
   708  0395                     	;# 
   709  0396                     	;# 
   710  039A                     	;# 
   711  039C                     	;# 
   712  039D                     	;# 
   713  039E                     	;# 
   714  039F                     	;# 
   715  0415                     	;# 
   716  0416                     	;# 
   717  0417                     	;# 
   718  041C                     	;# 
   719  041D                     	;# 
   720  041E                     	;# 
   721  0FE4                     	;# 
   722  0FE5                     	;# 
   723  0FE6                     	;# 
   724  0FE7                     	;# 
   725  0FE8                     	;# 
   726  0FE9                     	;# 
   727  0FEA                     	;# 
   728  0FEB                     	;# 
   729  0FED                     	;# 
   730  0FEE                     	;# 
   731  0FEF                     	;# 
   732  0000                     	;# 
   733  0001                     	;# 
   734  0002                     	;# 
   735  0003                     	;# 
   736  0004                     	;# 
   737  0005                     	;# 
   738  0006                     	;# 
   739  0007                     	;# 
   740  0008                     	;# 
   741  0009                     	;# 
   742  000A                     	;# 
   743  000B                     	;# 
   744  000C                     	;# 
   745  000D                     	;# 
   746  000E                     	;# 
   747  0011                     	;# 
   748  0012                     	;# 
   749  0013                     	;# 
   750  0014                     	;# 
   751  0015                     	;# 
   752  0016                     	;# 
   753  0016                     	;# 
   754  0017                     	;# 
   755  0018                     	;# 
   756  0019                     	;# 
   757  001A                     	;# 
   758  001B                     	;# 
   759  001C                     	;# 
   760  001E                     	;# 
   761  001F                     	;# 
   762  008C                     	;# 
   763  008D                     	;# 
   764  008E                     	;# 
   765  0091                     	;# 
   766  0092                     	;# 
   767  0093                     	;# 
   768  0094                     	;# 
   769  0095                     	;# 
   770  0096                     	;# 
   771  0097                     	;# 
   772  0098                     	;# 
   773  0099                     	;# 
   774  009A                     	;# 
   775  009B                     	;# 
   776  009B                     	;# 
   777  009C                     	;# 
   778  009D                     	;# 
   779  009E                     	;# 
   780  010C                     	;# 
   781  010D                     	;# 
   782  010E                     	;# 
   783  0111                     	;# 
   784  0112                     	;# 
   785  0113                     	;# 
   786  0114                     	;# 
   787  0115                     	;# 
   788  0116                     	;# 
   789  0117                     	;# 
   790  0118                     	;# 
   791  0119                     	;# 
   792  011A                     	;# 
   793  011B                     	;# 
   794  011D                     	;# 
   795  011E                     	;# 
   796  018C                     	;# 
   797  018D                     	;# 
   798  018E                     	;# 
   799  0191                     	;# 
   800  0191                     	;# 
   801  0192                     	;# 
   802  0193                     	;# 
   803  0193                     	;# 
   804  0193                     	;# 
   805  0194                     	;# 
   806  0195                     	;# 
   807  0196                     	;# 
   808  0199                     	;# 
   809  019A                     	;# 
   810  019B                     	;# 
   811  019B                     	;# 
   812  019C                     	;# 
   813  019D                     	;# 
   814  019E                     	;# 
   815  019F                     	;# 
   816  020C                     	;# 
   817  020D                     	;# 
   818  020E                     	;# 
   819  0211                     	;# 
   820  0211                     	;# 
   821  0212                     	;# 
   822  0212                     	;# 
   823  0213                     	;# 
   824  0213                     	;# 
   825  0214                     	;# 
   826  0214                     	;# 
   827  0215                     	;# 
   828  0215                     	;# 
   829  0215                     	;# 
   830  0216                     	;# 
   831  0216                     	;# 
   832  0217                     	;# 
   833  0217                     	;# 
   834  0219                     	;# 
   835  021A                     	;# 
   836  021B                     	;# 
   837  021C                     	;# 
   838  021D                     	;# 
   839  021E                     	;# 
   840  021F                     	;# 
   841  0291                     	;# 
   842  0291                     	;# 
   843  0292                     	;# 
   844  0293                     	;# 
   845  0294                     	;# 
   846  0295                     	;# 
   847  0295                     	;# 
   848  0296                     	;# 
   849  0298                     	;# 
   850  0298                     	;# 
   851  0299                     	;# 
   852  029A                     	;# 
   853  029B                     	;# 
   854  029C                     	;# 
   855  029D                     	;# 
   856  029E                     	;# 
   857  0311                     	;# 
   858  0311                     	;# 
   859  0312                     	;# 
   860  0313                     	;# 
   861  0318                     	;# 
   862  0318                     	;# 
   863  0319                     	;# 
   864  031A                     	;# 
   865  038C                     	;# 
   866  038D                     	;# 
   867  038E                     	;# 
   868  0391                     	;# 
   869  0392                     	;# 
   870  0393                     	;# 
   871  0394                     	;# 
   872  0395                     	;# 
   873  0396                     	;# 
   874  039A                     	;# 
   875  039C                     	;# 
   876  039D                     	;# 
   877  039E                     	;# 
   878  039F                     	;# 
   879  0415                     	;# 
   880  0416                     	;# 
   881  0417                     	;# 
   882  041C                     	;# 
   883  041D                     	;# 
   884  041E                     	;# 
   885  0FE4                     	;# 
   886  0FE5                     	;# 
   887  0FE6                     	;# 
   888  0FE7                     	;# 
   889  0FE8                     	;# 
   890  0FE9                     	;# 
   891  0FEA                     	;# 
   892  0FEB                     	;# 
   893  0FED                     	;# 
   894  0FEE                     	;# 
   895  0FEF                     	;# 
   896  0000                     	;# 
   897  0001                     	;# 
   898  0002                     	;# 
   899  0003                     	;# 
   900  0004                     	;# 
   901  0005                     	;# 
   902  0006                     	;# 
   903  0007                     	;# 
   904  0008                     	;# 
   905  0009                     	;# 
   906  000A                     	;# 
   907  000B                     	;# 
   908  000C                     	;# 
   909  000D                     	;# 
   910  000E                     	;# 
   911  0011                     	;# 
   912  0012                     	;# 
   913  0013                     	;# 
   914  0014                     	;# 
   915  0015                     	;# 
   916  0016                     	;# 
   917  0016                     	;# 
   918  0017                     	;# 
   919  0018                     	;# 
   920  0019                     	;# 
   921  001A                     	;# 
   922  001B                     	;# 
   923  001C                     	;# 
   924  001E                     	;# 
   925  001F                     	;# 
   926  008C                     	;# 
   927  008D                     	;# 
   928  008E                     	;# 
   929  0091                     	;# 
   930  0092                     	;# 
   931  0093                     	;# 
   932  0094                     	;# 
   933  0095                     	;# 
   934  0096                     	;# 
   935  0097                     	;# 
   936  0098                     	;# 
   937  0099                     	;# 
   938  009A                     	;# 
   939  009B                     	;# 
   940  009B                     	;# 
   941  009C                     	;# 
   942  009D                     	;# 
   943  009E                     	;# 
   944  010C                     	;# 
   945  010D                     	;# 
   946  010E                     	;# 
   947  0111                     	;# 
   948  0112                     	;# 
   949  0113                     	;# 
   950  0114                     	;# 
   951  0115                     	;# 
   952  0116                     	;# 
   953  0117                     	;# 
   954  0118                     	;# 
   955  0119                     	;# 
   956  011A                     	;# 
   957  011B                     	;# 
   958  011D                     	;# 
   959  011E                     	;# 
   960  018C                     	;# 
   961  018D                     	;# 
   962  018E                     	;# 
   963  0191                     	;# 
   964  0191                     	;# 
   965  0192                     	;# 
   966  0193                     	;# 
   967  0193                     	;# 
   968  0193                     	;# 
   969  0194                     	;# 
   970  0195                     	;# 
   971  0196                     	;# 
   972  0199                     	;# 
   973  019A                     	;# 
   974  019B                     	;# 
   975  019B                     	;# 
   976  019C                     	;# 
   977  019D                     	;# 
   978  019E                     	;# 
   979  019F                     	;# 
   980  020C                     	;# 
   981  020D                     	;# 
   982  020E                     	;# 
   983  0211                     	;# 
   984  0211                     	;# 
   985  0212                     	;# 
   986  0212                     	;# 
   987  0213                     	;# 
   988  0213                     	;# 
   989  0214                     	;# 
   990  0214                     	;# 
   991  0215                     	;# 
   992  0215                     	;# 
   993  0215                     	;# 
   994  0216                     	;# 
   995  0216                     	;# 
   996  0217                     	;# 
   997  0217                     	;# 
   998  0219                     	;# 
   999  021A                     	;# 
  1000  021B                     	;# 
  1001  021C                     	;# 
  1002  021D                     	;# 
  1003  021E                     	;# 
  1004  021F                     	;# 
  1005  0291                     	;# 
  1006  0291                     	;# 
  1007  0292                     	;# 
  1008  0293                     	;# 
  1009  0294                     	;# 
  1010  0295                     	;# 
  1011  0295                     	;# 
  1012  0296                     	;# 
  1013  0298                     	;# 
  1014  0298                     	;# 
  1015  0299                     	;# 
  1016  029A                     	;# 
  1017  029B                     	;# 
  1018  029C                     	;# 
  1019  029D                     	;# 
  1020  029E                     	;# 
  1021  0311                     	;# 
  1022  0311                     	;# 
  1023  0312                     	;# 
  1024  0313                     	;# 
  1025  0318                     	;# 
  1026  0318                     	;# 
  1027  0319                     	;# 
  1028  031A                     	;# 
  1029  038C                     	;# 
  1030  038D                     	;# 
  1031  038E                     	;# 
  1032  0391                     	;# 
  1033  0392                     	;# 
  1034  0393                     	;# 
  1035  0394                     	;# 
  1036  0395                     	;# 
  1037  0396                     	;# 
  1038  039A                     	;# 
  1039  039C                     	;# 
  1040  039D                     	;# 
  1041  039E                     	;# 
  1042  039F                     	;# 
  1043  0415                     	;# 
  1044  0416                     	;# 
  1045  0417                     	;# 
  1046  041C                     	;# 
  1047  041D                     	;# 
  1048  041E                     	;# 
  1049  0FE4                     	;# 
  1050  0FE5                     	;# 
  1051  0FE6                     	;# 
  1052  0FE7                     	;# 
  1053  0FE8                     	;# 
  1054  0FE9                     	;# 
  1055  0FEA                     	;# 
  1056  0FEB                     	;# 
  1057  0FED                     	;# 
  1058  0FEE                     	;# 
  1059  0FEF                     	;# 
  1060  0000                     	;# 
  1061  0001                     	;# 
  1062  0002                     	;# 
  1063  0003                     	;# 
  1064  0004                     	;# 
  1065  0005                     	;# 
  1066  0006                     	;# 
  1067  0007                     	;# 
  1068  0008                     	;# 
  1069  0009                     	;# 
  1070  000A                     	;# 
  1071  000B                     	;# 
  1072  000C                     	;# 
  1073  000D                     	;# 
  1074  000E                     	;# 
  1075  0011                     	;# 
  1076  0012                     	;# 
  1077  0013                     	;# 
  1078  0014                     	;# 
  1079  0015                     	;# 
  1080  0016                     	;# 
  1081  0016                     	;# 
  1082  0017                     	;# 
  1083  0018                     	;# 
  1084  0019                     	;# 
  1085  001A                     	;# 
  1086  001B                     	;# 
  1087  001C                     	;# 
  1088  001E                     	;# 
  1089  001F                     	;# 
  1090  008C                     	;# 
  1091  008D                     	;# 
  1092  008E                     	;# 
  1093  0091                     	;# 
  1094  0092                     	;# 
  1095  0093                     	;# 
  1096  0094                     	;# 
  1097  0095                     	;# 
  1098  0096                     	;# 
  1099  0097                     	;# 
  1100  0098                     	;# 
  1101  0099                     	;# 
  1102  009A                     	;# 
  1103  009B                     	;# 
  1104  009B                     	;# 
  1105  009C                     	;# 
  1106  009D                     	;# 
  1107  009E                     	;# 
  1108  010C                     	;# 
  1109  010D                     	;# 
  1110  010E                     	;# 
  1111  0111                     	;# 
  1112  0112                     	;# 
  1113  0113                     	;# 
  1114  0114                     	;# 
  1115  0115                     	;# 
  1116  0116                     	;# 
  1117  0117                     	;# 
  1118  0118                     	;# 
  1119  0119                     	;# 
  1120  011A                     	;# 
  1121  011B                     	;# 
  1122  011D                     	;# 
  1123  011E                     	;# 
  1124  018C                     	;# 
  1125  018D                     	;# 
  1126  018E                     	;# 
  1127  0191                     	;# 
  1128  0191                     	;# 
  1129  0192                     	;# 
  1130  0193                     	;# 
  1131  0193                     	;# 
  1132  0193                     	;# 
  1133  0194                     	;# 
  1134  0195                     	;# 
  1135  0196                     	;# 
  1136  0199                     	;# 
  1137  019A                     	;# 
  1138  019B                     	;# 
  1139  019B                     	;# 
  1140  019C                     	;# 
  1141  019D                     	;# 
  1142  019E                     	;# 
  1143  019F                     	;# 
  1144  020C                     	;# 
  1145  020D                     	;# 
  1146  020E                     	;# 
  1147  0211                     	;# 
  1148  0211                     	;# 
  1149  0212                     	;# 
  1150  0212                     	;# 
  1151  0213                     	;# 
  1152  0213                     	;# 
  1153  0214                     	;# 
  1154  0214                     	;# 
  1155  0215                     	;# 
  1156  0215                     	;# 
  1157  0215                     	;# 
  1158  0216                     	;# 
  1159  0216                     	;# 
  1160  0217                     	;# 
  1161  0217                     	;# 
  1162  0219                     	;# 
  1163  021A                     	;# 
  1164  021B                     	;# 
  1165  021C                     	;# 
  1166  021D                     	;# 
  1167  021E                     	;# 
  1168  021F                     	;# 
  1169  0291                     	;# 
  1170  0291                     	;# 
  1171  0292                     	;# 
  1172  0293                     	;# 
  1173  0294                     	;# 
  1174  0295                     	;# 
  1175  0295                     	;# 
  1176  0296                     	;# 
  1177  0298                     	;# 
  1178  0298                     	;# 
  1179  0299                     	;# 
  1180  029A                     	;# 
  1181  029B                     	;# 
  1182  029C                     	;# 
  1183  029D                     	;# 
  1184  029E                     	;# 
  1185  0311                     	;# 
  1186  0311                     	;# 
  1187  0312                     	;# 
  1188  0313                     	;# 
  1189  0318                     	;# 
  1190  0318                     	;# 
  1191  0319                     	;# 
  1192  031A                     	;# 
  1193  038C                     	;# 
  1194  038D                     	;# 
  1195  038E                     	;# 
  1196  0391                     	;# 
  1197  0392                     	;# 
  1198  0393                     	;# 
  1199  0394                     	;# 
  1200  0395                     	;# 
  1201  0396                     	;# 
  1202  039A                     	;# 
  1203  039C                     	;# 
  1204  039D                     	;# 
  1205  039E                     	;# 
  1206  039F                     	;# 
  1207  0415                     	;# 
  1208  0416                     	;# 
  1209  0417                     	;# 
  1210  041C                     	;# 
  1211  041D                     	;# 
  1212  041E                     	;# 
  1213  0FE4                     	;# 
  1214  0FE5                     	;# 
  1215  0FE6                     	;# 
  1216  0FE7                     	;# 
  1217  0FE8                     	;# 
  1218  0FE9                     	;# 
  1219  0FEA                     	;# 
  1220  0FEB                     	;# 
  1221  0FED                     	;# 
  1222  0FEE                     	;# 
  1223  0FEF                     	;# 
  1224                           
  1225                           	psect	idataBANK1
  1226  0003                     __pidataBANK1:	
  1227                           
  1228                           ;initializer for _Transmit_stall
  1229  0003  3401               	retlw	1
  1230                           
  1231                           	psect	stringtext
  1232  1000                     __pstringtext:	
  1233  1000                     _dpowers:	
  1234  1000  3401               	retlw	1
  1235  1001  3400               	retlw	0
  1236  1002  3400               	retlw	0
  1237  1003  3400               	retlw	0
  1238  1004  340A               	retlw	10
  1239  1005  3400               	retlw	0
  1240  1006  3400               	retlw	0
  1241  1007  3400               	retlw	0
  1242  1008  3464               	retlw	100
  1243  1009  3400               	retlw	0
  1244  100A  3400               	retlw	0
  1245  100B  3400               	retlw	0
  1246  100C  34E8               	retlw	232
  1247  100D  3403               	retlw	3
  1248  100E  3400               	retlw	0
  1249  100F  3400               	retlw	0
  1250  1010  3410               	retlw	16
  1251  1011  3427               	retlw	39
  1252  1012  3400               	retlw	0
  1253  1013  3400               	retlw	0
  1254  1014  34A0               	retlw	160
  1255  1015  3486               	retlw	134
  1256  1016  3401               	retlw	1
  1257  1017  3400               	retlw	0
  1258  1018  3440               	retlw	64
  1259  1019  3442               	retlw	66
  1260  101A  340F               	retlw	15
  1261  101B  3400               	retlw	0
  1262  101C  3480               	retlw	128
  1263  101D  3496               	retlw	150
  1264  101E  3498               	retlw	152
  1265  101F  3400               	retlw	0
  1266  1020  3400               	retlw	0
  1267  1021  34E1               	retlw	225
  1268  1022  34F5               	retlw	245
  1269  1023  3405               	retlw	5
  1270  1024  3400               	retlw	0
  1271  1025  34CA               	retlw	202
  1272  1026  349A               	retlw	154
  1273  1027  343B               	retlw	59
  1274  1028                     __end_of_dpowers:	
  1275  1028                     __npowers_:	
  1276  1028  3400               	retlw	0
  1277  1029  3480               	retlw	128
  1278  102A  343F               	retlw	63
  1279  102B  34CD               	retlw	205
  1280  102C  34CC               	retlw	204
  1281  102D  343D               	retlw	61
  1282  102E  34D7               	retlw	215
  1283  102F  3423               	retlw	35
  1284  1030  343C               	retlw	60
  1285  1031  3412               	retlw	18
  1286  1032  3483               	retlw	131
  1287  1033  343A               	retlw	58
  1288  1034  34B7               	retlw	183
  1289  1035  34D1               	retlw	209
  1290  1036  3438               	retlw	56
  1291  1037  34C6               	retlw	198
  1292  1038  3427               	retlw	39
  1293  1039  3437               	retlw	55
  1294  103A  3438               	retlw	56
  1295  103B  3486               	retlw	134
  1296  103C  3435               	retlw	53
  1297  103D  34C0               	retlw	192
  1298  103E  34D6               	retlw	214
  1299  103F  3433               	retlw	51
  1300  1040  34CC               	retlw	204
  1301  1041  342B               	retlw	43
  1302  1042  3432               	retlw	50
  1303  1043  3470               	retlw	112
  1304  1044  3489               	retlw	137
  1305  1045  3430               	retlw	48
  1306  1046  34E7               	retlw	231
  1307  1047  34DB               	retlw	219
  1308  1048  342E               	retlw	46
  1309  1049  34E5               	retlw	229
  1310  104A  343C               	retlw	60
  1311  104B  341E               	retlw	30
  1312  104C  3442               	retlw	66
  1313  104D  34A2               	retlw	162
  1314  104E  340D               	retlw	13
  1315  104F                     __end_of__npowers_:	
  1316  104F                     __powers_:	
  1317  104F  3400               	retlw	0
  1318  1050  3480               	retlw	128
  1319  1051  343F               	retlw	63
  1320  1052  3400               	retlw	0
  1321  1053  3420               	retlw	32
  1322  1054  3441               	retlw	65
  1323  1055  3400               	retlw	0
  1324  1056  34C8               	retlw	200
  1325  1057  3442               	retlw	66
  1326  1058  3400               	retlw	0
  1327  1059  347A               	retlw	122
  1328  105A  3444               	retlw	68
  1329  105B  3440               	retlw	64
  1330  105C  341C               	retlw	28
  1331  105D  3446               	retlw	70
  1332  105E  3450               	retlw	80
  1333  105F  34C3               	retlw	195
  1334  1060  3447               	retlw	71
  1335  1061  3424               	retlw	36
  1336  1062  3474               	retlw	116
  1337  1063  3449               	retlw	73
  1338  1064  3497               	retlw	151
  1339  1065  3418               	retlw	24
  1340  1066  344B               	retlw	75
  1341  1067  34BC               	retlw	188
  1342  1068  34BE               	retlw	190
  1343  1069  344C               	retlw	76
  1344  106A  346B               	retlw	107
  1345  106B  346E               	retlw	110
  1346  106C  344E               	retlw	78
  1347  106D  3403               	retlw	3
  1348  106E  3415               	retlw	21
  1349  106F  3450               	retlw	80
  1350  1070  3479               	retlw	121
  1351  1071  34AD               	retlw	173
  1352  1072  3460               	retlw	96
  1353  1073  34F3               	retlw	243
  1354  1074  3449               	retlw	73
  1355  1075  3471               	retlw	113
  1356  1076                     __end_of__powers_:	
  1357  000B                     _INTCON	set	11
  1358  000B                     _INTCONbits	set	11
  1359  0011                     _PIR1bits	set	17
  1360  000C                     _PORTAbits	set	12
  1361  000E                     _PORTCbits	set	14
  1362  001B                     _PR2	set	27
  1363  001C                     _T2CON	set	28
  1364  001C                     _T2CONbits	set	28
  1365  001A                     _TMR2	set	26
  1366  009D                     _ADCON0bits	set	157
  1367  009E                     _ADCON1bits	set	158
  1368  009B                     _ADRESL	set	155
  1369  0091                     _PIE1bits	set	145
  1370  008C                     _TRISAbits	set	140
  1371  008E                     _TRISCbits	set	142
  1372  0117                     _FVRCONbits	set	279
  1373  019B                     _SPBRG	set	411
  1374  018C                     _ANSELAbits	set	396
  1375  018E                     _ANSELCbits	set	398
  1376  0199                     _RCREG	set	409
  1377  019D                     _RCSTA	set	413
  1378  019D                     _RCSTAbits	set	413
  1379  019A                     _TXREG	set	410
  1380  019E                     _TXSTA	set	414
  1381  1076                     STR_2:	
  1382  1076  3441               	retlw	65	;'A'
  1383  1077  3454               	retlw	84	;'T'
  1384  1078  342B               	retlw	43	;'+'
  1385  1079  3444               	retlw	68	;'D'
  1386  107A  344D               	retlw	77	;'M'
  1387  107B  344F               	retlw	79	;'O'
  1388  107C  3453               	retlw	83	;'S'
  1389  107D  3445               	retlw	69	;'E'
  1390  107E  3454               	retlw	84	;'T'
  1391  107F  3447               	retlw	71	;'G'
  1392  1080  3452               	retlw	82	;'R'
  1393  1081  344F               	retlw	79	;'O'
  1394  1082  3455               	retlw	85	;'U'
  1395  1083  3450               	retlw	80	;'P'
  1396  1084  343D               	retlw	61	;'='
  1397  1085  3425               	retlw	37	;'%'
  1398  1086  3464               	retlw	100	;'d'
  1399  1087  342C               	retlw	44	;','
  1400  1088  3425               	retlw	37	;'%'
  1401  1089  3466               	retlw	102	;'f'
  1402  108A  342C               	retlw	44	;','
  1403  108B  3425               	retlw	37	;'%'
  1404  108C  3466               	retlw	102	;'f'
  1405  108D  342C               	retlw	44	;','
  1406  108E  3425               	retlw	37	;'%'
  1407  108F  3464               	retlw	100	;'d'
  1408  1090  342C               	retlw	44	;','
  1409  1091  3425               	retlw	37	;'%'
  1410  1092  3464               	retlw	100	;'d'
  1411  1093  342C               	retlw	44	;','
  1412  1094  3425               	retlw	37	;'%'
  1413  1095  3464               	retlw	100	;'d'
  1414  1096  342C               	retlw	44	;','
  1415  1097  3425               	retlw	37	;'%'
  1416  1098  3464               	retlw	100	;'d'
  1417  1099  3400               	retlw	0
  1418  109A                     STR_6:	
  1419  109A  3441               	retlw	65	;'A'
  1420  109B  3454               	retlw	84	;'T'
  1421  109C  342B               	retlw	43	;'+'
  1422  109D  3444               	retlw	68	;'D'
  1423  109E  344D               	retlw	77	;'M'
  1424  109F  344F               	retlw	79	;'O'
  1425  10A0  3453               	retlw	83	;'S'
  1426  10A1  3445               	retlw	69	;'E'
  1427  10A2  3454               	retlw	84	;'T'
  1428  10A3  344D               	retlw	77	;'M'
  1429  10A4  3449               	retlw	73	;'I'
  1430  10A5  3443               	retlw	67	;'C'
  1431  10A6  343D               	retlw	61	;'='
  1432  10A7  3425               	retlw	37	;'%'
  1433  10A8  3463               	retlw	99	;'c'
  1434  10A9  342C               	retlw	44	;','
  1435  10AA  3425               	retlw	37	;'%'
  1436  10AB  3463               	retlw	99	;'c'
  1437  10AC  342C               	retlw	44	;','
  1438  10AD  3425               	retlw	37	;'%'
  1439  10AE  3463               	retlw	99	;'c'
  1440  10AF  3400               	retlw	0
  1441  10B0                     STR_3:	
  1442  10B0  3441               	retlw	65	;'A'
  1443  10B1  3454               	retlw	84	;'T'
  1444  10B2  342B               	retlw	43	;'+'
  1445  10B3  3444               	retlw	68	;'D'
  1446  10B4  344D               	retlw	77	;'M'
  1447  10B5  344F               	retlw	79	;'O'
  1448  10B6  3441               	retlw	65	;'A'
  1449  10B7  3455               	retlw	85	;'U'
  1450  10B8  3454               	retlw	84	;'T'
  1451  10B9  344F               	retlw	79	;'O'
  1452  10BA  3450               	retlw	80	;'P'
  1453  10BB  344F               	retlw	79	;'O'
  1454  10BC  3457               	retlw	87	;'W'
  1455  10BD  3443               	retlw	67	;'C'
  1456  10BE  344F               	retlw	79	;'O'
  1457  10BF  344E               	retlw	78	;'N'
  1458  10C0  3454               	retlw	84	;'T'
  1459  10C1  3452               	retlw	82	;'R'
  1460  10C2  343D               	retlw	61	;'='
  1461  10C3  3425               	retlw	37	;'%'
  1462  10C4  3463               	retlw	99	;'c'
  1463  10C5  3400               	retlw	0
  1464  10C6                     STR_4:	
  1465  10C6  3441               	retlw	65	;'A'
  1466  10C7  3454               	retlw	84	;'T'
  1467  10C8  342B               	retlw	43	;'+'
  1468  10C9  3444               	retlw	68	;'D'
  1469  10CA  344D               	retlw	77	;'M'
  1470  10CB  344F               	retlw	79	;'O'
  1471  10CC  3453               	retlw	83	;'S'
  1472  10CD  3445               	retlw	69	;'E'
  1473  10CE  3454               	retlw	84	;'T'
  1474  10CF  3456               	retlw	86	;'V'
  1475  10D0  344F               	retlw	79	;'O'
  1476  10D1  344C               	retlw	76	;'L'
  1477  10D2  3455               	retlw	85	;'U'
  1478  10D3  344D               	retlw	77	;'M'
  1479  10D4  3445               	retlw	69	;'E'
  1480  10D5  343D               	retlw	61	;'='
  1481  10D6  3425               	retlw	37	;'%'
  1482  10D7  3463               	retlw	99	;'c'
  1483  10D8  3400               	retlw	0
  1484  10D9                     STR_1:	
  1485  10D9  3441               	retlw	65	;'A'
  1486  10DA  3454               	retlw	84	;'T'
  1487  10DB  342B               	retlw	43	;'+'
  1488  10DC  3444               	retlw	68	;'D'
  1489  10DD  344D               	retlw	77	;'M'
  1490  10DE  344F               	retlw	79	;'O'
  1491  10DF  3443               	retlw	67	;'C'
  1492  10E0  344F               	retlw	79	;'O'
  1493  10E1  344E               	retlw	78	;'N'
  1494  10E2  344E               	retlw	78	;'N'
  1495  10E3  3445               	retlw	69	;'E'
  1496  10E4  3443               	retlw	67	;'C'
  1497  10E5  3454               	retlw	84	;'T'
  1498  10E6  3400               	retlw	0
  1499  10C6                     
  1500                           	psect	cinit
  1501  002A                     start_initialization:	
  1502                           ; #config settings
  1503                           
  1504  002A                     __initialization:	
  1505                           
  1506                           ; Clear objects allocated to BANK1
  1507  002A  30CC               	movlw	low __pbssBANK1
  1508  002B  0084               	movwf	4
  1509  002C  3000               	movlw	high __pbssBANK1
  1510  002D  0085               	movwf	5
  1511  002E  3022               	movlw	34
  1512  002F  3192  2257  3180   	fcall	clear_ram0
  1513                           
  1514                           ; Clear objects allocated to BANK2
  1515  0032  3020               	movlw	low __pbssBANK2
  1516  0033  0084               	movwf	4
  1517  0034  3001               	movlw	high __pbssBANK2
  1518  0035  0085               	movwf	5
  1519  0036  3034               	movlw	52
  1520  0037  3192  2257  3180   	fcall	clear_ram0
  1521                           
  1522                           ; Initialize objects allocated to BANK1
  1523  003A  0021               	movlb	1	; select bank1
  1524  003B  3180  2003         	fcall	__pidataBANK1	;fetch initializer
  1525  003D  00EE               	movwf	__pdataBANK1& (0+127)
  1526  003E                     end_of_initialization:	
  1527                           ;End of C runtime variable initialization code
  1528                           
  1529  003E                     __end_of__initialization:	
  1530  003E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1531  003F  0020               	movlb	0
  1532  0040  3193  2B5D         	ljmp	_main	;jump to C main() function
  1533                           
  1534                           	psect	bssBANK1
  1535  00CC                     __pbssBANK1:	
  1536  00CC                     _eusart1RxBuffer:	
  1537  00CC                     	ds	8
  1538  00D4                     _eusart1TxBuffer:	
  1539  00D4                     	ds	8
  1540  00DC                     _Battery:	
  1541  00DC                     	ds	3
  1542  00DF                     _count:	
  1543  00DF                     	ds	2
  1544  00E1                     _ticker:	
  1545  00E1                     	ds	2
  1546  00E3                     _time:	
  1547  00E3                     	ds	2
  1548  00E5                     _Mode:	
  1549  00E5                     	ds	1
  1550  00E6                     _Shutdown:	
  1551  00E6                     	ds	1
  1552  00E7                     _Talking:	
  1553  00E7                     	ds	1
  1554  00E8                     _eusart1RxCount:	
  1555  00E8                     	ds	1
  1556  00E9                     _eusart1RxHead:	
  1557  00E9                     	ds	1
  1558  00EA                     _eusart1RxTail:	
  1559  00EA                     	ds	1
  1560  00EB                     _eusart1TxBufferRemaining:	
  1561  00EB                     	ds	1
  1562  00EC                     _eusart1TxHead:	
  1563  00EC                     	ds	1
  1564  00ED                     _eusart1TxTail:	
  1565  00ED                     	ds	1
  1566                           
  1567                           	psect	dataBANK1
  1568  00EE                     __pdataBANK1:	
  1569  00EE                     _Transmit_stall:	
  1570  00EE                     	ds	1
  1571                           
  1572                           	psect	bssBANK2
  1573  0120                     __pbssBANK2:	
  1574  0120                     _input_buffer:	
  1575  0120                     	ds	26
  1576  013A                     _output_buffer:	
  1577  013A                     	ds	26
  1578                           
  1579                           	psect	clrtext
  1580  1257                     clear_ram0:	
  1581                           ;	Called with FSR0 containing the base address, and
  1582                           ;	WREG with the size to clear
  1583                           
  1584  1257  0064               	clrwdt	;clear the watchdog before getting into this loop
  1585  1258                     clrloop0:	
  1586  1258  0180               	clrf	0	;clear RAM location pointed to by FSR
  1587  1259  3101               	addfsr 0,1
  1588  125A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1589  125B  2A58               	goto	clrloop0	;have we reached the end yet?
  1590  125C  3400               	retlw	0	;all done for this memory range, return
  1591                           
  1592                           	psect	cstackBANK1
  1593  00A0                     __pcstackBANK1:	
  1594  00A0                     ?_printf:	
  1595  00A0                     printf@f:	
  1596                           ; 2 bytes @ 0x0
  1597                           
  1598                           
  1599                           ; 2 bytes @ 0x0
  1600  00A0                     	ds	18
  1601  00B2                     _printf$1277:	
  1602                           
  1603                           ; 3 bytes @ 0x12
  1604  00B2                     	ds	3
  1605  00B5                     printf@flag:	
  1606                           
  1607                           ; 2 bytes @ 0x15
  1608  00B5                     	ds	2
  1609  00B7                     printf@ap:	
  1610                           
  1611                           ; 1 bytes @ 0x17
  1612  00B7                     	ds	1
  1613  00B8                     printf@prec:	
  1614                           
  1615                           ; 2 bytes @ 0x18
  1616  00B8                     	ds	2
  1617  00BA                     printf@val:	
  1618                           
  1619                           ; 4 bytes @ 0x1A
  1620  00BA                     	ds	4
  1621  00BE                     printf@exp:	
  1622                           
  1623                           ; 2 bytes @ 0x1E
  1624  00BE                     	ds	2
  1625  00C0                     printf@tmpval:	
  1626                           
  1627                           ; 4 bytes @ 0x20
  1628  00C0                     	ds	4
  1629  00C4                     printf@fval:	
  1630                           
  1631                           ; 3 bytes @ 0x24
  1632  00C4                     	ds	3
  1633  00C7                     printf@c:	
  1634                           
  1635                           ; 1 bytes @ 0x27
  1636  00C7                     	ds	1
  1637  00C8                     ??_SetMIC:	
  1638                           
  1639                           ; 1 bytes @ 0x28
  1640  00C8                     	ds	4
  1641                           
  1642                           	psect	cstackCOMMON
  1643  0070                     __pcstackCOMMON:	
  1644  0070                     ?_Start:	
  1645  0070                     ?_RadioBegin:	
  1646                           ; 1 bytes @ 0x0
  1647                           
  1648  0070                     ?_TMR2_StartTimer:	
  1649                           ; 1 bytes @ 0x0
  1650                           
  1651  0070                     ?_LEDOff:	
  1652                           ; 1 bytes @ 0x0
  1653                           
  1654  0070                     ?_RadioOperation:	
  1655                           ; 1 bytes @ 0x0
  1656                           
  1657  0070                     ?_ADC_Initialize:	
  1658                           ; 1 bytes @ 0x0
  1659                           
  1660  0070                     ?_EUSART1_Initialize:	
  1661                           ; 1 bytes @ 0x0
  1662                           
  1663  0070                     ?_INTERRUPT_Initialize:	
  1664                           ; 1 bytes @ 0x0
  1665                           
  1666  0070                     ?_TMR2_Initialize:	
  1667                           ; 1 bytes @ 0x0
  1668                           
  1669  0070                     ?_TMR2_ISR:	
  1670                           ; 1 bytes @ 0x0
  1671                           
  1672  0070                     ??_TMR2_ISR:	
  1673                           ; 1 bytes @ 0x0
  1674                           
  1675  0070                     ?_EUSART1_Receive_ISR:	
  1676                           ; 1 bytes @ 0x0
  1677                           
  1678  0070                     ?_EUSART1_Transmit_ISR:	
  1679                           ; 1 bytes @ 0x0
  1680                           
  1681  0070                     ?_UART_buff_init:	
  1682                           ; 1 bytes @ 0x0
  1683                           
  1684  0070                     ?_SetCommandMode:	
  1685                           ; 1 bytes @ 0x0
  1686                           
  1687  0070                     ?_SetFrequency:	
  1688                           ; 1 bytes @ 0x0
  1689                           
  1690  0070                     ?_SetPowerSave:	
  1691                           ; 1 bytes @ 0x0
  1692                           
  1693  0070                     ?_SetVolume:	
  1694                           ; 1 bytes @ 0x0
  1695                           
  1696  0070                     ?_SetADCChannel:	
  1697                           ; 1 bytes @ 0x0
  1698                           
  1699  0070                     ?_INTERRUPT_InterruptManager:	
  1700                           ; 1 bytes @ 0x0
  1701                           
  1702  0070                     ?_ReadCharger:	
  1703                           ; 1 bytes @ 0x0
  1704                           
  1705  0070                     ?_TMR2_StopTimer:	
  1706                           ; 1 bytes @ 0x0
  1707                           
  1708  0070                     ?_ClearTicker:	
  1709                           ; 1 bytes @ 0x0
  1710                           
  1711  0070                     ?_UART_buff_get:	
  1712                           ; 1 bytes @ 0x0
  1713                           
  1714  0070                     ?_Send_put:	
  1715                           ; 1 bytes @ 0x0
  1716                           
  1717  0070                     ?_putch:	
  1718                           ; 1 bytes @ 0x0
  1719                           
  1720  0070                     ?_SR_FRSTalk:	
  1721                           ; 1 bytes @ 0x0
  1722                           
  1723  0070                     ?_SR_FRSPowerDown:	
  1724                           ; 1 bytes @ 0x0
  1725                           
  1726  0070                     ?_SR_FRSStart:	
  1727                           ; 1 bytes @ 0x0
  1728                           
  1729  0070                     ?i1_UART_buff_get:	
  1730                           ; 1 bytes @ 0x0
  1731                           
  1732  0070                     ?_main:	
  1733                           ; 1 bytes @ 0x0
  1734                           
  1735  0070                     ?_GetTicker:	
  1736                           ; 2 bytes @ 0x0
  1737                           
  1738  0070                     ?_UART_buff_size:	
  1739                           ; 2 bytes @ 0x0
  1740                           
  1741  0070                     ?i1_UART_buff_modulo_inc:	
  1742                           ; 2 bytes @ 0x0
  1743                           
  1744  0070                     i1UART_buff_modulo_inc@value:	
  1745                           ; 2 bytes @ 0x0
  1746                           
  1747                           
  1748                           ; 2 bytes @ 0x0
  1749  0070                     	ds	2
  1750  0072                     i1UART_buff_modulo_inc@modulus:	
  1751                           
  1752                           ; 2 bytes @ 0x2
  1753  0072                     	ds	1
  1754  0073                     ??_UART_buff_size:	
  1755  0073                     UART_buff_size@_this:	
  1756                           ; 1 bytes @ 0x3
  1757                           
  1758                           
  1759                           ; 1 bytes @ 0x3
  1760  0073                     	ds	1
  1761  0074                     ??i1_UART_buff_modulo_inc:	
  1762  0074                     i1UART_buff_modulo_inc@my_value:	
  1763                           ; 1 bytes @ 0x4
  1764                           
  1765                           
  1766                           ; 2 bytes @ 0x4
  1767  0074                     	ds	2
  1768  0076                     ?i1_UART_buff_put:	
  1769  0076                     ??i1_UART_buff_get:	
  1770                           ; 1 bytes @ 0x6
  1771                           
  1772  0076                     i1UART_buff_put@c:	
  1773                           ; 1 bytes @ 0x6
  1774                           
  1775                           
  1776                           ; 1 bytes @ 0x6
  1777  0076                     	ds	1
  1778  0077                     ??i1_UART_buff_put:	
  1779                           
  1780                           ; 1 bytes @ 0x7
  1781  0077                     	ds	2
  1782  0079                     i1UART_buff_get@c:	
  1783                           
  1784                           ; 1 bytes @ 0x9
  1785  0079                     	ds	1
  1786  007A                     i1UART_buff_put@_this:	
  1787  007A                     i1UART_buff_get@_this:	
  1788                           ; 1 bytes @ 0xA
  1789                           
  1790                           
  1791                           ; 1 bytes @ 0xA
  1792  007A                     	ds	1
  1793  007B                     ??_EUSART1_Receive_ISR:	
  1794  007B                     ??_EUSART1_Transmit_ISR:	
  1795                           ; 1 bytes @ 0xB
  1796                           
  1797                           
  1798                           ; 1 bytes @ 0xB
  1799  007B                     	ds	1
  1800  007C                     EUSART1_Receive_ISR@data:	
  1801                           
  1802                           ; 1 bytes @ 0xC
  1803  007C                     	ds	1
  1804  007D                     ??_INTERRUPT_InterruptManager:	
  1805                           
  1806                           ; 1 bytes @ 0xD
  1807  007D                     	ds	1
  1808                           
  1809                           	psect	cstackBANK0
  1810  0020                     __pcstackBANK0:	
  1811  0020                     ?___ftge:	
  1812  0020                     ??_TMR2_StartTimer:	
  1813                           ; 1 bit 
  1814                           
  1815  0020                     ??_LEDOff:	
  1816                           ; 1 bytes @ 0x0
  1817                           
  1818  0020                     ?_Delay:	
  1819                           ; 1 bytes @ 0x0
  1820                           
  1821  0020                     ??_ADC_Initialize:	
  1822                           ; 1 bytes @ 0x0
  1823                           
  1824  0020                     ??_INTERRUPT_Initialize:	
  1825                           ; 1 bytes @ 0x0
  1826                           
  1827  0020                     ??_TMR2_Initialize:	
  1828                           ; 1 bytes @ 0x0
  1829                           
  1830  0020                     ?_memset:	
  1831                           ; 1 bytes @ 0x0
  1832                           
  1833  0020                     ??_SetADCChannel:	
  1834                           ; 1 bytes @ 0x0
  1835                           
  1836  0020                     ??_ReadCharger:	
  1837                           ; 1 bytes @ 0x0
  1838                           
  1839  0020                     ??_TMR2_StopTimer:	
  1840                           ; 1 bytes @ 0x0
  1841                           
  1842  0020                     ??_ClearTicker:	
  1843                           ; 1 bytes @ 0x0
  1844                           
  1845  0020                     ??_GetTicker:	
  1846                           ; 1 bytes @ 0x0
  1847                           
  1848  0020                     ??_SR_FRSTalk:	
  1849                           ; 1 bytes @ 0x0
  1850                           
  1851  0020                     ??_SR_FRSPowerDown:	
  1852                           ; 1 bytes @ 0x0
  1853                           
  1854  0020                     ?_UART_buff_modulo_inc:	
  1855                           ; 1 bytes @ 0x0
  1856                           
  1857  0020                     ?___awmod:	
  1858                           ; 2 bytes @ 0x0
  1859                           
  1860  0020                     ?___ftpack:	
  1861                           ; 2 bytes @ 0x0
  1862                           
  1863  0020                     ?___ftneg:	
  1864                           ; 3 bytes @ 0x0
  1865                           
  1866  0020                     ?__tdiv_to_l_:	
  1867                           ; 3 bytes @ 0x0
  1868                           
  1869  0020                     ?__div_to_l_:	
  1870                           ; 4 bytes @ 0x0
  1871                           
  1872  0020                     ?___lldiv:	
  1873                           ; 4 bytes @ 0x0
  1874                           
  1875  0020                     SetADCChannel@ch:	
  1876                           ; 4 bytes @ 0x0
  1877                           
  1878  0020                     Delay@wait:	
  1879                           ; 1 bytes @ 0x0
  1880                           
  1881  0020                     UART_buff_modulo_inc@value:	
  1882                           ; 2 bytes @ 0x0
  1883                           
  1884  0020                     ___awmod@divisor:	
  1885                           ; 2 bytes @ 0x0
  1886                           
  1887  0020                     memset@c:	
  1888                           ; 2 bytes @ 0x0
  1889                           
  1890  0020                     __div_to_l_@f1:	
  1891                           ; 2 bytes @ 0x0
  1892                           
  1893  0020                     ___ftpack@arg:	
  1894                           ; 3 bytes @ 0x0
  1895                           
  1896  0020                     __tdiv_to_l_@f1:	
  1897                           ; 3 bytes @ 0x0
  1898                           
  1899  0020                     ___ftge@ff1:	
  1900                           ; 3 bytes @ 0x0
  1901                           
  1902  0020                     ___ftneg@f1:	
  1903                           ; 3 bytes @ 0x0
  1904                           
  1905  0020                     ___lldiv@divisor:	
  1906                           ; 3 bytes @ 0x0
  1907                           
  1908                           
  1909                           ; 4 bytes @ 0x0
  1910  0020                     	ds	1
  1911  0021                     ?_ReadVoltage:	
  1912                           
  1913                           ; 2 bytes @ 0x1
  1914  0021                     	ds	1
  1915  0022                     ??_Delay:	
  1916  0022                     UART_buff_modulo_inc@modulus:	
  1917                           ; 1 bytes @ 0x2
  1918                           
  1919  0022                     ___awmod@dividend:	
  1920                           ; 2 bytes @ 0x2
  1921                           
  1922  0022                     memset@n:	
  1923                           ; 2 bytes @ 0x2
  1924                           
  1925                           
  1926                           ; 2 bytes @ 0x2
  1927  0022                     	ds	1
  1928  0023                     ??___ftneg:	
  1929  0023                     ___ftpack@exp:	
  1930                           ; 1 bytes @ 0x3
  1931                           
  1932  0023                     Delay@x:	
  1933                           ; 1 bytes @ 0x3
  1934                           
  1935  0023                     __div_to_l_@f2:	
  1936                           ; 2 bytes @ 0x3
  1937                           
  1938  0023                     __tdiv_to_l_@f2:	
  1939                           ; 3 bytes @ 0x3
  1940                           
  1941  0023                     ___ftge@ff2:	
  1942                           ; 3 bytes @ 0x3
  1943                           
  1944                           
  1945                           ; 3 bytes @ 0x3
  1946  0023                     	ds	1
  1947  0024                     ??_memset:	
  1948  0024                     ??_UART_buff_modulo_inc:	
  1949                           ; 1 bytes @ 0x4
  1950                           
  1951  0024                     ??_ReadVoltage:	
  1952                           ; 1 bytes @ 0x4
  1953                           
  1954  0024                     ??___awmod:	
  1955                           ; 1 bytes @ 0x4
  1956                           
  1957  0024                     ReadVoltage@ch:	
  1958                           ; 1 bytes @ 0x4
  1959                           
  1960  0024                     ___ftpack@sign:	
  1961                           ; 1 bytes @ 0x4
  1962                           
  1963  0024                     UART_buff_modulo_inc@my_value:	
  1964                           ; 1 bytes @ 0x4
  1965                           
  1966  0024                     ___lldiv@dividend:	
  1967                           ; 2 bytes @ 0x4
  1968                           
  1969                           
  1970                           ; 4 bytes @ 0x4
  1971  0024                     	ds	1
  1972  0025                     ??___ftpack:	
  1973  0025                     ___awmod@counter:	
  1974                           ; 1 bytes @ 0x5
  1975                           
  1976  0025                     memset@p1:	
  1977                           ; 1 bytes @ 0x5
  1978                           
  1979                           
  1980                           ; 1 bytes @ 0x5
  1981  0025                     	ds	1
  1982  0026                     ??__tdiv_to_l_:	
  1983  0026                     ??__div_to_l_:	
  1984                           ; 1 bytes @ 0x6
  1985                           
  1986  0026                     ?_UART_buff_put:	
  1987                           ; 1 bytes @ 0x6
  1988                           
  1989  0026                     ??_UART_buff_get:	
  1990                           ; 1 bytes @ 0x6
  1991                           
  1992  0026                     ??___ftge:	
  1993                           ; 1 bytes @ 0x6
  1994                           
  1995  0026                     UART_buff_put@c:	
  1996                           ; 1 bytes @ 0x6
  1997                           
  1998  0026                     ___awmod@sign:	
  1999                           ; 1 bytes @ 0x6
  2000                           
  2001  0026                     memset@p:	
  2002                           ; 1 bytes @ 0x6
  2003                           
  2004                           
  2005                           ; 1 bytes @ 0x6
  2006  0026                     	ds	1
  2007  0027                     ??_UART_buff_init:	
  2008  0027                     ??_UART_buff_put:	
  2009                           ; 1 bytes @ 0x7
  2010                           
  2011  0027                     ?___awdiv:	
  2012                           ; 1 bytes @ 0x7
  2013                           
  2014  0027                     UART_buff_init@_this:	
  2015                           ; 2 bytes @ 0x7
  2016                           
  2017  0027                     ___awdiv@divisor:	
  2018                           ; 1 bytes @ 0x7
  2019                           
  2020                           
  2021                           ; 2 bytes @ 0x7
  2022  0027                     	ds	1
  2023  0028                     ??_Start:	
  2024  0028                     ??_EUSART1_Initialize:	
  2025                           ; 1 bytes @ 0x8
  2026                           
  2027  0028                     ??___lldiv:	
  2028                           ; 1 bytes @ 0x8
  2029                           
  2030  0028                     ?___awtoft:	
  2031                           ; 1 bytes @ 0x8
  2032                           
  2033  0028                     ?___lltoft:	
  2034                           ; 3 bytes @ 0x8
  2035                           
  2036  0028                     ___awtoft@c:	
  2037                           ; 3 bytes @ 0x8
  2038                           
  2039  0028                     ___lltoft@c:	
  2040                           ; 2 bytes @ 0x8
  2041                           
  2042                           
  2043                           ; 4 bytes @ 0x8
  2044  0028                     	ds	1
  2045  0029                     UART_buff_get@c:	
  2046  0029                     ___awdiv@dividend:	
  2047                           ; 1 bytes @ 0x9
  2048                           
  2049  0029                     ___lldiv@quotient:	
  2050                           ; 2 bytes @ 0x9
  2051                           
  2052                           
  2053                           ; 4 bytes @ 0x9
  2054  0029                     	ds	1
  2055  002A                     UART_buff_put@_this:	
  2056  002A                     UART_buff_get@_this:	
  2057                           ; 1 bytes @ 0xA
  2058                           
  2059  002A                     __tdiv_to_l_@quot:	
  2060                           ; 1 bytes @ 0xA
  2061                           
  2062                           
  2063                           ; 4 bytes @ 0xA
  2064  002A                     	ds	1
  2065  002B                     ??_Send_put:	
  2066  002B                     ??___awdiv:	
  2067                           ; 1 bytes @ 0xB
  2068                           
  2069  002B                     ??___awtoft:	
  2070                           ; 1 bytes @ 0xB
  2071                           
  2072                           
  2073                           ; 1 bytes @ 0xB
  2074  002B                     	ds	1
  2075  002C                     ??___lltoft:	
  2076  002C                     Send_put@_data:	
  2077                           ; 1 bytes @ 0xC
  2078                           
  2079  002C                     ___awdiv@counter:	
  2080                           ; 1 bytes @ 0xC
  2081                           
  2082                           
  2083                           ; 1 bytes @ 0xC
  2084  002C                     	ds	1
  2085  002D                     ??_putch:	
  2086  002D                     putch@txData:	
  2087                           ; 1 bytes @ 0xD
  2088                           
  2089  002D                     ___awdiv@sign:	
  2090                           ; 1 bytes @ 0xD
  2091                           
  2092  002D                     ___awtoft@sign:	
  2093                           ; 1 bytes @ 0xD
  2094                           
  2095  002D                     ___lldiv@counter:	
  2096                           ; 1 bytes @ 0xD
  2097                           
  2098  002D                     ___lltoft@exp:	
  2099                           ; 1 bytes @ 0xD
  2100                           
  2101                           
  2102                           ; 1 bytes @ 0xD
  2103  002D                     	ds	1
  2104  002E                     ?___llmod:	
  2105  002E                     __tdiv_to_l_@cntr:	
  2106                           ; 4 bytes @ 0xE
  2107                           
  2108  002E                     ___awdiv@quotient:	
  2109                           ; 1 bytes @ 0xE
  2110                           
  2111  002E                     __div_to_l_@quot:	
  2112                           ; 2 bytes @ 0xE
  2113                           
  2114  002E                     ___llmod@divisor:	
  2115                           ; 4 bytes @ 0xE
  2116                           
  2117                           
  2118                           ; 4 bytes @ 0xE
  2119  002E                     	ds	1
  2120  002F                     __tdiv_to_l_@exp1:	
  2121                           
  2122                           ; 1 bytes @ 0xF
  2123  002F                     	ds	1
  2124  0030                     ?___wmul:	
  2125  0030                     ___wmul@multiplier:	
  2126                           ; 2 bytes @ 0x10
  2127                           
  2128                           
  2129                           ; 2 bytes @ 0x10
  2130  0030                     	ds	2
  2131  0032                     __div_to_l_@cntr:	
  2132  0032                     ___wmul@multiplicand:	
  2133                           ; 1 bytes @ 0x12
  2134                           
  2135  0032                     ___llmod@dividend:	
  2136                           ; 2 bytes @ 0x12
  2137                           
  2138                           
  2139                           ; 4 bytes @ 0x12
  2140  0032                     	ds	1
  2141  0033                     __div_to_l_@exp1:	
  2142                           
  2143                           ; 1 bytes @ 0x13
  2144  0033                     	ds	1
  2145  0034                     ??___wmul:	
  2146  0034                     ___wmul@product:	
  2147                           ; 1 bytes @ 0x14
  2148                           
  2149                           
  2150                           ; 2 bytes @ 0x14
  2151  0034                     	ds	2
  2152  0036                     ??___llmod:	
  2153  0036                     ?___ftmul:	
  2154                           ; 1 bytes @ 0x16
  2155                           
  2156  0036                     ___ftmul@f1:	
  2157                           ; 3 bytes @ 0x16
  2158                           
  2159                           
  2160                           ; 3 bytes @ 0x16
  2161  0036                     	ds	1
  2162  0037                     ___llmod@counter:	
  2163                           
  2164                           ; 1 bytes @ 0x17
  2165  0037                     	ds	2
  2166  0039                     ___ftmul@f2:	
  2167                           
  2168                           ; 3 bytes @ 0x19
  2169  0039                     	ds	3
  2170  003C                     ??___ftmul:	
  2171                           
  2172                           ; 1 bytes @ 0x1C
  2173  003C                     	ds	4
  2174  0040                     ___ftmul@exp:	
  2175                           
  2176                           ; 1 bytes @ 0x20
  2177  0040                     	ds	1
  2178  0041                     ___ftmul@f3_as_product:	
  2179                           
  2180                           ; 3 bytes @ 0x21
  2181  0041                     	ds	3
  2182  0044                     ___ftmul@cntr:	
  2183                           
  2184                           ; 1 bytes @ 0x24
  2185  0044                     	ds	1
  2186  0045                     ___ftmul@sign:	
  2187                           
  2188                           ; 1 bytes @ 0x25
  2189  0045                     	ds	1
  2190  0046                     ?_fround:	
  2191  0046                     ?_scale:	
  2192                           ; 3 bytes @ 0x26
  2193                           
  2194  0046                     ?___ftdiv:	
  2195                           ; 3 bytes @ 0x26
  2196                           
  2197  0046                     ___ftdiv@f2:	
  2198                           ; 3 bytes @ 0x26
  2199                           
  2200                           
  2201                           ; 3 bytes @ 0x26
  2202  0046                     	ds	3
  2203  0049                     ??_fround:	
  2204  0049                     ??_scale:	
  2205                           ; 1 bytes @ 0x29
  2206                           
  2207  0049                     ___ftdiv@f1:	
  2208                           ; 1 bytes @ 0x29
  2209                           
  2210                           
  2211                           ; 3 bytes @ 0x29
  2212  0049                     	ds	2
  2213  004B                     _scale$1276:	
  2214                           
  2215                           ; 3 bytes @ 0x2B
  2216  004B                     	ds	1
  2217  004C                     ??___ftdiv:	
  2218                           
  2219                           ; 1 bytes @ 0x2C
  2220  004C                     	ds	1
  2221  004D                     _fround$1275:	
  2222                           
  2223                           ; 3 bytes @ 0x2D
  2224  004D                     	ds	1
  2225  004E                     scale@scl:	
  2226                           
  2227                           ; 1 bytes @ 0x2E
  2228  004E                     	ds	1
  2229  004F                     ?___fttol:	
  2230  004F                     ___fttol@f1:	
  2231                           ; 4 bytes @ 0x2F
  2232                           
  2233                           
  2234                           ; 3 bytes @ 0x2F
  2235  004F                     	ds	1
  2236  0050                     ___ftdiv@cntr:	
  2237  0050                     _fround$1274:	
  2238                           ; 1 bytes @ 0x30
  2239                           
  2240                           
  2241                           ; 3 bytes @ 0x30
  2242  0050                     	ds	1
  2243  0051                     ___ftdiv@f3:	
  2244                           
  2245                           ; 3 bytes @ 0x31
  2246  0051                     	ds	2
  2247  0053                     ??___fttol:	
  2248  0053                     fround@prec:	
  2249                           ; 1 bytes @ 0x33
  2250                           
  2251                           
  2252                           ; 1 bytes @ 0x33
  2253  0053                     	ds	1
  2254  0054                     ?___ftadd:	
  2255  0054                     ___ftdiv@exp:	
  2256                           ; 3 bytes @ 0x34
  2257                           
  2258  0054                     ___ftadd@f1:	
  2259                           ; 1 bytes @ 0x34
  2260                           
  2261                           
  2262                           ; 3 bytes @ 0x34
  2263  0054                     	ds	1
  2264  0055                     ___ftdiv@sign:	
  2265                           
  2266                           ; 1 bytes @ 0x35
  2267  0055                     	ds	1
  2268  0056                     ??_RadioOperation:	
  2269                           
  2270                           ; 1 bytes @ 0x36
  2271  0056                     	ds	1
  2272  0057                     ___fttol@sign1:	
  2273  0057                     ___ftadd@f2:	
  2274                           ; 1 bytes @ 0x37
  2275                           
  2276                           
  2277                           ; 3 bytes @ 0x37
  2278  0057                     	ds	1
  2279  0058                     ___fttol@lval:	
  2280                           
  2281                           ; 4 bytes @ 0x38
  2282  0058                     	ds	2
  2283  005A                     ??___ftadd:	
  2284                           
  2285                           ; 1 bytes @ 0x3A
  2286  005A                     	ds	2
  2287  005C                     ___fttol@exp1:	
  2288                           
  2289                           ; 1 bytes @ 0x3C
  2290  005C                     	ds	2
  2291  005E                     ___ftadd@sign:	
  2292                           
  2293                           ; 1 bytes @ 0x3E
  2294  005E                     	ds	1
  2295  005F                     ___ftadd@exp2:	
  2296                           
  2297                           ; 1 bytes @ 0x3F
  2298  005F                     	ds	1
  2299  0060                     ___ftadd@exp1:	
  2300                           
  2301                           ; 1 bytes @ 0x40
  2302  0060                     	ds	1
  2303  0061                     ?___ftsub:	
  2304  0061                     ___ftsub@f2:	
  2305                           ; 3 bytes @ 0x41
  2306                           
  2307                           
  2308                           ; 3 bytes @ 0x41
  2309  0061                     	ds	3
  2310  0064                     ___ftsub@f1:	
  2311                           
  2312                           ; 3 bytes @ 0x44
  2313  0064                     	ds	3
  2314  0067                     ??_printf:	
  2315  0067                     ??___ftsub:	
  2316                           ; 1 bytes @ 0x47
  2317                           
  2318                           
  2319                           ; 1 bytes @ 0x47
  2320  0067                     	ds	6
  2321  006D                     ??_SetCommandMode:	
  2322  006D                     ??_SetFrequency:	
  2323                           ; 1 bytes @ 0x4D
  2324                           
  2325  006D                     ??_SetPowerSave:	
  2326                           ; 1 bytes @ 0x4D
  2327                           
  2328  006D                     ??_SetVolume:	
  2329                           ; 1 bytes @ 0x4D
  2330                           
  2331  006D                     ?_SetVOX:	
  2332                           ; 1 bytes @ 0x4D
  2333                           
  2334  006D                     ?_SetMIC:	
  2335                           ; 1 bytes @ 0x4D
  2336                           
  2337  006D                     SetMIC@scram:	
  2338                           ; 1 bytes @ 0x4D
  2339                           
  2340  006D                     SetVOX@volume:	
  2341                           ; 1 bytes @ 0x4D
  2342                           
  2343                           
  2344                           ; 2 bytes @ 0x4D
  2345  006D                     	ds	1
  2346  006E                     SetMIC@volume:	
  2347                           
  2348                           ; 1 bytes @ 0x4E
  2349  006E                     	ds	1
  2350  006F                     ??_SetVOX:	
  2351  006F                     SetVolume@volume:	
  2352                           ; 1 bytes @ 0x4F
  2353                           
  2354                           
  2355                           ; 1 bytes @ 0x4F
  2356  006F                     	ds	1
  2357  0070                     ??_RadioBegin:	
  2358  0070                     ??_main:	
  2359                           ; 1 bytes @ 0x50
  2360                           
  2361  0070                     ??_SR_FRSStart:	
  2362                           ; 1 bytes @ 0x50
  2363                           
  2364                           
  2365                           	psect	maintext
  2366  135D                     __pmaintext:	
  2367                           ; 1 bytes @ 0x50
  2368 ;;
  2369 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2370 ;;
  2371 ;; *************** function _main *****************
  2372 ;; Defined at:
  2373 ;;		line 14 in file "Main.c"
  2374 ;; Parameters:    Size  Location     Type
  2375 ;;		None
  2376 ;; Auto vars:     Size  Location     Type
  2377 ;;		None
  2378 ;; Return value:  Size  Location     Type
  2379 ;;                  2   14[None  ] int 
  2380 ;; Registers used:
  2381 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2382 ;; Tracked objects:
  2383 ;;		On entry : B1F/0
  2384 ;;		On exit  : 0/0
  2385 ;;		Unchanged: 0/0
  2386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2391 ;;Total ram usage:        0 bytes
  2392 ;; Hardware stack levels required when called:   12
  2393 ;; This function calls:
  2394 ;;		_Delay
  2395 ;;		_LEDOff
  2396 ;;		_RadioBegin
  2397 ;;		_RadioOperation
  2398 ;;		_Start
  2399 ;;		_TMR2_StartTimer
  2400 ;; This function is called by:
  2401 ;;		Startup code after reset
  2402 ;; This function uses a non-reentrant model
  2403 ;;
  2404                           
  2405                           
  2406                           ;psect for function _main
  2407  135D                     _main:	
  2408                           
  2409                           ;Main.c: 15: Start();
  2410                           
  2411                           ;incstack = 0
  2412                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2413  135D  3193  23C7  3193   	fcall	_Start
  2414                           
  2415                           ;Main.c: 16: RadioBegin();
  2416  1360  3192  223F  3193   	fcall	_RadioBegin
  2417                           
  2418                           ;Main.c: 17: TMR2_StartTimer();
  2419  1363  3192  2242  3193   	fcall	_TMR2_StartTimer
  2420                           
  2421                           ;Main.c: 18: LEDOff();
  2422  1366  3192  224C  3193   	fcall	_LEDOff
  2423  1369                     l3254:	
  2424                           ;Main.c: 19: while(1){
  2425                           
  2426                           
  2427                           ;Main.c: 20: RadioOperation();
  2428  1369  318B  23A0  3193   	fcall	_RadioOperation
  2429                           
  2430                           ;Main.c: 21: Delay(100);
  2431  136C  3064               	movlw	100
  2432  136D  0020               	movlb	0	; select bank0
  2433  136E  00A0               	movwf	Delay@wait
  2434  136F  3000               	movlw	0
  2435  1370  00A1               	movwf	Delay@wait+1
  2436  1371  3193  23E3  3193   	fcall	_Delay
  2437  1374  2B69               	goto	l3254
  2438  1375                     __end_of_main:	
  2439                           ;Main.c: 22: }
  2440                           ;Main.c: 23: return 0;
  2441                           ;	Return value of _main is never used
  2442                           
  2443                           
  2444                           	psect	text1
  2445  13C7                     __ptext1:	
  2446 ;; *************** function _Start *****************
  2447 ;; Defined at:
  2448 ;;		line 9 in file "Function.c"
  2449 ;; Parameters:    Size  Location     Type
  2450 ;;		None
  2451 ;; Auto vars:     Size  Location     Type
  2452 ;;		None
  2453 ;; Return value:  Size  Location     Type
  2454 ;;                  1    wreg      void 
  2455 ;; Registers used:
  2456 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2457 ;; Tracked objects:
  2458 ;;		On entry : 0/0
  2459 ;;		On exit  : 0/0
  2460 ;;		Unchanged: 0/0
  2461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2466 ;;Total ram usage:        0 bytes
  2467 ;; Hardware stack levels used:    1
  2468 ;; Hardware stack levels required when called:    7
  2469 ;; This function calls:
  2470 ;;		_ADC_Initialize
  2471 ;;		_EUSART1_Initialize
  2472 ;;		_INTERRUPT_Initialize
  2473 ;;		_TMR2_Initialize
  2474 ;; This function is called by:
  2475 ;;		_main
  2476 ;; This function uses a non-reentrant model
  2477 ;;
  2478                           
  2479                           
  2480                           ;psect for function _Start
  2481  13C7                     _Start:	
  2482                           
  2483                           ;Function.c: 13: TRISCbits.TRISC7 = 0;
  2484                           
  2485                           ;incstack = 0
  2486                           ; Regs used in _Start: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2487  13C7  0021               	movlb	1	; select bank1
  2488  13C8  138E               	bcf	14,7	;volatile
  2489                           
  2490                           ;Function.c: 14: TRISCbits.TRISC6 = 0;
  2491  13C9  130E               	bcf	14,6	;volatile
  2492                           
  2493                           ;Function.c: 15: TRISCbits.TRISC5 = 0;
  2494  13CA  128E               	bcf	14,5	;volatile
  2495                           
  2496                           ;Function.c: 16: TRISCbits.TRISC4 = 0;
  2497  13CB  120E               	bcf	14,4	;volatile
  2498                           
  2499                           ;Function.c: 17: TRISCbits.TRISC3 = 0;
  2500  13CC  118E               	bcf	14,3	;volatile
  2501                           
  2502                           ;Function.c: 18: TRISAbits.TRISA2 = 1;
  2503  13CD  150C               	bsf	12,2	;volatile
  2504                           
  2505                           ;Function.c: 19: TRISCbits.TRISC0 = 1;
  2506  13CE  140E               	bsf	14,0	;volatile
  2507                           
  2508                           ;Function.c: 20: TRISCbits.TRISC1 = 1;
  2509  13CF  148E               	bsf	14,1	;volatile
  2510                           
  2511                           ;Function.c: 24: ANSELCbits.ANSC0 = 0;
  2512  13D0  0023               	movlb	3	; select bank3
  2513  13D1  100E               	bcf	14,0	;volatile
  2514                           
  2515                           ;Function.c: 25: ANSELCbits.ANSC1 = 0;
  2516  13D2  108E               	bcf	14,1	;volatile
  2517                           
  2518                           ;Function.c: 26: ANSELAbits.ANSA2 = 0;
  2519  13D3  110C               	bcf	12,2	;volatile
  2520                           
  2521                           ;Function.c: 27: ANSELCbits.ANSC3 = 0;
  2522  13D4  118E               	bcf	14,3	;volatile
  2523                           
  2524                           ;Function.c: 28: ANSELCbits.ANSC6 = 0;
  2525  13D5  130E               	bcf	14,6	;volatile
  2526                           
  2527                           ;Function.c: 29: ANSELCbits.ANSC7 = 0;
  2528  13D6  138E               	bcf	14,7	;volatile
  2529                           
  2530                           ;Function.c: 33: ADC_Initialize();
  2531  13D7  3192  226D  3193   	fcall	_ADC_Initialize
  2532                           
  2533                           ;Function.c: 37: EUSART1_Initialize();
  2534  13DA  3193  2330  3193   	fcall	_EUSART1_Initialize
  2535                           
  2536                           ;Function.c: 41: INTERRUPT_Initialize();
  2537  13DD  3192  2277  3193   	fcall	_INTERRUPT_Initialize
  2538                           
  2539                           ;Function.c: 42: TMR2_Initialize();
  2540  13E0  3192  2281         	fcall	_TMR2_Initialize
  2541  13E2  0008               	return
  2542  13E3                     __end_of_Start:	
  2543                           
  2544                           	psect	text2
  2545  1281                     __ptext2:	
  2546 ;; *************** function _TMR2_Initialize *****************
  2547 ;; Defined at:
  2548 ;;		line 9 in file "Timer.c"
  2549 ;; Parameters:    Size  Location     Type
  2550 ;;		None
  2551 ;; Auto vars:     Size  Location     Type
  2552 ;;		None
  2553 ;; Return value:  Size  Location     Type
  2554 ;;                  1    wreg      void 
  2555 ;; Registers used:
  2556 ;;		wreg, status,2
  2557 ;; Tracked objects:
  2558 ;;		On entry : 0/0
  2559 ;;		On exit  : 0/0
  2560 ;;		Unchanged: 0/0
  2561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2565 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2566 ;;Total ram usage:        0 bytes
  2567 ;; Hardware stack levels used:    1
  2568 ;; Hardware stack levels required when called:    4
  2569 ;; This function calls:
  2570 ;;		Nothing
  2571 ;; This function is called by:
  2572 ;;		_Start
  2573 ;; This function uses a non-reentrant model
  2574 ;;
  2575                           
  2576                           
  2577                           ;psect for function _TMR2_Initialize
  2578  1281                     _TMR2_Initialize:	
  2579                           
  2580                           ;Timer.c: 14: T2CON = 0x00;
  2581                           
  2582                           ;incstack = 0
  2583                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  2584  1281  0020               	movlb	0	; select bank0
  2585  1282  019C               	clrf	28	;volatile
  2586                           
  2587                           ;Timer.c: 15: T2CONbits.TMR2ON = 0;
  2588  1283  111C               	bcf	28,2	;volatile
  2589                           
  2590                           ;Timer.c: 18: PR2 = 18;
  2591  1284  3012               	movlw	18
  2592  1285  009B               	movwf	27	;volatile
  2593                           
  2594                           ;Timer.c: 21: TMR2 = 0;
  2595  1286  019A               	clrf	26	;volatile
  2596                           
  2597                           ;Timer.c: 24: PIR1bits.TMR2IF = 0;
  2598  1287  1091               	bcf	17,1	;volatile
  2599                           
  2600                           ;Timer.c: 27: PIE1bits.TMR2IE = 1;
  2601  1288  0021               	movlb	1	; select bank1
  2602  1289  1491               	bsf	17,1	;volatile
  2603  128A  0008               	return
  2604  128B                     __end_of_TMR2_Initialize:	
  2605                           
  2606                           	psect	text3
  2607  1277                     __ptext3:	
  2608 ;; *************** function _INTERRUPT_Initialize *****************
  2609 ;; Defined at:
  2610 ;;		line 53 in file "Function.c"
  2611 ;; Parameters:    Size  Location     Type
  2612 ;;		None
  2613 ;; Auto vars:     Size  Location     Type
  2614 ;;		None
  2615 ;; Return value:  Size  Location     Type
  2616 ;;                  1    wreg      void 
  2617 ;; Registers used:
  2618 ;;		status,2
  2619 ;; Tracked objects:
  2620 ;;		On entry : 0/0
  2621 ;;		On exit  : 0/0
  2622 ;;		Unchanged: 0/0
  2623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2628 ;;Total ram usage:        0 bytes
  2629 ;; Hardware stack levels used:    1
  2630 ;; Hardware stack levels required when called:    4
  2631 ;; This function calls:
  2632 ;;		Nothing
  2633 ;; This function is called by:
  2634 ;;		_Start
  2635 ;; This function uses a non-reentrant model
  2636 ;;
  2637                           
  2638                           
  2639                           ;psect for function _INTERRUPT_Initialize
  2640  1277                     _INTERRUPT_Initialize:	
  2641                           
  2642                           ;Function.c: 55: INTCON = 0;
  2643                           
  2644                           ;incstack = 0
  2645                           ; Regs used in _INTERRUPT_Initialize: [status,2]
  2646  1277  018B               	clrf	11	;volatile
  2647                           
  2648                           ;Function.c: 56: INTCONbits.TMR0IE = 0;
  2649  1278  128B               	bcf	11,5	;volatile
  2650                           
  2651                           ;Function.c: 57: PIR1bits.TMR2IF = 0;
  2652  1279  0020               	movlb	0	; select bank0
  2653  127A  1091               	bcf	17,1	;volatile
  2654                           
  2655                           ;Function.c: 58: PIE1bits.TMR2IE = 1;
  2656  127B  0021               	movlb	1	; select bank1
  2657  127C  1491               	bsf	17,1	;volatile
  2658                           
  2659                           ;Function.c: 59: INTCONbits.TMR0IF = 0;
  2660  127D  110B               	bcf	11,2	;volatile
  2661                           
  2662                           ;Function.c: 60: INTCONbits.GIE = 1;
  2663  127E  178B               	bsf	11,7	;volatile
  2664                           
  2665                           ;Function.c: 61: INTCONbits.PEIE = 1;
  2666  127F  170B               	bsf	11,6	;volatile
  2667  1280  0008               	return
  2668  1281                     __end_of_INTERRUPT_Initialize:	
  2669                           
  2670                           	psect	text4
  2671  1330                     __ptext4:	
  2672 ;; *************** function _EUSART1_Initialize *****************
  2673 ;; Defined at:
  2674 ;;		line 30 in file "UART.c"
  2675 ;; Parameters:    Size  Location     Type
  2676 ;;		None
  2677 ;; Auto vars:     Size  Location     Type
  2678 ;;		None
  2679 ;; Return value:  Size  Location     Type
  2680 ;;                  1    wreg      void 
  2681 ;; Registers used:
  2682 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2683 ;; Tracked objects:
  2684 ;;		On entry : 0/0
  2685 ;;		On exit  : 0/0
  2686 ;;		Unchanged: 0/0
  2687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2692 ;;Total ram usage:        0 bytes
  2693 ;; Hardware stack levels used:    1
  2694 ;; Hardware stack levels required when called:    6
  2695 ;; This function calls:
  2696 ;;		_UART_buff_init
  2697 ;; This function is called by:
  2698 ;;		_Start
  2699 ;; This function uses a non-reentrant model
  2700 ;;
  2701                           
  2702                           
  2703                           ;psect for function _EUSART1_Initialize
  2704  1330                     _EUSART1_Initialize:	
  2705                           
  2706                           ;UART.c: 32: PIE1bits.RCIE = 0;
  2707                           
  2708                           ;incstack = 0
  2709                           ; Regs used in _EUSART1_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2710  1330  0021               	movlb	1	; select bank1
  2711  1331  1291               	bcf	17,5	;volatile
  2712                           
  2713                           ;UART.c: 33: PIE1bits.TXIE = 0;
  2714  1332  1211               	bcf	17,4	;volatile
  2715                           
  2716                           ;UART.c: 35: SPBRG = 0x25;
  2717  1333  3000               	movlw	0
  2718  1334  0023               	movlb	3	; select bank3
  2719  1335  009C               	movwf	28	;volatile
  2720  1336  3025               	movlw	37
  2721  1337  009B               	movwf	27	;volatile
  2722                           
  2723                           ;UART.c: 37: RCSTA = 0b10010000;
  2724  1338  3090               	movlw	144
  2725  1339  009D               	movwf	29	;volatile
  2726                           
  2727                           ;UART.c: 39: TXSTA = 0b00100000;
  2728  133A  3020               	movlw	32
  2729  133B  009E               	movwf	30	;volatile
  2730                           
  2731                           ;UART.c: 41: UART_buff_init(&input_buffer);
  2732  133C  3020               	movlw	(low (_input_buffer| (0+256)))& (0+255)
  2733  133D  3192  22A2  3193   	fcall	_UART_buff_init
  2734                           
  2735                           ;UART.c: 42: UART_buff_init(&output_buffer);
  2736  1340  303A               	movlw	(low (_output_buffer| (0+256)))& (0+255)
  2737  1341  3192  22A2         	fcall	_UART_buff_init
  2738                           
  2739                           ;UART.c: 44: PIE1bits.RCIE = 1;
  2740  1343  0021               	movlb	1	; select bank1
  2741  1344  1691               	bsf	17,5	;volatile
  2742  1345  0008               	return
  2743  1346                     __end_of_EUSART1_Initialize:	
  2744                           
  2745                           	psect	text5
  2746  12A2                     __ptext5:	
  2747 ;; *************** function _UART_buff_init *****************
  2748 ;; Defined at:
  2749 ;;		line 48 in file "UART.c"
  2750 ;; Parameters:    Size  Location     Type
  2751 ;;  _this           1    wreg     PTR struct UART_ring_buf
  2752 ;;		 -> output_buffer(26), input_buffer(26), 
  2753 ;; Auto vars:     Size  Location     Type
  2754 ;;  _this           1    7[BANK0 ] PTR struct UART_ring_buf
  2755 ;;		 -> output_buffer(26), input_buffer(26), 
  2756 ;; Return value:  Size  Location     Type
  2757 ;;                  1    wreg      void 
  2758 ;; Registers used:
  2759 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2760 ;; Tracked objects:
  2761 ;;		On entry : 0/0
  2762 ;;		On exit  : 0/0
  2763 ;;		Unchanged: 0/0
  2764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2766 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2768 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2769 ;;Total ram usage:        1 bytes
  2770 ;; Hardware stack levels used:    1
  2771 ;; Hardware stack levels required when called:    5
  2772 ;; This function calls:
  2773 ;;		_memset
  2774 ;; This function is called by:
  2775 ;;		_EUSART1_Initialize
  2776 ;; This function uses a non-reentrant model
  2777 ;;
  2778                           
  2779                           
  2780                           ;psect for function _UART_buff_init
  2781  12A2                     _UART_buff_init:	
  2782                           
  2783                           ;incstack = 0
  2784                           ; Regs used in _UART_buff_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2785                           ;UART_buff_init@_this stored from wreg
  2786  12A2  0020               	movlb	0	; select bank0
  2787  12A3  00A7               	movwf	UART_buff_init@_this
  2788                           
  2789                           ;UART.c: 57: memset(_this, 0, sizeof (*_this));
  2790  12A4  3000               	movlw	0
  2791  12A5  00A0               	movwf	memset@c
  2792  12A6  00A1               	movwf	memset@c+1
  2793  12A7  301A               	movlw	26
  2794  12A8  00A2               	movwf	memset@n
  2795  12A9  3000               	movlw	0
  2796  12AA  00A3               	movwf	memset@n+1
  2797  12AB  0827               	movf	UART_buff_init@_this,w
  2798  12AC  3193  23AB         	fcall	_memset
  2799  12AE  0008               	return
  2800  12AF                     __end_of_UART_buff_init:	
  2801                           
  2802                           	psect	text6
  2803  13AB                     __ptext6:	
  2804 ;; *************** function _memset *****************
  2805 ;; Defined at:
  2806 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  2807 ;; Parameters:    Size  Location     Type
  2808 ;;  p1              1    wreg     PTR void 
  2809 ;;		 -> output_buffer(26), input_buffer(26), 
  2810 ;;  c               2    0[BANK0 ] int 
  2811 ;;  n               2    2[BANK0 ] unsigned int 
  2812 ;; Auto vars:     Size  Location     Type
  2813 ;;  p1              1    5[BANK0 ] PTR void 
  2814 ;;		 -> output_buffer(26), input_buffer(26), 
  2815 ;;  p               1    6[BANK0 ] PTR unsigned char 
  2816 ;;		 -> output_buffer(26), input_buffer(26), 
  2817 ;; Return value:  Size  Location     Type
  2818 ;;                  1    wreg      PTR void 
  2819 ;; Registers used:
  2820 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2821 ;; Tracked objects:
  2822 ;;		On entry : 0/0
  2823 ;;		On exit  : 0/0
  2824 ;;		Unchanged: 0/0
  2825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2826 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2827 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2828 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2829 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2830 ;;Total ram usage:        7 bytes
  2831 ;; Hardware stack levels used:    1
  2832 ;; Hardware stack levels required when called:    4
  2833 ;; This function calls:
  2834 ;;		Nothing
  2835 ;; This function is called by:
  2836 ;;		_UART_buff_init
  2837 ;; This function uses a non-reentrant model
  2838 ;;
  2839                           
  2840                           
  2841                           ;psect for function _memset
  2842  13AB                     _memset:	
  2843                           
  2844                           ;incstack = 0
  2845                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  2846                           ;memset@p1 stored from wreg
  2847  13AB  0020               	movlb	0	; select bank0
  2848  13AC  00A5               	movwf	memset@p1
  2849  13AD  0825               	movf	memset@p1,w
  2850  13AE  00A4               	movwf	??_memset
  2851  13AF  0824               	movf	??_memset,w
  2852  13B0  00A6               	movwf	memset@p
  2853  13B1                     l2716:	
  2854  13B1  3001               	movlw	1
  2855  13B2  02A2               	subwf	memset@n,f
  2856  13B3  3000               	movlw	0
  2857  13B4  3BA3               	subwfb	memset@n+1,f
  2858  13B5  0A22               	incf	memset@n,w
  2859  13B6  1903               	btfsc	3,2
  2860  13B7  0A23               	incf	memset@n+1,w
  2861  13B8  1903               	btfsc	3,2
  2862  13B9  0008               	return
  2863  13BA  0820               	movf	memset@c,w
  2864  13BB  00A4               	movwf	??_memset
  2865  13BC  0826               	movf	memset@p,w
  2866  13BD  0086               	movwf	6
  2867  13BE  3001               	movlw	1	; select bank2/3
  2868  13BF  0087               	movwf	7
  2869  13C0  0824               	movf	??_memset,w
  2870  13C1  0081               	movwf	1
  2871  13C2  3001               	movlw	1
  2872  13C3  00A4               	movwf	??_memset
  2873  13C4  0824               	movf	??_memset,w
  2874  13C5  07A6               	addwf	memset@p,f
  2875  13C6  2BB1               	goto	l2716
  2876  13C7                     __end_of_memset:	
  2877                           ;	Return value of _memset is never used
  2878                           
  2879                           
  2880                           	psect	text7
  2881  126D                     __ptext7:	
  2882 ;; *************** function _ADC_Initialize *****************
  2883 ;; Defined at:
  2884 ;;		line 4 in file "ADC.c"
  2885 ;; Parameters:    Size  Location     Type
  2886 ;;		None
  2887 ;; Auto vars:     Size  Location     Type
  2888 ;;		None
  2889 ;; Return value:  Size  Location     Type
  2890 ;;                  1    wreg      void 
  2891 ;; Registers used:
  2892 ;;		None
  2893 ;; Tracked objects:
  2894 ;;		On entry : 0/0
  2895 ;;		On exit  : 0/0
  2896 ;;		Unchanged: 0/0
  2897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2902 ;;Total ram usage:        0 bytes
  2903 ;; Hardware stack levels used:    1
  2904 ;; Hardware stack levels required when called:    4
  2905 ;; This function calls:
  2906 ;;		Nothing
  2907 ;; This function is called by:
  2908 ;;		_Start
  2909 ;; This function uses a non-reentrant model
  2910 ;;
  2911                           
  2912                           
  2913                           ;psect for function _ADC_Initialize
  2914  126D                     _ADC_Initialize:	
  2915                           
  2916                           ;ADC.c: 5: FVRCONbits.ADFVR0 = 1;
  2917                           
  2918                           ;incstack = 0
  2919                           ; Regs used in _ADC_Initialize: []
  2920  126D  0022               	movlb	2	; select bank2
  2921  126E  1417               	bsf	23,0	;volatile
  2922                           
  2923                           ;ADC.c: 6: FVRCONbits.ADFVR1 = 1;
  2924  126F  1497               	bsf	23,1	;volatile
  2925                           
  2926                           ;ADC.c: 7: ADCON1bits.ADFM = 1;
  2927  1270  0021               	movlb	1	; select bank1
  2928  1271  179E               	bsf	30,7	;volatile
  2929                           
  2930                           ;ADC.c: 8: ADCON1bits.ADCS0 = 0;
  2931  1272  121E               	bcf	30,4	;volatile
  2932                           
  2933                           ;ADC.c: 9: ADCON1bits.ADCS1 = 0;
  2934  1273  129E               	bcf	30,5	;volatile
  2935                           
  2936                           ;ADC.c: 10: ADCON1bits.ADCS2 = 1;
  2937  1274  171E               	bsf	30,6	;volatile
  2938                           
  2939                           ;ADC.c: 11: ADCON0bits.ADON = 1;
  2940  1275  141D               	bsf	29,0	;volatile
  2941  1276  0008               	return
  2942  1277                     __end_of_ADC_Initialize:	
  2943                           
  2944                           	psect	text8
  2945  0BA0                     __ptext8:	
  2946 ;; *************** function _RadioOperation *****************
  2947 ;; Defined at:
  2948 ;;		line 25 in file "Radio.c"
  2949 ;; Parameters:    Size  Location     Type
  2950 ;;		None
  2951 ;; Auto vars:     Size  Location     Type
  2952 ;;		None
  2953 ;; Return value:  Size  Location     Type
  2954 ;;                  1    wreg      void 
  2955 ;; Registers used:
  2956 ;;		wreg, status,2, status,0, pclath, cstack
  2957 ;; Tracked objects:
  2958 ;;		On entry : 0/0
  2959 ;;		On exit  : 0/0
  2960 ;;		Unchanged: 0/0
  2961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2964 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2965 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2966 ;;Total ram usage:        1 bytes
  2967 ;; Hardware stack levels used:    1
  2968 ;; Hardware stack levels required when called:    6
  2969 ;; This function calls:
  2970 ;;		_ClearTicker
  2971 ;;		_GetTicker
  2972 ;;		_ReadCharger
  2973 ;;		_ReadVoltage
  2974 ;;		_SR_FRSPowerDown
  2975 ;;		_SR_FRSTalk
  2976 ;;		_TMR2_StartTimer
  2977 ;;		_TMR2_StopTimer
  2978 ;;		___awtoft
  2979 ;;		___ftdiv
  2980 ;;		___ftge
  2981 ;;		___ftmul
  2982 ;; This function is called by:
  2983 ;;		_main
  2984 ;; This function uses a non-reentrant model
  2985 ;;
  2986                           
  2987                           
  2988                           ;psect for function _RadioOperation
  2989  0BA0                     _RadioOperation:	
  2990                           
  2991                           ;Radio.c: 26: if(!PORTAbits.RA2 && !Talking){
  2992                           
  2993                           ;incstack = 0
  2994                           ; Regs used in _RadioOperation: [wreg+status,2+status,0+pclath+cstack]
  2995  0BA0  0020               	movlb	0	; select bank0
  2996  0BA1  190C               	btfsc	12,2	;volatile
  2997  0BA2  2BAB               	goto	l294
  2998  0BA3  0021               	movlb	1	; select bank1
  2999  0BA4  0867               	movf	_Talking^(0+128),w
  3000  0BA5  1D03               	btfss	3,2
  3001  0BA6  2BAB               	goto	l294
  3002                           
  3003                           ;Radio.c: 27: count++;
  3004  0BA7  3001               	movlw	1
  3005  0BA8  07DF               	addwf	_count^(0+128),f
  3006  0BA9  3000               	movlw	0
  3007  0BAA  3DE0               	addwfc	(_count+1)^(0+128),f
  3008  0BAB                     l294:	
  3009                           
  3010                           ;Radio.c: 28: }
  3011                           ;Radio.c: 29: if((count > 5) && !Talking){
  3012  0BAB  0021               	movlb	1	; select bank1
  3013  0BAC  0860               	movf	(_count+1)^(0+128),w
  3014  0BAD  3A80               	xorlw	128
  3015  0BAE  0020               	movlb	0	; select bank0
  3016  0BAF  00D6               	movwf	??_RadioOperation
  3017  0BB0  3080               	movlw	128
  3018  0BB1  0256               	subwf	??_RadioOperation,w
  3019  0BB2  1D03               	skipz
  3020  0BB3  2BB7               	goto	u4185
  3021  0BB4  3006               	movlw	6
  3022  0BB5  0021               	movlb	1	; select bank1
  3023  0BB6  025F               	subwf	_count^(0+128),w
  3024  0BB7                     u4185:	
  3025  0BB7  1C03               	skipc
  3026  0BB8  2BCB               	goto	l3172
  3027  0BB9  0021               	movlb	1	; select bank1
  3028  0BBA  0867               	movf	_Talking^(0+128),w
  3029  0BBB  1D03               	btfss	3,2
  3030  0BBC  2BCB               	goto	l3172
  3031                           
  3032                           ;Radio.c: 30: SR_FRSTalk();
  3033  0BBD  3192  22AF  318B   	fcall	_SR_FRSTalk
  3034                           
  3035                           ;Radio.c: 31: PORTCbits.RC3 = 0;
  3036  0BC0  0020               	movlb	0	; select bank0
  3037  0BC1  118E               	bcf	14,3	;volatile
  3038                           
  3039                           ;Radio.c: 32: Talking = 1;
  3040  0BC2  0021               	movlb	1	; select bank1
  3041  0BC3  01E7               	clrf	_Talking^(0+128)
  3042  0BC4  0AE7               	incf	_Talking^(0+128),f
  3043                           
  3044                           ;Radio.c: 33: TMR2_StopTimer();
  3045  0BC5  3192  2245  318B   	fcall	_TMR2_StopTimer
  3046                           
  3047                           ;Radio.c: 34: ClearTicker();
  3048  0BC8  3192  2248  318B   	fcall	_ClearTicker
  3049  0BCB                     l3172:	
  3050                           
  3051                           ;Radio.c: 35: }
  3052                           ;Radio.c: 36: if(Talking && PORTAbits.RA2){
  3053  0BCB  0021               	movlb	1	; select bank1
  3054  0BCC  0867               	movf	_Talking^(0+128),w
  3055  0BCD  1903               	btfsc	3,2
  3056  0BCE  2BF0               	goto	l3188
  3057  0BCF  0020               	movlb	0	; select bank0
  3058  0BD0  1D0C               	btfss	12,2	;volatile
  3059  0BD1  2BF0               	goto	l3188
  3060                           
  3061                           ;Radio.c: 37: count--;
  3062  0BD2  30FF               	movlw	255
  3063  0BD3  0021               	movlb	1	; select bank1
  3064  0BD4  07DF               	addwf	_count^(0+128),f
  3065  0BD5  30FF               	movlw	255
  3066  0BD6  3DE0               	addwfc	(_count+1)^(0+128),f
  3067                           
  3068                           ;Radio.c: 38: if(count < 2){
  3069  0BD7  0860               	movf	(_count+1)^(0+128),w
  3070  0BD8  3A80               	xorlw	128
  3071  0BD9  0020               	movlb	0	; select bank0
  3072  0BDA  00D6               	movwf	??_RadioOperation
  3073  0BDB  3080               	movlw	128
  3074  0BDC  0256               	subwf	??_RadioOperation,w
  3075  0BDD  1D03               	skipz
  3076  0BDE  2BE2               	goto	u4225
  3077  0BDF  3002               	movlw	2
  3078  0BE0  0021               	movlb	1	; select bank1
  3079  0BE1  025F               	subwf	_count^(0+128),w
  3080  0BE2                     u4225:	
  3081  0BE2  1803               	skipnc
  3082  0BE3  2BF0               	goto	l3188
  3083                           
  3084                           ;Radio.c: 39: PORTCbits.RC3 = 1;
  3085  0BE4  0020               	movlb	0	; select bank0
  3086  0BE5  158E               	bsf	14,3	;volatile
  3087                           
  3088                           ;Radio.c: 40: SR_FRSTalk();
  3089  0BE6  3192  22AF  318B   	fcall	_SR_FRSTalk
  3090                           
  3091                           ;Radio.c: 41: TMR2_StartTimer();
  3092  0BE9  3192  2242  318B   	fcall	_TMR2_StartTimer
  3093                           
  3094                           ;Radio.c: 42: count = 0;
  3095  0BEC  0021               	movlb	1	; select bank1
  3096  0BED  01DF               	clrf	_count^(0+128)
  3097  0BEE  01E0               	clrf	(_count+1)^(0+128)
  3098                           
  3099                           ;Radio.c: 43: Talking = 0;
  3100  0BEF  01E7               	clrf	_Talking^(0+128)
  3101  0BF0                     l3188:	
  3102                           
  3103                           ;Radio.c: 44: }
  3104                           ;Radio.c: 45: }
  3105                           ;Radio.c: 46: if(GetTicker() > 100000){
  3106  0BF0  3180  2002  318B   	fcall	_GetTicker
  3107                           
  3108                           ;Radio.c: 50: }
  3109                           ;Radio.c: 51: if(time > 150){
  3110                           
  3111                           ;Radio.c: 49: PORTCbits.RC5 = 0;
  3112                           
  3113                           ;Radio.c: 48: SR_FRSPowerDown();
  3114  0BF3  0021               	movlb	1	; select bank1
  3115  0BF4  0864               	movf	(_time+1)^(0+128),w
  3116  0BF5  3A80               	xorlw	128
  3117  0BF6  0020               	movlb	0	; select bank0
  3118  0BF7  00D6               	movwf	??_RadioOperation
  3119  0BF8  3080               	movlw	128
  3120  0BF9  0256               	subwf	??_RadioOperation,w
  3121  0BFA  1D03               	skipz
  3122  0BFB  2BFF               	goto	u4235
  3123  0BFC  3097               	movlw	151
  3124  0BFD  0021               	movlb	1	; select bank1
  3125  0BFE  0263               	subwf	_time^(0+128),w
  3126  0BFF                     u4235:	
  3127  0BFF  1C03               	skipc
  3128  0C00  2C57               	goto	l3204
  3129                           
  3130                           ;Radio.c: 52: PORTCbits.RC4 = 0;
  3131  0C01  0020               	movlb	0	; select bank0
  3132  0C02  120E               	bcf	14,4	;volatile
  3133                           
  3134                           ;Radio.c: 53: Battery = ReadVoltage(1);
  3135  0C03  3001               	movlw	1
  3136  0C04  3192  22E1  318B   	fcall	_ReadVoltage
  3137  0C07  0020               	movlb	0	; select bank0
  3138  0C08  0822               	movf	?_ReadVoltage+1,w
  3139  0C09  00A9               	movwf	___awtoft@c+1
  3140  0C0A  0821               	movf	?_ReadVoltage,w
  3141  0C0B  00A8               	movwf	___awtoft@c
  3142  0C0C  3194  245C  318B   	fcall	___awtoft
  3143  0C0F  0020               	movlb	0	; select bank0
  3144  0C10  0828               	movf	?___awtoft,w
  3145  0C11  0021               	movlb	1	; select bank1
  3146  0C12  00DC               	movwf	_Battery^(0+128)
  3147  0C13  0020               	movlb	0	; select bank0
  3148  0C14  0829               	movf	?___awtoft+1,w
  3149  0C15  0021               	movlb	1	; select bank1
  3150  0C16  00DD               	movwf	(_Battery+1)^(0+128)
  3151  0C17  0020               	movlb	0	; select bank0
  3152  0C18  082A               	movf	?___awtoft+2,w
  3153  0C19  0021               	movlb	1	; select bank1
  3154  0C1A  00DE               	movwf	(_Battery+2)^(0+128)
  3155                           
  3156                           ;Radio.c: 54: Battery = (Battery*5.0)/1023.0;
  3157  0C1B  30C0               	movlw	192
  3158  0C1C  0020               	movlb	0	; select bank0
  3159  0C1D  00C6               	movwf	___ftdiv@f2
  3160  0C1E  307F               	movlw	127
  3161  0C1F  00C7               	movwf	___ftdiv@f2+1
  3162  0C20  3044               	movlw	68
  3163  0C21  00C8               	movwf	___ftdiv@f2+2
  3164  0C22  3000               	movlw	0
  3165  0C23  00B6               	movwf	___ftmul@f1
  3166  0C24  30A0               	movlw	160
  3167  0C25  00B7               	movwf	___ftmul@f1+1
  3168  0C26  3040               	movlw	64
  3169  0C27  00B8               	movwf	___ftmul@f1+2
  3170  0C28  0021               	movlb	1	; select bank1
  3171  0C29  085C               	movf	_Battery^(0+128),w
  3172  0C2A  0020               	movlb	0	; select bank0
  3173  0C2B  00B9               	movwf	___ftmul@f2
  3174  0C2C  0021               	movlb	1	; select bank1
  3175  0C2D  085D               	movf	(_Battery+1)^(0+128),w
  3176  0C2E  0020               	movlb	0	; select bank0
  3177  0C2F  00BA               	movwf	___ftmul@f2+1
  3178  0C30  0021               	movlb	1	; select bank1
  3179  0C31  085E               	movf	(_Battery+2)^(0+128),w
  3180  0C32  0020               	movlb	0	; select bank0
  3181  0C33  00BB               	movwf	___ftmul@f2+2
  3182  0C34  3189  21F6  318B   	fcall	___ftmul
  3183  0C37  0020               	movlb	0	; select bank0
  3184  0C38  0836               	movf	?___ftmul,w
  3185  0C39  00C9               	movwf	___ftdiv@f1
  3186  0C3A  0837               	movf	?___ftmul+1,w
  3187  0C3B  00CA               	movwf	___ftdiv@f1+1
  3188  0C3C  0838               	movf	?___ftmul+2,w
  3189  0C3D  00CB               	movwf	___ftdiv@f1+2
  3190  0C3E  3189  214D  318B   	fcall	___ftdiv
  3191  0C41  0020               	movlb	0	; select bank0
  3192  0C42  0846               	movf	?___ftdiv,w
  3193  0C43  0021               	movlb	1	; select bank1
  3194  0C44  00DC               	movwf	_Battery^(0+128)
  3195  0C45  0020               	movlb	0	; select bank0
  3196  0C46  0847               	movf	?___ftdiv+1,w
  3197  0C47  0021               	movlb	1	; select bank1
  3198  0C48  00DD               	movwf	(_Battery+1)^(0+128)
  3199  0C49  0020               	movlb	0	; select bank0
  3200  0C4A  0848               	movf	?___ftdiv+2,w
  3201  0C4B  0021               	movlb	1	; select bank1
  3202  0C4C  00DE               	movwf	(_Battery+2)^(0+128)
  3203                           
  3204                           ;Radio.c: 55: time = 0;
  3205  0C4D  01E3               	clrf	_time^(0+128)
  3206  0C4E  01E4               	clrf	(_time+1)^(0+128)
  3207                           
  3208                           ;Radio.c: 56: Mode = ReadCharger();
  3209  0C4F  3192  22CF  318B   	fcall	_ReadCharger
  3210  0C52  0020               	movlb	0	; select bank0
  3211  0C53  00D6               	movwf	??_RadioOperation
  3212  0C54  0856               	movf	??_RadioOperation,w
  3213  0C55  0021               	movlb	1	; select bank1
  3214  0C56  00E5               	movwf	_Mode^(0+128)
  3215  0C57                     l3204:	
  3216                           
  3217                           ;Radio.c: 57: }
  3218                           ;Radio.c: 58: if((time > 2) && (PORTCbits.RC4 == 0)){
  3219  0C57  0021               	movlb	1	; select bank1
  3220  0C58  0864               	movf	(_time+1)^(0+128),w
  3221  0C59  3A80               	xorlw	128
  3222  0C5A  0020               	movlb	0	; select bank0
  3223  0C5B  00D6               	movwf	??_RadioOperation
  3224  0C5C  3080               	movlw	128
  3225  0C5D  0256               	subwf	??_RadioOperation,w
  3226  0C5E  1D03               	skipz
  3227  0C5F  2C63               	goto	u4245
  3228  0C60  3003               	movlw	3
  3229  0C61  0021               	movlb	1	; select bank1
  3230  0C62  0263               	subwf	_time^(0+128),w
  3231  0C63                     u4245:	
  3232  0C63  1C03               	skipc
  3233  0C64  2C69               	goto	l3210
  3234  0C65  0020               	movlb	0	; select bank0
  3235  0C66  1A0E               	btfsc	14,4	;volatile
  3236  0C67  2C69               	goto	l3210
  3237                           
  3238                           ;Radio.c: 59: PORTCbits.RC4 = 1;
  3239  0C68  160E               	bsf	14,4	;volatile
  3240  0C69                     l3210:	
  3241                           
  3242                           ;Radio.c: 60: }
  3243                           ;Radio.c: 61: if(Battery < 6.2){
  3244  0C69  0021               	movlb	1	; select bank1
  3245  0C6A  085C               	movf	_Battery^(0+128),w
  3246  0C6B  0020               	movlb	0	; select bank0
  3247  0C6C  00A0               	movwf	___ftge@ff1
  3248  0C6D  0021               	movlb	1	; select bank1
  3249  0C6E  085D               	movf	(_Battery+1)^(0+128),w
  3250  0C6F  0020               	movlb	0	; select bank0
  3251  0C70  00A1               	movwf	___ftge@ff1+1
  3252  0C71  0021               	movlb	1	; select bank1
  3253  0C72  085E               	movf	(_Battery+2)^(0+128),w
  3254  0C73  0020               	movlb	0	; select bank0
  3255  0C74  00A2               	movwf	___ftge@ff1+2
  3256  0C75  3066               	movlw	102
  3257  0C76  00A3               	movwf	___ftge@ff2
  3258  0C77  30C6               	movlw	198
  3259  0C78  00A4               	movwf	___ftge@ff2+1
  3260  0C79  3040               	movlw	64
  3261  0C7A  00A5               	movwf	___ftge@ff2+2
  3262  0C7B  3194  24CA  318B   	fcall	___ftge
  3263  0C7E  1803               	btfsc	3,0
  3264  0C7F  2C85               	goto	l3216
  3265                           
  3266                           ;Radio.c: 62: SR_FRSPowerDown();
  3267  0C80  3192  22F3  318B   	fcall	_SR_FRSPowerDown
  3268                           
  3269                           ;Radio.c: 63: PORTCbits.RC3 = 0;
  3270  0C83  0020               	movlb	0	; select bank0
  3271  0C84  118E               	bcf	14,3	;volatile
  3272  0C85                     l3216:	
  3273                           
  3274                           ;Radio.c: 64: }
  3275                           ;Radio.c: 65: if(ReadCharger() == 1){
  3276  0C85  3192  22CF  318B   	fcall	_ReadCharger
  3277  0C88  3A01               	xorlw	1
  3278  0C89  1D03               	skipz
  3279  0C8A  2C8E               	goto	l3220
  3280                           
  3281                           ;Radio.c: 66: PORTCbits.RC4 = 0;
  3282  0C8B  0020               	movlb	0	; select bank0
  3283  0C8C  120E               	bcf	14,4	;volatile
  3284                           
  3285                           ;Radio.c: 67: PORTCbits.RC5 = 0;
  3286  0C8D  128E               	bcf	14,5	;volatile
  3287  0C8E                     l3220:	
  3288                           
  3289                           ;Radio.c: 68: }
  3290                           ;Radio.c: 69: if(ReadCharger() == 2){
  3291  0C8E  3192  22CF  318B   	fcall	_ReadCharger
  3292  0C91  3A02               	xorlw	2
  3293  0C92  1D03               	skipz
  3294  0C93  2C97               	goto	l3224
  3295                           
  3296                           ;Radio.c: 70: PORTCbits.RC5 = 1;
  3297  0C94  0020               	movlb	0	; select bank0
  3298  0C95  168E               	bsf	14,5	;volatile
  3299                           
  3300                           ;Radio.c: 71: PORTCbits.RC4 = 0;
  3301  0C96  120E               	bcf	14,4	;volatile
  3302  0C97                     l3224:	
  3303                           
  3304                           ;Radio.c: 72: }
  3305                           ;Radio.c: 73: time++;
  3306  0C97  3001               	movlw	1
  3307  0C98  0021               	movlb	1	; select bank1
  3308  0C99  07E3               	addwf	_time^(0+128),f
  3309  0C9A  3000               	movlw	0
  3310  0C9B  3DE4               	addwfc	(_time+1)^(0+128),f
  3311  0C9C  0008               	return
  3312  0C9D                     __end_of_RadioOperation:	
  3313                           
  3314                           	psect	text9
  3315  094D                     __ptext9:	
  3316 ;; *************** function ___ftdiv *****************
  3317 ;; Defined at:
  3318 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;  f2              3   38[BANK0 ] float 
  3321 ;;  f1              3   41[BANK0 ] float 
  3322 ;; Auto vars:     Size  Location     Type
  3323 ;;  f3              3   49[BANK0 ] float 
  3324 ;;  sign            1   53[BANK0 ] unsigned char 
  3325 ;;  exp             1   52[BANK0 ] unsigned char 
  3326 ;;  cntr            1   48[BANK0 ] unsigned char 
  3327 ;; Return value:  Size  Location     Type
  3328 ;;                  3   38[BANK0 ] float 
  3329 ;; Registers used:
  3330 ;;		wreg, status,2, status,0, pclath, cstack
  3331 ;; Tracked objects:
  3332 ;;		On entry : 0/0
  3333 ;;		On exit  : 0/0
  3334 ;;		Unchanged: 0/0
  3335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3336 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3337 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3338 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3339 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3340 ;;Total ram usage:       16 bytes
  3341 ;; Hardware stack levels used:    1
  3342 ;; Hardware stack levels required when called:    5
  3343 ;; This function calls:
  3344 ;;		___ftpack
  3345 ;; This function is called by:
  3346 ;;		_RadioOperation
  3347 ;; This function uses a non-reentrant model
  3348 ;;
  3349                           
  3350                           
  3351                           ;psect for function ___ftdiv
  3352  094D                     ___ftdiv:	
  3353                           
  3354                           ;incstack = 0
  3355                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  3356  094D  0020               	movlb	0	; select bank0
  3357  094E  0849               	movf	___ftdiv@f1,w
  3358  094F  00CC               	movwf	??___ftdiv
  3359  0950  084A               	movf	___ftdiv@f1+1,w
  3360  0951  00CD               	movwf	??___ftdiv+1
  3361  0952  084B               	movf	___ftdiv@f1+2,w
  3362  0953  00CE               	movwf	??___ftdiv+2
  3363  0954  1003               	clrc
  3364  0955  0D4D               	rlf	??___ftdiv+1,w
  3365  0956  0D4E               	rlf	??___ftdiv+2,w
  3366  0957  00CF               	movwf	??___ftdiv+3
  3367  0958  084F               	movf	??___ftdiv+3,w
  3368  0959  00D4               	movwf	___ftdiv@exp
  3369  095A  0854               	movf	___ftdiv@exp,w
  3370  095B  1D03               	btfss	3,2
  3371  095C  2964               	goto	l3076
  3372  095D  3000               	movlw	0
  3373  095E  00C6               	movwf	?___ftdiv
  3374  095F  3000               	movlw	0
  3375  0960  00C7               	movwf	?___ftdiv+1
  3376  0961  3000               	movlw	0
  3377  0962  00C8               	movwf	?___ftdiv+2
  3378  0963  0008               	return
  3379  0964                     l3076:	
  3380  0964  0846               	movf	___ftdiv@f2,w
  3381  0965  00CC               	movwf	??___ftdiv
  3382  0966  0847               	movf	___ftdiv@f2+1,w
  3383  0967  00CD               	movwf	??___ftdiv+1
  3384  0968  0848               	movf	___ftdiv@f2+2,w
  3385  0969  00CE               	movwf	??___ftdiv+2
  3386  096A  1003               	clrc
  3387  096B  0D4D               	rlf	??___ftdiv+1,w
  3388  096C  0D4E               	rlf	??___ftdiv+2,w
  3389  096D  00CF               	movwf	??___ftdiv+3
  3390  096E  084F               	movf	??___ftdiv+3,w
  3391  096F  00D5               	movwf	___ftdiv@sign
  3392  0970  0855               	movf	___ftdiv@sign,w
  3393  0971  1D03               	btfss	3,2
  3394  0972  297A               	goto	l3082
  3395  0973  3000               	movlw	0
  3396  0974  00C6               	movwf	?___ftdiv
  3397  0975  3000               	movlw	0
  3398  0976  00C7               	movwf	?___ftdiv+1
  3399  0977  3000               	movlw	0
  3400  0978  00C8               	movwf	?___ftdiv+2
  3401  0979  0008               	return
  3402  097A                     l3082:	
  3403  097A  3000               	movlw	0
  3404  097B  00D1               	movwf	___ftdiv@f3
  3405  097C  3000               	movlw	0
  3406  097D  00D2               	movwf	___ftdiv@f3+1
  3407  097E  3000               	movlw	0
  3408  097F  00D3               	movwf	___ftdiv@f3+2
  3409  0980  3089               	movlw	137
  3410  0981  0755               	addwf	___ftdiv@sign,w
  3411  0982  00CC               	movwf	??___ftdiv
  3412  0983  084C               	movf	??___ftdiv,w
  3413  0984  02D4               	subwf	___ftdiv@exp,f
  3414  0985  0849               	movf	___ftdiv@f1,w
  3415  0986  00CC               	movwf	??___ftdiv
  3416  0987  084A               	movf	___ftdiv@f1+1,w
  3417  0988  00CD               	movwf	??___ftdiv+1
  3418  0989  084B               	movf	___ftdiv@f1+2,w
  3419  098A  00CE               	movwf	??___ftdiv+2
  3420  098B  3010               	movlw	16
  3421  098C                     u4085:	
  3422  098C  36CE               	lsrf	??___ftdiv+2,f
  3423  098D  0CCD               	rrf	??___ftdiv+1,f
  3424  098E  0CCC               	rrf	??___ftdiv,f
  3425  098F  0B89               	decfsz	9,f
  3426  0990  298C               	goto	u4085
  3427  0991  084C               	movf	??___ftdiv,w
  3428  0992  00CF               	movwf	??___ftdiv+3
  3429  0993  084F               	movf	??___ftdiv+3,w
  3430  0994  00D5               	movwf	___ftdiv@sign
  3431  0995  0846               	movf	___ftdiv@f2,w
  3432  0996  00CC               	movwf	??___ftdiv
  3433  0997  0847               	movf	___ftdiv@f2+1,w
  3434  0998  00CD               	movwf	??___ftdiv+1
  3435  0999  0848               	movf	___ftdiv@f2+2,w
  3436  099A  00CE               	movwf	??___ftdiv+2
  3437  099B  3010               	movlw	16
  3438  099C                     u4095:	
  3439  099C  36CE               	lsrf	??___ftdiv+2,f
  3440  099D  0CCD               	rrf	??___ftdiv+1,f
  3441  099E  0CCC               	rrf	??___ftdiv,f
  3442  099F  0B89               	decfsz	9,f
  3443  09A0  299C               	goto	u4095
  3444  09A1  084C               	movf	??___ftdiv,w
  3445  09A2  00CF               	movwf	??___ftdiv+3
  3446  09A3  084F               	movf	??___ftdiv+3,w
  3447  09A4  06D5               	xorwf	___ftdiv@sign,f
  3448  09A5  3080               	movlw	128
  3449  09A6  00CC               	movwf	??___ftdiv
  3450  09A7  084C               	movf	??___ftdiv,w
  3451  09A8  05D5               	andwf	___ftdiv@sign,f
  3452  09A9  17CA               	bsf	___ftdiv@f1+1,7
  3453  09AA  30FF               	movlw	255
  3454  09AB  05C9               	andwf	___ftdiv@f1,f
  3455  09AC  30FF               	movlw	255
  3456  09AD  05CA               	andwf	___ftdiv@f1+1,f
  3457  09AE  3000               	movlw	0
  3458  09AF  05CB               	andwf	___ftdiv@f1+2,f
  3459  09B0  17C7               	bsf	___ftdiv@f2+1,7
  3460  09B1  30FF               	movlw	255
  3461  09B2  05C6               	andwf	___ftdiv@f2,f
  3462  09B3  30FF               	movlw	255
  3463  09B4  05C7               	andwf	___ftdiv@f2+1,f
  3464  09B5  3000               	movlw	0
  3465  09B6  05C8               	andwf	___ftdiv@f2+2,f
  3466  09B7  3018               	movlw	24
  3467  09B8  00CC               	movwf	??___ftdiv
  3468  09B9  084C               	movf	??___ftdiv,w
  3469  09BA  00D0               	movwf	___ftdiv@cntr
  3470  09BB                     l3096:	
  3471  09BB  3001               	movlw	1
  3472  09BC                     u4105:	
  3473  09BC  35D1               	lslf	___ftdiv@f3,f
  3474  09BD  0DD2               	rlf	___ftdiv@f3+1,f
  3475  09BE  0DD3               	rlf	___ftdiv@f3+2,f
  3476  09BF  0B89               	decfsz	9,f
  3477  09C0  29BC               	goto	u4105
  3478  09C1  0848               	movf	___ftdiv@f2+2,w
  3479  09C2  024B               	subwf	___ftdiv@f1+2,w
  3480  09C3  1D03               	skipz
  3481  09C4  29CB               	goto	u4115
  3482  09C5  0847               	movf	___ftdiv@f2+1,w
  3483  09C6  024A               	subwf	___ftdiv@f1+1,w
  3484  09C7  1D03               	skipz
  3485  09C8  29CB               	goto	u4115
  3486  09C9  0846               	movf	___ftdiv@f2,w
  3487  09CA  0249               	subwf	___ftdiv@f1,w
  3488  09CB                     u4115:	
  3489  09CB  1C03               	skipc
  3490  09CC  29D4               	goto	l3104
  3491  09CD  0846               	movf	___ftdiv@f2,w
  3492  09CE  02C9               	subwf	___ftdiv@f1,f
  3493  09CF  0847               	movf	___ftdiv@f2+1,w
  3494  09D0  3BCA               	subwfb	___ftdiv@f1+1,f
  3495  09D1  0848               	movf	___ftdiv@f2+2,w
  3496  09D2  3BCB               	subwfb	___ftdiv@f1+2,f
  3497  09D3  1451               	bsf	___ftdiv@f3,0
  3498  09D4                     l3104:	
  3499  09D4  3001               	movlw	1
  3500  09D5                     u4125:	
  3501  09D5  35C9               	lslf	___ftdiv@f1,f
  3502  09D6  0DCA               	rlf	___ftdiv@f1+1,f
  3503  09D7  0DCB               	rlf	___ftdiv@f1+2,f
  3504  09D8  0B89               	decfsz	9,f
  3505  09D9  29D5               	goto	u4125
  3506  09DA  3001               	movlw	1
  3507  09DB  02D0               	subwf	___ftdiv@cntr,f
  3508  09DC  1D03               	btfss	3,2
  3509  09DD  29BB               	goto	l3096
  3510  09DE  0851               	movf	___ftdiv@f3,w
  3511  09DF  00A0               	movwf	___ftpack@arg
  3512  09E0  0852               	movf	___ftdiv@f3+1,w
  3513  09E1  00A1               	movwf	___ftpack@arg+1
  3514  09E2  0853               	movf	___ftdiv@f3+2,w
  3515  09E3  00A2               	movwf	___ftpack@arg+2
  3516  09E4  0854               	movf	___ftdiv@exp,w
  3517  09E5  00CC               	movwf	??___ftdiv
  3518  09E6  084C               	movf	??___ftdiv,w
  3519  09E7  00A3               	movwf	___ftpack@exp
  3520  09E8  0855               	movf	___ftdiv@sign,w
  3521  09E9  00CD               	movwf	??___ftdiv+1
  3522  09EA  084D               	movf	??___ftdiv+1,w
  3523  09EB  00A4               	movwf	___ftpack@sign
  3524  09EC  3197  2714         	fcall	___ftpack
  3525  09EE  0020               	movlb	0	; select bank0
  3526  09EF  0820               	movf	?___ftpack,w
  3527  09F0  00C6               	movwf	?___ftdiv
  3528  09F1  0821               	movf	?___ftpack+1,w
  3529  09F2  00C7               	movwf	?___ftdiv+1
  3530  09F3  0822               	movf	?___ftpack+2,w
  3531  09F4  00C8               	movwf	?___ftdiv+2
  3532  09F5  0008               	return
  3533  09F6                     __end_of___ftdiv:	
  3534                           
  3535                           	psect	text10
  3536  145C                     __ptext10:	
  3537 ;; *************** function ___awtoft *****************
  3538 ;; Defined at:
  3539 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
  3540 ;; Parameters:    Size  Location     Type
  3541 ;;  c               2    8[BANK0 ] int 
  3542 ;; Auto vars:     Size  Location     Type
  3543 ;;  sign            1   13[BANK0 ] unsigned char 
  3544 ;; Return value:  Size  Location     Type
  3545 ;;                  3    8[BANK0 ] float 
  3546 ;; Registers used:
  3547 ;;		wreg, status,2, status,0, pclath, cstack
  3548 ;; Tracked objects:
  3549 ;;		On entry : 0/0
  3550 ;;		On exit  : 0/0
  3551 ;;		Unchanged: 0/0
  3552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3553 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3554 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3555 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3556 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3557 ;;Total ram usage:        6 bytes
  3558 ;; Hardware stack levels used:    1
  3559 ;; Hardware stack levels required when called:    5
  3560 ;; This function calls:
  3561 ;;		___ftpack
  3562 ;; This function is called by:
  3563 ;;		_RadioOperation
  3564 ;; This function uses a non-reentrant model
  3565 ;;
  3566                           
  3567                           
  3568                           ;psect for function ___awtoft
  3569  145C                     ___awtoft:	
  3570                           
  3571                           ;incstack = 0
  3572                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  3573  145C  0020               	movlb	0	; select bank0
  3574  145D  01AD               	clrf	___awtoft@sign
  3575  145E  1FA9               	btfss	___awtoft@c+1,7
  3576  145F  2C67               	goto	l3066
  3577  1460  09A8               	comf	___awtoft@c,f
  3578  1461  09A9               	comf	___awtoft@c+1,f
  3579  1462  0AA8               	incf	___awtoft@c,f
  3580  1463  1903               	skipnz
  3581  1464  0AA9               	incf	___awtoft@c+1,f
  3582  1465  01AD               	clrf	___awtoft@sign
  3583  1466  0AAD               	incf	___awtoft@sign,f
  3584  1467                     l3066:	
  3585  1467  0828               	movf	___awtoft@c,w
  3586  1468  00A0               	movwf	___ftpack@arg
  3587  1469  0829               	movf	___awtoft@c+1,w
  3588  146A  00A1               	movwf	___ftpack@arg+1
  3589  146B  01A2               	clrf	___ftpack@arg+2
  3590  146C  308E               	movlw	142
  3591  146D  00AB               	movwf	??___awtoft
  3592  146E  082B               	movf	??___awtoft,w
  3593  146F  00A3               	movwf	___ftpack@exp
  3594  1470  082D               	movf	___awtoft@sign,w
  3595  1471  00AC               	movwf	??___awtoft+1
  3596  1472  082C               	movf	??___awtoft+1,w
  3597  1473  00A4               	movwf	___ftpack@sign
  3598  1474  3197  2714         	fcall	___ftpack
  3599  1476  0020               	movlb	0	; select bank0
  3600  1477  0820               	movf	?___ftpack,w
  3601  1478  00A8               	movwf	?___awtoft
  3602  1479  0821               	movf	?___ftpack+1,w
  3603  147A  00A9               	movwf	?___awtoft+1
  3604  147B  0822               	movf	?___ftpack+2,w
  3605  147C  00AA               	movwf	?___awtoft+2
  3606  147D  0008               	return
  3607  147E                     __end_of___awtoft:	
  3608                           
  3609                           	psect	text11
  3610  1245                     __ptext11:	
  3611 ;; *************** function _TMR2_StopTimer *****************
  3612 ;; Defined at:
  3613 ;;		line 42 in file "Timer.c"
  3614 ;; Parameters:    Size  Location     Type
  3615 ;;		None
  3616 ;; Auto vars:     Size  Location     Type
  3617 ;;		None
  3618 ;; Return value:  Size  Location     Type
  3619 ;;                  1    wreg      void 
  3620 ;; Registers used:
  3621 ;;		None
  3622 ;; Tracked objects:
  3623 ;;		On entry : 0/0
  3624 ;;		On exit  : 0/0
  3625 ;;		Unchanged: 0/0
  3626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3631 ;;Total ram usage:        0 bytes
  3632 ;; Hardware stack levels used:    1
  3633 ;; Hardware stack levels required when called:    4
  3634 ;; This function calls:
  3635 ;;		Nothing
  3636 ;; This function is called by:
  3637 ;;		_RadioOperation
  3638 ;; This function uses a non-reentrant model
  3639 ;;
  3640                           
  3641                           
  3642                           ;psect for function _TMR2_StopTimer
  3643  1245                     _TMR2_StopTimer:	
  3644                           
  3645                           ;Timer.c: 45: T2CONbits.TMR2ON = 0;
  3646                           
  3647                           ;incstack = 0
  3648                           ; Regs used in _TMR2_StopTimer: []
  3649  1245  0020               	movlb	0	; select bank0
  3650  1246  111C               	bcf	28,2	;volatile
  3651  1247  0008               	return
  3652  1248                     __end_of_TMR2_StopTimer:	
  3653                           
  3654                           	psect	text12
  3655  1242                     __ptext12:	
  3656 ;; *************** function _TMR2_StartTimer *****************
  3657 ;; Defined at:
  3658 ;;		line 36 in file "Timer.c"
  3659 ;; Parameters:    Size  Location     Type
  3660 ;;		None
  3661 ;; Auto vars:     Size  Location     Type
  3662 ;;		None
  3663 ;; Return value:  Size  Location     Type
  3664 ;;                  1    wreg      void 
  3665 ;; Registers used:
  3666 ;;		None
  3667 ;; Tracked objects:
  3668 ;;		On entry : 0/0
  3669 ;;		On exit  : 0/0
  3670 ;;		Unchanged: 0/0
  3671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3676 ;;Total ram usage:        0 bytes
  3677 ;; Hardware stack levels used:    1
  3678 ;; Hardware stack levels required when called:    4
  3679 ;; This function calls:
  3680 ;;		Nothing
  3681 ;; This function is called by:
  3682 ;;		_main
  3683 ;;		_RadioOperation
  3684 ;; This function uses a non-reentrant model
  3685 ;;
  3686                           
  3687                           
  3688                           ;psect for function _TMR2_StartTimer
  3689  1242                     _TMR2_StartTimer:	
  3690                           
  3691                           ;Timer.c: 39: T2CONbits.TMR2ON = 1;
  3692                           
  3693                           ;incstack = 0
  3694                           ; Regs used in _TMR2_StartTimer: []
  3695  1242  0020               	movlb	0	; select bank0
  3696  1243  151C               	bsf	28,2	;volatile
  3697  1244  0008               	return
  3698  1245                     __end_of_TMR2_StartTimer:	
  3699                           
  3700                           	psect	text13
  3701  12AF                     __ptext13:	
  3702 ;; *************** function _SR_FRSTalk *****************
  3703 ;; Defined at:
  3704 ;;		line 7 in file "SR_FRS.c"
  3705 ;; Parameters:    Size  Location     Type
  3706 ;;		None
  3707 ;; Auto vars:     Size  Location     Type
  3708 ;;		None
  3709 ;; Return value:  Size  Location     Type
  3710 ;;                  1    wreg      void 
  3711 ;; Registers used:
  3712 ;;		wreg, status,2, status,0
  3713 ;; Tracked objects:
  3714 ;;		On entry : 0/0
  3715 ;;		On exit  : 0/0
  3716 ;;		Unchanged: 0/0
  3717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3720 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3721 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3722 ;;Total ram usage:        1 bytes
  3723 ;; Hardware stack levels used:    1
  3724 ;; Hardware stack levels required when called:    4
  3725 ;; This function calls:
  3726 ;;		Nothing
  3727 ;; This function is called by:
  3728 ;;		_RadioOperation
  3729 ;; This function uses a non-reentrant model
  3730 ;;
  3731                           
  3732                           
  3733                           ;psect for function _SR_FRSTalk
  3734  12AF                     _SR_FRSTalk:	
  3735                           
  3736                           ;SR_FRS.c: 8: PORTCbits.RC7 ^= 1;
  3737                           
  3738                           ;incstack = 0
  3739                           ; Regs used in _SR_FRSTalk: [wreg+status,2+status,0]
  3740  12AF  0020               	movlb	0	; select bank0
  3741  12B0  0D0E               	rlf	14,w	;volatile
  3742  12B1  0D0E               	rlf	14,w	;volatile
  3743  12B2  3901               	andlw	1
  3744  12B3  00A0               	movwf	??_SR_FRSTalk
  3745  12B4  3001               	movlw	1
  3746  12B5  06A0               	xorwf	??_SR_FRSTalk,f
  3747  12B6  0CA0               	rrf	??_SR_FRSTalk,f
  3748  12B7  0CA0               	rrf	??_SR_FRSTalk,f
  3749  12B8  080E               	movf	14,w	;volatile
  3750  12B9  0620               	xorwf	??_SR_FRSTalk,w
  3751  12BA  397F               	andlw	-129
  3752  12BB  0620               	xorwf	??_SR_FRSTalk,w
  3753  12BC  008E               	movwf	14	;volatile
  3754  12BD  0008               	return
  3755  12BE                     __end_of_SR_FRSTalk:	
  3756                           
  3757                           	psect	text14
  3758  12F3                     __ptext14:	
  3759 ;; *************** function _SR_FRSPowerDown *****************
  3760 ;; Defined at:
  3761 ;;		line 11 in file "SR_FRS.c"
  3762 ;; Parameters:    Size  Location     Type
  3763 ;;		None
  3764 ;; Auto vars:     Size  Location     Type
  3765 ;;		None
  3766 ;; Return value:  Size  Location     Type
  3767 ;;                  1    wreg      void 
  3768 ;; Registers used:
  3769 ;;		wreg, status,2, status,0
  3770 ;; Tracked objects:
  3771 ;;		On entry : 0/0
  3772 ;;		On exit  : 0/0
  3773 ;;		Unchanged: 0/0
  3774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3777 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3778 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3779 ;;Total ram usage:        1 bytes
  3780 ;; Hardware stack levels used:    1
  3781 ;; Hardware stack levels required when called:    4
  3782 ;; This function calls:
  3783 ;;		Nothing
  3784 ;; This function is called by:
  3785 ;;		_RadioOperation
  3786 ;; This function uses a non-reentrant model
  3787 ;;
  3788                           
  3789                           
  3790                           ;psect for function _SR_FRSPowerDown
  3791  12F3                     _SR_FRSPowerDown:	
  3792                           
  3793                           ;SR_FRS.c: 12: PORTCbits.RC6 ^= 1;
  3794                           
  3795                           ;incstack = 0
  3796                           ; Regs used in _SR_FRSPowerDown: [wreg+status,2+status,0]
  3797  12F3  0020               	movlb	0	; select bank0
  3798  12F4  0E0E               	swapf	14,w	;volatile
  3799  12F5  00A0               	movwf	??_SR_FRSPowerDown
  3800  12F6  0CA0               	rrf	??_SR_FRSPowerDown,f
  3801  12F7  0C20               	rrf	??_SR_FRSPowerDown,w
  3802  12F8  3901               	andlw	1
  3803  12F9  00A0               	movwf	??_SR_FRSPowerDown
  3804  12FA  3001               	movlw	1
  3805  12FB  06A0               	xorwf	??_SR_FRSPowerDown,f
  3806  12FC  0EA0               	swapf	??_SR_FRSPowerDown,f
  3807  12FD  0DA0               	rlf	??_SR_FRSPowerDown,f
  3808  12FE  0DA0               	rlf	??_SR_FRSPowerDown,f
  3809  12FF  080E               	movf	14,w	;volatile
  3810  1300  0620               	xorwf	??_SR_FRSPowerDown,w
  3811  1301  39BF               	andlw	-65
  3812  1302  0620               	xorwf	??_SR_FRSPowerDown,w
  3813  1303  008E               	movwf	14	;volatile
  3814  1304  0008               	return
  3815  1305                     __end_of_SR_FRSPowerDown:	
  3816                           
  3817                           	psect	text15
  3818  12E1                     __ptext15:	
  3819 ;; *************** function _ReadVoltage *****************
  3820 ;; Defined at:
  3821 ;;		line 14 in file "ADC.c"
  3822 ;; Parameters:    Size  Location     Type
  3823 ;;  ch              1    wreg     unsigned char 
  3824 ;; Auto vars:     Size  Location     Type
  3825 ;;  ch              1    4[BANK0 ] unsigned char 
  3826 ;; Return value:  Size  Location     Type
  3827 ;;                  2    1[BANK0 ] int 
  3828 ;; Registers used:
  3829 ;;		wreg, status,2, status,0, pclath, cstack
  3830 ;; Tracked objects:
  3831 ;;		On entry : 0/0
  3832 ;;		On exit  : 0/0
  3833 ;;		Unchanged: 0/0
  3834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3835 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3836 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3838 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3839 ;;Total ram usage:        4 bytes
  3840 ;; Hardware stack levels used:    1
  3841 ;; Hardware stack levels required when called:    5
  3842 ;; This function calls:
  3843 ;;		_SetADCChannel
  3844 ;; This function is called by:
  3845 ;;		_RadioOperation
  3846 ;; This function uses a non-reentrant model
  3847 ;;
  3848                           
  3849                           
  3850                           ;psect for function _ReadVoltage
  3851  12E1                     _ReadVoltage:	
  3852                           
  3853                           ;incstack = 0
  3854                           ; Regs used in _ReadVoltage: [wreg+status,2+status,0+pclath+cstack]
  3855                           ;ReadVoltage@ch stored from wreg
  3856  12E1  0020               	movlb	0	; select bank0
  3857  12E2  00A4               	movwf	ReadVoltage@ch
  3858                           
  3859                           ;ADC.c: 15: SetADCChannel(ch);
  3860  12E3  0824               	movf	ReadVoltage@ch,w
  3861  12E4  3194  243B  3192   	fcall	_SetADCChannel
  3862                           
  3863                           ;ADC.c: 16: ADCON0bits.GO_nDONE = 1;
  3864  12E7  0021               	movlb	1	; select bank1
  3865  12E8  149D               	bsf	29,1	;volatile
  3866  12E9                     l320:	
  3867                           ;ADC.c: 17: while(ADCON0bits.GO_nDONE);
  3868                           
  3869  12E9  189D               	btfsc	29,1	;volatile
  3870  12EA  2AE9               	goto	l320
  3871                           
  3872                           ;ADC.c: 18: return ((ADRESL << 8) + ADRESL);
  3873  12EB  081B               	movf	27,w	;volatile
  3874  12EC  0020               	movlb	0	; select bank0
  3875  12ED  00A2               	movwf	?_ReadVoltage+1
  3876  12EE  0021               	movlb	1	; select bank1
  3877  12EF  081B               	movf	27,w	;volatile
  3878  12F0  0020               	movlb	0	; select bank0
  3879  12F1  00A1               	movwf	?_ReadVoltage
  3880  12F2  0008               	return
  3881  12F3                     __end_of_ReadVoltage:	
  3882                           
  3883                           	psect	text16
  3884  143B                     __ptext16:	
  3885 ;; *************** function _SetADCChannel *****************
  3886 ;; Defined at:
  3887 ;;		line 21 in file "ADC.c"
  3888 ;; Parameters:    Size  Location     Type
  3889 ;;  ch              1    wreg     unsigned char 
  3890 ;; Auto vars:     Size  Location     Type
  3891 ;;  ch              1    0[BANK0 ] unsigned char 
  3892 ;; Return value:  Size  Location     Type
  3893 ;;                  1    wreg      void 
  3894 ;; Registers used:
  3895 ;;		wreg, status,2, status,0
  3896 ;; Tracked objects:
  3897 ;;		On entry : 0/0
  3898 ;;		On exit  : 0/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3902 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3904 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3905 ;;Total ram usage:        1 bytes
  3906 ;; Hardware stack levels used:    1
  3907 ;; Hardware stack levels required when called:    4
  3908 ;; This function calls:
  3909 ;;		Nothing
  3910 ;; This function is called by:
  3911 ;;		_ReadVoltage
  3912 ;; This function uses a non-reentrant model
  3913 ;;
  3914                           
  3915                           
  3916                           ;psect for function _SetADCChannel
  3917  143B                     _SetADCChannel:	
  3918                           
  3919                           ;incstack = 0
  3920                           ; Regs used in _SetADCChannel: [wreg+status,2+status,0]
  3921                           ;SetADCChannel@ch stored from wreg
  3922  143B  0020               	movlb	0	; select bank0
  3923  143C  00A0               	movwf	SetADCChannel@ch
  3924                           
  3925                           ;ADC.c: 22: if(ch == 1){
  3926  143D  0320               	decf	SetADCChannel@ch,w
  3927  143E  1D03               	btfss	3,2
  3928  143F  2C46               	goto	l2936
  3929                           
  3930                           ;ADC.c: 23: ADCON0bits.CHS = 6;
  3931  1440  0021               	movlb	1	; select bank1
  3932  1441  081D               	movf	29,w	;volatile
  3933  1442  3983               	andlw	-125
  3934  1443  3818               	iorlw	24
  3935  1444  009D               	movwf	29	;volatile
  3936                           
  3937                           ;ADC.c: 24: }
  3938  1445  0008               	return
  3939  1446                     l2936:	
  3940                           
  3941                           ;ADC.c: 25: else if(ch == 2){
  3942  1446  3002               	movlw	2
  3943  1447  0020               	movlb	0	; select bank0
  3944  1448  0620               	xorwf	SetADCChannel@ch,w
  3945  1449  1D03               	btfss	3,2
  3946  144A  2C51               	goto	l2940
  3947                           
  3948                           ;ADC.c: 26: ADCON0bits.CHS = 29;
  3949  144B  0021               	movlb	1	; select bank1
  3950  144C  081D               	movf	29,w	;volatile
  3951  144D  3983               	andlw	-125
  3952  144E  3874               	iorlw	116
  3953  144F  009D               	movwf	29	;volatile
  3954                           
  3955                           ;ADC.c: 27: }
  3956  1450  0008               	return
  3957  1451                     l2940:	
  3958                           
  3959                           ;ADC.c: 28: else if(ch == 3){
  3960  1451  3003               	movlw	3
  3961  1452  0020               	movlb	0	; select bank0
  3962  1453  0620               	xorwf	SetADCChannel@ch,w
  3963  1454  1D03               	btfss	3,2
  3964  1455  0008               	return
  3965                           
  3966                           ;ADC.c: 29: ADCON0bits.CHS = 3;
  3967  1456  0021               	movlb	1	; select bank1
  3968  1457  081D               	movf	29,w	;volatile
  3969  1458  3983               	andlw	-125
  3970  1459  380C               	iorlw	12
  3971  145A  009D               	movwf	29	;volatile
  3972  145B  0008               	return
  3973  145C                     __end_of_SetADCChannel:	
  3974                           
  3975                           	psect	text17
  3976  12CF                     __ptext17:	
  3977 ;; *************** function _ReadCharger *****************
  3978 ;; Defined at:
  3979 ;;		line 84 in file "Function.c"
  3980 ;; Parameters:    Size  Location     Type
  3981 ;;		None
  3982 ;; Auto vars:     Size  Location     Type
  3983 ;;		None
  3984 ;; Return value:  Size  Location     Type
  3985 ;;                  1    wreg      unsigned char 
  3986 ;; Registers used:
  3987 ;;		wreg
  3988 ;; Tracked objects:
  3989 ;;		On entry : 0/0
  3990 ;;		On exit  : 0/0
  3991 ;;		Unchanged: 0/0
  3992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3997 ;;Total ram usage:        0 bytes
  3998 ;; Hardware stack levels used:    1
  3999 ;; Hardware stack levels required when called:    4
  4000 ;; This function calls:
  4001 ;;		Nothing
  4002 ;; This function is called by:
  4003 ;;		_RadioOperation
  4004 ;; This function uses a non-reentrant model
  4005 ;;
  4006                           
  4007                           
  4008                           ;psect for function _ReadCharger
  4009  12CF                     _ReadCharger:	
  4010                           
  4011                           ;Function.c: 86: if(!PORTCbits.RC0 && PORTCbits.RC1){
  4012                           
  4013                           ;incstack = 0
  4014                           ; Regs used in _ReadCharger: [wreg]
  4015  12CF  0020               	movlb	0	; select bank0
  4016  12D0  1C0E               	btfss	14,0	;volatile
  4017  12D1  1C8E               	btfss	14,1	;volatile
  4018  12D2  2AD5               	goto	l80
  4019                           
  4020                           ;Function.c: 87: return 1;
  4021  12D3  3001               	movlw	1
  4022  12D4  0008               	return
  4023  12D5                     l80:	
  4024                           
  4025                           ;Function.c: 88: }
  4026                           ;Function.c: 90: if(PORTCbits.RC0 && !PORTCbits.RC1){
  4027  12D5  180E               	btfsc	14,0	;volatile
  4028  12D6  188E               	btfsc	14,1	;volatile
  4029  12D7  2ADA               	goto	l82
  4030                           
  4031                           ;Function.c: 91: return 2;
  4032  12D8  3002               	movlw	2
  4033  12D9  0008               	return
  4034  12DA                     l82:	
  4035                           
  4036                           ;Function.c: 92: }
  4037                           ;Function.c: 94: if(PORTCbits.RC0 && PORTCbits.RC1){
  4038  12DA  180E               	btfsc	14,0	;volatile
  4039  12DB  1C8E               	btfss	14,1	;volatile
  4040  12DC  2ADF               	goto	l3016
  4041                           
  4042                           ;Function.c: 95: return 0;
  4043  12DD  3000               	movlw	0
  4044                           
  4045                           ;Function.c: 96: }
  4046  12DE  0008               	return
  4047  12DF                     l3016:	
  4048                           
  4049                           ;Function.c: 97: else{
  4050                           ;Function.c: 98: return 255;
  4051  12DF  30FF               	movlw	255
  4052  12E0  0008               	return
  4053  12E1                     __end_of_ReadCharger:	
  4054                           
  4055                           	psect	text18
  4056  0002                     __ptext18:	
  4057 ;; *************** function _GetTicker *****************
  4058 ;; Defined at:
  4059 ;;		line 61 in file "Timer.c"
  4060 ;; Parameters:    Size  Location     Type
  4061 ;;		None
  4062 ;; Auto vars:     Size  Location     Type
  4063 ;;		None
  4064 ;; Return value:  Size  Location     Type
  4065 ;;                  2  118[None  ] unsigned int 
  4066 ;; Registers used:
  4067 ;;		None
  4068 ;; Tracked objects:
  4069 ;;		On entry : 0/0
  4070 ;;		On exit  : 0/0
  4071 ;;		Unchanged: 0/0
  4072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4076 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4077 ;;Total ram usage:        0 bytes
  4078 ;; Hardware stack levels used:    1
  4079 ;; Hardware stack levels required when called:    4
  4080 ;; This function calls:
  4081 ;;		Nothing
  4082 ;; This function is called by:
  4083 ;;		_RadioOperation
  4084 ;; This function uses a non-reentrant model
  4085 ;;
  4086                           
  4087                           
  4088                           ;psect for function _GetTicker
  4089  0002                     _GetTicker:	
  4090                           
  4091                           ;Timer.c: 62: return ticker;
  4092                           ;	Return value of _GetTicker is never used
  4093                           
  4094                           ;incstack = 0
  4095                           ; Regs used in _GetTicker: []
  4096  0002  0008               	return
  4097  0003                     __end_of_GetTicker:	
  4098                           
  4099                           	psect	text19
  4100  1248                     __ptext19:	
  4101 ;; *************** function _ClearTicker *****************
  4102 ;; Defined at:
  4103 ;;		line 57 in file "Timer.c"
  4104 ;; Parameters:    Size  Location     Type
  4105 ;;		None
  4106 ;; Auto vars:     Size  Location     Type
  4107 ;;		None
  4108 ;; Return value:  Size  Location     Type
  4109 ;;                  1    wreg      void 
  4110 ;; Registers used:
  4111 ;;		status,2
  4112 ;; Tracked objects:
  4113 ;;		On entry : 0/0
  4114 ;;		On exit  : 0/0
  4115 ;;		Unchanged: 0/0
  4116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4120 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4121 ;;Total ram usage:        0 bytes
  4122 ;; Hardware stack levels used:    1
  4123 ;; Hardware stack levels required when called:    4
  4124 ;; This function calls:
  4125 ;;		Nothing
  4126 ;; This function is called by:
  4127 ;;		_RadioOperation
  4128 ;; This function uses a non-reentrant model
  4129 ;;
  4130                           
  4131                           
  4132                           ;psect for function _ClearTicker
  4133  1248                     _ClearTicker:	
  4134                           
  4135                           ;Timer.c: 58: ticker = 0;
  4136                           
  4137                           ;incstack = 0
  4138                           ; Regs used in _ClearTicker: [status,2]
  4139  1248  0021               	movlb	1	; select bank1
  4140  1249  01E1               	clrf	_ticker^(0+128)
  4141  124A  01E2               	clrf	(_ticker+1)^(0+128)
  4142  124B  0008               	return
  4143  124C                     __end_of_ClearTicker:	
  4144                           
  4145                           	psect	text20
  4146  123F                     __ptext20:	
  4147 ;; *************** function _RadioBegin *****************
  4148 ;; Defined at:
  4149 ;;		line 21 in file "Radio.c"
  4150 ;; Parameters:    Size  Location     Type
  4151 ;;		None
  4152 ;; Auto vars:     Size  Location     Type
  4153 ;;		None
  4154 ;; Return value:  Size  Location     Type
  4155 ;;                  1    wreg      void 
  4156 ;; Registers used:
  4157 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4158 ;; Tracked objects:
  4159 ;;		On entry : 0/0
  4160 ;;		On exit  : 0/0
  4161 ;;		Unchanged: 0/0
  4162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4166 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4167 ;;Total ram usage:        0 bytes
  4168 ;; Hardware stack levels used:    1
  4169 ;; Hardware stack levels required when called:   11
  4170 ;; This function calls:
  4171 ;;		_SR_FRSStart
  4172 ;; This function is called by:
  4173 ;;		_main
  4174 ;; This function uses a non-reentrant model
  4175 ;;
  4176                           
  4177                           
  4178                           ;psect for function _RadioBegin
  4179  123F                     _RadioBegin:	
  4180                           
  4181                           ;Radio.c: 22: SR_FRSStart();
  4182                           
  4183                           ;incstack = 0
  4184                           ; Regs used in _RadioBegin: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4185  123F  3195  2506         	fcall	_SR_FRSStart
  4186  1241  0008               	return
  4187  1242                     __end_of_RadioBegin:	
  4188                           
  4189                           	psect	text21
  4190  1506                     __ptext21:	
  4191 ;; *************** function _SR_FRSStart *****************
  4192 ;; Defined at:
  4193 ;;		line 15 in file "SR_FRS.c"
  4194 ;; Parameters:    Size  Location     Type
  4195 ;;		None
  4196 ;; Auto vars:     Size  Location     Type
  4197 ;;		None
  4198 ;; Return value:  Size  Location     Type
  4199 ;;                  1    wreg      void 
  4200 ;; Registers used:
  4201 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4202 ;; Tracked objects:
  4203 ;;		On entry : 0/0
  4204 ;;		On exit  : 0/0
  4205 ;;		Unchanged: 0/0
  4206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4210 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4211 ;;Total ram usage:        0 bytes
  4212 ;; Hardware stack levels used:    1
  4213 ;; Hardware stack levels required when called:   10
  4214 ;; This function calls:
  4215 ;;		_Delay
  4216 ;;		_SetCommandMode
  4217 ;;		_SetFrequency
  4218 ;;		_SetMIC
  4219 ;;		_SetPowerSave
  4220 ;;		_SetVOX
  4221 ;;		_SetVolume
  4222 ;; This function is called by:
  4223 ;;		_RadioBegin
  4224 ;; This function uses a non-reentrant model
  4225 ;;
  4226                           
  4227                           
  4228                           ;psect for function _SR_FRSStart
  4229  1506                     _SR_FRSStart:	
  4230                           
  4231                           ;SR_FRS.c: 16: SetCommandMode();
  4232                           
  4233                           ;incstack = 0
  4234                           ; Regs used in _SR_FRSStart: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4235  1506  3192  2265  3195   	fcall	_SetCommandMode
  4236                           
  4237                           ;SR_FRS.c: 17: Delay(100);
  4238  1509  3064               	movlw	100
  4239  150A  0020               	movlb	0	; select bank0
  4240  150B  00A0               	movwf	Delay@wait
  4241  150C  3000               	movlw	0
  4242  150D  00A1               	movwf	Delay@wait+1
  4243  150E  3193  23E3  3195   	fcall	_Delay
  4244                           
  4245                           ;SR_FRS.c: 19: SetFrequency();
  4246  1511  3194  247E  3195   	fcall	_SetFrequency
  4247                           
  4248                           ;SR_FRS.c: 20: Delay(100);
  4249  1514  3064               	movlw	100
  4250  1515  0020               	movlb	0	; select bank0
  4251  1516  00A0               	movwf	Delay@wait
  4252  1517  3000               	movlw	0
  4253  1518  00A1               	movwf	Delay@wait+1
  4254  1519  3193  23E3  3195   	fcall	_Delay
  4255                           
  4256                           ;SR_FRS.c: 22: SetPowerSave();
  4257  151C  3192  2296  3195   	fcall	_SetPowerSave
  4258                           
  4259                           ;SR_FRS.c: 23: Delay(100);
  4260  151F  3064               	movlw	100
  4261  1520  0020               	movlb	0	; select bank0
  4262  1521  00A0               	movwf	Delay@wait
  4263  1522  3000               	movlw	0
  4264  1523  00A1               	movwf	Delay@wait+1
  4265  1524  3193  23E3  3195   	fcall	_Delay
  4266                           
  4267                           ;SR_FRS.c: 25: SetVolume(5);
  4268  1527  3005               	movlw	5
  4269  1528  3194  2400  3195   	fcall	_SetVolume
  4270                           
  4271                           ;SR_FRS.c: 26: Delay(100);
  4272  152B  3064               	movlw	100
  4273  152C  0020               	movlb	0	; select bank0
  4274  152D  00A0               	movwf	Delay@wait
  4275  152E  3000               	movlw	0
  4276  152F  00A1               	movwf	Delay@wait+1
  4277  1530  3193  23E3  3195   	fcall	_Delay
  4278                           
  4279                           ;SR_FRS.c: 28: SetVOX(0);
  4280  1533  3000               	movlw	0
  4281  1534  0020               	movlb	0	; select bank0
  4282  1535  00ED               	movwf	SetVOX@volume
  4283  1536  00EE               	movwf	SetVOX@volume+1
  4284  1537  3187  27E2  3195   	fcall	_SetVOX
  4285                           
  4286                           ;SR_FRS.c: 29: Delay(100);
  4287  153A  3064               	movlw	100
  4288  153B  0020               	movlb	0	; select bank0
  4289  153C  00A0               	movwf	Delay@wait
  4290  153D  3000               	movlw	0
  4291  153E  00A1               	movwf	Delay@wait+1
  4292  153F  3193  23E3  3195   	fcall	_Delay
  4293                           
  4294                           ;SR_FRS.c: 31: SetMIC(5,0);
  4295  1542  0020               	movlb	0	; select bank0
  4296  1543  01ED               	clrf	SetMIC@scram
  4297  1544  3005               	movlw	5
  4298  1545  3194  24A4         	fcall	_SetMIC
  4299  1547  0008               	return
  4300  1548                     __end_of_SR_FRSStart:	
  4301                           
  4302                           	psect	text22
  4303  1400                     __ptext22:	
  4304 ;; *************** function _SetVolume *****************
  4305 ;; Defined at:
  4306 ;;		line 47 in file "SR_FRS.c"
  4307 ;; Parameters:    Size  Location     Type
  4308 ;;  volume          1    wreg     unsigned char 
  4309 ;; Auto vars:     Size  Location     Type
  4310 ;;  volume          1   79[BANK0 ] unsigned char 
  4311 ;; Return value:  Size  Location     Type
  4312 ;;                  1    wreg      void 
  4313 ;; Registers used:
  4314 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4315 ;; Tracked objects:
  4316 ;;		On entry : 0/0
  4317 ;;		On exit  : 0/0
  4318 ;;		Unchanged: 0/0
  4319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4321 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4322 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4323 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4324 ;;Total ram usage:        3 bytes
  4325 ;; Hardware stack levels used:    1
  4326 ;; Hardware stack levels required when called:    9
  4327 ;; This function calls:
  4328 ;;		_printf
  4329 ;; This function is called by:
  4330 ;;		_SR_FRSStart
  4331 ;; This function uses a non-reentrant model
  4332 ;;
  4333                           
  4334                           
  4335                           ;psect for function _SetVolume
  4336  1400                     _SetVolume:	
  4337                           
  4338                           ;incstack = 0
  4339                           ; Regs used in _SetVolume: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4340                           ;SetVolume@volume stored from wreg
  4341  1400  0020               	movlb	0	; select bank0
  4342  1401  00EF               	movwf	SetVolume@volume
  4343                           
  4344                           ;SR_FRS.c: 48: if((volume < 9) && (volume > 1)){
  4345  1402  3009               	movlw	9
  4346  1403  026F               	subwf	SetVolume@volume,w
  4347  1404  1803               	skipnc
  4348  1405  0008               	return
  4349  1406  3002               	movlw	2
  4350  1407  026F               	subwf	SetVolume@volume,w
  4351  1408  1C03               	skipc
  4352  1409  0008               	return
  4353                           
  4354                           ;SR_FRS.c: 49: printf("AT+DMOSETVOLUME=%c",volume);
  4355  140A  30C6               	movlw	low (STR_4| (0+32768))
  4356  140B  0021               	movlb	1	; select bank1
  4357  140C  00A0               	movwf	printf@f^(0+128)
  4358  140D  3090               	movlw	high (STR_4| (0+32768))
  4359  140E  00A1               	movwf	(printf@f^(0+128)+1)
  4360  140F  0020               	movlb	0	; select bank0
  4361  1410  086F               	movf	SetVolume@volume,w
  4362  1411  00ED               	movwf	??_SetVolume
  4363  1412  01EE               	clrf	??_SetVolume+1
  4364  1413  086D               	movf	??_SetVolume,w
  4365  1414  0021               	movlb	1	; select bank1
  4366  1415  00A2               	movwf	(?_printf^(0+128)+2)
  4367  1416  0020               	movlb	0	; select bank0
  4368  1417  086E               	movf	??_SetVolume+1,w
  4369  1418  0021               	movlb	1	; select bank1
  4370  1419  00A3               	movwf	((?_printf+1)^(0+128)+2)
  4371  141A  3180  2042         	fcall	_printf
  4372  141C  0008               	return
  4373  141D                     __end_of_SetVolume:	
  4374                           
  4375                           	psect	text23
  4376  07E2                     __ptext23:	
  4377 ;; *************** function _SetVOX *****************
  4378 ;; Defined at:
  4379 ;;		line 53 in file "SR_FRS.c"
  4380 ;; Parameters:    Size  Location     Type
  4381 ;;  volume          2   77[BANK0 ] int 
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;		None
  4384 ;; Return value:  Size  Location     Type
  4385 ;;                  1    wreg      void 
  4386 ;; Registers used:
  4387 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4388 ;; Tracked objects:
  4389 ;;		On entry : 0/0
  4390 ;;		On exit  : 0/0
  4391 ;;		Unchanged: 0/0
  4392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4393 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4395 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4396 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4397 ;;Total ram usage:        3 bytes
  4398 ;; Hardware stack levels used:    1
  4399 ;; Hardware stack levels required when called:    9
  4400 ;; This function calls:
  4401 ;;		_printf
  4402 ;; This function is called by:
  4403 ;;		_SR_FRSStart
  4404 ;; This function uses a non-reentrant model
  4405 ;;
  4406                           
  4407                           
  4408                           ;psect for function _SetVOX
  4409  07E2                     _SetVOX:	
  4410                           
  4411                           ;SR_FRS.c: 54: if((volume < 8) && (volume >= 0)){
  4412                           
  4413                           ;incstack = 0
  4414                           ; Regs used in _SetVOX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4415  07E2  0020               	movlb	0	; select bank0
  4416  07E3  086E               	movf	SetVOX@volume+1,w
  4417  07E4  3A80               	xorlw	128
  4418  07E5  00EF               	movwf	??_SetVOX
  4419  07E6  3080               	movlw	128
  4420  07E7  026F               	subwf	??_SetVOX,w
  4421  07E8  3008               	movlw	8
  4422  07E9  1903               	btfsc	3,2
  4423  07EA  026D               	subwf	SetVOX@volume,w
  4424  07EB  1803               	skipnc
  4425  07EC  0008               	return
  4426  07ED  0020               	movlb	0	; select bank0
  4427  07EE  1BEE               	btfsc	SetVOX@volume+1,7
  4428  07EF  0008               	return
  4429                           
  4430                           ;SR_FRS.c: 55: printf("AT+DMOSETVOLUME=%c",volume);
  4431  07F0  30C6               	movlw	low (STR_4| (0+32768))
  4432  07F1  0021               	movlb	1	; select bank1
  4433  07F2  00A0               	movwf	printf@f^(0+128)
  4434  07F3  3090               	movlw	high (STR_4| (0+32768))
  4435  07F4  00A1               	movwf	(printf@f^(0+128)+1)
  4436  07F5  0020               	movlb	0	; select bank0
  4437  07F6  086E               	movf	SetVOX@volume+1,w
  4438  07F7  0021               	movlb	1	; select bank1
  4439  07F8  00A3               	movwf	((?_printf+1)^(0+128)+2)
  4440  07F9  0020               	movlb	0	; select bank0
  4441  07FA  086D               	movf	SetVOX@volume,w
  4442  07FB  0021               	movlb	1	; select bank1
  4443  07FC  00A2               	movwf	(?_printf^(0+128)+2)
  4444  07FD  3180  2042         	fcall	_printf
  4445  07FF  0008               	return
  4446  0800                     __end_of_SetVOX:	
  4447                           
  4448                           	psect	text24
  4449  1296                     __ptext24:	
  4450 ;; *************** function _SetPowerSave *****************
  4451 ;; Defined at:
  4452 ;;		line 42 in file "SR_FRS.c"
  4453 ;; Parameters:    Size  Location     Type
  4454 ;;		None
  4455 ;; Auto vars:     Size  Location     Type
  4456 ;;		None
  4457 ;; Return value:  Size  Location     Type
  4458 ;;                  1    wreg      void 
  4459 ;; Registers used:
  4460 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4461 ;; Tracked objects:
  4462 ;;		On entry : 0/0
  4463 ;;		On exit  : 0/0
  4464 ;;		Unchanged: 0/0
  4465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4469 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4470 ;;Total ram usage:        0 bytes
  4471 ;; Hardware stack levels used:    1
  4472 ;; Hardware stack levels required when called:    9
  4473 ;; This function calls:
  4474 ;;		_printf
  4475 ;; This function is called by:
  4476 ;;		_SR_FRSStart
  4477 ;; This function uses a non-reentrant model
  4478 ;;
  4479                           
  4480                           
  4481                           ;psect for function _SetPowerSave
  4482  1296                     _SetPowerSave:	
  4483                           
  4484                           ;SR_FRS.c: 44: printf("AT+DMOAUTOPOWCONTR=%c",1);
  4485                           
  4486                           ;incstack = 0
  4487                           ; Regs used in _SetPowerSave: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4488  1296  30B0               	movlw	low (STR_3| (0+32768))
  4489  1297  0021               	movlb	1	; select bank1
  4490  1298  00A0               	movwf	printf@f^(0+128)
  4491  1299  3090               	movlw	high (STR_3| (0+32768))
  4492  129A  00A1               	movwf	(printf@f^(0+128)+1)
  4493  129B  3001               	movlw	1
  4494  129C  00A2               	movwf	(?_printf^(0+128)+2)
  4495  129D  3000               	movlw	0
  4496  129E  00A3               	movwf	(?_printf^(0+128)+3)
  4497  129F  3180  2042         	fcall	_printf
  4498  12A1  0008               	return
  4499  12A2                     __end_of_SetPowerSave:	
  4500                           
  4501                           	psect	text25
  4502  14A4                     __ptext25:	
  4503 ;; *************** function _SetMIC *****************
  4504 ;; Defined at:
  4505 ;;		line 59 in file "SR_FRS.c"
  4506 ;; Parameters:    Size  Location     Type
  4507 ;;  volume          1    wreg     unsigned char 
  4508 ;;  scram           1   77[BANK0 ] unsigned char 
  4509 ;; Auto vars:     Size  Location     Type
  4510 ;;  volume          1   78[BANK0 ] unsigned char 
  4511 ;; Return value:  Size  Location     Type
  4512 ;;                  1    wreg      void 
  4513 ;; Registers used:
  4514 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4515 ;; Tracked objects:
  4516 ;;		On entry : 0/0
  4517 ;;		On exit  : 0/0
  4518 ;;		Unchanged: 0/0
  4519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4520 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4521 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4522 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4523 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4524 ;;Total ram usage:        6 bytes
  4525 ;; Hardware stack levels used:    1
  4526 ;; Hardware stack levels required when called:    9
  4527 ;; This function calls:
  4528 ;;		_printf
  4529 ;; This function is called by:
  4530 ;;		_SR_FRSStart
  4531 ;; This function uses a non-reentrant model
  4532 ;;
  4533                           
  4534                           
  4535                           ;psect for function _SetMIC
  4536  14A4                     _SetMIC:	
  4537                           
  4538                           ;incstack = 0
  4539                           ; Regs used in _SetMIC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4540                           ;SetMIC@volume stored from wreg
  4541  14A4  0020               	movlb	0	; select bank0
  4542  14A5  00EE               	movwf	SetMIC@volume
  4543                           
  4544                           ;SR_FRS.c: 60: if((volume < 8) && (volume > 0)){
  4545  14A6  3008               	movlw	8
  4546  14A7  026E               	subwf	SetMIC@volume,w
  4547  14A8  1803               	skipnc
  4548  14A9  0008               	return
  4549  14AA  086E               	movf	SetMIC@volume,w
  4550  14AB  1903               	btfsc	3,2
  4551  14AC  0008               	return
  4552                           
  4553                           ;SR_FRS.c: 61: printf("AT+DMOSETMIC=%c,%c,%c",volume,scram,0);
  4554  14AD  309A               	movlw	low (STR_6| (0+32768))
  4555  14AE  0021               	movlb	1	; select bank1
  4556  14AF  00A0               	movwf	printf@f^(0+128)
  4557  14B0  3090               	movlw	high (STR_6| (0+32768))
  4558  14B1  00A1               	movwf	(printf@f^(0+128)+1)
  4559  14B2  0020               	movlb	0	; select bank0
  4560  14B3  086E               	movf	SetMIC@volume,w
  4561  14B4  0021               	movlb	1	; select bank1
  4562  14B5  00C8               	movwf	??_SetMIC^(0+128)
  4563  14B6  01C9               	clrf	(??_SetMIC^(0+128)+1)
  4564  14B7  0848               	movf	??_SetMIC^(0+128),w
  4565  14B8  00A2               	movwf	(?_printf^(0+128)+2)
  4566  14B9  0849               	movf	(??_SetMIC+1)^(0+128),w
  4567  14BA  00A3               	movwf	((?_printf+1)^(0+128)+2)
  4568  14BB  0020               	movlb	0	; select bank0
  4569  14BC  086D               	movf	SetMIC@scram,w
  4570  14BD  0021               	movlb	1	; select bank1
  4571  14BE  00CA               	movwf	(??_SetMIC+2)^(0+128)
  4572  14BF  01CB               	clrf	((??_SetMIC+2)^(0+128)+1)
  4573  14C0  084A               	movf	(??_SetMIC+2)^(0+128),w
  4574  14C1  00A4               	movwf	(?_printf^(0+128)+4)
  4575  14C2  084B               	movf	(??_SetMIC+3)^(0+128),w
  4576  14C3  00A5               	movwf	((?_printf+1)^(0+128)+4)
  4577  14C4  3000               	movlw	0
  4578  14C5  00A6               	movwf	(?_printf^(0+128)+6)
  4579  14C6  00A7               	movwf	((?_printf+1)^(0+128)+6)
  4580  14C7  3180  2042         	fcall	_printf
  4581  14C9  0008               	return
  4582  14CA                     __end_of_SetMIC:	
  4583                           
  4584                           	psect	text26
  4585  147E                     __ptext26:	
  4586 ;; *************** function _SetFrequency *****************
  4587 ;; Defined at:
  4588 ;;		line 38 in file "SR_FRS.c"
  4589 ;; Parameters:    Size  Location     Type
  4590 ;;		None
  4591 ;; Auto vars:     Size  Location     Type
  4592 ;;		None
  4593 ;; Return value:  Size  Location     Type
  4594 ;;                  1    wreg      void 
  4595 ;; Registers used:
  4596 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4597 ;; Tracked objects:
  4598 ;;		On entry : 0/0
  4599 ;;		On exit  : 0/0
  4600 ;;		Unchanged: 0/0
  4601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4605 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4606 ;;Total ram usage:        0 bytes
  4607 ;; Hardware stack levels used:    1
  4608 ;; Hardware stack levels required when called:    9
  4609 ;; This function calls:
  4610 ;;		_printf
  4611 ;; This function is called by:
  4612 ;;		_SR_FRSStart
  4613 ;; This function uses a non-reentrant model
  4614 ;;
  4615                           
  4616                           
  4617                           ;psect for function _SetFrequency
  4618  147E                     _SetFrequency:	
  4619                           
  4620                           ;SR_FRS.c: 39: printf("AT+DMOSETGROUP=%d,%f,%f,%d,%d,%d,%d",0,450.0250,450.0250,83,2,83,
      +                          0);
  4621                           
  4622                           ;incstack = 0
  4623                           ; Regs used in _SetFrequency: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4624  147E  3076               	movlw	low (STR_2| (0+32768))
  4625  147F  0021               	movlb	1	; select bank1
  4626  1480  00A0               	movwf	printf@f^(0+128)
  4627  1481  3090               	movlw	high (STR_2| (0+32768))
  4628  1482  00A1               	movwf	(printf@f^(0+128)+1)
  4629  1483  3000               	movlw	0
  4630  1484  00A2               	movwf	(?_printf^(0+128)+2)
  4631  1485  00A3               	movwf	((?_printf+1)^(0+128)+2)
  4632  1486  3003               	movlw	3
  4633  1487  00A4               	movwf	(?_printf^(0+128)+4)
  4634  1488  30E1               	movlw	225
  4635  1489  00A5               	movwf	((?_printf+1)^(0+128)+4)
  4636  148A  3043               	movlw	67
  4637  148B  00A6               	movwf	((?_printf+2)^(0+128)+4)
  4638  148C  3003               	movlw	3
  4639  148D  00A7               	movwf	(?_printf^(0+128)+7)
  4640  148E  30E1               	movlw	225
  4641  148F  00A8               	movwf	((?_printf+1)^(0+128)+7)
  4642  1490  3043               	movlw	67
  4643  1491  00A9               	movwf	((?_printf+2)^(0+128)+7)
  4644  1492  3053               	movlw	83
  4645  1493  00AA               	movwf	(?_printf^(0+128)+10)
  4646  1494  3000               	movlw	0
  4647  1495  00AB               	movwf	(?_printf^(0+128)+11)
  4648  1496  3002               	movlw	2
  4649  1497  00AC               	movwf	(?_printf^(0+128)+12)
  4650  1498  3000               	movlw	0
  4651  1499  00AD               	movwf	(?_printf^(0+128)+13)
  4652  149A  3053               	movlw	83
  4653  149B  00AE               	movwf	(?_printf^(0+128)+14)
  4654  149C  3000               	movlw	0
  4655  149D  00AF               	movwf	(?_printf^(0+128)+15)
  4656  149E  3000               	movlw	0
  4657  149F  00B0               	movwf	(?_printf^(0+128)+16)
  4658  14A0  00B1               	movwf	((?_printf+1)^(0+128)+16)
  4659  14A1  3180  2042         	fcall	_printf
  4660  14A3  0008               	return
  4661  14A4                     __end_of_SetFrequency:	
  4662                           
  4663                           	psect	text27
  4664  1265                     __ptext27:	
  4665 ;; *************** function _SetCommandMode *****************
  4666 ;; Defined at:
  4667 ;;		line 34 in file "SR_FRS.c"
  4668 ;; Parameters:    Size  Location     Type
  4669 ;;		None
  4670 ;; Auto vars:     Size  Location     Type
  4671 ;;		None
  4672 ;; Return value:  Size  Location     Type
  4673 ;;                  1    wreg      void 
  4674 ;; Registers used:
  4675 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4676 ;; Tracked objects:
  4677 ;;		On entry : 0/0
  4678 ;;		On exit  : 0/0
  4679 ;;		Unchanged: 0/0
  4680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4684 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4685 ;;Total ram usage:        0 bytes
  4686 ;; Hardware stack levels used:    1
  4687 ;; Hardware stack levels required when called:    9
  4688 ;; This function calls:
  4689 ;;		_printf
  4690 ;; This function is called by:
  4691 ;;		_SR_FRSStart
  4692 ;; This function uses a non-reentrant model
  4693 ;;
  4694                           
  4695                           
  4696                           ;psect for function _SetCommandMode
  4697  1265                     _SetCommandMode:	
  4698                           
  4699                           ;SR_FRS.c: 35: printf("AT+DMOCONNECT");
  4700                           
  4701                           ;incstack = 0
  4702                           ; Regs used in _SetCommandMode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4703  1265  30D9               	movlw	low (STR_1| (0+32768))
  4704  1266  0021               	movlb	1	; select bank1
  4705  1267  00A0               	movwf	printf@f^(0+128)
  4706  1268  3090               	movlw	high (STR_1| (0+32768))
  4707  1269  00A1               	movwf	(printf@f^(0+128)+1)
  4708  126A  3180  2042         	fcall	_printf
  4709  126C  0008               	return
  4710  126D                     __end_of_SetCommandMode:	
  4711                           
  4712                           	psect	text28
  4713  0042                     __ptext28:	
  4714 ;; *************** function _printf *****************
  4715 ;; Defined at:
  4716 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  4717 ;; Parameters:    Size  Location     Type
  4718 ;;  f               2    0[BANK1 ] PTR const unsigned char 
  4719 ;;		 -> STR_6(22), STR_5(19), STR_4(19), STR_3(22), 
  4720 ;;		 -> STR_2(36), STR_1(14), 
  4721 ;; Auto vars:     Size  Location     Type
  4722 ;;  tmpval          4   32[BANK1 ] struct .
  4723 ;;  val             4   26[BANK1 ] unsigned long 
  4724 ;;  fval            3   36[BANK1 ] unsigned long 
  4725 ;;  exp             2   30[BANK1 ] int 
  4726 ;;  prec            2   24[BANK1 ] int 
  4727 ;;  flag            2   21[BANK1 ] unsigned short 
  4728 ;;  cp              2    0        PTR const unsigned char 
  4729 ;;  len             2    0        unsigned int 
  4730 ;;  width           2    0        int 
  4731 ;;  c               1   39[BANK1 ] char 
  4732 ;;  ap              1   23[BANK1 ] PTR void [1]
  4733 ;;		 -> ?_printf(2), 
  4734 ;;  d               1    0        unsigned char 
  4735 ;; Return value:  Size  Location     Type
  4736 ;;                  2    0[BANK1 ] int 
  4737 ;; Registers used:
  4738 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4739 ;; Tracked objects:
  4740 ;;		On entry : 0/0
  4741 ;;		On exit  : 0/0
  4742 ;;		Unchanged: 0/0
  4743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4744 ;;      Params:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0
  4745 ;;      Locals:         0       0      22       0       0       0       0       0       0       0       0       0       
      +0       0
  4746 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4747 ;;      Totals:         0       6      40       0       0       0       0       0       0       0       0       0       
      +0       0
  4748 ;;Total ram usage:       46 bytes
  4749 ;; Hardware stack levels used:    1
  4750 ;; Hardware stack levels required when called:    8
  4751 ;; This function calls:
  4752 ;;		___awdiv
  4753 ;;		___ftadd
  4754 ;;		___ftge
  4755 ;;		___ftmul
  4756 ;;		___ftneg
  4757 ;;		___ftsub
  4758 ;;		___fttol
  4759 ;;		___lldiv
  4760 ;;		___llmod
  4761 ;;		___lltoft
  4762 ;;		___wmul
  4763 ;;		__div_to_l_
  4764 ;;		__tdiv_to_l_
  4765 ;;		_fround
  4766 ;;		_putch
  4767 ;;		_scale
  4768 ;; This function is called by:
  4769 ;;		_SetCommandMode
  4770 ;;		_SetFrequency
  4771 ;;		_SetPowerSave
  4772 ;;		_SetVolume
  4773 ;;		_SetVOX
  4774 ;;		_SetMIC
  4775 ;; This function uses a non-reentrant model
  4776 ;;
  4777                           
  4778                           
  4779                           ;psect for function _printf
  4780  0042                     _printf:	
  4781                           
  4782                           ;doprnt.c: 466: va_list ap;
  4783                           ;doprnt.c: 499: signed char c;
  4784                           ;doprnt.c: 501: int width;
  4785                           ;doprnt.c: 504: int prec;
  4786                           ;doprnt.c: 508: unsigned short flag;
  4787                           ;doprnt.c: 515: char d;
  4788                           ;doprnt.c: 516: double fval;
  4789                           ;doprnt.c: 517: int exp;
  4790                           ;doprnt.c: 523: union {
  4791                           ;doprnt.c: 524: unsigned long vd;
  4792                           ;doprnt.c: 525: double integ;
  4793                           ;doprnt.c: 526: } tmpval;
  4794                           ;doprnt.c: 528: unsigned long val;
  4795                           ;doprnt.c: 529: unsigned len;
  4796                           ;doprnt.c: 530: const char * cp;
  4797                           ;doprnt.c: 533: *ap = __va_start();
  4798                           
  4799                           ;incstack = 0
  4800                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4801  0042  30A2               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4802  0043  0020               	movlb	0	; select bank0
  4803  0044  00E7               	movwf	??_printf
  4804  0045  0867               	movf	??_printf,w
  4805  0046  0021               	movlb	1	; select bank1
  4806  0047  00B7               	movwf	printf@ap^(0+128)
  4807  0048                     l2900:	
  4808                           ;doprnt.c: 536: while(c = *f++) {
  4809                           
  4810  0048  0021               	movlb	1	; select bank1
  4811  0049  0821               	movf	(printf@f+1)^(0+128),w
  4812  004A  0020               	movlb	0	; select bank0
  4813  004B  00E8               	movwf	??_printf+1
  4814  004C  0021               	movlb	1	; select bank1
  4815  004D  0820               	movf	printf@f^(0+128),w
  4816  004E  0020               	movlb	0	; select bank0
  4817  004F  00E7               	movwf	??_printf
  4818  0050  0021               	movlb	1	; select bank1
  4819  0051  0AA0               	incf	printf@f^(0+128),f
  4820  0052  1903               	skipnz
  4821  0053  0AA1               	incf	(printf@f+1)^(0+128),f
  4822  0054  0020               	movlb	0	; select bank0
  4823  0055  0867               	movf	??_printf,w
  4824  0056  0084               	movwf	4
  4825  0057  0868               	movf	??_printf+1,w
  4826  0058  0085               	movwf	5
  4827  0059  0800               	movf	0,w	;code access
  4828  005A  00E9               	movwf	??_printf+2
  4829  005B  0869               	movf	??_printf+2,w
  4830  005C  0021               	movlb	1	; select bank1
  4831  005D  00C7               	movwf	printf@c^(0+128)
  4832  005E  0847               	movf	printf@c^(0+128),w
  4833  005F  1903               	btfsc	3,2
  4834  0060  0008               	return
  4835                           
  4836                           ;doprnt.c: 538: if(c != '%')
  4837  0061  3025               	movlw	37
  4838  0062  0647               	xorwf	printf@c^(0+128),w
  4839  0063  1903               	btfsc	3,2
  4840  0064  286A               	goto	l2724
  4841                           
  4842                           ;doprnt.c: 540: {
  4843                           ;doprnt.c: 541: (putch(c) );
  4844  0065  0847               	movf	printf@c^(0+128),w
  4845  0066  3192  2251  3180   	fcall	_putch
  4846                           
  4847                           ;doprnt.c: 542: continue;
  4848  0069  2848               	goto	l2900
  4849  006A                     l2724:	
  4850                           
  4851                           ;doprnt.c: 543: }
  4852                           ;doprnt.c: 548: flag = 0;
  4853  006A  0021               	movlb	1	; select bank1
  4854  006B  01B5               	clrf	printf@flag^(0+128)
  4855  006C  01B6               	clrf	(printf@flag+1)^(0+128)
  4856                           
  4857                           ;doprnt.c: 635: switch(c = *f++) {
  4858  006D  2884               	goto	l2734
  4859  006E                     l372:	
  4860                           ;doprnt.c: 662: case 'f':
  4861                           
  4862                           ;doprnt.c: 638: goto alldone;
  4863                           
  4864                           ;doprnt.c: 637: case 0:
  4865                           
  4866                           
  4867                           ;doprnt.c: 663: flag |= 0x400;
  4868  006E  1536               	bsf	(printf@flag^(0+128)+1),2
  4869                           
  4870                           ;doprnt.c: 698: case 'i':
  4871                           ;doprnt.c: 699: break;
  4872                           
  4873                           ;doprnt.c: 697: case 'd':
  4874                           
  4875                           ;doprnt.c: 664: break;
  4876  006F  28A8               	goto	l2736
  4877  0070                     l2726:	
  4878                           ;doprnt.c: 784: case 'c':
  4879                           
  4880                           
  4881                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4882  0070  0837               	movf	printf@ap^(0+128),w
  4883  0071  0086               	movwf	6
  4884  0072  0187               	clrf	7
  4885  0073  0801               	movf	1,w
  4886  0074  0020               	movlb	0	; select bank0
  4887  0075  00E7               	movwf	??_printf
  4888  0076  0867               	movf	??_printf,w
  4889  0077  0021               	movlb	1	; select bank1
  4890  0078  00C7               	movwf	printf@c^(0+128)
  4891  0079  3002               	movlw	2
  4892  007A  0020               	movlb	0	; select bank0
  4893  007B  00E7               	movwf	??_printf
  4894  007C  0867               	movf	??_printf,w
  4895  007D  0021               	movlb	1	; select bank1
  4896  007E  07B7               	addwf	printf@ap^(0+128),f
  4897  007F                     l2730:	
  4898                           ;doprnt.c: 802: default:
  4899                           
  4900                           
  4901                           ;doprnt.c: 809: (putch(c) );
  4902  007F  0847               	movf	printf@c^(0+128),w
  4903  0080  3192  2251  3180   	fcall	_putch
  4904                           
  4905                           ;doprnt.c: 810: continue;
  4906  0083  2848               	goto	l2900
  4907  0084                     l2734:	
  4908                           ;doprnt.c: 822: }
  4909                           
  4910  0084  0021               	movlb	1	; select bank1
  4911  0085  0821               	movf	(printf@f+1)^(0+128),w
  4912  0086  0020               	movlb	0	; select bank0
  4913  0087  00E8               	movwf	??_printf+1
  4914  0088  0021               	movlb	1	; select bank1
  4915  0089  0820               	movf	printf@f^(0+128),w
  4916  008A  0020               	movlb	0	; select bank0
  4917  008B  00E7               	movwf	??_printf
  4918  008C  0021               	movlb	1	; select bank1
  4919  008D  0AA0               	incf	printf@f^(0+128),f
  4920  008E  1903               	skipnz
  4921  008F  0AA1               	incf	(printf@f+1)^(0+128),f
  4922  0090  0020               	movlb	0	; select bank0
  4923  0091  0867               	movf	??_printf,w
  4924  0092  0084               	movwf	4
  4925  0093  0868               	movf	??_printf+1,w
  4926  0094  0085               	movwf	5
  4927  0095  0800               	movf	0,w	;code access
  4928  0096  0021               	movlb	1	; select bank1
  4929  0097  00C7               	movwf	printf@c^(0+128)
  4930                           
  4931                           ; Switch size 1, requested type "space"
  4932                           ; Number of cases is 5, Range of values is 0 to 105
  4933                           ; switch strategies available:
  4934                           ; Name         Instructions Cycles
  4935                           ; simple_byte           16     9 (average)
  4936                           ; direct_byte          218     6 (fixed)
  4937                           ; jumptable            260     6 (fixed)
  4938                           ;	Chosen strategy is simple_byte
  4939  0098  3A00               	xorlw	0	; case 0
  4940  0099  1903               	skipnz
  4941  009A  2DC5               	goto	l424
  4942  009B  3A63               	xorlw	99	; case 99
  4943  009C  1903               	skipnz
  4944  009D  2870               	goto	l2726
  4945  009E  3A07               	xorlw	7	; case 100
  4946  009F  1903               	skipnz
  4947  00A0  28A8               	goto	l2736
  4948  00A1  3A02               	xorlw	2	; case 102
  4949  00A2  1903               	skipnz
  4950  00A3  286E               	goto	l372
  4951  00A4  3A0F               	xorlw	15	; case 105
  4952  00A5  1903               	skipnz
  4953  00A6  28A8               	goto	l2736
  4954  00A7  287F               	goto	l2730
  4955  00A8                     l2736:	
  4956                           
  4957                           ;doprnt.c: 825: if(flag & (0x700)) {
  4958  00A8  3000               	movlw	0
  4959  00A9  0021               	movlb	1	; select bank1
  4960  00AA  0535               	andwf	printf@flag^(0+128),w
  4961  00AB  0020               	movlb	0	; select bank0
  4962  00AC  00E7               	movwf	??_printf
  4963  00AD  3007               	movlw	7
  4964  00AE  0021               	movlb	1	; select bank1
  4965  00AF  0536               	andwf	(printf@flag+1)^(0+128),w
  4966  00B0  0020               	movlb	0	; select bank0
  4967  00B1  00E8               	movwf	??_printf+1
  4968  00B2  0867               	movf	??_printf,w
  4969  00B3  0468               	iorwf	??_printf+1,w
  4970  00B4  1903               	btfsc	3,2
  4971  00B5  2CF1               	goto	l2866
  4972                           
  4973                           ;doprnt.c: 829: prec = 6;
  4974  00B6  3006               	movlw	6
  4975  00B7  0021               	movlb	1	; select bank1
  4976  00B8  00B8               	movwf	printf@prec^(0+128)
  4977  00B9  3000               	movlw	0
  4978  00BA  00B9               	movwf	(printf@prec^(0+128)+1)
  4979                           
  4980                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4981  00BB  0837               	movf	printf@ap^(0+128),w
  4982  00BC  0086               	movwf	6
  4983  00BD  0187               	clrf	7
  4984  00BE  3F40               	moviw [0]fsr1
  4985  00BF  00C4               	movwf	printf@fval^(0+128)
  4986  00C0  3F41               	moviw [1]fsr1
  4987  00C1  00C5               	movwf	(printf@fval+1)^(0+128)
  4988  00C2  3F42               	moviw [2]fsr1
  4989  00C3  00C6               	movwf	(printf@fval+2)^(0+128)
  4990  00C4  3003               	movlw	3
  4991  00C5  0020               	movlb	0	; select bank0
  4992  00C6  00E7               	movwf	??_printf
  4993  00C7  0867               	movf	??_printf,w
  4994  00C8  0021               	movlb	1	; select bank1
  4995  00C9  07B7               	addwf	printf@ap^(0+128),f
  4996                           
  4997                           ;doprnt.c: 831: if(fval < 0.0) {
  4998  00CA  0844               	movf	printf@fval^(0+128),w
  4999  00CB  0020               	movlb	0	; select bank0
  5000  00CC  00A0               	movwf	___ftge@ff1
  5001  00CD  0021               	movlb	1	; select bank1
  5002  00CE  0845               	movf	(printf@fval+1)^(0+128),w
  5003  00CF  0020               	movlb	0	; select bank0
  5004  00D0  00A1               	movwf	___ftge@ff1+1
  5005  00D1  0021               	movlb	1	; select bank1
  5006  00D2  0846               	movf	(printf@fval+2)^(0+128),w
  5007  00D3  0020               	movlb	0	; select bank0
  5008  00D4  00A2               	movwf	___ftge@ff1+2
  5009  00D5  3000               	movlw	0
  5010  00D6  00A3               	movwf	___ftge@ff2
  5011  00D7  3000               	movlw	0
  5012  00D8  00A4               	movwf	___ftge@ff2+1
  5013  00D9  3000               	movlw	0
  5014  00DA  00A5               	movwf	___ftge@ff2+2
  5015  00DB  3194  24CA  3180   	fcall	___ftge
  5016  00DE  1803               	btfsc	3,0
  5017  00DF  28FF               	goto	l2750
  5018                           
  5019                           ;doprnt.c: 832: fval = -fval;
  5020  00E0  0021               	movlb	1	; select bank1
  5021  00E1  0844               	movf	printf@fval^(0+128),w
  5022  00E2  0020               	movlb	0	; select bank0
  5023  00E3  00A0               	movwf	___ftneg@f1
  5024  00E4  0021               	movlb	1	; select bank1
  5025  00E5  0845               	movf	(printf@fval+1)^(0+128),w
  5026  00E6  0020               	movlb	0	; select bank0
  5027  00E7  00A1               	movwf	___ftneg@f1+1
  5028  00E8  0021               	movlb	1	; select bank1
  5029  00E9  0846               	movf	(printf@fval+2)^(0+128),w
  5030  00EA  0020               	movlb	0	; select bank0
  5031  00EB  00A2               	movwf	___ftneg@f1+2
  5032  00EC  3188  2000  3180   	fcall	___ftneg
  5033  00EF  0020               	movlb	0	; select bank0
  5034  00F0  0820               	movf	?___ftneg,w
  5035  00F1  0021               	movlb	1	; select bank1
  5036  00F2  00C4               	movwf	printf@fval^(0+128)
  5037  00F3  0020               	movlb	0	; select bank0
  5038  00F4  0821               	movf	?___ftneg+1,w
  5039  00F5  0021               	movlb	1	; select bank1
  5040  00F6  00C5               	movwf	(printf@fval+1)^(0+128)
  5041  00F7  0020               	movlb	0	; select bank0
  5042  00F8  0822               	movf	?___ftneg+2,w
  5043  00F9  0021               	movlb	1	; select bank1
  5044  00FA  00C6               	movwf	(printf@fval+2)^(0+128)
  5045                           
  5046                           ;doprnt.c: 833: flag |= 0x03;
  5047  00FB  3003               	movlw	3
  5048  00FC  04B5               	iorwf	printf@flag^(0+128),f
  5049  00FD  3000               	movlw	0
  5050  00FE  04B6               	iorwf	(printf@flag+1)^(0+128),f
  5051  00FF                     l2750:	
  5052                           
  5053                           ;doprnt.c: 834: }
  5054                           ;doprnt.c: 835: exp = 0;
  5055  00FF  0021               	movlb	1	; select bank1
  5056  0100  01BE               	clrf	printf@exp^(0+128)
  5057  0101  01BF               	clrf	(printf@exp+1)^(0+128)
  5058                           
  5059                           ;doprnt.c: 836: if( fval!=0) {
  5060  0102  0846               	movf	(printf@fval+2)^(0+128),w
  5061  0103  0445               	iorwf	(printf@fval+1)^(0+128),w
  5062  0104  0444               	iorwf	printf@fval^(0+128),w
  5063  0105  1903               	skipnz
  5064  0106  29D1               	goto	l380
  5065                           
  5066                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  5067  0107  30C4               	movlw	low (printf@fval| 0)
  5068  0108  0086               	movwf	6
  5069  0109  0187               	clrf	7
  5070  010A  3F40               	moviw [0]fsr1
  5071  010B  0020               	movlb	0	; select bank0
  5072  010C  00E7               	movwf	??_printf
  5073  010D  3F41               	moviw [1]fsr1
  5074  010E  00E8               	movwf	??_printf+1
  5075  010F  3F42               	moviw [2]fsr1
  5076  0110  00E9               	movwf	??_printf+2
  5077  0111  3F43               	moviw [3]fsr1
  5078  0112  00EA               	movwf	??_printf+3
  5079  0113  300F               	movlw	15
  5080  0114                     u3605:	
  5081  0114  36EA               	lsrf	??_printf+3,f
  5082  0115  0CE9               	rrf	??_printf+2,f
  5083  0116  0CE8               	rrf	??_printf+1,f
  5084  0117  0CE7               	rrf	??_printf,f
  5085  0118  0B89               	decfsz	9,f
  5086  0119  2914               	goto	u3605
  5087  011A  30FF               	movlw	255
  5088  011B  0567               	andwf	??_printf,w
  5089  011C  00EB               	movwf	??_printf+4
  5090  011D  3000               	movlw	0
  5091  011E  0568               	andwf	??_printf+1,w
  5092  011F  00EC               	movwf	??_printf+5
  5093  0120  086B               	movf	??_printf+4,w
  5094  0121  3E82               	addlw	130
  5095  0122  0021               	movlb	1	; select bank1
  5096  0123  00BE               	movwf	printf@exp^(0+128)
  5097  0124  30FF               	movlw	255
  5098  0125  0020               	movlb	0	; select bank0
  5099  0126  3D6C               	addwfc	??_printf+5,w
  5100  0127  0021               	movlb	1	; select bank1
  5101  0128  00BF               	movwf	(printf@exp+1)^(0+128)
  5102                           
  5103                           ;doprnt.c: 838: exp--;
  5104  0129  30FF               	movlw	255
  5105  012A  07BE               	addwf	printf@exp^(0+128),f
  5106  012B  30FF               	movlw	255
  5107  012C  3DBF               	addwfc	(printf@exp+1)^(0+128),f
  5108                           
  5109                           ;doprnt.c: 839: exp *= 3;
  5110  012D  3003               	movlw	3
  5111  012E  0020               	movlb	0	; select bank0
  5112  012F  00B0               	movwf	___wmul@multiplier
  5113  0130  3000               	movlw	0
  5114  0131  00B1               	movwf	___wmul@multiplier+1
  5115  0132  0021               	movlb	1	; select bank1
  5116  0133  083F               	movf	(printf@exp+1)^(0+128),w
  5117  0134  0020               	movlb	0	; select bank0
  5118  0135  00B3               	movwf	___wmul@multiplicand+1
  5119  0136  0021               	movlb	1	; select bank1
  5120  0137  083E               	movf	printf@exp^(0+128),w
  5121  0138  0020               	movlb	0	; select bank0
  5122  0139  00B2               	movwf	___wmul@multiplicand
  5123  013A  3193  238F  3180   	fcall	___wmul
  5124  013D  0020               	movlb	0	; select bank0
  5125  013E  0831               	movf	?___wmul+1,w
  5126  013F  0021               	movlb	1	; select bank1
  5127  0140  00BF               	movwf	(printf@exp+1)^(0+128)
  5128  0141  0020               	movlb	0	; select bank0
  5129  0142  0830               	movf	?___wmul,w
  5130  0143  0021               	movlb	1	; select bank1
  5131  0144  00BE               	movwf	printf@exp^(0+128)
  5132                           
  5133                           ;doprnt.c: 840: exp /= 10;
  5134  0145  300A               	movlw	10
  5135  0146  0020               	movlb	0	; select bank0
  5136  0147  00A7               	movwf	___awdiv@divisor
  5137  0148  3000               	movlw	0
  5138  0149  00A8               	movwf	___awdiv@divisor+1
  5139  014A  0021               	movlb	1	; select bank1
  5140  014B  083F               	movf	(printf@exp+1)^(0+128),w
  5141  014C  0020               	movlb	0	; select bank0
  5142  014D  00AA               	movwf	___awdiv@dividend+1
  5143  014E  0021               	movlb	1	; select bank1
  5144  014F  083E               	movf	printf@exp^(0+128),w
  5145  0150  0020               	movlb	0	; select bank0
  5146  0151  00A9               	movwf	___awdiv@dividend
  5147  0152  3196  266F  3180   	fcall	___awdiv
  5148  0155  0020               	movlb	0	; select bank0
  5149  0156  0828               	movf	?___awdiv+1,w
  5150  0157  0021               	movlb	1	; select bank1
  5151  0158  00BF               	movwf	(printf@exp+1)^(0+128)
  5152  0159  0020               	movlb	0	; select bank0
  5153  015A  0827               	movf	?___awdiv,w
  5154  015B  0021               	movlb	1	; select bank1
  5155  015C  00BE               	movwf	printf@exp^(0+128)
  5156                           
  5157                           ;doprnt.c: 841: if(exp < 0)
  5158  015D  1FBF               	btfss	(printf@exp+1)^(0+128),7
  5159  015E  2963               	goto	l2766
  5160                           
  5161                           ;doprnt.c: 842: exp--;
  5162  015F  30FF               	movlw	255
  5163  0160  07BE               	addwf	printf@exp^(0+128),f
  5164  0161  30FF               	movlw	255
  5165  0162  3DBF               	addwfc	(printf@exp+1)^(0+128),f
  5166  0163                     l2766:	
  5167                           
  5168                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  5169  0163  033E               	decf	printf@exp^(0+128),w
  5170  0164  3AFF               	xorlw	255
  5171  0165  318D  25BA  3180   	fcall	_scale
  5172  0168  0020               	movlb	0	; select bank0
  5173  0169  0846               	movf	?_scale,w
  5174  016A  0021               	movlb	1	; select bank1
  5175  016B  00C0               	movwf	printf@tmpval^(0+128)
  5176  016C  0020               	movlb	0	; select bank0
  5177  016D  0847               	movf	?_scale+1,w
  5178  016E  0021               	movlb	1	; select bank1
  5179  016F  00C1               	movwf	(printf@tmpval+1)^(0+128)
  5180  0170  0020               	movlb	0	; select bank0
  5181  0171  0848               	movf	?_scale+2,w
  5182  0172  0021               	movlb	1	; select bank1
  5183  0173  00C2               	movwf	(printf@tmpval+2)^(0+128)
  5184                           
  5185                           ;doprnt.c: 847: tmpval.integ *= fval;
  5186  0174  0844               	movf	printf@fval^(0+128),w
  5187  0175  0020               	movlb	0	; select bank0
  5188  0176  00B6               	movwf	___ftmul@f1
  5189  0177  0021               	movlb	1	; select bank1
  5190  0178  0845               	movf	(printf@fval+1)^(0+128),w
  5191  0179  0020               	movlb	0	; select bank0
  5192  017A  00B7               	movwf	___ftmul@f1+1
  5193  017B  0021               	movlb	1	; select bank1
  5194  017C  0846               	movf	(printf@fval+2)^(0+128),w
  5195  017D  0020               	movlb	0	; select bank0
  5196  017E  00B8               	movwf	___ftmul@f1+2
  5197  017F  0021               	movlb	1	; select bank1
  5198  0180  0840               	movf	printf@tmpval^(0+128),w
  5199  0181  0020               	movlb	0	; select bank0
  5200  0182  00B9               	movwf	___ftmul@f2
  5201  0183  0021               	movlb	1	; select bank1
  5202  0184  0841               	movf	(printf@tmpval+1)^(0+128),w
  5203  0185  0020               	movlb	0	; select bank0
  5204  0186  00BA               	movwf	___ftmul@f2+1
  5205  0187  0021               	movlb	1	; select bank1
  5206  0188  0842               	movf	(printf@tmpval+2)^(0+128),w
  5207  0189  0020               	movlb	0	; select bank0
  5208  018A  00BB               	movwf	___ftmul@f2+2
  5209  018B  3189  21F6  3180   	fcall	___ftmul
  5210  018E  0020               	movlb	0	; select bank0
  5211  018F  0836               	movf	?___ftmul,w
  5212  0190  0021               	movlb	1	; select bank1
  5213  0191  00C0               	movwf	printf@tmpval^(0+128)
  5214  0192  0020               	movlb	0	; select bank0
  5215  0193  0837               	movf	?___ftmul+1,w
  5216  0194  0021               	movlb	1	; select bank1
  5217  0195  00C1               	movwf	(printf@tmpval+1)^(0+128)
  5218  0196  0020               	movlb	0	; select bank0
  5219  0197  0838               	movf	?___ftmul+2,w
  5220  0198  0021               	movlb	1	; select bank1
  5221  0199  00C2               	movwf	(printf@tmpval+2)^(0+128)
  5222                           
  5223                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  5224  019A  0840               	movf	printf@tmpval^(0+128),w
  5225  019B  0020               	movlb	0	; select bank0
  5226  019C  00A0               	movwf	___ftge@ff1
  5227  019D  0021               	movlb	1	; select bank1
  5228  019E  0841               	movf	(printf@tmpval+1)^(0+128),w
  5229  019F  0020               	movlb	0	; select bank0
  5230  01A0  00A1               	movwf	___ftge@ff1+1
  5231  01A1  0021               	movlb	1	; select bank1
  5232  01A2  0842               	movf	(printf@tmpval+2)^(0+128),w
  5233  01A3  0020               	movlb	0	; select bank0
  5234  01A4  00A2               	movwf	___ftge@ff1+2
  5235  01A5  3000               	movlw	0
  5236  01A6  00A3               	movwf	___ftge@ff2
  5237  01A7  3080               	movlw	128
  5238  01A8  00A4               	movwf	___ftge@ff2+1
  5239  01A9  303F               	movlw	63
  5240  01AA  00A5               	movwf	___ftge@ff2+2
  5241  01AB  3194  24CA  3180   	fcall	___ftge
  5242  01AE  1803               	btfsc	3,0
  5243  01AF  29B5               	goto	l2774
  5244                           
  5245                           ;doprnt.c: 849: exp--;
  5246  01B0  30FF               	movlw	255
  5247  01B1  0021               	movlb	1	; select bank1
  5248  01B2  07BE               	addwf	printf@exp^(0+128),f
  5249  01B3  30FF               	movlw	255
  5250  01B4  29D0               	goto	L1
  5251  01B5                     l2774:	
  5252                           
  5253                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  5254  01B5  0021               	movlb	1	; select bank1
  5255  01B6  0840               	movf	printf@tmpval^(0+128),w
  5256  01B7  0020               	movlb	0	; select bank0
  5257  01B8  00A0               	movwf	___ftge@ff1
  5258  01B9  0021               	movlb	1	; select bank1
  5259  01BA  0841               	movf	(printf@tmpval+1)^(0+128),w
  5260  01BB  0020               	movlb	0	; select bank0
  5261  01BC  00A1               	movwf	___ftge@ff1+1
  5262  01BD  0021               	movlb	1	; select bank1
  5263  01BE  0842               	movf	(printf@tmpval+2)^(0+128),w
  5264  01BF  0020               	movlb	0	; select bank0
  5265  01C0  00A2               	movwf	___ftge@ff1+2
  5266  01C1  3000               	movlw	0
  5267  01C2  00A3               	movwf	___ftge@ff2
  5268  01C3  3020               	movlw	32
  5269  01C4  00A4               	movwf	___ftge@ff2+1
  5270  01C5  3041               	movlw	65
  5271  01C6  00A5               	movwf	___ftge@ff2+2
  5272  01C7  3194  24CA  3180   	fcall	___ftge
  5273  01CA  1C03               	btfss	3,0
  5274  01CB  29D1               	goto	l380
  5275                           
  5276                           ;doprnt.c: 851: exp++;
  5277  01CC  3001               	movlw	1
  5278  01CD  0021               	movlb	1	; select bank1
  5279  01CE  07BE               	addwf	printf@exp^(0+128),f
  5280  01CF  3000               	movlw	0
  5281  01D0                     L1:	
  5282  01D0  3DBF               	addwfc	(printf@exp+1)^(0+128),f
  5283  01D1                     l380:	
  5284                           
  5285                           ;doprnt.c: 852: }
  5286                           ;doprnt.c: 1112: if(prec <= 12)
  5287  01D1  0021               	movlb	1	; select bank1
  5288  01D2  0839               	movf	(printf@prec+1)^(0+128),w
  5289  01D3  3A80               	xorlw	128
  5290  01D4  0020               	movlb	0	; select bank0
  5291  01D5  00E7               	movwf	??_printf
  5292  01D6  3080               	movlw	128
  5293  01D7  0267               	subwf	??_printf,w
  5294  01D8  1D03               	skipz
  5295  01D9  29DD               	goto	u3645
  5296  01DA  300D               	movlw	13
  5297  01DB  0021               	movlb	1	; select bank1
  5298  01DC  0238               	subwf	printf@prec^(0+128),w
  5299  01DD                     u3645:	
  5300  01DD  1803               	skipnc
  5301  01DE  2A06               	goto	l2780
  5302                           
  5303                           ;doprnt.c: 1113: fval += fround(prec);
  5304  01DF  0021               	movlb	1	; select bank1
  5305  01E0  0838               	movf	printf@prec^(0+128),w
  5306  01E1  3185  25C6  3180   	fcall	_fround
  5307  01E4  0020               	movlb	0	; select bank0
  5308  01E5  0846               	movf	?_fround,w
  5309  01E6  00D4               	movwf	___ftadd@f1
  5310  01E7  0847               	movf	?_fround+1,w
  5311  01E8  00D5               	movwf	___ftadd@f1+1
  5312  01E9  0848               	movf	?_fround+2,w
  5313  01EA  00D6               	movwf	___ftadd@f1+2
  5314  01EB  0021               	movlb	1	; select bank1
  5315  01EC  0844               	movf	printf@fval^(0+128),w
  5316  01ED  0020               	movlb	0	; select bank0
  5317  01EE  00D7               	movwf	___ftadd@f2
  5318  01EF  0021               	movlb	1	; select bank1
  5319  01F0  0845               	movf	(printf@fval+1)^(0+128),w
  5320  01F1  0020               	movlb	0	; select bank0
  5321  01F2  00D8               	movwf	___ftadd@f2+1
  5322  01F3  0021               	movlb	1	; select bank1
  5323  01F4  0846               	movf	(printf@fval+2)^(0+128),w
  5324  01F5  0020               	movlb	0	; select bank0
  5325  01F6  00D9               	movwf	___ftadd@f2+2
  5326  01F7  318A  22AA  3180   	fcall	___ftadd
  5327  01FA  0020               	movlb	0	; select bank0
  5328  01FB  0854               	movf	?___ftadd,w
  5329  01FC  0021               	movlb	1	; select bank1
  5330  01FD  00C4               	movwf	printf@fval^(0+128)
  5331  01FE  0020               	movlb	0	; select bank0
  5332  01FF  0855               	movf	?___ftadd+1,w
  5333  0200  0021               	movlb	1	; select bank1
  5334  0201  00C5               	movwf	(printf@fval+1)^(0+128)
  5335  0202  0020               	movlb	0	; select bank0
  5336  0203  0856               	movf	?___ftadd+2,w
  5337  0204  0021               	movlb	1	; select bank1
  5338  0205  00C6               	movwf	(printf@fval+2)^(0+128)
  5339  0206                     l2780:	
  5340                           
  5341                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5342  0206  0021               	movlb	1	; select bank1
  5343  0207  083F               	movf	(printf@exp+1)^(0+128),w
  5344  0208  3A80               	xorlw	128
  5345  0209  0020               	movlb	0	; select bank0
  5346  020A  00E7               	movwf	??_printf
  5347  020B  3080               	movlw	128
  5348  020C  0267               	subwf	??_printf,w
  5349  020D  1D03               	skipz
  5350  020E  2A12               	goto	u3655
  5351  020F  300A               	movlw	10
  5352  0210  0021               	movlb	1	; select bank1
  5353  0211  023E               	subwf	printf@exp^(0+128),w
  5354  0212                     u3655:	
  5355  0212  1803               	skipnc
  5356  0213  2A3D               	goto	l2788
  5357  0214  0021               	movlb	1	; select bank1
  5358  0215  0846               	movf	(printf@fval+2)^(0+128),w
  5359  0216  0445               	iorwf	(printf@fval+1)^(0+128),w
  5360  0217  0444               	iorwf	printf@fval^(0+128),w
  5361  0218  1903               	skipnz
  5362  0219  2A9C               	goto	l2802
  5363  021A  0844               	movf	printf@fval^(0+128),w
  5364  021B  0020               	movlb	0	; select bank0
  5365  021C  00CF               	movwf	___fttol@f1
  5366  021D  0021               	movlb	1	; select bank1
  5367  021E  0845               	movf	(printf@fval+1)^(0+128),w
  5368  021F  0020               	movlb	0	; select bank0
  5369  0220  00D0               	movwf	___fttol@f1+1
  5370  0221  0021               	movlb	1	; select bank1
  5371  0222  0846               	movf	(printf@fval+2)^(0+128),w
  5372  0223  0020               	movlb	0	; select bank0
  5373  0224  00D1               	movwf	___fttol@f1+2
  5374  0225  3197  2779  3180   	fcall	___fttol
  5375  0228  0020               	movlb	0	; select bank0
  5376  0229  0852               	movf	?___fttol+3,w
  5377  022A  0451               	iorwf	?___fttol+2,w
  5378  022B  0450               	iorwf	?___fttol+1,w
  5379  022C  044F               	iorwf	?___fttol,w
  5380  022D  1D03               	skipz
  5381  022E  2A9C               	goto	l2802
  5382  022F  0021               	movlb	1	; select bank1
  5383  0230  083F               	movf	(printf@exp+1)^(0+128),w
  5384  0231  3A80               	xorlw	128
  5385  0232  0020               	movlb	0	; select bank0
  5386  0233  00E7               	movwf	??_printf
  5387  0234  3080               	movlw	128
  5388  0235  0267               	subwf	??_printf,w
  5389  0236  1D03               	skipz
  5390  0237  2A3B               	goto	u3685
  5391  0238  3002               	movlw	2
  5392  0239  0021               	movlb	1	; select bank1
  5393  023A  023E               	subwf	printf@exp^(0+128),w
  5394  023B                     u3685:	
  5395  023B  1C03               	skipc
  5396  023C  2A9C               	goto	l2802
  5397  023D                     l2788:	
  5398                           
  5399                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  5400  023D  0021               	movlb	1	; select bank1
  5401  023E  0840               	movf	printf@tmpval^(0+128),w
  5402  023F  0020               	movlb	0	; select bank0
  5403  0240  00A0               	movwf	___ftge@ff1
  5404  0241  0021               	movlb	1	; select bank1
  5405  0242  0841               	movf	(printf@tmpval+1)^(0+128),w
  5406  0243  0020               	movlb	0	; select bank0
  5407  0244  00A1               	movwf	___ftge@ff1+1
  5408  0245  0021               	movlb	1	; select bank1
  5409  0246  0842               	movf	(printf@tmpval+2)^(0+128),w
  5410  0247  0020               	movlb	0	; select bank0
  5411  0248  00A2               	movwf	___ftge@ff1+2
  5412  0249  3070               	movlw	112
  5413  024A  00A3               	movwf	___ftge@ff2
  5414  024B  3089               	movlw	137
  5415  024C  00A4               	movwf	___ftge@ff2+1
  5416  024D  3040               	movlw	64
  5417  024E  00A5               	movwf	___ftge@ff2+2
  5418  024F  3194  24CA  3180   	fcall	___ftge
  5419  0252  1803               	btfsc	3,0
  5420  0253  2A56               	goto	l2792
  5421                           
  5422                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5423  0254  30F7               	movlw	247
  5424  0255  2A57               	goto	L2
  5425  0256                     l2792:	
  5426                           ;doprnt.c: 1122: }else{
  5427                           
  5428                           
  5429                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5430  0256  30F8               	movlw	248
  5431  0257                     L2:	
  5432  0257  0021               	movlb	1	; select bank1
  5433  0258  07BE               	addwf	printf@exp^(0+128),f
  5434  0259  30FF               	movlw	255
  5435  025A  3DBF               	addwfc	(printf@exp+1)^(0+128),f
  5436                           
  5437                           ;doprnt.c: 1124: }
  5438                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  5439  025B  083E               	movf	printf@exp^(0+128),w
  5440  025C  318D  25BA  3180   	fcall	_scale
  5441  025F  0020               	movlb	0	; select bank0
  5442  0260  0846               	movf	?_scale,w
  5443  0261  0021               	movlb	1	; select bank1
  5444  0262  00C0               	movwf	printf@tmpval^(0+128)
  5445  0263  0020               	movlb	0	; select bank0
  5446  0264  0847               	movf	?_scale+1,w
  5447  0265  0021               	movlb	1	; select bank1
  5448  0266  00C1               	movwf	(printf@tmpval+1)^(0+128)
  5449  0267  0020               	movlb	0	; select bank0
  5450  0268  0848               	movf	?_scale+2,w
  5451  0269  0021               	movlb	1	; select bank1
  5452  026A  00C2               	movwf	(printf@tmpval+2)^(0+128)
  5453                           
  5454                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5455  026B  0844               	movf	printf@fval^(0+128),w
  5456  026C  0020               	movlb	0	; select bank0
  5457  026D  00A0               	movwf	__tdiv_to_l_@f1
  5458  026E  0021               	movlb	1	; select bank1
  5459  026F  0845               	movf	(printf@fval+1)^(0+128),w
  5460  0270  0020               	movlb	0	; select bank0
  5461  0271  00A1               	movwf	__tdiv_to_l_@f1+1
  5462  0272  0021               	movlb	1	; select bank1
  5463  0273  0846               	movf	(printf@fval+2)^(0+128),w
  5464  0274  0020               	movlb	0	; select bank0
  5465  0275  00A2               	movwf	__tdiv_to_l_@f1+2
  5466  0276  0021               	movlb	1	; select bank1
  5467  0277  0840               	movf	printf@tmpval^(0+128),w
  5468  0278  0020               	movlb	0	; select bank0
  5469  0279  00A3               	movwf	__tdiv_to_l_@f2
  5470  027A  0021               	movlb	1	; select bank1
  5471  027B  0841               	movf	(printf@tmpval+1)^(0+128),w
  5472  027C  0020               	movlb	0	; select bank0
  5473  027D  00A4               	movwf	__tdiv_to_l_@f2+1
  5474  027E  0021               	movlb	1	; select bank1
  5475  027F  0842               	movf	(printf@tmpval+2)^(0+128),w
  5476  0280  0020               	movlb	0	; select bank0
  5477  0281  00A5               	movwf	__tdiv_to_l_@f2+2
  5478  0282  3187  272C  3180   	fcall	__tdiv_to_l_
  5479  0285  0020               	movlb	0	; select bank0
  5480  0286  0823               	movf	?__tdiv_to_l_+3,w
  5481  0287  0021               	movlb	1	; select bank1
  5482  0288  00BD               	movwf	(printf@val+3)^(0+128)
  5483  0289  0020               	movlb	0	; select bank0
  5484  028A  0822               	movf	?__tdiv_to_l_+2,w
  5485  028B  0021               	movlb	1	; select bank1
  5486  028C  00BC               	movwf	(printf@val+2)^(0+128)
  5487  028D  0020               	movlb	0	; select bank0
  5488  028E  0821               	movf	?__tdiv_to_l_+1,w
  5489  028F  0021               	movlb	1	; select bank1
  5490  0290  00BB               	movwf	(printf@val+1)^(0+128)
  5491  0291  0020               	movlb	0	; select bank0
  5492  0292  0820               	movf	?__tdiv_to_l_,w
  5493  0293  0021               	movlb	1	; select bank1
  5494  0294  00BA               	movwf	printf@val^(0+128)
  5495                           
  5496                           ;doprnt.c: 1129: fval = 0.0;
  5497  0295  3000               	movlw	0
  5498  0296  00C4               	movwf	printf@fval^(0+128)
  5499  0297  3000               	movlw	0
  5500  0298  00C5               	movwf	(printf@fval+1)^(0+128)
  5501  0299  3000               	movlw	0
  5502  029A  00C6               	movwf	(printf@fval+2)^(0+128)
  5503                           
  5504                           ;doprnt.c: 1130: } else {
  5505  029B  2AF1               	goto	l2806
  5506  029C                     l2802:	
  5507                           
  5508                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5509  029C  0021               	movlb	1	; select bank1
  5510  029D  0844               	movf	printf@fval^(0+128),w
  5511  029E  0020               	movlb	0	; select bank0
  5512  029F  00CF               	movwf	___fttol@f1
  5513  02A0  0021               	movlb	1	; select bank1
  5514  02A1  0845               	movf	(printf@fval+1)^(0+128),w
  5515  02A2  0020               	movlb	0	; select bank0
  5516  02A3  00D0               	movwf	___fttol@f1+1
  5517  02A4  0021               	movlb	1	; select bank1
  5518  02A5  0846               	movf	(printf@fval+2)^(0+128),w
  5519  02A6  0020               	movlb	0	; select bank0
  5520  02A7  00D1               	movwf	___fttol@f1+2
  5521  02A8  3197  2779  3180   	fcall	___fttol
  5522  02AB  0020               	movlb	0	; select bank0
  5523  02AC  0852               	movf	?___fttol+3,w
  5524  02AD  0021               	movlb	1	; select bank1
  5525  02AE  00BD               	movwf	(printf@val+3)^(0+128)
  5526  02AF  0020               	movlb	0	; select bank0
  5527  02B0  0851               	movf	?___fttol+2,w
  5528  02B1  0021               	movlb	1	; select bank1
  5529  02B2  00BC               	movwf	(printf@val+2)^(0+128)
  5530  02B3  0020               	movlb	0	; select bank0
  5531  02B4  0850               	movf	?___fttol+1,w
  5532  02B5  0021               	movlb	1	; select bank1
  5533  02B6  00BB               	movwf	(printf@val+1)^(0+128)
  5534  02B7  0020               	movlb	0	; select bank0
  5535  02B8  084F               	movf	?___fttol,w
  5536  02B9  0021               	movlb	1	; select bank1
  5537  02BA  00BA               	movwf	printf@val^(0+128)
  5538                           
  5539                           ;doprnt.c: 1132: fval -= (double)val;
  5540  02BB  083D               	movf	(printf@val+3)^(0+128),w
  5541  02BC  0020               	movlb	0	; select bank0
  5542  02BD  00AB               	movwf	___lltoft@c+3
  5543  02BE  0021               	movlb	1	; select bank1
  5544  02BF  083C               	movf	(printf@val+2)^(0+128),w
  5545  02C0  0020               	movlb	0	; select bank0
  5546  02C1  00AA               	movwf	___lltoft@c+2
  5547  02C2  0021               	movlb	1	; select bank1
  5548  02C3  083B               	movf	(printf@val+1)^(0+128),w
  5549  02C4  0020               	movlb	0	; select bank0
  5550  02C5  00A9               	movwf	___lltoft@c+1
  5551  02C6  0021               	movlb	1	; select bank1
  5552  02C7  083A               	movf	printf@val^(0+128),w
  5553  02C8  0020               	movlb	0	; select bank0
  5554  02C9  00A8               	movwf	___lltoft@c
  5555  02CA  3188  2009  3180   	fcall	___lltoft
  5556  02CD  0020               	movlb	0	; select bank0
  5557  02CE  0828               	movf	?___lltoft,w
  5558  02CF  00E1               	movwf	___ftsub@f2
  5559  02D0  0829               	movf	?___lltoft+1,w
  5560  02D1  00E2               	movwf	___ftsub@f2+1
  5561  02D2  082A               	movf	?___lltoft+2,w
  5562  02D3  00E3               	movwf	___ftsub@f2+2
  5563  02D4  0021               	movlb	1	; select bank1
  5564  02D5  0844               	movf	printf@fval^(0+128),w
  5565  02D6  0020               	movlb	0	; select bank0
  5566  02D7  00E4               	movwf	___ftsub@f1
  5567  02D8  0021               	movlb	1	; select bank1
  5568  02D9  0845               	movf	(printf@fval+1)^(0+128),w
  5569  02DA  0020               	movlb	0	; select bank0
  5570  02DB  00E5               	movwf	___ftsub@f1+1
  5571  02DC  0021               	movlb	1	; select bank1
  5572  02DD  0846               	movf	(printf@fval+2)^(0+128),w
  5573  02DE  0020               	movlb	0	; select bank0
  5574  02DF  00E6               	movwf	___ftsub@f1+2
  5575  02E0  3194  241D  3180   	fcall	___ftsub
  5576  02E3  0020               	movlb	0	; select bank0
  5577  02E4  0861               	movf	?___ftsub,w
  5578  02E5  0021               	movlb	1	; select bank1
  5579  02E6  00C4               	movwf	printf@fval^(0+128)
  5580  02E7  0020               	movlb	0	; select bank0
  5581  02E8  0862               	movf	?___ftsub+1,w
  5582  02E9  0021               	movlb	1	; select bank1
  5583  02EA  00C5               	movwf	(printf@fval+1)^(0+128)
  5584  02EB  0020               	movlb	0	; select bank0
  5585  02EC  0863               	movf	?___ftsub+2,w
  5586  02ED  0021               	movlb	1	; select bank1
  5587  02EE  00C6               	movwf	(printf@fval+2)^(0+128)
  5588                           
  5589                           ;doprnt.c: 1133: exp = 0;
  5590  02EF  01BE               	clrf	printf@exp^(0+128)
  5591  02F0  01BF               	clrf	(printf@exp+1)^(0+128)
  5592  02F1                     l2806:	
  5593                           
  5594                           ;doprnt.c: 1134: }
  5595                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5596  02F1  01C7               	clrf	printf@c^(0+128)
  5597  02F2  0AC7               	incf	printf@c^(0+128),f
  5598  02F3  300A               	movlw	10
  5599  02F4  0647               	xorwf	printf@c^(0+128),w
  5600  02F5  1903               	btfsc	3,2
  5601  02F6  2B2E               	goto	l2818
  5602  02F7                     l2812:	
  5603                           
  5604                           ;doprnt.c: 1137: if(val < dpowers[c])
  5605  02F7  0847               	movf	printf@c^(0+128),w
  5606  02F8  0020               	movlb	0	; select bank0
  5607  02F9  00E7               	movwf	??_printf
  5608  02FA  01E8               	clrf	??_printf+1
  5609  02FB  35E7               	lslf	??_printf,f
  5610  02FC  0DE8               	rlf	??_printf+1,f
  5611  02FD  35E7               	lslf	??_printf,f
  5612  02FE  0DE8               	rlf	??_printf+1,f
  5613  02FF  3000               	movlw	low (_dpowers| (0+32768))
  5614  0300  0767               	addwf	??_printf,w
  5615  0301  0084               	movwf	4
  5616  0302  3090               	movlw	high (_dpowers| (0+32768))
  5617  0303  3D68               	addwfc	??_printf+1,w
  5618  0304  0085               	movwf	5
  5619  0305  3F00               	moviw [0]fsr0
  5620  0306  00E9               	movwf	??_printf+2
  5621  0307  3F01               	moviw [1]fsr0
  5622  0308  00EA               	movwf	??_printf+3
  5623  0309  3F02               	moviw [2]fsr0
  5624  030A  00EB               	movwf	??_printf+4
  5625  030B  3F03               	moviw [3]fsr0
  5626  030C  00EC               	movwf	??_printf+5
  5627  030D  086C               	movf	??_printf+5,w
  5628  030E  0021               	movlb	1	; select bank1
  5629  030F  023D               	subwf	(printf@val+3)^(0+128),w
  5630  0310  1D03               	skipz
  5631  0311  2B22               	goto	u3715
  5632  0312  0020               	movlb	0	; select bank0
  5633  0313  086B               	movf	??_printf+4,w
  5634  0314  0021               	movlb	1	; select bank1
  5635  0315  023C               	subwf	(printf@val+2)^(0+128),w
  5636  0316  1D03               	skipz
  5637  0317  2B22               	goto	u3715
  5638  0318  0020               	movlb	0	; select bank0
  5639  0319  086A               	movf	??_printf+3,w
  5640  031A  0021               	movlb	1	; select bank1
  5641  031B  023B               	subwf	(printf@val+1)^(0+128),w
  5642  031C  1D03               	skipz
  5643  031D  2B22               	goto	u3715
  5644  031E  0020               	movlb	0	; select bank0
  5645  031F  0869               	movf	??_printf+2,w
  5646  0320  0021               	movlb	1	; select bank1
  5647  0321  023A               	subwf	printf@val^(0+128),w
  5648  0322                     u3715:	
  5649  0322  1C03               	btfss	3,0
  5650  0323  2B2E               	goto	l2818
  5651                           
  5652                           ;doprnt.c: 1138: break;
  5653  0324  3001               	movlw	1
  5654  0325  0020               	movlb	0	; select bank0
  5655  0326  00E7               	movwf	??_printf
  5656  0327  0867               	movf	??_printf,w
  5657  0328  0021               	movlb	1	; select bank1
  5658  0329  07C7               	addwf	printf@c^(0+128),f
  5659  032A  300A               	movlw	10
  5660  032B  0647               	xorwf	printf@c^(0+128),w
  5661  032C  1D03               	btfss	3,2
  5662  032D  2AF7               	goto	l2812
  5663  032E                     l2818:	
  5664                           
  5665                           ;doprnt.c: 1175: {
  5666                           ;doprnt.c: 1188: if(flag & 0x03)
  5667  032E  3003               	movlw	3
  5668  032F  0535               	andwf	printf@flag^(0+128),w
  5669  0330  0020               	movlb	0	; select bank0
  5670  0331  00E7               	movwf	??_printf
  5671  0332  3000               	movlw	0
  5672  0333  0021               	movlb	1	; select bank1
  5673  0334  0536               	andwf	(printf@flag+1)^(0+128),w
  5674  0335  0020               	movlb	0	; select bank0
  5675  0336  00E8               	movwf	??_printf+1
  5676  0337  0867               	movf	??_printf,w
  5677  0338  0468               	iorwf	??_printf+1,w
  5678  0339  1903               	btfsc	3,2
  5679  033A  2B3F               	goto	l2828
  5680                           
  5681                           ;doprnt.c: 1190: (putch('-') );
  5682  033B  302D               	movlw	45
  5683  033C                     L5:	
  5684  033C  3192  2251  3180   	fcall	_putch
  5685  033F                     l2828:	
  5686                           ;doprnt.c: 1195: }
  5687                           ;doprnt.c: 1196: while(c--) {
  5688                           
  5689  033F  30FF               	movlw	255
  5690  0340  0020               	movlb	0	; select bank0
  5691  0341  00E7               	movwf	??_printf
  5692  0342  0867               	movf	??_printf,w
  5693  0343  0021               	movlb	1	; select bank1
  5694  0344  07C7               	addwf	printf@c^(0+128),f
  5695  0345  0A47               	incf	printf@c^(0+128),w
  5696  0346  1903               	btfsc	3,2
  5697  0347  2BBA               	goto	l2834
  5698                           
  5699                           ;doprnt.c: 1200: {
  5700                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  5701  0348  0021               	movlb	1	; select bank1
  5702  0349  0847               	movf	printf@c^(0+128),w
  5703  034A  0020               	movlb	0	; select bank0
  5704  034B  00E7               	movwf	??_printf
  5705  034C  01E8               	clrf	??_printf+1
  5706  034D  35E7               	lslf	??_printf,f
  5707  034E  0DE8               	rlf	??_printf+1,f
  5708  034F  35E7               	lslf	??_printf,f
  5709  0350  0DE8               	rlf	??_printf+1,f
  5710  0351  3000               	movlw	low (_dpowers| (0+32768))
  5711  0352  0767               	addwf	??_printf,w
  5712  0353  0084               	movwf	4
  5713  0354  3090               	movlw	high (_dpowers| (0+32768))
  5714  0355  3D68               	addwfc	??_printf+1,w
  5715  0356  0085               	movwf	5
  5716  0357  3F00               	moviw [0]fsr0
  5717  0358  00A0               	movwf	___lldiv@divisor
  5718  0359  3F01               	moviw [1]fsr0
  5719  035A  00A1               	movwf	___lldiv@divisor+1
  5720  035B  3F02               	moviw [2]fsr0
  5721  035C  00A2               	movwf	___lldiv@divisor+2
  5722  035D  3F03               	moviw [3]fsr0
  5723  035E  00A3               	movwf	___lldiv@divisor+3
  5724  035F  0021               	movlb	1	; select bank1
  5725  0360  083D               	movf	(printf@val+3)^(0+128),w
  5726  0361  0020               	movlb	0	; select bank0
  5727  0362  00A7               	movwf	___lldiv@dividend+3
  5728  0363  0021               	movlb	1	; select bank1
  5729  0364  083C               	movf	(printf@val+2)^(0+128),w
  5730  0365  0020               	movlb	0	; select bank0
  5731  0366  00A6               	movwf	___lldiv@dividend+2
  5732  0367  0021               	movlb	1	; select bank1
  5733  0368  083B               	movf	(printf@val+1)^(0+128),w
  5734  0369  0020               	movlb	0	; select bank0
  5735  036A  00A5               	movwf	___lldiv@dividend+1
  5736  036B  0021               	movlb	1	; select bank1
  5737  036C  083A               	movf	printf@val^(0+128),w
  5738  036D  0020               	movlb	0	; select bank0
  5739  036E  00A4               	movwf	___lldiv@dividend
  5740  036F  3196  26C1  3180   	fcall	___lldiv
  5741  0372  0020               	movlb	0	; select bank0
  5742  0373  0823               	movf	?___lldiv+3,w
  5743  0374  0021               	movlb	1	; select bank1
  5744  0375  00C3               	movwf	(printf@tmpval+3)^(0+128)
  5745  0376  0020               	movlb	0	; select bank0
  5746  0377  0822               	movf	?___lldiv+2,w
  5747  0378  0021               	movlb	1	; select bank1
  5748  0379  00C2               	movwf	(printf@tmpval+2)^(0+128)
  5749  037A  0020               	movlb	0	; select bank0
  5750  037B  0821               	movf	?___lldiv+1,w
  5751  037C  0021               	movlb	1	; select bank1
  5752  037D  00C1               	movwf	(printf@tmpval+1)^(0+128)
  5753  037E  0020               	movlb	0	; select bank0
  5754  037F  0820               	movf	?___lldiv,w
  5755  0380  0021               	movlb	1	; select bank1
  5756  0381  00C0               	movwf	printf@tmpval^(0+128)
  5757                           
  5758                           ;doprnt.c: 1202: tmpval.vd %= 10;
  5759  0382  3000               	movlw	0
  5760  0383  0020               	movlb	0	; select bank0
  5761  0384  00B1               	movwf	___llmod@divisor+3
  5762  0385  3000               	movlw	0
  5763  0386  00B0               	movwf	___llmod@divisor+2
  5764  0387  3000               	movlw	0
  5765  0388  00AF               	movwf	___llmod@divisor+1
  5766  0389  300A               	movlw	10
  5767  038A  00AE               	movwf	___llmod@divisor
  5768  038B  0021               	movlb	1	; select bank1
  5769  038C  0843               	movf	(printf@tmpval+3)^(0+128),w
  5770  038D  0020               	movlb	0	; select bank0
  5771  038E  00B5               	movwf	___llmod@dividend+3
  5772  038F  0021               	movlb	1	; select bank1
  5773  0390  0842               	movf	(printf@tmpval+2)^(0+128),w
  5774  0391  0020               	movlb	0	; select bank0
  5775  0392  00B4               	movwf	___llmod@dividend+2
  5776  0393  0021               	movlb	1	; select bank1
  5777  0394  0841               	movf	(printf@tmpval+1)^(0+128),w
  5778  0395  0020               	movlb	0	; select bank0
  5779  0396  00B3               	movwf	___llmod@dividend+1
  5780  0397  0021               	movlb	1	; select bank1
  5781  0398  0840               	movf	printf@tmpval^(0+128),w
  5782  0399  0020               	movlb	0	; select bank0
  5783  039A  00B2               	movwf	___llmod@dividend
  5784  039B  3195  2548  3180   	fcall	___llmod
  5785  039E  0020               	movlb	0	; select bank0
  5786  039F  0831               	movf	?___llmod+3,w
  5787  03A0  0021               	movlb	1	; select bank1
  5788  03A1  00C3               	movwf	(printf@tmpval+3)^(0+128)
  5789  03A2  0020               	movlb	0	; select bank0
  5790  03A3  0830               	movf	?___llmod+2,w
  5791  03A4  0021               	movlb	1	; select bank1
  5792  03A5  00C2               	movwf	(printf@tmpval+2)^(0+128)
  5793  03A6  0020               	movlb	0	; select bank0
  5794  03A7  082F               	movf	?___llmod+1,w
  5795  03A8  0021               	movlb	1	; select bank1
  5796  03A9  00C1               	movwf	(printf@tmpval+1)^(0+128)
  5797  03AA  0020               	movlb	0	; select bank0
  5798  03AB  082E               	movf	?___llmod,w
  5799  03AC  0021               	movlb	1	; select bank1
  5800  03AD  00C0               	movwf	printf@tmpval^(0+128)
  5801                           
  5802                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  5803  03AE  0840               	movf	printf@tmpval^(0+128),w
  5804  03AF  3E30               	addlw	48
  5805  03B0  2B3C               	goto	L5
  5806  03B1                     l2830:	
  5807                           ;doprnt.c: 1204: }
  5808                           ;doprnt.c: 1206: }
  5809                           ;doprnt.c: 1207: while(exp > 0) {
  5810                           
  5811                           
  5812                           ;doprnt.c: 1208: (putch('0') );
  5813  03B1  3030               	movlw	48
  5814  03B2  3192  2251  3180   	fcall	_putch
  5815                           
  5816                           ;doprnt.c: 1209: exp--;
  5817  03B5  30FF               	movlw	255
  5818  03B6  0021               	movlb	1	; select bank1
  5819  03B7  07BE               	addwf	printf@exp^(0+128),f
  5820  03B8  30FF               	movlw	255
  5821  03B9  3DBF               	addwfc	(printf@exp+1)^(0+128),f
  5822  03BA                     l2834:	
  5823  03BA  083F               	movf	(printf@exp+1)^(0+128),w
  5824  03BB  3A80               	xorlw	128
  5825  03BC  0020               	movlb	0	; select bank0
  5826  03BD  00E7               	movwf	??_printf
  5827  03BE  3080               	movlw	128
  5828  03BF  0267               	subwf	??_printf,w
  5829  03C0  1D03               	skipz
  5830  03C1  2BC5               	goto	u3755
  5831  03C2  3001               	movlw	1
  5832  03C3  0021               	movlb	1	; select bank1
  5833  03C4  023E               	subwf	printf@exp^(0+128),w
  5834  03C5                     u3755:	
  5835  03C5  1803               	skipnc
  5836  03C6  2BB1               	goto	l2830
  5837                           
  5838                           ;doprnt.c: 1210: }
  5839                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5840  03C7  0021               	movlb	1	; select bank1
  5841  03C8  0839               	movf	(printf@prec+1)^(0+128),w
  5842  03C9  3A80               	xorlw	128
  5843  03CA  0020               	movlb	0	; select bank0
  5844  03CB  00E7               	movwf	??_printf
  5845  03CC  3080               	movlw	128
  5846  03CD  0267               	subwf	??_printf,w
  5847  03CE  1D03               	skipz
  5848  03CF  2BD3               	goto	u3765
  5849  03D0  3009               	movlw	9
  5850  03D1  0021               	movlb	1	; select bank1
  5851  03D2  0238               	subwf	printf@prec^(0+128),w
  5852  03D3                     u3765:	
  5853  03D3  1C03               	skipc
  5854  03D4  2BD7               	goto	l2840
  5855                           
  5856                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5857  03D5  3008               	movlw	8
  5858  03D6  2BD9               	goto	L3
  5859  03D7                     l2840:	
  5860                           
  5861                           ;doprnt.c: 1213: else
  5862                           ;doprnt.c: 1214: c = prec;
  5863  03D7  0021               	movlb	1	; select bank1
  5864  03D8  0838               	movf	printf@prec^(0+128),w
  5865  03D9                     L3:	
  5866  03D9  0020               	movlb	0	; select bank0
  5867  03DA  00E7               	movwf	??_printf
  5868  03DB  0867               	movf	??_printf,w
  5869  03DC  0021               	movlb	1	; select bank1
  5870  03DD  00C7               	movwf	printf@c^(0+128)
  5871                           
  5872                           ;doprnt.c: 1215: prec -= c;
  5873  03DE  0847               	movf	printf@c^(0+128),w
  5874  03DF  0020               	movlb	0	; select bank0
  5875  03E0  00E7               	movwf	??_printf
  5876  03E1  01E8               	clrf	??_printf+1
  5877  03E2  1BE7               	btfsc	??_printf,7
  5878  03E3  03E8               	decf	??_printf+1,f
  5879  03E4  0867               	movf	??_printf,w
  5880  03E5  0021               	movlb	1	; select bank1
  5881  03E6  02B8               	subwf	printf@prec^(0+128),f
  5882  03E7  0020               	movlb	0	; select bank0
  5883  03E8  0868               	movf	??_printf+1,w
  5884  03E9  0021               	movlb	1	; select bank1
  5885  03EA  3BB9               	subwfb	(printf@prec+1)^(0+128),f
  5886                           
  5887                           ;doprnt.c: 1219: if(c)
  5888  03EB  0847               	movf	printf@c^(0+128),w
  5889  03EC  1903               	btfsc	3,2
  5890  03ED  2BF2               	goto	l2846
  5891                           
  5892                           ;doprnt.c: 1221: (putch('.') );
  5893  03EE  302E               	movlw	46
  5894  03EF  3192  2251  3180   	fcall	_putch
  5895  03F2                     l2846:	
  5896                           
  5897                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5898  03F2  0021               	movlb	1	; select bank1
  5899  03F3  0847               	movf	printf@c^(0+128),w
  5900  03F4  318D  25BA  3180   	fcall	_scale
  5901  03F7  0020               	movlb	0	; select bank0
  5902  03F8  0846               	movf	?_scale,w
  5903  03F9  0021               	movlb	1	; select bank1
  5904  03FA  00B2               	movwf	_printf$1277^(0+128)
  5905  03FB  0020               	movlb	0	; select bank0
  5906  03FC  0847               	movf	?_scale+1,w
  5907  03FD  0021               	movlb	1	; select bank1
  5908  03FE  00B3               	movwf	(_printf$1277+1)^(0+128)
  5909  03FF  0020               	movlb	0	; select bank0
  5910  0400  0848               	movf	?_scale+2,w
  5911  0401  0021               	movlb	1	; select bank1
  5912  0402  00B4               	movwf	(_printf$1277+2)^(0+128)
  5913                           
  5914                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5915  0403  0832               	movf	_printf$1277^(0+128),w
  5916  0404  0020               	movlb	0	; select bank0
  5917  0405  00B9               	movwf	___ftmul@f2
  5918  0406  0021               	movlb	1	; select bank1
  5919  0407  0833               	movf	(_printf$1277+1)^(0+128),w
  5920  0408  0020               	movlb	0	; select bank0
  5921  0409  00BA               	movwf	___ftmul@f2+1
  5922  040A  0021               	movlb	1	; select bank1
  5923  040B  0834               	movf	(_printf$1277+2)^(0+128),w
  5924  040C  0020               	movlb	0	; select bank0
  5925  040D  00BB               	movwf	___ftmul@f2+2
  5926  040E  0021               	movlb	1	; select bank1
  5927  040F  0844               	movf	printf@fval^(0+128),w
  5928  0410  0020               	movlb	0	; select bank0
  5929  0411  00B6               	movwf	___ftmul@f1
  5930  0412  0021               	movlb	1	; select bank1
  5931  0413  0845               	movf	(printf@fval+1)^(0+128),w
  5932  0414  0020               	movlb	0	; select bank0
  5933  0415  00B7               	movwf	___ftmul@f1+1
  5934  0416  0021               	movlb	1	; select bank1
  5935  0417  0846               	movf	(printf@fval+2)^(0+128),w
  5936  0418  0020               	movlb	0	; select bank0
  5937  0419  00B8               	movwf	___ftmul@f1+2
  5938  041A  3189  21F6  3180   	fcall	___ftmul
  5939  041D  0020               	movlb	0	; select bank0
  5940  041E  0836               	movf	?___ftmul,w
  5941  041F  00CF               	movwf	___fttol@f1
  5942  0420  0837               	movf	?___ftmul+1,w
  5943  0421  00D0               	movwf	___fttol@f1+1
  5944  0422  0838               	movf	?___ftmul+2,w
  5945  0423  00D1               	movwf	___fttol@f1+2
  5946  0424  3197  2779  3180   	fcall	___fttol
  5947  0427  0020               	movlb	0	; select bank0
  5948  0428  0852               	movf	?___fttol+3,w
  5949  0429  0021               	movlb	1	; select bank1
  5950  042A  00BD               	movwf	(printf@val+3)^(0+128)
  5951  042B  0020               	movlb	0	; select bank0
  5952  042C  0851               	movf	?___fttol+2,w
  5953  042D  0021               	movlb	1	; select bank1
  5954  042E  00BC               	movwf	(printf@val+2)^(0+128)
  5955  042F  0020               	movlb	0	; select bank0
  5956  0430  0850               	movf	?___fttol+1,w
  5957  0431  0021               	movlb	1	; select bank1
  5958  0432  00BB               	movwf	(printf@val+1)^(0+128)
  5959  0433  0020               	movlb	0	; select bank0
  5960  0434  084F               	movf	?___fttol,w
  5961  0435                     L4:	
  5962  0435  0021               	movlb	1	; select bank1
  5963  0436  00BA               	movwf	printf@val^(0+128)
  5964  0437  30FF               	movlw	255
  5965  0438  0020               	movlb	0	; select bank0
  5966  0439  00E7               	movwf	??_printf
  5967  043A  0867               	movf	??_printf,w
  5968  043B  0021               	movlb	1	; select bank1
  5969  043C  07C7               	addwf	printf@c^(0+128),f
  5970  043D  0A47               	incf	printf@c^(0+128),w
  5971  043E  1903               	btfsc	3,2
  5972  043F  2CEC               	goto	l2864
  5973                           
  5974                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  5975                           
  5976                           ;doprnt.c: 1228: while(c--) {
  5977  0440  0847               	movf	printf@c^(0+128),w
  5978  0441  0020               	movlb	0	; select bank0
  5979  0442  00E7               	movwf	??_printf
  5980  0443  01E8               	clrf	??_printf+1
  5981  0444  35E7               	lslf	??_printf,f
  5982  0445  0DE8               	rlf	??_printf+1,f
  5983  0446  35E7               	lslf	??_printf,f
  5984  0447  0DE8               	rlf	??_printf+1,f
  5985  0448  3000               	movlw	low (_dpowers| (0+32768))
  5986  0449  0767               	addwf	??_printf,w
  5987  044A  0084               	movwf	4
  5988  044B  3090               	movlw	high (_dpowers| (0+32768))
  5989  044C  3D68               	addwfc	??_printf+1,w
  5990  044D  0085               	movwf	5
  5991  044E  3F00               	moviw [0]fsr0
  5992  044F  00A0               	movwf	___lldiv@divisor
  5993  0450  3F01               	moviw [1]fsr0
  5994  0451  00A1               	movwf	___lldiv@divisor+1
  5995  0452  3F02               	moviw [2]fsr0
  5996  0453  00A2               	movwf	___lldiv@divisor+2
  5997  0454  3F03               	moviw [3]fsr0
  5998  0455  00A3               	movwf	___lldiv@divisor+3
  5999  0456  0021               	movlb	1	; select bank1
  6000  0457  083D               	movf	(printf@val+3)^(0+128),w
  6001  0458  0020               	movlb	0	; select bank0
  6002  0459  00A7               	movwf	___lldiv@dividend+3
  6003  045A  0021               	movlb	1	; select bank1
  6004  045B  083C               	movf	(printf@val+2)^(0+128),w
  6005  045C  0020               	movlb	0	; select bank0
  6006  045D  00A6               	movwf	___lldiv@dividend+2
  6007  045E  0021               	movlb	1	; select bank1
  6008  045F  083B               	movf	(printf@val+1)^(0+128),w
  6009  0460  0020               	movlb	0	; select bank0
  6010  0461  00A5               	movwf	___lldiv@dividend+1
  6011  0462  0021               	movlb	1	; select bank1
  6012  0463  083A               	movf	printf@val^(0+128),w
  6013  0464  0020               	movlb	0	; select bank0
  6014  0465  00A4               	movwf	___lldiv@dividend
  6015  0466  3196  26C1  3180   	fcall	___lldiv
  6016  0469  0020               	movlb	0	; select bank0
  6017  046A  0823               	movf	?___lldiv+3,w
  6018  046B  0021               	movlb	1	; select bank1
  6019  046C  00C3               	movwf	(printf@tmpval+3)^(0+128)
  6020  046D  0020               	movlb	0	; select bank0
  6021  046E  0822               	movf	?___lldiv+2,w
  6022  046F  0021               	movlb	1	; select bank1
  6023  0470  00C2               	movwf	(printf@tmpval+2)^(0+128)
  6024  0471  0020               	movlb	0	; select bank0
  6025  0472  0821               	movf	?___lldiv+1,w
  6026  0473  0021               	movlb	1	; select bank1
  6027  0474  00C1               	movwf	(printf@tmpval+1)^(0+128)
  6028  0475  0020               	movlb	0	; select bank0
  6029  0476  0820               	movf	?___lldiv,w
  6030  0477  0021               	movlb	1	; select bank1
  6031  0478  00C0               	movwf	printf@tmpval^(0+128)
  6032                           
  6033                           ;doprnt.c: 1230: tmpval.vd %= 10;
  6034  0479  3000               	movlw	0
  6035  047A  0020               	movlb	0	; select bank0
  6036  047B  00B1               	movwf	___llmod@divisor+3
  6037  047C  3000               	movlw	0
  6038  047D  00B0               	movwf	___llmod@divisor+2
  6039  047E  3000               	movlw	0
  6040  047F  00AF               	movwf	___llmod@divisor+1
  6041  0480  300A               	movlw	10
  6042  0481  00AE               	movwf	___llmod@divisor
  6043  0482  0021               	movlb	1	; select bank1
  6044  0483  0843               	movf	(printf@tmpval+3)^(0+128),w
  6045  0484  0020               	movlb	0	; select bank0
  6046  0485  00B5               	movwf	___llmod@dividend+3
  6047  0486  0021               	movlb	1	; select bank1
  6048  0487  0842               	movf	(printf@tmpval+2)^(0+128),w
  6049  0488  0020               	movlb	0	; select bank0
  6050  0489  00B4               	movwf	___llmod@dividend+2
  6051  048A  0021               	movlb	1	; select bank1
  6052  048B  0841               	movf	(printf@tmpval+1)^(0+128),w
  6053  048C  0020               	movlb	0	; select bank0
  6054  048D  00B3               	movwf	___llmod@dividend+1
  6055  048E  0021               	movlb	1	; select bank1
  6056  048F  0840               	movf	printf@tmpval^(0+128),w
  6057  0490  0020               	movlb	0	; select bank0
  6058  0491  00B2               	movwf	___llmod@dividend
  6059  0492  3195  2548  3180   	fcall	___llmod
  6060  0495  0020               	movlb	0	; select bank0
  6061  0496  0831               	movf	?___llmod+3,w
  6062  0497  0021               	movlb	1	; select bank1
  6063  0498  00C3               	movwf	(printf@tmpval+3)^(0+128)
  6064  0499  0020               	movlb	0	; select bank0
  6065  049A  0830               	movf	?___llmod+2,w
  6066  049B  0021               	movlb	1	; select bank1
  6067  049C  00C2               	movwf	(printf@tmpval+2)^(0+128)
  6068  049D  0020               	movlb	0	; select bank0
  6069  049E  082F               	movf	?___llmod+1,w
  6070  049F  0021               	movlb	1	; select bank1
  6071  04A0  00C1               	movwf	(printf@tmpval+1)^(0+128)
  6072  04A1  0020               	movlb	0	; select bank0
  6073  04A2  082E               	movf	?___llmod,w
  6074  04A3  0021               	movlb	1	; select bank1
  6075  04A4  00C0               	movwf	printf@tmpval^(0+128)
  6076                           
  6077                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  6078  04A5  0840               	movf	printf@tmpval^(0+128),w
  6079  04A6  3E30               	addlw	48
  6080  04A7  3192  2251  3180   	fcall	_putch
  6081                           
  6082                           ;doprnt.c: 1232: val %= dpowers[c];
  6083  04AA  0021               	movlb	1	; select bank1
  6084  04AB  0847               	movf	printf@c^(0+128),w
  6085  04AC  0020               	movlb	0	; select bank0
  6086  04AD  00E7               	movwf	??_printf
  6087  04AE  01E8               	clrf	??_printf+1
  6088  04AF  35E7               	lslf	??_printf,f
  6089  04B0  0DE8               	rlf	??_printf+1,f
  6090  04B1  35E7               	lslf	??_printf,f
  6091  04B2  0DE8               	rlf	??_printf+1,f
  6092  04B3  3000               	movlw	low (_dpowers| (0+32768))
  6093  04B4  0767               	addwf	??_printf,w
  6094  04B5  0084               	movwf	4
  6095  04B6  3090               	movlw	high (_dpowers| (0+32768))
  6096  04B7  3D68               	addwfc	??_printf+1,w
  6097  04B8  0085               	movwf	5
  6098  04B9  3F00               	moviw [0]fsr0
  6099  04BA  00AE               	movwf	___llmod@divisor
  6100  04BB  3F01               	moviw [1]fsr0
  6101  04BC  00AF               	movwf	___llmod@divisor+1
  6102  04BD  3F02               	moviw [2]fsr0
  6103  04BE  00B0               	movwf	___llmod@divisor+2
  6104  04BF  3F03               	moviw [3]fsr0
  6105  04C0  00B1               	movwf	___llmod@divisor+3
  6106  04C1  0021               	movlb	1	; select bank1
  6107  04C2  083D               	movf	(printf@val+3)^(0+128),w
  6108  04C3  0020               	movlb	0	; select bank0
  6109  04C4  00B5               	movwf	___llmod@dividend+3
  6110  04C5  0021               	movlb	1	; select bank1
  6111  04C6  083C               	movf	(printf@val+2)^(0+128),w
  6112  04C7  0020               	movlb	0	; select bank0
  6113  04C8  00B4               	movwf	___llmod@dividend+2
  6114  04C9  0021               	movlb	1	; select bank1
  6115  04CA  083B               	movf	(printf@val+1)^(0+128),w
  6116  04CB  0020               	movlb	0	; select bank0
  6117  04CC  00B3               	movwf	___llmod@dividend+1
  6118  04CD  0021               	movlb	1	; select bank1
  6119  04CE  083A               	movf	printf@val^(0+128),w
  6120  04CF  0020               	movlb	0	; select bank0
  6121  04D0  00B2               	movwf	___llmod@dividend
  6122  04D1  3195  2548  3180   	fcall	___llmod
  6123  04D4  0020               	movlb	0	; select bank0
  6124  04D5  0831               	movf	?___llmod+3,w
  6125  04D6  0021               	movlb	1	; select bank1
  6126  04D7  00BD               	movwf	(printf@val+3)^(0+128)
  6127  04D8  0020               	movlb	0	; select bank0
  6128  04D9  0830               	movf	?___llmod+2,w
  6129  04DA  0021               	movlb	1	; select bank1
  6130  04DB  00BC               	movwf	(printf@val+2)^(0+128)
  6131  04DC  0020               	movlb	0	; select bank0
  6132  04DD  082F               	movf	?___llmod+1,w
  6133  04DE  0021               	movlb	1	; select bank1
  6134  04DF  00BB               	movwf	(printf@val+1)^(0+128)
  6135  04E0  0020               	movlb	0	; select bank0
  6136  04E1  082E               	movf	?___llmod,w
  6137  04E2  2C35               	goto	L4
  6138  04E3                     l2860:	
  6139                           ;doprnt.c: 1233: }
  6140                           ;doprnt.c: 1235: while(prec) {
  6141                           
  6142                           
  6143                           ;doprnt.c: 1236: (putch('0') );
  6144  04E3  3030               	movlw	48
  6145  04E4  3192  2251  3180   	fcall	_putch
  6146                           
  6147                           ;doprnt.c: 1237: prec--;
  6148  04E7  30FF               	movlw	255
  6149  04E8  0021               	movlb	1	; select bank1
  6150  04E9  07B8               	addwf	printf@prec^(0+128),f
  6151  04EA  30FF               	movlw	255
  6152  04EB  3DB9               	addwfc	(printf@prec+1)^(0+128),f
  6153  04EC                     l2864:	
  6154  04EC  0838               	movf	printf@prec^(0+128),w
  6155  04ED  0439               	iorwf	(printf@prec+1)^(0+128),w
  6156  04EE  1903               	btfsc	3,2
  6157  04EF  2848               	goto	l2900
  6158  04F0  2CE3               	goto	l2860
  6159  04F1                     l2866:	
  6160                           ;doprnt.c: 1238: }
  6161                           ;doprnt.c: 1245: continue;
  6162                           
  6163                           
  6164                           ;doprnt.c: 1246: }
  6165                           ;doprnt.c: 1253: {
  6166                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  6167  04F1  0021               	movlb	1	; select bank1
  6168  04F2  0837               	movf	printf@ap^(0+128),w
  6169  04F3  0086               	movwf	6
  6170  04F4  0187               	clrf	7
  6171  04F5  3F40               	moviw [0]fsr1
  6172  04F6  0020               	movlb	0	; select bank0
  6173  04F7  00E7               	movwf	??_printf
  6174  04F8  3F41               	moviw [1]fsr1
  6175  04F9  00E8               	movwf	??_printf+1
  6176  04FA  0867               	movf	??_printf,w
  6177  04FB  0021               	movlb	1	; select bank1
  6178  04FC  00BA               	movwf	printf@val^(0+128)
  6179  04FD  0020               	movlb	0	; select bank0
  6180  04FE  0868               	movf	??_printf+1,w
  6181  04FF  0021               	movlb	1	; select bank1
  6182  0500  00BB               	movwf	(printf@val+1)^(0+128)
  6183  0501  0D89               	rlf	9,f
  6184  0502  3B89               	subwfb	9,f
  6185  0503  0989               	comf	9,f
  6186  0504  00BC               	movwf	(printf@val+2)^(0+128)
  6187  0505  00BD               	movwf	(printf@val+3)^(0+128)
  6188  0506  3002               	movlw	2
  6189  0507  0020               	movlb	0	; select bank0
  6190  0508  00E7               	movwf	??_printf
  6191  0509  0867               	movf	??_printf,w
  6192  050A  0021               	movlb	1	; select bank1
  6193  050B  07B7               	addwf	printf@ap^(0+128),f
  6194                           
  6195                           ;doprnt.c: 1261: if((long)val < 0) {
  6196  050C  1FBD               	btfss	(printf@val+3)^(0+128),7
  6197  050D  2D1D               	goto	l2876
  6198                           
  6199                           ;doprnt.c: 1262: flag |= 0x03;
  6200  050E  3003               	movlw	3
  6201  050F  04B5               	iorwf	printf@flag^(0+128),f
  6202  0510  3000               	movlw	0
  6203  0511  04B6               	iorwf	(printf@flag+1)^(0+128),f
  6204                           
  6205                           ;doprnt.c: 1263: val = -val;
  6206  0512  09BA               	comf	printf@val^(0+128),f
  6207  0513  09BB               	comf	(printf@val+1)^(0+128),f
  6208  0514  09BC               	comf	(printf@val+2)^(0+128),f
  6209  0515  09BD               	comf	(printf@val+3)^(0+128),f
  6210  0516  0ABA               	incf	printf@val^(0+128),f
  6211  0517  1903               	skipnz
  6212  0518  0ABB               	incf	(printf@val+1)^(0+128),f
  6213  0519  1903               	skipnz
  6214  051A  0ABC               	incf	(printf@val+2)^(0+128),f
  6215  051B  1903               	skipnz
  6216  051C  0ABD               	incf	(printf@val+3)^(0+128),f
  6217  051D                     l2876:	
  6218                           
  6219                           ;doprnt.c: 1264: }
  6220                           ;doprnt.c: 1266: }
  6221                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6222  051D  01C7               	clrf	printf@c^(0+128)
  6223  051E  0AC7               	incf	printf@c^(0+128),f
  6224  051F  300A               	movlw	10
  6225  0520  0647               	xorwf	printf@c^(0+128),w
  6226  0521  1903               	btfsc	3,2
  6227  0522  2D5A               	goto	l2888
  6228  0523                     l2882:	
  6229                           
  6230                           ;doprnt.c: 1306: if(val < dpowers[c])
  6231  0523  0847               	movf	printf@c^(0+128),w
  6232  0524  0020               	movlb	0	; select bank0
  6233  0525  00E7               	movwf	??_printf
  6234  0526  01E8               	clrf	??_printf+1
  6235  0527  35E7               	lslf	??_printf,f
  6236  0528  0DE8               	rlf	??_printf+1,f
  6237  0529  35E7               	lslf	??_printf,f
  6238  052A  0DE8               	rlf	??_printf+1,f
  6239  052B  3000               	movlw	low (_dpowers| (0+32768))
  6240  052C  0767               	addwf	??_printf,w
  6241  052D  0084               	movwf	4
  6242  052E  3090               	movlw	high (_dpowers| (0+32768))
  6243  052F  3D68               	addwfc	??_printf+1,w
  6244  0530  0085               	movwf	5
  6245  0531  3F00               	moviw [0]fsr0
  6246  0532  00E9               	movwf	??_printf+2
  6247  0533  3F01               	moviw [1]fsr0
  6248  0534  00EA               	movwf	??_printf+3
  6249  0535  3F02               	moviw [2]fsr0
  6250  0536  00EB               	movwf	??_printf+4
  6251  0537  3F03               	moviw [3]fsr0
  6252  0538  00EC               	movwf	??_printf+5
  6253  0539  086C               	movf	??_printf+5,w
  6254  053A  0021               	movlb	1	; select bank1
  6255  053B  023D               	subwf	(printf@val+3)^(0+128),w
  6256  053C  1D03               	skipz
  6257  053D  2D4E               	goto	u3825
  6258  053E  0020               	movlb	0	; select bank0
  6259  053F  086B               	movf	??_printf+4,w
  6260  0540  0021               	movlb	1	; select bank1
  6261  0541  023C               	subwf	(printf@val+2)^(0+128),w
  6262  0542  1D03               	skipz
  6263  0543  2D4E               	goto	u3825
  6264  0544  0020               	movlb	0	; select bank0
  6265  0545  086A               	movf	??_printf+3,w
  6266  0546  0021               	movlb	1	; select bank1
  6267  0547  023B               	subwf	(printf@val+1)^(0+128),w
  6268  0548  1D03               	skipz
  6269  0549  2D4E               	goto	u3825
  6270  054A  0020               	movlb	0	; select bank0
  6271  054B  0869               	movf	??_printf+2,w
  6272  054C  0021               	movlb	1	; select bank1
  6273  054D  023A               	subwf	printf@val^(0+128),w
  6274  054E                     u3825:	
  6275  054E  1C03               	btfss	3,0
  6276  054F  2D5A               	goto	l2888
  6277                           
  6278                           ;doprnt.c: 1307: break;
  6279  0550  3001               	movlw	1
  6280  0551  0020               	movlb	0	; select bank0
  6281  0552  00E7               	movwf	??_printf
  6282  0553  0867               	movf	??_printf,w
  6283  0554  0021               	movlb	1	; select bank1
  6284  0555  07C7               	addwf	printf@c^(0+128),f
  6285  0556  300A               	movlw	10
  6286  0557  0647               	xorwf	printf@c^(0+128),w
  6287  0558  1D03               	btfss	3,2
  6288  0559  2D23               	goto	l2882
  6289  055A                     l2888:	
  6290                           
  6291                           ;doprnt.c: 1422: {
  6292                           ;doprnt.c: 1438: if(flag & 0x03)
  6293  055A  3003               	movlw	3
  6294  055B  0535               	andwf	printf@flag^(0+128),w
  6295  055C  0020               	movlb	0	; select bank0
  6296  055D  00E7               	movwf	??_printf
  6297  055E  3000               	movlw	0
  6298  055F  0021               	movlb	1	; select bank1
  6299  0560  0536               	andwf	(printf@flag+1)^(0+128),w
  6300  0561  0020               	movlb	0	; select bank0
  6301  0562  00E8               	movwf	??_printf+1
  6302  0563  0867               	movf	??_printf,w
  6303  0564  0468               	iorwf	??_printf+1,w
  6304  0565  1903               	btfsc	3,2
  6305  0566  2D6B               	goto	l2892
  6306                           
  6307                           ;doprnt.c: 1439: (putch('-') );
  6308  0567  302D               	movlw	45
  6309  0568  3192  2251  3180   	fcall	_putch
  6310  056B                     l2892:	
  6311                           
  6312                           ;doprnt.c: 1469: }
  6313                           ;doprnt.c: 1472: prec = c;
  6314  056B  0021               	movlb	1	; select bank1
  6315  056C  0847               	movf	printf@c^(0+128),w
  6316  056D  00B8               	movwf	printf@prec^(0+128)
  6317  056E  01B9               	clrf	(printf@prec+1)^(0+128)
  6318  056F  1BB8               	btfsc	printf@prec^(0+128),7
  6319  0570  03B9               	decf	(printf@prec+1)^(0+128),f
  6320  0571                     l2898:	
  6321                           ;doprnt.c: 1474: while(prec--) {
  6322                           
  6323  0571  30FF               	movlw	255
  6324  0572  0021               	movlb	1	; select bank1
  6325  0573  07B8               	addwf	printf@prec^(0+128),f
  6326  0574  30FF               	movlw	255
  6327  0575  3DB9               	addwfc	(printf@prec+1)^(0+128),f
  6328  0576  0A38               	incf	printf@prec^(0+128),w
  6329  0577  1903               	btfsc	3,2
  6330  0578  0A39               	incf	(printf@prec+1)^(0+128),w
  6331  0579  1903               	btfsc	3,2
  6332  057A  2848               	goto	l2900
  6333                           
  6334                           ;doprnt.c: 1478: {
  6335                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6336  057B  3000               	movlw	0
  6337  057C  0020               	movlb	0	; select bank0
  6338  057D  00B1               	movwf	___llmod@divisor+3
  6339  057E  3000               	movlw	0
  6340  057F  00B0               	movwf	___llmod@divisor+2
  6341  0580  3000               	movlw	0
  6342  0581  00AF               	movwf	___llmod@divisor+1
  6343  0582  300A               	movlw	10
  6344  0583  00AE               	movwf	___llmod@divisor
  6345  0584  0021               	movlb	1	; select bank1
  6346  0585  0839               	movf	(printf@prec+1)^(0+128),w
  6347  0586  0085               	movwf	5
  6348  0587  0838               	movf	printf@prec^(0+128),w
  6349  0588  0084               	movwf	4
  6350  0589  3584               	lslf	4,f
  6351  058A  0D85               	rlf	5,f
  6352  058B  3584               	lslf	4,f
  6353  058C  0D85               	rlf	5,f
  6354  058D  3000               	movlw	low (_dpowers| (0+32768))
  6355  058E  0784               	addwf	4,f
  6356  058F  3090               	movlw	high (_dpowers| (0+32768))
  6357  0590  3D85               	addwfc	5,f
  6358  0591  3F00               	moviw [0]fsr0
  6359  0592  0020               	movlb	0	; select bank0
  6360  0593  00A0               	movwf	___lldiv@divisor
  6361  0594  3F01               	moviw [1]fsr0
  6362  0595  00A1               	movwf	___lldiv@divisor+1
  6363  0596  3F02               	moviw [2]fsr0
  6364  0597  00A2               	movwf	___lldiv@divisor+2
  6365  0598  3F03               	moviw [3]fsr0
  6366  0599  00A3               	movwf	___lldiv@divisor+3
  6367  059A  0021               	movlb	1	; select bank1
  6368  059B  083D               	movf	(printf@val+3)^(0+128),w
  6369  059C  0020               	movlb	0	; select bank0
  6370  059D  00A7               	movwf	___lldiv@dividend+3
  6371  059E  0021               	movlb	1	; select bank1
  6372  059F  083C               	movf	(printf@val+2)^(0+128),w
  6373  05A0  0020               	movlb	0	; select bank0
  6374  05A1  00A6               	movwf	___lldiv@dividend+2
  6375  05A2  0021               	movlb	1	; select bank1
  6376  05A3  083B               	movf	(printf@val+1)^(0+128),w
  6377  05A4  0020               	movlb	0	; select bank0
  6378  05A5  00A5               	movwf	___lldiv@dividend+1
  6379  05A6  0021               	movlb	1	; select bank1
  6380  05A7  083A               	movf	printf@val^(0+128),w
  6381  05A8  0020               	movlb	0	; select bank0
  6382  05A9  00A4               	movwf	___lldiv@dividend
  6383  05AA  3196  26C1  3180   	fcall	___lldiv
  6384  05AD  0020               	movlb	0	; select bank0
  6385  05AE  0823               	movf	?___lldiv+3,w
  6386  05AF  00B5               	movwf	___llmod@dividend+3
  6387  05B0  0822               	movf	?___lldiv+2,w
  6388  05B1  00B4               	movwf	___llmod@dividend+2
  6389  05B2  0821               	movf	?___lldiv+1,w
  6390  05B3  00B3               	movwf	___llmod@dividend+1
  6391  05B4  0820               	movf	?___lldiv,w
  6392  05B5  00B2               	movwf	___llmod@dividend
  6393  05B6  3195  2548  3180   	fcall	___llmod
  6394  05B9  0020               	movlb	0	; select bank0
  6395  05BA  082E               	movf	?___llmod,w
  6396  05BB  3E30               	addlw	48
  6397  05BC  00E7               	movwf	??_printf
  6398  05BD  0867               	movf	??_printf,w
  6399  05BE  0021               	movlb	1	; select bank1
  6400  05BF  00C7               	movwf	printf@c^(0+128)
  6401                           
  6402                           ;doprnt.c: 1523: }
  6403                           ;doprnt.c: 1524: (putch(c) );
  6404  05C0  0847               	movf	printf@c^(0+128),w
  6405  05C1  3192  2251  3180   	fcall	_putch
  6406  05C4  2D71               	goto	l2898
  6407  05C5                     l424:	
  6408                           ;doprnt.c: 1540: return 0;
  6409                           ;	Return value of _printf is never used
  6410                           
  6411                           ;doprnt.c: 1525: }
  6412                           ;doprnt.c: 1533: }
  6413                           ;doprnt.c: 1535: alldone:
  6414                           
  6415  05C5  0008               	return
  6416  05C6                     __end_of_printf:	
  6417                           
  6418                           	psect	text29
  6419  0DBA                     __ptext29:	
  6420 ;; *************** function _scale *****************
  6421 ;; Defined at:
  6422 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  6423 ;; Parameters:    Size  Location     Type
  6424 ;;  scl             1    wreg     char 
  6425 ;; Auto vars:     Size  Location     Type
  6426 ;;  scl             1   46[BANK0 ] char 
  6427 ;; Return value:  Size  Location     Type
  6428 ;;                  3   38[BANK0 ] char 
  6429 ;; Registers used:
  6430 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6431 ;; Tracked objects:
  6432 ;;		On entry : 0/0
  6433 ;;		On exit  : 0/0
  6434 ;;		Unchanged: 0/0
  6435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6436 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6437 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6438 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6439 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6440 ;;Total ram usage:        9 bytes
  6441 ;; Hardware stack levels used:    1
  6442 ;; Hardware stack levels required when called:    6
  6443 ;; This function calls:
  6444 ;;		___awdiv
  6445 ;;		___awmod
  6446 ;;		___ftmul
  6447 ;;		___wmul
  6448 ;; This function is called by:
  6449 ;;		_printf
  6450 ;; This function uses a non-reentrant model
  6451 ;;
  6452                           
  6453                           
  6454                           ;psect for function _scale
  6455  0DBA                     _scale:	
  6456                           
  6457                           ;incstack = 0
  6458                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6459                           ;scale@scl stored from wreg
  6460  0DBA  0020               	movlb	0	; select bank0
  6461  0DBB  00CE               	movwf	scale@scl
  6462                           
  6463                           ;doprnt.c: 428: if(scl < 0) {
  6464  0DBC  1FCE               	btfss	scale@scl,7
  6465  0DBD  2EE0               	goto	l2454
  6466                           
  6467                           ;doprnt.c: 429: scl = -scl;
  6468  0DBE  09CE               	comf	scale@scl,f
  6469  0DBF  0ACE               	incf	scale@scl,f
  6470                           
  6471                           ;doprnt.c: 430: if(scl>=110)
  6472  0DC0  084E               	movf	scale@scl,w
  6473  0DC1  3A80               	xorlw	128
  6474  0DC2  3E12               	addlw	-238
  6475  0DC3  1C03               	skipc
  6476  0DC4  2E64               	goto	l2444
  6477                           
  6478                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6479  0DC5  300A               	movlw	10
  6480  0DC6  00A7               	movwf	___awdiv@divisor
  6481  0DC7  3000               	movlw	0
  6482  0DC8  00A8               	movwf	___awdiv@divisor+1
  6483  0DC9  084E               	movf	scale@scl,w
  6484  0DCA  00A2               	movwf	___awmod@dividend
  6485  0DCB  01A3               	clrf	___awmod@dividend+1
  6486  0DCC  1BA2               	btfsc	___awmod@dividend,7
  6487  0DCD  03A3               	decf	___awmod@dividend+1,f
  6488  0DCE  3064               	movlw	100
  6489  0DCF  00A0               	movwf	___awmod@divisor
  6490  0DD0  3000               	movlw	0
  6491  0DD1  00A1               	movwf	___awmod@divisor+1
  6492  0DD2  3195  258B  318D   	fcall	___awmod
  6493  0DD5  0020               	movlb	0	; select bank0
  6494  0DD6  0821               	movf	?___awmod+1,w
  6495  0DD7  00AA               	movwf	___awdiv@dividend+1
  6496  0DD8  0820               	movf	?___awmod,w
  6497  0DD9  00A9               	movwf	___awdiv@dividend
  6498  0DDA  3196  266F  318D   	fcall	___awdiv
  6499  0DDD  0020               	movlb	0	; select bank0
  6500  0DDE  0827               	movf	?___awdiv,w
  6501  0DDF  3E09               	addlw	9
  6502  0DE0  00B0               	movwf	___wmul@multiplier
  6503  0DE1  3000               	movlw	0
  6504  0DE2  3D28               	addwfc	?___awdiv+1,w
  6505  0DE3  00B1               	movwf	___wmul@multiplier+1
  6506  0DE4  3003               	movlw	3
  6507  0DE5  00B2               	movwf	___wmul@multiplicand
  6508  0DE6  3000               	movlw	0
  6509  0DE7  00B3               	movwf	___wmul@multiplicand+1
  6510  0DE8  3193  238F  318D   	fcall	___wmul
  6511  0DEB  0020               	movlb	0	; select bank0
  6512  0DEC  0831               	movf	?___wmul+1,w
  6513  0DED  0085               	movwf	5
  6514  0DEE  0830               	movf	?___wmul,w
  6515  0DEF  0084               	movwf	4
  6516  0DF0  3028               	movlw	low (__npowers_| (0+32768))
  6517  0DF1  0784               	addwf	4,f
  6518  0DF2  3090               	movlw	high (__npowers_| (0+32768))
  6519  0DF3  3D85               	addwfc	5,f
  6520  0DF4  3F00               	moviw [0]fsr0
  6521  0DF5  00B6               	movwf	___ftmul@f1
  6522  0DF6  3F01               	moviw [1]fsr0
  6523  0DF7  00B7               	movwf	___ftmul@f1+1
  6524  0DF8  3F02               	moviw [2]fsr0
  6525  0DF9  00B8               	movwf	___ftmul@f1+2
  6526  0DFA  3064               	movlw	100
  6527  0DFB  00A7               	movwf	___awdiv@divisor
  6528  0DFC  3000               	movlw	0
  6529  0DFD  00A8               	movwf	___awdiv@divisor+1
  6530  0DFE  084E               	movf	scale@scl,w
  6531  0DFF  00A9               	movwf	___awdiv@dividend
  6532  0E00  01AA               	clrf	___awdiv@dividend+1
  6533  0E01  1BA9               	btfsc	___awdiv@dividend,7
  6534  0E02  03AA               	decf	___awdiv@dividend+1,f
  6535  0E03  3196  266F  318D   	fcall	___awdiv
  6536  0E06  0020               	movlb	0	; select bank0
  6537  0E07  0827               	movf	?___awdiv,w
  6538  0E08  3E12               	addlw	18
  6539  0E09  00B0               	movwf	___wmul@multiplier
  6540  0E0A  3000               	movlw	0
  6541  0E0B  3D28               	addwfc	?___awdiv+1,w
  6542  0E0C  00B1               	movwf	___wmul@multiplier+1
  6543  0E0D  3003               	movlw	3
  6544  0E0E  00B2               	movwf	___wmul@multiplicand
  6545  0E0F  3000               	movlw	0
  6546  0E10  00B3               	movwf	___wmul@multiplicand+1
  6547  0E11  3193  238F  318D   	fcall	___wmul
  6548  0E14  0020               	movlb	0	; select bank0
  6549  0E15  0831               	movf	?___wmul+1,w
  6550  0E16  0085               	movwf	5
  6551  0E17  0830               	movf	?___wmul,w
  6552  0E18  0084               	movwf	4
  6553  0E19  3028               	movlw	low (__npowers_| (0+32768))
  6554  0E1A  0784               	addwf	4,f
  6555  0E1B  3090               	movlw	high (__npowers_| (0+32768))
  6556  0E1C  3D85               	addwfc	5,f
  6557  0E1D  3F00               	moviw [0]fsr0
  6558  0E1E  00B9               	movwf	___ftmul@f2
  6559  0E1F  3F01               	moviw [1]fsr0
  6560  0E20  00BA               	movwf	___ftmul@f2+1
  6561  0E21  3F02               	moviw [2]fsr0
  6562  0E22  00BB               	movwf	___ftmul@f2+2
  6563  0E23  3189  21F6  318D   	fcall	___ftmul
  6564  0E26  0020               	movlb	0	; select bank0
  6565  0E27  0836               	movf	?___ftmul,w
  6566  0E28  00CB               	movwf	_scale$1276
  6567  0E29  0837               	movf	?___ftmul+1,w
  6568  0E2A  00CC               	movwf	_scale$1276+1
  6569  0E2B  0838               	movf	?___ftmul+2,w
  6570  0E2C  00CD               	movwf	_scale$1276+2
  6571                           
  6572                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6573  0E2D  084E               	movf	scale@scl,w
  6574  0E2E  00A2               	movwf	___awmod@dividend
  6575  0E2F  01A3               	clrf	___awmod@dividend+1
  6576  0E30  1BA2               	btfsc	___awmod@dividend,7
  6577  0E31  03A3               	decf	___awmod@dividend+1,f
  6578  0E32  300A               	movlw	10
  6579  0E33  00A0               	movwf	___awmod@divisor
  6580  0E34  3000               	movlw	0
  6581  0E35  00A1               	movwf	___awmod@divisor+1
  6582  0E36  3195  258B  318D   	fcall	___awmod
  6583  0E39  0020               	movlb	0	; select bank0
  6584  0E3A  0821               	movf	?___awmod+1,w
  6585  0E3B  00B1               	movwf	___wmul@multiplier+1
  6586  0E3C  0820               	movf	?___awmod,w
  6587  0E3D  00B0               	movwf	___wmul@multiplier
  6588  0E3E  3003               	movlw	3
  6589  0E3F  00B2               	movwf	___wmul@multiplicand
  6590  0E40  3000               	movlw	0
  6591  0E41  00B3               	movwf	___wmul@multiplicand+1
  6592  0E42  3193  238F  318D   	fcall	___wmul
  6593  0E45  0020               	movlb	0	; select bank0
  6594  0E46  0831               	movf	?___wmul+1,w
  6595  0E47  0085               	movwf	5
  6596  0E48  0830               	movf	?___wmul,w
  6597  0E49  0084               	movwf	4
  6598  0E4A  3028               	movlw	low (__npowers_| (0+32768))
  6599  0E4B  0784               	addwf	4,f
  6600  0E4C  3090               	movlw	high (__npowers_| (0+32768))
  6601  0E4D  3D85               	addwfc	5,f
  6602  0E4E  3F00               	moviw [0]fsr0
  6603  0E4F  00B6               	movwf	___ftmul@f1
  6604  0E50  3F01               	moviw [1]fsr0
  6605  0E51  00B7               	movwf	___ftmul@f1+1
  6606  0E52  3F02               	moviw [2]fsr0
  6607  0E53  00B8               	movwf	___ftmul@f1+2
  6608  0E54  084B               	movf	_scale$1276,w
  6609  0E55  00B9               	movwf	___ftmul@f2
  6610  0E56  084C               	movf	_scale$1276+1,w
  6611  0E57  00BA               	movwf	___ftmul@f2+1
  6612  0E58  084D               	movf	_scale$1276+2,w
  6613  0E59  00BB               	movwf	___ftmul@f2+2
  6614  0E5A  3189  21F6         	fcall	___ftmul
  6615  0E5C  0020               	movlb	0	; select bank0
  6616  0E5D  0836               	movf	?___ftmul,w
  6617  0E5E  00C6               	movwf	?_scale
  6618  0E5F  0837               	movf	?___ftmul+1,w
  6619  0E60  00C7               	movwf	?_scale+1
  6620  0E61  0838               	movf	?___ftmul+2,w
  6621  0E62  00C8               	movwf	?_scale+2
  6622  0E63  0008               	return
  6623  0E64                     l2444:	
  6624                           
  6625                           ;doprnt.c: 432: else if(scl > 10)
  6626  0E64  084E               	movf	scale@scl,w
  6627  0E65  3A80               	xorlw	128
  6628  0E66  3E75               	addlw	-139
  6629  0E67  1C03               	skipc
  6630  0E68  2EC3               	goto	l2450
  6631                           
  6632                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6633  0E69  084E               	movf	scale@scl,w
  6634  0E6A  00A2               	movwf	___awmod@dividend
  6635  0E6B  01A3               	clrf	___awmod@dividend+1
  6636  0E6C  1BA2               	btfsc	___awmod@dividend,7
  6637  0E6D  03A3               	decf	___awmod@dividend+1,f
  6638  0E6E  300A               	movlw	10
  6639  0E6F  00A0               	movwf	___awmod@divisor
  6640  0E70  3000               	movlw	0
  6641  0E71  00A1               	movwf	___awmod@divisor+1
  6642  0E72  3195  258B  318D   	fcall	___awmod
  6643  0E75  0020               	movlb	0	; select bank0
  6644  0E76  0821               	movf	?___awmod+1,w
  6645  0E77  00B1               	movwf	___wmul@multiplier+1
  6646  0E78  0820               	movf	?___awmod,w
  6647  0E79  00B0               	movwf	___wmul@multiplier
  6648  0E7A  3003               	movlw	3
  6649  0E7B  00B2               	movwf	___wmul@multiplicand
  6650  0E7C  3000               	movlw	0
  6651  0E7D  00B3               	movwf	___wmul@multiplicand+1
  6652  0E7E  3193  238F  318D   	fcall	___wmul
  6653  0E81  0020               	movlb	0	; select bank0
  6654  0E82  0831               	movf	?___wmul+1,w
  6655  0E83  0085               	movwf	5
  6656  0E84  0830               	movf	?___wmul,w
  6657  0E85  0084               	movwf	4
  6658  0E86  3028               	movlw	low (__npowers_| (0+32768))
  6659  0E87  0784               	addwf	4,f
  6660  0E88  3090               	movlw	high (__npowers_| (0+32768))
  6661  0E89  3D85               	addwfc	5,f
  6662  0E8A  3F00               	moviw [0]fsr0
  6663  0E8B  00B6               	movwf	___ftmul@f1
  6664  0E8C  3F01               	moviw [1]fsr0
  6665  0E8D  00B7               	movwf	___ftmul@f1+1
  6666  0E8E  3F02               	moviw [2]fsr0
  6667  0E8F  00B8               	movwf	___ftmul@f1+2
  6668  0E90  300A               	movlw	10
  6669  0E91  00A7               	movwf	___awdiv@divisor
  6670  0E92  3000               	movlw	0
  6671  0E93  00A8               	movwf	___awdiv@divisor+1
  6672  0E94  084E               	movf	scale@scl,w
  6673  0E95  00A9               	movwf	___awdiv@dividend
  6674  0E96  01AA               	clrf	___awdiv@dividend+1
  6675  0E97  1BA9               	btfsc	___awdiv@dividend,7
  6676  0E98  03AA               	decf	___awdiv@dividend+1,f
  6677  0E99  3196  266F  318D   	fcall	___awdiv
  6678  0E9C  0020               	movlb	0	; select bank0
  6679  0E9D  0827               	movf	?___awdiv,w
  6680  0E9E  3E09               	addlw	9
  6681  0E9F  00B0               	movwf	___wmul@multiplier
  6682  0EA0  3000               	movlw	0
  6683  0EA1  3D28               	addwfc	?___awdiv+1,w
  6684  0EA2  00B1               	movwf	___wmul@multiplier+1
  6685  0EA3  3003               	movlw	3
  6686  0EA4  00B2               	movwf	___wmul@multiplicand
  6687  0EA5  3000               	movlw	0
  6688  0EA6  00B3               	movwf	___wmul@multiplicand+1
  6689  0EA7  3193  238F  318D   	fcall	___wmul
  6690  0EAA  0020               	movlb	0	; select bank0
  6691  0EAB  0831               	movf	?___wmul+1,w
  6692  0EAC  0085               	movwf	5
  6693  0EAD  0830               	movf	?___wmul,w
  6694  0EAE  0084               	movwf	4
  6695  0EAF  3028               	movlw	low (__npowers_| (0+32768))
  6696  0EB0  0784               	addwf	4,f
  6697  0EB1  3090               	movlw	high (__npowers_| (0+32768))
  6698  0EB2  3D85               	addwfc	5,f
  6699  0EB3  3F00               	moviw [0]fsr0
  6700  0EB4  00B9               	movwf	___ftmul@f2
  6701  0EB5  3F01               	moviw [1]fsr0
  6702  0EB6  00BA               	movwf	___ftmul@f2+1
  6703  0EB7  3F02               	moviw [2]fsr0
  6704  0EB8  00BB               	movwf	___ftmul@f2+2
  6705  0EB9  3189  21F6         	fcall	___ftmul
  6706  0EBB  0020               	movlb	0	; select bank0
  6707  0EBC  0836               	movf	?___ftmul,w
  6708  0EBD  00C6               	movwf	?_scale
  6709  0EBE  0837               	movf	?___ftmul+1,w
  6710  0EBF  00C7               	movwf	?_scale+1
  6711  0EC0  0838               	movf	?___ftmul+2,w
  6712  0EC1  00C8               	movwf	?_scale+2
  6713  0EC2  0008               	return
  6714  0EC3                     l2450:	
  6715                           
  6716                           ;doprnt.c: 434: return _npowers_[scl];
  6717  0EC3  084E               	movf	scale@scl,w
  6718  0EC4  00C9               	movwf	??_scale
  6719  0EC5  01CA               	clrf	??_scale+1
  6720  0EC6  0849               	movf	??_scale,w
  6721  0EC7  00B0               	movwf	___wmul@multiplier
  6722  0EC8  084A               	movf	??_scale+1,w
  6723  0EC9  00B1               	movwf	___wmul@multiplier+1
  6724  0ECA  3003               	movlw	3
  6725  0ECB  00B2               	movwf	___wmul@multiplicand
  6726  0ECC  3000               	movlw	0
  6727  0ECD  00B3               	movwf	___wmul@multiplicand+1
  6728  0ECE  3193  238F         	fcall	___wmul
  6729  0ED0  0020               	movlb	0	; select bank0
  6730  0ED1  0831               	movf	?___wmul+1,w
  6731  0ED2  0085               	movwf	5
  6732  0ED3  0830               	movf	?___wmul,w
  6733  0ED4  0084               	movwf	4
  6734  0ED5  3028               	movlw	low (__npowers_| (0+32768))
  6735  0ED6  0784               	addwf	4,f
  6736  0ED7  3090               	movlw	high (__npowers_| (0+32768))
  6737  0ED8  3D85               	addwfc	5,f
  6738  0ED9  3F00               	moviw [0]fsr0
  6739  0EDA  00C6               	movwf	?_scale
  6740  0EDB  3F01               	moviw [1]fsr0
  6741  0EDC  00C7               	movwf	?_scale+1
  6742  0EDD  3F02               	moviw [2]fsr0
  6743  0EDE  00C8               	movwf	?_scale+2
  6744  0EDF  0008               	return
  6745  0EE0                     l2454:	
  6746                           
  6747                           ;doprnt.c: 435: }
  6748                           ;doprnt.c: 436: if(scl>=110)
  6749  0EE0  084E               	movf	scale@scl,w
  6750  0EE1  3A80               	xorlw	128
  6751  0EE2  3E12               	addlw	-238
  6752  0EE3  1C03               	skipc
  6753  0EE4  2F84               	goto	l2462
  6754                           
  6755                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6756  0EE5  300A               	movlw	10
  6757  0EE6  00A7               	movwf	___awdiv@divisor
  6758  0EE7  3000               	movlw	0
  6759  0EE8  00A8               	movwf	___awdiv@divisor+1
  6760  0EE9  084E               	movf	scale@scl,w
  6761  0EEA  00A2               	movwf	___awmod@dividend
  6762  0EEB  01A3               	clrf	___awmod@dividend+1
  6763  0EEC  1BA2               	btfsc	___awmod@dividend,7
  6764  0EED  03A3               	decf	___awmod@dividend+1,f
  6765  0EEE  3064               	movlw	100
  6766  0EEF  00A0               	movwf	___awmod@divisor
  6767  0EF0  3000               	movlw	0
  6768  0EF1  00A1               	movwf	___awmod@divisor+1
  6769  0EF2  3195  258B  318D   	fcall	___awmod
  6770  0EF5  0020               	movlb	0	; select bank0
  6771  0EF6  0821               	movf	?___awmod+1,w
  6772  0EF7  00AA               	movwf	___awdiv@dividend+1
  6773  0EF8  0820               	movf	?___awmod,w
  6774  0EF9  00A9               	movwf	___awdiv@dividend
  6775  0EFA  3196  266F  318D   	fcall	___awdiv
  6776  0EFD  0020               	movlb	0	; select bank0
  6777  0EFE  0827               	movf	?___awdiv,w
  6778  0EFF  3E09               	addlw	9
  6779  0F00  00B0               	movwf	___wmul@multiplier
  6780  0F01  3000               	movlw	0
  6781  0F02  3D28               	addwfc	?___awdiv+1,w
  6782  0F03  00B1               	movwf	___wmul@multiplier+1
  6783  0F04  3003               	movlw	3
  6784  0F05  00B2               	movwf	___wmul@multiplicand
  6785  0F06  3000               	movlw	0
  6786  0F07  00B3               	movwf	___wmul@multiplicand+1
  6787  0F08  3193  238F  318D   	fcall	___wmul
  6788  0F0B  0020               	movlb	0	; select bank0
  6789  0F0C  0831               	movf	?___wmul+1,w
  6790  0F0D  0085               	movwf	5
  6791  0F0E  0830               	movf	?___wmul,w
  6792  0F0F  0084               	movwf	4
  6793  0F10  304F               	movlw	low (__powers_| (0+32768))
  6794  0F11  0784               	addwf	4,f
  6795  0F12  3090               	movlw	high (__powers_| (0+32768))
  6796  0F13  3D85               	addwfc	5,f
  6797  0F14  3F00               	moviw [0]fsr0
  6798  0F15  00B6               	movwf	___ftmul@f1
  6799  0F16  3F01               	moviw [1]fsr0
  6800  0F17  00B7               	movwf	___ftmul@f1+1
  6801  0F18  3F02               	moviw [2]fsr0
  6802  0F19  00B8               	movwf	___ftmul@f1+2
  6803  0F1A  3064               	movlw	100
  6804  0F1B  00A7               	movwf	___awdiv@divisor
  6805  0F1C  3000               	movlw	0
  6806  0F1D  00A8               	movwf	___awdiv@divisor+1
  6807  0F1E  084E               	movf	scale@scl,w
  6808  0F1F  00A9               	movwf	___awdiv@dividend
  6809  0F20  01AA               	clrf	___awdiv@dividend+1
  6810  0F21  1BA9               	btfsc	___awdiv@dividend,7
  6811  0F22  03AA               	decf	___awdiv@dividend+1,f
  6812  0F23  3196  266F  318D   	fcall	___awdiv
  6813  0F26  0020               	movlb	0	; select bank0
  6814  0F27  0827               	movf	?___awdiv,w
  6815  0F28  3E12               	addlw	18
  6816  0F29  00B0               	movwf	___wmul@multiplier
  6817  0F2A  3000               	movlw	0
  6818  0F2B  3D28               	addwfc	?___awdiv+1,w
  6819  0F2C  00B1               	movwf	___wmul@multiplier+1
  6820  0F2D  3003               	movlw	3
  6821  0F2E  00B2               	movwf	___wmul@multiplicand
  6822  0F2F  3000               	movlw	0
  6823  0F30  00B3               	movwf	___wmul@multiplicand+1
  6824  0F31  3193  238F  318D   	fcall	___wmul
  6825  0F34  0020               	movlb	0	; select bank0
  6826  0F35  0831               	movf	?___wmul+1,w
  6827  0F36  0085               	movwf	5
  6828  0F37  0830               	movf	?___wmul,w
  6829  0F38  0084               	movwf	4
  6830  0F39  304F               	movlw	low (__powers_| (0+32768))
  6831  0F3A  0784               	addwf	4,f
  6832  0F3B  3090               	movlw	high (__powers_| (0+32768))
  6833  0F3C  3D85               	addwfc	5,f
  6834  0F3D  3F00               	moviw [0]fsr0
  6835  0F3E  00B9               	movwf	___ftmul@f2
  6836  0F3F  3F01               	moviw [1]fsr0
  6837  0F40  00BA               	movwf	___ftmul@f2+1
  6838  0F41  3F02               	moviw [2]fsr0
  6839  0F42  00BB               	movwf	___ftmul@f2+2
  6840  0F43  3189  21F6  318D   	fcall	___ftmul
  6841  0F46  0020               	movlb	0	; select bank0
  6842  0F47  0836               	movf	?___ftmul,w
  6843  0F48  00CB               	movwf	_scale$1276
  6844  0F49  0837               	movf	?___ftmul+1,w
  6845  0F4A  00CC               	movwf	_scale$1276+1
  6846  0F4B  0838               	movf	?___ftmul+2,w
  6847  0F4C  00CD               	movwf	_scale$1276+2
  6848                           
  6849                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6850  0F4D  084E               	movf	scale@scl,w
  6851  0F4E  00A2               	movwf	___awmod@dividend
  6852  0F4F  01A3               	clrf	___awmod@dividend+1
  6853  0F50  1BA2               	btfsc	___awmod@dividend,7
  6854  0F51  03A3               	decf	___awmod@dividend+1,f
  6855  0F52  300A               	movlw	10
  6856  0F53  00A0               	movwf	___awmod@divisor
  6857  0F54  3000               	movlw	0
  6858  0F55  00A1               	movwf	___awmod@divisor+1
  6859  0F56  3195  258B  318D   	fcall	___awmod
  6860  0F59  0020               	movlb	0	; select bank0
  6861  0F5A  0821               	movf	?___awmod+1,w
  6862  0F5B  00B1               	movwf	___wmul@multiplier+1
  6863  0F5C  0820               	movf	?___awmod,w
  6864  0F5D  00B0               	movwf	___wmul@multiplier
  6865  0F5E  3003               	movlw	3
  6866  0F5F  00B2               	movwf	___wmul@multiplicand
  6867  0F60  3000               	movlw	0
  6868  0F61  00B3               	movwf	___wmul@multiplicand+1
  6869  0F62  3193  238F  318D   	fcall	___wmul
  6870  0F65  0020               	movlb	0	; select bank0
  6871  0F66  0831               	movf	?___wmul+1,w
  6872  0F67  0085               	movwf	5
  6873  0F68  0830               	movf	?___wmul,w
  6874  0F69  0084               	movwf	4
  6875  0F6A  304F               	movlw	low (__powers_| (0+32768))
  6876  0F6B  0784               	addwf	4,f
  6877  0F6C  3090               	movlw	high (__powers_| (0+32768))
  6878  0F6D  3D85               	addwfc	5,f
  6879  0F6E  3F00               	moviw [0]fsr0
  6880  0F6F  00B6               	movwf	___ftmul@f1
  6881  0F70  3F01               	moviw [1]fsr0
  6882  0F71  00B7               	movwf	___ftmul@f1+1
  6883  0F72  3F02               	moviw [2]fsr0
  6884  0F73  00B8               	movwf	___ftmul@f1+2
  6885  0F74  084B               	movf	_scale$1276,w
  6886  0F75  00B9               	movwf	___ftmul@f2
  6887  0F76  084C               	movf	_scale$1276+1,w
  6888  0F77  00BA               	movwf	___ftmul@f2+1
  6889  0F78  084D               	movf	_scale$1276+2,w
  6890  0F79  00BB               	movwf	___ftmul@f2+2
  6891  0F7A  3189  21F6         	fcall	___ftmul
  6892  0F7C  0020               	movlb	0	; select bank0
  6893  0F7D  0836               	movf	?___ftmul,w
  6894  0F7E  00C6               	movwf	?_scale
  6895  0F7F  0837               	movf	?___ftmul+1,w
  6896  0F80  00C7               	movwf	?_scale+1
  6897  0F81  0838               	movf	?___ftmul+2,w
  6898  0F82  00C8               	movwf	?_scale+2
  6899  0F83  0008               	return
  6900  0F84                     l2462:	
  6901                           
  6902                           ;doprnt.c: 438: else if(scl > 10)
  6903  0F84  084E               	movf	scale@scl,w
  6904  0F85  3A80               	xorlw	128
  6905  0F86  3E75               	addlw	-139
  6906  0F87  1C03               	skipc
  6907  0F88  2FE3               	goto	l2468
  6908                           
  6909                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6910  0F89  084E               	movf	scale@scl,w
  6911  0F8A  00A2               	movwf	___awmod@dividend
  6912  0F8B  01A3               	clrf	___awmod@dividend+1
  6913  0F8C  1BA2               	btfsc	___awmod@dividend,7
  6914  0F8D  03A3               	decf	___awmod@dividend+1,f
  6915  0F8E  300A               	movlw	10
  6916  0F8F  00A0               	movwf	___awmod@divisor
  6917  0F90  3000               	movlw	0
  6918  0F91  00A1               	movwf	___awmod@divisor+1
  6919  0F92  3195  258B  318D   	fcall	___awmod
  6920  0F95  0020               	movlb	0	; select bank0
  6921  0F96  0821               	movf	?___awmod+1,w
  6922  0F97  00B1               	movwf	___wmul@multiplier+1
  6923  0F98  0820               	movf	?___awmod,w
  6924  0F99  00B0               	movwf	___wmul@multiplier
  6925  0F9A  3003               	movlw	3
  6926  0F9B  00B2               	movwf	___wmul@multiplicand
  6927  0F9C  3000               	movlw	0
  6928  0F9D  00B3               	movwf	___wmul@multiplicand+1
  6929  0F9E  3193  238F  318D   	fcall	___wmul
  6930  0FA1  0020               	movlb	0	; select bank0
  6931  0FA2  0831               	movf	?___wmul+1,w
  6932  0FA3  0085               	movwf	5
  6933  0FA4  0830               	movf	?___wmul,w
  6934  0FA5  0084               	movwf	4
  6935  0FA6  304F               	movlw	low (__powers_| (0+32768))
  6936  0FA7  0784               	addwf	4,f
  6937  0FA8  3090               	movlw	high (__powers_| (0+32768))
  6938  0FA9  3D85               	addwfc	5,f
  6939  0FAA  3F00               	moviw [0]fsr0
  6940  0FAB  00B6               	movwf	___ftmul@f1
  6941  0FAC  3F01               	moviw [1]fsr0
  6942  0FAD  00B7               	movwf	___ftmul@f1+1
  6943  0FAE  3F02               	moviw [2]fsr0
  6944  0FAF  00B8               	movwf	___ftmul@f1+2
  6945  0FB0  300A               	movlw	10
  6946  0FB1  00A7               	movwf	___awdiv@divisor
  6947  0FB2  3000               	movlw	0
  6948  0FB3  00A8               	movwf	___awdiv@divisor+1
  6949  0FB4  084E               	movf	scale@scl,w
  6950  0FB5  00A9               	movwf	___awdiv@dividend
  6951  0FB6  01AA               	clrf	___awdiv@dividend+1
  6952  0FB7  1BA9               	btfsc	___awdiv@dividend,7
  6953  0FB8  03AA               	decf	___awdiv@dividend+1,f
  6954  0FB9  3196  266F  318D   	fcall	___awdiv
  6955  0FBC  0020               	movlb	0	; select bank0
  6956  0FBD  0827               	movf	?___awdiv,w
  6957  0FBE  3E09               	addlw	9
  6958  0FBF  00B0               	movwf	___wmul@multiplier
  6959  0FC0  3000               	movlw	0
  6960  0FC1  3D28               	addwfc	?___awdiv+1,w
  6961  0FC2  00B1               	movwf	___wmul@multiplier+1
  6962  0FC3  3003               	movlw	3
  6963  0FC4  00B2               	movwf	___wmul@multiplicand
  6964  0FC5  3000               	movlw	0
  6965  0FC6  00B3               	movwf	___wmul@multiplicand+1
  6966  0FC7  3193  238F  318D   	fcall	___wmul
  6967  0FCA  0020               	movlb	0	; select bank0
  6968  0FCB  0831               	movf	?___wmul+1,w
  6969  0FCC  0085               	movwf	5
  6970  0FCD  0830               	movf	?___wmul,w
  6971  0FCE  0084               	movwf	4
  6972  0FCF  304F               	movlw	low (__powers_| (0+32768))
  6973  0FD0  0784               	addwf	4,f
  6974  0FD1  3090               	movlw	high (__powers_| (0+32768))
  6975  0FD2  3D85               	addwfc	5,f
  6976  0FD3  3F00               	moviw [0]fsr0
  6977  0FD4  00B9               	movwf	___ftmul@f2
  6978  0FD5  3F01               	moviw [1]fsr0
  6979  0FD6  00BA               	movwf	___ftmul@f2+1
  6980  0FD7  3F02               	moviw [2]fsr0
  6981  0FD8  00BB               	movwf	___ftmul@f2+2
  6982  0FD9  3189  21F6         	fcall	___ftmul
  6983  0FDB  0020               	movlb	0	; select bank0
  6984  0FDC  0836               	movf	?___ftmul,w
  6985  0FDD  00C6               	movwf	?_scale
  6986  0FDE  0837               	movf	?___ftmul+1,w
  6987  0FDF  00C7               	movwf	?_scale+1
  6988  0FE0  0838               	movf	?___ftmul+2,w
  6989  0FE1  00C8               	movwf	?_scale+2
  6990  0FE2  0008               	return
  6991  0FE3                     l2468:	
  6992                           
  6993                           ;doprnt.c: 440: return _powers_[scl];
  6994  0FE3  084E               	movf	scale@scl,w
  6995  0FE4  00C9               	movwf	??_scale
  6996  0FE5  01CA               	clrf	??_scale+1
  6997  0FE6  0849               	movf	??_scale,w
  6998  0FE7  00B0               	movwf	___wmul@multiplier
  6999  0FE8  084A               	movf	??_scale+1,w
  7000  0FE9  00B1               	movwf	___wmul@multiplier+1
  7001  0FEA  3003               	movlw	3
  7002  0FEB  00B2               	movwf	___wmul@multiplicand
  7003  0FEC  3000               	movlw	0
  7004  0FED  00B3               	movwf	___wmul@multiplicand+1
  7005  0FEE  3193  238F         	fcall	___wmul
  7006  0FF0  0020               	movlb	0	; select bank0
  7007  0FF1  0831               	movf	?___wmul+1,w
  7008  0FF2  0085               	movwf	5
  7009  0FF3  0830               	movf	?___wmul,w
  7010  0FF4  0084               	movwf	4
  7011  0FF5  304F               	movlw	low (__powers_| (0+32768))
  7012  0FF6  0784               	addwf	4,f
  7013  0FF7  3090               	movlw	high (__powers_| (0+32768))
  7014  0FF8  3D85               	addwfc	5,f
  7015  0FF9  3F00               	moviw [0]fsr0
  7016  0FFA  00C6               	movwf	?_scale
  7017  0FFB  3F01               	moviw [1]fsr0
  7018  0FFC  00C7               	movwf	?_scale+1
  7019  0FFD  3F02               	moviw [2]fsr0
  7020  0FFE  00C8               	movwf	?_scale+2
  7021  0FFF  0008               	return
  7022  1000                     __end_of_scale:	
  7023                           
  7024                           	psect	text30
  7025  1251                     __ptext30:	
  7026 ;; *************** function _putch *****************
  7027 ;; Defined at:
  7028 ;;		line 114 in file "UART.c"
  7029 ;; Parameters:    Size  Location     Type
  7030 ;;  txData          1    wreg     unsigned char 
  7031 ;; Auto vars:     Size  Location     Type
  7032 ;;  txData          1   13[BANK0 ] unsigned char 
  7033 ;; Return value:  Size  Location     Type
  7034 ;;                  1    wreg      void 
  7035 ;; Registers used:
  7036 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7037 ;; Tracked objects:
  7038 ;;		On entry : 0/0
  7039 ;;		On exit  : 0/0
  7040 ;;		Unchanged: 0/0
  7041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7043 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7045 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7046 ;;Total ram usage:        1 bytes
  7047 ;; Hardware stack levels used:    1
  7048 ;; Hardware stack levels required when called:    7
  7049 ;; This function calls:
  7050 ;;		_Send_put
  7051 ;; This function is called by:
  7052 ;;		_printf
  7053 ;; This function uses a non-reentrant model
  7054 ;;
  7055                           
  7056                           
  7057                           ;psect for function _putch
  7058  1251                     _putch:	
  7059                           
  7060                           ;incstack = 0
  7061                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7062                           ;putch@txData stored from wreg
  7063  1251  0020               	movlb	0	; select bank0
  7064  1252  00AD               	movwf	putch@txData
  7065                           
  7066                           ;UART.c: 115: Send_put(txData);
  7067  1253  082D               	movf	putch@txData,w
  7068  1254  3193  2346         	fcall	_Send_put
  7069  1256  0008               	return
  7070  1257                     __end_of_putch:	
  7071                           
  7072                           	psect	text31
  7073  1346                     __ptext31:	
  7074 ;; *************** function _Send_put *****************
  7075 ;; Defined at:
  7076 ;;		line 97 in file "UART.c"
  7077 ;; Parameters:    Size  Location     Type
  7078 ;;  _data           1    wreg     unsigned char 
  7079 ;; Auto vars:     Size  Location     Type
  7080 ;;  _data           1   12[BANK0 ] unsigned char 
  7081 ;; Return value:  Size  Location     Type
  7082 ;;                  1    wreg      void 
  7083 ;; Registers used:
  7084 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7085 ;; Tracked objects:
  7086 ;;		On entry : 0/0
  7087 ;;		On exit  : 0/0
  7088 ;;		Unchanged: 0/0
  7089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7091 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7092 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7093 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7094 ;;Total ram usage:        2 bytes
  7095 ;; Hardware stack levels used:    1
  7096 ;; Hardware stack levels required when called:    6
  7097 ;; This function calls:
  7098 ;;		_UART_buff_get
  7099 ;;		_UART_buff_put
  7100 ;; This function is called by:
  7101 ;;		_putch
  7102 ;; This function uses a non-reentrant model
  7103 ;;
  7104                           
  7105                           
  7106                           ;psect for function _Send_put
  7107  1346                     _Send_put:	
  7108                           
  7109                           ;incstack = 0
  7110                           ; Regs used in _Send_put: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7111                           ;Send_put@_data stored from wreg
  7112  1346  0020               	movlb	0	; select bank0
  7113  1347  00AC               	movwf	Send_put@_data
  7114                           
  7115                           ;UART.c: 98: UART_buff_put(&output_buffer, _data);
  7116  1348  082C               	movf	Send_put@_data,w
  7117  1349  00AB               	movwf	??_Send_put
  7118  134A  082B               	movf	??_Send_put,w
  7119  134B  00A6               	movwf	UART_buff_put@c
  7120  134C  303A               	movlw	(low (_output_buffer| (0+256)))& (0+255)
  7121  134D  3188  20BD  3193   	fcall	_UART_buff_put
  7122                           
  7123                           ;UART.c: 99: if (Transmit_stall == 1) {
  7124  1350  0021               	movlb	1	; select bank1
  7125  1351  036E               	decf	_Transmit_stall^(0+128),w
  7126  1352  1D03               	btfss	3,2
  7127  1353  0008               	return
  7128                           
  7129                           ;UART.c: 100: Transmit_stall = 0;
  7130  1354  01EE               	clrf	_Transmit_stall^(0+128)
  7131                           
  7132                           ;UART.c: 101: TXREG = UART_buff_get(&output_buffer);
  7133  1355  303A               	movlw	(low (_output_buffer| (0+256)))& (0+255)
  7134  1356  3196  261E         	fcall	_UART_buff_get
  7135  1358  0023               	movlb	3	; select bank3
  7136  1359  009A               	movwf	26	;volatile
  7137                           
  7138                           ;UART.c: 102: PIE1bits.TXIE = 1;
  7139  135A  0021               	movlb	1	; select bank1
  7140  135B  1611               	bsf	17,4	;volatile
  7141  135C  0008               	return
  7142  135D                     __end_of_Send_put:	
  7143                           
  7144                           	psect	text32
  7145  08BD                     __ptext32:	
  7146 ;; *************** function _UART_buff_put *****************
  7147 ;; Defined at:
  7148 ;;		line 60 in file "UART.c"
  7149 ;; Parameters:    Size  Location     Type
  7150 ;;  _this           1    wreg     PTR struct UART_ring_buf
  7151 ;;		 -> output_buffer(26), input_buffer(26), 
  7152 ;;  c               1    6[BANK0 ] unsigned char 
  7153 ;; Auto vars:     Size  Location     Type
  7154 ;;  _this           1   10[BANK0 ] PTR struct UART_ring_buf
  7155 ;;		 -> output_buffer(26), input_buffer(26), 
  7156 ;; Return value:  Size  Location     Type
  7157 ;;                  1    wreg      void 
  7158 ;; Registers used:
  7159 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7160 ;; Tracked objects:
  7161 ;;		On entry : 0/0
  7162 ;;		On exit  : 0/0
  7163 ;;		Unchanged: 0/0
  7164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7165 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7166 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7167 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7168 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7169 ;;Total ram usage:        5 bytes
  7170 ;; Hardware stack levels used:    1
  7171 ;; Hardware stack levels required when called:    5
  7172 ;; This function calls:
  7173 ;;		_UART_buff_modulo_inc
  7174 ;; This function is called by:
  7175 ;;		_Send_put
  7176 ;; This function uses a non-reentrant model
  7177 ;;
  7178                           
  7179                           
  7180                           ;psect for function _UART_buff_put
  7181  08BD                     _UART_buff_put:	
  7182                           
  7183                           ;incstack = 0
  7184                           ; Regs used in _UART_buff_put: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7185                           ;UART_buff_put@_this stored from wreg
  7186  08BD  0020               	movlb	0	; select bank0
  7187  08BE  00AA               	movwf	UART_buff_put@_this
  7188                           
  7189                           ;UART.c: 61: if (_this->count < 20) {
  7190  08BF  082A               	movf	UART_buff_put@_this,w
  7191  08C0  3E18               	addlw	24
  7192  08C1  0086               	movwf	6
  7193  08C2  3001               	movlw	1	; select bank2/3
  7194  08C3  0087               	movwf	7
  7195  08C4  3F40               	moviw [0]fsr1
  7196  08C5  00A7               	movwf	??_UART_buff_put
  7197  08C6  3F41               	moviw [1]fsr1
  7198  08C7  00A8               	movwf	??_UART_buff_put+1
  7199  08C8  0828               	movf	??_UART_buff_put+1,w
  7200  08C9  3A80               	xorlw	128
  7201  08CA  00A9               	movwf	??_UART_buff_put+2
  7202  08CB  3080               	movlw	128
  7203  08CC  0229               	subwf	??_UART_buff_put+2,w
  7204  08CD  1D03               	skipz
  7205  08CE  28D1               	goto	u2205
  7206  08CF  3014               	movlw	20
  7207  08D0  0227               	subwf	??_UART_buff_put,w
  7208  08D1                     u2205:	
  7209  08D1  1803               	skipnc
  7210  08D2  2908               	goto	l2130
  7211                           
  7212                           ;UART.c: 62: _this->buf[_this->head] = c;
  7213  08D3  0020               	movlb	0	; select bank0
  7214  08D4  0826               	movf	UART_buff_put@c,w
  7215  08D5  00A7               	movwf	??_UART_buff_put
  7216  08D6  082A               	movf	UART_buff_put@_this,w
  7217  08D7  3E14               	addlw	20
  7218  08D8  0086               	movwf	6
  7219  08D9  3001               	movlw	1	; select bank2/3
  7220  08DA  0087               	movwf	7
  7221  08DB  0801               	movf	1,w
  7222  08DC  072A               	addwf	UART_buff_put@_this,w
  7223  08DD  00A8               	movwf	??_UART_buff_put+1
  7224  08DE  0828               	movf	??_UART_buff_put+1,w
  7225  08DF  0086               	movwf	6
  7226  08E0  3001               	movlw	1	; select bank2/3
  7227  08E1  0087               	movwf	7
  7228  08E2  0827               	movf	??_UART_buff_put,w
  7229  08E3  0081               	movwf	1
  7230                           
  7231                           ;UART.c: 63: _this->head = UART_buff_modulo_inc(_this->head, 20);
  7232  08E4  082A               	movf	UART_buff_put@_this,w
  7233  08E5  3E14               	addlw	20
  7234  08E6  0086               	movwf	6
  7235  08E7  3001               	movlw	1	; select bank2/3
  7236  08E8  0087               	movwf	7
  7237  08E9  3F40               	moviw [0]fsr1
  7238  08EA  00A0               	movwf	UART_buff_modulo_inc@value
  7239  08EB  3F41               	moviw [1]fsr1
  7240  08EC  00A1               	movwf	UART_buff_modulo_inc@value+1
  7241  08ED  3014               	movlw	20
  7242  08EE  00A2               	movwf	UART_buff_modulo_inc@modulus
  7243  08EF  3000               	movlw	0
  7244  08F0  00A3               	movwf	UART_buff_modulo_inc@modulus+1
  7245  08F1  3193  231A         	fcall	_UART_buff_modulo_inc
  7246  08F3  0020               	movlb	0	; select bank0
  7247  08F4  082A               	movf	UART_buff_put@_this,w
  7248  08F5  3E14               	addlw	20
  7249  08F6  0086               	movwf	6
  7250  08F7  3001               	movlw	1	; select bank2/3
  7251  08F8  0087               	movwf	7
  7252  08F9  0820               	movf	?_UART_buff_modulo_inc,w
  7253  08FA  3FC0               	movwi [0]fsr1
  7254  08FB  0821               	movf	?_UART_buff_modulo_inc+1,w
  7255  08FC  3FC1               	movwi [1]fsr1
  7256                           
  7257                           ;UART.c: 64: ++_this->count;
  7258  08FD  082A               	movf	UART_buff_put@_this,w
  7259  08FE  3E18               	addlw	24
  7260  08FF  0086               	movwf	6
  7261  0900  3001               	movlw	1	; select bank2/3
  7262  0901  0087               	movwf	7
  7263  0902  3001               	movlw	1
  7264  0903  0781               	addwf	1,f
  7265  0904  3141               	addfsr 1,1
  7266  0905  1803               	skipnc
  7267  0906  0A81               	incf	1,f
  7268                           
  7269                           ;UART.c: 65: } else {
  7270  0907  0008               	return
  7271  0908                     l2130:	
  7272                           
  7273                           ;UART.c: 66: _this->buf[_this->head] = c;
  7274  0908  0020               	movlb	0	; select bank0
  7275  0909  0826               	movf	UART_buff_put@c,w
  7276  090A  00A7               	movwf	??_UART_buff_put
  7277  090B  082A               	movf	UART_buff_put@_this,w
  7278  090C  3E14               	addlw	20
  7279  090D  0086               	movwf	6
  7280  090E  3001               	movlw	1	; select bank2/3
  7281  090F  0087               	movwf	7
  7282  0910  0801               	movf	1,w
  7283  0911  072A               	addwf	UART_buff_put@_this,w
  7284  0912  00A8               	movwf	??_UART_buff_put+1
  7285  0913  0828               	movf	??_UART_buff_put+1,w
  7286  0914  0086               	movwf	6
  7287  0915  3001               	movlw	1	; select bank2/3
  7288  0916  0087               	movwf	7
  7289  0917  0827               	movf	??_UART_buff_put,w
  7290  0918  0081               	movwf	1
  7291                           
  7292                           ;UART.c: 67: _this->head = UART_buff_modulo_inc(_this->head, 20);
  7293  0919  082A               	movf	UART_buff_put@_this,w
  7294  091A  3E14               	addlw	20
  7295  091B  0086               	movwf	6
  7296  091C  3001               	movlw	1	; select bank2/3
  7297  091D  0087               	movwf	7
  7298  091E  3F40               	moviw [0]fsr1
  7299  091F  00A0               	movwf	UART_buff_modulo_inc@value
  7300  0920  3F41               	moviw [1]fsr1
  7301  0921  00A1               	movwf	UART_buff_modulo_inc@value+1
  7302  0922  3014               	movlw	20
  7303  0923  00A2               	movwf	UART_buff_modulo_inc@modulus
  7304  0924  3000               	movlw	0
  7305  0925  00A3               	movwf	UART_buff_modulo_inc@modulus+1
  7306  0926  3193  231A  3188   	fcall	_UART_buff_modulo_inc
  7307  0929  0020               	movlb	0	; select bank0
  7308  092A  082A               	movf	UART_buff_put@_this,w
  7309  092B  3E14               	addlw	20
  7310  092C  0086               	movwf	6
  7311  092D  3001               	movlw	1	; select bank2/3
  7312  092E  0087               	movwf	7
  7313  092F  0820               	movf	?_UART_buff_modulo_inc,w
  7314  0930  3FC0               	movwi [0]fsr1
  7315  0931  0821               	movf	?_UART_buff_modulo_inc+1,w
  7316  0932  3FC1               	movwi [1]fsr1
  7317                           
  7318                           ;UART.c: 68: _this->tail = UART_buff_modulo_inc(_this->tail, 20);
  7319  0933  082A               	movf	UART_buff_put@_this,w
  7320  0934  3E16               	addlw	22
  7321  0935  0086               	movwf	6
  7322  0936  3001               	movlw	1	; select bank2/3
  7323  0937  0087               	movwf	7
  7324  0938  3F40               	moviw [0]fsr1
  7325  0939  00A0               	movwf	UART_buff_modulo_inc@value
  7326  093A  3F41               	moviw [1]fsr1
  7327  093B  00A1               	movwf	UART_buff_modulo_inc@value+1
  7328  093C  3014               	movlw	20
  7329  093D  00A2               	movwf	UART_buff_modulo_inc@modulus
  7330  093E  3000               	movlw	0
  7331  093F  00A3               	movwf	UART_buff_modulo_inc@modulus+1
  7332  0940  3193  231A         	fcall	_UART_buff_modulo_inc
  7333  0942  0020               	movlb	0	; select bank0
  7334  0943  082A               	movf	UART_buff_put@_this,w
  7335  0944  3E16               	addlw	22
  7336  0945  0086               	movwf	6
  7337  0946  3001               	movlw	1	; select bank2/3
  7338  0947  0087               	movwf	7
  7339  0948  0820               	movf	?_UART_buff_modulo_inc,w
  7340  0949  3FC0               	movwi [0]fsr1
  7341  094A  0821               	movf	?_UART_buff_modulo_inc+1,w
  7342  094B  3FC1               	movwi [1]fsr1
  7343  094C  0008               	return
  7344  094D                     __end_of_UART_buff_put:	
  7345                           
  7346                           	psect	text33
  7347  161E                     __ptext33:	
  7348 ;; *************** function _UART_buff_get *****************
  7349 ;; Defined at:
  7350 ;;		line 73 in file "UART.c"
  7351 ;; Parameters:    Size  Location     Type
  7352 ;;  _this           1    wreg     PTR struct UART_ring_buf
  7353 ;;		 -> output_buffer(26), input_buffer(26), 
  7354 ;; Auto vars:     Size  Location     Type
  7355 ;;  _this           1   10[BANK0 ] PTR struct UART_ring_buf
  7356 ;;		 -> output_buffer(26), input_buffer(26), 
  7357 ;;  c               1    9[BANK0 ] unsigned char 
  7358 ;; Return value:  Size  Location     Type
  7359 ;;                  1    wreg      unsigned char 
  7360 ;; Registers used:
  7361 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7362 ;; Tracked objects:
  7363 ;;		On entry : 0/0
  7364 ;;		On exit  : 0/0
  7365 ;;		Unchanged: 0/0
  7366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7368 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7369 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7370 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7371 ;;Total ram usage:        5 bytes
  7372 ;; Hardware stack levels used:    1
  7373 ;; Hardware stack levels required when called:    5
  7374 ;; This function calls:
  7375 ;;		_UART_buff_modulo_inc
  7376 ;; This function is called by:
  7377 ;;		_Send_put
  7378 ;;		_Receive_get
  7379 ;; This function uses a non-reentrant model
  7380 ;;
  7381                           
  7382                           
  7383                           ;psect for function _UART_buff_get
  7384  161E                     _UART_buff_get:	
  7385                           
  7386                           ;incstack = 0
  7387                           ; Regs used in _UART_buff_get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7388                           ;UART_buff_get@_this stored from wreg
  7389  161E  0020               	movlb	0	; select bank0
  7390  161F  00AA               	movwf	UART_buff_get@_this
  7391                           
  7392                           ;UART.c: 74: unsigned char c;
  7393                           ;UART.c: 75: if (_this->count > 0) {
  7394  1620  082A               	movf	UART_buff_get@_this,w
  7395  1621  3E18               	addlw	24
  7396  1622  0086               	movwf	6
  7397  1623  3001               	movlw	1	; select bank2/3
  7398  1624  0087               	movwf	7
  7399  1625  3F40               	moviw [0]fsr1
  7400  1626  00A6               	movwf	??_UART_buff_get
  7401  1627  3F41               	moviw [1]fsr1
  7402  1628  00A7               	movwf	??_UART_buff_get+1
  7403  1629  0827               	movf	??_UART_buff_get+1,w
  7404  162A  3A80               	xorlw	128
  7405  162B  00A8               	movwf	??_UART_buff_get+2
  7406  162C  3080               	movlw	128
  7407  162D  0228               	subwf	??_UART_buff_get+2,w
  7408  162E  1D03               	skipz
  7409  162F  2E32               	goto	u2215
  7410  1630  3001               	movlw	1
  7411  1631  0226               	subwf	??_UART_buff_get,w
  7412  1632                     u2215:	
  7413  1632  1C03               	skipc
  7414  1633  2E6B               	goto	l2144
  7415                           
  7416                           ;UART.c: 76: c = _this->buf[_this->tail];
  7417  1634  0020               	movlb	0	; select bank0
  7418  1635  082A               	movf	UART_buff_get@_this,w
  7419  1636  3E16               	addlw	22
  7420  1637  0086               	movwf	6
  7421  1638  3001               	movlw	1	; select bank2/3
  7422  1639  0087               	movwf	7
  7423  163A  0801               	movf	1,w
  7424  163B  072A               	addwf	UART_buff_get@_this,w
  7425  163C  00A6               	movwf	??_UART_buff_get
  7426  163D  0826               	movf	??_UART_buff_get,w
  7427  163E  0086               	movwf	6
  7428  163F  3001               	movlw	1	; select bank2/3
  7429  1640  0087               	movwf	7
  7430  1641  0801               	movf	1,w
  7431  1642  00A7               	movwf	??_UART_buff_get+1
  7432  1643  0827               	movf	??_UART_buff_get+1,w
  7433  1644  00A9               	movwf	UART_buff_get@c
  7434                           
  7435                           ;UART.c: 77: _this->tail = UART_buff_modulo_inc(_this->tail, 20);
  7436  1645  082A               	movf	UART_buff_get@_this,w
  7437  1646  3E16               	addlw	22
  7438  1647  0086               	movwf	6
  7439  1648  3001               	movlw	1	; select bank2/3
  7440  1649  0087               	movwf	7
  7441  164A  3F40               	moviw [0]fsr1
  7442  164B  00A0               	movwf	UART_buff_modulo_inc@value
  7443  164C  3F41               	moviw [1]fsr1
  7444  164D  00A1               	movwf	UART_buff_modulo_inc@value+1
  7445  164E  3014               	movlw	20
  7446  164F  00A2               	movwf	UART_buff_modulo_inc@modulus
  7447  1650  3000               	movlw	0
  7448  1651  00A3               	movwf	UART_buff_modulo_inc@modulus+1
  7449  1652  3193  231A  3196   	fcall	_UART_buff_modulo_inc
  7450  1655  0020               	movlb	0	; select bank0
  7451  1656  082A               	movf	UART_buff_get@_this,w
  7452  1657  3E16               	addlw	22
  7453  1658  0086               	movwf	6
  7454  1659  3001               	movlw	1	; select bank2/3
  7455  165A  0087               	movwf	7
  7456  165B  0820               	movf	?_UART_buff_modulo_inc,w
  7457  165C  3FC0               	movwi [0]fsr1
  7458  165D  0821               	movf	?_UART_buff_modulo_inc+1,w
  7459  165E  3FC1               	movwi [1]fsr1
  7460                           
  7461                           ;UART.c: 78: --_this->count;
  7462  165F  082A               	movf	UART_buff_get@_this,w
  7463  1660  3E18               	addlw	24
  7464  1661  0086               	movwf	6
  7465  1662  3001               	movlw	1	; select bank2/3
  7466  1663  0087               	movwf	7
  7467  1664  30FF               	movlw	255
  7468  1665  0781               	addwf	1,f
  7469  1666  3141               	addfsr 1,1
  7470  1667  30FF               	movlw	255
  7471  1668  3D81               	addwfc	1,f
  7472  1669  317F               	addfsr 1,-1
  7473                           
  7474                           ;UART.c: 79: } else {
  7475  166A  2E6D               	goto	l2146
  7476  166B                     l2144:	
  7477                           
  7478                           ;UART.c: 80: c = 0;
  7479  166B  0020               	movlb	0	; select bank0
  7480  166C  01A9               	clrf	UART_buff_get@c
  7481  166D                     l2146:	
  7482                           
  7483                           ;UART.c: 81: }
  7484                           ;UART.c: 82: return (c);
  7485  166D  0829               	movf	UART_buff_get@c,w
  7486  166E  0008               	return
  7487  166F                     __end_of_UART_buff_get:	
  7488                           
  7489                           	psect	text34
  7490  131A                     __ptext34:	
  7491 ;; *************** function _UART_buff_modulo_inc *****************
  7492 ;; Defined at:
  7493 ;;		line 89 in file "UART.c"
  7494 ;; Parameters:    Size  Location     Type
  7495 ;;  value           2    0[BANK0 ] const unsigned int 
  7496 ;;  modulus         2    2[BANK0 ] const unsigned int 
  7497 ;; Auto vars:     Size  Location     Type
  7498 ;;  my_value        2    4[BANK0 ] unsigned int 
  7499 ;; Return value:  Size  Location     Type
  7500 ;;                  2    0[BANK0 ] unsigned int 
  7501 ;; Registers used:
  7502 ;;		wreg, status,2, status,0
  7503 ;; Tracked objects:
  7504 ;;		On entry : 0/0
  7505 ;;		On exit  : 0/0
  7506 ;;		Unchanged: 0/0
  7507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7508 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7509 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7511 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7512 ;;Total ram usage:        6 bytes
  7513 ;; Hardware stack levels used:    1
  7514 ;; Hardware stack levels required when called:    4
  7515 ;; This function calls:
  7516 ;;		Nothing
  7517 ;; This function is called by:
  7518 ;;		_UART_buff_put
  7519 ;;		_UART_buff_get
  7520 ;; This function uses a non-reentrant model
  7521 ;;
  7522                           
  7523                           
  7524                           ;psect for function _UART_buff_modulo_inc
  7525  131A                     _UART_buff_modulo_inc:	
  7526                           
  7527                           ;UART.c: 90: unsigned int my_value = value + 1;
  7528                           
  7529                           ;incstack = 0
  7530                           ; Regs used in _UART_buff_modulo_inc: [wreg+status,2+status,0]
  7531  131A  0020               	movlb	0	; select bank0
  7532  131B  0820               	movf	UART_buff_modulo_inc@value,w
  7533  131C  3E01               	addlw	1
  7534  131D  00A4               	movwf	UART_buff_modulo_inc@my_value
  7535  131E  3000               	movlw	0
  7536  131F  3D21               	addwfc	UART_buff_modulo_inc@value+1,w
  7537  1320  00A5               	movwf	UART_buff_modulo_inc@my_value+1
  7538                           
  7539                           ;UART.c: 91: if (my_value >= modulus) {
  7540  1321  0823               	movf	UART_buff_modulo_inc@modulus+1,w
  7541  1322  0225               	subwf	UART_buff_modulo_inc@my_value+1,w
  7542  1323  1D03               	skipz
  7543  1324  2B27               	goto	u2195
  7544  1325  0822               	movf	UART_buff_modulo_inc@modulus,w
  7545  1326  0224               	subwf	UART_buff_modulo_inc@my_value,w
  7546  1327                     u2195:	
  7547  1327  1C03               	skipc
  7548  1328  2B2B               	goto	l2118
  7549                           
  7550                           ;UART.c: 92: my_value = 0;
  7551  1329  01A4               	clrf	UART_buff_modulo_inc@my_value
  7552  132A  01A5               	clrf	UART_buff_modulo_inc@my_value+1
  7553  132B                     l2118:	
  7554                           
  7555                           ;UART.c: 93: }
  7556                           ;UART.c: 94: return (my_value);
  7557  132B  0825               	movf	UART_buff_modulo_inc@my_value+1,w
  7558  132C  00A1               	movwf	?_UART_buff_modulo_inc+1
  7559  132D  0824               	movf	UART_buff_modulo_inc@my_value,w
  7560  132E  00A0               	movwf	?_UART_buff_modulo_inc
  7561  132F  0008               	return
  7562  1330                     __end_of_UART_buff_modulo_inc:	
  7563                           
  7564                           	psect	text35
  7565  05C6                     __ptext35:	
  7566 ;; *************** function _fround *****************
  7567 ;; Defined at:
  7568 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  7569 ;; Parameters:    Size  Location     Type
  7570 ;;  prec            1    wreg     unsigned char 
  7571 ;; Auto vars:     Size  Location     Type
  7572 ;;  prec            1   51[BANK0 ] unsigned char 
  7573 ;; Return value:  Size  Location     Type
  7574 ;;                  3   38[BANK0 ] unsigned char 
  7575 ;; Registers used:
  7576 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7577 ;; Tracked objects:
  7578 ;;		On entry : 0/0
  7579 ;;		On exit  : 0/0
  7580 ;;		Unchanged: 0/0
  7581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7582 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7583 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7584 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7585 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7586 ;;Total ram usage:       14 bytes
  7587 ;; Hardware stack levels used:    1
  7588 ;; Hardware stack levels required when called:    6
  7589 ;; This function calls:
  7590 ;;		___awdiv
  7591 ;;		___awmod
  7592 ;;		___ftmul
  7593 ;;		___wmul
  7594 ;; This function is called by:
  7595 ;;		_printf
  7596 ;; This function uses a non-reentrant model
  7597 ;;
  7598                           
  7599                           
  7600                           ;psect for function _fround
  7601  05C6                     _fround:	
  7602                           
  7603                           ;incstack = 0
  7604                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7605                           ;fround@prec stored from wreg
  7606  05C6  0020               	movlb	0	; select bank0
  7607  05C7  00D3               	movwf	fround@prec
  7608                           
  7609                           ;doprnt.c: 413: if(prec>=110)
  7610  05C8  306E               	movlw	110
  7611  05C9  0253               	subwf	fround@prec,w
  7612  05CA  1C03               	skipc
  7613  05CB  2E87               	goto	l2420
  7614                           
  7615                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7616  05CC  300A               	movlw	10
  7617  05CD  00A7               	movwf	___awdiv@divisor
  7618  05CE  3000               	movlw	0
  7619  05CF  00A8               	movwf	___awdiv@divisor+1
  7620  05D0  0853               	movf	fround@prec,w
  7621  05D1  00C9               	movwf	??_fround
  7622  05D2  01CA               	clrf	??_fround+1
  7623  05D3  0849               	movf	??_fround,w
  7624  05D4  00A2               	movwf	___awmod@dividend
  7625  05D5  084A               	movf	??_fround+1,w
  7626  05D6  00A3               	movwf	___awmod@dividend+1
  7627  05D7  3064               	movlw	100
  7628  05D8  00A0               	movwf	___awmod@divisor
  7629  05D9  3000               	movlw	0
  7630  05DA  00A1               	movwf	___awmod@divisor+1
  7631  05DB  3195  258B  3185   	fcall	___awmod
  7632  05DE  0020               	movlb	0	; select bank0
  7633  05DF  0821               	movf	?___awmod+1,w
  7634  05E0  00AA               	movwf	___awdiv@dividend+1
  7635  05E1  0820               	movf	?___awmod,w
  7636  05E2  00A9               	movwf	___awdiv@dividend
  7637  05E3  3196  266F  3185   	fcall	___awdiv
  7638  05E6  0020               	movlb	0	; select bank0
  7639  05E7  0827               	movf	?___awdiv,w
  7640  05E8  3E09               	addlw	9
  7641  05E9  00B0               	movwf	___wmul@multiplier
  7642  05EA  3000               	movlw	0
  7643  05EB  3D28               	addwfc	?___awdiv+1,w
  7644  05EC  00B1               	movwf	___wmul@multiplier+1
  7645  05ED  3003               	movlw	3
  7646  05EE  00B2               	movwf	___wmul@multiplicand
  7647  05EF  3000               	movlw	0
  7648  05F0  00B3               	movwf	___wmul@multiplicand+1
  7649  05F1  3193  238F  3185   	fcall	___wmul
  7650  05F4  0020               	movlb	0	; select bank0
  7651  05F5  0831               	movf	?___wmul+1,w
  7652  05F6  0085               	movwf	5
  7653  05F7  0830               	movf	?___wmul,w
  7654  05F8  0084               	movwf	4
  7655  05F9  3028               	movlw	low (__npowers_| (0+32768))
  7656  05FA  0784               	addwf	4,f
  7657  05FB  3090               	movlw	high (__npowers_| (0+32768))
  7658  05FC  3D85               	addwfc	5,f
  7659  05FD  3F00               	moviw [0]fsr0
  7660  05FE  00B6               	movwf	___ftmul@f1
  7661  05FF  3F01               	moviw [1]fsr0
  7662  0600  00B7               	movwf	___ftmul@f1+1
  7663  0601  3F02               	moviw [2]fsr0
  7664  0602  00B8               	movwf	___ftmul@f1+2
  7665  0603  3064               	movlw	100
  7666  0604  00A7               	movwf	___awdiv@divisor
  7667  0605  3000               	movlw	0
  7668  0606  00A8               	movwf	___awdiv@divisor+1
  7669  0607  0853               	movf	fround@prec,w
  7670  0608  00CB               	movwf	??_fround+2
  7671  0609  01CC               	clrf	??_fround+3
  7672  060A  084B               	movf	??_fround+2,w
  7673  060B  00A9               	movwf	___awdiv@dividend
  7674  060C  084C               	movf	??_fround+3,w
  7675  060D  00AA               	movwf	___awdiv@dividend+1
  7676  060E  3196  266F  3185   	fcall	___awdiv
  7677  0611  0020               	movlb	0	; select bank0
  7678  0612  0827               	movf	?___awdiv,w
  7679  0613  3E12               	addlw	18
  7680  0614  00B0               	movwf	___wmul@multiplier
  7681  0615  3000               	movlw	0
  7682  0616  3D28               	addwfc	?___awdiv+1,w
  7683  0617  00B1               	movwf	___wmul@multiplier+1
  7684  0618  3003               	movlw	3
  7685  0619  00B2               	movwf	___wmul@multiplicand
  7686  061A  3000               	movlw	0
  7687  061B  00B3               	movwf	___wmul@multiplicand+1
  7688  061C  3193  238F  3185   	fcall	___wmul
  7689  061F  0020               	movlb	0	; select bank0
  7690  0620  0831               	movf	?___wmul+1,w
  7691  0621  0085               	movwf	5
  7692  0622  0830               	movf	?___wmul,w
  7693  0623  0084               	movwf	4
  7694  0624  3028               	movlw	low (__npowers_| (0+32768))
  7695  0625  0784               	addwf	4,f
  7696  0626  3090               	movlw	high (__npowers_| (0+32768))
  7697  0627  3D85               	addwfc	5,f
  7698  0628  3F00               	moviw [0]fsr0
  7699  0629  00B9               	movwf	___ftmul@f2
  7700  062A  3F01               	moviw [1]fsr0
  7701  062B  00BA               	movwf	___ftmul@f2+1
  7702  062C  3F02               	moviw [2]fsr0
  7703  062D  00BB               	movwf	___ftmul@f2+2
  7704  062E  3189  21F6  3185   	fcall	___ftmul
  7705  0631  0020               	movlb	0	; select bank0
  7706  0632  0836               	movf	?___ftmul,w
  7707  0633  00D0               	movwf	_fround$1274
  7708  0634  0837               	movf	?___ftmul+1,w
  7709  0635  00D1               	movwf	_fround$1274+1
  7710  0636  0838               	movf	?___ftmul+2,w
  7711  0637  00D2               	movwf	_fround$1274+2
  7712                           
  7713                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7714  0638  0853               	movf	fround@prec,w
  7715  0639  00C9               	movwf	??_fround
  7716  063A  01CA               	clrf	??_fround+1
  7717  063B  0849               	movf	??_fround,w
  7718  063C  00A2               	movwf	___awmod@dividend
  7719  063D  084A               	movf	??_fround+1,w
  7720  063E  00A3               	movwf	___awmod@dividend+1
  7721  063F  300A               	movlw	10
  7722  0640  00A0               	movwf	___awmod@divisor
  7723  0641  3000               	movlw	0
  7724  0642  00A1               	movwf	___awmod@divisor+1
  7725  0643  3195  258B  3185   	fcall	___awmod
  7726  0646  0020               	movlb	0	; select bank0
  7727  0647  0821               	movf	?___awmod+1,w
  7728  0648  00B1               	movwf	___wmul@multiplier+1
  7729  0649  0820               	movf	?___awmod,w
  7730  064A  00B0               	movwf	___wmul@multiplier
  7731  064B  3003               	movlw	3
  7732  064C  00B2               	movwf	___wmul@multiplicand
  7733  064D  3000               	movlw	0
  7734  064E  00B3               	movwf	___wmul@multiplicand+1
  7735  064F  3193  238F  3185   	fcall	___wmul
  7736  0652  0020               	movlb	0	; select bank0
  7737  0653  0831               	movf	?___wmul+1,w
  7738  0654  0085               	movwf	5
  7739  0655  0830               	movf	?___wmul,w
  7740  0656  0084               	movwf	4
  7741  0657  3028               	movlw	low (__npowers_| (0+32768))
  7742  0658  0784               	addwf	4,f
  7743  0659  3090               	movlw	high (__npowers_| (0+32768))
  7744  065A  3D85               	addwfc	5,f
  7745  065B  3F00               	moviw [0]fsr0
  7746  065C  00B6               	movwf	___ftmul@f1
  7747  065D  3F01               	moviw [1]fsr0
  7748  065E  00B7               	movwf	___ftmul@f1+1
  7749  065F  3F02               	moviw [2]fsr0
  7750  0660  00B8               	movwf	___ftmul@f1+2
  7751  0661  0850               	movf	_fround$1274,w
  7752  0662  00B9               	movwf	___ftmul@f2
  7753  0663  0851               	movf	_fround$1274+1,w
  7754  0664  00BA               	movwf	___ftmul@f2+1
  7755  0665  0852               	movf	_fround$1274+2,w
  7756  0666  00BB               	movwf	___ftmul@f2+2
  7757  0667  3189  21F6  3185   	fcall	___ftmul
  7758  066A  0020               	movlb	0	; select bank0
  7759  066B  0836               	movf	?___ftmul,w
  7760  066C  00CD               	movwf	_fround$1275
  7761  066D  0837               	movf	?___ftmul+1,w
  7762  066E  00CE               	movwf	_fround$1275+1
  7763  066F  0838               	movf	?___ftmul+2,w
  7764  0670  00CF               	movwf	_fround$1275+2
  7765                           
  7766                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7767  0671  3000               	movlw	0
  7768  0672  00B6               	movwf	___ftmul@f1
  7769  0673  3000               	movlw	0
  7770  0674  00B7               	movwf	___ftmul@f1+1
  7771  0675  303F               	movlw	63
  7772  0676  00B8               	movwf	___ftmul@f1+2
  7773  0677  084D               	movf	_fround$1275,w
  7774  0678  00B9               	movwf	___ftmul@f2
  7775  0679  084E               	movf	_fround$1275+1,w
  7776  067A  00BA               	movwf	___ftmul@f2+1
  7777  067B  084F               	movf	_fround$1275+2,w
  7778  067C  00BB               	movwf	___ftmul@f2+2
  7779  067D  3189  21F6         	fcall	___ftmul
  7780  067F  0020               	movlb	0	; select bank0
  7781  0680  0836               	movf	?___ftmul,w
  7782  0681  00C6               	movwf	?_fround
  7783  0682  0837               	movf	?___ftmul+1,w
  7784  0683  00C7               	movwf	?_fround+1
  7785  0684  0838               	movf	?___ftmul+2,w
  7786  0685  00C8               	movwf	?_fround+2
  7787  0686  0008               	return
  7788  0687                     l2420:	
  7789                           
  7790                           ;doprnt.c: 415: else if(prec > 10)
  7791  0687  300B               	movlw	11
  7792  0688  0253               	subwf	fround@prec,w
  7793  0689  1C03               	skipc
  7794  068A  2EFF               	goto	l2428
  7795                           
  7796                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7797  068B  0853               	movf	fround@prec,w
  7798  068C  00C9               	movwf	??_fround
  7799  068D  01CA               	clrf	??_fround+1
  7800  068E  0849               	movf	??_fround,w
  7801  068F  00A2               	movwf	___awmod@dividend
  7802  0690  084A               	movf	??_fround+1,w
  7803  0691  00A3               	movwf	___awmod@dividend+1
  7804  0692  300A               	movlw	10
  7805  0693  00A0               	movwf	___awmod@divisor
  7806  0694  3000               	movlw	0
  7807  0695  00A1               	movwf	___awmod@divisor+1
  7808  0696  3195  258B  3185   	fcall	___awmod
  7809  0699  0020               	movlb	0	; select bank0
  7810  069A  0821               	movf	?___awmod+1,w
  7811  069B  00B1               	movwf	___wmul@multiplier+1
  7812  069C  0820               	movf	?___awmod,w
  7813  069D  00B0               	movwf	___wmul@multiplier
  7814  069E  3003               	movlw	3
  7815  069F  00B2               	movwf	___wmul@multiplicand
  7816  06A0  3000               	movlw	0
  7817  06A1  00B3               	movwf	___wmul@multiplicand+1
  7818  06A2  3193  238F  3185   	fcall	___wmul
  7819  06A5  0020               	movlb	0	; select bank0
  7820  06A6  0831               	movf	?___wmul+1,w
  7821  06A7  0085               	movwf	5
  7822  06A8  0830               	movf	?___wmul,w
  7823  06A9  0084               	movwf	4
  7824  06AA  3028               	movlw	low (__npowers_| (0+32768))
  7825  06AB  0784               	addwf	4,f
  7826  06AC  3090               	movlw	high (__npowers_| (0+32768))
  7827  06AD  3D85               	addwfc	5,f
  7828  06AE  3F00               	moviw [0]fsr0
  7829  06AF  00B6               	movwf	___ftmul@f1
  7830  06B0  3F01               	moviw [1]fsr0
  7831  06B1  00B7               	movwf	___ftmul@f1+1
  7832  06B2  3F02               	moviw [2]fsr0
  7833  06B3  00B8               	movwf	___ftmul@f1+2
  7834  06B4  300A               	movlw	10
  7835  06B5  00A7               	movwf	___awdiv@divisor
  7836  06B6  3000               	movlw	0
  7837  06B7  00A8               	movwf	___awdiv@divisor+1
  7838  06B8  0853               	movf	fround@prec,w
  7839  06B9  00CB               	movwf	??_fround+2
  7840  06BA  01CC               	clrf	??_fround+3
  7841  06BB  084B               	movf	??_fround+2,w
  7842  06BC  00A9               	movwf	___awdiv@dividend
  7843  06BD  084C               	movf	??_fround+3,w
  7844  06BE  00AA               	movwf	___awdiv@dividend+1
  7845  06BF  3196  266F  3185   	fcall	___awdiv
  7846  06C2  0020               	movlb	0	; select bank0
  7847  06C3  0827               	movf	?___awdiv,w
  7848  06C4  3E09               	addlw	9
  7849  06C5  00B0               	movwf	___wmul@multiplier
  7850  06C6  3000               	movlw	0
  7851  06C7  3D28               	addwfc	?___awdiv+1,w
  7852  06C8  00B1               	movwf	___wmul@multiplier+1
  7853  06C9  3003               	movlw	3
  7854  06CA  00B2               	movwf	___wmul@multiplicand
  7855  06CB  3000               	movlw	0
  7856  06CC  00B3               	movwf	___wmul@multiplicand+1
  7857  06CD  3193  238F  3185   	fcall	___wmul
  7858  06D0  0020               	movlb	0	; select bank0
  7859  06D1  0831               	movf	?___wmul+1,w
  7860  06D2  0085               	movwf	5
  7861  06D3  0830               	movf	?___wmul,w
  7862  06D4  0084               	movwf	4
  7863  06D5  3028               	movlw	low (__npowers_| (0+32768))
  7864  06D6  0784               	addwf	4,f
  7865  06D7  3090               	movlw	high (__npowers_| (0+32768))
  7866  06D8  3D85               	addwfc	5,f
  7867  06D9  3F00               	moviw [0]fsr0
  7868  06DA  00B9               	movwf	___ftmul@f2
  7869  06DB  3F01               	moviw [1]fsr0
  7870  06DC  00BA               	movwf	___ftmul@f2+1
  7871  06DD  3F02               	moviw [2]fsr0
  7872  06DE  00BB               	movwf	___ftmul@f2+2
  7873  06DF  3189  21F6  3185   	fcall	___ftmul
  7874  06E2  0020               	movlb	0	; select bank0
  7875  06E3  0836               	movf	?___ftmul,w
  7876  06E4  00D0               	movwf	_fround$1274
  7877  06E5  0837               	movf	?___ftmul+1,w
  7878  06E6  00D1               	movwf	_fround$1274+1
  7879  06E7  0838               	movf	?___ftmul+2,w
  7880  06E8  00D2               	movwf	_fround$1274+2
  7881                           
  7882                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7883  06E9  3000               	movlw	0
  7884  06EA  00B6               	movwf	___ftmul@f1
  7885  06EB  3000               	movlw	0
  7886  06EC  00B7               	movwf	___ftmul@f1+1
  7887  06ED  303F               	movlw	63
  7888  06EE  00B8               	movwf	___ftmul@f1+2
  7889  06EF  0850               	movf	_fround$1274,w
  7890  06F0  00B9               	movwf	___ftmul@f2
  7891  06F1  0851               	movf	_fround$1274+1,w
  7892  06F2  00BA               	movwf	___ftmul@f2+1
  7893  06F3  0852               	movf	_fround$1274+2,w
  7894  06F4  00BB               	movwf	___ftmul@f2+2
  7895  06F5  3189  21F6         	fcall	___ftmul
  7896  06F7  0020               	movlb	0	; select bank0
  7897  06F8  0836               	movf	?___ftmul,w
  7898  06F9  00C6               	movwf	?_fround
  7899  06FA  0837               	movf	?___ftmul+1,w
  7900  06FB  00C7               	movwf	?_fround+1
  7901  06FC  0838               	movf	?___ftmul+2,w
  7902  06FD  00C8               	movwf	?_fround+2
  7903  06FE  0008               	return
  7904  06FF                     l2428:	
  7905                           
  7906                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7907  06FF  3000               	movlw	0
  7908  0700  00B6               	movwf	___ftmul@f1
  7909  0701  3000               	movlw	0
  7910  0702  00B7               	movwf	___ftmul@f1+1
  7911  0703  303F               	movlw	63
  7912  0704  00B8               	movwf	___ftmul@f1+2
  7913  0705  0853               	movf	fround@prec,w
  7914  0706  00C9               	movwf	??_fround
  7915  0707  01CA               	clrf	??_fround+1
  7916  0708  0849               	movf	??_fround,w
  7917  0709  00B0               	movwf	___wmul@multiplier
  7918  070A  084A               	movf	??_fround+1,w
  7919  070B  00B1               	movwf	___wmul@multiplier+1
  7920  070C  3003               	movlw	3
  7921  070D  00B2               	movwf	___wmul@multiplicand
  7922  070E  3000               	movlw	0
  7923  070F  00B3               	movwf	___wmul@multiplicand+1
  7924  0710  3193  238F  3185   	fcall	___wmul
  7925  0713  0020               	movlb	0	; select bank0
  7926  0714  0831               	movf	?___wmul+1,w
  7927  0715  0085               	movwf	5
  7928  0716  0830               	movf	?___wmul,w
  7929  0717  0084               	movwf	4
  7930  0718  3028               	movlw	low (__npowers_| (0+32768))
  7931  0719  0784               	addwf	4,f
  7932  071A  3090               	movlw	high (__npowers_| (0+32768))
  7933  071B  3D85               	addwfc	5,f
  7934  071C  3F00               	moviw [0]fsr0
  7935  071D  00B9               	movwf	___ftmul@f2
  7936  071E  3F01               	moviw [1]fsr0
  7937  071F  00BA               	movwf	___ftmul@f2+1
  7938  0720  3F02               	moviw [2]fsr0
  7939  0721  00BB               	movwf	___ftmul@f2+2
  7940  0722  3189  21F6         	fcall	___ftmul
  7941  0724  0020               	movlb	0	; select bank0
  7942  0725  0836               	movf	?___ftmul,w
  7943  0726  00C6               	movwf	?_fround
  7944  0727  0837               	movf	?___ftmul+1,w
  7945  0728  00C7               	movwf	?_fround+1
  7946  0729  0838               	movf	?___ftmul+2,w
  7947  072A  00C8               	movwf	?_fround+2
  7948  072B  0008               	return
  7949  072C                     __end_of_fround:	
  7950                           
  7951                           	psect	text36
  7952  138F                     __ptext36:	
  7953 ;; *************** function ___wmul *****************
  7954 ;; Defined at:
  7955 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  7956 ;; Parameters:    Size  Location     Type
  7957 ;;  multiplier      2   16[BANK0 ] unsigned int 
  7958 ;;  multiplicand    2   18[BANK0 ] unsigned int 
  7959 ;; Auto vars:     Size  Location     Type
  7960 ;;  product         2   20[BANK0 ] unsigned int 
  7961 ;; Return value:  Size  Location     Type
  7962 ;;                  2   16[BANK0 ] unsigned int 
  7963 ;; Registers used:
  7964 ;;		wreg, status,2, status,0
  7965 ;; Tracked objects:
  7966 ;;		On entry : 0/0
  7967 ;;		On exit  : 0/0
  7968 ;;		Unchanged: 0/0
  7969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7970 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7971 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7973 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7974 ;;Total ram usage:        6 bytes
  7975 ;; Hardware stack levels used:    1
  7976 ;; Hardware stack levels required when called:    4
  7977 ;; This function calls:
  7978 ;;		Nothing
  7979 ;; This function is called by:
  7980 ;;		_fround
  7981 ;;		_scale
  7982 ;;		_printf
  7983 ;; This function uses a non-reentrant model
  7984 ;;
  7985                           
  7986                           
  7987                           ;psect for function ___wmul
  7988  138F                     ___wmul:	
  7989                           
  7990                           ;incstack = 0
  7991                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7992  138F  0020               	movlb	0	; select bank0
  7993  1390  01B4               	clrf	___wmul@product
  7994  1391  01B5               	clrf	___wmul@product+1
  7995  1392                     l2194:	
  7996  1392  1C30               	btfss	___wmul@multiplier,0
  7997  1393  2B98               	goto	l508
  7998  1394  0832               	movf	___wmul@multiplicand,w
  7999  1395  07B4               	addwf	___wmul@product,f
  8000  1396  0833               	movf	___wmul@multiplicand+1,w
  8001  1397  3DB5               	addwfc	___wmul@product+1,f
  8002  1398                     l508:	
  8003  1398  3001               	movlw	1
  8004  1399                     u2365:	
  8005  1399  35B2               	lslf	___wmul@multiplicand,f
  8006  139A  0DB3               	rlf	___wmul@multiplicand+1,f
  8007  139B  0B89               	decfsz	9,f
  8008  139C  2B99               	goto	u2365
  8009  139D  3001               	movlw	1
  8010  139E                     u2375:	
  8011  139E  36B1               	lsrf	___wmul@multiplier+1,f
  8012  139F  0CB0               	rrf	___wmul@multiplier,f
  8013  13A0  0B89               	decfsz	9,f
  8014  13A1  2B9E               	goto	u2375
  8015  13A2  0830               	movf	___wmul@multiplier,w
  8016  13A3  0431               	iorwf	___wmul@multiplier+1,w
  8017  13A4  1D03               	btfss	3,2
  8018  13A5  2B92               	goto	l2194
  8019  13A6  0835               	movf	___wmul@product+1,w
  8020  13A7  00B1               	movwf	?___wmul+1
  8021  13A8  0834               	movf	___wmul@product,w
  8022  13A9  00B0               	movwf	?___wmul
  8023  13AA  0008               	return
  8024  13AB                     __end_of___wmul:	
  8025                           
  8026                           	psect	text37
  8027  09F6                     __ptext37:	
  8028 ;; *************** function ___ftmul *****************
  8029 ;; Defined at:
  8030 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
  8031 ;; Parameters:    Size  Location     Type
  8032 ;;  f1              3   22[BANK0 ] float 
  8033 ;;  f2              3   25[BANK0 ] float 
  8034 ;; Auto vars:     Size  Location     Type
  8035 ;;  f3_as_produc    3   33[BANK0 ] unsigned um
  8036 ;;  sign            1   37[BANK0 ] unsigned char 
  8037 ;;  cntr            1   36[BANK0 ] unsigned char 
  8038 ;;  exp             1   32[BANK0 ] unsigned char 
  8039 ;; Return value:  Size  Location     Type
  8040 ;;                  3   22[BANK0 ] float 
  8041 ;; Registers used:
  8042 ;;		wreg, status,2, status,0, pclath, cstack
  8043 ;; Tracked objects:
  8044 ;;		On entry : 0/0
  8045 ;;		On exit  : 0/0
  8046 ;;		Unchanged: 0/0
  8047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8048 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8049 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8050 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8051 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8052 ;;Total ram usage:       16 bytes
  8053 ;; Hardware stack levels used:    1
  8054 ;; Hardware stack levels required when called:    5
  8055 ;; This function calls:
  8056 ;;		___ftpack
  8057 ;; This function is called by:
  8058 ;;		_RadioOperation
  8059 ;;		_fround
  8060 ;;		_scale
  8061 ;;		_printf
  8062 ;; This function uses a non-reentrant model
  8063 ;;
  8064                           
  8065                           
  8066                           ;psect for function ___ftmul
  8067  09F6                     ___ftmul:	
  8068                           
  8069                           ;incstack = 0
  8070                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8071  09F6  0020               	movlb	0	; select bank0
  8072  09F7  0836               	movf	___ftmul@f1,w
  8073  09F8  00BC               	movwf	??___ftmul
  8074  09F9  0837               	movf	___ftmul@f1+1,w
  8075  09FA  00BD               	movwf	??___ftmul+1
  8076  09FB  0838               	movf	___ftmul@f1+2,w
  8077  09FC  00BE               	movwf	??___ftmul+2
  8078  09FD  1003               	clrc
  8079  09FE  0D3D               	rlf	??___ftmul+1,w
  8080  09FF  0D3E               	rlf	??___ftmul+2,w
  8081  0A00  00BF               	movwf	??___ftmul+3
  8082  0A01  083F               	movf	??___ftmul+3,w
  8083  0A02  00C0               	movwf	___ftmul@exp
  8084  0A03  0840               	movf	___ftmul@exp,w
  8085  0A04  1D03               	btfss	3,2
  8086  0A05  2A0D               	goto	l2364
  8087  0A06  3000               	movlw	0
  8088  0A07  00B6               	movwf	?___ftmul
  8089  0A08  3000               	movlw	0
  8090  0A09  00B7               	movwf	?___ftmul+1
  8091  0A0A  3000               	movlw	0
  8092  0A0B  00B8               	movwf	?___ftmul+2
  8093  0A0C  0008               	return
  8094  0A0D                     l2364:	
  8095  0A0D  0839               	movf	___ftmul@f2,w
  8096  0A0E  00BC               	movwf	??___ftmul
  8097  0A0F  083A               	movf	___ftmul@f2+1,w
  8098  0A10  00BD               	movwf	??___ftmul+1
  8099  0A11  083B               	movf	___ftmul@f2+2,w
  8100  0A12  00BE               	movwf	??___ftmul+2
  8101  0A13  1003               	clrc
  8102  0A14  0D3D               	rlf	??___ftmul+1,w
  8103  0A15  0D3E               	rlf	??___ftmul+2,w
  8104  0A16  00BF               	movwf	??___ftmul+3
  8105  0A17  083F               	movf	??___ftmul+3,w
  8106  0A18  00C5               	movwf	___ftmul@sign
  8107  0A19  0845               	movf	___ftmul@sign,w
  8108  0A1A  1D03               	btfss	3,2
  8109  0A1B  2A23               	goto	l2370
  8110  0A1C  3000               	movlw	0
  8111  0A1D  00B6               	movwf	?___ftmul
  8112  0A1E  3000               	movlw	0
  8113  0A1F  00B7               	movwf	?___ftmul+1
  8114  0A20  3000               	movlw	0
  8115  0A21  00B8               	movwf	?___ftmul+2
  8116  0A22  0008               	return
  8117  0A23                     l2370:	
  8118  0A23  0845               	movf	___ftmul@sign,w
  8119  0A24  3E7B               	addlw	123
  8120  0A25  00BC               	movwf	??___ftmul
  8121  0A26  083C               	movf	??___ftmul,w
  8122  0A27  07C0               	addwf	___ftmul@exp,f
  8123  0A28  0836               	movf	___ftmul@f1,w
  8124  0A29  00BC               	movwf	??___ftmul
  8125  0A2A  0837               	movf	___ftmul@f1+1,w
  8126  0A2B  00BD               	movwf	??___ftmul+1
  8127  0A2C  0838               	movf	___ftmul@f1+2,w
  8128  0A2D  00BE               	movwf	??___ftmul+2
  8129  0A2E  3010               	movlw	16
  8130  0A2F                     u2835:	
  8131  0A2F  36BE               	lsrf	??___ftmul+2,f
  8132  0A30  0CBD               	rrf	??___ftmul+1,f
  8133  0A31  0CBC               	rrf	??___ftmul,f
  8134  0A32  0B89               	decfsz	9,f
  8135  0A33  2A2F               	goto	u2835
  8136  0A34  083C               	movf	??___ftmul,w
  8137  0A35  00BF               	movwf	??___ftmul+3
  8138  0A36  083F               	movf	??___ftmul+3,w
  8139  0A37  00C5               	movwf	___ftmul@sign
  8140  0A38  0839               	movf	___ftmul@f2,w
  8141  0A39  00BC               	movwf	??___ftmul
  8142  0A3A  083A               	movf	___ftmul@f2+1,w
  8143  0A3B  00BD               	movwf	??___ftmul+1
  8144  0A3C  083B               	movf	___ftmul@f2+2,w
  8145  0A3D  00BE               	movwf	??___ftmul+2
  8146  0A3E  3010               	movlw	16
  8147  0A3F                     u2845:	
  8148  0A3F  36BE               	lsrf	??___ftmul+2,f
  8149  0A40  0CBD               	rrf	??___ftmul+1,f
  8150  0A41  0CBC               	rrf	??___ftmul,f
  8151  0A42  0B89               	decfsz	9,f
  8152  0A43  2A3F               	goto	u2845
  8153  0A44  083C               	movf	??___ftmul,w
  8154  0A45  00BF               	movwf	??___ftmul+3
  8155  0A46  083F               	movf	??___ftmul+3,w
  8156  0A47  06C5               	xorwf	___ftmul@sign,f
  8157  0A48  3080               	movlw	128
  8158  0A49  00BC               	movwf	??___ftmul
  8159  0A4A  083C               	movf	??___ftmul,w
  8160  0A4B  05C5               	andwf	___ftmul@sign,f
  8161  0A4C  17B7               	bsf	___ftmul@f1+1,7
  8162  0A4D  17BA               	bsf	___ftmul@f2+1,7
  8163  0A4E  30FF               	movlw	255
  8164  0A4F  05B9               	andwf	___ftmul@f2,f
  8165  0A50  30FF               	movlw	255
  8166  0A51  05BA               	andwf	___ftmul@f2+1,f
  8167  0A52  3000               	movlw	0
  8168  0A53  05BB               	andwf	___ftmul@f2+2,f
  8169  0A54  3000               	movlw	0
  8170  0A55  00C1               	movwf	___ftmul@f3_as_product
  8171  0A56  3000               	movlw	0
  8172  0A57  00C2               	movwf	___ftmul@f3_as_product+1
  8173  0A58  3000               	movlw	0
  8174  0A59  00C3               	movwf	___ftmul@f3_as_product+2
  8175  0A5A  3007               	movlw	7
  8176  0A5B  00BC               	movwf	??___ftmul
  8177  0A5C  083C               	movf	??___ftmul,w
  8178  0A5D  00C4               	movwf	___ftmul@cntr
  8179  0A5E                     l2382:	
  8180  0A5E  1C36               	btfss	___ftmul@f1,0
  8181  0A5F  2A66               	goto	l2386
  8182  0A60  0839               	movf	___ftmul@f2,w
  8183  0A61  07C1               	addwf	___ftmul@f3_as_product,f
  8184  0A62  083A               	movf	___ftmul@f2+1,w
  8185  0A63  3DC2               	addwfc	___ftmul@f3_as_product+1,f
  8186  0A64  083B               	movf	___ftmul@f2+2,w
  8187  0A65  3DC3               	addwfc	___ftmul@f3_as_product+2,f
  8188  0A66                     l2386:	
  8189  0A66  3001               	movlw	1
  8190  0A67                     u2865:	
  8191  0A67  36B8               	lsrf	___ftmul@f1+2,f
  8192  0A68  0CB7               	rrf	___ftmul@f1+1,f
  8193  0A69  0CB6               	rrf	___ftmul@f1,f
  8194  0A6A  0B89               	decfsz	9,f
  8195  0A6B  2A67               	goto	u2865
  8196  0A6C  3001               	movlw	1
  8197  0A6D                     u2875:	
  8198  0A6D  35B9               	lslf	___ftmul@f2,f
  8199  0A6E  0DBA               	rlf	___ftmul@f2+1,f
  8200  0A6F  0DBB               	rlf	___ftmul@f2+2,f
  8201  0A70  0B89               	decfsz	9,f
  8202  0A71  2A6D               	goto	u2875
  8203  0A72  3001               	movlw	1
  8204  0A73  02C4               	subwf	___ftmul@cntr,f
  8205  0A74  1D03               	btfss	3,2
  8206  0A75  2A5E               	goto	l2382
  8207  0A76  3009               	movlw	9
  8208  0A77  00BC               	movwf	??___ftmul
  8209  0A78  083C               	movf	??___ftmul,w
  8210  0A79  00C4               	movwf	___ftmul@cntr
  8211  0A7A                     l2394:	
  8212  0A7A  1C36               	btfss	___ftmul@f1,0
  8213  0A7B  2A82               	goto	l2398
  8214  0A7C  0839               	movf	___ftmul@f2,w
  8215  0A7D  07C1               	addwf	___ftmul@f3_as_product,f
  8216  0A7E  083A               	movf	___ftmul@f2+1,w
  8217  0A7F  3DC2               	addwfc	___ftmul@f3_as_product+1,f
  8218  0A80  083B               	movf	___ftmul@f2+2,w
  8219  0A81  3DC3               	addwfc	___ftmul@f3_as_product+2,f
  8220  0A82                     l2398:	
  8221  0A82  3001               	movlw	1
  8222  0A83                     u2905:	
  8223  0A83  36B8               	lsrf	___ftmul@f1+2,f
  8224  0A84  0CB7               	rrf	___ftmul@f1+1,f
  8225  0A85  0CB6               	rrf	___ftmul@f1,f
  8226  0A86  0B89               	decfsz	9,f
  8227  0A87  2A83               	goto	u2905
  8228  0A88  3001               	movlw	1
  8229  0A89                     u2915:	
  8230  0A89  36C3               	lsrf	___ftmul@f3_as_product+2,f
  8231  0A8A  0CC2               	rrf	___ftmul@f3_as_product+1,f
  8232  0A8B  0CC1               	rrf	___ftmul@f3_as_product,f
  8233  0A8C  0B89               	decfsz	9,f
  8234  0A8D  2A89               	goto	u2915
  8235  0A8E  3001               	movlw	1
  8236  0A8F  02C4               	subwf	___ftmul@cntr,f
  8237  0A90  1D03               	btfss	3,2
  8238  0A91  2A7A               	goto	l2394
  8239  0A92  0841               	movf	___ftmul@f3_as_product,w
  8240  0A93  00A0               	movwf	___ftpack@arg
  8241  0A94  0842               	movf	___ftmul@f3_as_product+1,w
  8242  0A95  00A1               	movwf	___ftpack@arg+1
  8243  0A96  0843               	movf	___ftmul@f3_as_product+2,w
  8244  0A97  00A2               	movwf	___ftpack@arg+2
  8245  0A98  0840               	movf	___ftmul@exp,w
  8246  0A99  00BC               	movwf	??___ftmul
  8247  0A9A  083C               	movf	??___ftmul,w
  8248  0A9B  00A3               	movwf	___ftpack@exp
  8249  0A9C  0845               	movf	___ftmul@sign,w
  8250  0A9D  00BD               	movwf	??___ftmul+1
  8251  0A9E  083D               	movf	??___ftmul+1,w
  8252  0A9F  00A4               	movwf	___ftpack@sign
  8253  0AA0  3197  2714         	fcall	___ftpack
  8254  0AA2  0020               	movlb	0	; select bank0
  8255  0AA3  0820               	movf	?___ftpack,w
  8256  0AA4  00B6               	movwf	?___ftmul
  8257  0AA5  0821               	movf	?___ftpack+1,w
  8258  0AA6  00B7               	movwf	?___ftmul+1
  8259  0AA7  0822               	movf	?___ftpack+2,w
  8260  0AA8  00B8               	movwf	?___ftmul+2
  8261  0AA9  0008               	return
  8262  0AAA                     __end_of___ftmul:	
  8263                           
  8264                           	psect	text38
  8265  158B                     __ptext38:	
  8266 ;; *************** function ___awmod *****************
  8267 ;; Defined at:
  8268 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  8269 ;; Parameters:    Size  Location     Type
  8270 ;;  divisor         2    0[BANK0 ] int 
  8271 ;;  dividend        2    2[BANK0 ] int 
  8272 ;; Auto vars:     Size  Location     Type
  8273 ;;  sign            1    6[BANK0 ] unsigned char 
  8274 ;;  counter         1    5[BANK0 ] unsigned char 
  8275 ;; Return value:  Size  Location     Type
  8276 ;;                  2    0[BANK0 ] int 
  8277 ;; Registers used:
  8278 ;;		wreg, status,2, status,0
  8279 ;; Tracked objects:
  8280 ;;		On entry : 0/0
  8281 ;;		On exit  : 0/0
  8282 ;;		Unchanged: 0/0
  8283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8284 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8285 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8286 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8287 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8288 ;;Total ram usage:        7 bytes
  8289 ;; Hardware stack levels used:    1
  8290 ;; Hardware stack levels required when called:    4
  8291 ;; This function calls:
  8292 ;;		Nothing
  8293 ;; This function is called by:
  8294 ;;		_fround
  8295 ;;		_scale
  8296 ;; This function uses a non-reentrant model
  8297 ;;
  8298                           
  8299                           
  8300                           ;psect for function ___awmod
  8301  158B                     ___awmod:	
  8302                           
  8303                           ;incstack = 0
  8304                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  8305  158B  0020               	movlb	0	; select bank0
  8306  158C  01A6               	clrf	___awmod@sign
  8307  158D  1FA3               	btfss	___awmod@dividend+1,7
  8308  158E  2D96               	goto	l2258
  8309  158F  09A2               	comf	___awmod@dividend,f
  8310  1590  09A3               	comf	___awmod@dividend+1,f
  8311  1591  0AA2               	incf	___awmod@dividend,f
  8312  1592  1903               	skipnz
  8313  1593  0AA3               	incf	___awmod@dividend+1,f
  8314  1594  01A6               	clrf	___awmod@sign
  8315  1595  0AA6               	incf	___awmod@sign,f
  8316  1596                     l2258:	
  8317  1596  1FA1               	btfss	___awmod@divisor+1,7
  8318  1597  2D9D               	goto	l2262
  8319  1598  09A0               	comf	___awmod@divisor,f
  8320  1599  09A1               	comf	___awmod@divisor+1,f
  8321  159A  0AA0               	incf	___awmod@divisor,f
  8322  159B  1903               	skipnz
  8323  159C  0AA1               	incf	___awmod@divisor+1,f
  8324  159D                     l2262:	
  8325  159D  0820               	movf	___awmod@divisor,w
  8326  159E  0421               	iorwf	___awmod@divisor+1,w
  8327  159F  1903               	btfsc	3,2
  8328  15A0  2DC4               	goto	l2280
  8329  15A1  01A5               	clrf	___awmod@counter
  8330  15A2  0AA5               	incf	___awmod@counter,f
  8331  15A3                     l2270:	
  8332  15A3  1BA1               	btfsc	___awmod@divisor+1,7
  8333  15A4  2DAF               	goto	l2272
  8334  15A5  3001               	movlw	1
  8335  15A6                     u2525:	
  8336  15A6  35A0               	lslf	___awmod@divisor,f
  8337  15A7  0DA1               	rlf	___awmod@divisor+1,f
  8338  15A8  0B89               	decfsz	9,f
  8339  15A9  2DA6               	goto	u2525
  8340  15AA  3001               	movlw	1
  8341  15AB  00A4               	movwf	??___awmod
  8342  15AC  0824               	movf	??___awmod,w
  8343  15AD  07A5               	addwf	___awmod@counter,f
  8344  15AE  2DA3               	goto	l2270
  8345  15AF                     l2272:	
  8346  15AF  0821               	movf	___awmod@divisor+1,w
  8347  15B0  0223               	subwf	___awmod@dividend+1,w
  8348  15B1  1D03               	skipz
  8349  15B2  2DB5               	goto	u2545
  8350  15B3  0820               	movf	___awmod@divisor,w
  8351  15B4  0222               	subwf	___awmod@dividend,w
  8352  15B5                     u2545:	
  8353  15B5  1C03               	skipc
  8354  15B6  2DBB               	goto	l2276
  8355  15B7  0820               	movf	___awmod@divisor,w
  8356  15B8  02A2               	subwf	___awmod@dividend,f
  8357  15B9  0821               	movf	___awmod@divisor+1,w
  8358  15BA  3BA3               	subwfb	___awmod@dividend+1,f
  8359  15BB                     l2276:	
  8360  15BB  3001               	movlw	1
  8361  15BC                     u2555:	
  8362  15BC  36A1               	lsrf	___awmod@divisor+1,f
  8363  15BD  0CA0               	rrf	___awmod@divisor,f
  8364  15BE  0B89               	decfsz	9,f
  8365  15BF  2DBC               	goto	u2555
  8366  15C0  3001               	movlw	1
  8367  15C1  02A5               	subwf	___awmod@counter,f
  8368  15C2  1D03               	btfss	3,2
  8369  15C3  2DAF               	goto	l2272
  8370  15C4                     l2280:	
  8371  15C4  0826               	movf	___awmod@sign,w
  8372  15C5  1903               	btfsc	3,2
  8373  15C6  2DCC               	goto	l2284
  8374  15C7  09A2               	comf	___awmod@dividend,f
  8375  15C8  09A3               	comf	___awmod@dividend+1,f
  8376  15C9  0AA2               	incf	___awmod@dividend,f
  8377  15CA  1903               	skipnz
  8378  15CB  0AA3               	incf	___awmod@dividend+1,f
  8379  15CC                     l2284:	
  8380  15CC  0823               	movf	___awmod@dividend+1,w
  8381  15CD  00A1               	movwf	?___awmod+1
  8382  15CE  0822               	movf	___awmod@dividend,w
  8383  15CF  00A0               	movwf	?___awmod
  8384  15D0  0008               	return
  8385  15D1                     __end_of___awmod:	
  8386                           
  8387                           	psect	text39
  8388  166F                     __ptext39:	
  8389 ;; *************** function ___awdiv *****************
  8390 ;; Defined at:
  8391 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  8392 ;; Parameters:    Size  Location     Type
  8393 ;;  divisor         2    7[BANK0 ] int 
  8394 ;;  dividend        2    9[BANK0 ] int 
  8395 ;; Auto vars:     Size  Location     Type
  8396 ;;  quotient        2   14[BANK0 ] int 
  8397 ;;  sign            1   13[BANK0 ] unsigned char 
  8398 ;;  counter         1   12[BANK0 ] unsigned char 
  8399 ;; Return value:  Size  Location     Type
  8400 ;;                  2    7[BANK0 ] int 
  8401 ;; Registers used:
  8402 ;;		wreg, status,2, status,0
  8403 ;; Tracked objects:
  8404 ;;		On entry : 0/0
  8405 ;;		On exit  : 0/0
  8406 ;;		Unchanged: 0/0
  8407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8408 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8409 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8410 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8411 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8412 ;;Total ram usage:        9 bytes
  8413 ;; Hardware stack levels used:    1
  8414 ;; Hardware stack levels required when called:    4
  8415 ;; This function calls:
  8416 ;;		Nothing
  8417 ;; This function is called by:
  8418 ;;		_fround
  8419 ;;		_scale
  8420 ;;		_printf
  8421 ;; This function uses a non-reentrant model
  8422 ;;
  8423                           
  8424                           
  8425                           ;psect for function ___awdiv
  8426  166F                     ___awdiv:	
  8427                           
  8428                           ;incstack = 0
  8429                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  8430  166F  0020               	movlb	0	; select bank0
  8431  1670  01AD               	clrf	___awdiv@sign
  8432  1671  1FA8               	btfss	___awdiv@divisor+1,7
  8433  1672  2E7A               	goto	l2214
  8434  1673  09A7               	comf	___awdiv@divisor,f
  8435  1674  09A8               	comf	___awdiv@divisor+1,f
  8436  1675  0AA7               	incf	___awdiv@divisor,f
  8437  1676  1903               	skipnz
  8438  1677  0AA8               	incf	___awdiv@divisor+1,f
  8439  1678  01AD               	clrf	___awdiv@sign
  8440  1679  0AAD               	incf	___awdiv@sign,f
  8441  167A                     l2214:	
  8442  167A  1FAA               	btfss	___awdiv@dividend+1,7
  8443  167B  2E85               	goto	l2220
  8444  167C  09A9               	comf	___awdiv@dividend,f
  8445  167D  09AA               	comf	___awdiv@dividend+1,f
  8446  167E  0AA9               	incf	___awdiv@dividend,f
  8447  167F  1903               	skipnz
  8448  1680  0AAA               	incf	___awdiv@dividend+1,f
  8449  1681  3001               	movlw	1
  8450  1682  00AB               	movwf	??___awdiv
  8451  1683  082B               	movf	??___awdiv,w
  8452  1684  06AD               	xorwf	___awdiv@sign,f
  8453  1685                     l2220:	
  8454  1685  01AE               	clrf	___awdiv@quotient
  8455  1686  01AF               	clrf	___awdiv@quotient+1
  8456  1687  0827               	movf	___awdiv@divisor,w
  8457  1688  0428               	iorwf	___awdiv@divisor+1,w
  8458  1689  1903               	btfsc	3,2
  8459  168A  2EB4               	goto	l2242
  8460  168B  01AC               	clrf	___awdiv@counter
  8461  168C  0AAC               	incf	___awdiv@counter,f
  8462  168D                     l2230:	
  8463  168D  1BA8               	btfsc	___awdiv@divisor+1,7
  8464  168E  2E99               	goto	l2232
  8465  168F  3001               	movlw	1
  8466  1690                     u2425:	
  8467  1690  35A7               	lslf	___awdiv@divisor,f
  8468  1691  0DA8               	rlf	___awdiv@divisor+1,f
  8469  1692  0B89               	decfsz	9,f
  8470  1693  2E90               	goto	u2425
  8471  1694  3001               	movlw	1
  8472  1695  00AB               	movwf	??___awdiv
  8473  1696  082B               	movf	??___awdiv,w
  8474  1697  07AC               	addwf	___awdiv@counter,f
  8475  1698  2E8D               	goto	l2230
  8476  1699                     l2232:	
  8477  1699  3001               	movlw	1
  8478  169A                     u2445:	
  8479  169A  35AE               	lslf	___awdiv@quotient,f
  8480  169B  0DAF               	rlf	___awdiv@quotient+1,f
  8481  169C  0B89               	decfsz	9,f
  8482  169D  2E9A               	goto	u2445
  8483  169E  0828               	movf	___awdiv@divisor+1,w
  8484  169F  022A               	subwf	___awdiv@dividend+1,w
  8485  16A0  1D03               	skipz
  8486  16A1  2EA4               	goto	u2455
  8487  16A2  0827               	movf	___awdiv@divisor,w
  8488  16A3  0229               	subwf	___awdiv@dividend,w
  8489  16A4                     u2455:	
  8490  16A4  1C03               	skipc
  8491  16A5  2EAB               	goto	l2238
  8492  16A6  0827               	movf	___awdiv@divisor,w
  8493  16A7  02A9               	subwf	___awdiv@dividend,f
  8494  16A8  0828               	movf	___awdiv@divisor+1,w
  8495  16A9  3BAA               	subwfb	___awdiv@dividend+1,f
  8496  16AA  142E               	bsf	___awdiv@quotient,0
  8497  16AB                     l2238:	
  8498  16AB  3001               	movlw	1
  8499  16AC                     u2465:	
  8500  16AC  36A8               	lsrf	___awdiv@divisor+1,f
  8501  16AD  0CA7               	rrf	___awdiv@divisor,f
  8502  16AE  0B89               	decfsz	9,f
  8503  16AF  2EAC               	goto	u2465
  8504  16B0  3001               	movlw	1
  8505  16B1  02AC               	subwf	___awdiv@counter,f
  8506  16B2  1D03               	btfss	3,2
  8507  16B3  2E99               	goto	l2232
  8508  16B4                     l2242:	
  8509  16B4  082D               	movf	___awdiv@sign,w
  8510  16B5  1903               	btfsc	3,2
  8511  16B6  2EBC               	goto	l2246
  8512  16B7  09AE               	comf	___awdiv@quotient,f
  8513  16B8  09AF               	comf	___awdiv@quotient+1,f
  8514  16B9  0AAE               	incf	___awdiv@quotient,f
  8515  16BA  1903               	skipnz
  8516  16BB  0AAF               	incf	___awdiv@quotient+1,f
  8517  16BC                     l2246:	
  8518  16BC  082F               	movf	___awdiv@quotient+1,w
  8519  16BD  00A8               	movwf	?___awdiv+1
  8520  16BE  082E               	movf	___awdiv@quotient,w
  8521  16BF  00A7               	movwf	?___awdiv
  8522  16C0  0008               	return
  8523  16C1                     __end_of___awdiv:	
  8524                           
  8525                           	psect	text40
  8526  072C                     __ptext40:	
  8527 ;; *************** function __tdiv_to_l_ *****************
  8528 ;; Defined at:
  8529 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdivl.c"
  8530 ;; Parameters:    Size  Location     Type
  8531 ;;  f1              3    0[BANK0 ] float 
  8532 ;;  f2              3    3[BANK0 ] float 
  8533 ;; Auto vars:     Size  Location     Type
  8534 ;;  quot            4   10[BANK0 ] unsigned long 
  8535 ;;  exp1            1   15[BANK0 ] unsigned char 
  8536 ;;  cntr            1   14[BANK0 ] unsigned char 
  8537 ;; Return value:  Size  Location     Type
  8538 ;;                  4    0[BANK0 ] unsigned long 
  8539 ;; Registers used:
  8540 ;;		wreg, status,2, status,0
  8541 ;; Tracked objects:
  8542 ;;		On entry : 0/0
  8543 ;;		On exit  : 0/0
  8544 ;;		Unchanged: 0/0
  8545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8546 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8547 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8548 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8549 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8550 ;;Total ram usage:       16 bytes
  8551 ;; Hardware stack levels used:    1
  8552 ;; Hardware stack levels required when called:    4
  8553 ;; This function calls:
  8554 ;;		Nothing
  8555 ;; This function is called by:
  8556 ;;		_printf
  8557 ;; This function uses a non-reentrant model
  8558 ;;
  8559                           
  8560                           
  8561                           ;psect for function __tdiv_to_l_
  8562  072C                     __tdiv_to_l_:	
  8563                           
  8564                           ;incstack = 0
  8565                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  8566  072C  0020               	movlb	0	; select bank0
  8567  072D  0820               	movf	__tdiv_to_l_@f1,w
  8568  072E  00A6               	movwf	??__tdiv_to_l_
  8569  072F  0821               	movf	__tdiv_to_l_@f1+1,w
  8570  0730  00A7               	movwf	??__tdiv_to_l_+1
  8571  0731  0822               	movf	__tdiv_to_l_@f1+2,w
  8572  0732  00A8               	movwf	??__tdiv_to_l_+2
  8573  0733  1003               	clrc
  8574  0734  0D27               	rlf	??__tdiv_to_l_+1,w
  8575  0735  0D28               	rlf	??__tdiv_to_l_+2,w
  8576  0736  00A9               	movwf	??__tdiv_to_l_+3
  8577  0737  0829               	movf	??__tdiv_to_l_+3,w
  8578  0738  00AF               	movwf	__tdiv_to_l_@exp1
  8579  0739  082F               	movf	__tdiv_to_l_@exp1,w
  8580  073A  1D03               	btfss	3,2
  8581  073B  2F45               	goto	l2478
  8582  073C  3000               	movlw	0
  8583  073D  00A3               	movwf	?__tdiv_to_l_+3
  8584  073E  3000               	movlw	0
  8585  073F  00A2               	movwf	?__tdiv_to_l_+2
  8586  0740  3000               	movlw	0
  8587  0741  00A1               	movwf	?__tdiv_to_l_+1
  8588  0742  3000               	movlw	0
  8589  0743  00A0               	movwf	?__tdiv_to_l_
  8590  0744  0008               	return
  8591  0745                     l2478:	
  8592  0745  0823               	movf	__tdiv_to_l_@f2,w
  8593  0746  00A6               	movwf	??__tdiv_to_l_
  8594  0747  0824               	movf	__tdiv_to_l_@f2+1,w
  8595  0748  00A7               	movwf	??__tdiv_to_l_+1
  8596  0749  0825               	movf	__tdiv_to_l_@f2+2,w
  8597  074A  00A8               	movwf	??__tdiv_to_l_+2
  8598  074B  1003               	clrc
  8599  074C  0D27               	rlf	??__tdiv_to_l_+1,w
  8600  074D  0D28               	rlf	??__tdiv_to_l_+2,w
  8601  074E  00A9               	movwf	??__tdiv_to_l_+3
  8602  074F  0829               	movf	??__tdiv_to_l_+3,w
  8603  0750  00AE               	movwf	__tdiv_to_l_@cntr
  8604  0751  082E               	movf	__tdiv_to_l_@cntr,w
  8605  0752  1D03               	btfss	3,2
  8606  0753  2F5D               	goto	l743
  8607  0754  3000               	movlw	0
  8608  0755  00A3               	movwf	?__tdiv_to_l_+3
  8609  0756  3000               	movlw	0
  8610  0757  00A2               	movwf	?__tdiv_to_l_+2
  8611  0758  3000               	movlw	0
  8612  0759  00A1               	movwf	?__tdiv_to_l_+1
  8613  075A  3000               	movlw	0
  8614  075B  00A0               	movwf	?__tdiv_to_l_
  8615  075C  0008               	return
  8616  075D                     l743:	
  8617  075D  17A1               	bsf	__tdiv_to_l_@f1+1,7
  8618  075E  30FF               	movlw	255
  8619  075F  05A0               	andwf	__tdiv_to_l_@f1,f
  8620  0760  30FF               	movlw	255
  8621  0761  05A1               	andwf	__tdiv_to_l_@f1+1,f
  8622  0762  3000               	movlw	0
  8623  0763  05A2               	andwf	__tdiv_to_l_@f1+2,f
  8624  0764  17A4               	bsf	__tdiv_to_l_@f2+1,7
  8625  0765  30FF               	movlw	255
  8626  0766  05A3               	andwf	__tdiv_to_l_@f2,f
  8627  0767  30FF               	movlw	255
  8628  0768  05A4               	andwf	__tdiv_to_l_@f2+1,f
  8629  0769  3000               	movlw	0
  8630  076A  05A5               	andwf	__tdiv_to_l_@f2+2,f
  8631  076B  3000               	movlw	0
  8632  076C  00AD               	movwf	__tdiv_to_l_@quot+3
  8633  076D  3000               	movlw	0
  8634  076E  00AC               	movwf	__tdiv_to_l_@quot+2
  8635  076F  3000               	movlw	0
  8636  0770  00AB               	movwf	__tdiv_to_l_@quot+1
  8637  0771  3000               	movlw	0
  8638  0772  00AA               	movwf	__tdiv_to_l_@quot
  8639  0773  307F               	movlw	127
  8640  0774  02AF               	subwf	__tdiv_to_l_@exp1,f
  8641  0775  3098               	movlw	152
  8642  0776  072E               	addwf	__tdiv_to_l_@cntr,w
  8643  0777  00A6               	movwf	??__tdiv_to_l_
  8644  0778  0826               	movf	??__tdiv_to_l_,w
  8645  0779  02AF               	subwf	__tdiv_to_l_@exp1,f
  8646  077A  3018               	movlw	24
  8647  077B  00A6               	movwf	??__tdiv_to_l_
  8648  077C  0826               	movf	??__tdiv_to_l_,w
  8649  077D  00AE               	movwf	__tdiv_to_l_@cntr
  8650  077E                     l2492:	
  8651  077E  3001               	movlw	1
  8652  077F                     u3025:	
  8653  077F  35AA               	lslf	__tdiv_to_l_@quot,f
  8654  0780  0DAB               	rlf	__tdiv_to_l_@quot+1,f
  8655  0781  0DAC               	rlf	__tdiv_to_l_@quot+2,f
  8656  0782  0DAD               	rlf	__tdiv_to_l_@quot+3,f
  8657  0783  0B89               	decfsz	9,f
  8658  0784  2F7F               	goto	u3025
  8659  0785  0825               	movf	__tdiv_to_l_@f2+2,w
  8660  0786  0222               	subwf	__tdiv_to_l_@f1+2,w
  8661  0787  1D03               	skipz
  8662  0788  2F8F               	goto	u3035
  8663  0789  0824               	movf	__tdiv_to_l_@f2+1,w
  8664  078A  0221               	subwf	__tdiv_to_l_@f1+1,w
  8665  078B  1D03               	skipz
  8666  078C  2F8F               	goto	u3035
  8667  078D  0823               	movf	__tdiv_to_l_@f2,w
  8668  078E  0220               	subwf	__tdiv_to_l_@f1,w
  8669  078F                     u3035:	
  8670  078F  1C03               	skipc
  8671  0790  2F98               	goto	l2500
  8672  0791  0823               	movf	__tdiv_to_l_@f2,w
  8673  0792  02A0               	subwf	__tdiv_to_l_@f1,f
  8674  0793  0824               	movf	__tdiv_to_l_@f2+1,w
  8675  0794  3BA1               	subwfb	__tdiv_to_l_@f1+1,f
  8676  0795  0825               	movf	__tdiv_to_l_@f2+2,w
  8677  0796  3BA2               	subwfb	__tdiv_to_l_@f1+2,f
  8678  0797  142A               	bsf	__tdiv_to_l_@quot,0
  8679  0798                     l2500:	
  8680  0798  3001               	movlw	1
  8681  0799                     u3045:	
  8682  0799  35A0               	lslf	__tdiv_to_l_@f1,f
  8683  079A  0DA1               	rlf	__tdiv_to_l_@f1+1,f
  8684  079B  0DA2               	rlf	__tdiv_to_l_@f1+2,f
  8685  079C  0B89               	decfsz	9,f
  8686  079D  2F99               	goto	u3045
  8687  079E  3001               	movlw	1
  8688  079F  02AE               	subwf	__tdiv_to_l_@cntr,f
  8689  07A0  1D03               	btfss	3,2
  8690  07A1  2F7E               	goto	l2492
  8691  07A2  1FAF               	btfss	__tdiv_to_l_@exp1,7
  8692  07A3  2FC0               	goto	l2512
  8693  07A4  082F               	movf	__tdiv_to_l_@exp1,w
  8694  07A5  3A80               	xorlw	128
  8695  07A6  3E97               	addlw	151
  8696  07A7  1803               	skipnc
  8697  07A8  2FB2               	goto	l2510
  8698  07A9  3000               	movlw	0
  8699  07AA  00A3               	movwf	?__tdiv_to_l_+3
  8700  07AB  3000               	movlw	0
  8701  07AC  00A2               	movwf	?__tdiv_to_l_+2
  8702  07AD  3000               	movlw	0
  8703  07AE  00A1               	movwf	?__tdiv_to_l_+1
  8704  07AF  3000               	movlw	0
  8705  07B0  00A0               	movwf	?__tdiv_to_l_
  8706  07B1  0008               	return
  8707  07B2                     l2510:	
  8708  07B2  3001               	movlw	1
  8709  07B3                     u3085:	
  8710  07B3  36AD               	lsrf	__tdiv_to_l_@quot+3,f
  8711  07B4  0CAC               	rrf	__tdiv_to_l_@quot+2,f
  8712  07B5  0CAB               	rrf	__tdiv_to_l_@quot+1,f
  8713  07B6  0CAA               	rrf	__tdiv_to_l_@quot,f
  8714  07B7  0B89               	decfsz	9,f
  8715  07B8  2FB3               	goto	u3085
  8716  07B9  3001               	movlw	1
  8717  07BA  00A6               	movwf	??__tdiv_to_l_
  8718  07BB  0826               	movf	??__tdiv_to_l_,w
  8719  07BC  07AF               	addwf	__tdiv_to_l_@exp1,f
  8720  07BD  1903               	btfsc	3,2
  8721  07BE  2FD9               	goto	l2520
  8722  07BF  2FB2               	goto	l2510
  8723  07C0                     l2512:	
  8724  07C0  3018               	movlw	24
  8725  07C1  022F               	subwf	__tdiv_to_l_@exp1,w
  8726  07C2  1C03               	skipc
  8727  07C3  2FD6               	goto	l753
  8728  07C4  3000               	movlw	0
  8729  07C5  00A3               	movwf	?__tdiv_to_l_+3
  8730  07C6  3000               	movlw	0
  8731  07C7  00A2               	movwf	?__tdiv_to_l_+2
  8732  07C8  3000               	movlw	0
  8733  07C9  00A1               	movwf	?__tdiv_to_l_+1
  8734  07CA  3000               	movlw	0
  8735  07CB  00A0               	movwf	?__tdiv_to_l_
  8736  07CC  0008               	return
  8737  07CD                     l2518:	
  8738  07CD  3001               	movlw	1
  8739  07CE                     u3115:	
  8740  07CE  35AA               	lslf	__tdiv_to_l_@quot,f
  8741  07CF  0DAB               	rlf	__tdiv_to_l_@quot+1,f
  8742  07D0  0DAC               	rlf	__tdiv_to_l_@quot+2,f
  8743  07D1  0DAD               	rlf	__tdiv_to_l_@quot+3,f
  8744  07D2  0B89               	decfsz	9,f
  8745  07D3  2FCE               	goto	u3115
  8746  07D4  3001               	movlw	1
  8747  07D5  02AF               	subwf	__tdiv_to_l_@exp1,f
  8748  07D6                     l753:	
  8749  07D6  082F               	movf	__tdiv_to_l_@exp1,w
  8750  07D7  1D03               	btfss	3,2
  8751  07D8  2FCD               	goto	l2518
  8752  07D9                     l2520:	
  8753  07D9  082D               	movf	__tdiv_to_l_@quot+3,w
  8754  07DA  00A3               	movwf	?__tdiv_to_l_+3
  8755  07DB  082C               	movf	__tdiv_to_l_@quot+2,w
  8756  07DC  00A2               	movwf	?__tdiv_to_l_+2
  8757  07DD  082B               	movf	__tdiv_to_l_@quot+1,w
  8758  07DE  00A1               	movwf	?__tdiv_to_l_+1
  8759  07DF  082A               	movf	__tdiv_to_l_@quot,w
  8760  07E0  00A0               	movwf	?__tdiv_to_l_
  8761  07E1  0008               	return
  8762  07E2                     __end_of__tdiv_to_l_:	
  8763                           
  8764                           	psect	text41
  8765  0C9D                     __ptext41:	
  8766 ;; *************** function __div_to_l_ *****************
  8767 ;; Defined at:
  8768 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fldivl.c"
  8769 ;; Parameters:    Size  Location     Type
  8770 ;;  f1              3    0[BANK0 ] unsigned long 
  8771 ;;  f2              3    3[BANK0 ] unsigned long 
  8772 ;; Auto vars:     Size  Location     Type
  8773 ;;  quot            4   14[BANK0 ] unsigned long 
  8774 ;;  exp1            1   19[BANK0 ] unsigned char 
  8775 ;;  cntr            1   18[BANK0 ] unsigned char 
  8776 ;; Return value:  Size  Location     Type
  8777 ;;                  4    0[BANK0 ] unsigned long 
  8778 ;; Registers used:
  8779 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8780 ;; Tracked objects:
  8781 ;;		On entry : 0/0
  8782 ;;		On exit  : 0/0
  8783 ;;		Unchanged: 0/0
  8784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8785 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8786 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8787 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8788 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8789 ;;Total ram usage:       20 bytes
  8790 ;; Hardware stack levels used:    1
  8791 ;; Hardware stack levels required when called:    4
  8792 ;; This function calls:
  8793 ;;		Nothing
  8794 ;; This function is called by:
  8795 ;;		_printf
  8796 ;; This function uses a non-reentrant model
  8797 ;;
  8798                           
  8799                           
  8800                           ;psect for function __div_to_l_
  8801  0C9D                     __div_to_l_:	
  8802                           
  8803                           ;incstack = 0
  8804                           ; Regs used in __div_to_l_: [wreg+fsr1l+fsr1h+status,2+status,0]
  8805  0C9D  3020               	movlw	low (__div_to_l_@f1| 0)
  8806  0C9E  0086               	movwf	6
  8807  0C9F  0187               	clrf	7
  8808  0CA0  3F40               	moviw [0]fsr1
  8809  0CA1  0020               	movlb	0	; select bank0
  8810  0CA2  00A6               	movwf	??__div_to_l_
  8811  0CA3  3F41               	moviw [1]fsr1
  8812  0CA4  00A7               	movwf	??__div_to_l_+1
  8813  0CA5  3F42               	moviw [2]fsr1
  8814  0CA6  00A8               	movwf	??__div_to_l_+2
  8815  0CA7  3F43               	moviw [3]fsr1
  8816  0CA8  00A9               	movwf	??__div_to_l_+3
  8817  0CA9  1003               	clrc
  8818  0CAA  0D28               	rlf	??__div_to_l_+2,w
  8819  0CAB  0D29               	rlf	??__div_to_l_+3,w
  8820  0CAC  00AA               	movwf	??__div_to_l_+4
  8821  0CAD  082A               	movf	??__div_to_l_+4,w
  8822  0CAE  00B3               	movwf	__div_to_l_@exp1
  8823  0CAF  0833               	movf	__div_to_l_@exp1,w
  8824  0CB0  1D03               	btfss	3,2
  8825  0CB1  2CBB               	goto	l2530
  8826  0CB2  3000               	movlw	0
  8827  0CB3  00A3               	movwf	?__div_to_l_+3
  8828  0CB4  3000               	movlw	0
  8829  0CB5  00A2               	movwf	?__div_to_l_+2
  8830  0CB6  3000               	movlw	0
  8831  0CB7  00A1               	movwf	?__div_to_l_+1
  8832  0CB8  3000               	movlw	0
  8833  0CB9  00A0               	movwf	?__div_to_l_
  8834  0CBA  0008               	return
  8835  0CBB                     l2530:	
  8836  0CBB  3023               	movlw	low (__div_to_l_@f2| 0)
  8837  0CBC  0086               	movwf	6
  8838  0CBD  0187               	clrf	7
  8839  0CBE  3F40               	moviw [0]fsr1
  8840  0CBF  00A6               	movwf	??__div_to_l_
  8841  0CC0  3F41               	moviw [1]fsr1
  8842  0CC1  00A7               	movwf	??__div_to_l_+1
  8843  0CC2  3F42               	moviw [2]fsr1
  8844  0CC3  00A8               	movwf	??__div_to_l_+2
  8845  0CC4  3F43               	moviw [3]fsr1
  8846  0CC5  00A9               	movwf	??__div_to_l_+3
  8847  0CC6  1003               	clrc
  8848  0CC7  0D28               	rlf	??__div_to_l_+2,w
  8849  0CC8  0D29               	rlf	??__div_to_l_+3,w
  8850  0CC9  00AA               	movwf	??__div_to_l_+4
  8851  0CCA  082A               	movf	??__div_to_l_+4,w
  8852  0CCB  00B2               	movwf	__div_to_l_@cntr
  8853  0CCC  0832               	movf	__div_to_l_@cntr,w
  8854  0CCD  1D03               	btfss	3,2
  8855  0CCE  2CD8               	goto	l2536
  8856  0CCF  3000               	movlw	0
  8857  0CD0  00A3               	movwf	?__div_to_l_+3
  8858  0CD1  3000               	movlw	0
  8859  0CD2  00A2               	movwf	?__div_to_l_+2
  8860  0CD3  3000               	movlw	0
  8861  0CD4  00A1               	movwf	?__div_to_l_+1
  8862  0CD5  3000               	movlw	0
  8863  0CD6  00A0               	movwf	?__div_to_l_
  8864  0CD7  0008               	return
  8865  0CD8                     l2536:	
  8866  0CD8  3020               	movlw	low (__div_to_l_@f1| 0)
  8867  0CD9  0086               	movwf	6
  8868  0CDA  0187               	clrf	7
  8869  0CDB  3000               	movlw	0
  8870  0CDC  0481               	iorwf	1,f
  8871  0CDD  3141               	addfsr 1,1
  8872  0CDE  3000               	movlw	0
  8873  0CDF  0481               	iorwf	1,f
  8874  0CE0  3141               	addfsr 1,1
  8875  0CE1  3080               	movlw	128
  8876  0CE2  0481               	iorwf	1,f
  8877  0CE3  3141               	addfsr 1,1
  8878  0CE4  3000               	movlw	0
  8879  0CE5  0481               	iorwf	1,f
  8880  0CE6  3020               	movlw	low (__div_to_l_@f1| 0)
  8881  0CE7  0086               	movwf	6
  8882  0CE8  0187               	clrf	7
  8883  0CE9  30FF               	movlw	255
  8884  0CEA  0581               	andwf	1,f
  8885  0CEB  3141               	addfsr 1,1
  8886  0CEC  30FF               	movlw	255
  8887  0CED  0581               	andwf	1,f
  8888  0CEE  3141               	addfsr 1,1
  8889  0CEF  30FF               	movlw	255
  8890  0CF0  0581               	andwf	1,f
  8891  0CF1  3141               	addfsr 1,1
  8892  0CF2  3000               	movlw	0
  8893  0CF3  0581               	andwf	1,f
  8894  0CF4  3023               	movlw	low (__div_to_l_@f2| 0)
  8895  0CF5  0086               	movwf	6
  8896  0CF6  0187               	clrf	7
  8897  0CF7  3000               	movlw	0
  8898  0CF8  0481               	iorwf	1,f
  8899  0CF9  3141               	addfsr 1,1
  8900  0CFA  3000               	movlw	0
  8901  0CFB  0481               	iorwf	1,f
  8902  0CFC  3141               	addfsr 1,1
  8903  0CFD  3080               	movlw	128
  8904  0CFE  0481               	iorwf	1,f
  8905  0CFF  3141               	addfsr 1,1
  8906  0D00  3000               	movlw	0
  8907  0D01  0481               	iorwf	1,f
  8908  0D02  3023               	movlw	low (__div_to_l_@f2| 0)
  8909  0D03  0086               	movwf	6
  8910  0D04  0187               	clrf	7
  8911  0D05  30FF               	movlw	255
  8912  0D06  0581               	andwf	1,f
  8913  0D07  3141               	addfsr 1,1
  8914  0D08  30FF               	movlw	255
  8915  0D09  0581               	andwf	1,f
  8916  0D0A  3141               	addfsr 1,1
  8917  0D0B  30FF               	movlw	255
  8918  0D0C  0581               	andwf	1,f
  8919  0D0D  3141               	addfsr 1,1
  8920  0D0E  3000               	movlw	0
  8921  0D0F  0581               	andwf	1,f
  8922  0D10  3000               	movlw	0
  8923  0D11  00B1               	movwf	__div_to_l_@quot+3
  8924  0D12  3000               	movlw	0
  8925  0D13  00B0               	movwf	__div_to_l_@quot+2
  8926  0D14  3000               	movlw	0
  8927  0D15  00AF               	movwf	__div_to_l_@quot+1
  8928  0D16  3000               	movlw	0
  8929  0D17  00AE               	movwf	__div_to_l_@quot
  8930  0D18  307F               	movlw	127
  8931  0D19  02B3               	subwf	__div_to_l_@exp1,f
  8932  0D1A  30A0               	movlw	160
  8933  0D1B  0732               	addwf	__div_to_l_@cntr,w
  8934  0D1C  00A6               	movwf	??__div_to_l_
  8935  0D1D  0826               	movf	??__div_to_l_,w
  8936  0D1E  02B3               	subwf	__div_to_l_@exp1,f
  8937  0D1F  3020               	movlw	32
  8938  0D20  00A6               	movwf	??__div_to_l_
  8939  0D21  0826               	movf	??__div_to_l_,w
  8940  0D22  00B2               	movwf	__div_to_l_@cntr
  8941  0D23                     l2546:	
  8942  0D23  3001               	movlw	1
  8943  0D24                     u3155:	
  8944  0D24  35AE               	lslf	__div_to_l_@quot,f
  8945  0D25  0DAF               	rlf	__div_to_l_@quot+1,f
  8946  0D26  0DB0               	rlf	__div_to_l_@quot+2,f
  8947  0D27  0DB1               	rlf	__div_to_l_@quot+3,f
  8948  0D28  0B89               	decfsz	9,f
  8949  0D29  2D24               	goto	u3155
  8950  0D2A  3023               	movlw	low (__div_to_l_@f2| 0)
  8951  0D2B  0086               	movwf	6
  8952  0D2C  0187               	clrf	7
  8953  0D2D  3F40               	moviw [0]fsr1
  8954  0D2E  00A6               	movwf	??__div_to_l_
  8955  0D2F  3F41               	moviw [1]fsr1
  8956  0D30  00A7               	movwf	??__div_to_l_+1
  8957  0D31  3F42               	moviw [2]fsr1
  8958  0D32  00A8               	movwf	??__div_to_l_+2
  8959  0D33  3F43               	moviw [3]fsr1
  8960  0D34  00A9               	movwf	??__div_to_l_+3
  8961  0D35  3020               	movlw	low (__div_to_l_@f1| 0)
  8962  0D36  0086               	movwf	6
  8963  0D37  0187               	clrf	7
  8964  0D38  3F40               	moviw [0]fsr1
  8965  0D39  00AA               	movwf	??__div_to_l_+4
  8966  0D3A  3F41               	moviw [1]fsr1
  8967  0D3B  00AB               	movwf	??__div_to_l_+5
  8968  0D3C  3F42               	moviw [2]fsr1
  8969  0D3D  00AC               	movwf	??__div_to_l_+6
  8970  0D3E  3F43               	moviw [3]fsr1
  8971  0D3F  00AD               	movwf	??__div_to_l_+7
  8972  0D40  0829               	movf	??__div_to_l_+3,w
  8973  0D41  022D               	subwf	??__div_to_l_+7,w
  8974  0D42  1D03               	skipz
  8975  0D43  2D4E               	goto	u3165
  8976  0D44  0828               	movf	??__div_to_l_+2,w
  8977  0D45  022C               	subwf	??__div_to_l_+6,w
  8978  0D46  1D03               	skipz
  8979  0D47  2D4E               	goto	u3165
  8980  0D48  0827               	movf	??__div_to_l_+1,w
  8981  0D49  022B               	subwf	??__div_to_l_+5,w
  8982  0D4A  1D03               	skipz
  8983  0D4B  2D4E               	goto	u3165
  8984  0D4C  0826               	movf	??__div_to_l_,w
  8985  0D4D  022A               	subwf	??__div_to_l_+4,w
  8986  0D4E                     u3165:	
  8987  0D4E  1C03               	skipc
  8988  0D4F  2D6B               	goto	l2554
  8989  0D50  3023               	movlw	low (__div_to_l_@f2| 0)
  8990  0D51  0086               	movwf	6
  8991  0D52  0187               	clrf	7
  8992  0D53  3F40               	moviw [0]fsr1
  8993  0D54  00A6               	movwf	??__div_to_l_
  8994  0D55  3F41               	moviw [1]fsr1
  8995  0D56  00A7               	movwf	??__div_to_l_+1
  8996  0D57  3F42               	moviw [2]fsr1
  8997  0D58  00A8               	movwf	??__div_to_l_+2
  8998  0D59  3F43               	moviw [3]fsr1
  8999  0D5A  00A9               	movwf	??__div_to_l_+3
  9000  0D5B  3020               	movlw	low (__div_to_l_@f1| 0)
  9001  0D5C  0086               	movwf	6
  9002  0D5D  0187               	clrf	7
  9003  0D5E  0826               	movf	??__div_to_l_,w
  9004  0D5F  0281               	subwf	1,f
  9005  0D60  3141               	addfsr 1,1
  9006  0D61  0827               	movf	??__div_to_l_+1,w
  9007  0D62  3B81               	subwfb	1,f
  9008  0D63  3141               	addfsr 1,1
  9009  0D64  0828               	movf	??__div_to_l_+2,w
  9010  0D65  3B81               	subwfb	1,f
  9011  0D66  3141               	addfsr 1,1
  9012  0D67  0829               	movf	??__div_to_l_+3,w
  9013  0D68  3B81               	subwfb	1,f
  9014  0D69  317D               	addfsr 1,-3
  9015  0D6A  142E               	bsf	__div_to_l_@quot,0
  9016  0D6B                     l2554:	
  9017  0D6B  3020               	movlw	low (__div_to_l_@f1| 0)
  9018  0D6C  0086               	movwf	6
  9019  0D6D  0187               	clrf	7
  9020  0D6E  3581               	lslf	1,f
  9021  0D6F  3141               	addfsr 1,1
  9022  0D70  0D81               	rlf	1,f
  9023  0D71  3141               	addfsr 1,1
  9024  0D72  0D81               	rlf	1,f
  9025  0D73  3141               	addfsr 1,1
  9026  0D74  0D81               	rlf	1,f
  9027  0D75  317D               	addfsr 1,-3
  9028  0D76  3001               	movlw	1
  9029  0D77  02B2               	subwf	__div_to_l_@cntr,f
  9030  0D78  1D03               	btfss	3,2
  9031  0D79  2D23               	goto	l2546
  9032  0D7A  1FB3               	btfss	__div_to_l_@exp1,7
  9033  0D7B  2D98               	goto	l2566
  9034  0D7C  0833               	movf	__div_to_l_@exp1,w
  9035  0D7D  3A80               	xorlw	128
  9036  0D7E  3E9F               	addlw	159
  9037  0D7F  1803               	skipnc
  9038  0D80  2D8A               	goto	l2564
  9039  0D81  3000               	movlw	0
  9040  0D82  00A3               	movwf	?__div_to_l_+3
  9041  0D83  3000               	movlw	0
  9042  0D84  00A2               	movwf	?__div_to_l_+2
  9043  0D85  3000               	movlw	0
  9044  0D86  00A1               	movwf	?__div_to_l_+1
  9045  0D87  3000               	movlw	0
  9046  0D88  00A0               	movwf	?__div_to_l_
  9047  0D89  0008               	return
  9048  0D8A                     l2564:	
  9049  0D8A  3001               	movlw	1
  9050  0D8B                     u3205:	
  9051  0D8B  36B1               	lsrf	__div_to_l_@quot+3,f
  9052  0D8C  0CB0               	rrf	__div_to_l_@quot+2,f
  9053  0D8D  0CAF               	rrf	__div_to_l_@quot+1,f
  9054  0D8E  0CAE               	rrf	__div_to_l_@quot,f
  9055  0D8F  0B89               	decfsz	9,f
  9056  0D90  2D8B               	goto	u3205
  9057  0D91  3001               	movlw	1
  9058  0D92  00A6               	movwf	??__div_to_l_
  9059  0D93  0826               	movf	??__div_to_l_,w
  9060  0D94  07B3               	addwf	__div_to_l_@exp1,f
  9061  0D95  1903               	btfsc	3,2
  9062  0D96  2DB1               	goto	l2574
  9063  0D97  2D8A               	goto	l2564
  9064  0D98                     l2566:	
  9065  0D98  3020               	movlw	32
  9066  0D99  0233               	subwf	__div_to_l_@exp1,w
  9067  0D9A  1C03               	skipc
  9068  0D9B  2DAE               	goto	l674
  9069  0D9C  3000               	movlw	0
  9070  0D9D  00A3               	movwf	?__div_to_l_+3
  9071  0D9E  3000               	movlw	0
  9072  0D9F  00A2               	movwf	?__div_to_l_+2
  9073  0DA0  3000               	movlw	0
  9074  0DA1  00A1               	movwf	?__div_to_l_+1
  9075  0DA2  3000               	movlw	0
  9076  0DA3  00A0               	movwf	?__div_to_l_
  9077  0DA4  0008               	return
  9078  0DA5                     l2572:	
  9079  0DA5  3001               	movlw	1
  9080  0DA6                     u3235:	
  9081  0DA6  35AE               	lslf	__div_to_l_@quot,f
  9082  0DA7  0DAF               	rlf	__div_to_l_@quot+1,f
  9083  0DA8  0DB0               	rlf	__div_to_l_@quot+2,f
  9084  0DA9  0DB1               	rlf	__div_to_l_@quot+3,f
  9085  0DAA  0B89               	decfsz	9,f
  9086  0DAB  2DA6               	goto	u3235
  9087  0DAC  3001               	movlw	1
  9088  0DAD  02B3               	subwf	__div_to_l_@exp1,f
  9089  0DAE                     l674:	
  9090  0DAE  0833               	movf	__div_to_l_@exp1,w
  9091  0DAF  1D03               	btfss	3,2
  9092  0DB0  2DA5               	goto	l2572
  9093  0DB1                     l2574:	
  9094  0DB1  0831               	movf	__div_to_l_@quot+3,w
  9095  0DB2  00A3               	movwf	?__div_to_l_+3
  9096  0DB3  0830               	movf	__div_to_l_@quot+2,w
  9097  0DB4  00A2               	movwf	?__div_to_l_+2
  9098  0DB5  082F               	movf	__div_to_l_@quot+1,w
  9099  0DB6  00A1               	movwf	?__div_to_l_+1
  9100  0DB7  082E               	movf	__div_to_l_@quot,w
  9101  0DB8  00A0               	movwf	?__div_to_l_
  9102  0DB9  0008               	return
  9103  0DBA                     __end_of__div_to_l_:	
  9104                           
  9105                           	psect	text42
  9106  0809                     __ptext42:	
  9107 ;; *************** function ___lltoft *****************
  9108 ;; Defined at:
  9109 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
  9110 ;; Parameters:    Size  Location     Type
  9111 ;;  c               4    8[BANK0 ] unsigned long 
  9112 ;; Auto vars:     Size  Location     Type
  9113 ;;  exp             1   13[BANK0 ] unsigned char 
  9114 ;; Return value:  Size  Location     Type
  9115 ;;                  3    8[BANK0 ] float 
  9116 ;; Registers used:
  9117 ;;		wreg, status,2, status,0, pclath, cstack
  9118 ;; Tracked objects:
  9119 ;;		On entry : 0/0
  9120 ;;		On exit  : 0/0
  9121 ;;		Unchanged: 0/0
  9122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9123 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9124 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9125 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9126 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9127 ;;Total ram usage:        6 bytes
  9128 ;; Hardware stack levels used:    1
  9129 ;; Hardware stack levels required when called:    5
  9130 ;; This function calls:
  9131 ;;		___ftpack
  9132 ;; This function is called by:
  9133 ;;		_printf
  9134 ;; This function uses a non-reentrant model
  9135 ;;
  9136                           
  9137                           
  9138                           ;psect for function ___lltoft
  9139  0809                     ___lltoft:	
  9140                           
  9141                           ;incstack = 0
  9142                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  9143  0809  308E               	movlw	142
  9144  080A  0020               	movlb	0	; select bank0
  9145  080B  00AC               	movwf	??___lltoft
  9146  080C  082C               	movf	??___lltoft,w
  9147  080D  00AD               	movwf	___lltoft@exp
  9148  080E                     l2704:	
  9149  080E  30FF               	movlw	255
  9150  080F  052B               	andwf	___lltoft@c+3,w
  9151  0810  1903               	btfsc	3,2
  9152  0811  281E               	goto	l2706
  9153  0812  3001               	movlw	1
  9154  0813                     u3535:	
  9155  0813  36AB               	lsrf	___lltoft@c+3,f
  9156  0814  0CAA               	rrf	___lltoft@c+2,f
  9157  0815  0CA9               	rrf	___lltoft@c+1,f
  9158  0816  0CA8               	rrf	___lltoft@c,f
  9159  0817  0B89               	decfsz	9,f
  9160  0818  2813               	goto	u3535
  9161  0819  3001               	movlw	1
  9162  081A  00AC               	movwf	??___lltoft
  9163  081B  082C               	movf	??___lltoft,w
  9164  081C  07AD               	addwf	___lltoft@exp,f
  9165  081D  280E               	goto	l2704
  9166  081E                     l2706:	
  9167  081E  0828               	movf	___lltoft@c,w
  9168  081F  00A0               	movwf	___ftpack@arg
  9169  0820  0829               	movf	___lltoft@c+1,w
  9170  0821  00A1               	movwf	___ftpack@arg+1
  9171  0822  082A               	movf	___lltoft@c+2,w
  9172  0823  00A2               	movwf	___ftpack@arg+2
  9173  0824  082D               	movf	___lltoft@exp,w
  9174  0825  00AC               	movwf	??___lltoft
  9175  0826  082C               	movf	??___lltoft,w
  9176  0827  00A3               	movwf	___ftpack@exp
  9177  0828  01A4               	clrf	___ftpack@sign
  9178  0829  3197  2714         	fcall	___ftpack
  9179  082B  0020               	movlb	0	; select bank0
  9180  082C  0820               	movf	?___ftpack,w
  9181  082D  00A8               	movwf	?___lltoft
  9182  082E  0821               	movf	?___ftpack+1,w
  9183  082F  00A9               	movwf	?___lltoft+1
  9184  0830  0822               	movf	?___ftpack+2,w
  9185  0831  00AA               	movwf	?___lltoft+2
  9186  0832  0008               	return
  9187  0833                     __end_of___lltoft:	
  9188                           
  9189                           	psect	text43
  9190  1548                     __ptext43:	
  9191 ;; *************** function ___llmod *****************
  9192 ;; Defined at:
  9193 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\llmod.c"
  9194 ;; Parameters:    Size  Location     Type
  9195 ;;  divisor         4   14[BANK0 ] unsigned long 
  9196 ;;  dividend        4   18[BANK0 ] unsigned long 
  9197 ;; Auto vars:     Size  Location     Type
  9198 ;;  counter         1   23[BANK0 ] unsigned char 
  9199 ;; Return value:  Size  Location     Type
  9200 ;;                  4   14[BANK0 ] unsigned long 
  9201 ;; Registers used:
  9202 ;;		wreg, status,2, status,0
  9203 ;; Tracked objects:
  9204 ;;		On entry : 0/0
  9205 ;;		On exit  : 0/0
  9206 ;;		Unchanged: 0/0
  9207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9208 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9209 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9210 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9211 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9212 ;;Total ram usage:       10 bytes
  9213 ;; Hardware stack levels used:    1
  9214 ;; Hardware stack levels required when called:    4
  9215 ;; This function calls:
  9216 ;;		Nothing
  9217 ;; This function is called by:
  9218 ;;		_printf
  9219 ;; This function uses a non-reentrant model
  9220 ;;
  9221                           
  9222                           
  9223                           ;psect for function ___llmod
  9224  1548                     ___llmod:	
  9225                           
  9226                           ;incstack = 0
  9227                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  9228  1548  0020               	movlb	0	; select bank0
  9229  1549  0831               	movf	___llmod@divisor+3,w
  9230  154A  0430               	iorwf	___llmod@divisor+2,w
  9231  154B  042F               	iorwf	___llmod@divisor+1,w
  9232  154C  042E               	iorwf	___llmod@divisor,w
  9233  154D  1903               	skipnz
  9234  154E  2D82               	goto	l2696
  9235  154F  01B7               	clrf	___llmod@counter
  9236  1550  0AB7               	incf	___llmod@counter,f
  9237  1551                     l2686:	
  9238  1551  1BB1               	btfsc	___llmod@divisor+3,7
  9239  1552  2D5F               	goto	l2688
  9240  1553  3001               	movlw	1
  9241  1554                     u3485:	
  9242  1554  35AE               	lslf	___llmod@divisor,f
  9243  1555  0DAF               	rlf	___llmod@divisor+1,f
  9244  1556  0DB0               	rlf	___llmod@divisor+2,f
  9245  1557  0DB1               	rlf	___llmod@divisor+3,f
  9246  1558  0B89               	decfsz	9,f
  9247  1559  2D54               	goto	u3485
  9248  155A  3001               	movlw	1
  9249  155B  00B6               	movwf	??___llmod
  9250  155C  0836               	movf	??___llmod,w
  9251  155D  07B7               	addwf	___llmod@counter,f
  9252  155E  2D51               	goto	l2686
  9253  155F                     l2688:	
  9254  155F  0831               	movf	___llmod@divisor+3,w
  9255  1560  0235               	subwf	___llmod@dividend+3,w
  9256  1561  1D03               	skipz
  9257  1562  2D6D               	goto	u3505
  9258  1563  0830               	movf	___llmod@divisor+2,w
  9259  1564  0234               	subwf	___llmod@dividend+2,w
  9260  1565  1D03               	skipz
  9261  1566  2D6D               	goto	u3505
  9262  1567  082F               	movf	___llmod@divisor+1,w
  9263  1568  0233               	subwf	___llmod@dividend+1,w
  9264  1569  1D03               	skipz
  9265  156A  2D6D               	goto	u3505
  9266  156B  082E               	movf	___llmod@divisor,w
  9267  156C  0232               	subwf	___llmod@dividend,w
  9268  156D                     u3505:	
  9269  156D  1C03               	skipc
  9270  156E  2D77               	goto	l2692
  9271  156F  082E               	movf	___llmod@divisor,w
  9272  1570  02B2               	subwf	___llmod@dividend,f
  9273  1571  082F               	movf	___llmod@divisor+1,w
  9274  1572  3BB3               	subwfb	___llmod@dividend+1,f
  9275  1573  0830               	movf	___llmod@divisor+2,w
  9276  1574  3BB4               	subwfb	___llmod@dividend+2,f
  9277  1575  0831               	movf	___llmod@divisor+3,w
  9278  1576  3BB5               	subwfb	___llmod@dividend+3,f
  9279  1577                     l2692:	
  9280  1577  3001               	movlw	1
  9281  1578                     u3515:	
  9282  1578  36B1               	lsrf	___llmod@divisor+3,f
  9283  1579  0CB0               	rrf	___llmod@divisor+2,f
  9284  157A  0CAF               	rrf	___llmod@divisor+1,f
  9285  157B  0CAE               	rrf	___llmod@divisor,f
  9286  157C  0B89               	decfsz	9,f
  9287  157D  2D78               	goto	u3515
  9288  157E  3001               	movlw	1
  9289  157F  02B7               	subwf	___llmod@counter,f
  9290  1580  1D03               	btfss	3,2
  9291  1581  2D5F               	goto	l2688
  9292  1582                     l2696:	
  9293  1582  0835               	movf	___llmod@dividend+3,w
  9294  1583  00B1               	movwf	?___llmod+3
  9295  1584  0834               	movf	___llmod@dividend+2,w
  9296  1585  00B0               	movwf	?___llmod+2
  9297  1586  0833               	movf	___llmod@dividend+1,w
  9298  1587  00AF               	movwf	?___llmod+1
  9299  1588  0832               	movf	___llmod@dividend,w
  9300  1589  00AE               	movwf	?___llmod
  9301  158A  0008               	return
  9302  158B                     __end_of___llmod:	
  9303                           
  9304                           	psect	text44
  9305  16C1                     __ptext44:	
  9306 ;; *************** function ___lldiv *****************
  9307 ;; Defined at:
  9308 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lldiv.c"
  9309 ;; Parameters:    Size  Location     Type
  9310 ;;  divisor         4    0[BANK0 ] unsigned long 
  9311 ;;  dividend        4    4[BANK0 ] unsigned long 
  9312 ;; Auto vars:     Size  Location     Type
  9313 ;;  quotient        4    9[BANK0 ] unsigned long 
  9314 ;;  counter         1   13[BANK0 ] unsigned char 
  9315 ;; Return value:  Size  Location     Type
  9316 ;;                  4    0[BANK0 ] unsigned long 
  9317 ;; Registers used:
  9318 ;;		wreg, status,2, status,0
  9319 ;; Tracked objects:
  9320 ;;		On entry : 0/0
  9321 ;;		On exit  : 0/0
  9322 ;;		Unchanged: 0/0
  9323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9324 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9325 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9326 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9327 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9328 ;;Total ram usage:       14 bytes
  9329 ;; Hardware stack levels used:    1
  9330 ;; Hardware stack levels required when called:    4
  9331 ;; This function calls:
  9332 ;;		Nothing
  9333 ;; This function is called by:
  9334 ;;		_printf
  9335 ;; This function uses a non-reentrant model
  9336 ;;
  9337                           
  9338                           
  9339                           ;psect for function ___lldiv
  9340  16C1                     ___lldiv:	
  9341                           
  9342                           ;incstack = 0
  9343                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  9344  16C1  3000               	movlw	0
  9345  16C2  0020               	movlb	0	; select bank0
  9346  16C3  00AC               	movwf	___lldiv@quotient+3
  9347  16C4  3000               	movlw	0
  9348  16C5  00AB               	movwf	___lldiv@quotient+2
  9349  16C6  3000               	movlw	0
  9350  16C7  00AA               	movwf	___lldiv@quotient+1
  9351  16C8  3000               	movlw	0
  9352  16C9  00A9               	movwf	___lldiv@quotient
  9353  16CA  0823               	movf	___lldiv@divisor+3,w
  9354  16CB  0422               	iorwf	___lldiv@divisor+2,w
  9355  16CC  0421               	iorwf	___lldiv@divisor+1,w
  9356  16CD  0420               	iorwf	___lldiv@divisor,w
  9357  16CE  1903               	skipnz
  9358  16CF  2F0B               	goto	l2676
  9359  16D0  01AD               	clrf	___lldiv@counter
  9360  16D1  0AAD               	incf	___lldiv@counter,f
  9361  16D2                     l2662:	
  9362  16D2  1BA3               	btfsc	___lldiv@divisor+3,7
  9363  16D3  2EE0               	goto	l2664
  9364  16D4  3001               	movlw	1
  9365  16D5                     u3415:	
  9366  16D5  35A0               	lslf	___lldiv@divisor,f
  9367  16D6  0DA1               	rlf	___lldiv@divisor+1,f
  9368  16D7  0DA2               	rlf	___lldiv@divisor+2,f
  9369  16D8  0DA3               	rlf	___lldiv@divisor+3,f
  9370  16D9  0B89               	decfsz	9,f
  9371  16DA  2ED5               	goto	u3415
  9372  16DB  3001               	movlw	1
  9373  16DC  00A8               	movwf	??___lldiv
  9374  16DD  0828               	movf	??___lldiv,w
  9375  16DE  07AD               	addwf	___lldiv@counter,f
  9376  16DF  2ED2               	goto	l2662
  9377  16E0                     l2664:	
  9378  16E0  3001               	movlw	1
  9379  16E1                     u3435:	
  9380  16E1  35A9               	lslf	___lldiv@quotient,f
  9381  16E2  0DAA               	rlf	___lldiv@quotient+1,f
  9382  16E3  0DAB               	rlf	___lldiv@quotient+2,f
  9383  16E4  0DAC               	rlf	___lldiv@quotient+3,f
  9384  16E5  0B89               	decfsz	9,f
  9385  16E6  2EE1               	goto	u3435
  9386  16E7  0823               	movf	___lldiv@divisor+3,w
  9387  16E8  0227               	subwf	___lldiv@dividend+3,w
  9388  16E9  1D03               	skipz
  9389  16EA  2EF5               	goto	u3445
  9390  16EB  0822               	movf	___lldiv@divisor+2,w
  9391  16EC  0226               	subwf	___lldiv@dividend+2,w
  9392  16ED  1D03               	skipz
  9393  16EE  2EF5               	goto	u3445
  9394  16EF  0821               	movf	___lldiv@divisor+1,w
  9395  16F0  0225               	subwf	___lldiv@dividend+1,w
  9396  16F1  1D03               	skipz
  9397  16F2  2EF5               	goto	u3445
  9398  16F3  0820               	movf	___lldiv@divisor,w
  9399  16F4  0224               	subwf	___lldiv@dividend,w
  9400  16F5                     u3445:	
  9401  16F5  1C03               	skipc
  9402  16F6  2F00               	goto	l2672
  9403  16F7  0820               	movf	___lldiv@divisor,w
  9404  16F8  02A4               	subwf	___lldiv@dividend,f
  9405  16F9  0821               	movf	___lldiv@divisor+1,w
  9406  16FA  3BA5               	subwfb	___lldiv@dividend+1,f
  9407  16FB  0822               	movf	___lldiv@divisor+2,w
  9408  16FC  3BA6               	subwfb	___lldiv@dividend+2,f
  9409  16FD  0823               	movf	___lldiv@divisor+3,w
  9410  16FE  3BA7               	subwfb	___lldiv@dividend+3,f
  9411  16FF  1429               	bsf	___lldiv@quotient,0
  9412  1700                     l2672:	
  9413  1700  3001               	movlw	1
  9414  1701                     u3455:	
  9415  1701  36A3               	lsrf	___lldiv@divisor+3,f
  9416  1702  0CA2               	rrf	___lldiv@divisor+2,f
  9417  1703  0CA1               	rrf	___lldiv@divisor+1,f
  9418  1704  0CA0               	rrf	___lldiv@divisor,f
  9419  1705  0B89               	decfsz	9,f
  9420  1706  2F01               	goto	u3455
  9421  1707  3001               	movlw	1
  9422  1708  02AD               	subwf	___lldiv@counter,f
  9423  1709  1D03               	btfss	3,2
  9424  170A  2EE0               	goto	l2664
  9425  170B                     l2676:	
  9426  170B  082C               	movf	___lldiv@quotient+3,w
  9427  170C  00A3               	movwf	?___lldiv+3
  9428  170D  082B               	movf	___lldiv@quotient+2,w
  9429  170E  00A2               	movwf	?___lldiv+2
  9430  170F  082A               	movf	___lldiv@quotient+1,w
  9431  1710  00A1               	movwf	?___lldiv+1
  9432  1711  0829               	movf	___lldiv@quotient,w
  9433  1712  00A0               	movwf	?___lldiv
  9434  1713  0008               	return
  9435  1714                     __end_of___lldiv:	
  9436                           
  9437                           	psect	text45
  9438  1779                     __ptext45:	
  9439 ;; *************** function ___fttol *****************
  9440 ;; Defined at:
  9441 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  9442 ;; Parameters:    Size  Location     Type
  9443 ;;  f1              3   47[BANK0 ] float 
  9444 ;; Auto vars:     Size  Location     Type
  9445 ;;  lval            4   56[BANK0 ] unsigned long 
  9446 ;;  exp1            1   60[BANK0 ] unsigned char 
  9447 ;;  sign1           1   55[BANK0 ] unsigned char 
  9448 ;; Return value:  Size  Location     Type
  9449 ;;                  4   47[BANK0 ] long 
  9450 ;; Registers used:
  9451 ;;		wreg, status,2, status,0
  9452 ;; Tracked objects:
  9453 ;;		On entry : 0/0
  9454 ;;		On exit  : 0/0
  9455 ;;		Unchanged: 0/0
  9456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9457 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9458 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9459 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9460 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9461 ;;Total ram usage:       14 bytes
  9462 ;; Hardware stack levels used:    1
  9463 ;; Hardware stack levels required when called:    4
  9464 ;; This function calls:
  9465 ;;		Nothing
  9466 ;; This function is called by:
  9467 ;;		_printf
  9468 ;; This function uses a non-reentrant model
  9469 ;;
  9470                           
  9471                           
  9472                           ;psect for function ___fttol
  9473  1779                     ___fttol:	
  9474                           
  9475                           ;incstack = 0
  9476                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  9477  1779  0020               	movlb	0	; select bank0
  9478  177A  084F               	movf	___fttol@f1,w
  9479  177B  00D3               	movwf	??___fttol
  9480  177C  0850               	movf	___fttol@f1+1,w
  9481  177D  00D4               	movwf	??___fttol+1
  9482  177E  0851               	movf	___fttol@f1+2,w
  9483  177F  00D5               	movwf	??___fttol+2
  9484  1780  1003               	clrc
  9485  1781  0D54               	rlf	??___fttol+1,w
  9486  1782  0D55               	rlf	??___fttol+2,w
  9487  1783  00D6               	movwf	??___fttol+3
  9488  1784  0856               	movf	??___fttol+3,w
  9489  1785  00DC               	movwf	___fttol@exp1
  9490  1786  085C               	movf	___fttol@exp1,w
  9491  1787  1D03               	btfss	3,2
  9492  1788  2F92               	goto	l2620
  9493  1789  3000               	movlw	0
  9494  178A  00D2               	movwf	?___fttol+3
  9495  178B  3000               	movlw	0
  9496  178C  00D1               	movwf	?___fttol+2
  9497  178D  3000               	movlw	0
  9498  178E  00D0               	movwf	?___fttol+1
  9499  178F  3000               	movlw	0
  9500  1790  00CF               	movwf	?___fttol
  9501  1791  0008               	return
  9502  1792                     l2620:	
  9503  1792  084F               	movf	___fttol@f1,w
  9504  1793  00D3               	movwf	??___fttol
  9505  1794  0850               	movf	___fttol@f1+1,w
  9506  1795  00D4               	movwf	??___fttol+1
  9507  1796  0851               	movf	___fttol@f1+2,w
  9508  1797  00D5               	movwf	??___fttol+2
  9509  1798  3017               	movlw	23
  9510  1799                     u3315:	
  9511  1799  36D5               	lsrf	??___fttol+2,f
  9512  179A  0CD4               	rrf	??___fttol+1,f
  9513  179B  0CD3               	rrf	??___fttol,f
  9514  179C  0B89               	decfsz	9,f
  9515  179D  2F99               	goto	u3315
  9516  179E  0853               	movf	??___fttol,w
  9517  179F  00D6               	movwf	??___fttol+3
  9518  17A0  0856               	movf	??___fttol+3,w
  9519  17A1  00D7               	movwf	___fttol@sign1
  9520  17A2  17D0               	bsf	___fttol@f1+1,7
  9521  17A3  30FF               	movlw	255
  9522  17A4  05CF               	andwf	___fttol@f1,f
  9523  17A5  30FF               	movlw	255
  9524  17A6  05D0               	andwf	___fttol@f1+1,f
  9525  17A7  3000               	movlw	0
  9526  17A8  05D1               	andwf	___fttol@f1+2,f
  9527  17A9  084F               	movf	___fttol@f1,w
  9528  17AA  00D8               	movwf	___fttol@lval
  9529  17AB  0850               	movf	___fttol@f1+1,w
  9530  17AC  00D9               	movwf	___fttol@lval+1
  9531  17AD  0851               	movf	___fttol@f1+2,w
  9532  17AE  00DA               	movwf	___fttol@lval+2
  9533  17AF  01DB               	clrf	___fttol@lval+3
  9534  17B0  308E               	movlw	142
  9535  17B1  02DC               	subwf	___fttol@exp1,f
  9536  17B2  1FDC               	btfss	___fttol@exp1,7
  9537  17B3  2FD0               	goto	l2640
  9538  17B4  085C               	movf	___fttol@exp1,w
  9539  17B5  3A80               	xorlw	128
  9540  17B6  3E8F               	addlw	143
  9541  17B7  1803               	skipnc
  9542  17B8  2FC2               	goto	l2638
  9543  17B9  3000               	movlw	0
  9544  17BA  00D2               	movwf	?___fttol+3
  9545  17BB  3000               	movlw	0
  9546  17BC  00D1               	movwf	?___fttol+2
  9547  17BD  3000               	movlw	0
  9548  17BE  00D0               	movwf	?___fttol+1
  9549  17BF  3000               	movlw	0
  9550  17C0  00CF               	movwf	?___fttol
  9551  17C1  0008               	return
  9552  17C2                     l2638:	
  9553  17C2  3001               	movlw	1
  9554  17C3                     u3345:	
  9555  17C3  36DB               	lsrf	___fttol@lval+3,f
  9556  17C4  0CDA               	rrf	___fttol@lval+2,f
  9557  17C5  0CD9               	rrf	___fttol@lval+1,f
  9558  17C6  0CD8               	rrf	___fttol@lval,f
  9559  17C7  0B89               	decfsz	9,f
  9560  17C8  2FC3               	goto	u3345
  9561  17C9  3001               	movlw	1
  9562  17CA  00D3               	movwf	??___fttol
  9563  17CB  0853               	movf	??___fttol,w
  9564  17CC  07DC               	addwf	___fttol@exp1,f
  9565  17CD  1903               	btfsc	3,2
  9566  17CE  2FE9               	goto	l2648
  9567  17CF  2FC2               	goto	l2638
  9568  17D0                     l2640:	
  9569  17D0  3018               	movlw	24
  9570  17D1  025C               	subwf	___fttol@exp1,w
  9571  17D2  1C03               	skipc
  9572  17D3  2FE6               	goto	l794
  9573  17D4  3000               	movlw	0
  9574  17D5  00D2               	movwf	?___fttol+3
  9575  17D6  3000               	movlw	0
  9576  17D7  00D1               	movwf	?___fttol+2
  9577  17D8  3000               	movlw	0
  9578  17D9  00D0               	movwf	?___fttol+1
  9579  17DA  3000               	movlw	0
  9580  17DB  00CF               	movwf	?___fttol
  9581  17DC  0008               	return
  9582  17DD                     l2646:	
  9583  17DD  3001               	movlw	1
  9584  17DE                     u3375:	
  9585  17DE  35D8               	lslf	___fttol@lval,f
  9586  17DF  0DD9               	rlf	___fttol@lval+1,f
  9587  17E0  0DDA               	rlf	___fttol@lval+2,f
  9588  17E1  0DDB               	rlf	___fttol@lval+3,f
  9589  17E2  0B89               	decfsz	9,f
  9590  17E3  2FDE               	goto	u3375
  9591  17E4  3001               	movlw	1
  9592  17E5  02DC               	subwf	___fttol@exp1,f
  9593  17E6                     l794:	
  9594  17E6  085C               	movf	___fttol@exp1,w
  9595  17E7  1D03               	btfss	3,2
  9596  17E8  2FDD               	goto	l2646
  9597  17E9                     l2648:	
  9598  17E9  0857               	movf	___fttol@sign1,w
  9599  17EA  1903               	btfsc	3,2
  9600  17EB  2FF7               	goto	l2652
  9601  17EC  09D8               	comf	___fttol@lval,f
  9602  17ED  09D9               	comf	___fttol@lval+1,f
  9603  17EE  09DA               	comf	___fttol@lval+2,f
  9604  17EF  09DB               	comf	___fttol@lval+3,f
  9605  17F0  0AD8               	incf	___fttol@lval,f
  9606  17F1  1903               	skipnz
  9607  17F2  0AD9               	incf	___fttol@lval+1,f
  9608  17F3  1903               	skipnz
  9609  17F4  0ADA               	incf	___fttol@lval+2,f
  9610  17F5  1903               	skipnz
  9611  17F6  0ADB               	incf	___fttol@lval+3,f
  9612  17F7                     l2652:	
  9613  17F7  085B               	movf	___fttol@lval+3,w
  9614  17F8  00D2               	movwf	?___fttol+3
  9615  17F9  085A               	movf	___fttol@lval+2,w
  9616  17FA  00D1               	movwf	?___fttol+2
  9617  17FB  0859               	movf	___fttol@lval+1,w
  9618  17FC  00D0               	movwf	?___fttol+1
  9619  17FD  0858               	movf	___fttol@lval,w
  9620  17FE  00CF               	movwf	?___fttol
  9621  17FF  0008               	return
  9622  1800                     __end_of___fttol:	
  9623                           
  9624                           	psect	text46
  9625  141D                     __ptext46:	
  9626 ;; *************** function ___ftsub *****************
  9627 ;; Defined at:
  9628 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
  9629 ;; Parameters:    Size  Location     Type
  9630 ;;  f2              3   65[BANK0 ] float 
  9631 ;;  f1              3   68[BANK0 ] float 
  9632 ;; Auto vars:     Size  Location     Type
  9633 ;;		None
  9634 ;; Return value:  Size  Location     Type
  9635 ;;                  3   65[BANK0 ] float 
  9636 ;; Registers used:
  9637 ;;		wreg, status,2, status,0, pclath, cstack
  9638 ;; Tracked objects:
  9639 ;;		On entry : 0/0
  9640 ;;		On exit  : 0/0
  9641 ;;		Unchanged: 0/0
  9642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9643 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9646 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9647 ;;Total ram usage:        6 bytes
  9648 ;; Hardware stack levels used:    1
  9649 ;; Hardware stack levels required when called:    6
  9650 ;; This function calls:
  9651 ;;		___ftadd
  9652 ;; This function is called by:
  9653 ;;		_printf
  9654 ;; This function uses a non-reentrant model
  9655 ;;
  9656                           
  9657                           
  9658                           ;psect for function ___ftsub
  9659  141D                     ___ftsub:	
  9660                           
  9661                           ;incstack = 0
  9662                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  9663  141D  0020               	movlb	0	; select bank0
  9664  141E  0863               	movf	___ftsub@f2+2,w
  9665  141F  0462               	iorwf	___ftsub@f2+1,w
  9666  1420  0461               	iorwf	___ftsub@f2,w
  9667  1421  1903               	skipnz
  9668  1422  2C25               	goto	l2610
  9669  1423  3080               	movlw	128
  9670  1424  06E3               	xorwf	___ftsub@f2+2,f
  9671  1425                     l2610:	
  9672  1425  0864               	movf	___ftsub@f1,w
  9673  1426  00D4               	movwf	___ftadd@f1
  9674  1427  0865               	movf	___ftsub@f1+1,w
  9675  1428  00D5               	movwf	___ftadd@f1+1
  9676  1429  0866               	movf	___ftsub@f1+2,w
  9677  142A  00D6               	movwf	___ftadd@f1+2
  9678  142B  0861               	movf	___ftsub@f2,w
  9679  142C  00D7               	movwf	___ftadd@f2
  9680  142D  0862               	movf	___ftsub@f2+1,w
  9681  142E  00D8               	movwf	___ftadd@f2+1
  9682  142F  0863               	movf	___ftsub@f2+2,w
  9683  1430  00D9               	movwf	___ftadd@f2+2
  9684  1431  318A  22AA         	fcall	___ftadd
  9685  1433  0020               	movlb	0	; select bank0
  9686  1434  0854               	movf	?___ftadd,w
  9687  1435  00E1               	movwf	?___ftsub
  9688  1436  0855               	movf	?___ftadd+1,w
  9689  1437  00E2               	movwf	?___ftsub+1
  9690  1438  0856               	movf	?___ftadd+2,w
  9691  1439  00E3               	movwf	?___ftsub+2
  9692  143A  0008               	return
  9693  143B                     __end_of___ftsub:	
  9694                           
  9695                           	psect	text47
  9696  0AAA                     __ptext47:	
  9697 ;; *************** function ___ftadd *****************
  9698 ;; Defined at:
  9699 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
  9700 ;; Parameters:    Size  Location     Type
  9701 ;;  f1              3   52[BANK0 ] float 
  9702 ;;  f2              3   55[BANK0 ] float 
  9703 ;; Auto vars:     Size  Location     Type
  9704 ;;  exp1            1   64[BANK0 ] unsigned char 
  9705 ;;  exp2            1   63[BANK0 ] unsigned char 
  9706 ;;  sign            1   62[BANK0 ] unsigned char 
  9707 ;; Return value:  Size  Location     Type
  9708 ;;                  3   52[BANK0 ] float 
  9709 ;; Registers used:
  9710 ;;		wreg, status,2, status,0, pclath, cstack
  9711 ;; Tracked objects:
  9712 ;;		On entry : 0/0
  9713 ;;		On exit  : 0/0
  9714 ;;		Unchanged: 0/0
  9715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9716 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9717 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9718 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9719 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9720 ;;Total ram usage:       13 bytes
  9721 ;; Hardware stack levels used:    1
  9722 ;; Hardware stack levels required when called:    5
  9723 ;; This function calls:
  9724 ;;		___ftpack
  9725 ;; This function is called by:
  9726 ;;		_printf
  9727 ;;		___ftsub
  9728 ;; This function uses a non-reentrant model
  9729 ;;
  9730                           
  9731                           
  9732                           ;psect for function ___ftadd
  9733  0AAA                     ___ftadd:	
  9734                           
  9735                           ;incstack = 0
  9736                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9737  0AAA  0020               	movlb	0	; select bank0
  9738  0AAB  0854               	movf	___ftadd@f1,w
  9739  0AAC  00DA               	movwf	??___ftadd
  9740  0AAD  0855               	movf	___ftadd@f1+1,w
  9741  0AAE  00DB               	movwf	??___ftadd+1
  9742  0AAF  0856               	movf	___ftadd@f1+2,w
  9743  0AB0  00DC               	movwf	??___ftadd+2
  9744  0AB1  1003               	clrc
  9745  0AB2  0D5B               	rlf	??___ftadd+1,w
  9746  0AB3  0D5C               	rlf	??___ftadd+2,w
  9747  0AB4  00DD               	movwf	??___ftadd+3
  9748  0AB5  085D               	movf	??___ftadd+3,w
  9749  0AB6  00E0               	movwf	___ftadd@exp1
  9750  0AB7  0857               	movf	___ftadd@f2,w
  9751  0AB8  00DA               	movwf	??___ftadd
  9752  0AB9  0858               	movf	___ftadd@f2+1,w
  9753  0ABA  00DB               	movwf	??___ftadd+1
  9754  0ABB  0859               	movf	___ftadd@f2+2,w
  9755  0ABC  00DC               	movwf	??___ftadd+2
  9756  0ABD  1003               	clrc
  9757  0ABE  0D5B               	rlf	??___ftadd+1,w
  9758  0ABF  0D5C               	rlf	??___ftadd+2,w
  9759  0AC0  00DD               	movwf	??___ftadd+3
  9760  0AC1  085D               	movf	??___ftadd+3,w
  9761  0AC2  00DF               	movwf	___ftadd@exp2
  9762  0AC3  0860               	movf	___ftadd@exp1,w
  9763  0AC4  1903               	btfsc	3,2
  9764  0AC5  2AD2               	goto	l2294
  9765  0AC6  085F               	movf	___ftadd@exp2,w
  9766  0AC7  0260               	subwf	___ftadd@exp1,w
  9767  0AC8  1803               	skipnc
  9768  0AC9  2AD9               	goto	l2298
  9769  0ACA  0360               	decf	___ftadd@exp1,w
  9770  0ACB  3AFF               	xorlw	255
  9771  0ACC  075F               	addwf	___ftadd@exp2,w
  9772  0ACD  00DA               	movwf	??___ftadd
  9773  0ACE  3019               	movlw	25
  9774  0ACF  025A               	subwf	??___ftadd,w
  9775  0AD0  1C03               	skipc
  9776  0AD1  2AD9               	goto	l2298
  9777  0AD2                     l2294:	
  9778  0AD2  0857               	movf	___ftadd@f2,w
  9779  0AD3  00D4               	movwf	?___ftadd
  9780  0AD4  0858               	movf	___ftadd@f2+1,w
  9781  0AD5  00D5               	movwf	?___ftadd+1
  9782  0AD6  0859               	movf	___ftadd@f2+2,w
  9783  0AD7  00D6               	movwf	?___ftadd+2
  9784  0AD8  0008               	return
  9785  0AD9                     l2298:	
  9786  0AD9  085F               	movf	___ftadd@exp2,w
  9787  0ADA  1903               	btfsc	3,2
  9788  0ADB  0008               	return
  9789  0ADC  0860               	movf	___ftadd@exp1,w
  9790  0ADD  025F               	subwf	___ftadd@exp2,w
  9791  0ADE  1803               	skipnc
  9792  0ADF  2AE8               	goto	l2304
  9793  0AE0  035F               	decf	___ftadd@exp2,w
  9794  0AE1  3AFF               	xorlw	255
  9795  0AE2  0760               	addwf	___ftadd@exp1,w
  9796  0AE3  00DA               	movwf	??___ftadd
  9797  0AE4  3019               	movlw	25
  9798  0AE5  025A               	subwf	??___ftadd,w
  9799  0AE6  1803               	btfsc	3,0
  9800  0AE7  0008               	return
  9801  0AE8                     l2304:	
  9802  0AE8  3006               	movlw	6
  9803  0AE9  00DA               	movwf	??___ftadd
  9804  0AEA  085A               	movf	??___ftadd,w
  9805  0AEB  00DE               	movwf	___ftadd@sign
  9806  0AEC  1BD6               	btfsc	___ftadd@f1+2,7
  9807  0AED  17DE               	bsf	___ftadd@sign,7
  9808  0AEE  1BD9               	btfsc	___ftadd@f2+2,7
  9809  0AEF  175E               	bsf	___ftadd@sign,6
  9810  0AF0  17D5               	bsf	___ftadd@f1+1,7
  9811  0AF1  30FF               	movlw	255
  9812  0AF2  05D4               	andwf	___ftadd@f1,f
  9813  0AF3  30FF               	movlw	255
  9814  0AF4  05D5               	andwf	___ftadd@f1+1,f
  9815  0AF5  3000               	movlw	0
  9816  0AF6  05D6               	andwf	___ftadd@f1+2,f
  9817  0AF7  17D8               	bsf	___ftadd@f2+1,7
  9818  0AF8  30FF               	movlw	255
  9819  0AF9  05D7               	andwf	___ftadd@f2,f
  9820  0AFA  30FF               	movlw	255
  9821  0AFB  05D8               	andwf	___ftadd@f2+1,f
  9822  0AFC  3000               	movlw	0
  9823  0AFD  05D9               	andwf	___ftadd@f2+2,f
  9824  0AFE  085F               	movf	___ftadd@exp2,w
  9825  0AFF  0260               	subwf	___ftadd@exp1,w
  9826  0B00  1803               	skipnc
  9827  0B01  2B24               	goto	l2326
  9828  0B02                     l2316:	
  9829  0B02  3001               	movlw	1
  9830  0B03                     u2675:	
  9831  0B03  35D7               	lslf	___ftadd@f2,f
  9832  0B04  0DD8               	rlf	___ftadd@f2+1,f
  9833  0B05  0DD9               	rlf	___ftadd@f2+2,f
  9834  0B06  0B89               	decfsz	9,f
  9835  0B07  2B03               	goto	u2675
  9836  0B08  3001               	movlw	1
  9837  0B09  02DF               	subwf	___ftadd@exp2,f
  9838  0B0A  085F               	movf	___ftadd@exp2,w
  9839  0B0B  0660               	xorwf	___ftadd@exp1,w
  9840  0B0C  1903               	skipnz
  9841  0B0D  2B1F               	goto	l2324
  9842  0B0E  3001               	movlw	1
  9843  0B0F  02DE               	subwf	___ftadd@sign,f
  9844  0B10  085E               	movf	___ftadd@sign,w
  9845  0B11  3907               	andlw	7
  9846  0B12  1903               	btfsc	3,2
  9847  0B13  2B1F               	goto	l2324
  9848  0B14  2B02               	goto	l2316
  9849  0B15                     l2322:	
  9850  0B15  3001               	movlw	1
  9851  0B16                     u2705:	
  9852  0B16  36D6               	lsrf	___ftadd@f1+2,f
  9853  0B17  0CD5               	rrf	___ftadd@f1+1,f
  9854  0B18  0CD4               	rrf	___ftadd@f1,f
  9855  0B19  0B89               	decfsz	9,f
  9856  0B1A  2B16               	goto	u2705
  9857  0B1B  3001               	movlw	1
  9858  0B1C  00DA               	movwf	??___ftadd
  9859  0B1D  085A               	movf	??___ftadd,w
  9860  0B1E  07E0               	addwf	___ftadd@exp1,f
  9861  0B1F                     l2324:	
  9862  0B1F  0860               	movf	___ftadd@exp1,w
  9863  0B20  065F               	xorwf	___ftadd@exp2,w
  9864  0B21  1903               	btfsc	3,2
  9865  0B22  2B49               	goto	l717
  9866  0B23  2B15               	goto	l2322
  9867  0B24                     l2326:	
  9868  0B24  0860               	movf	___ftadd@exp1,w
  9869  0B25  025F               	subwf	___ftadd@exp2,w
  9870  0B26  1803               	skipnc
  9871  0B27  2B49               	goto	l717
  9872  0B28                     l2328:	
  9873  0B28  3001               	movlw	1
  9874  0B29                     u2735:	
  9875  0B29  35D4               	lslf	___ftadd@f1,f
  9876  0B2A  0DD5               	rlf	___ftadd@f1+1,f
  9877  0B2B  0DD6               	rlf	___ftadd@f1+2,f
  9878  0B2C  0B89               	decfsz	9,f
  9879  0B2D  2B29               	goto	u2735
  9880  0B2E  3001               	movlw	1
  9881  0B2F  02E0               	subwf	___ftadd@exp1,f
  9882  0B30  085F               	movf	___ftadd@exp2,w
  9883  0B31  0660               	xorwf	___ftadd@exp1,w
  9884  0B32  1903               	skipnz
  9885  0B33  2B45               	goto	l2336
  9886  0B34  3001               	movlw	1
  9887  0B35  02DE               	subwf	___ftadd@sign,f
  9888  0B36  085E               	movf	___ftadd@sign,w
  9889  0B37  3907               	andlw	7
  9890  0B38  1903               	btfsc	3,2
  9891  0B39  2B45               	goto	l2336
  9892  0B3A  2B28               	goto	l2328
  9893  0B3B                     l2334:	
  9894  0B3B  3001               	movlw	1
  9895  0B3C                     u2765:	
  9896  0B3C  36D9               	lsrf	___ftadd@f2+2,f
  9897  0B3D  0CD8               	rrf	___ftadd@f2+1,f
  9898  0B3E  0CD7               	rrf	___ftadd@f2,f
  9899  0B3F  0B89               	decfsz	9,f
  9900  0B40  2B3C               	goto	u2765
  9901  0B41  3001               	movlw	1
  9902  0B42  00DA               	movwf	??___ftadd
  9903  0B43  085A               	movf	??___ftadd,w
  9904  0B44  07DF               	addwf	___ftadd@exp2,f
  9905  0B45                     l2336:	
  9906  0B45  0860               	movf	___ftadd@exp1,w
  9907  0B46  065F               	xorwf	___ftadd@exp2,w
  9908  0B47  1D03               	skipz
  9909  0B48  2B3B               	goto	l2334
  9910  0B49                     l717:	
  9911  0B49  1FDE               	btfss	___ftadd@sign,7
  9912  0B4A  2B5B               	goto	l2340
  9913  0B4B  30FF               	movlw	255
  9914  0B4C  06D4               	xorwf	___ftadd@f1,f
  9915  0B4D  30FF               	movlw	255
  9916  0B4E  06D5               	xorwf	___ftadd@f1+1,f
  9917  0B4F  30FF               	movlw	255
  9918  0B50  06D6               	xorwf	___ftadd@f1+2,f
  9919  0B51  3001               	movlw	1
  9920  0B52  07D4               	addwf	___ftadd@f1,f
  9921  0B53  3000               	movlw	0
  9922  0B54  1803               	skipnc
  9923  0B55  3001               	movlw	1
  9924  0B56  07D5               	addwf	___ftadd@f1+1,f
  9925  0B57  3000               	movlw	0
  9926  0B58  1803               	skipnc
  9927  0B59  3001               	movlw	1
  9928  0B5A  07D6               	addwf	___ftadd@f1+2,f
  9929  0B5B                     l2340:	
  9930  0B5B  1F5E               	btfss	___ftadd@sign,6
  9931  0B5C  2B6D               	goto	l2344
  9932  0B5D  30FF               	movlw	255
  9933  0B5E  06D7               	xorwf	___ftadd@f2,f
  9934  0B5F  30FF               	movlw	255
  9935  0B60  06D8               	xorwf	___ftadd@f2+1,f
  9936  0B61  30FF               	movlw	255
  9937  0B62  06D9               	xorwf	___ftadd@f2+2,f
  9938  0B63  3001               	movlw	1
  9939  0B64  07D7               	addwf	___ftadd@f2,f
  9940  0B65  3000               	movlw	0
  9941  0B66  1803               	skipnc
  9942  0B67  3001               	movlw	1
  9943  0B68  07D8               	addwf	___ftadd@f2+1,f
  9944  0B69  3000               	movlw	0
  9945  0B6A  1803               	skipnc
  9946  0B6B  3001               	movlw	1
  9947  0B6C  07D9               	addwf	___ftadd@f2+2,f
  9948  0B6D                     l2344:	
  9949  0B6D  01DE               	clrf	___ftadd@sign
  9950  0B6E  0854               	movf	___ftadd@f1,w
  9951  0B6F  07D7               	addwf	___ftadd@f2,f
  9952  0B70  0855               	movf	___ftadd@f1+1,w
  9953  0B71  3DD8               	addwfc	___ftadd@f2+1,f
  9954  0B72  0856               	movf	___ftadd@f1+2,w
  9955  0B73  3DD9               	addwfc	___ftadd@f2+2,f
  9956  0B74  1FD9               	btfss	___ftadd@f2+2,7
  9957  0B75  2B88               	goto	l2354
  9958  0B76  30FF               	movlw	255
  9959  0B77  06D7               	xorwf	___ftadd@f2,f
  9960  0B78  30FF               	movlw	255
  9961  0B79  06D8               	xorwf	___ftadd@f2+1,f
  9962  0B7A  30FF               	movlw	255
  9963  0B7B  06D9               	xorwf	___ftadd@f2+2,f
  9964  0B7C  3001               	movlw	1
  9965  0B7D  07D7               	addwf	___ftadd@f2,f
  9966  0B7E  3000               	movlw	0
  9967  0B7F  1803               	skipnc
  9968  0B80  3001               	movlw	1
  9969  0B81  07D8               	addwf	___ftadd@f2+1,f
  9970  0B82  3000               	movlw	0
  9971  0B83  1803               	skipnc
  9972  0B84  3001               	movlw	1
  9973  0B85  07D9               	addwf	___ftadd@f2+2,f
  9974  0B86  01DE               	clrf	___ftadd@sign
  9975  0B87  0ADE               	incf	___ftadd@sign,f
  9976  0B88                     l2354:	
  9977  0B88  0857               	movf	___ftadd@f2,w
  9978  0B89  00A0               	movwf	___ftpack@arg
  9979  0B8A  0858               	movf	___ftadd@f2+1,w
  9980  0B8B  00A1               	movwf	___ftpack@arg+1
  9981  0B8C  0859               	movf	___ftadd@f2+2,w
  9982  0B8D  00A2               	movwf	___ftpack@arg+2
  9983  0B8E  0860               	movf	___ftadd@exp1,w
  9984  0B8F  00DA               	movwf	??___ftadd
  9985  0B90  085A               	movf	??___ftadd,w
  9986  0B91  00A3               	movwf	___ftpack@exp
  9987  0B92  085E               	movf	___ftadd@sign,w
  9988  0B93  00DB               	movwf	??___ftadd+1
  9989  0B94  085B               	movf	??___ftadd+1,w
  9990  0B95  00A4               	movwf	___ftpack@sign
  9991  0B96  3197  2714         	fcall	___ftpack
  9992  0B98  0020               	movlb	0	; select bank0
  9993  0B99  0820               	movf	?___ftpack,w
  9994  0B9A  00D4               	movwf	?___ftadd
  9995  0B9B  0821               	movf	?___ftpack+1,w
  9996  0B9C  00D5               	movwf	?___ftadd+1
  9997  0B9D  0822               	movf	?___ftpack+2,w
  9998  0B9E  00D6               	movwf	?___ftadd+2
  9999  0B9F  0008               	return
 10000  0BA0                     __end_of___ftadd:	
 10001                           
 10002                           	psect	text48
 10003  1714                     __ptext48:	
 10004 ;; *************** function ___ftpack *****************
 10005 ;; Defined at:
 10006 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 10007 ;; Parameters:    Size  Location     Type
 10008 ;;  arg             3    0[BANK0 ] unsigned um
 10009 ;;  exp             1    3[BANK0 ] unsigned char 
 10010 ;;  sign            1    4[BANK0 ] unsigned char 
 10011 ;; Auto vars:     Size  Location     Type
 10012 ;;		None
 10013 ;; Return value:  Size  Location     Type
 10014 ;;                  3    0[BANK0 ] float 
 10015 ;; Registers used:
 10016 ;;		wreg, status,2, status,0
 10017 ;; Tracked objects:
 10018 ;;		On entry : 0/0
 10019 ;;		On exit  : 0/0
 10020 ;;		Unchanged: 0/0
 10021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10022 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10024 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10025 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10026 ;;Total ram usage:        8 bytes
 10027 ;; Hardware stack levels used:    1
 10028 ;; Hardware stack levels required when called:    4
 10029 ;; This function calls:
 10030 ;;		Nothing
 10031 ;; This function is called by:
 10032 ;;		___awtoft
 10033 ;;		___ftadd
 10034 ;;		___ftdiv
 10035 ;;		___ftmul
 10036 ;;		___lltoft
 10037 ;; This function uses a non-reentrant model
 10038 ;;
 10039                           
 10040                           
 10041                           ;psect for function ___ftpack
 10042  1714                     ___ftpack:	
 10043                           
 10044                           ;incstack = 0
 10045                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 10046  1714  0020               	movlb	0	; select bank0
 10047  1715  0823               	movf	___ftpack@exp,w
 10048  1716  1903               	btfsc	3,2
 10049  1717  2F1D               	goto	l2154
 10050  1718  0822               	movf	___ftpack@arg+2,w
 10051  1719  0421               	iorwf	___ftpack@arg+1,w
 10052  171A  0420               	iorwf	___ftpack@arg,w
 10053  171B  1D03               	skipz
 10054  171C  2F2E               	goto	l2160
 10055  171D                     l2154:	
 10056  171D  3000               	movlw	0
 10057  171E  00A0               	movwf	?___ftpack
 10058  171F  3000               	movlw	0
 10059  1720  00A1               	movwf	?___ftpack+1
 10060  1721  3000               	movlw	0
 10061  1722  00A2               	movwf	?___ftpack+2
 10062  1723  0008               	return
 10063  1724                     l2158:	
 10064  1724  3001               	movlw	1
 10065  1725  00A5               	movwf	??___ftpack
 10066  1726  0825               	movf	??___ftpack,w
 10067  1727  07A3               	addwf	___ftpack@exp,f
 10068  1728  3001               	movlw	1
 10069  1729                     u2245:	
 10070  1729  36A2               	lsrf	___ftpack@arg+2,f
 10071  172A  0CA1               	rrf	___ftpack@arg+1,f
 10072  172B  0CA0               	rrf	___ftpack@arg,f
 10073  172C  0B89               	decfsz	9,f
 10074  172D  2F29               	goto	u2245
 10075  172E                     l2160:	
 10076  172E  30FE               	movlw	254
 10077  172F  0522               	andwf	___ftpack@arg+2,w
 10078  1730  1903               	btfsc	3,2
 10079  1731  2F47               	goto	l686
 10080  1732  2F24               	goto	l2158
 10081  1733                     l2162:	
 10082  1733  3001               	movlw	1
 10083  1734  00A5               	movwf	??___ftpack
 10084  1735  0825               	movf	??___ftpack,w
 10085  1736  07A3               	addwf	___ftpack@exp,f
 10086  1737  3001               	movlw	1
 10087  1738  07A0               	addwf	___ftpack@arg,f
 10088  1739  3000               	movlw	0
 10089  173A  1803               	skipnc
 10090  173B  3001               	movlw	1
 10091  173C  07A1               	addwf	___ftpack@arg+1,f
 10092  173D  3000               	movlw	0
 10093  173E  1803               	skipnc
 10094  173F  3001               	movlw	1
 10095  1740  07A2               	addwf	___ftpack@arg+2,f
 10096  1741  3001               	movlw	1
 10097  1742                     u2265:	
 10098  1742  36A2               	lsrf	___ftpack@arg+2,f
 10099  1743  0CA1               	rrf	___ftpack@arg+1,f
 10100  1744  0CA0               	rrf	___ftpack@arg,f
 10101  1745  0B89               	decfsz	9,f
 10102  1746  2F42               	goto	u2265
 10103  1747                     l686:	
 10104  1747  30FF               	movlw	255
 10105  1748  0522               	andwf	___ftpack@arg+2,w
 10106  1749  1903               	btfsc	3,2
 10107  174A  2F54               	goto	l2170
 10108  174B  2F33               	goto	l2162
 10109  174C                     l2168:	
 10110  174C  3001               	movlw	1
 10111  174D  02A3               	subwf	___ftpack@exp,f
 10112  174E  3001               	movlw	1
 10113  174F                     u2285:	
 10114  174F  35A0               	lslf	___ftpack@arg,f
 10115  1750  0DA1               	rlf	___ftpack@arg+1,f
 10116  1751  0DA2               	rlf	___ftpack@arg+2,f
 10117  1752  0B89               	decfsz	9,f
 10118  1753  2F4F               	goto	u2285
 10119  1754                     l2170:	
 10120  1754  1BA1               	btfsc	___ftpack@arg+1,7
 10121  1755  2F5A               	goto	l693
 10122  1756  3002               	movlw	2
 10123  1757  0223               	subwf	___ftpack@exp,w
 10124  1758  1803               	skipnc
 10125  1759  2F4C               	goto	l2168
 10126  175A                     l693:	
 10127  175A  1823               	btfsc	___ftpack@exp,0
 10128  175B  2F62               	goto	l694
 10129  175C  30FF               	movlw	255
 10130  175D  05A0               	andwf	___ftpack@arg,f
 10131  175E  307F               	movlw	127
 10132  175F  05A1               	andwf	___ftpack@arg+1,f
 10133  1760  30FF               	movlw	255
 10134  1761  05A2               	andwf	___ftpack@arg+2,f
 10135  1762                     l694:	
 10136  1762  1003               	clrc
 10137  1763  0CA3               	rrf	___ftpack@exp,f
 10138  1764  0823               	movf	___ftpack@exp,w
 10139  1765  00A5               	movwf	??___ftpack
 10140  1766  01A6               	clrf	??___ftpack+1
 10141  1767  01A7               	clrf	??___ftpack+2
 10142  1768  3010               	movlw	16
 10143  1769                     u2325:	
 10144  1769  35A5               	lslf	??___ftpack,f
 10145  176A  0DA6               	rlf	??___ftpack+1,f
 10146  176B  0DA7               	rlf	??___ftpack+2,f
 10147  176C  0B89               	decfsz	9,f
 10148  176D  2F69               	goto	u2325
 10149  176E  0825               	movf	??___ftpack,w
 10150  176F  04A0               	iorwf	___ftpack@arg,f
 10151  1770  0826               	movf	??___ftpack+1,w
 10152  1771  04A1               	iorwf	___ftpack@arg+1,f
 10153  1772  0827               	movf	??___ftpack+2,w
 10154  1773  04A2               	iorwf	___ftpack@arg+2,f
 10155  1774  0824               	movf	___ftpack@sign,w
 10156  1775  1903               	btfsc	3,2
 10157  1776  0008               	return
 10158  1777  17A2               	bsf	___ftpack@arg+2,7
 10159  1778  0008               	return
 10160  1779                     __end_of___ftpack:	
 10161                           
 10162                           	psect	text49
 10163  0800                     __ptext49:	
 10164 ;; *************** function ___ftneg *****************
 10165 ;; Defined at:
 10166 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 10167 ;; Parameters:    Size  Location     Type
 10168 ;;  f1              3    0[BANK0 ] float 
 10169 ;; Auto vars:     Size  Location     Type
 10170 ;;		None
 10171 ;; Return value:  Size  Location     Type
 10172 ;;                  3    0[BANK0 ] float 
 10173 ;; Registers used:
 10174 ;;		wreg
 10175 ;; Tracked objects:
 10176 ;;		On entry : 0/0
 10177 ;;		On exit  : 0/0
 10178 ;;		Unchanged: 0/0
 10179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10180 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10183 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10184 ;;Total ram usage:        3 bytes
 10185 ;; Hardware stack levels used:    1
 10186 ;; Hardware stack levels required when called:    4
 10187 ;; This function calls:
 10188 ;;		Nothing
 10189 ;; This function is called by:
 10190 ;;		_printf
 10191 ;; This function uses a non-reentrant model
 10192 ;;
 10193                           
 10194                           
 10195                           ;psect for function ___ftneg
 10196  0800                     ___ftneg:	
 10197                           
 10198                           ;incstack = 0
 10199                           ; Regs used in ___ftneg: [wreg]
 10200  0800  0020               	movlb	0	; select bank0
 10201  0801  0822               	movf	___ftneg@f1+2,w
 10202  0802  0421               	iorwf	___ftneg@f1+1,w
 10203  0803  0420               	iorwf	___ftneg@f1,w
 10204  0804  1903               	skipnz
 10205  0805  0008               	return
 10206  0806  3080               	movlw	128
 10207  0807  06A2               	xorwf	___ftneg@f1+2,f
 10208  0808  0008               	return
 10209  0809                     __end_of___ftneg:	
 10210                           
 10211                           	psect	text50
 10212  14CA                     __ptext50:	
 10213 ;; *************** function ___ftge *****************
 10214 ;; Defined at:
 10215 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 10216 ;; Parameters:    Size  Location     Type
 10217 ;;  ff1             3    0[BANK0 ] float 
 10218 ;;  ff2             3    3[BANK0 ] float 
 10219 ;; Auto vars:     Size  Location     Type
 10220 ;;		None
 10221 ;; Return value:  Size  Location     Type
 10222 ;;		None               void
 10223 ;; Registers used:
 10224 ;;		wreg, status,2, status,0
 10225 ;; Tracked objects:
 10226 ;;		On entry : 0/0
 10227 ;;		On exit  : 0/0
 10228 ;;		Unchanged: 0/0
 10229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10230 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10232 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10233 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10234 ;;Total ram usage:        9 bytes
 10235 ;; Hardware stack levels used:    1
 10236 ;; Hardware stack levels required when called:    4
 10237 ;; This function calls:
 10238 ;;		Nothing
 10239 ;; This function is called by:
 10240 ;;		_RadioOperation
 10241 ;;		_printf
 10242 ;; This function uses a non-reentrant model
 10243 ;;
 10244                           
 10245                           
 10246                           ;psect for function ___ftge
 10247  14CA                     ___ftge:	
 10248                           
 10249                           ;incstack = 0
 10250                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 10251  14CA  0020               	movlb	0	; select bank0
 10252  14CB  1FA2               	btfss	___ftge@ff1+2,7
 10253  14CC  2CE1               	goto	l2582
 10254  14CD  0920               	comf	___ftge@ff1,w
 10255  14CE  00A6               	movwf	??___ftge
 10256  14CF  0921               	comf	___ftge@ff1+1,w
 10257  14D0  00A7               	movwf	??___ftge+1
 10258  14D1  0922               	comf	___ftge@ff1+2,w
 10259  14D2  00A8               	movwf	??___ftge+2
 10260  14D3  0AA6               	incf	??___ftge,f
 10261  14D4  1903               	skipnz
 10262  14D5  0AA7               	incf	??___ftge+1,f
 10263  14D6  1903               	skipnz
 10264  14D7  0AA8               	incf	??___ftge+2,f
 10265  14D8  3000               	movlw	0
 10266  14D9  0726               	addwf	??___ftge,w
 10267  14DA  00A0               	movwf	___ftge@ff1
 10268  14DB  3000               	movlw	0
 10269  14DC  3D27               	addwfc	??___ftge+1,w
 10270  14DD  00A1               	movwf	___ftge@ff1+1
 10271  14DE  3080               	movlw	128
 10272  14DF  3D28               	addwfc	??___ftge+2,w
 10273  14E0  00A2               	movwf	___ftge@ff1+2
 10274  14E1                     l2582:	
 10275  14E1  1FA5               	btfss	___ftge@ff2+2,7
 10276  14E2  2CF7               	goto	l2586
 10277  14E3  0923               	comf	___ftge@ff2,w
 10278  14E4  00A6               	movwf	??___ftge
 10279  14E5  0924               	comf	___ftge@ff2+1,w
 10280  14E6  00A7               	movwf	??___ftge+1
 10281  14E7  0925               	comf	___ftge@ff2+2,w
 10282  14E8  00A8               	movwf	??___ftge+2
 10283  14E9  0AA6               	incf	??___ftge,f
 10284  14EA  1903               	skipnz
 10285  14EB  0AA7               	incf	??___ftge+1,f
 10286  14EC  1903               	skipnz
 10287  14ED  0AA8               	incf	??___ftge+2,f
 10288  14EE  3000               	movlw	0
 10289  14EF  0726               	addwf	??___ftge,w
 10290  14F0  00A3               	movwf	___ftge@ff2
 10291  14F1  3000               	movlw	0
 10292  14F2  3D27               	addwfc	??___ftge+1,w
 10293  14F3  00A4               	movwf	___ftge@ff2+1
 10294  14F4  3080               	movlw	128
 10295  14F5  3D28               	addwfc	??___ftge+2,w
 10296  14F6  00A5               	movwf	___ftge@ff2+2
 10297  14F7                     l2586:	
 10298  14F7  3080               	movlw	128
 10299  14F8  06A2               	xorwf	___ftge@ff1+2,f
 10300  14F9  3080               	movlw	128
 10301  14FA  06A5               	xorwf	___ftge@ff2+2,f
 10302  14FB  0825               	movf	___ftge@ff2+2,w
 10303  14FC  0222               	subwf	___ftge@ff1+2,w
 10304  14FD  1D03               	skipz
 10305  14FE  0008               	return
 10306  14FF  0824               	movf	___ftge@ff2+1,w
 10307  1500  0221               	subwf	___ftge@ff1+1,w
 10308  1501  1D03               	skipz
 10309  1502  0008               	return
 10310  1503  0823               	movf	___ftge@ff2,w
 10311  1504  0220               	subwf	___ftge@ff1,w
 10312  1505  0008               	return
 10313  1506                     __end_of___ftge:	
 10314                           
 10315                           	psect	text51
 10316  13E3                     __ptext51:	
 10317 ;; *************** function _Delay *****************
 10318 ;; Defined at:
 10319 ;;		line 46 in file "Function.c"
 10320 ;; Parameters:    Size  Location     Type
 10321 ;;  wait            2    0[BANK0 ] int 
 10322 ;; Auto vars:     Size  Location     Type
 10323 ;;  x               2    3[BANK0 ] int 
 10324 ;; Return value:  Size  Location     Type
 10325 ;;                  1    wreg      void 
 10326 ;; Registers used:
 10327 ;;		wreg, status,2
 10328 ;; Tracked objects:
 10329 ;;		On entry : 0/0
 10330 ;;		On exit  : 0/0
 10331 ;;		Unchanged: 0/0
 10332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10333 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10334 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10335 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10336 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10337 ;;Total ram usage:        5 bytes
 10338 ;; Hardware stack levels used:    1
 10339 ;; Hardware stack levels required when called:    4
 10340 ;; This function calls:
 10341 ;;		Nothing
 10342 ;; This function is called by:
 10343 ;;		_main
 10344 ;;		_SR_FRSStart
 10345 ;; This function uses a non-reentrant model
 10346 ;;
 10347                           
 10348                           
 10349                           ;psect for function _Delay
 10350  13E3                     _Delay:	
 10351                           
 10352                           ;Function.c: 47: int x;
 10353                           ;Function.c: 48: for (x = 0; x < wait; x++) {
 10354                           
 10355                           ;incstack = 0
 10356                           ; Regs used in _Delay: [wreg+status,2]
 10357  13E3  0020               	movlb	0	; select bank0
 10358  13E4  01A3               	clrf	Delay@x
 10359  13E5  01A4               	clrf	Delay@x+1
 10360  13E6                     l64:	
 10361  13E6  0824               	movf	Delay@x+1,w
 10362  13E7  3A80               	xorlw	128
 10363  13E8  00A2               	movwf	??_Delay
 10364  13E9  0821               	movf	Delay@wait+1,w
 10365  13EA  3A80               	xorlw	128
 10366  13EB  0222               	subwf	??_Delay,w
 10367  13EC  1D03               	skipz
 10368  13ED  2BF0               	goto	u3875
 10369  13EE  0820               	movf	Delay@wait,w
 10370  13EF  0223               	subwf	Delay@x,w
 10371  13F0                     u3875:	
 10372  13F0  1803               	btfsc	3,0
 10373  13F1  0008               	return
 10374                           
 10375                           ;Function.c: 49: _delay((unsigned long)((1)*(4000000/4000.0)));
 10376  13F2  30F9               	movlw	249
 10377  13F3  0020               	movlb	0	; select bank0
 10378  13F4  00A2               	movwf	??_Delay
 10379  13F5                     u4377:	
 10380  13F5  0000               	nop
 10381  13F6  0BA2               	decfsz	??_Delay,f
 10382  13F7  2BF5               	goto	u4377
 10383  13F8  3200               	nop2	;nop
 10384  13F9  0000               	nop
 10385  13FA  3001               	movlw	1
 10386  13FB  0020               	movlb	0	; select bank0
 10387  13FC  07A3               	addwf	Delay@x,f
 10388  13FD  3000               	movlw	0
 10389  13FE  3DA4               	addwfc	Delay@x+1,f
 10390  13FF  2BE6               	goto	l64
 10391  1400                     __end_of_Delay:	
 10392                           
 10393                           	psect	text52
 10394  124C                     __ptext52:	
 10395 ;; *************** function _LEDOff *****************
 10396 ;; Defined at:
 10397 ;;		line 102 in file "Function.c"
 10398 ;; Parameters:    Size  Location     Type
 10399 ;;		None
 10400 ;; Auto vars:     Size  Location     Type
 10401 ;;		None
 10402 ;; Return value:  Size  Location     Type
 10403 ;;                  1    wreg      void 
 10404 ;; Registers used:
 10405 ;;		None
 10406 ;; Tracked objects:
 10407 ;;		On entry : 0/0
 10408 ;;		On exit  : 0/0
 10409 ;;		Unchanged: 0/0
 10410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10415 ;;Total ram usage:        0 bytes
 10416 ;; Hardware stack levels used:    1
 10417 ;; Hardware stack levels required when called:    4
 10418 ;; This function calls:
 10419 ;;		Nothing
 10420 ;; This function is called by:
 10421 ;;		_main
 10422 ;; This function uses a non-reentrant model
 10423 ;;
 10424                           
 10425                           
 10426                           ;psect for function _LEDOff
 10427  124C                     _LEDOff:	
 10428                           
 10429                           ;Function.c: 103: PORTCbits.RC3 = 1;
 10430                           
 10431                           ;incstack = 0
 10432                           ; Regs used in _LEDOff: []
 10433  124C  0020               	movlb	0	; select bank0
 10434  124D  158E               	bsf	14,3	;volatile
 10435                           
 10436                           ;Function.c: 104: PORTCbits.RC4 = 1;
 10437  124E  160E               	bsf	14,4	;volatile
 10438                           
 10439                           ;Function.c: 105: PORTCbits.RC5 = 1;
 10440  124F  168E               	bsf	14,5	;volatile
 10441  1250  0008               	return
 10442  1251                     __end_of_LEDOff:	
 10443                           
 10444                           	psect	intentry
 10445  0004                     __pintentry:	
 10446 ;; *************** function _INTERRUPT_InterruptManager *****************
 10447 ;; Defined at:
 10448 ;;		line 64 in file "Function.c"
 10449 ;; Parameters:    Size  Location     Type
 10450 ;;		None
 10451 ;; Auto vars:     Size  Location     Type
 10452 ;;		None
 10453 ;; Return value:  Size  Location     Type
 10454 ;;                  1    wreg      void 
 10455 ;; Registers used:
 10456 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10457 ;; Tracked objects:
 10458 ;;		On entry : 0/0
 10459 ;;		On exit  : 0/0
 10460 ;;		Unchanged: 0/0
 10461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10464 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10465 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10466 ;;Total ram usage:        1 bytes
 10467 ;; Hardware stack levels used:    1
 10468 ;; Hardware stack levels required when called:    3
 10469 ;; This function calls:
 10470 ;;		_EUSART1_Receive_ISR
 10471 ;;		_EUSART1_Transmit_ISR
 10472 ;;		_TMR2_ISR
 10473 ;; This function is called by:
 10474 ;;		Interrupt level 1
 10475 ;; This function uses a non-reentrant model
 10476 ;;
 10477                           
 10478  0004                     _INTERRUPT_InterruptManager:	
 10479                           
 10480                           ;incstack = 0
 10481                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10482  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 10483  0005  3180               	pagesel	$
 10484  0006  0020               	movlb	0	; select bank0
 10485  0007  087F               	movf	127,w
 10486  0008  00FD               	movwf	??_INTERRUPT_InterruptManager
 10487                           
 10488                           ;Function.c: 66: if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
 10489  0009  0021               	movlb	1	; select bank1
 10490  000A  1C91               	btfss	17,1	;volatile
 10491  000B  2812               	goto	i1l3264
 10492  000C  0020               	movlb	0	; select bank0
 10493  000D  1C91               	btfss	17,1	;volatile
 10494  000E  2812               	goto	i1l3264
 10495                           
 10496                           ;Function.c: 67: {
 10497                           ;Function.c: 68: TMR2_ISR();
 10498  000F  3192  225D  3180   	fcall	_TMR2_ISR
 10499  0012                     i1l3264:	
 10500                           
 10501                           ;Function.c: 69: }
 10502                           ;Function.c: 70: if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
 10503  0012  0021               	movlb	1	; select bank1
 10504  0013  1E91               	btfss	17,5	;volatile
 10505  0014  281B               	goto	i1l3270
 10506  0015  0020               	movlb	0	; select bank0
 10507  0016  1E91               	btfss	17,5	;volatile
 10508  0017  281B               	goto	i1l3270
 10509                           
 10510                           ;Function.c: 71: {
 10511                           ;Function.c: 72: EUSART1_Receive_ISR();
 10512  0018  3192  22BE  3180   	fcall	_EUSART1_Receive_ISR
 10513  001B                     i1l3270:	
 10514                           
 10515                           ;Function.c: 73: }
 10516                           ;Function.c: 74: if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
 10517  001B  0021               	movlb	1	; select bank1
 10518  001C  1E11               	btfss	17,4	;volatile
 10519  001D  2823               	goto	i1l77
 10520  001E  0020               	movlb	0	; select bank0
 10521  001F  1E11               	btfss	17,4	;volatile
 10522  0020  2823               	goto	i1l77
 10523                           
 10524                           ;Function.c: 75: {
 10525                           ;Function.c: 76: EUSART1_Transmit_ISR();
 10526  0021  3193  2375         	fcall	_EUSART1_Transmit_ISR
 10527  0023                     i1l77:	
 10528                           ;Function.c: 78: else
 10529                           ;Function.c: 79: {
 10530                           
 10531                           ;Function.c: 77: }
 10532                           
 10533  0023  087D               	movf	??_INTERRUPT_InterruptManager,w
 10534  0024  0020               	movlb	0	; select bank0
 10535  0025  00FF               	movwf	127
 10536  0026  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 10537  0027  0009               	retfie
 10538  0028                     __end_of_INTERRUPT_InterruptManager:	
 10539                           
 10540                           	psect	text54
 10541  125D                     __ptext54:	
 10542 ;; *************** function _TMR2_ISR *****************
 10543 ;; Defined at:
 10544 ;;		line 48 in file "Timer.c"
 10545 ;; Parameters:    Size  Location     Type
 10546 ;;		None
 10547 ;; Auto vars:     Size  Location     Type
 10548 ;;		None
 10549 ;; Return value:  Size  Location     Type
 10550 ;;                  1    wreg      void 
 10551 ;; Registers used:
 10552 ;;		wreg
 10553 ;; Tracked objects:
 10554 ;;		On entry : 0/0
 10555 ;;		On exit  : 0/0
 10556 ;;		Unchanged: 0/0
 10557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10562 ;;Total ram usage:        0 bytes
 10563 ;; Hardware stack levels used:    1
 10564 ;; This function calls:
 10565 ;;		Nothing
 10566 ;; This function is called by:
 10567 ;;		_INTERRUPT_InterruptManager
 10568 ;; This function uses a non-reentrant model
 10569 ;;
 10570                           
 10571                           
 10572                           ;psect for function _TMR2_ISR
 10573  125D                     _TMR2_ISR:	
 10574                           
 10575                           ;Timer.c: 51: ticker++;
 10576                           
 10577                           ;incstack = 0
 10578                           ; Regs used in _TMR2_ISR: [wreg]
 10579  125D  3001               	movlw	1
 10580  125E  0021               	movlb	1	; select bank1
 10581  125F  07E1               	addwf	_ticker^(0+128),f
 10582  1260  3000               	movlw	0
 10583  1261  3DE2               	addwfc	(_ticker+1)^(0+128),f
 10584                           
 10585                           ;Timer.c: 53: PIR1bits.TMR2IF = 0;
 10586  1262  0020               	movlb	0	; select bank0
 10587  1263  1091               	bcf	17,1	;volatile
 10588  1264  0008               	return
 10589  1265                     __end_of_TMR2_ISR:	
 10590                           
 10591                           	psect	text55
 10592  1375                     __ptext55:	
 10593 ;; *************** function _EUSART1_Transmit_ISR *****************
 10594 ;; Defined at:
 10595 ;;		line 129 in file "UART.c"
 10596 ;; Parameters:    Size  Location     Type
 10597 ;;		None
 10598 ;; Auto vars:     Size  Location     Type
 10599 ;;		None
 10600 ;; Return value:  Size  Location     Type
 10601 ;;                  1    wreg      void 
 10602 ;; Registers used:
 10603 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10604 ;; Tracked objects:
 10605 ;;		On entry : 0/0
 10606 ;;		On exit  : 0/0
 10607 ;;		Unchanged: 0/0
 10608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10611 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10612 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10613 ;;Total ram usage:        1 bytes
 10614 ;; Hardware stack levels used:    1
 10615 ;; Hardware stack levels required when called:    2
 10616 ;; This function calls:
 10617 ;;		_UART_buff_size
 10618 ;;		i1_UART_buff_get
 10619 ;; This function is called by:
 10620 ;;		_INTERRUPT_InterruptManager
 10621 ;; This function uses a non-reentrant model
 10622 ;;
 10623                           
 10624                           
 10625                           ;psect for function _EUSART1_Transmit_ISR
 10626  1375                     _EUSART1_Transmit_ISR:	
 10627                           
 10628                           ;UART.c: 131: if (UART_buff_size(&output_buffer) > 0) {
 10629                           
 10630                           ;incstack = 0
 10631                           ; Regs used in _EUSART1_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10632  1375  303A               	movlw	(low (_output_buffer| (0+256)))& (0+255)
 10633  1376  3192  228B  3193   	fcall	_UART_buff_size
 10634  1379  0871               	movf	?_UART_buff_size+1,w
 10635  137A  3A80               	xorlw	128
 10636  137B  00FB               	movwf	??_EUSART1_Transmit_ISR
 10637  137C  3080               	movlw	128
 10638  137D  027B               	subwf	??_EUSART1_Transmit_ISR,w
 10639  137E  1D03               	skipz
 10640  137F  2B82               	goto	u430_25
 10641  1380  3001               	movlw	1
 10642  1381  0270               	subwf	?_UART_buff_size,w
 10643  1382                     u430_25:	
 10644  1382  1C03               	skipc
 10645  1383  2B8A               	goto	i1l204
 10646                           
 10647                           ;UART.c: 132: TXREG = UART_buff_get(&output_buffer);
 10648  1384  303A               	movlw	(low (_output_buffer| (0+256)))& (0+255)
 10649  1385  3195  25D1         	fcall	i1_UART_buff_get
 10650  1387  0023               	movlb	3	; select bank3
 10651  1388  009A               	movwf	26	;volatile
 10652                           
 10653                           ;UART.c: 133: } else {
 10654  1389  0008               	return
 10655  138A                     i1l204:	
 10656                           
 10657                           ;UART.c: 134: Transmit_stall = 1;
 10658  138A  0021               	movlb	1	; select bank1
 10659  138B  01EE               	clrf	_Transmit_stall^(0+128)
 10660  138C  0AEE               	incf	_Transmit_stall^(0+128),f
 10661                           
 10662                           ;UART.c: 135: PIE1bits.TXIE = 0;
 10663  138D  1211               	bcf	17,4	;volatile
 10664  138E  0008               	return
 10665  138F                     __end_of_EUSART1_Transmit_ISR:	
 10666                           
 10667                           	psect	text56
 10668  15D1                     __ptext56:	
 10669 ;; *************** function i1_UART_buff_get *****************
 10670 ;; Defined at:
 10671 ;;		line 73 in file "UART.c"
 10672 ;; Parameters:    Size  Location     Type
 10673 ;;  _this           1    wreg     PTR struct UART_ring_buf
 10674 ;;		 -> output_buffer(26), input_buffer(26), 
 10675 ;; Auto vars:     Size  Location     Type
 10676 ;;  _this           1   10[COMMON] PTR struct UART_ring_buf
 10677 ;;		 -> output_buffer(26), input_buffer(26), 
 10678 ;;  UART_buff_ge    1    9[COMMON] unsigned char 
 10679 ;; Return value:  Size  Location     Type
 10680 ;;                  1    wreg      unsigned char 
 10681 ;; Registers used:
 10682 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10683 ;; Tracked objects:
 10684 ;;		On entry : 0/0
 10685 ;;		On exit  : 0/0
 10686 ;;		Unchanged: 0/0
 10687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10689 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10690 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10691 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10692 ;;Total ram usage:        5 bytes
 10693 ;; Hardware stack levels used:    1
 10694 ;; Hardware stack levels required when called:    1
 10695 ;; This function calls:
 10696 ;;		i1_UART_buff_modulo_inc
 10697 ;; This function is called by:
 10698 ;;		_EUSART1_Transmit_ISR
 10699 ;; This function uses a non-reentrant model
 10700 ;;
 10701                           
 10702                           
 10703                           ;psect for function i1_UART_buff_get
 10704  15D1                     i1_UART_buff_get:	
 10705                           
 10706                           ;incstack = 0
 10707                           ; Regs used in i1_UART_buff_get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10708                           ;i1UART_buff_get@_this stored from wreg
 10709  15D1  00FA               	movwf	i1UART_buff_get@_this
 10710                           
 10711                           ;UART.c: 74: unsigned char c;
 10712                           ;UART.c: 75: if (_this->count > 0) {
 10713  15D2  087A               	movf	i1UART_buff_get@_this,w
 10714  15D3  3E18               	addlw	24
 10715  15D4  0086               	movwf	6
 10716  15D5  3001               	movlw	1	; select bank2/3
 10717  15D6  0087               	movwf	7
 10718  15D7  3F40               	moviw [0]fsr1
 10719  15D8  00F6               	movwf	??i1_UART_buff_get
 10720  15D9  3F41               	moviw [1]fsr1
 10721  15DA  00F7               	movwf	??i1_UART_buff_get+1
 10722  15DB  0877               	movf	??i1_UART_buff_get+1,w
 10723  15DC  3A80               	xorlw	128
 10724  15DD  00F8               	movwf	??i1_UART_buff_get+2
 10725  15DE  3080               	movlw	128
 10726  15DF  0278               	subwf	??i1_UART_buff_get+2,w
 10727  15E0  1D03               	skipz
 10728  15E1  2DE4               	goto	u415_25
 10729  15E2  3001               	movlw	1
 10730  15E3  0276               	subwf	??i1_UART_buff_get,w
 10731  15E4                     u415_25:	
 10732  15E4  1C03               	skipc
 10733  15E5  2E1B               	goto	i1l3134
 10734                           
 10735                           ;UART.c: 76: c = _this->buf[_this->tail];
 10736  15E6  087A               	movf	i1UART_buff_get@_this,w
 10737  15E7  3E16               	addlw	22
 10738  15E8  0086               	movwf	6
 10739  15E9  3001               	movlw	1	; select bank2/3
 10740  15EA  0087               	movwf	7
 10741  15EB  0801               	movf	1,w
 10742  15EC  077A               	addwf	i1UART_buff_get@_this,w
 10743  15ED  00F6               	movwf	??i1_UART_buff_get
 10744  15EE  0876               	movf	??i1_UART_buff_get,w
 10745  15EF  0086               	movwf	6
 10746  15F0  3001               	movlw	1	; select bank2/3
 10747  15F1  0087               	movwf	7
 10748  15F2  0801               	movf	1,w
 10749  15F3  00F7               	movwf	??i1_UART_buff_get+1
 10750  15F4  0877               	movf	??i1_UART_buff_get+1,w
 10751  15F5  00F9               	movwf	i1UART_buff_get@c
 10752                           
 10753                           ;UART.c: 77: _this->tail = UART_buff_modulo_inc(_this->tail, 20);
 10754  15F6  087A               	movf	i1UART_buff_get@_this,w
 10755  15F7  3E16               	addlw	22
 10756  15F8  0086               	movwf	6
 10757  15F9  3001               	movlw	1	; select bank2/3
 10758  15FA  0087               	movwf	7
 10759  15FB  3F40               	moviw [0]fsr1
 10760  15FC  00F0               	movwf	i1UART_buff_modulo_inc@value
 10761  15FD  3F41               	moviw [1]fsr1
 10762  15FE  00F1               	movwf	i1UART_buff_modulo_inc@value+1
 10763  15FF  3014               	movlw	20
 10764  1600  00F2               	movwf	i1UART_buff_modulo_inc@modulus
 10765  1601  3000               	movlw	0
 10766  1602  00F3               	movwf	i1UART_buff_modulo_inc@modulus+1
 10767  1603  3193  2305  3195   	fcall	i1_UART_buff_modulo_inc
 10768  1606  087A               	movf	i1UART_buff_get@_this,w
 10769  1607  3E16               	addlw	22
 10770  1608  0086               	movwf	6
 10771  1609  3001               	movlw	1	; select bank2/3
 10772  160A  0087               	movwf	7
 10773  160B  0870               	movf	?i1_UART_buff_modulo_inc,w
 10774  160C  3FC0               	movwi [0]fsr1
 10775  160D  0871               	movf	?i1_UART_buff_modulo_inc+1,w
 10776  160E  3FC1               	movwi [1]fsr1
 10777                           
 10778                           ;UART.c: 78: --_this->count;
 10779  160F  087A               	movf	i1UART_buff_get@_this,w
 10780  1610  3E18               	addlw	24
 10781  1611  0086               	movwf	6
 10782  1612  3001               	movlw	1	; select bank2/3
 10783  1613  0087               	movwf	7
 10784  1614  30FF               	movlw	255
 10785  1615  0781               	addwf	1,f
 10786  1616  3141               	addfsr 1,1
 10787  1617  30FF               	movlw	255
 10788  1618  3D81               	addwfc	1,f
 10789  1619  317F               	addfsr 1,-1
 10790                           
 10791                           ;UART.c: 79: } else {
 10792  161A  2E1C               	goto	i1l3136
 10793  161B                     i1l3134:	
 10794                           
 10795                           ;UART.c: 80: c = 0;
 10796  161B  01F9               	clrf	i1UART_buff_get@c
 10797  161C                     i1l3136:	
 10798                           
 10799                           ;UART.c: 81: }
 10800                           ;UART.c: 82: return (c);
 10801  161C  0879               	movf	i1UART_buff_get@c,w
 10802  161D  0008               	return
 10803  161E                     __end_ofi1_UART_buff_get:	
 10804                           
 10805                           	psect	text57
 10806  128B                     __ptext57:	
 10807 ;; *************** function _UART_buff_size *****************
 10808 ;; Defined at:
 10809 ;;		line 85 in file "UART.c"
 10810 ;; Parameters:    Size  Location     Type
 10811 ;;  _this           1    wreg     PTR struct UART_ring_buf
 10812 ;;		 -> output_buffer(26), 
 10813 ;; Auto vars:     Size  Location     Type
 10814 ;;  _this           1    3[COMMON] PTR struct UART_ring_buf
 10815 ;;		 -> output_buffer(26), 
 10816 ;; Return value:  Size  Location     Type
 10817 ;;                  2    0[COMMON] int 
 10818 ;; Registers used:
 10819 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10820 ;; Tracked objects:
 10821 ;;		On entry : 0/0
 10822 ;;		On exit  : 0/0
 10823 ;;		Unchanged: 0/0
 10824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10825 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10826 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10828 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10829 ;;Total ram usage:        4 bytes
 10830 ;; Hardware stack levels used:    1
 10831 ;; This function calls:
 10832 ;;		Nothing
 10833 ;; This function is called by:
 10834 ;;		_EUSART1_Transmit_ISR
 10835 ;; This function uses a non-reentrant model
 10836 ;;
 10837                           
 10838                           
 10839                           ;psect for function _UART_buff_size
 10840  128B                     _UART_buff_size:	
 10841                           
 10842                           ;incstack = 0
 10843                           ; Regs used in _UART_buff_size: [wreg+fsr1l+fsr1h+status,2+status,0]
 10844                           ;UART_buff_size@_this stored from wreg
 10845  128B  00F3               	movwf	UART_buff_size@_this
 10846                           
 10847                           ;UART.c: 86: return (_this->count);
 10848  128C  0873               	movf	UART_buff_size@_this,w
 10849  128D  3E18               	addlw	24
 10850  128E  0086               	movwf	6
 10851  128F  3001               	movlw	1	; select bank2/3
 10852  1290  0087               	movwf	7
 10853  1291  3F40               	moviw [0]fsr1
 10854  1292  00F0               	movwf	?_UART_buff_size
 10855  1293  3F41               	moviw [1]fsr1
 10856  1294  00F1               	movwf	?_UART_buff_size+1
 10857  1295  0008               	return
 10858  1296                     __end_of_UART_buff_size:	
 10859                           
 10860                           	psect	text58
 10861  12BE                     __ptext58:	
 10862 ;; *************** function _EUSART1_Receive_ISR *****************
 10863 ;; Defined at:
 10864 ;;		line 118 in file "UART.c"
 10865 ;; Parameters:    Size  Location     Type
 10866 ;;		None
 10867 ;; Auto vars:     Size  Location     Type
 10868 ;;  data            1   12[COMMON] unsigned char 
 10869 ;; Return value:  Size  Location     Type
 10870 ;;                  1    wreg      void 
 10871 ;; Registers used:
 10872 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10873 ;; Tracked objects:
 10874 ;;		On entry : 0/0
 10875 ;;		On exit  : 0/0
 10876 ;;		Unchanged: 0/0
 10877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10879 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10880 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10881 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10882 ;;Total ram usage:        2 bytes
 10883 ;; Hardware stack levels used:    1
 10884 ;; Hardware stack levels required when called:    2
 10885 ;; This function calls:
 10886 ;;		i1_UART_buff_put
 10887 ;; This function is called by:
 10888 ;;		_INTERRUPT_InterruptManager
 10889 ;; This function uses a non-reentrant model
 10890 ;;
 10891                           
 10892                           
 10893                           ;psect for function _EUSART1_Receive_ISR
 10894  12BE                     _EUSART1_Receive_ISR:	
 10895                           
 10896                           ;UART.c: 119: if (1 == RCSTAbits.OERR) {
 10897                           
 10898                           ;incstack = 0
 10899                           ; Regs used in _EUSART1_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10900  12BE  0023               	movlb	3	; select bank3
 10901  12BF  1C9D               	btfss	29,1	;volatile
 10902  12C0  2AC3               	goto	i1l3234
 10903                           
 10904                           ;UART.c: 122: RCSTAbits.CREN = 0;
 10905  12C1  121D               	bcf	29,4	;volatile
 10906                           
 10907                           ;UART.c: 123: RCSTAbits.CREN = 1;
 10908  12C2  161D               	bsf	29,4	;volatile
 10909  12C3                     i1l3234:	
 10910                           
 10911                           ;UART.c: 124: }
 10912                           ;UART.c: 125: unsigned char data = RCREG;
 10913  12C3  0819               	movf	25,w	;volatile
 10914  12C4  00FB               	movwf	??_EUSART1_Receive_ISR
 10915  12C5  087B               	movf	??_EUSART1_Receive_ISR,w
 10916  12C6  00FC               	movwf	EUSART1_Receive_ISR@data
 10917                           
 10918                           ;UART.c: 126: UART_buff_put(&input_buffer, data);
 10919  12C7  087C               	movf	EUSART1_Receive_ISR@data,w
 10920  12C8  00FB               	movwf	??_EUSART1_Receive_ISR
 10921  12C9  087B               	movf	??_EUSART1_Receive_ISR,w
 10922  12CA  00F6               	movwf	i1UART_buff_put@c
 10923  12CB  3020               	movlw	(low (_input_buffer| (0+256)))& (0+255)
 10924  12CC  3188  2033         	fcall	i1_UART_buff_put
 10925  12CE  0008               	return
 10926  12CF                     __end_of_EUSART1_Receive_ISR:	
 10927                           
 10928                           	psect	text59
 10929  0833                     __ptext59:	
 10930 ;; *************** function i1_UART_buff_put *****************
 10931 ;; Defined at:
 10932 ;;		line 60 in file "UART.c"
 10933 ;; Parameters:    Size  Location     Type
 10934 ;;  _this           1    wreg     PTR struct UART_ring_buf
 10935 ;;		 -> output_buffer(26), input_buffer(26), 
 10936 ;;  c               1    6[COMMON] unsigned char 
 10937 ;; Auto vars:     Size  Location     Type
 10938 ;;  _this           1   10[COMMON] PTR struct UART_ring_buf
 10939 ;;		 -> output_buffer(26), input_buffer(26), 
 10940 ;; Return value:  Size  Location     Type
 10941 ;;                  1    wreg      void 
 10942 ;; Registers used:
 10943 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10944 ;; Tracked objects:
 10945 ;;		On entry : 0/0
 10946 ;;		On exit  : 0/0
 10947 ;;		Unchanged: 0/0
 10948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10949 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10950 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10951 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10952 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10953 ;;Total ram usage:        5 bytes
 10954 ;; Hardware stack levels used:    1
 10955 ;; Hardware stack levels required when called:    1
 10956 ;; This function calls:
 10957 ;;		i1_UART_buff_modulo_inc
 10958 ;; This function is called by:
 10959 ;;		_EUSART1_Receive_ISR
 10960 ;; This function uses a non-reentrant model
 10961 ;;
 10962                           
 10963                           
 10964                           ;psect for function i1_UART_buff_put
 10965  0833                     i1_UART_buff_put:	
 10966                           
 10967                           ;incstack = 0
 10968                           ; Regs used in i1_UART_buff_put: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10969                           ;i1UART_buff_put@_this stored from wreg
 10970  0833  00FA               	movwf	i1UART_buff_put@_this
 10971                           
 10972                           ;UART.c: 61: if (_this->count < 20) {
 10973  0834  087A               	movf	i1UART_buff_put@_this,w
 10974  0835  3E18               	addlw	24
 10975  0836  0086               	movwf	6
 10976  0837  3001               	movlw	1	; select bank2/3
 10977  0838  0087               	movwf	7
 10978  0839  3F40               	moviw [0]fsr1
 10979  083A  00F7               	movwf	??i1_UART_buff_put
 10980  083B  3F41               	moviw [1]fsr1
 10981  083C  00F8               	movwf	??i1_UART_buff_put+1
 10982  083D  0878               	movf	??i1_UART_buff_put+1,w
 10983  083E  3A80               	xorlw	128
 10984  083F  00F9               	movwf	??i1_UART_buff_put+2
 10985  0840  3080               	movlw	128
 10986  0841  0279               	subwf	??i1_UART_buff_put+2,w
 10987  0842  1D03               	skipz
 10988  0843  2846               	goto	u414_25
 10989  0844  3014               	movlw	20
 10990  0845  0277               	subwf	??i1_UART_buff_put,w
 10991  0846                     u414_25:	
 10992  0846  1803               	skipnc
 10993  0847  287B               	goto	i1l3120
 10994                           
 10995                           ;UART.c: 62: _this->buf[_this->head] = c;
 10996  0848  0876               	movf	i1UART_buff_put@c,w
 10997  0849  00F7               	movwf	??i1_UART_buff_put
 10998  084A  087A               	movf	i1UART_buff_put@_this,w
 10999  084B  3E14               	addlw	20
 11000  084C  0086               	movwf	6
 11001  084D  3001               	movlw	1	; select bank2/3
 11002  084E  0087               	movwf	7
 11003  084F  0801               	movf	1,w
 11004  0850  077A               	addwf	i1UART_buff_put@_this,w
 11005  0851  00F8               	movwf	??i1_UART_buff_put+1
 11006  0852  0878               	movf	??i1_UART_buff_put+1,w
 11007  0853  0086               	movwf	6
 11008  0854  3001               	movlw	1	; select bank2/3
 11009  0855  0087               	movwf	7
 11010  0856  0877               	movf	??i1_UART_buff_put,w
 11011  0857  0081               	movwf	1
 11012                           
 11013                           ;UART.c: 63: _this->head = UART_buff_modulo_inc(_this->head, 20);
 11014  0858  087A               	movf	i1UART_buff_put@_this,w
 11015  0859  3E14               	addlw	20
 11016  085A  0086               	movwf	6
 11017  085B  3001               	movlw	1	; select bank2/3
 11018  085C  0087               	movwf	7
 11019  085D  3F40               	moviw [0]fsr1
 11020  085E  00F0               	movwf	i1UART_buff_modulo_inc@value
 11021  085F  3F41               	moviw [1]fsr1
 11022  0860  00F1               	movwf	i1UART_buff_modulo_inc@value+1
 11023  0861  3014               	movlw	20
 11024  0862  00F2               	movwf	i1UART_buff_modulo_inc@modulus
 11025  0863  3000               	movlw	0
 11026  0864  00F3               	movwf	i1UART_buff_modulo_inc@modulus+1
 11027  0865  3193  2305         	fcall	i1_UART_buff_modulo_inc
 11028  0867  087A               	movf	i1UART_buff_put@_this,w
 11029  0868  3E14               	addlw	20
 11030  0869  0086               	movwf	6
 11031  086A  3001               	movlw	1	; select bank2/3
 11032  086B  0087               	movwf	7
 11033  086C  0870               	movf	?i1_UART_buff_modulo_inc,w
 11034  086D  3FC0               	movwi [0]fsr1
 11035  086E  0871               	movf	?i1_UART_buff_modulo_inc+1,w
 11036  086F  3FC1               	movwi [1]fsr1
 11037                           
 11038                           ;UART.c: 64: ++_this->count;
 11039  0870  087A               	movf	i1UART_buff_put@_this,w
 11040  0871  3E18               	addlw	24
 11041  0872  0086               	movwf	6
 11042  0873  3001               	movlw	1	; select bank2/3
 11043  0874  0087               	movwf	7
 11044  0875  3001               	movlw	1
 11045  0876  0781               	addwf	1,f
 11046  0877  3141               	addfsr 1,1
 11047  0878  1803               	skipnc
 11048  0879  0A81               	incf	1,f
 11049                           
 11050                           ;UART.c: 65: } else {
 11051  087A  0008               	return
 11052  087B                     i1l3120:	
 11053                           
 11054                           ;UART.c: 66: _this->buf[_this->head] = c;
 11055  087B  0876               	movf	i1UART_buff_put@c,w
 11056  087C  00F7               	movwf	??i1_UART_buff_put
 11057  087D  087A               	movf	i1UART_buff_put@_this,w
 11058  087E  3E14               	addlw	20
 11059  087F  0086               	movwf	6
 11060  0880  3001               	movlw	1	; select bank2/3
 11061  0881  0087               	movwf	7
 11062  0882  0801               	movf	1,w
 11063  0883  077A               	addwf	i1UART_buff_put@_this,w
 11064  0884  00F8               	movwf	??i1_UART_buff_put+1
 11065  0885  0878               	movf	??i1_UART_buff_put+1,w
 11066  0886  0086               	movwf	6
 11067  0887  3001               	movlw	1	; select bank2/3
 11068  0888  0087               	movwf	7
 11069  0889  0877               	movf	??i1_UART_buff_put,w
 11070  088A  0081               	movwf	1
 11071                           
 11072                           ;UART.c: 67: _this->head = UART_buff_modulo_inc(_this->head, 20);
 11073  088B  087A               	movf	i1UART_buff_put@_this,w
 11074  088C  3E14               	addlw	20
 11075  088D  0086               	movwf	6
 11076  088E  3001               	movlw	1	; select bank2/3
 11077  088F  0087               	movwf	7
 11078  0890  3F40               	moviw [0]fsr1
 11079  0891  00F0               	movwf	i1UART_buff_modulo_inc@value
 11080  0892  3F41               	moviw [1]fsr1
 11081  0893  00F1               	movwf	i1UART_buff_modulo_inc@value+1
 11082  0894  3014               	movlw	20
 11083  0895  00F2               	movwf	i1UART_buff_modulo_inc@modulus
 11084  0896  3000               	movlw	0
 11085  0897  00F3               	movwf	i1UART_buff_modulo_inc@modulus+1
 11086  0898  3193  2305  3188   	fcall	i1_UART_buff_modulo_inc
 11087  089B  087A               	movf	i1UART_buff_put@_this,w
 11088  089C  3E14               	addlw	20
 11089  089D  0086               	movwf	6
 11090  089E  3001               	movlw	1	; select bank2/3
 11091  089F  0087               	movwf	7
 11092  08A0  0870               	movf	?i1_UART_buff_modulo_inc,w
 11093  08A1  3FC0               	movwi [0]fsr1
 11094  08A2  0871               	movf	?i1_UART_buff_modulo_inc+1,w
 11095  08A3  3FC1               	movwi [1]fsr1
 11096                           
 11097                           ;UART.c: 68: _this->tail = UART_buff_modulo_inc(_this->tail, 20);
 11098  08A4  087A               	movf	i1UART_buff_put@_this,w
 11099  08A5  3E16               	addlw	22
 11100  08A6  0086               	movwf	6
 11101  08A7  3001               	movlw	1	; select bank2/3
 11102  08A8  0087               	movwf	7
 11103  08A9  3F40               	moviw [0]fsr1
 11104  08AA  00F0               	movwf	i1UART_buff_modulo_inc@value
 11105  08AB  3F41               	moviw [1]fsr1
 11106  08AC  00F1               	movwf	i1UART_buff_modulo_inc@value+1
 11107  08AD  3014               	movlw	20
 11108  08AE  00F2               	movwf	i1UART_buff_modulo_inc@modulus
 11109  08AF  3000               	movlw	0
 11110  08B0  00F3               	movwf	i1UART_buff_modulo_inc@modulus+1
 11111  08B1  3193  2305         	fcall	i1_UART_buff_modulo_inc
 11112  08B3  087A               	movf	i1UART_buff_put@_this,w
 11113  08B4  3E16               	addlw	22
 11114  08B5  0086               	movwf	6
 11115  08B6  3001               	movlw	1	; select bank2/3
 11116  08B7  0087               	movwf	7
 11117  08B8  0870               	movf	?i1_UART_buff_modulo_inc,w
 11118  08B9  3FC0               	movwi [0]fsr1
 11119  08BA  0871               	movf	?i1_UART_buff_modulo_inc+1,w
 11120  08BB  3FC1               	movwi [1]fsr1
 11121  08BC  0008               	return
 11122  08BD                     __end_ofi1_UART_buff_put:	
 11123                           
 11124                           	psect	text60
 11125  1305                     __ptext60:	
 11126 ;; *************** function i1_UART_buff_modulo_inc *****************
 11127 ;; Defined at:
 11128 ;;		line 89 in file "UART.c"
 11129 ;; Parameters:    Size  Location     Type
 11130 ;;  value           2    0[COMMON] const unsigned int 
 11131 ;;  modulus         2    2[COMMON] const unsigned int 
 11132 ;; Auto vars:     Size  Location     Type
 11133 ;;  UART_buff_mo    2    4[COMMON] unsigned int 
 11134 ;; Return value:  Size  Location     Type
 11135 ;;                  2    0[COMMON] unsigned int 
 11136 ;; Registers used:
 11137 ;;		wreg, status,2, status,0
 11138 ;; Tracked objects:
 11139 ;;		On entry : 0/0
 11140 ;;		On exit  : 0/0
 11141 ;;		Unchanged: 0/0
 11142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11143 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11144 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11146 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11147 ;;Total ram usage:        6 bytes
 11148 ;; Hardware stack levels used:    1
 11149 ;; This function calls:
 11150 ;;		Nothing
 11151 ;; This function is called by:
 11152 ;;		i1_UART_buff_put
 11153 ;;		i1_UART_buff_get
 11154 ;; This function uses a non-reentrant model
 11155 ;;
 11156                           
 11157                           
 11158                           ;psect for function i1_UART_buff_modulo_inc
 11159  1305                     i1_UART_buff_modulo_inc:	
 11160                           
 11161                           ;UART.c: 90: unsigned int my_value = value + 1;
 11162                           
 11163                           ;incstack = 0
 11164                           ; Regs used in i1_UART_buff_modulo_inc: [wreg+status,2+status,0]
 11165  1305  0870               	movf	i1UART_buff_modulo_inc@value,w
 11166  1306  3E01               	addlw	1
 11167  1307  00F4               	movwf	i1UART_buff_modulo_inc@my_value
 11168  1308  3000               	movlw	0
 11169  1309  3D71               	addwfc	i1UART_buff_modulo_inc@value+1,w
 11170  130A  00F5               	movwf	i1UART_buff_modulo_inc@my_value+1
 11171                           
 11172                           ;UART.c: 91: if (my_value >= modulus) {
 11173  130B  0873               	movf	i1UART_buff_modulo_inc@modulus+1,w
 11174  130C  0275               	subwf	i1UART_buff_modulo_inc@my_value+1,w
 11175  130D  1D03               	skipz
 11176  130E  2B11               	goto	u397_25
 11177  130F  0872               	movf	i1UART_buff_modulo_inc@modulus,w
 11178  1310  0274               	subwf	i1UART_buff_modulo_inc@my_value,w
 11179  1311                     u397_25:	
 11180  1311  1C03               	skipc
 11181  1312  2B15               	goto	i1l2950
 11182                           
 11183                           ;UART.c: 92: my_value = 0;
 11184  1313  01F4               	clrf	i1UART_buff_modulo_inc@my_value
 11185  1314  01F5               	clrf	i1UART_buff_modulo_inc@my_value+1
 11186  1315                     i1l2950:	
 11187                           
 11188                           ;UART.c: 93: }
 11189                           ;UART.c: 94: return (my_value);
 11190  1315  0875               	movf	i1UART_buff_modulo_inc@my_value+1,w
 11191  1316  00F1               	movwf	?i1_UART_buff_modulo_inc+1
 11192  1317  0874               	movf	i1UART_buff_modulo_inc@my_value,w
 11193  1318  00F0               	movwf	?i1_UART_buff_modulo_inc
 11194  1319  0008               	return
 11195  131A                     __end_ofi1_UART_buff_modulo_inc:	
 11196  007E                     btemp	set	126	;btemp
 11197  007E                     int$flags	set	126
 11198  007E                     wtemp	set	126
 11199  007E                     wtemp0	set	126
 11200  0080                     wtemp1	set	128
 11201  0082                     wtemp2	set	130
 11202  0084                     wtemp3	set	132
 11203  0086                     wtemp4	set	134
 11204  0088                     wtemp5	set	136
 11205  007F                     wtemp6	set	127
 11206  007E                     ttemp	set	126
 11207  007E                     ttemp0	set	126
 11208  0081                     ttemp1	set	129
 11209  0084                     ttemp2	set	132
 11210  0087                     ttemp3	set	135
 11211  007F                     ttemp4	set	127
 11212  007E                     ltemp	set	126
 11213  007E                     ltemp0	set	126
 11214  0082                     ltemp1	set	130
 11215  0086                     ltemp2	set	134
 11216  0080                     ltemp3	set	128


Data Sizes:
    Strings     113
    Constant    118
    Data        1
    BSS         86
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     44      79
    BANK2            80      0      52
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 

    memset@p	PTR unsigned char  size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 36
		 -> STR_6(CODE[22]), STR_5(CODE[19]), STR_4(CODE[19]), STR_3(CODE[22]), 
		 -> STR_2(CODE[36]), STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK1[2]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 

    sp__memset	PTR void  size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->i1_UART_buff_get
    i1_UART_buff_get->i1_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i1_UART_buff_put
    i1_UART_buff_put->i1_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset
    _RadioOperation->___ftdiv
    ___ftdiv->___ftmul
    ___awtoft->___ftpack
    _ReadVoltage->_SetADCChannel
    _SR_FRSStart->_SetVOX
    _SR_FRSStart->_SetVolume
    _SetVolume->_printf
    _SetVOX->_printf
    _SetPowerSave->_printf
    _SetMIC->_printf
    _SetFrequency->_printf
    _SetCommandMode->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_Send_put
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _UART_buff_get->_UART_buff_modulo_inc
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _SR_FRSStart->_SetMIC
    _SetVolume->_printf
    _SetVOX->_printf
    _SetPowerSave->_printf
    _SetMIC->_printf
    _SetFrequency->_printf
    _SetCommandMode->_printf

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  245441
                              _Delay
                             _LEDOff
                         _RadioBegin
                     _RadioOperation
                              _Start
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (1) _Start                                                0     0      0     305
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     305
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       1     1      0     305
                                              7 BANK0      1     1      0
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               7     3      4     229
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RadioOperation                                       1     1      0    8438
                                             54 BANK0      1     1      0
                        _ClearTicker
                          _GetTicker
                        _ReadCharger
                        _ReadVoltage
                    _SR_FRSPowerDown
                         _SR_FRSTalk
                    _TMR2_StartTimer
                     _TMR2_StopTimer
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2132
                                             38 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    1890
                                              8 BANK0      6     3      3
                        _ReadVoltage (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SR_FRSTalk                                           1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _SR_FRSPowerDown                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ReadVoltage                                          4     1      3      88
                                              1 BANK0      4     1      3
                      _SetADCChannel
 ---------------------------------------------------------------------------------
 (3) _SetADCChannel                                        1     1      0      66
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ReadCharger                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetTicker                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ClearTicker                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RadioBegin                                           0     0      0  236334
                        _SR_FRSStart
 ---------------------------------------------------------------------------------
 (2) _SR_FRSStart                                          0     0      0  236334
                              _Delay
                     _SetCommandMode
                       _SetFrequency
                             _SetMIC
                       _SetPowerSave
                             _SetVOX
                          _SetVolume
 ---------------------------------------------------------------------------------
 (3) _SetVolume                                            3     3      0   39340
                                             77 BANK0      3     3      0
                             _printf
 ---------------------------------------------------------------------------------
 (3) _SetVOX                                               3     1      2   39393
                                             77 BANK0      3     1      2
                             _printf
 ---------------------------------------------------------------------------------
 (3) _SetPowerSave                                         0     0      0   39274
                             _printf
 ---------------------------------------------------------------------------------
 (3) _SetMIC                                               6     5      1   39415
                                             77 BANK0      2     1      1
                                             40 BANK1      4     4      0
                             _printf
 ---------------------------------------------------------------------------------
 (3) _SetFrequency                                         0     0      0   39274
                             _printf
 ---------------------------------------------------------------------------------
 (3) _SetCommandMode                                       0     0      0   39274
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              53    35     18   39274
                                             71 BANK0      6     6      0
                                              0 BANK1     40    22     18
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (5) _scale                                               12     9      3    8867
                                             38 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0    1751
                                             13 BANK0      1     1      0
                           _Send_put
 ---------------------------------------------------------------------------------
 (6) _Send_put                                             2     2      0    1729
                                             11 BANK0      2     2      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (7) _UART_buff_put                                        5     4      1     956
                                              6 BANK0      5     4      1
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (7) _UART_buff_get                                        5     5      0     751
                                              6 BANK0      5     5      0
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _UART_buff_modulo_inc                                 6     2      4     514
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) _fround                                              17    14      3    8669
                                             38 BANK0     14    11      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    2106
                                             16 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3662
                                             22 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              7     3      4    1250
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              9     5      4    1360
                                              7 BANK0      9     5      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) __tdiv_to_l_                                         16    10      6     409
                                              0 BANK0     16    10      6
 ---------------------------------------------------------------------------------
 (5) __div_to_l_                                          20    14      6     552
                                              0 BANK0     20    14      6
 ---------------------------------------------------------------------------------
 (5) ___lltoft                                             6     2      4    1868
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___llmod                                             10     2      8     583
                                             14 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             14     6      8     480
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             14    10      4     411
                                             47 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftsub                                              6     0      6    2971
                                             65 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftadd                                             13     7      6    2798
                                             52 BANK0     13     7      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1746
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3      98
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     666
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (3) _Delay                                                5     3      2     364
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _LEDOff                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           1     1      0    1158
                                             13 COMMON     1     1      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR2_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Transmit_ISR                                1     1      0     503
                                             11 COMMON     1     1      0
                     _UART_buff_size
                    i1_UART_buff_get
 ---------------------------------------------------------------------------------
 (11) i1_UART_buff_get                                     5     5      0     454
                                              6 COMMON     5     5      0
             i1_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (11) _UART_buff_size                                      4     1      3      49
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Receive_ISR                                 2     2      0     655
                                             11 COMMON     2     2      0
                    i1_UART_buff_put
 ---------------------------------------------------------------------------------
 (11) i1_UART_buff_put                                     5     4      1     632
                                              6 COMMON     5     4      1
             i1_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (12) i1_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay
   _LEDOff
   _RadioBegin
     _SR_FRSStart
       _Delay
       _SetCommandMode
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _Send_put
               _UART_buff_get
                 _UART_buff_modulo_inc
               _UART_buff_put
                 _UART_buff_modulo_inc
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _SetFrequency
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _Send_put
               _UART_buff_get
                 _UART_buff_modulo_inc
               _UART_buff_put
                 _UART_buff_modulo_inc
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _SetMIC
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _Send_put
               _UART_buff_get
                 _UART_buff_modulo_inc
               _UART_buff_put
                 _UART_buff_modulo_inc
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _SetPowerSave
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _Send_put
               _UART_buff_get
                 _UART_buff_modulo_inc
               _UART_buff_put
                 _UART_buff_modulo_inc
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _SetVOX
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _Send_put
               _UART_buff_get
                 _UART_buff_modulo_inc
               _UART_buff_put
                 _UART_buff_modulo_inc
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _SetVolume
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _Send_put
               _UART_buff_get
                 _UART_buff_modulo_inc
               _UART_buff_put
                 _UART_buff_modulo_inc
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _RadioOperation
     _ClearTicker
     _GetTicker
     _ReadCharger
     _ReadVoltage
       _SetADCChannel
     _SR_FRSPowerDown
     _SR_FRSTalk
     _TMR2_StartTimer
     _TMR2_StopTimer
     ___awtoft
       _ReadVoltage (ARG)
         _SetADCChannel
       ___ftpack (ARG)
     ___ftdiv
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _Start
     _ADC_Initialize
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _INTERRUPT_Initialize
     _TMR2_Initialize
   _TMR2_StartTimer

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     i1_UART_buff_put
       i1_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     _UART_buff_size
     i1_UART_buff_get
       i1_UART_buff_modulo_inc
   _TMR2_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     2C      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      34       9       65.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      E1      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      E1      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Aug 05 04:12:02 2016

           _eusart1TxBufferRemaining 00EB                                   l64 13E6  
                                 l80 12D5                                   l82 12DA  
                       ___awdiv@sign 002D                  ___wmul@multiplicand 0032  
               i1UART_buff_get@_this 007A                         ___ftadd@exp1 0060  
                       ___ftadd@exp2 005F                         ___ftadd@sign 005E  
                                l320 12E9                                  l424 05C5  
                                l508 1398                                  l380 01D1  
                                l372 006E                                  l294 0BAB  
                                l717 0B49                                  l743 075D  
                                l753 07D6                                  l674 0DAE  
                                l693 175A                                  l694 1762  
                                l686 1747                                  l794 17E6  
                         _SR_FRSTalk 12AF                                  _PR2 001B  
            __end_ofi1_UART_buff_get 161E              __end_ofi1_UART_buff_put 08BD  
                      _SetADCChannel 143B                         ___awmod@sign 0026  
                    _TMR2_Initialize 1281                                  wreg 0009  
                       ___ftdiv@cntr 0050                         ___ftdiv@sign 0055  
                               l2130 0908                                 l2220 1685  
                               l2230 168D                                 l2214 167A  
                               l2118 132B                                 l2160 172E  
                               l2304 0AE8                                 l2232 1699  
                               l2144 166B                                 l3016 12DF  
                               l3104 09D4                                 l2170 1754  
                               l2162 1733                                 l2154 171D  
                               l2322 0B15                                 l2242 16B4  
                               l2146 166D                                 l3210 0C69  
                               l2340 0B5B                                 l2324 0B1F  
                               l2316 0B02                                 l2500 0798  
                               l2420 0687                                 l3220 0C8E  
                               l3204 0C57                                 l2158 1724  
                               l2334 0B3B                                 l2326 0B24  
                               l2510 07B2                                 l2246 16BC  
                               l2238 16AB                                 l2270 15A3  
                               l2262 159D                                 l2168 174C  
                               l2344 0B6D                                 l2336 0B45  
                               l2328 0B28                                 l2520 07D9  
                               l2512 07C0                                 l2272 15AF  
                               l2280 15C4                                 l3224 0C97  
                               l3216 0C85                                 l2354 0B88  
                               l2610 1425                                 l2530 0CBB  
                               l2258 1596                                 l2370 0A23  
                               l2194 1392                                 l2450 0EC3  
                               l3066 1467                                 l3082 097A  
                               l2620 1792                                 l2284 15CC  
                               l2276 15BB                                 l2364 0A0D  
                               l2428 06FF                                 l2444 0E64  
                               l3076 0964                                 l3172 0BCB  
                               l2294 0AD2                                 l2518 07CD  
                               l2382 0A5E                                 l2462 0F84  
                               l2454 0EE0                                 l3254 1369  
                               l2640 17D0                                 l2704 080E  
                               l2536 0CD8                                 l3096 09BB  
                               l2298 0AD9                                 l2706 081E  
                               l2554 0D6B                                 l2546 0D23  
                               l2394 0A7A                                 l2386 0A66  
                               l2802 029C                                 l2730 007F  
                               l2652 17F7                                 l2572 0DA5  
                               l2564 0D8A                                 l2492 077E  
                               l2468 0FE3                                 l2812 02F7  
                               l2724 006A                                 l2900 0048  
                               l3188 0BF0                                 l2716 13B1  
                               l2582 14E1                                 l2646 17DD  
                               l2638 17C2                                 l2662 16D2  
                               l2574 0DB1                                 l2566 0D98  
                               l2478 0745                                 l2398 0A82  
                               l2830 03B1                                 l2806 02F1  
                               l2750 00FF                                 l2726 0070  
                               l2734 0084                                 l2648 17E9  
                               l2672 1700                                 l2664 16E0  
                               l2840 03D7                                 l2736 00A8  
                               l2586 14F7                                 l2834 03BA  
                               l2818 032E                                 l2676 170B  
                               l2692 1577                                 l2860 04E3  
                               l2828 033F                                 l2780 0206  
                               l2940 1451                                 l2686 1551  
                               l2846 03F2                                 l2774 01B5  
                               l2766 0163                                 l2688 155F  
                               l2696 1582                                 l2864 04EC  
                               l2792 0256                                 l2936 1446  
                               l2882 0523                                 l2866 04F1  
                               l2892 056B                                 l2876 051D  
                               l2788 023D                                 l2888 055A  
                               l2898 0571                                 STR_1 10D9  
                               STR_2 1076                                 STR_3 10B0  
                               STR_4 10C6                                 STR_5 10C6  
                               STR_6 109A                                 u2205 08D1  
                               u2215 1632                                 u3025 077F  
                               u3115 07CE                                 u3035 078F  
                               u2325 1769                                 u2245 1729  
                               u3205 0D8B                                 u3045 0799  
                               u2265 1742                                 u2425 1690  
                               u4105 09BC                                 u3315 1799  
                               u3235 0DA6                                 u3155 0D24  
                               u2195 1327                                 u4115 09CB  
                               u2285 174F                                 u3165 0D4E  
                               u3085 07B3                                 u2445 169A  
                               u2525 15A6                                 u2365 1399  
                               u4125 09D5                                 u3415 16D5  
                               u2455 16A4                                 u2375 139E  
                               u2705 0B16                                 u3345 17C3  
                               u3505 156D                                 u2465 16AC  
                               u2545 15B5                                 u4225 0BE2  
                               u3435 16E1                                 u3515 1578  
                               u2555 15BC                                 u4235 0BFF  
                       printf@tmpval 00C0                                 u3445 16F5  
                               u3605 0114                                 u4085 098C  
                               u4245 0C63                                 u2735 0B29  
                               u3375 17DE                                 u3455 1701  
                               u3535 0813                                 u4095 099C  
                               u2905 0A83                                 u4185 0BB7  
                               u2675 0B03                                 u2915 0A89  
                               u2835 0A2F                                 u3715 0322  
                               u2765 0B3C                                 u3485 1554  
                               u2845 0A3F                                 u3645 01DD  
                               u3655 0212                                 u4377 13F5  
                               u2865 0A67                                 u3825 054E  
                               u2875 0A6D                                 u3755 03C5  
                               u3765 03D3                                 u3685 023B  
                               u3875 13F0                                 i1l77 0023  
                               _TMR2 001A                          _SR_FRSStart 1506  
                               _Mode 00E5                                 _main 135D  
                       ___ftpack@arg 0020                         ___ftpack@exp 0023  
                               _time 00E3                                 fsr0h 0005  
                               fsr1h 0007                                 fsr0l 0004  
                               indf0 0000                                 indf1 0001  
                               fsr1l 0006                                 btemp 007E  
                               ltemp 007E                        ??_ReadCharger 0020  
                               start 0028                                 ttemp 007E  
                               wtemp 007E                         ___ftmul@cntr 0044  
                       ___ftmul@sign 0045                         ___fttol@exp1 005C  
                       ___fttol@lval 0058                        ??_ReadVoltage 0024  
                              ?_main 0070                      __end_of___awdiv 16C1  
                    __end_of___ftadd 0BA0                      __end_of___awmod 15D1  
                    __end_of___ftdiv 09F6                      __end_of___ftneg 0809  
                    __end_of___lldiv 1714                      __end_of___ftmul 0AAA  
                    ___awdiv@divisor 0027                      __end_of___llmod 158B  
                    __end_of___ftsub 143B                      __end_of___fttol 1800  
                              _T2CON 001C                                i1l204 138A  
                   ??_SetCommandMode 006D                       ?_SetADCChannel 0070  
               i1UART_buff_put@_this 007A                      ___awdiv@counter 002C  
                              _RCREG 0199                                _RCSTA 019D  
                              _SPBRG 019B                                _TXREG 019A  
                              _TXSTA 019E                                _Delay 13E3  
                       ___lltoft@exp 002D                 _EUSART1_Transmit_ISR 1375  
            __size_of_RadioOperation 00FD                     __end_of_TMR2_ISR 1265  
                              _Start 13C7             ??i1_UART_buff_modulo_inc 0074  
                      ___awtoft@sign 002D                      __end_of_dpowers 1028  
                              _count 00DF                                _scale 0DBA  
                      ___ftpack@sign 0024                                _putch 1251  
                              ltemp0 007E                                ltemp1 0082  
                              ltemp2 0086                                ltemp3 0080  
                        _ClearTicker 1248                                ttemp0 007E  
                              ttemp1 0081                                ttemp2 0084  
                              ttemp3 0087                                ttemp4 007F  
                              status 0003                                wtemp0 007E  
                              wtemp1 0080                                wtemp2 0082  
                              wtemp3 0084                                wtemp4 0086  
                              wtemp5 0088                                wtemp6 007F  
                    _TMR2_StartTimer 1242                      __initialization 002A  
         __end_of_EUSART1_Initialize 1346                         __end_of_main 1375  
                         _RadioBegin 123F                  __end_of_ReadCharger 12E1  
                        SetMIC@scram 006D       i1UART_buff_modulo_inc@my_value 0074  
            __end_of_TMR2_Initialize 128B          ?_INTERRUPT_InterruptManager 0070  
                             ??_main 0070                        ___fttol@sign1 0057  
                        ?_SR_FRSTalk 0070                     __end_of_Send_put 135D  
                 __size_of_GetTicker 0001                     ?i1_UART_buff_get 0070  
               __size_of__tdiv_to_l_ 00B6                     ?i1_UART_buff_put 0076  
                             ?_Delay 0020                ?_EUSART1_Transmit_ISR 0070  
                             ?_Start 0070                  __end_of_ReadVoltage 12F3  
                   ___llmod@dividend 0032                               ?_scale 0046  
                             _ADRESL 009B                     ___awdiv@dividend 0029  
                   __end_of___awtoft 147E                               ?_putch 0070  
                   __end_of___ftpack 1779                     __end_of___lltoft 0833  
                             i1l3120 087B                               i1l3134 161B  
                             i1l3136 161C                               i1l3234 12C3  
                             i1l3270 001B                               _LEDOff 124C  
                             i1l3264 0012                               i1l2950 1315  
                             Delay@x 0023          UART_buff_modulo_inc@modulus 0022  
                             _INTCON 000B                               u414_25 0846  
                             u430_25 1382                               u415_25 15E4  
                             u397_25 1311                               _SetMIC 14A4  
                             _SetVOX 07E2                     __end_of__powers_ 1076  
                             ___ftge 14CA                        _output_buffer 013A  
                             ___wmul 138F                            ??___awdiv 002B  
                          ??___ftadd 005A                            ??___awmod 0024  
                          ??___ftdiv 004C                            ??___ftneg 0023  
                          ??___lldiv 0028                            ??___ftmul 003C  
                          ??___llmod 0036                            ??___ftsub 0067  
                          ??___fttol 0053                               _memset 13AB  
                             _fround 05C6                   __size_of_SetVolume 001D  
                   ___awdiv@quotient 002E                      ___awmod@divisor 0020  
                             _ticker 00E1                      ??_SetADCChannel 0020  
                    ___awmod@counter 0025                               _printf 0042  
              ___ftmul@f3_as_product 0041                        ?_SetFrequency 0070  
                      Send_put@_data 002C         __end_of_UART_buff_modulo_inc 1330  
            __end_of_TMR2_StartTimer 1245      __size_ofi1_UART_buff_modulo_inc 0015  
                    _eusart1RxBuffer 00CC        __size_of_INTERRUPT_Initialize 000A  
                    _eusart1TxBuffer 00D4              __end_of__initialization 003E  
                         ___ftadd@f1 0054                           ___ftadd@f2 0057  
                         ___ftge@ff1 0020                           ___ftge@ff2 0023  
                         ___ftdiv@f1 0049                           ___ftdiv@f2 0046  
                         ___ftdiv@f3 0051                  __size_of_SR_FRSTalk 000F  
                  __end_of_GetTicker 0003                           ___ftneg@f1 0020  
                        _ReadCharger 12CF                           ___awtoft@c 0028  
                      __end_of_Delay 1400                           ___ftmul@f1 0036  
                         ___ftmul@f2 0039                           ___ftsub@f1 0064  
                         ___ftsub@f2 0061                           ___fttol@f1 004F  
                     __pcstackCOMMON 0070                        __end_of_Start 13E3  
                        ?_RadioBegin 0070                         __pidataBANK1 0003  
                      ?_SetPowerSave 0070                            ?_TMR2_ISR 0070  
                         ___lltoft@c 0028                        __end_of_scale 1000  
                      __end_of_putch 1257                     ?_TMR2_Initialize 0070  
                    SetVolume@volume 006F                   UART_buff_get@_this 002A  
                        _ReadVoltage 12E1                __end_of_UART_buff_get 166F  
             ??_EUSART1_Transmit_ISR 007B                __end_of_UART_buff_put 094D  
                     ??_SetFrequency 006D                           __div_to_l_ 0C9D  
                       SetMIC@volume 006E                              ??_Delay 0022  
                     _RadioOperation 0BA0          __end_of_EUSART1_Receive_ISR 12CF  
                    SetADCChannel@ch 0020                              ??_Start 0028  
                    __div_to_l_@exp1 0033                      __div_to_l_@cntr 0032  
                            ??_scale 0049                      __div_to_l_@quot 002E  
                            ??_putch 002D                        _eusart1RxHead 00E9  
                      _eusart1TxHead 00EC                        _eusart1RxTail 00EA  
                         __pbssBANK1 00CC                           __pbssBANK2 0120  
                      _eusart1TxTail 00ED                         ?_SR_FRSStart 0070  
                            ?_LEDOff 0070                    __end_of_SetVolume 141D  
            __size_of_UART_buff_init 000D              __size_of_UART_buff_size 000B  
                      __div_to_l_@f1 0020                        __div_to_l_@f2 0023  
                          ?_Send_put 0070                              ?_SetMIC 006D  
                            ?_SetVOX 006D                           __pmaintext 135D  
                     ??_SetPowerSave 006D               i1_UART_buff_modulo_inc 1305  
                            ?___ftge 0020                              ?___wmul 0030  
                         ??_TMR2_ISR 0070                           __pintentry 0004  
                            ?_memset 0020                              ?_fround 0046  
           __size_of_SR_FRSPowerDown 0012                            ?___awtoft 0028  
                          ?___ftpack 0020                              ?_printf 00A0  
                          ?___lltoft 0028              __size_of_ADC_Initialize 000A  
             __end_of_RadioOperation 0C9D                   UART_buff_put@_this 002A  
       UART_buff_modulo_inc@my_value 0024              __size_of_TMR2_StopTimer 0003  
                   ?_TMR2_StartTimer 0070                  __size_of_RadioBegin 0003  
                    __size_of_LEDOff 0005                              _Battery 00DC  
                       ?_ClearTicker 0070                    __end_of__npowers_ 104F  
                         ??_Send_put 002B                           _scale$1276 004B  
                            _Talking 00E7                      __size_of_SetMIC 0026  
                    __size_of_SetVOX 001E                      __size_of___ftge 003C  
                            ___awdiv 166F                              ___ftadd 0AAA  
               _UART_buff_modulo_inc 131A                              ___awmod 158B  
                            ___ftdiv 094D                              ___ftneg 0800  
                            ___lldiv 16C1                      __size_of___wmul 001C  
                            ___ftmul 09F6                              ___llmod 1548  
                            ___ftsub 141D                              ___fttol 1779  
                         ??___awtoft 002B                           ??___ftpack 0025  
                    __size_of_memset 001C                      __size_of_fround 0166  
                         ??___lltoft 002C                              __ptext1 13C7  
                            __ptext2 1281                              __ptext3 1277  
                            __ptext4 1330                              __ptext5 12A2  
                            __ptext6 13AB                              __ptext7 126D  
                            __ptext8 0BA0                              __ptext9 094D  
                    __size_of_printf 0584                         ??_SR_FRSTalk 0020  
                        ?__div_to_l_ 0020                      ?_RadioOperation 0070  
                            _dpowers 1000                            _T2CONbits 001C  
                   ___awmod@dividend 0022                   _EUSART1_Initialize 1330  
                       SetVOX@volume 006D                              clrloop0 1258  
               end_of_initialization 003E                            Delay@wait 0020  
                ?_EUSART1_Initialize 0070                              memset@c 0020  
                            memset@n 0022                              memset@p 0026  
               __end_of_SetFrequency 14A4                      ___lldiv@divisor 0020  
                    ___lldiv@counter 002D                   __end_of_SR_FRSTalk 12BE  
                          _RCSTAbits 019D                              printf@c 00C7  
                            printf@f 00A0                ?_UART_buff_modulo_inc 0020  
                       __pstringtext 1000                       __tdiv_to_l_@f1 0020  
                     __tdiv_to_l_@f2 0023                 ??_EUSART1_Initialize 0028  
                      ??__tdiv_to_l_ 0026                            _PORTAbits 000C  
                          _PORTCbits 000E                            _TRISAbits 008C  
                          _TRISCbits 008E                    ??_SR_FRSPowerDown 0020  
               __end_of_SetPowerSave 12A2             __size_ofi1_UART_buff_get 004D  
           __size_ofi1_UART_buff_put 008A              __size_of_SetCommandMode 0008  
                     __end_of_LEDOff 1251                          ___ftdiv@exp 0054  
                     _UART_buff_init 12A2                 __size_of_SR_FRSStart 0042  
                     _UART_buff_size 128B                         ?_ReadCharger 0070  
                __size_of__div_to_l_ 011D                          ___ftmul@exp 0040  
                     __end_of_SetMIC 14CA                         ??_RadioBegin 0070  
                     __end_of_SetVOX 0800                            _GetTicker 0002  
       __end_of_INTERRUPT_Initialize 1281                       __end_of___ftge 1506  
                     __end_of___wmul 13AB                    __size_of_TMR2_ISR 0008  
                     _ADC_Initialize 126D                         ?_ReadVoltage 0021  
                     __end_of_memset 13C7                       __end_of_fround 072C  
              __end_of_SetADCChannel 145C                       __end_of_printf 05C6  
                start_initialization 002A                  __end_of__tdiv_to_l_ 07E2  
                     _TMR2_StopTimer 1245        i1UART_buff_modulo_inc@modulus 0072  
                      ReadVoltage@ch 0024                          putch@txData 002D  
                 __end_of_RadioBegin 1242                             ??_LEDOff 0020  
             __end_of_UART_buff_init 12AF                       UART_buff_get@c 0029  
             __end_of_UART_buff_size 1296                       UART_buff_put@c 0026  
                    ___llmod@divisor 002E                      ___llmod@counter 0037  
            ?i1_UART_buff_modulo_inc 0070                 __size_of_ClearTicker 0004  
                          _SetVolume 1400                             ??_SetMIC 00C8  
                           ??_SetVOX 006F               ??_UART_buff_modulo_inc 0024  
                           ??___ftge 0026                    __size_of_Send_put 0017  
                           ??___wmul 0034                           ?_GetTicker 0070  
             __end_of_ADC_Initialize 1277                          __pdataBANK1 00EE  
                           ??_memset 0024                             ??_fround 0049  
                           ??_printf 0067                       _eusart1RxCount 00E8  
                         fround@prec 0053                    __size_of___awtoft 0022  
                  __size_of___ftpack 0065               __end_of_TMR2_StopTimer 1248  
                  __size_of___lltoft 002A                            ___latbits 0002  
      __size_of_EUSART1_Transmit_ISR 001A                        __pcstackBANK0 0020  
                      __pcstackBANK1 00A0             __size_of_TMR2_Initialize 000A  
                UART_buff_init@_this 0027                __size_of_SetFrequency 0026  
                    ?_UART_buff_init 0070                      ?_UART_buff_size 0070  
       __size_of_EUSART1_Receive_ISR 0011       __end_ofi1_UART_buff_modulo_inc 131A  
             __size_of_UART_buff_get 0051                           ?_SetVolume 0070  
             __size_of_UART_buff_put 0090                    ??i1_UART_buff_get 0076  
                  ??i1_UART_buff_put 0077                             ?___awdiv 0027  
                           ?___ftadd 0054                             ?___awmod 0020  
                           ?___ftdiv 0046                             ?___ftneg 0020  
                           ?___lldiv 0020                             ?___ftmul 0036  
                           ?___llmod 002E                             ?___ftsub 0061  
                          __npowers_ 1028                             ?___fttol 004F  
                   ??_RadioOperation 0056                      ?_ADC_Initialize 0070  
       ??_INTERRUPT_InterruptManager 007D                          __tdiv_to_l_ 072C  
                       ??__div_to_l_ 0026                __size_of_SetPowerSave 000C  
                    ?_TMR2_StopTimer 0070                         _SetFrequency 147E  
                     __size_of_Delay 001D                       __size_of_Start 001C  
                     __size_of_scale 0246                       __size_of_putch 0006  
               _INTERRUPT_Initialize 1277                       _SetCommandMode 1265  
                     ___wmul@product 0034                  UART_buff_size@_this 0073  
                          clear_ram0 1257                             _PIE1bits 0091  
           __size_of_TMR2_StartTimer 0003  __size_of_INTERRUPT_InterruptManager 0024  
                           _PIR1bits 0011                   __end_of__div_to_l_ 0DBA  
               __size_of_ReadCharger 0012                          ??_GetTicker 0020  
                           _TMR2_ISR 125D                         _SetPowerSave 1296  
                    _SR_FRSPowerDown 12F3                         _input_buffer 0120  
                         _ADCON0bits 009D                           _ADCON1bits 009E  
                  ___wmul@multiplier 0030                           printf@flag 00B5  
                         printf@fval 00C4                        _UART_buff_get 161E  
                         printf@prec 00B8                        _UART_buff_put 08BD  
               __size_of_ReadVoltage 0012               __end_of_SetCommandMode 126D  
              ?_INTERRUPT_Initialize 0070                    ??_TMR2_Initialize 0020  
                        ??_SetVolume 006D                             _Send_put 1346  
                           _Shutdown 00E6                     __size_of___awdiv 0052  
                   __size_of___ftadd 00F6                     __size_of___awmod 0046  
                   __size_of___ftdiv 00A9                     __size_of___ftneg 0009  
                   __size_of___lldiv 0053                     __size_of___ftmul 00B4  
                   __size_of___llmod 0043                     __size_of___ftsub 001E  
                   __size_of___fttol 0087          __size_of_EUSART1_Initialize 0016  
                           ___awtoft 145C                             ___ftpack 1714  
                        _fround$1274 0050                          _fround$1275 004D  
                           ___lltoft 0809                           _ANSELAbits 018C  
                         _ANSELCbits 018E                       ?_UART_buff_get 0070  
                     ?_UART_buff_put 0026                             __ptext10 145C  
                           __ptext11 1245                             __ptext20 123F  
                           __ptext12 1242                             __ptext21 1506  
                           __ptext13 12AF                             __ptext30 1251  
                           __ptext22 1400                             __ptext14 12F3  
                           __ptext31 1346                             __ptext23 07E2  
                           __ptext15 12E1                             __ptext40 072C  
                           __ptext32 08BD                             __ptext24 1296  
                           __ptext16 143B                             __ptext41 0C9D  
                           __ptext33 161E                             __ptext25 14A4  
                           __ptext17 12CF                             __ptext50 14CA  
                           __ptext42 0809                             __ptext34 131A  
                           __ptext26 147E                             __ptext18 0002  
                           __ptext51 13E3                             __ptext43 1548  
                           __ptext35 05C6                             __ptext27 1265  
                           __ptext19 1248                             __ptext60 1305  
                           __ptext52 124C                             __ptext44 16C1  
                           __ptext36 138F                             __ptext28 0042  
                           __ptext45 1779                             __ptext37 09F6  
                           __ptext29 0DBA                             __ptext54 125D  
                           __ptext46 141D                             __ptext38 158B  
                           __ptext55 1375                             __ptext47 0AAA  
                           __ptext39 166F                             __ptext56 15D1  
                           __ptext48 1714                             __ptext57 128B  
                           __ptext49 0800                             __ptext58 12BE  
                           __ptext59 0833                      ?_SetCommandMode 0070  
                           __powers_ 104F                        ??_SR_FRSStart 0070  
            EUSART1_Receive_ISR@data 007C                        __size_of_main 0018  
                     _Transmit_stall 00EE              __end_of_SR_FRSPowerDown 1305  
                           int$flags 007E                     i1UART_buff_get@c 0079  
                  ??_TMR2_StartTimer 0020   __end_of_INTERRUPT_InterruptManager 0028  
         _INTERRUPT_InterruptManager 0004                            printf@exp 00BE  
                          printf@val 00BA                     i1UART_buff_put@c 0076  
                _EUSART1_Receive_ISR 12BE                           _INTCONbits 000B  
          UART_buff_modulo_inc@value 0020                           _FVRCONbits 0117  
                   ??_UART_buff_init 0027                     ??_UART_buff_size 0073  
             ??_INTERRUPT_Initialize 0020                             memset@p1 0025  
                           scale@scl 004E                      i1_UART_buff_get 15D1  
                    i1_UART_buff_put 0833                             intlevel1 0000  
                   __tdiv_to_l_@exp1 002F                     __tdiv_to_l_@cntr 002E  
                      ??_ClearTicker 0020                     __tdiv_to_l_@quot 002A  
               ?_EUSART1_Receive_ISR 0070                     ___lldiv@dividend 0024  
       __end_of_EUSART1_Transmit_ISR 138F                     ??_ADC_Initialize 0020  
             __size_of_SetADCChannel 0021                  __end_of_SR_FRSStart 1548  
                           printf@ap 00B7        __size_of_UART_buff_modulo_inc 0016  
                   ??_TMR2_StopTimer 0020                      ??_UART_buff_get 0026  
                    ??_UART_buff_put 0027                         ?__tdiv_to_l_ 0020  
                        _printf$1277 00B2                     ___lldiv@quotient 0029  
              ??_EUSART1_Receive_ISR 007B          i1UART_buff_modulo_inc@value 0070  
                   ?_SR_FRSPowerDown 0070                  __end_of_ClearTicker 124C  
