

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Aug 05 00:02:29 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2
    52                           	psect	text38,local,class=CODE,merge=1,delta=2
    53                           	psect	text39,local,class=CODE,merge=1,delta=2
    54                           	psect	text40,local,class=CODE,merge=1,delta=2
    55                           	psect	text41,local,class=CODE,merge=1,delta=2
    56                           	psect	text42,local,class=CODE,merge=1,delta=2
    57                           	psect	text43,local,class=CODE,merge=1,delta=2
    58                           	psect	text44,local,class=CODE,merge=1,delta=2
    59                           	psect	text45,local,class=CODE,merge=1,delta=2
    60                           	psect	text46,local,class=CODE,merge=1,delta=2
    61                           	psect	text47,local,class=CODE,merge=1,delta=2
    62                           	psect	text48,local,class=CODE,merge=1,delta=2
    63                           	psect	text49,local,class=CODE,merge=1,delta=2
    64                           	psect	text50,local,class=CODE,merge=1,delta=2
    65                           	psect	text51,local,class=CODE,merge=1,delta=2
    66                           	psect	text52,local,class=CODE,merge=1,delta=2
    67                           	psect	intentry,global,class=CODE,delta=2
    68                           	psect	text54,local,class=CODE,merge=1,delta=2
    69                           	psect	text55,local,class=CODE,merge=1,delta=2
    70                           	psect	text56,local,class=CODE,merge=1,delta=2
    71                           	psect	text57,local,class=CODE,merge=1,delta=2
    72                           	psect	text58,local,class=CODE,merge=1,delta=2
    73                           	psect	text59,local,class=CODE,merge=1,delta=2
    74                           	psect	text60,local,class=CODE,merge=1,delta=2
    75                           	dabs	1,0x7E,2
    76  0000                     	;# 
    77  0001                     	;# 
    78  0002                     	;# 
    79  0003                     	;# 
    80  0004                     	;# 
    81  0005                     	;# 
    82  0006                     	;# 
    83  0007                     	;# 
    84  0008                     	;# 
    85  0009                     	;# 
    86  000A                     	;# 
    87  000B                     	;# 
    88  000C                     	;# 
    89  000D                     	;# 
    90  000E                     	;# 
    91  0011                     	;# 
    92  0012                     	;# 
    93  0013                     	;# 
    94  0014                     	;# 
    95  0015                     	;# 
    96  0016                     	;# 
    97  0016                     	;# 
    98  0017                     	;# 
    99  0018                     	;# 
   100  0019                     	;# 
   101  001A                     	;# 
   102  001B                     	;# 
   103  001C                     	;# 
   104  001E                     	;# 
   105  001F                     	;# 
   106  008C                     	;# 
   107  008D                     	;# 
   108  008E                     	;# 
   109  0091                     	;# 
   110  0092                     	;# 
   111  0093                     	;# 
   112  0094                     	;# 
   113  0095                     	;# 
   114  0096                     	;# 
   115  0097                     	;# 
   116  0098                     	;# 
   117  0099                     	;# 
   118  009A                     	;# 
   119  009B                     	;# 
   120  009B                     	;# 
   121  009C                     	;# 
   122  009D                     	;# 
   123  009E                     	;# 
   124  010C                     	;# 
   125  010D                     	;# 
   126  010E                     	;# 
   127  0111                     	;# 
   128  0112                     	;# 
   129  0113                     	;# 
   130  0114                     	;# 
   131  0115                     	;# 
   132  0116                     	;# 
   133  0117                     	;# 
   134  0118                     	;# 
   135  0119                     	;# 
   136  011A                     	;# 
   137  011B                     	;# 
   138  011D                     	;# 
   139  011E                     	;# 
   140  018C                     	;# 
   141  018D                     	;# 
   142  018E                     	;# 
   143  0191                     	;# 
   144  0191                     	;# 
   145  0192                     	;# 
   146  0193                     	;# 
   147  0193                     	;# 
   148  0193                     	;# 
   149  0194                     	;# 
   150  0195                     	;# 
   151  0196                     	;# 
   152  0199                     	;# 
   153  019A                     	;# 
   154  019B                     	;# 
   155  019B                     	;# 
   156  019C                     	;# 
   157  019D                     	;# 
   158  019E                     	;# 
   159  019F                     	;# 
   160  020C                     	;# 
   161  020D                     	;# 
   162  020E                     	;# 
   163  0211                     	;# 
   164  0211                     	;# 
   165  0212                     	;# 
   166  0212                     	;# 
   167  0213                     	;# 
   168  0213                     	;# 
   169  0214                     	;# 
   170  0214                     	;# 
   171  0215                     	;# 
   172  0215                     	;# 
   173  0215                     	;# 
   174  0216                     	;# 
   175  0216                     	;# 
   176  0217                     	;# 
   177  0217                     	;# 
   178  0219                     	;# 
   179  021A                     	;# 
   180  021B                     	;# 
   181  021C                     	;# 
   182  021D                     	;# 
   183  021E                     	;# 
   184  021F                     	;# 
   185  0291                     	;# 
   186  0291                     	;# 
   187  0292                     	;# 
   188  0293                     	;# 
   189  0294                     	;# 
   190  0295                     	;# 
   191  0295                     	;# 
   192  0296                     	;# 
   193  0298                     	;# 
   194  0298                     	;# 
   195  0299                     	;# 
   196  029A                     	;# 
   197  029B                     	;# 
   198  029C                     	;# 
   199  029D                     	;# 
   200  029E                     	;# 
   201  0311                     	;# 
   202  0311                     	;# 
   203  0312                     	;# 
   204  0313                     	;# 
   205  0318                     	;# 
   206  0318                     	;# 
   207  0319                     	;# 
   208  031A                     	;# 
   209  038C                     	;# 
   210  038D                     	;# 
   211  038E                     	;# 
   212  0391                     	;# 
   213  0392                     	;# 
   214  0393                     	;# 
   215  0394                     	;# 
   216  0395                     	;# 
   217  0396                     	;# 
   218  039A                     	;# 
   219  039C                     	;# 
   220  039D                     	;# 
   221  039E                     	;# 
   222  039F                     	;# 
   223  0415                     	;# 
   224  0416                     	;# 
   225  0417                     	;# 
   226  041C                     	;# 
   227  041D                     	;# 
   228  041E                     	;# 
   229  0FE4                     	;# 
   230  0FE5                     	;# 
   231  0FE6                     	;# 
   232  0FE7                     	;# 
   233  0FE8                     	;# 
   234  0FE9                     	;# 
   235  0FEA                     	;# 
   236  0FEB                     	;# 
   237  0FED                     	;# 
   238  0FEE                     	;# 
   239  0FEF                     	;# 
   240  0000                     	;# 
   241  0001                     	;# 
   242  0002                     	;# 
   243  0003                     	;# 
   244  0004                     	;# 
   245  0005                     	;# 
   246  0006                     	;# 
   247  0007                     	;# 
   248  0008                     	;# 
   249  0009                     	;# 
   250  000A                     	;# 
   251  000B                     	;# 
   252  000C                     	;# 
   253  000D                     	;# 
   254  000E                     	;# 
   255  0011                     	;# 
   256  0012                     	;# 
   257  0013                     	;# 
   258  0014                     	;# 
   259  0015                     	;# 
   260  0016                     	;# 
   261  0016                     	;# 
   262  0017                     	;# 
   263  0018                     	;# 
   264  0019                     	;# 
   265  001A                     	;# 
   266  001B                     	;# 
   267  001C                     	;# 
   268  001E                     	;# 
   269  001F                     	;# 
   270  008C                     	;# 
   271  008D                     	;# 
   272  008E                     	;# 
   273  0091                     	;# 
   274  0092                     	;# 
   275  0093                     	;# 
   276  0094                     	;# 
   277  0095                     	;# 
   278  0096                     	;# 
   279  0097                     	;# 
   280  0098                     	;# 
   281  0099                     	;# 
   282  009A                     	;# 
   283  009B                     	;# 
   284  009B                     	;# 
   285  009C                     	;# 
   286  009D                     	;# 
   287  009E                     	;# 
   288  010C                     	;# 
   289  010D                     	;# 
   290  010E                     	;# 
   291  0111                     	;# 
   292  0112                     	;# 
   293  0113                     	;# 
   294  0114                     	;# 
   295  0115                     	;# 
   296  0116                     	;# 
   297  0117                     	;# 
   298  0118                     	;# 
   299  0119                     	;# 
   300  011A                     	;# 
   301  011B                     	;# 
   302  011D                     	;# 
   303  011E                     	;# 
   304  018C                     	;# 
   305  018D                     	;# 
   306  018E                     	;# 
   307  0191                     	;# 
   308  0191                     	;# 
   309  0192                     	;# 
   310  0193                     	;# 
   311  0193                     	;# 
   312  0193                     	;# 
   313  0194                     	;# 
   314  0195                     	;# 
   315  0196                     	;# 
   316  0199                     	;# 
   317  019A                     	;# 
   318  019B                     	;# 
   319  019B                     	;# 
   320  019C                     	;# 
   321  019D                     	;# 
   322  019E                     	;# 
   323  019F                     	;# 
   324  020C                     	;# 
   325  020D                     	;# 
   326  020E                     	;# 
   327  0211                     	;# 
   328  0211                     	;# 
   329  0212                     	;# 
   330  0212                     	;# 
   331  0213                     	;# 
   332  0213                     	;# 
   333  0214                     	;# 
   334  0214                     	;# 
   335  0215                     	;# 
   336  0215                     	;# 
   337  0215                     	;# 
   338  0216                     	;# 
   339  0216                     	;# 
   340  0217                     	;# 
   341  0217                     	;# 
   342  0219                     	;# 
   343  021A                     	;# 
   344  021B                     	;# 
   345  021C                     	;# 
   346  021D                     	;# 
   347  021E                     	;# 
   348  021F                     	;# 
   349  0291                     	;# 
   350  0291                     	;# 
   351  0292                     	;# 
   352  0293                     	;# 
   353  0294                     	;# 
   354  0295                     	;# 
   355  0295                     	;# 
   356  0296                     	;# 
   357  0298                     	;# 
   358  0298                     	;# 
   359  0299                     	;# 
   360  029A                     	;# 
   361  029B                     	;# 
   362  029C                     	;# 
   363  029D                     	;# 
   364  029E                     	;# 
   365  0311                     	;# 
   366  0311                     	;# 
   367  0312                     	;# 
   368  0313                     	;# 
   369  0318                     	;# 
   370  0318                     	;# 
   371  0319                     	;# 
   372  031A                     	;# 
   373  038C                     	;# 
   374  038D                     	;# 
   375  038E                     	;# 
   376  0391                     	;# 
   377  0392                     	;# 
   378  0393                     	;# 
   379  0394                     	;# 
   380  0395                     	;# 
   381  0396                     	;# 
   382  039A                     	;# 
   383  039C                     	;# 
   384  039D                     	;# 
   385  039E                     	;# 
   386  039F                     	;# 
   387  0415                     	;# 
   388  0416                     	;# 
   389  0417                     	;# 
   390  041C                     	;# 
   391  041D                     	;# 
   392  041E                     	;# 
   393  0FE4                     	;# 
   394  0FE5                     	;# 
   395  0FE6                     	;# 
   396  0FE7                     	;# 
   397  0FE8                     	;# 
   398  0FE9                     	;# 
   399  0FEA                     	;# 
   400  0FEB                     	;# 
   401  0FED                     	;# 
   402  0FEE                     	;# 
   403  0FEF                     	;# 
   404  0000                     	;# 
   405  0001                     	;# 
   406  0002                     	;# 
   407  0003                     	;# 
   408  0004                     	;# 
   409  0005                     	;# 
   410  0006                     	;# 
   411  0007                     	;# 
   412  0008                     	;# 
   413  0009                     	;# 
   414  000A                     	;# 
   415  000B                     	;# 
   416  000C                     	;# 
   417  000D                     	;# 
   418  000E                     	;# 
   419  0011                     	;# 
   420  0012                     	;# 
   421  0013                     	;# 
   422  0014                     	;# 
   423  0015                     	;# 
   424  0016                     	;# 
   425  0016                     	;# 
   426  0017                     	;# 
   427  0018                     	;# 
   428  0019                     	;# 
   429  001A                     	;# 
   430  001B                     	;# 
   431  001C                     	;# 
   432  001E                     	;# 
   433  001F                     	;# 
   434  008C                     	;# 
   435  008D                     	;# 
   436  008E                     	;# 
   437  0091                     	;# 
   438  0092                     	;# 
   439  0093                     	;# 
   440  0094                     	;# 
   441  0095                     	;# 
   442  0096                     	;# 
   443  0097                     	;# 
   444  0098                     	;# 
   445  0099                     	;# 
   446  009A                     	;# 
   447  009B                     	;# 
   448  009B                     	;# 
   449  009C                     	;# 
   450  009D                     	;# 
   451  009E                     	;# 
   452  010C                     	;# 
   453  010D                     	;# 
   454  010E                     	;# 
   455  0111                     	;# 
   456  0112                     	;# 
   457  0113                     	;# 
   458  0114                     	;# 
   459  0115                     	;# 
   460  0116                     	;# 
   461  0117                     	;# 
   462  0118                     	;# 
   463  0119                     	;# 
   464  011A                     	;# 
   465  011B                     	;# 
   466  011D                     	;# 
   467  011E                     	;# 
   468  018C                     	;# 
   469  018D                     	;# 
   470  018E                     	;# 
   471  0191                     	;# 
   472  0191                     	;# 
   473  0192                     	;# 
   474  0193                     	;# 
   475  0193                     	;# 
   476  0193                     	;# 
   477  0194                     	;# 
   478  0195                     	;# 
   479  0196                     	;# 
   480  0199                     	;# 
   481  019A                     	;# 
   482  019B                     	;# 
   483  019B                     	;# 
   484  019C                     	;# 
   485  019D                     	;# 
   486  019E                     	;# 
   487  019F                     	;# 
   488  020C                     	;# 
   489  020D                     	;# 
   490  020E                     	;# 
   491  0211                     	;# 
   492  0211                     	;# 
   493  0212                     	;# 
   494  0212                     	;# 
   495  0213                     	;# 
   496  0213                     	;# 
   497  0214                     	;# 
   498  0214                     	;# 
   499  0215                     	;# 
   500  0215                     	;# 
   501  0215                     	;# 
   502  0216                     	;# 
   503  0216                     	;# 
   504  0217                     	;# 
   505  0217                     	;# 
   506  0219                     	;# 
   507  021A                     	;# 
   508  021B                     	;# 
   509  021C                     	;# 
   510  021D                     	;# 
   511  021E                     	;# 
   512  021F                     	;# 
   513  0291                     	;# 
   514  0291                     	;# 
   515  0292                     	;# 
   516  0293                     	;# 
   517  0294                     	;# 
   518  0295                     	;# 
   519  0295                     	;# 
   520  0296                     	;# 
   521  0298                     	;# 
   522  0298                     	;# 
   523  0299                     	;# 
   524  029A                     	;# 
   525  029B                     	;# 
   526  029C                     	;# 
   527  029D                     	;# 
   528  029E                     	;# 
   529  0311                     	;# 
   530  0311                     	;# 
   531  0312                     	;# 
   532  0313                     	;# 
   533  0318                     	;# 
   534  0318                     	;# 
   535  0319                     	;# 
   536  031A                     	;# 
   537  038C                     	;# 
   538  038D                     	;# 
   539  038E                     	;# 
   540  0391                     	;# 
   541  0392                     	;# 
   542  0393                     	;# 
   543  0394                     	;# 
   544  0395                     	;# 
   545  0396                     	;# 
   546  039A                     	;# 
   547  039C                     	;# 
   548  039D                     	;# 
   549  039E                     	;# 
   550  039F                     	;# 
   551  0415                     	;# 
   552  0416                     	;# 
   553  0417                     	;# 
   554  041C                     	;# 
   555  041D                     	;# 
   556  041E                     	;# 
   557  0FE4                     	;# 
   558  0FE5                     	;# 
   559  0FE6                     	;# 
   560  0FE7                     	;# 
   561  0FE8                     	;# 
   562  0FE9                     	;# 
   563  0FEA                     	;# 
   564  0FEB                     	;# 
   565  0FED                     	;# 
   566  0FEE                     	;# 
   567  0FEF                     	;# 
   568  0000                     	;# 
   569  0001                     	;# 
   570  0002                     	;# 
   571  0003                     	;# 
   572  0004                     	;# 
   573  0005                     	;# 
   574  0006                     	;# 
   575  0007                     	;# 
   576  0008                     	;# 
   577  0009                     	;# 
   578  000A                     	;# 
   579  000B                     	;# 
   580  000C                     	;# 
   581  000D                     	;# 
   582  000E                     	;# 
   583  0011                     	;# 
   584  0012                     	;# 
   585  0013                     	;# 
   586  0014                     	;# 
   587  0015                     	;# 
   588  0016                     	;# 
   589  0016                     	;# 
   590  0017                     	;# 
   591  0018                     	;# 
   592  0019                     	;# 
   593  001A                     	;# 
   594  001B                     	;# 
   595  001C                     	;# 
   596  001E                     	;# 
   597  001F                     	;# 
   598  008C                     	;# 
   599  008D                     	;# 
   600  008E                     	;# 
   601  0091                     	;# 
   602  0092                     	;# 
   603  0093                     	;# 
   604  0094                     	;# 
   605  0095                     	;# 
   606  0096                     	;# 
   607  0097                     	;# 
   608  0098                     	;# 
   609  0099                     	;# 
   610  009A                     	;# 
   611  009B                     	;# 
   612  009B                     	;# 
   613  009C                     	;# 
   614  009D                     	;# 
   615  009E                     	;# 
   616  010C                     	;# 
   617  010D                     	;# 
   618  010E                     	;# 
   619  0111                     	;# 
   620  0112                     	;# 
   621  0113                     	;# 
   622  0114                     	;# 
   623  0115                     	;# 
   624  0116                     	;# 
   625  0117                     	;# 
   626  0118                     	;# 
   627  0119                     	;# 
   628  011A                     	;# 
   629  011B                     	;# 
   630  011D                     	;# 
   631  011E                     	;# 
   632  018C                     	;# 
   633  018D                     	;# 
   634  018E                     	;# 
   635  0191                     	;# 
   636  0191                     	;# 
   637  0192                     	;# 
   638  0193                     	;# 
   639  0193                     	;# 
   640  0193                     	;# 
   641  0194                     	;# 
   642  0195                     	;# 
   643  0196                     	;# 
   644  0199                     	;# 
   645  019A                     	;# 
   646  019B                     	;# 
   647  019B                     	;# 
   648  019C                     	;# 
   649  019D                     	;# 
   650  019E                     	;# 
   651  019F                     	;# 
   652  020C                     	;# 
   653  020D                     	;# 
   654  020E                     	;# 
   655  0211                     	;# 
   656  0211                     	;# 
   657  0212                     	;# 
   658  0212                     	;# 
   659  0213                     	;# 
   660  0213                     	;# 
   661  0214                     	;# 
   662  0214                     	;# 
   663  0215                     	;# 
   664  0215                     	;# 
   665  0215                     	;# 
   666  0216                     	;# 
   667  0216                     	;# 
   668  0217                     	;# 
   669  0217                     	;# 
   670  0219                     	;# 
   671  021A                     	;# 
   672  021B                     	;# 
   673  021C                     	;# 
   674  021D                     	;# 
   675  021E                     	;# 
   676  021F                     	;# 
   677  0291                     	;# 
   678  0291                     	;# 
   679  0292                     	;# 
   680  0293                     	;# 
   681  0294                     	;# 
   682  0295                     	;# 
   683  0295                     	;# 
   684  0296                     	;# 
   685  0298                     	;# 
   686  0298                     	;# 
   687  0299                     	;# 
   688  029A                     	;# 
   689  029B                     	;# 
   690  029C                     	;# 
   691  029D                     	;# 
   692  029E                     	;# 
   693  0311                     	;# 
   694  0311                     	;# 
   695  0312                     	;# 
   696  0313                     	;# 
   697  0318                     	;# 
   698  0318                     	;# 
   699  0319                     	;# 
   700  031A                     	;# 
   701  038C                     	;# 
   702  038D                     	;# 
   703  038E                     	;# 
   704  0391                     	;# 
   705  0392                     	;# 
   706  0393                     	;# 
   707  0394                     	;# 
   708  0395                     	;# 
   709  0396                     	;# 
   710  039A                     	;# 
   711  039C                     	;# 
   712  039D                     	;# 
   713  039E                     	;# 
   714  039F                     	;# 
   715  0415                     	;# 
   716  0416                     	;# 
   717  0417                     	;# 
   718  041C                     	;# 
   719  041D                     	;# 
   720  041E                     	;# 
   721  0FE4                     	;# 
   722  0FE5                     	;# 
   723  0FE6                     	;# 
   724  0FE7                     	;# 
   725  0FE8                     	;# 
   726  0FE9                     	;# 
   727  0FEA                     	;# 
   728  0FEB                     	;# 
   729  0FED                     	;# 
   730  0FEE                     	;# 
   731  0FEF                     	;# 
   732  0000                     	;# 
   733  0001                     	;# 
   734  0002                     	;# 
   735  0003                     	;# 
   736  0004                     	;# 
   737  0005                     	;# 
   738  0006                     	;# 
   739  0007                     	;# 
   740  0008                     	;# 
   741  0009                     	;# 
   742  000A                     	;# 
   743  000B                     	;# 
   744  000C                     	;# 
   745  000D                     	;# 
   746  000E                     	;# 
   747  0011                     	;# 
   748  0012                     	;# 
   749  0013                     	;# 
   750  0014                     	;# 
   751  0015                     	;# 
   752  0016                     	;# 
   753  0016                     	;# 
   754  0017                     	;# 
   755  0018                     	;# 
   756  0019                     	;# 
   757  001A                     	;# 
   758  001B                     	;# 
   759  001C                     	;# 
   760  001E                     	;# 
   761  001F                     	;# 
   762  008C                     	;# 
   763  008D                     	;# 
   764  008E                     	;# 
   765  0091                     	;# 
   766  0092                     	;# 
   767  0093                     	;# 
   768  0094                     	;# 
   769  0095                     	;# 
   770  0096                     	;# 
   771  0097                     	;# 
   772  0098                     	;# 
   773  0099                     	;# 
   774  009A                     	;# 
   775  009B                     	;# 
   776  009B                     	;# 
   777  009C                     	;# 
   778  009D                     	;# 
   779  009E                     	;# 
   780  010C                     	;# 
   781  010D                     	;# 
   782  010E                     	;# 
   783  0111                     	;# 
   784  0112                     	;# 
   785  0113                     	;# 
   786  0114                     	;# 
   787  0115                     	;# 
   788  0116                     	;# 
   789  0117                     	;# 
   790  0118                     	;# 
   791  0119                     	;# 
   792  011A                     	;# 
   793  011B                     	;# 
   794  011D                     	;# 
   795  011E                     	;# 
   796  018C                     	;# 
   797  018D                     	;# 
   798  018E                     	;# 
   799  0191                     	;# 
   800  0191                     	;# 
   801  0192                     	;# 
   802  0193                     	;# 
   803  0193                     	;# 
   804  0193                     	;# 
   805  0194                     	;# 
   806  0195                     	;# 
   807  0196                     	;# 
   808  0199                     	;# 
   809  019A                     	;# 
   810  019B                     	;# 
   811  019B                     	;# 
   812  019C                     	;# 
   813  019D                     	;# 
   814  019E                     	;# 
   815  019F                     	;# 
   816  020C                     	;# 
   817  020D                     	;# 
   818  020E                     	;# 
   819  0211                     	;# 
   820  0211                     	;# 
   821  0212                     	;# 
   822  0212                     	;# 
   823  0213                     	;# 
   824  0213                     	;# 
   825  0214                     	;# 
   826  0214                     	;# 
   827  0215                     	;# 
   828  0215                     	;# 
   829  0215                     	;# 
   830  0216                     	;# 
   831  0216                     	;# 
   832  0217                     	;# 
   833  0217                     	;# 
   834  0219                     	;# 
   835  021A                     	;# 
   836  021B                     	;# 
   837  021C                     	;# 
   838  021D                     	;# 
   839  021E                     	;# 
   840  021F                     	;# 
   841  0291                     	;# 
   842  0291                     	;# 
   843  0292                     	;# 
   844  0293                     	;# 
   845  0294                     	;# 
   846  0295                     	;# 
   847  0295                     	;# 
   848  0296                     	;# 
   849  0298                     	;# 
   850  0298                     	;# 
   851  0299                     	;# 
   852  029A                     	;# 
   853  029B                     	;# 
   854  029C                     	;# 
   855  029D                     	;# 
   856  029E                     	;# 
   857  0311                     	;# 
   858  0311                     	;# 
   859  0312                     	;# 
   860  0313                     	;# 
   861  0318                     	;# 
   862  0318                     	;# 
   863  0319                     	;# 
   864  031A                     	;# 
   865  038C                     	;# 
   866  038D                     	;# 
   867  038E                     	;# 
   868  0391                     	;# 
   869  0392                     	;# 
   870  0393                     	;# 
   871  0394                     	;# 
   872  0395                     	;# 
   873  0396                     	;# 
   874  039A                     	;# 
   875  039C                     	;# 
   876  039D                     	;# 
   877  039E                     	;# 
   878  039F                     	;# 
   879  0415                     	;# 
   880  0416                     	;# 
   881  0417                     	;# 
   882  041C                     	;# 
   883  041D                     	;# 
   884  041E                     	;# 
   885  0FE4                     	;# 
   886  0FE5                     	;# 
   887  0FE6                     	;# 
   888  0FE7                     	;# 
   889  0FE8                     	;# 
   890  0FE9                     	;# 
   891  0FEA                     	;# 
   892  0FEB                     	;# 
   893  0FED                     	;# 
   894  0FEE                     	;# 
   895  0FEF                     	;# 
   896  0000                     	;# 
   897  0001                     	;# 
   898  0002                     	;# 
   899  0003                     	;# 
   900  0004                     	;# 
   901  0005                     	;# 
   902  0006                     	;# 
   903  0007                     	;# 
   904  0008                     	;# 
   905  0009                     	;# 
   906  000A                     	;# 
   907  000B                     	;# 
   908  000C                     	;# 
   909  000D                     	;# 
   910  000E                     	;# 
   911  0011                     	;# 
   912  0012                     	;# 
   913  0013                     	;# 
   914  0014                     	;# 
   915  0015                     	;# 
   916  0016                     	;# 
   917  0016                     	;# 
   918  0017                     	;# 
   919  0018                     	;# 
   920  0019                     	;# 
   921  001A                     	;# 
   922  001B                     	;# 
   923  001C                     	;# 
   924  001E                     	;# 
   925  001F                     	;# 
   926  008C                     	;# 
   927  008D                     	;# 
   928  008E                     	;# 
   929  0091                     	;# 
   930  0092                     	;# 
   931  0093                     	;# 
   932  0094                     	;# 
   933  0095                     	;# 
   934  0096                     	;# 
   935  0097                     	;# 
   936  0098                     	;# 
   937  0099                     	;# 
   938  009A                     	;# 
   939  009B                     	;# 
   940  009B                     	;# 
   941  009C                     	;# 
   942  009D                     	;# 
   943  009E                     	;# 
   944  010C                     	;# 
   945  010D                     	;# 
   946  010E                     	;# 
   947  0111                     	;# 
   948  0112                     	;# 
   949  0113                     	;# 
   950  0114                     	;# 
   951  0115                     	;# 
   952  0116                     	;# 
   953  0117                     	;# 
   954  0118                     	;# 
   955  0119                     	;# 
   956  011A                     	;# 
   957  011B                     	;# 
   958  011D                     	;# 
   959  011E                     	;# 
   960  018C                     	;# 
   961  018D                     	;# 
   962  018E                     	;# 
   963  0191                     	;# 
   964  0191                     	;# 
   965  0192                     	;# 
   966  0193                     	;# 
   967  0193                     	;# 
   968  0193                     	;# 
   969  0194                     	;# 
   970  0195                     	;# 
   971  0196                     	;# 
   972  0199                     	;# 
   973  019A                     	;# 
   974  019B                     	;# 
   975  019B                     	;# 
   976  019C                     	;# 
   977  019D                     	;# 
   978  019E                     	;# 
   979  019F                     	;# 
   980  020C                     	;# 
   981  020D                     	;# 
   982  020E                     	;# 
   983  0211                     	;# 
   984  0211                     	;# 
   985  0212                     	;# 
   986  0212                     	;# 
   987  0213                     	;# 
   988  0213                     	;# 
   989  0214                     	;# 
   990  0214                     	;# 
   991  0215                     	;# 
   992  0215                     	;# 
   993  0215                     	;# 
   994  0216                     	;# 
   995  0216                     	;# 
   996  0217                     	;# 
   997  0217                     	;# 
   998  0219                     	;# 
   999  021A                     	;# 
  1000  021B                     	;# 
  1001  021C                     	;# 
  1002  021D                     	;# 
  1003  021E                     	;# 
  1004  021F                     	;# 
  1005  0291                     	;# 
  1006  0291                     	;# 
  1007  0292                     	;# 
  1008  0293                     	;# 
  1009  0294                     	;# 
  1010  0295                     	;# 
  1011  0295                     	;# 
  1012  0296                     	;# 
  1013  0298                     	;# 
  1014  0298                     	;# 
  1015  0299                     	;# 
  1016  029A                     	;# 
  1017  029B                     	;# 
  1018  029C                     	;# 
  1019  029D                     	;# 
  1020  029E                     	;# 
  1021  0311                     	;# 
  1022  0311                     	;# 
  1023  0312                     	;# 
  1024  0313                     	;# 
  1025  0318                     	;# 
  1026  0318                     	;# 
  1027  0319                     	;# 
  1028  031A                     	;# 
  1029  038C                     	;# 
  1030  038D                     	;# 
  1031  038E                     	;# 
  1032  0391                     	;# 
  1033  0392                     	;# 
  1034  0393                     	;# 
  1035  0394                     	;# 
  1036  0395                     	;# 
  1037  0396                     	;# 
  1038  039A                     	;# 
  1039  039C                     	;# 
  1040  039D                     	;# 
  1041  039E                     	;# 
  1042  039F                     	;# 
  1043  0415                     	;# 
  1044  0416                     	;# 
  1045  0417                     	;# 
  1046  041C                     	;# 
  1047  041D                     	;# 
  1048  041E                     	;# 
  1049  0FE4                     	;# 
  1050  0FE5                     	;# 
  1051  0FE6                     	;# 
  1052  0FE7                     	;# 
  1053  0FE8                     	;# 
  1054  0FE9                     	;# 
  1055  0FEA                     	;# 
  1056  0FEB                     	;# 
  1057  0FED                     	;# 
  1058  0FEE                     	;# 
  1059  0FEF                     	;# 
  1060  0000                     	;# 
  1061  0001                     	;# 
  1062  0002                     	;# 
  1063  0003                     	;# 
  1064  0004                     	;# 
  1065  0005                     	;# 
  1066  0006                     	;# 
  1067  0007                     	;# 
  1068  0008                     	;# 
  1069  0009                     	;# 
  1070  000A                     	;# 
  1071  000B                     	;# 
  1072  000C                     	;# 
  1073  000D                     	;# 
  1074  000E                     	;# 
  1075  0011                     	;# 
  1076  0012                     	;# 
  1077  0013                     	;# 
  1078  0014                     	;# 
  1079  0015                     	;# 
  1080  0016                     	;# 
  1081  0016                     	;# 
  1082  0017                     	;# 
  1083  0018                     	;# 
  1084  0019                     	;# 
  1085  001A                     	;# 
  1086  001B                     	;# 
  1087  001C                     	;# 
  1088  001E                     	;# 
  1089  001F                     	;# 
  1090  008C                     	;# 
  1091  008D                     	;# 
  1092  008E                     	;# 
  1093  0091                     	;# 
  1094  0092                     	;# 
  1095  0093                     	;# 
  1096  0094                     	;# 
  1097  0095                     	;# 
  1098  0096                     	;# 
  1099  0097                     	;# 
  1100  0098                     	;# 
  1101  0099                     	;# 
  1102  009A                     	;# 
  1103  009B                     	;# 
  1104  009B                     	;# 
  1105  009C                     	;# 
  1106  009D                     	;# 
  1107  009E                     	;# 
  1108  010C                     	;# 
  1109  010D                     	;# 
  1110  010E                     	;# 
  1111  0111                     	;# 
  1112  0112                     	;# 
  1113  0113                     	;# 
  1114  0114                     	;# 
  1115  0115                     	;# 
  1116  0116                     	;# 
  1117  0117                     	;# 
  1118  0118                     	;# 
  1119  0119                     	;# 
  1120  011A                     	;# 
  1121  011B                     	;# 
  1122  011D                     	;# 
  1123  011E                     	;# 
  1124  018C                     	;# 
  1125  018D                     	;# 
  1126  018E                     	;# 
  1127  0191                     	;# 
  1128  0191                     	;# 
  1129  0192                     	;# 
  1130  0193                     	;# 
  1131  0193                     	;# 
  1132  0193                     	;# 
  1133  0194                     	;# 
  1134  0195                     	;# 
  1135  0196                     	;# 
  1136  0199                     	;# 
  1137  019A                     	;# 
  1138  019B                     	;# 
  1139  019B                     	;# 
  1140  019C                     	;# 
  1141  019D                     	;# 
  1142  019E                     	;# 
  1143  019F                     	;# 
  1144  020C                     	;# 
  1145  020D                     	;# 
  1146  020E                     	;# 
  1147  0211                     	;# 
  1148  0211                     	;# 
  1149  0212                     	;# 
  1150  0212                     	;# 
  1151  0213                     	;# 
  1152  0213                     	;# 
  1153  0214                     	;# 
  1154  0214                     	;# 
  1155  0215                     	;# 
  1156  0215                     	;# 
  1157  0215                     	;# 
  1158  0216                     	;# 
  1159  0216                     	;# 
  1160  0217                     	;# 
  1161  0217                     	;# 
  1162  0219                     	;# 
  1163  021A                     	;# 
  1164  021B                     	;# 
  1165  021C                     	;# 
  1166  021D                     	;# 
  1167  021E                     	;# 
  1168  021F                     	;# 
  1169  0291                     	;# 
  1170  0291                     	;# 
  1171  0292                     	;# 
  1172  0293                     	;# 
  1173  0294                     	;# 
  1174  0295                     	;# 
  1175  0295                     	;# 
  1176  0296                     	;# 
  1177  0298                     	;# 
  1178  0298                     	;# 
  1179  0299                     	;# 
  1180  029A                     	;# 
  1181  029B                     	;# 
  1182  029C                     	;# 
  1183  029D                     	;# 
  1184  029E                     	;# 
  1185  0311                     	;# 
  1186  0311                     	;# 
  1187  0312                     	;# 
  1188  0313                     	;# 
  1189  0318                     	;# 
  1190  0318                     	;# 
  1191  0319                     	;# 
  1192  031A                     	;# 
  1193  038C                     	;# 
  1194  038D                     	;# 
  1195  038E                     	;# 
  1196  0391                     	;# 
  1197  0392                     	;# 
  1198  0393                     	;# 
  1199  0394                     	;# 
  1200  0395                     	;# 
  1201  0396                     	;# 
  1202  039A                     	;# 
  1203  039C                     	;# 
  1204  039D                     	;# 
  1205  039E                     	;# 
  1206  039F                     	;# 
  1207  0415                     	;# 
  1208  0416                     	;# 
  1209  0417                     	;# 
  1210  041C                     	;# 
  1211  041D                     	;# 
  1212  041E                     	;# 
  1213  0FE4                     	;# 
  1214  0FE5                     	;# 
  1215  0FE6                     	;# 
  1216  0FE7                     	;# 
  1217  0FE8                     	;# 
  1218  0FE9                     	;# 
  1219  0FEA                     	;# 
  1220  0FEB                     	;# 
  1221  0FED                     	;# 
  1222  0FEE                     	;# 
  1223  0FEF                     	;# 
  1224                           
  1225                           	psect	idataBANK1
  1226  0003                     __pidataBANK1:	
  1227                           
  1228                           ;initializer for _Transmit_stall
  1229  0003  3401               	retlw	1
  1230                           
  1231                           	psect	stringtext
  1232  1000                     __pstringtext:	
  1233  1000                     _dpowers:	
  1234  1000  3401               	retlw	1
  1235  1001  3400               	retlw	0
  1236  1002  3400               	retlw	0
  1237  1003  3400               	retlw	0
  1238  1004  340A               	retlw	10
  1239  1005  3400               	retlw	0
  1240  1006  3400               	retlw	0
  1241  1007  3400               	retlw	0
  1242  1008  3464               	retlw	100
  1243  1009  3400               	retlw	0
  1244  100A  3400               	retlw	0
  1245  100B  3400               	retlw	0
  1246  100C  34E8               	retlw	232
  1247  100D  3403               	retlw	3
  1248  100E  3400               	retlw	0
  1249  100F  3400               	retlw	0
  1250  1010  3410               	retlw	16
  1251  1011  3427               	retlw	39
  1252  1012  3400               	retlw	0
  1253  1013  3400               	retlw	0
  1254  1014  34A0               	retlw	160
  1255  1015  3486               	retlw	134
  1256  1016  3401               	retlw	1
  1257  1017  3400               	retlw	0
  1258  1018  3440               	retlw	64
  1259  1019  3442               	retlw	66
  1260  101A  340F               	retlw	15
  1261  101B  3400               	retlw	0
  1262  101C  3480               	retlw	128
  1263  101D  3496               	retlw	150
  1264  101E  3498               	retlw	152
  1265  101F  3400               	retlw	0
  1266  1020  3400               	retlw	0
  1267  1021  34E1               	retlw	225
  1268  1022  34F5               	retlw	245
  1269  1023  3405               	retlw	5
  1270  1024  3400               	retlw	0
  1271  1025  34CA               	retlw	202
  1272  1026  349A               	retlw	154
  1273  1027  343B               	retlw	59
  1274  1028                     __end_of_dpowers:	
  1275  1028                     __npowers_:	
  1276  1028  3400               	retlw	0
  1277  1029  3480               	retlw	128
  1278  102A  343F               	retlw	63
  1279  102B  34CD               	retlw	205
  1280  102C  34CC               	retlw	204
  1281  102D  343D               	retlw	61
  1282  102E  34D7               	retlw	215
  1283  102F  3423               	retlw	35
  1284  1030  343C               	retlw	60
  1285  1031  3412               	retlw	18
  1286  1032  3483               	retlw	131
  1287  1033  343A               	retlw	58
  1288  1034  34B7               	retlw	183
  1289  1035  34D1               	retlw	209
  1290  1036  3438               	retlw	56
  1291  1037  34C6               	retlw	198
  1292  1038  3427               	retlw	39
  1293  1039  3437               	retlw	55
  1294  103A  3438               	retlw	56
  1295  103B  3486               	retlw	134
  1296  103C  3435               	retlw	53
  1297  103D  34C0               	retlw	192
  1298  103E  34D6               	retlw	214
  1299  103F  3433               	retlw	51
  1300  1040  34CC               	retlw	204
  1301  1041  342B               	retlw	43
  1302  1042  3432               	retlw	50
  1303  1043  3470               	retlw	112
  1304  1044  3489               	retlw	137
  1305  1045  3430               	retlw	48
  1306  1046  34E7               	retlw	231
  1307  1047  34DB               	retlw	219
  1308  1048  342E               	retlw	46
  1309  1049  34E5               	retlw	229
  1310  104A  343C               	retlw	60
  1311  104B  341E               	retlw	30
  1312  104C  3442               	retlw	66
  1313  104D  34A2               	retlw	162
  1314  104E  340D               	retlw	13
  1315  104F                     __end_of__npowers_:	
  1316  104F                     __powers_:	
  1317  104F  3400               	retlw	0
  1318  1050  3480               	retlw	128
  1319  1051  343F               	retlw	63
  1320  1052  3400               	retlw	0
  1321  1053  3420               	retlw	32
  1322  1054  3441               	retlw	65
  1323  1055  3400               	retlw	0
  1324  1056  34C8               	retlw	200
  1325  1057  3442               	retlw	66
  1326  1058  3400               	retlw	0
  1327  1059  347A               	retlw	122
  1328  105A  3444               	retlw	68
  1329  105B  3440               	retlw	64
  1330  105C  341C               	retlw	28
  1331  105D  3446               	retlw	70
  1332  105E  3450               	retlw	80
  1333  105F  34C3               	retlw	195
  1334  1060  3447               	retlw	71
  1335  1061  3424               	retlw	36
  1336  1062  3474               	retlw	116
  1337  1063  3449               	retlw	73
  1338  1064  3497               	retlw	151
  1339  1065  3418               	retlw	24
  1340  1066  344B               	retlw	75
  1341  1067  34BC               	retlw	188
  1342  1068  34BE               	retlw	190
  1343  1069  344C               	retlw	76
  1344  106A  346B               	retlw	107
  1345  106B  346E               	retlw	110
  1346  106C  344E               	retlw	78
  1347  106D  3403               	retlw	3
  1348  106E  3415               	retlw	21
  1349  106F  3450               	retlw	80
  1350  1070  3479               	retlw	121
  1351  1071  34AD               	retlw	173
  1352  1072  3460               	retlw	96
  1353  1073  34F3               	retlw	243
  1354  1074  3449               	retlw	73
  1355  1075  3471               	retlw	113
  1356  1076                     __end_of__powers_:	
  1357  000B                     _INTCON	set	11
  1358  000B                     _INTCONbits	set	11
  1359  0011                     _PIR1bits	set	17
  1360  000C                     _PORTAbits	set	12
  1361  000E                     _PORTCbits	set	14
  1362  001B                     _PR2	set	27
  1363  001C                     _T2CON	set	28
  1364  001C                     _T2CONbits	set	28
  1365  001A                     _TMR2	set	26
  1366  009D                     _ADCON0bits	set	157
  1367  009E                     _ADCON1bits	set	158
  1368  0091                     _PIE1bits	set	145
  1369  008C                     _TRISAbits	set	140
  1370  008E                     _TRISCbits	set	142
  1371  0117                     _FVRCONbits	set	279
  1372  019B                     _SPBRG	set	411
  1373  018C                     _ANSELAbits	set	396
  1374  018E                     _ANSELCbits	set	398
  1375  0199                     _RCREG	set	409
  1376  019D                     _RCSTA	set	413
  1377  019D                     _RCSTAbits	set	413
  1378  019A                     _TXREG	set	410
  1379  019E                     _TXSTA	set	414
  1380  1076                     STR_2:	
  1381  1076  3441               	retlw	65	;'A'
  1382  1077  3454               	retlw	84	;'T'
  1383  1078  342B               	retlw	43	;'+'
  1384  1079  3444               	retlw	68	;'D'
  1385  107A  344D               	retlw	77	;'M'
  1386  107B  344F               	retlw	79	;'O'
  1387  107C  3453               	retlw	83	;'S'
  1388  107D  3445               	retlw	69	;'E'
  1389  107E  3454               	retlw	84	;'T'
  1390  107F  3447               	retlw	71	;'G'
  1391  1080  3452               	retlw	82	;'R'
  1392  1081  344F               	retlw	79	;'O'
  1393  1082  3455               	retlw	85	;'U'
  1394  1083  3450               	retlw	80	;'P'
  1395  1084  343D               	retlw	61	;'='
  1396  1085  3425               	retlw	37	;'%'
  1397  1086  3464               	retlw	100	;'d'
  1398  1087  342C               	retlw	44	;','
  1399  1088  3425               	retlw	37	;'%'
  1400  1089  3466               	retlw	102	;'f'
  1401  108A  342C               	retlw	44	;','
  1402  108B  3425               	retlw	37	;'%'
  1403  108C  3466               	retlw	102	;'f'
  1404  108D  342C               	retlw	44	;','
  1405  108E  3425               	retlw	37	;'%'
  1406  108F  3464               	retlw	100	;'d'
  1407  1090  342C               	retlw	44	;','
  1408  1091  3425               	retlw	37	;'%'
  1409  1092  3464               	retlw	100	;'d'
  1410  1093  342C               	retlw	44	;','
  1411  1094  3425               	retlw	37	;'%'
  1412  1095  3464               	retlw	100	;'d'
  1413  1096  342C               	retlw	44	;','
  1414  1097  3425               	retlw	37	;'%'
  1415  1098  3464               	retlw	100	;'d'
  1416  1099  3400               	retlw	0
  1417  109A                     STR_6:	
  1418  109A  3441               	retlw	65	;'A'
  1419  109B  3454               	retlw	84	;'T'
  1420  109C  342B               	retlw	43	;'+'
  1421  109D  3444               	retlw	68	;'D'
  1422  109E  344D               	retlw	77	;'M'
  1423  109F  344F               	retlw	79	;'O'
  1424  10A0  3453               	retlw	83	;'S'
  1425  10A1  3445               	retlw	69	;'E'
  1426  10A2  3454               	retlw	84	;'T'
  1427  10A3  344D               	retlw	77	;'M'
  1428  10A4  3449               	retlw	73	;'I'
  1429  10A5  3443               	retlw	67	;'C'
  1430  10A6  343D               	retlw	61	;'='
  1431  10A7  3425               	retlw	37	;'%'
  1432  10A8  3463               	retlw	99	;'c'
  1433  10A9  342C               	retlw	44	;','
  1434  10AA  3425               	retlw	37	;'%'
  1435  10AB  3463               	retlw	99	;'c'
  1436  10AC  342C               	retlw	44	;','
  1437  10AD  3425               	retlw	37	;'%'
  1438  10AE  3463               	retlw	99	;'c'
  1439  10AF  3400               	retlw	0
  1440  10B0                     STR_3:	
  1441  10B0  3441               	retlw	65	;'A'
  1442  10B1  3454               	retlw	84	;'T'
  1443  10B2  342B               	retlw	43	;'+'
  1444  10B3  3444               	retlw	68	;'D'
  1445  10B4  344D               	retlw	77	;'M'
  1446  10B5  344F               	retlw	79	;'O'
  1447  10B6  3441               	retlw	65	;'A'
  1448  10B7  3455               	retlw	85	;'U'
  1449  10B8  3454               	retlw	84	;'T'
  1450  10B9  344F               	retlw	79	;'O'
  1451  10BA  3450               	retlw	80	;'P'
  1452  10BB  344F               	retlw	79	;'O'
  1453  10BC  3457               	retlw	87	;'W'
  1454  10BD  3443               	retlw	67	;'C'
  1455  10BE  344F               	retlw	79	;'O'
  1456  10BF  344E               	retlw	78	;'N'
  1457  10C0  3454               	retlw	84	;'T'
  1458  10C1  3452               	retlw	82	;'R'
  1459  10C2  343D               	retlw	61	;'='
  1460  10C3  3425               	retlw	37	;'%'
  1461  10C4  3463               	retlw	99	;'c'
  1462  10C5  3400               	retlw	0
  1463  10C6                     STR_4:	
  1464  10C6  3441               	retlw	65	;'A'
  1465  10C7  3454               	retlw	84	;'T'
  1466  10C8  342B               	retlw	43	;'+'
  1467  10C9  3444               	retlw	68	;'D'
  1468  10CA  344D               	retlw	77	;'M'
  1469  10CB  344F               	retlw	79	;'O'
  1470  10CC  3453               	retlw	83	;'S'
  1471  10CD  3445               	retlw	69	;'E'
  1472  10CE  3454               	retlw	84	;'T'
  1473  10CF  3456               	retlw	86	;'V'
  1474  10D0  344F               	retlw	79	;'O'
  1475  10D1  344C               	retlw	76	;'L'
  1476  10D2  3455               	retlw	85	;'U'
  1477  10D3  344D               	retlw	77	;'M'
  1478  10D4  3445               	retlw	69	;'E'
  1479  10D5  343D               	retlw	61	;'='
  1480  10D6  3425               	retlw	37	;'%'
  1481  10D7  3463               	retlw	99	;'c'
  1482  10D8  3400               	retlw	0
  1483  10D9                     STR_1:	
  1484  10D9  3441               	retlw	65	;'A'
  1485  10DA  3454               	retlw	84	;'T'
  1486  10DB  342B               	retlw	43	;'+'
  1487  10DC  3444               	retlw	68	;'D'
  1488  10DD  344D               	retlw	77	;'M'
  1489  10DE  344F               	retlw	79	;'O'
  1490  10DF  3443               	retlw	67	;'C'
  1491  10E0  344F               	retlw	79	;'O'
  1492  10E1  344E               	retlw	78	;'N'
  1493  10E2  344E               	retlw	78	;'N'
  1494  10E3  3445               	retlw	69	;'E'
  1495  10E4  3443               	retlw	67	;'C'
  1496  10E5  3454               	retlw	84	;'T'
  1497  10E6  3400               	retlw	0
  1498  10C6                     
  1499                           	psect	cinit
  1500  002A                     start_initialization:	
  1501                           ; #config settings
  1502                           
  1503  002A                     __initialization:	
  1504                           
  1505                           ; Clear objects allocated to BANK1
  1506  002A  30CC               	movlw	low __pbssBANK1
  1507  002B  0084               	movwf	4
  1508  002C  3000               	movlw	high __pbssBANK1
  1509  002D  0085               	movwf	5
  1510  002E  3022               	movlw	34
  1511  002F  3192  227B  3180   	fcall	clear_ram0
  1512                           
  1513                           ; Clear objects allocated to BANK2
  1514  0032  3020               	movlw	low __pbssBANK2
  1515  0033  0084               	movwf	4
  1516  0034  3001               	movlw	high __pbssBANK2
  1517  0035  0085               	movwf	5
  1518  0036  3034               	movlw	52
  1519  0037  3192  227B  3180   	fcall	clear_ram0
  1520                           
  1521                           ; Initialize objects allocated to BANK1
  1522  003A  0021               	movlb	1	; select bank1
  1523  003B  3180  2003         	fcall	__pidataBANK1	;fetch initializer
  1524  003D  00EE               	movwf	__pdataBANK1& (0+127)
  1525  003E                     end_of_initialization:	
  1526                           ;End of C runtime variable initialization code
  1527                           
  1528  003E                     __end_of__initialization:	
  1529  003E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1530  003F  0020               	movlb	0
  1531  0040  3193  2B1D         	ljmp	_main	;jump to C main() function
  1532                           
  1533                           	psect	bssBANK1
  1534  00CC                     __pbssBANK1:	
  1535  00CC                     _eusart1RxBuffer:	
  1536  00CC                     	ds	8
  1537  00D4                     _eusart1TxBuffer:	
  1538  00D4                     	ds	8
  1539  00DC                     _Battery:	
  1540  00DC                     	ds	3
  1541  00DF                     _count:	
  1542  00DF                     	ds	2
  1543  00E1                     _ticker:	
  1544  00E1                     	ds	2
  1545  00E3                     _time:	
  1546  00E3                     	ds	2
  1547  00E5                     _Mode:	
  1548  00E5                     	ds	1
  1549  00E6                     _Shutdown:	
  1550  00E6                     	ds	1
  1551  00E7                     _Talking:	
  1552  00E7                     	ds	1
  1553  00E8                     _eusart1RxCount:	
  1554  00E8                     	ds	1
  1555  00E9                     _eusart1RxHead:	
  1556  00E9                     	ds	1
  1557  00EA                     _eusart1RxTail:	
  1558  00EA                     	ds	1
  1559  00EB                     _eusart1TxBufferRemaining:	
  1560  00EB                     	ds	1
  1561  00EC                     _eusart1TxHead:	
  1562  00EC                     	ds	1
  1563  00ED                     _eusart1TxTail:	
  1564  00ED                     	ds	1
  1565                           
  1566                           	psect	dataBANK1
  1567  00EE                     __pdataBANK1:	
  1568  00EE                     _Transmit_stall:	
  1569  00EE                     	ds	1
  1570                           
  1571                           	psect	bssBANK2
  1572  0120                     __pbssBANK2:	
  1573  0120                     _input_buffer:	
  1574  0120                     	ds	26
  1575  013A                     _output_buffer:	
  1576  013A                     	ds	26
  1577                           
  1578                           	psect	clrtext
  1579  127B                     clear_ram0:	
  1580                           ;	Called with FSR0 containing the base address, and
  1581                           ;	WREG with the size to clear
  1582                           
  1583  127B  0064               	clrwdt	;clear the watchdog before getting into this loop
  1584  127C                     clrloop0:	
  1585  127C  0180               	clrf	0	;clear RAM location pointed to by FSR
  1586  127D  3101               	addfsr 0,1
  1587  127E  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1588  127F  2A7C               	goto	clrloop0	;have we reached the end yet?
  1589  1280  3400               	retlw	0	;all done for this memory range, return
  1590                           
  1591                           	psect	cstackBANK1
  1592  00A0                     __pcstackBANK1:	
  1593  00A0                     ?_printf:	
  1594  00A0                     printf@f:	
  1595                           ; 2 bytes @ 0x0
  1596                           
  1597                           
  1598                           ; 2 bytes @ 0x0
  1599  00A0                     	ds	18
  1600  00B2                     _printf$1275:	
  1601                           
  1602                           ; 3 bytes @ 0x12
  1603  00B2                     	ds	3
  1604  00B5                     printf@flag:	
  1605                           
  1606                           ; 2 bytes @ 0x15
  1607  00B5                     	ds	2
  1608  00B7                     printf@ap:	
  1609                           
  1610                           ; 1 bytes @ 0x17
  1611  00B7                     	ds	1
  1612  00B8                     printf@prec:	
  1613                           
  1614                           ; 2 bytes @ 0x18
  1615  00B8                     	ds	2
  1616  00BA                     printf@val:	
  1617                           
  1618                           ; 4 bytes @ 0x1A
  1619  00BA                     	ds	4
  1620  00BE                     printf@exp:	
  1621                           
  1622                           ; 2 bytes @ 0x1E
  1623  00BE                     	ds	2
  1624  00C0                     printf@tmpval:	
  1625                           
  1626                           ; 4 bytes @ 0x20
  1627  00C0                     	ds	4
  1628  00C4                     printf@fval:	
  1629                           
  1630                           ; 3 bytes @ 0x24
  1631  00C4                     	ds	3
  1632  00C7                     printf@c:	
  1633                           
  1634                           ; 1 bytes @ 0x27
  1635  00C7                     	ds	1
  1636  00C8                     ??_SetMIC:	
  1637                           
  1638                           ; 1 bytes @ 0x28
  1639  00C8                     	ds	4
  1640                           
  1641                           	psect	cstackCOMMON
  1642  0070                     __pcstackCOMMON:	
  1643  0070                     ?_Start:	
  1644  0070                     ?_RadioBegin:	
  1645                           ; 1 bytes @ 0x0
  1646                           
  1647  0070                     ?_LEDOff:	
  1648                           ; 1 bytes @ 0x0
  1649                           
  1650  0070                     ?_RadioOperation:	
  1651                           ; 1 bytes @ 0x0
  1652                           
  1653  0070                     ?_ADC_Initialize:	
  1654                           ; 1 bytes @ 0x0
  1655                           
  1656  0070                     ?_EUSART1_Initialize:	
  1657                           ; 1 bytes @ 0x0
  1658                           
  1659  0070                     ?_INTERRUPT_Initialize:	
  1660                           ; 1 bytes @ 0x0
  1661                           
  1662  0070                     ?_TMR2_Initialize:	
  1663                           ; 1 bytes @ 0x0
  1664                           
  1665  0070                     ?_TMR2_ISR:	
  1666                           ; 1 bytes @ 0x0
  1667                           
  1668  0070                     ??_TMR2_ISR:	
  1669                           ; 1 bytes @ 0x0
  1670                           
  1671  0070                     ?_EUSART1_Receive_ISR:	
  1672                           ; 1 bytes @ 0x0
  1673                           
  1674  0070                     ?_EUSART1_Transmit_ISR:	
  1675                           ; 1 bytes @ 0x0
  1676                           
  1677  0070                     ?_UART_buff_init:	
  1678                           ; 1 bytes @ 0x0
  1679                           
  1680  0070                     ?_SetCommandMode:	
  1681                           ; 1 bytes @ 0x0
  1682                           
  1683  0070                     ?_SetFrequency:	
  1684                           ; 1 bytes @ 0x0
  1685                           
  1686  0070                     ?_SetPowerSave:	
  1687                           ; 1 bytes @ 0x0
  1688                           
  1689  0070                     ?_SetVolume:	
  1690                           ; 1 bytes @ 0x0
  1691                           
  1692  0070                     ?_SetADCChannel:	
  1693                           ; 1 bytes @ 0x0
  1694                           
  1695  0070                     ?_INTERRUPT_InterruptManager:	
  1696                           ; 1 bytes @ 0x0
  1697                           
  1698  0070                     ?_ReadCharger:	
  1699                           ; 1 bytes @ 0x0
  1700                           
  1701  0070                     ?_TMR2_StartTimer:	
  1702                           ; 1 bytes @ 0x0
  1703                           
  1704  0070                     ?_TMR2_StopTimer:	
  1705                           ; 1 bytes @ 0x0
  1706                           
  1707  0070                     ?_ClearTicker:	
  1708                           ; 1 bytes @ 0x0
  1709                           
  1710  0070                     ?_UART_buff_get:	
  1711                           ; 1 bytes @ 0x0
  1712                           
  1713  0070                     ?_Send_put:	
  1714                           ; 1 bytes @ 0x0
  1715                           
  1716  0070                     ?_putch:	
  1717                           ; 1 bytes @ 0x0
  1718                           
  1719  0070                     ?_SR_FRSTalk:	
  1720                           ; 1 bytes @ 0x0
  1721                           
  1722  0070                     ?_SR_FRSPowerDown:	
  1723                           ; 1 bytes @ 0x0
  1724                           
  1725  0070                     ?_SR_FRSStart:	
  1726                           ; 1 bytes @ 0x0
  1727                           
  1728  0070                     ?i1_UART_buff_get:	
  1729                           ; 1 bytes @ 0x0
  1730                           
  1731  0070                     ?_main:	
  1732                           ; 1 bytes @ 0x0
  1733                           
  1734  0070                     ?_UART_buff_size:	
  1735                           ; 2 bytes @ 0x0
  1736                           
  1737  0070                     ?i1_UART_buff_modulo_inc:	
  1738                           ; 2 bytes @ 0x0
  1739                           
  1740  0070                     i1UART_buff_modulo_inc@value:	
  1741                           ; 2 bytes @ 0x0
  1742                           
  1743                           
  1744                           ; 2 bytes @ 0x0
  1745  0070                     	ds	2
  1746  0072                     i1UART_buff_modulo_inc@modulus:	
  1747                           
  1748                           ; 2 bytes @ 0x2
  1749  0072                     	ds	1
  1750  0073                     ??_UART_buff_size:	
  1751  0073                     UART_buff_size@_this:	
  1752                           ; 1 bytes @ 0x3
  1753                           
  1754                           
  1755                           ; 1 bytes @ 0x3
  1756  0073                     	ds	1
  1757  0074                     ??i1_UART_buff_modulo_inc:	
  1758  0074                     i1UART_buff_modulo_inc@my_value:	
  1759                           ; 1 bytes @ 0x4
  1760                           
  1761                           
  1762                           ; 2 bytes @ 0x4
  1763  0074                     	ds	2
  1764  0076                     ?i1_UART_buff_put:	
  1765  0076                     ??i1_UART_buff_get:	
  1766                           ; 1 bytes @ 0x6
  1767                           
  1768  0076                     i1UART_buff_put@c:	
  1769                           ; 1 bytes @ 0x6
  1770                           
  1771                           
  1772                           ; 1 bytes @ 0x6
  1773  0076                     	ds	1
  1774  0077                     ??i1_UART_buff_put:	
  1775                           
  1776                           ; 1 bytes @ 0x7
  1777  0077                     	ds	2
  1778  0079                     i1UART_buff_get@c:	
  1779                           
  1780                           ; 1 bytes @ 0x9
  1781  0079                     	ds	1
  1782  007A                     i1UART_buff_put@_this:	
  1783  007A                     i1UART_buff_get@_this:	
  1784                           ; 1 bytes @ 0xA
  1785                           
  1786                           
  1787                           ; 1 bytes @ 0xA
  1788  007A                     	ds	1
  1789  007B                     ??_EUSART1_Receive_ISR:	
  1790  007B                     ??_EUSART1_Transmit_ISR:	
  1791                           ; 1 bytes @ 0xB
  1792                           
  1793                           
  1794                           ; 1 bytes @ 0xB
  1795  007B                     	ds	1
  1796  007C                     EUSART1_Receive_ISR@data:	
  1797                           
  1798                           ; 1 bytes @ 0xC
  1799  007C                     	ds	1
  1800  007D                     ??_INTERRUPT_InterruptManager:	
  1801                           
  1802                           ; 1 bytes @ 0xD
  1803  007D                     	ds	1
  1804                           
  1805                           	psect	cstackBANK0
  1806  0020                     __pcstackBANK0:	
  1807  0020                     ?___ftge:	
  1808  0020                     ??_LEDOff:	
  1809                           ; 1 bit 
  1810                           
  1811  0020                     ?_Delay:	
  1812                           ; 1 bytes @ 0x0
  1813                           
  1814  0020                     ??_ADC_Initialize:	
  1815                           ; 1 bytes @ 0x0
  1816                           
  1817  0020                     ??_INTERRUPT_Initialize:	
  1818                           ; 1 bytes @ 0x0
  1819                           
  1820  0020                     ??_TMR2_Initialize:	
  1821                           ; 1 bytes @ 0x0
  1822                           
  1823  0020                     ?_memset:	
  1824                           ; 1 bytes @ 0x0
  1825                           
  1826  0020                     ??_SetADCChannel:	
  1827                           ; 1 bytes @ 0x0
  1828                           
  1829  0020                     ??_ReadCharger:	
  1830                           ; 1 bytes @ 0x0
  1831                           
  1832  0020                     ??_TMR2_StartTimer:	
  1833                           ; 1 bytes @ 0x0
  1834                           
  1835  0020                     ??_TMR2_StopTimer:	
  1836                           ; 1 bytes @ 0x0
  1837                           
  1838  0020                     ??_ClearTicker:	
  1839                           ; 1 bytes @ 0x0
  1840                           
  1841  0020                     ??_SR_FRSTalk:	
  1842                           ; 1 bytes @ 0x0
  1843                           
  1844  0020                     ??_SR_FRSPowerDown:	
  1845                           ; 1 bytes @ 0x0
  1846                           
  1847  0020                     ?_UART_buff_modulo_inc:	
  1848                           ; 1 bytes @ 0x0
  1849                           
  1850  0020                     ?_GetTicker:	
  1851                           ; 2 bytes @ 0x0
  1852                           
  1853  0020                     ?___awmod:	
  1854                           ; 2 bytes @ 0x0
  1855                           
  1856  0020                     ?___ftpack:	
  1857                           ; 2 bytes @ 0x0
  1858                           
  1859  0020                     ?___ftneg:	
  1860                           ; 3 bytes @ 0x0
  1861                           
  1862  0020                     ?__tdiv_to_l_:	
  1863                           ; 3 bytes @ 0x0
  1864                           
  1865  0020                     ?__div_to_l_:	
  1866                           ; 4 bytes @ 0x0
  1867                           
  1868  0020                     ?___lldiv:	
  1869                           ; 4 bytes @ 0x0
  1870                           
  1871  0020                     SetADCChannel@ch:	
  1872                           ; 4 bytes @ 0x0
  1873                           
  1874  0020                     Delay@wait:	
  1875                           ; 1 bytes @ 0x0
  1876                           
  1877  0020                     UART_buff_modulo_inc@value:	
  1878                           ; 2 bytes @ 0x0
  1879                           
  1880  0020                     ___awmod@divisor:	
  1881                           ; 2 bytes @ 0x0
  1882                           
  1883  0020                     memset@c:	
  1884                           ; 2 bytes @ 0x0
  1885                           
  1886  0020                     __div_to_l_@f1:	
  1887                           ; 2 bytes @ 0x0
  1888                           
  1889  0020                     ___ftpack@arg:	
  1890                           ; 3 bytes @ 0x0
  1891                           
  1892  0020                     __tdiv_to_l_@f1:	
  1893                           ; 3 bytes @ 0x0
  1894                           
  1895  0020                     ___ftge@ff1:	
  1896                           ; 3 bytes @ 0x0
  1897                           
  1898  0020                     ___ftneg@f1:	
  1899                           ; 3 bytes @ 0x0
  1900                           
  1901  0020                     ___lldiv@divisor:	
  1902                           ; 3 bytes @ 0x0
  1903                           
  1904                           
  1905                           ; 4 bytes @ 0x0
  1906  0020                     	ds	1
  1907  0021                     ?_ReadVoltage:	
  1908                           
  1909                           ; 2 bytes @ 0x1
  1910  0021                     	ds	1
  1911  0022                     ??_Delay:	
  1912  0022                     ??_GetTicker:	
  1913                           ; 1 bytes @ 0x2
  1914                           
  1915  0022                     UART_buff_modulo_inc@modulus:	
  1916                           ; 1 bytes @ 0x2
  1917                           
  1918  0022                     ___awmod@dividend:	
  1919                           ; 2 bytes @ 0x2
  1920                           
  1921  0022                     memset@n:	
  1922                           ; 2 bytes @ 0x2
  1923                           
  1924                           
  1925                           ; 2 bytes @ 0x2
  1926  0022                     	ds	1
  1927  0023                     ??___ftneg:	
  1928  0023                     ___ftpack@exp:	
  1929                           ; 1 bytes @ 0x3
  1930                           
  1931  0023                     Delay@x:	
  1932                           ; 1 bytes @ 0x3
  1933                           
  1934  0023                     __div_to_l_@f2:	
  1935                           ; 2 bytes @ 0x3
  1936                           
  1937  0023                     __tdiv_to_l_@f2:	
  1938                           ; 3 bytes @ 0x3
  1939                           
  1940  0023                     ___ftge@ff2:	
  1941                           ; 3 bytes @ 0x3
  1942                           
  1943                           
  1944                           ; 3 bytes @ 0x3
  1945  0023                     	ds	1
  1946  0024                     ??_memset:	
  1947  0024                     ??_UART_buff_modulo_inc:	
  1948                           ; 1 bytes @ 0x4
  1949                           
  1950  0024                     ??_ReadVoltage:	
  1951                           ; 1 bytes @ 0x4
  1952                           
  1953  0024                     ??___awmod:	
  1954                           ; 1 bytes @ 0x4
  1955                           
  1956  0024                     ReadVoltage@ch:	
  1957                           ; 1 bytes @ 0x4
  1958                           
  1959  0024                     ___ftpack@sign:	
  1960                           ; 1 bytes @ 0x4
  1961                           
  1962  0024                     UART_buff_modulo_inc@my_value:	
  1963                           ; 1 bytes @ 0x4
  1964                           
  1965  0024                     ___lldiv@dividend:	
  1966                           ; 2 bytes @ 0x4
  1967                           
  1968                           
  1969                           ; 4 bytes @ 0x4
  1970  0024                     	ds	1
  1971  0025                     ??___ftpack:	
  1972  0025                     ___awmod@counter:	
  1973                           ; 1 bytes @ 0x5
  1974                           
  1975  0025                     memset@p1:	
  1976                           ; 1 bytes @ 0x5
  1977                           
  1978                           
  1979                           ; 1 bytes @ 0x5
  1980  0025                     	ds	1
  1981  0026                     ??__tdiv_to_l_:	
  1982  0026                     ??__div_to_l_:	
  1983                           ; 1 bytes @ 0x6
  1984                           
  1985  0026                     ?_UART_buff_put:	
  1986                           ; 1 bytes @ 0x6
  1987                           
  1988  0026                     ??_UART_buff_get:	
  1989                           ; 1 bytes @ 0x6
  1990                           
  1991  0026                     ??___ftge:	
  1992                           ; 1 bytes @ 0x6
  1993                           
  1994  0026                     UART_buff_put@c:	
  1995                           ; 1 bytes @ 0x6
  1996                           
  1997  0026                     ___awmod@sign:	
  1998                           ; 1 bytes @ 0x6
  1999                           
  2000  0026                     memset@p:	
  2001                           ; 1 bytes @ 0x6
  2002                           
  2003                           
  2004                           ; 1 bytes @ 0x6
  2005  0026                     	ds	1
  2006  0027                     ??_UART_buff_init:	
  2007  0027                     ??_UART_buff_put:	
  2008                           ; 1 bytes @ 0x7
  2009                           
  2010  0027                     ?___awdiv:	
  2011                           ; 1 bytes @ 0x7
  2012                           
  2013  0027                     UART_buff_init@_this:	
  2014                           ; 2 bytes @ 0x7
  2015                           
  2016  0027                     ___awdiv@divisor:	
  2017                           ; 1 bytes @ 0x7
  2018                           
  2019                           
  2020                           ; 2 bytes @ 0x7
  2021  0027                     	ds	1
  2022  0028                     ??_Start:	
  2023  0028                     ??_EUSART1_Initialize:	
  2024                           ; 1 bytes @ 0x8
  2025                           
  2026  0028                     ??___lldiv:	
  2027                           ; 1 bytes @ 0x8
  2028                           
  2029  0028                     ?___awtoft:	
  2030                           ; 1 bytes @ 0x8
  2031                           
  2032  0028                     ?___lltoft:	
  2033                           ; 3 bytes @ 0x8
  2034                           
  2035  0028                     ___awtoft@c:	
  2036                           ; 3 bytes @ 0x8
  2037                           
  2038  0028                     ___lltoft@c:	
  2039                           ; 2 bytes @ 0x8
  2040                           
  2041                           
  2042                           ; 4 bytes @ 0x8
  2043  0028                     	ds	1
  2044  0029                     UART_buff_get@c:	
  2045  0029                     ___awdiv@dividend:	
  2046                           ; 1 bytes @ 0x9
  2047                           
  2048  0029                     ___lldiv@quotient:	
  2049                           ; 2 bytes @ 0x9
  2050                           
  2051                           
  2052                           ; 4 bytes @ 0x9
  2053  0029                     	ds	1
  2054  002A                     UART_buff_put@_this:	
  2055  002A                     UART_buff_get@_this:	
  2056                           ; 1 bytes @ 0xA
  2057                           
  2058  002A                     __tdiv_to_l_@quot:	
  2059                           ; 1 bytes @ 0xA
  2060                           
  2061                           
  2062                           ; 4 bytes @ 0xA
  2063  002A                     	ds	1
  2064  002B                     ??_Send_put:	
  2065  002B                     ??___awdiv:	
  2066                           ; 1 bytes @ 0xB
  2067                           
  2068  002B                     ??___awtoft:	
  2069                           ; 1 bytes @ 0xB
  2070                           
  2071                           
  2072                           ; 1 bytes @ 0xB
  2073  002B                     	ds	1
  2074  002C                     ??___lltoft:	
  2075  002C                     Send_put@_data:	
  2076                           ; 1 bytes @ 0xC
  2077                           
  2078  002C                     ___awdiv@counter:	
  2079                           ; 1 bytes @ 0xC
  2080                           
  2081                           
  2082                           ; 1 bytes @ 0xC
  2083  002C                     	ds	1
  2084  002D                     ??_putch:	
  2085  002D                     putch@txData:	
  2086                           ; 1 bytes @ 0xD
  2087                           
  2088  002D                     ___awdiv@sign:	
  2089                           ; 1 bytes @ 0xD
  2090                           
  2091  002D                     ___awtoft@sign:	
  2092                           ; 1 bytes @ 0xD
  2093                           
  2094  002D                     ___lldiv@counter:	
  2095                           ; 1 bytes @ 0xD
  2096                           
  2097  002D                     ___lltoft@exp:	
  2098                           ; 1 bytes @ 0xD
  2099                           
  2100                           
  2101                           ; 1 bytes @ 0xD
  2102  002D                     	ds	1
  2103  002E                     ?___llmod:	
  2104  002E                     __tdiv_to_l_@cntr:	
  2105                           ; 4 bytes @ 0xE
  2106                           
  2107  002E                     ___awdiv@quotient:	
  2108                           ; 1 bytes @ 0xE
  2109                           
  2110  002E                     __div_to_l_@quot:	
  2111                           ; 2 bytes @ 0xE
  2112                           
  2113  002E                     ___llmod@divisor:	
  2114                           ; 4 bytes @ 0xE
  2115                           
  2116                           
  2117                           ; 4 bytes @ 0xE
  2118  002E                     	ds	1
  2119  002F                     __tdiv_to_l_@exp1:	
  2120                           
  2121                           ; 1 bytes @ 0xF
  2122  002F                     	ds	1
  2123  0030                     ?___wmul:	
  2124  0030                     ___wmul@multiplier:	
  2125                           ; 2 bytes @ 0x10
  2126                           
  2127                           
  2128                           ; 2 bytes @ 0x10
  2129  0030                     	ds	2
  2130  0032                     __div_to_l_@cntr:	
  2131  0032                     ___wmul@multiplicand:	
  2132                           ; 1 bytes @ 0x12
  2133                           
  2134  0032                     ___llmod@dividend:	
  2135                           ; 2 bytes @ 0x12
  2136                           
  2137                           
  2138                           ; 4 bytes @ 0x12
  2139  0032                     	ds	1
  2140  0033                     __div_to_l_@exp1:	
  2141                           
  2142                           ; 1 bytes @ 0x13
  2143  0033                     	ds	1
  2144  0034                     ??___wmul:	
  2145  0034                     ___wmul@product:	
  2146                           ; 1 bytes @ 0x14
  2147                           
  2148                           
  2149                           ; 2 bytes @ 0x14
  2150  0034                     	ds	2
  2151  0036                     ??___llmod:	
  2152  0036                     ?___ftmul:	
  2153                           ; 1 bytes @ 0x16
  2154                           
  2155  0036                     ___ftmul@f1:	
  2156                           ; 3 bytes @ 0x16
  2157                           
  2158                           
  2159                           ; 3 bytes @ 0x16
  2160  0036                     	ds	1
  2161  0037                     ___llmod@counter:	
  2162                           
  2163                           ; 1 bytes @ 0x17
  2164  0037                     	ds	2
  2165  0039                     ___ftmul@f2:	
  2166                           
  2167                           ; 3 bytes @ 0x19
  2168  0039                     	ds	3
  2169  003C                     ??___ftmul:	
  2170                           
  2171                           ; 1 bytes @ 0x1C
  2172  003C                     	ds	4
  2173  0040                     ___ftmul@exp:	
  2174                           
  2175                           ; 1 bytes @ 0x20
  2176  0040                     	ds	1
  2177  0041                     ___ftmul@f3_as_product:	
  2178                           
  2179                           ; 3 bytes @ 0x21
  2180  0041                     	ds	3
  2181  0044                     ___ftmul@cntr:	
  2182                           
  2183                           ; 1 bytes @ 0x24
  2184  0044                     	ds	1
  2185  0045                     ___ftmul@sign:	
  2186                           
  2187                           ; 1 bytes @ 0x25
  2188  0045                     	ds	1
  2189  0046                     ?_fround:	
  2190  0046                     ?_scale:	
  2191                           ; 3 bytes @ 0x26
  2192                           
  2193  0046                     ?___ftdiv:	
  2194                           ; 3 bytes @ 0x26
  2195                           
  2196  0046                     ___ftdiv@f2:	
  2197                           ; 3 bytes @ 0x26
  2198                           
  2199                           
  2200                           ; 3 bytes @ 0x26
  2201  0046                     	ds	3
  2202  0049                     ??_fround:	
  2203  0049                     ??_scale:	
  2204                           ; 1 bytes @ 0x29
  2205                           
  2206  0049                     ___ftdiv@f1:	
  2207                           ; 1 bytes @ 0x29
  2208                           
  2209                           
  2210                           ; 3 bytes @ 0x29
  2211  0049                     	ds	2
  2212  004B                     _scale$1274:	
  2213                           
  2214                           ; 3 bytes @ 0x2B
  2215  004B                     	ds	1
  2216  004C                     ??___ftdiv:	
  2217                           
  2218                           ; 1 bytes @ 0x2C
  2219  004C                     	ds	1
  2220  004D                     _fround$1273:	
  2221                           
  2222                           ; 3 bytes @ 0x2D
  2223  004D                     	ds	1
  2224  004E                     scale@scl:	
  2225                           
  2226                           ; 1 bytes @ 0x2E
  2227  004E                     	ds	1
  2228  004F                     ?___fttol:	
  2229  004F                     ___fttol@f1:	
  2230                           ; 4 bytes @ 0x2F
  2231                           
  2232                           
  2233                           ; 3 bytes @ 0x2F
  2234  004F                     	ds	1
  2235  0050                     ___ftdiv@cntr:	
  2236  0050                     _fround$1272:	
  2237                           ; 1 bytes @ 0x30
  2238                           
  2239                           
  2240                           ; 3 bytes @ 0x30
  2241  0050                     	ds	1
  2242  0051                     ___ftdiv@f3:	
  2243                           
  2244                           ; 3 bytes @ 0x31
  2245  0051                     	ds	2
  2246  0053                     ??___fttol:	
  2247  0053                     fround@prec:	
  2248                           ; 1 bytes @ 0x33
  2249                           
  2250                           
  2251                           ; 1 bytes @ 0x33
  2252  0053                     	ds	1
  2253  0054                     ?___ftadd:	
  2254  0054                     ___ftdiv@exp:	
  2255                           ; 3 bytes @ 0x34
  2256                           
  2257  0054                     ___ftadd@f1:	
  2258                           ; 1 bytes @ 0x34
  2259                           
  2260                           
  2261                           ; 3 bytes @ 0x34
  2262  0054                     	ds	1
  2263  0055                     ___ftdiv@sign:	
  2264                           
  2265                           ; 1 bytes @ 0x35
  2266  0055                     	ds	1
  2267  0056                     ??_RadioOperation:	
  2268                           
  2269                           ; 1 bytes @ 0x36
  2270  0056                     	ds	1
  2271  0057                     ___fttol@sign1:	
  2272  0057                     ___ftadd@f2:	
  2273                           ; 1 bytes @ 0x37
  2274                           
  2275                           
  2276                           ; 3 bytes @ 0x37
  2277  0057                     	ds	1
  2278  0058                     ___fttol@lval:	
  2279                           
  2280                           ; 4 bytes @ 0x38
  2281  0058                     	ds	2
  2282  005A                     ??___ftadd:	
  2283                           
  2284                           ; 1 bytes @ 0x3A
  2285  005A                     	ds	2
  2286  005C                     ___fttol@exp1:	
  2287                           
  2288                           ; 1 bytes @ 0x3C
  2289  005C                     	ds	2
  2290  005E                     ___ftadd@sign:	
  2291                           
  2292                           ; 1 bytes @ 0x3E
  2293  005E                     	ds	1
  2294  005F                     ___ftadd@exp2:	
  2295                           
  2296                           ; 1 bytes @ 0x3F
  2297  005F                     	ds	1
  2298  0060                     ___ftadd@exp1:	
  2299                           
  2300                           ; 1 bytes @ 0x40
  2301  0060                     	ds	1
  2302  0061                     ?___ftsub:	
  2303  0061                     ___ftsub@f2:	
  2304                           ; 3 bytes @ 0x41
  2305                           
  2306                           
  2307                           ; 3 bytes @ 0x41
  2308  0061                     	ds	3
  2309  0064                     ___ftsub@f1:	
  2310                           
  2311                           ; 3 bytes @ 0x44
  2312  0064                     	ds	3
  2313  0067                     ??_printf:	
  2314  0067                     ??___ftsub:	
  2315                           ; 1 bytes @ 0x47
  2316                           
  2317                           
  2318                           ; 1 bytes @ 0x47
  2319  0067                     	ds	6
  2320  006D                     ??_SetCommandMode:	
  2321  006D                     ??_SetFrequency:	
  2322                           ; 1 bytes @ 0x4D
  2323                           
  2324  006D                     ??_SetPowerSave:	
  2325                           ; 1 bytes @ 0x4D
  2326                           
  2327  006D                     ??_SetVolume:	
  2328                           ; 1 bytes @ 0x4D
  2329                           
  2330  006D                     ?_SetVOX:	
  2331                           ; 1 bytes @ 0x4D
  2332                           
  2333  006D                     ?_SetMIC:	
  2334                           ; 1 bytes @ 0x4D
  2335                           
  2336  006D                     SetMIC@scram:	
  2337                           ; 1 bytes @ 0x4D
  2338                           
  2339  006D                     SetVOX@volume:	
  2340                           ; 1 bytes @ 0x4D
  2341                           
  2342                           
  2343                           ; 2 bytes @ 0x4D
  2344  006D                     	ds	1
  2345  006E                     SetMIC@volume:	
  2346                           
  2347                           ; 1 bytes @ 0x4E
  2348  006E                     	ds	1
  2349  006F                     ??_SetVOX:	
  2350  006F                     SetVolume@volume:	
  2351                           ; 1 bytes @ 0x4F
  2352                           
  2353                           
  2354                           ; 1 bytes @ 0x4F
  2355  006F                     	ds	1
  2356  0070                     ??_RadioBegin:	
  2357  0070                     ??_main:	
  2358                           ; 1 bytes @ 0x50
  2359                           
  2360  0070                     ??_SR_FRSStart:	
  2361                           ; 1 bytes @ 0x50
  2362                           
  2363                           
  2364                           	psect	maintext
  2365  131D                     __pmaintext:	
  2366                           ; 1 bytes @ 0x50
  2367 ;;
  2368 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2369 ;;
  2370 ;; *************** function _main *****************
  2371 ;; Defined at:
  2372 ;;		line 13 in file "Main.c"
  2373 ;; Parameters:    Size  Location     Type
  2374 ;;		None
  2375 ;; Auto vars:     Size  Location     Type
  2376 ;;		None
  2377 ;; Return value:  Size  Location     Type
  2378 ;;                  2   12[None  ] int 
  2379 ;; Registers used:
  2380 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2381 ;; Tracked objects:
  2382 ;;		On entry : B1F/0
  2383 ;;		On exit  : 0/0
  2384 ;;		Unchanged: 0/0
  2385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2390 ;;Total ram usage:        0 bytes
  2391 ;; Hardware stack levels required when called:   12
  2392 ;; This function calls:
  2393 ;;		_Delay
  2394 ;;		_LEDOff
  2395 ;;		_RadioBegin
  2396 ;;		_RadioOperation
  2397 ;;		_Start
  2398 ;; This function is called by:
  2399 ;;		Startup code after reset
  2400 ;; This function uses a non-reentrant model
  2401 ;;
  2402                           
  2403                           
  2404                           ;psect for function _main
  2405  131D                     _main:	
  2406                           
  2407                           ;Main.c: 14: Start();
  2408                           
  2409                           ;incstack = 0
  2410                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2411  131D  3193  23C7  3193   	fcall	_Start
  2412                           
  2413                           ;Main.c: 15: RadioBegin();
  2414  1320  3192  225D  3193   	fcall	_RadioBegin
  2415                           
  2416                           ;Main.c: 16: LEDOff();
  2417  1323  3192  2270  3193   	fcall	_LEDOff
  2418  1326                     l3220:	
  2419                           ;Main.c: 17: while(1){
  2420                           
  2421                           
  2422                           ;Main.c: 18: RadioOperation();
  2423  1326  318B  23A7  3193   	fcall	_RadioOperation
  2424                           
  2425                           ;Main.c: 19: Delay(100);
  2426  1329  3064               	movlw	100
  2427  132A  0020               	movlb	0	; select bank0
  2428  132B  00A0               	movwf	Delay@wait
  2429  132C  3000               	movlw	0
  2430  132D  00A1               	movwf	Delay@wait+1
  2431  132E  3193  23E3  3193   	fcall	_Delay
  2432  1331  2B26               	goto	l3220
  2433  1332                     __end_of_main:	
  2434                           ;Main.c: 20: }
  2435                           ;Main.c: 21: return 0;
  2436                           ;	Return value of _main is never used
  2437                           
  2438                           
  2439                           	psect	text1
  2440  13C7                     __ptext1:	
  2441 ;; *************** function _Start *****************
  2442 ;; Defined at:
  2443 ;;		line 9 in file "Function.c"
  2444 ;; Parameters:    Size  Location     Type
  2445 ;;		None
  2446 ;; Auto vars:     Size  Location     Type
  2447 ;;		None
  2448 ;; Return value:  Size  Location     Type
  2449 ;;                  1    wreg      void 
  2450 ;; Registers used:
  2451 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2452 ;; Tracked objects:
  2453 ;;		On entry : 0/0
  2454 ;;		On exit  : 0/0
  2455 ;;		Unchanged: 0/0
  2456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2461 ;;Total ram usage:        0 bytes
  2462 ;; Hardware stack levels used:    1
  2463 ;; Hardware stack levels required when called:    7
  2464 ;; This function calls:
  2465 ;;		_ADC_Initialize
  2466 ;;		_EUSART1_Initialize
  2467 ;;		_INTERRUPT_Initialize
  2468 ;;		_TMR2_Initialize
  2469 ;; This function is called by:
  2470 ;;		_main
  2471 ;; This function uses a non-reentrant model
  2472 ;;
  2473                           
  2474                           
  2475                           ;psect for function _Start
  2476  13C7                     _Start:	
  2477                           
  2478                           ;Function.c: 13: TRISCbits.TRISC7 = 0;
  2479                           
  2480                           ;incstack = 0
  2481                           ; Regs used in _Start: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2482  13C7  0021               	movlb	1	; select bank1
  2483  13C8  138E               	bcf	14,7	;volatile
  2484                           
  2485                           ;Function.c: 14: TRISCbits.TRISC6 = 0;
  2486  13C9  130E               	bcf	14,6	;volatile
  2487                           
  2488                           ;Function.c: 15: TRISCbits.TRISC5 = 0;
  2489  13CA  128E               	bcf	14,5	;volatile
  2490                           
  2491                           ;Function.c: 16: TRISCbits.TRISC4 = 0;
  2492  13CB  120E               	bcf	14,4	;volatile
  2493                           
  2494                           ;Function.c: 17: TRISCbits.TRISC3 = 0;
  2495  13CC  118E               	bcf	14,3	;volatile
  2496                           
  2497                           ;Function.c: 18: TRISAbits.TRISA2 = 1;
  2498  13CD  150C               	bsf	12,2	;volatile
  2499                           
  2500                           ;Function.c: 19: TRISCbits.TRISC0 = 1;
  2501  13CE  140E               	bsf	14,0	;volatile
  2502                           
  2503                           ;Function.c: 20: TRISCbits.TRISC1 = 1;
  2504  13CF  148E               	bsf	14,1	;volatile
  2505                           
  2506                           ;Function.c: 24: ANSELCbits.ANSC0 = 0;
  2507  13D0  0023               	movlb	3	; select bank3
  2508  13D1  100E               	bcf	14,0	;volatile
  2509                           
  2510                           ;Function.c: 25: ANSELCbits.ANSC1 = 0;
  2511  13D2  108E               	bcf	14,1	;volatile
  2512                           
  2513                           ;Function.c: 26: ANSELAbits.ANSA2 = 0;
  2514  13D3  110C               	bcf	12,2	;volatile
  2515                           
  2516                           ;Function.c: 27: ANSELCbits.ANSC3 = 0;
  2517  13D4  118E               	bcf	14,3	;volatile
  2518                           
  2519                           ;Function.c: 28: ANSELCbits.ANSC6 = 0;
  2520  13D5  130E               	bcf	14,6	;volatile
  2521                           
  2522                           ;Function.c: 29: ANSELCbits.ANSC7 = 0;
  2523  13D6  138E               	bcf	14,7	;volatile
  2524                           
  2525                           ;Function.c: 33: ADC_Initialize();
  2526  13D7  3192  22A3  3193   	fcall	_ADC_Initialize
  2527                           
  2528                           ;Function.c: 37: EUSART1_Initialize();
  2529  13DA  3193  2348  3193   	fcall	_EUSART1_Initialize
  2530                           
  2531                           ;Function.c: 41: INTERRUPT_Initialize();
  2532  13DD  3192  22AD  3193   	fcall	_INTERRUPT_Initialize
  2533                           
  2534                           ;Function.c: 42: TMR2_Initialize();
  2535  13E0  3192  22B7         	fcall	_TMR2_Initialize
  2536  13E2  0008               	return
  2537  13E3                     __end_of_Start:	
  2538                           
  2539                           	psect	text2
  2540  12B7                     __ptext2:	
  2541 ;; *************** function _TMR2_Initialize *****************
  2542 ;; Defined at:
  2543 ;;		line 9 in file "Timer.c"
  2544 ;; Parameters:    Size  Location     Type
  2545 ;;		None
  2546 ;; Auto vars:     Size  Location     Type
  2547 ;;		None
  2548 ;; Return value:  Size  Location     Type
  2549 ;;                  1    wreg      void 
  2550 ;; Registers used:
  2551 ;;		wreg, status,2
  2552 ;; Tracked objects:
  2553 ;;		On entry : 0/0
  2554 ;;		On exit  : 0/0
  2555 ;;		Unchanged: 0/0
  2556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2561 ;;Total ram usage:        0 bytes
  2562 ;; Hardware stack levels used:    1
  2563 ;; Hardware stack levels required when called:    4
  2564 ;; This function calls:
  2565 ;;		Nothing
  2566 ;; This function is called by:
  2567 ;;		_Start
  2568 ;; This function uses a non-reentrant model
  2569 ;;
  2570                           
  2571                           
  2572                           ;psect for function _TMR2_Initialize
  2573  12B7                     _TMR2_Initialize:	
  2574                           
  2575                           ;Timer.c: 14: T2CON = 0x00;
  2576                           
  2577                           ;incstack = 0
  2578                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  2579  12B7  0020               	movlb	0	; select bank0
  2580  12B8  019C               	clrf	28	;volatile
  2581                           
  2582                           ;Timer.c: 15: T2CONbits.TMR2ON = 0;
  2583  12B9  111C               	bcf	28,2	;volatile
  2584                           
  2585                           ;Timer.c: 18: PR2 = 18;
  2586  12BA  3012               	movlw	18
  2587  12BB  009B               	movwf	27	;volatile
  2588                           
  2589                           ;Timer.c: 21: TMR2 = 0;
  2590  12BC  019A               	clrf	26	;volatile
  2591                           
  2592                           ;Timer.c: 24: PIR1bits.TMR2IF = 0;
  2593  12BD  1091               	bcf	17,1	;volatile
  2594                           
  2595                           ;Timer.c: 27: PIE1bits.TMR2IE = 1;
  2596  12BE  0021               	movlb	1	; select bank1
  2597  12BF  1491               	bsf	17,1	;volatile
  2598  12C0  0008               	return
  2599  12C1                     __end_of_TMR2_Initialize:	
  2600                           
  2601                           	psect	text3
  2602  12AD                     __ptext3:	
  2603 ;; *************** function _INTERRUPT_Initialize *****************
  2604 ;; Defined at:
  2605 ;;		line 53 in file "Function.c"
  2606 ;; Parameters:    Size  Location     Type
  2607 ;;		None
  2608 ;; Auto vars:     Size  Location     Type
  2609 ;;		None
  2610 ;; Return value:  Size  Location     Type
  2611 ;;                  1    wreg      void 
  2612 ;; Registers used:
  2613 ;;		status,2
  2614 ;; Tracked objects:
  2615 ;;		On entry : 0/0
  2616 ;;		On exit  : 0/0
  2617 ;;		Unchanged: 0/0
  2618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2623 ;;Total ram usage:        0 bytes
  2624 ;; Hardware stack levels used:    1
  2625 ;; Hardware stack levels required when called:    4
  2626 ;; This function calls:
  2627 ;;		Nothing
  2628 ;; This function is called by:
  2629 ;;		_Start
  2630 ;; This function uses a non-reentrant model
  2631 ;;
  2632                           
  2633                           
  2634                           ;psect for function _INTERRUPT_Initialize
  2635  12AD                     _INTERRUPT_Initialize:	
  2636                           
  2637                           ;Function.c: 55: INTCON = 0;
  2638                           
  2639                           ;incstack = 0
  2640                           ; Regs used in _INTERRUPT_Initialize: [status,2]
  2641  12AD  018B               	clrf	11	;volatile
  2642                           
  2643                           ;Function.c: 56: INTCONbits.TMR0IE = 0;
  2644  12AE  128B               	bcf	11,5	;volatile
  2645                           
  2646                           ;Function.c: 57: PIR1bits.TMR2IF = 0;
  2647  12AF  0020               	movlb	0	; select bank0
  2648  12B0  1091               	bcf	17,1	;volatile
  2649                           
  2650                           ;Function.c: 58: PIE1bits.TMR2IE = 1;
  2651  12B1  0021               	movlb	1	; select bank1
  2652  12B2  1491               	bsf	17,1	;volatile
  2653                           
  2654                           ;Function.c: 59: INTCONbits.TMR0IF = 0;
  2655  12B3  110B               	bcf	11,2	;volatile
  2656                           
  2657                           ;Function.c: 60: INTCONbits.GIE = 1;
  2658  12B4  178B               	bsf	11,7	;volatile
  2659                           
  2660                           ;Function.c: 61: INTCONbits.PEIE = 1;
  2661  12B5  170B               	bsf	11,6	;volatile
  2662  12B6  0008               	return
  2663  12B7                     __end_of_INTERRUPT_Initialize:	
  2664                           
  2665                           	psect	text4
  2666  1348                     __ptext4:	
  2667 ;; *************** function _EUSART1_Initialize *****************
  2668 ;; Defined at:
  2669 ;;		line 30 in file "UART.c"
  2670 ;; Parameters:    Size  Location     Type
  2671 ;;		None
  2672 ;; Auto vars:     Size  Location     Type
  2673 ;;		None
  2674 ;; Return value:  Size  Location     Type
  2675 ;;                  1    wreg      void 
  2676 ;; Registers used:
  2677 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2678 ;; Tracked objects:
  2679 ;;		On entry : 0/0
  2680 ;;		On exit  : 0/0
  2681 ;;		Unchanged: 0/0
  2682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2686 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2687 ;;Total ram usage:        0 bytes
  2688 ;; Hardware stack levels used:    1
  2689 ;; Hardware stack levels required when called:    6
  2690 ;; This function calls:
  2691 ;;		_UART_buff_init
  2692 ;; This function is called by:
  2693 ;;		_Start
  2694 ;; This function uses a non-reentrant model
  2695 ;;
  2696                           
  2697                           
  2698                           ;psect for function _EUSART1_Initialize
  2699  1348                     _EUSART1_Initialize:	
  2700                           
  2701                           ;UART.c: 32: PIE1bits.RCIE = 0;
  2702                           
  2703                           ;incstack = 0
  2704                           ; Regs used in _EUSART1_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2705  1348  0021               	movlb	1	; select bank1
  2706  1349  1291               	bcf	17,5	;volatile
  2707                           
  2708                           ;UART.c: 33: PIE1bits.TXIE = 0;
  2709  134A  1211               	bcf	17,4	;volatile
  2710                           
  2711                           ;UART.c: 35: SPBRG = 0x25;
  2712  134B  3000               	movlw	0
  2713  134C  0023               	movlb	3	; select bank3
  2714  134D  009C               	movwf	28	;volatile
  2715  134E  3025               	movlw	37
  2716  134F  009B               	movwf	27	;volatile
  2717                           
  2718                           ;UART.c: 37: RCSTA = 0b10010000;
  2719  1350  3090               	movlw	144
  2720  1351  009D               	movwf	29	;volatile
  2721                           
  2722                           ;UART.c: 39: TXSTA = 0b00100000;
  2723  1352  3020               	movlw	32
  2724  1353  009E               	movwf	30	;volatile
  2725                           
  2726                           ;UART.c: 41: UART_buff_init(&input_buffer);
  2727  1354  3020               	movlw	(low (_input_buffer| (0+256)))& (0+255)
  2728  1355  3192  22D8  3193   	fcall	_UART_buff_init
  2729                           
  2730                           ;UART.c: 42: UART_buff_init(&output_buffer);
  2731  1358  303A               	movlw	(low (_output_buffer| (0+256)))& (0+255)
  2732  1359  3192  22D8         	fcall	_UART_buff_init
  2733                           
  2734                           ;UART.c: 44: PIE1bits.RCIE = 1;
  2735  135B  0021               	movlb	1	; select bank1
  2736  135C  1691               	bsf	17,5	;volatile
  2737  135D  0008               	return
  2738  135E                     __end_of_EUSART1_Initialize:	
  2739                           
  2740                           	psect	text5
  2741  12D8                     __ptext5:	
  2742 ;; *************** function _UART_buff_init *****************
  2743 ;; Defined at:
  2744 ;;		line 48 in file "UART.c"
  2745 ;; Parameters:    Size  Location     Type
  2746 ;;  _this           1    wreg     PTR struct UART_ring_buf
  2747 ;;		 -> output_buffer(26), input_buffer(26), 
  2748 ;; Auto vars:     Size  Location     Type
  2749 ;;  _this           1    7[BANK0 ] PTR struct UART_ring_buf
  2750 ;;		 -> output_buffer(26), input_buffer(26), 
  2751 ;; Return value:  Size  Location     Type
  2752 ;;                  1    wreg      void 
  2753 ;; Registers used:
  2754 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2755 ;; Tracked objects:
  2756 ;;		On entry : 0/0
  2757 ;;		On exit  : 0/0
  2758 ;;		Unchanged: 0/0
  2759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2761 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2763 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2764 ;;Total ram usage:        1 bytes
  2765 ;; Hardware stack levels used:    1
  2766 ;; Hardware stack levels required when called:    5
  2767 ;; This function calls:
  2768 ;;		_memset
  2769 ;; This function is called by:
  2770 ;;		_EUSART1_Initialize
  2771 ;; This function uses a non-reentrant model
  2772 ;;
  2773                           
  2774                           
  2775                           ;psect for function _UART_buff_init
  2776  12D8                     _UART_buff_init:	
  2777                           
  2778                           ;incstack = 0
  2779                           ; Regs used in _UART_buff_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2780                           ;UART_buff_init@_this stored from wreg
  2781  12D8  0020               	movlb	0	; select bank0
  2782  12D9  00A7               	movwf	UART_buff_init@_this
  2783                           
  2784                           ;UART.c: 57: memset(_this, 0, sizeof (*_this));
  2785  12DA  3000               	movlw	0
  2786  12DB  00A0               	movwf	memset@c
  2787  12DC  00A1               	movwf	memset@c+1
  2788  12DD  301A               	movlw	26
  2789  12DE  00A2               	movwf	memset@n
  2790  12DF  3000               	movlw	0
  2791  12E0  00A3               	movwf	memset@n+1
  2792  12E1  0827               	movf	UART_buff_init@_this,w
  2793  12E2  3193  23AB         	fcall	_memset
  2794  12E4  0008               	return
  2795  12E5                     __end_of_UART_buff_init:	
  2796                           
  2797                           	psect	text6
  2798  13AB                     __ptext6:	
  2799 ;; *************** function _memset *****************
  2800 ;; Defined at:
  2801 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  2802 ;; Parameters:    Size  Location     Type
  2803 ;;  p1              1    wreg     PTR void 
  2804 ;;		 -> output_buffer(26), input_buffer(26), 
  2805 ;;  c               2    0[BANK0 ] int 
  2806 ;;  n               2    2[BANK0 ] unsigned int 
  2807 ;; Auto vars:     Size  Location     Type
  2808 ;;  p1              1    5[BANK0 ] PTR void 
  2809 ;;		 -> output_buffer(26), input_buffer(26), 
  2810 ;;  p               1    6[BANK0 ] PTR unsigned char 
  2811 ;;		 -> output_buffer(26), input_buffer(26), 
  2812 ;; Return value:  Size  Location     Type
  2813 ;;                  1    wreg      PTR void 
  2814 ;; Registers used:
  2815 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2816 ;; Tracked objects:
  2817 ;;		On entry : 0/0
  2818 ;;		On exit  : 0/0
  2819 ;;		Unchanged: 0/0
  2820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2821 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2822 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2823 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2824 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2825 ;;Total ram usage:        7 bytes
  2826 ;; Hardware stack levels used:    1
  2827 ;; Hardware stack levels required when called:    4
  2828 ;; This function calls:
  2829 ;;		Nothing
  2830 ;; This function is called by:
  2831 ;;		_UART_buff_init
  2832 ;; This function uses a non-reentrant model
  2833 ;;
  2834                           
  2835                           
  2836                           ;psect for function _memset
  2837  13AB                     _memset:	
  2838                           
  2839                           ;incstack = 0
  2840                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  2841                           ;memset@p1 stored from wreg
  2842  13AB  0020               	movlb	0	; select bank0
  2843  13AC  00A5               	movwf	memset@p1
  2844  13AD  0825               	movf	memset@p1,w
  2845  13AE  00A4               	movwf	??_memset
  2846  13AF  0824               	movf	??_memset,w
  2847  13B0  00A6               	movwf	memset@p
  2848  13B1                     l2696:	
  2849  13B1  3001               	movlw	1
  2850  13B2  02A2               	subwf	memset@n,f
  2851  13B3  3000               	movlw	0
  2852  13B4  3BA3               	subwfb	memset@n+1,f
  2853  13B5  0A22               	incf	memset@n,w
  2854  13B6  1903               	btfsc	3,2
  2855  13B7  0A23               	incf	memset@n+1,w
  2856  13B8  1903               	btfsc	3,2
  2857  13B9  0008               	return
  2858  13BA  0820               	movf	memset@c,w
  2859  13BB  00A4               	movwf	??_memset
  2860  13BC  0826               	movf	memset@p,w
  2861  13BD  0086               	movwf	6
  2862  13BE  3001               	movlw	1	; select bank2/3
  2863  13BF  0087               	movwf	7
  2864  13C0  0824               	movf	??_memset,w
  2865  13C1  0081               	movwf	1
  2866  13C2  3001               	movlw	1
  2867  13C3  00A4               	movwf	??_memset
  2868  13C4  0824               	movf	??_memset,w
  2869  13C5  07A6               	addwf	memset@p,f
  2870  13C6  2BB1               	goto	l2696
  2871  13C7                     __end_of_memset:	
  2872                           ;	Return value of _memset is never used
  2873                           
  2874                           
  2875                           	psect	text7
  2876  12A3                     __ptext7:	
  2877 ;; *************** function _ADC_Initialize *****************
  2878 ;; Defined at:
  2879 ;;		line 4 in file "ADC.c"
  2880 ;; Parameters:    Size  Location     Type
  2881 ;;		None
  2882 ;; Auto vars:     Size  Location     Type
  2883 ;;		None
  2884 ;; Return value:  Size  Location     Type
  2885 ;;                  1    wreg      void 
  2886 ;; Registers used:
  2887 ;;		None
  2888 ;; Tracked objects:
  2889 ;;		On entry : 0/0
  2890 ;;		On exit  : 0/0
  2891 ;;		Unchanged: 0/0
  2892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2896 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2897 ;;Total ram usage:        0 bytes
  2898 ;; Hardware stack levels used:    1
  2899 ;; Hardware stack levels required when called:    4
  2900 ;; This function calls:
  2901 ;;		Nothing
  2902 ;; This function is called by:
  2903 ;;		_Start
  2904 ;; This function uses a non-reentrant model
  2905 ;;
  2906                           
  2907                           
  2908                           ;psect for function _ADC_Initialize
  2909  12A3                     _ADC_Initialize:	
  2910                           
  2911                           ;ADC.c: 5: FVRCONbits.ADFVR0 = 1;
  2912                           
  2913                           ;incstack = 0
  2914                           ; Regs used in _ADC_Initialize: []
  2915  12A3  0022               	movlb	2	; select bank2
  2916  12A4  1417               	bsf	23,0	;volatile
  2917                           
  2918                           ;ADC.c: 6: FVRCONbits.ADFVR1 = 1;
  2919  12A5  1497               	bsf	23,1	;volatile
  2920                           
  2921                           ;ADC.c: 7: ADCON1bits.ADFM = 1;
  2922  12A6  0021               	movlb	1	; select bank1
  2923  12A7  179E               	bsf	30,7	;volatile
  2924                           
  2925                           ;ADC.c: 8: ADCON1bits.ADCS0 = 0;
  2926  12A8  121E               	bcf	30,4	;volatile
  2927                           
  2928                           ;ADC.c: 9: ADCON1bits.ADCS1 = 0;
  2929  12A9  129E               	bcf	30,5	;volatile
  2930                           
  2931                           ;ADC.c: 10: ADCON1bits.ADCS2 = 1;
  2932  12AA  171E               	bsf	30,6	;volatile
  2933                           
  2934                           ;ADC.c: 11: ADCON0bits.ADON = 1;
  2935  12AB  141D               	bsf	29,0	;volatile
  2936  12AC  0008               	return
  2937  12AD                     __end_of_ADC_Initialize:	
  2938                           
  2939                           	psect	text8
  2940  0BA7                     __ptext8:	
  2941 ;; *************** function _RadioOperation *****************
  2942 ;; Defined at:
  2943 ;;		line 25 in file "Radio.c"
  2944 ;; Parameters:    Size  Location     Type
  2945 ;;		None
  2946 ;; Auto vars:     Size  Location     Type
  2947 ;;		None
  2948 ;; Return value:  Size  Location     Type
  2949 ;;                  1    wreg      void 
  2950 ;; Registers used:
  2951 ;;		wreg, status,2, status,0, pclath, cstack
  2952 ;; Tracked objects:
  2953 ;;		On entry : 0/0
  2954 ;;		On exit  : 0/0
  2955 ;;		Unchanged: 0/0
  2956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2959 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2960 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2961 ;;Total ram usage:        1 bytes
  2962 ;; Hardware stack levels used:    1
  2963 ;; Hardware stack levels required when called:    6
  2964 ;; This function calls:
  2965 ;;		_ClearTicker
  2966 ;;		_GetTicker
  2967 ;;		_ReadCharger
  2968 ;;		_ReadVoltage
  2969 ;;		_SR_FRSPowerDown
  2970 ;;		_SR_FRSTalk
  2971 ;;		_TMR2_StartTimer
  2972 ;;		_TMR2_StopTimer
  2973 ;;		___awtoft
  2974 ;;		___ftdiv
  2975 ;;		___ftge
  2976 ;;		___ftmul
  2977 ;; This function is called by:
  2978 ;;		_main
  2979 ;; This function uses a non-reentrant model
  2980 ;;
  2981                           
  2982                           
  2983                           ;psect for function _RadioOperation
  2984  0BA7                     _RadioOperation:	
  2985                           
  2986                           ;Radio.c: 26: if(!PORTAbits.RA2 && !Talking){
  2987                           
  2988                           ;incstack = 0
  2989                           ; Regs used in _RadioOperation: [wreg+status,2+status,0+pclath+cstack]
  2990  0BA7  0020               	movlb	0	; select bank0
  2991  0BA8  190C               	btfsc	12,2	;volatile
  2992  0BA9  2BB2               	goto	l3142
  2993  0BAA  0021               	movlb	1	; select bank1
  2994  0BAB  0867               	movf	_Talking^(0+128),w
  2995  0BAC  1D03               	btfss	3,2
  2996  0BAD  2BB2               	goto	l3142
  2997                           
  2998                           ;Radio.c: 27: count++;
  2999  0BAE  3001               	movlw	1
  3000  0BAF  07DF               	addwf	_count^(0+128),f
  3001  0BB0  3000               	movlw	0
  3002  0BB1  3DE0               	addwfc	(_count+1)^(0+128),f
  3003  0BB2                     l3142:	
  3004                           
  3005                           ;Radio.c: 28: }
  3006                           ;Radio.c: 29: if(Talking && PORTAbits.RA2){
  3007  0BB2  0021               	movlb	1	; select bank1
  3008  0BB3  0867               	movf	_Talking^(0+128),w
  3009  0BB4  1903               	btfsc	3,2
  3010  0BB5  2BD6               	goto	l3154
  3011  0BB6  0020               	movlb	0	; select bank0
  3012  0BB7  1D0C               	btfss	12,2	;volatile
  3013  0BB8  2BD6               	goto	l3154
  3014                           
  3015                           ;Radio.c: 30: count--;
  3016  0BB9  30FF               	movlw	255
  3017  0BBA  0021               	movlb	1	; select bank1
  3018  0BBB  07DF               	addwf	_count^(0+128),f
  3019  0BBC  30FF               	movlw	255
  3020  0BBD  3DE0               	addwfc	(_count+1)^(0+128),f
  3021                           
  3022                           ;Radio.c: 31: if(count < 50){
  3023  0BBE  0860               	movf	(_count+1)^(0+128),w
  3024  0BBF  3A80               	xorlw	128
  3025  0BC0  0020               	movlb	0	; select bank0
  3026  0BC1  00D6               	movwf	??_RadioOperation
  3027  0BC2  3080               	movlw	128
  3028  0BC3  0256               	subwf	??_RadioOperation,w
  3029  0BC4  1D03               	skipz
  3030  0BC5  2BC9               	goto	u4195
  3031  0BC6  3032               	movlw	50
  3032  0BC7  0021               	movlb	1	; select bank1
  3033  0BC8  025F               	subwf	_count^(0+128),w
  3034  0BC9                     u4195:	
  3035  0BC9  1803               	skipnc
  3036  0BCA  2BD6               	goto	l3154
  3037                           
  3038                           ;Radio.c: 32: PORTCbits.RC3 = 1;
  3039  0BCB  0020               	movlb	0	; select bank0
  3040  0BCC  158E               	bsf	14,3	;volatile
  3041                           
  3042                           ;Radio.c: 33: SR_FRSTalk();
  3043  0BCD  3192  2263  318B   	fcall	_SR_FRSTalk
  3044                           
  3045                           ;Radio.c: 34: TMR2_StartTimer();
  3046  0BD0  3192  2266  318B   	fcall	_TMR2_StartTimer
  3047                           
  3048                           ;Radio.c: 35: count = 0;
  3049  0BD3  0021               	movlb	1	; select bank1
  3050  0BD4  01DF               	clrf	_count^(0+128)
  3051  0BD5  01E0               	clrf	(_count+1)^(0+128)
  3052  0BD6                     l3154:	
  3053                           
  3054                           ;Radio.c: 36: }
  3055                           ;Radio.c: 37: }
  3056                           ;Radio.c: 38: if((count > 100) && !Talking){
  3057  0BD6  0021               	movlb	1	; select bank1
  3058  0BD7  0860               	movf	(_count+1)^(0+128),w
  3059  0BD8  3A80               	xorlw	128
  3060  0BD9  0020               	movlb	0	; select bank0
  3061  0BDA  00D6               	movwf	??_RadioOperation
  3062  0BDB  3080               	movlw	128
  3063  0BDC  0256               	subwf	??_RadioOperation,w
  3064  0BDD  1D03               	skipz
  3065  0BDE  2BE2               	goto	u4205
  3066  0BDF  3065               	movlw	101
  3067  0BE0  0021               	movlb	1	; select bank1
  3068  0BE1  025F               	subwf	_count^(0+128),w
  3069  0BE2                     u4205:	
  3070  0BE2  1C03               	skipc
  3071  0BE3  2BF6               	goto	l3164
  3072  0BE4  0021               	movlb	1	; select bank1
  3073  0BE5  0867               	movf	_Talking^(0+128),w
  3074  0BE6  1D03               	btfss	3,2
  3075  0BE7  2BF6               	goto	l3164
  3076                           
  3077                           ;Radio.c: 39: SR_FRSTalk();
  3078  0BE8  3192  2263  318B   	fcall	_SR_FRSTalk
  3079                           
  3080                           ;Radio.c: 40: PORTCbits.RC3 = 0;
  3081  0BEB  0020               	movlb	0	; select bank0
  3082  0BEC  118E               	bcf	14,3	;volatile
  3083                           
  3084                           ;Radio.c: 41: Talking = 1;
  3085  0BED  0021               	movlb	1	; select bank1
  3086  0BEE  01E7               	clrf	_Talking^(0+128)
  3087  0BEF  0AE7               	incf	_Talking^(0+128),f
  3088                           
  3089                           ;Radio.c: 42: TMR2_StopTimer();
  3090  0BF0  3192  2269  318B   	fcall	_TMR2_StopTimer
  3091                           
  3092                           ;Radio.c: 43: ClearTicker();
  3093  0BF3  3192  226C  318B   	fcall	_ClearTicker
  3094  0BF6                     l3164:	
  3095                           
  3096                           ;Radio.c: 44: }
  3097                           ;Radio.c: 45: if(GetTicker() > 100){
  3098  0BF6  3192  229A  318B   	fcall	_GetTicker
  3099  0BF9  3000               	movlw	0
  3100  0BFA  0020               	movlb	0	; select bank0
  3101  0BFB  0221               	subwf	?_GetTicker+1,w
  3102  0BFC  3065               	movlw	101
  3103  0BFD  1903               	skipnz
  3104  0BFE  0220               	subwf	?_GetTicker,w
  3105  0BFF  1C03               	skipc
  3106  0C00  2C06               	goto	l3170
  3107                           
  3108                           ;Radio.c: 47: SR_FRSPowerDown();
  3109  0C01  3192  2260  318B   	fcall	_SR_FRSPowerDown
  3110                           
  3111                           ;Radio.c: 48: PORTCbits.RC3 = 0;
  3112  0C04  0020               	movlb	0	; select bank0
  3113  0C05  118E               	bcf	14,3	;volatile
  3114  0C06                     l3170:	
  3115                           
  3116                           ;Radio.c: 49: }
  3117                           ;Radio.c: 50: if(time > 150){
  3118  0C06  0021               	movlb	1	; select bank1
  3119  0C07  0864               	movf	(_time+1)^(0+128),w
  3120  0C08  3A80               	xorlw	128
  3121  0C09  0020               	movlb	0	; select bank0
  3122  0C0A  00D6               	movwf	??_RadioOperation
  3123  0C0B  3080               	movlw	128
  3124  0C0C  0256               	subwf	??_RadioOperation,w
  3125  0C0D  1D03               	skipz
  3126  0C0E  2C12               	goto	u4235
  3127  0C0F  3097               	movlw	151
  3128  0C10  0021               	movlb	1	; select bank1
  3129  0C11  0263               	subwf	_time^(0+128),w
  3130  0C12                     u4235:	
  3131  0C12  1C03               	skipc
  3132  0C13  2C6A               	goto	l3180
  3133                           
  3134                           ;Radio.c: 51: PORTCbits.RC4 = 0;
  3135  0C14  0020               	movlb	0	; select bank0
  3136  0C15  120E               	bcf	14,4	;volatile
  3137                           
  3138                           ;Radio.c: 52: Battery = ReadVoltage(1);
  3139  0C16  3001               	movlw	1
  3140  0C17  3188  2002  318B   	fcall	_ReadVoltage
  3141  0C1A  0020               	movlb	0	; select bank0
  3142  0C1B  0822               	movf	?_ReadVoltage+1,w
  3143  0C1C  00A9               	movwf	___awtoft@c+1
  3144  0C1D  0821               	movf	?_ReadVoltage,w
  3145  0C1E  00A8               	movwf	___awtoft@c
  3146  0C1F  3194  245C  318B   	fcall	___awtoft
  3147  0C22  0020               	movlb	0	; select bank0
  3148  0C23  0828               	movf	?___awtoft,w
  3149  0C24  0021               	movlb	1	; select bank1
  3150  0C25  00DC               	movwf	_Battery^(0+128)
  3151  0C26  0020               	movlb	0	; select bank0
  3152  0C27  0829               	movf	?___awtoft+1,w
  3153  0C28  0021               	movlb	1	; select bank1
  3154  0C29  00DD               	movwf	(_Battery+1)^(0+128)
  3155  0C2A  0020               	movlb	0	; select bank0
  3156  0C2B  082A               	movf	?___awtoft+2,w
  3157  0C2C  0021               	movlb	1	; select bank1
  3158  0C2D  00DE               	movwf	(_Battery+2)^(0+128)
  3159                           
  3160                           ;Radio.c: 53: Battery = (Battery*5.0)/1023.0;
  3161  0C2E  30C0               	movlw	192
  3162  0C2F  0020               	movlb	0	; select bank0
  3163  0C30  00C6               	movwf	___ftdiv@f2
  3164  0C31  307F               	movlw	127
  3165  0C32  00C7               	movwf	___ftdiv@f2+1
  3166  0C33  3044               	movlw	68
  3167  0C34  00C8               	movwf	___ftdiv@f2+2
  3168  0C35  3000               	movlw	0
  3169  0C36  00B6               	movwf	___ftmul@f1
  3170  0C37  30A0               	movlw	160
  3171  0C38  00B7               	movwf	___ftmul@f1+1
  3172  0C39  3040               	movlw	64
  3173  0C3A  00B8               	movwf	___ftmul@f1+2
  3174  0C3B  0021               	movlb	1	; select bank1
  3175  0C3C  085C               	movf	_Battery^(0+128),w
  3176  0C3D  0020               	movlb	0	; select bank0
  3177  0C3E  00B9               	movwf	___ftmul@f2
  3178  0C3F  0021               	movlb	1	; select bank1
  3179  0C40  085D               	movf	(_Battery+1)^(0+128),w
  3180  0C41  0020               	movlb	0	; select bank0
  3181  0C42  00BA               	movwf	___ftmul@f2+1
  3182  0C43  0021               	movlb	1	; select bank1
  3183  0C44  085E               	movf	(_Battery+2)^(0+128),w
  3184  0C45  0020               	movlb	0	; select bank0
  3185  0C46  00BB               	movwf	___ftmul@f2+2
  3186  0C47  3189  21FD  318B   	fcall	___ftmul
  3187  0C4A  0020               	movlb	0	; select bank0
  3188  0C4B  0836               	movf	?___ftmul,w
  3189  0C4C  00C9               	movwf	___ftdiv@f1
  3190  0C4D  0837               	movf	?___ftmul+1,w
  3191  0C4E  00CA               	movwf	___ftdiv@f1+1
  3192  0C4F  0838               	movf	?___ftmul+2,w
  3193  0C50  00CB               	movwf	___ftdiv@f1+2
  3194  0C51  3189  2154  318B   	fcall	___ftdiv
  3195  0C54  0020               	movlb	0	; select bank0
  3196  0C55  0846               	movf	?___ftdiv,w
  3197  0C56  0021               	movlb	1	; select bank1
  3198  0C57  00DC               	movwf	_Battery^(0+128)
  3199  0C58  0020               	movlb	0	; select bank0
  3200  0C59  0847               	movf	?___ftdiv+1,w
  3201  0C5A  0021               	movlb	1	; select bank1
  3202  0C5B  00DD               	movwf	(_Battery+1)^(0+128)
  3203  0C5C  0020               	movlb	0	; select bank0
  3204  0C5D  0848               	movf	?___ftdiv+2,w
  3205  0C5E  0021               	movlb	1	; select bank1
  3206  0C5F  00DE               	movwf	(_Battery+2)^(0+128)
  3207                           
  3208                           ;Radio.c: 54: time = 0;
  3209  0C60  01E3               	clrf	_time^(0+128)
  3210  0C61  01E4               	clrf	(_time+1)^(0+128)
  3211                           
  3212                           ;Radio.c: 55: Mode = ReadCharger();
  3213  0C62  3192  22F6  318B   	fcall	_ReadCharger
  3214  0C65  0020               	movlb	0	; select bank0
  3215  0C66  00D6               	movwf	??_RadioOperation
  3216  0C67  0856               	movf	??_RadioOperation,w
  3217  0C68  0021               	movlb	1	; select bank1
  3218  0C69  00E5               	movwf	_Mode^(0+128)
  3219  0C6A                     l3180:	
  3220                           
  3221                           ;Radio.c: 56: }
  3222                           ;Radio.c: 57: if((time > 2) && (PORTCbits.RC4 == 0)){
  3223  0C6A  0021               	movlb	1	; select bank1
  3224  0C6B  0864               	movf	(_time+1)^(0+128),w
  3225  0C6C  3A80               	xorlw	128
  3226  0C6D  0020               	movlb	0	; select bank0
  3227  0C6E  00D6               	movwf	??_RadioOperation
  3228  0C6F  3080               	movlw	128
  3229  0C70  0256               	subwf	??_RadioOperation,w
  3230  0C71  1D03               	skipz
  3231  0C72  2C76               	goto	u4245
  3232  0C73  3003               	movlw	3
  3233  0C74  0021               	movlb	1	; select bank1
  3234  0C75  0263               	subwf	_time^(0+128),w
  3235  0C76                     u4245:	
  3236  0C76  1C03               	skipc
  3237  0C77  2C7C               	goto	l3186
  3238  0C78  0020               	movlb	0	; select bank0
  3239  0C79  1A0E               	btfsc	14,4	;volatile
  3240  0C7A  2C7C               	goto	l3186
  3241                           
  3242                           ;Radio.c: 58: PORTCbits.RC4 = 1;
  3243  0C7B  160E               	bsf	14,4	;volatile
  3244  0C7C                     l3186:	
  3245                           
  3246                           ;Radio.c: 59: }
  3247                           ;Radio.c: 60: if(Battery < 6.2){
  3248  0C7C  0021               	movlb	1	; select bank1
  3249  0C7D  085C               	movf	_Battery^(0+128),w
  3250  0C7E  0020               	movlb	0	; select bank0
  3251  0C7F  00A0               	movwf	___ftge@ff1
  3252  0C80  0021               	movlb	1	; select bank1
  3253  0C81  085D               	movf	(_Battery+1)^(0+128),w
  3254  0C82  0020               	movlb	0	; select bank0
  3255  0C83  00A1               	movwf	___ftge@ff1+1
  3256  0C84  0021               	movlb	1	; select bank1
  3257  0C85  085E               	movf	(_Battery+2)^(0+128),w
  3258  0C86  0020               	movlb	0	; select bank0
  3259  0C87  00A2               	movwf	___ftge@ff1+2
  3260  0C88  3066               	movlw	102
  3261  0C89  00A3               	movwf	___ftge@ff2
  3262  0C8A  30C6               	movlw	198
  3263  0C8B  00A4               	movwf	___ftge@ff2+1
  3264  0C8C  3040               	movlw	64
  3265  0C8D  00A5               	movwf	___ftge@ff2+2
  3266  0C8E  3194  24CA  318B   	fcall	___ftge
  3267  0C91  1803               	btfsc	3,0
  3268  0C92  2C97               	goto	l3192
  3269                           
  3270                           ;Radio.c: 61: SR_FRSPowerDown();
  3271  0C93  3192  2260         	fcall	_SR_FRSPowerDown
  3272                           
  3273                           ;Radio.c: 62: PORTCbits.RC3 = 0;
  3274  0C95  0020               	movlb	0	; select bank0
  3275  0C96  118E               	bcf	14,3	;volatile
  3276  0C97                     l3192:	
  3277                           
  3278                           ;Radio.c: 63: }
  3279                           ;Radio.c: 64: time++;
  3280  0C97  3001               	movlw	1
  3281  0C98  0021               	movlb	1	; select bank1
  3282  0C99  07E3               	addwf	_time^(0+128),f
  3283  0C9A  3000               	movlw	0
  3284  0C9B  3DE4               	addwfc	(_time+1)^(0+128),f
  3285  0C9C  0008               	return
  3286  0C9D                     __end_of_RadioOperation:	
  3287                           
  3288                           	psect	text9
  3289  0954                     __ptext9:	
  3290 ;; *************** function ___ftdiv *****************
  3291 ;; Defined at:
  3292 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
  3293 ;; Parameters:    Size  Location     Type
  3294 ;;  f2              3   38[BANK0 ] float 
  3295 ;;  f1              3   41[BANK0 ] float 
  3296 ;; Auto vars:     Size  Location     Type
  3297 ;;  f3              3   49[BANK0 ] float 
  3298 ;;  sign            1   53[BANK0 ] unsigned char 
  3299 ;;  exp             1   52[BANK0 ] unsigned char 
  3300 ;;  cntr            1   48[BANK0 ] unsigned char 
  3301 ;; Return value:  Size  Location     Type
  3302 ;;                  3   38[BANK0 ] float 
  3303 ;; Registers used:
  3304 ;;		wreg, status,2, status,0, pclath, cstack
  3305 ;; Tracked objects:
  3306 ;;		On entry : 0/0
  3307 ;;		On exit  : 0/0
  3308 ;;		Unchanged: 0/0
  3309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3310 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3311 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3312 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3313 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3314 ;;Total ram usage:       16 bytes
  3315 ;; Hardware stack levels used:    1
  3316 ;; Hardware stack levels required when called:    5
  3317 ;; This function calls:
  3318 ;;		___ftpack
  3319 ;; This function is called by:
  3320 ;;		_RadioOperation
  3321 ;; This function uses a non-reentrant model
  3322 ;;
  3323                           
  3324                           
  3325                           ;psect for function ___ftdiv
  3326  0954                     ___ftdiv:	
  3327                           
  3328                           ;incstack = 0
  3329                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  3330  0954  0020               	movlb	0	; select bank0
  3331  0955  0849               	movf	___ftdiv@f1,w
  3332  0956  00CC               	movwf	??___ftdiv
  3333  0957  084A               	movf	___ftdiv@f1+1,w
  3334  0958  00CD               	movwf	??___ftdiv+1
  3335  0959  084B               	movf	___ftdiv@f1+2,w
  3336  095A  00CE               	movwf	??___ftdiv+2
  3337  095B  1003               	clrc
  3338  095C  0D4D               	rlf	??___ftdiv+1,w
  3339  095D  0D4E               	rlf	??___ftdiv+2,w
  3340  095E  00CF               	movwf	??___ftdiv+3
  3341  095F  084F               	movf	??___ftdiv+3,w
  3342  0960  00D4               	movwf	___ftdiv@exp
  3343  0961  0854               	movf	___ftdiv@exp,w
  3344  0962  1D03               	btfss	3,2
  3345  0963  296B               	goto	l3058
  3346  0964  3000               	movlw	0
  3347  0965  00C6               	movwf	?___ftdiv
  3348  0966  3000               	movlw	0
  3349  0967  00C7               	movwf	?___ftdiv+1
  3350  0968  3000               	movlw	0
  3351  0969  00C8               	movwf	?___ftdiv+2
  3352  096A  0008               	return
  3353  096B                     l3058:	
  3354  096B  0846               	movf	___ftdiv@f2,w
  3355  096C  00CC               	movwf	??___ftdiv
  3356  096D  0847               	movf	___ftdiv@f2+1,w
  3357  096E  00CD               	movwf	??___ftdiv+1
  3358  096F  0848               	movf	___ftdiv@f2+2,w
  3359  0970  00CE               	movwf	??___ftdiv+2
  3360  0971  1003               	clrc
  3361  0972  0D4D               	rlf	??___ftdiv+1,w
  3362  0973  0D4E               	rlf	??___ftdiv+2,w
  3363  0974  00CF               	movwf	??___ftdiv+3
  3364  0975  084F               	movf	??___ftdiv+3,w
  3365  0976  00D5               	movwf	___ftdiv@sign
  3366  0977  0855               	movf	___ftdiv@sign,w
  3367  0978  1D03               	btfss	3,2
  3368  0979  2981               	goto	l3064
  3369  097A  3000               	movlw	0
  3370  097B  00C6               	movwf	?___ftdiv
  3371  097C  3000               	movlw	0
  3372  097D  00C7               	movwf	?___ftdiv+1
  3373  097E  3000               	movlw	0
  3374  097F  00C8               	movwf	?___ftdiv+2
  3375  0980  0008               	return
  3376  0981                     l3064:	
  3377  0981  3000               	movlw	0
  3378  0982  00D1               	movwf	___ftdiv@f3
  3379  0983  3000               	movlw	0
  3380  0984  00D2               	movwf	___ftdiv@f3+1
  3381  0985  3000               	movlw	0
  3382  0986  00D3               	movwf	___ftdiv@f3+2
  3383  0987  3089               	movlw	137
  3384  0988  0755               	addwf	___ftdiv@sign,w
  3385  0989  00CC               	movwf	??___ftdiv
  3386  098A  084C               	movf	??___ftdiv,w
  3387  098B  02D4               	subwf	___ftdiv@exp,f
  3388  098C  0849               	movf	___ftdiv@f1,w
  3389  098D  00CC               	movwf	??___ftdiv
  3390  098E  084A               	movf	___ftdiv@f1+1,w
  3391  098F  00CD               	movwf	??___ftdiv+1
  3392  0990  084B               	movf	___ftdiv@f1+2,w
  3393  0991  00CE               	movwf	??___ftdiv+2
  3394  0992  3010               	movlw	16
  3395  0993                     u4075:	
  3396  0993  36CE               	lsrf	??___ftdiv+2,f
  3397  0994  0CCD               	rrf	??___ftdiv+1,f
  3398  0995  0CCC               	rrf	??___ftdiv,f
  3399  0996  0B89               	decfsz	9,f
  3400  0997  2993               	goto	u4075
  3401  0998  084C               	movf	??___ftdiv,w
  3402  0999  00CF               	movwf	??___ftdiv+3
  3403  099A  084F               	movf	??___ftdiv+3,w
  3404  099B  00D5               	movwf	___ftdiv@sign
  3405  099C  0846               	movf	___ftdiv@f2,w
  3406  099D  00CC               	movwf	??___ftdiv
  3407  099E  0847               	movf	___ftdiv@f2+1,w
  3408  099F  00CD               	movwf	??___ftdiv+1
  3409  09A0  0848               	movf	___ftdiv@f2+2,w
  3410  09A1  00CE               	movwf	??___ftdiv+2
  3411  09A2  3010               	movlw	16
  3412  09A3                     u4085:	
  3413  09A3  36CE               	lsrf	??___ftdiv+2,f
  3414  09A4  0CCD               	rrf	??___ftdiv+1,f
  3415  09A5  0CCC               	rrf	??___ftdiv,f
  3416  09A6  0B89               	decfsz	9,f
  3417  09A7  29A3               	goto	u4085
  3418  09A8  084C               	movf	??___ftdiv,w
  3419  09A9  00CF               	movwf	??___ftdiv+3
  3420  09AA  084F               	movf	??___ftdiv+3,w
  3421  09AB  06D5               	xorwf	___ftdiv@sign,f
  3422  09AC  3080               	movlw	128
  3423  09AD  00CC               	movwf	??___ftdiv
  3424  09AE  084C               	movf	??___ftdiv,w
  3425  09AF  05D5               	andwf	___ftdiv@sign,f
  3426  09B0  17CA               	bsf	___ftdiv@f1+1,7
  3427  09B1  30FF               	movlw	255
  3428  09B2  05C9               	andwf	___ftdiv@f1,f
  3429  09B3  30FF               	movlw	255
  3430  09B4  05CA               	andwf	___ftdiv@f1+1,f
  3431  09B5  3000               	movlw	0
  3432  09B6  05CB               	andwf	___ftdiv@f1+2,f
  3433  09B7  17C7               	bsf	___ftdiv@f2+1,7
  3434  09B8  30FF               	movlw	255
  3435  09B9  05C6               	andwf	___ftdiv@f2,f
  3436  09BA  30FF               	movlw	255
  3437  09BB  05C7               	andwf	___ftdiv@f2+1,f
  3438  09BC  3000               	movlw	0
  3439  09BD  05C8               	andwf	___ftdiv@f2+2,f
  3440  09BE  3018               	movlw	24
  3441  09BF  00CC               	movwf	??___ftdiv
  3442  09C0  084C               	movf	??___ftdiv,w
  3443  09C1  00D0               	movwf	___ftdiv@cntr
  3444  09C2                     l3078:	
  3445  09C2  3001               	movlw	1
  3446  09C3                     u4095:	
  3447  09C3  35D1               	lslf	___ftdiv@f3,f
  3448  09C4  0DD2               	rlf	___ftdiv@f3+1,f
  3449  09C5  0DD3               	rlf	___ftdiv@f3+2,f
  3450  09C6  0B89               	decfsz	9,f
  3451  09C7  29C3               	goto	u4095
  3452  09C8  0848               	movf	___ftdiv@f2+2,w
  3453  09C9  024B               	subwf	___ftdiv@f1+2,w
  3454  09CA  1D03               	skipz
  3455  09CB  29D2               	goto	u4105
  3456  09CC  0847               	movf	___ftdiv@f2+1,w
  3457  09CD  024A               	subwf	___ftdiv@f1+1,w
  3458  09CE  1D03               	skipz
  3459  09CF  29D2               	goto	u4105
  3460  09D0  0846               	movf	___ftdiv@f2,w
  3461  09D1  0249               	subwf	___ftdiv@f1,w
  3462  09D2                     u4105:	
  3463  09D2  1C03               	skipc
  3464  09D3  29DB               	goto	l3086
  3465  09D4  0846               	movf	___ftdiv@f2,w
  3466  09D5  02C9               	subwf	___ftdiv@f1,f
  3467  09D6  0847               	movf	___ftdiv@f2+1,w
  3468  09D7  3BCA               	subwfb	___ftdiv@f1+1,f
  3469  09D8  0848               	movf	___ftdiv@f2+2,w
  3470  09D9  3BCB               	subwfb	___ftdiv@f1+2,f
  3471  09DA  1451               	bsf	___ftdiv@f3,0
  3472  09DB                     l3086:	
  3473  09DB  3001               	movlw	1
  3474  09DC                     u4115:	
  3475  09DC  35C9               	lslf	___ftdiv@f1,f
  3476  09DD  0DCA               	rlf	___ftdiv@f1+1,f
  3477  09DE  0DCB               	rlf	___ftdiv@f1+2,f
  3478  09DF  0B89               	decfsz	9,f
  3479  09E0  29DC               	goto	u4115
  3480  09E1  3001               	movlw	1
  3481  09E2  02D0               	subwf	___ftdiv@cntr,f
  3482  09E3  1D03               	btfss	3,2
  3483  09E4  29C2               	goto	l3078
  3484  09E5  0851               	movf	___ftdiv@f3,w
  3485  09E6  00A0               	movwf	___ftpack@arg
  3486  09E7  0852               	movf	___ftdiv@f3+1,w
  3487  09E8  00A1               	movwf	___ftpack@arg+1
  3488  09E9  0853               	movf	___ftdiv@f3+2,w
  3489  09EA  00A2               	movwf	___ftpack@arg+2
  3490  09EB  0854               	movf	___ftdiv@exp,w
  3491  09EC  00CC               	movwf	??___ftdiv
  3492  09ED  084C               	movf	??___ftdiv,w
  3493  09EE  00A3               	movwf	___ftpack@exp
  3494  09EF  0855               	movf	___ftdiv@sign,w
  3495  09F0  00CD               	movwf	??___ftdiv+1
  3496  09F1  084D               	movf	??___ftdiv+1,w
  3497  09F2  00A4               	movwf	___ftpack@sign
  3498  09F3  3197  2714         	fcall	___ftpack
  3499  09F5  0020               	movlb	0	; select bank0
  3500  09F6  0820               	movf	?___ftpack,w
  3501  09F7  00C6               	movwf	?___ftdiv
  3502  09F8  0821               	movf	?___ftpack+1,w
  3503  09F9  00C7               	movwf	?___ftdiv+1
  3504  09FA  0822               	movf	?___ftpack+2,w
  3505  09FB  00C8               	movwf	?___ftdiv+2
  3506  09FC  0008               	return
  3507  09FD                     __end_of___ftdiv:	
  3508                           
  3509                           	psect	text10
  3510  145C                     __ptext10:	
  3511 ;; *************** function ___awtoft *****************
  3512 ;; Defined at:
  3513 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
  3514 ;; Parameters:    Size  Location     Type
  3515 ;;  c               2    8[BANK0 ] int 
  3516 ;; Auto vars:     Size  Location     Type
  3517 ;;  sign            1   13[BANK0 ] unsigned char 
  3518 ;; Return value:  Size  Location     Type
  3519 ;;                  3    8[BANK0 ] float 
  3520 ;; Registers used:
  3521 ;;		wreg, status,2, status,0, pclath, cstack
  3522 ;; Tracked objects:
  3523 ;;		On entry : 0/0
  3524 ;;		On exit  : 0/0
  3525 ;;		Unchanged: 0/0
  3526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3527 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3528 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3529 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3530 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3531 ;;Total ram usage:        6 bytes
  3532 ;; Hardware stack levels used:    1
  3533 ;; Hardware stack levels required when called:    5
  3534 ;; This function calls:
  3535 ;;		___ftpack
  3536 ;; This function is called by:
  3537 ;;		_RadioOperation
  3538 ;; This function uses a non-reentrant model
  3539 ;;
  3540                           
  3541                           
  3542                           ;psect for function ___awtoft
  3543  145C                     ___awtoft:	
  3544                           
  3545                           ;incstack = 0
  3546                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  3547  145C  0020               	movlb	0	; select bank0
  3548  145D  01AD               	clrf	___awtoft@sign
  3549  145E  1FA9               	btfss	___awtoft@c+1,7
  3550  145F  2C67               	goto	l3048
  3551  1460  09A8               	comf	___awtoft@c,f
  3552  1461  09A9               	comf	___awtoft@c+1,f
  3553  1462  0AA8               	incf	___awtoft@c,f
  3554  1463  1903               	skipnz
  3555  1464  0AA9               	incf	___awtoft@c+1,f
  3556  1465  01AD               	clrf	___awtoft@sign
  3557  1466  0AAD               	incf	___awtoft@sign,f
  3558  1467                     l3048:	
  3559  1467  0828               	movf	___awtoft@c,w
  3560  1468  00A0               	movwf	___ftpack@arg
  3561  1469  0829               	movf	___awtoft@c+1,w
  3562  146A  00A1               	movwf	___ftpack@arg+1
  3563  146B  01A2               	clrf	___ftpack@arg+2
  3564  146C  308E               	movlw	142
  3565  146D  00AB               	movwf	??___awtoft
  3566  146E  082B               	movf	??___awtoft,w
  3567  146F  00A3               	movwf	___ftpack@exp
  3568  1470  082D               	movf	___awtoft@sign,w
  3569  1471  00AC               	movwf	??___awtoft+1
  3570  1472  082C               	movf	??___awtoft+1,w
  3571  1473  00A4               	movwf	___ftpack@sign
  3572  1474  3197  2714         	fcall	___ftpack
  3573  1476  0020               	movlb	0	; select bank0
  3574  1477  0820               	movf	?___ftpack,w
  3575  1478  00A8               	movwf	?___awtoft
  3576  1479  0821               	movf	?___ftpack+1,w
  3577  147A  00A9               	movwf	?___awtoft+1
  3578  147B  0822               	movf	?___ftpack+2,w
  3579  147C  00AA               	movwf	?___awtoft+2
  3580  147D  0008               	return
  3581  147E                     __end_of___awtoft:	
  3582                           
  3583                           	psect	text11
  3584  1269                     __ptext11:	
  3585 ;; *************** function _TMR2_StopTimer *****************
  3586 ;; Defined at:
  3587 ;;		line 42 in file "Timer.c"
  3588 ;; Parameters:    Size  Location     Type
  3589 ;;		None
  3590 ;; Auto vars:     Size  Location     Type
  3591 ;;		None
  3592 ;; Return value:  Size  Location     Type
  3593 ;;                  1    wreg      void 
  3594 ;; Registers used:
  3595 ;;		None
  3596 ;; Tracked objects:
  3597 ;;		On entry : 0/0
  3598 ;;		On exit  : 0/0
  3599 ;;		Unchanged: 0/0
  3600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3604 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3605 ;;Total ram usage:        0 bytes
  3606 ;; Hardware stack levels used:    1
  3607 ;; Hardware stack levels required when called:    4
  3608 ;; This function calls:
  3609 ;;		Nothing
  3610 ;; This function is called by:
  3611 ;;		_RadioOperation
  3612 ;; This function uses a non-reentrant model
  3613 ;;
  3614                           
  3615                           
  3616                           ;psect for function _TMR2_StopTimer
  3617  1269                     _TMR2_StopTimer:	
  3618                           
  3619                           ;Timer.c: 45: T2CONbits.TMR2ON = 0;
  3620                           
  3621                           ;incstack = 0
  3622                           ; Regs used in _TMR2_StopTimer: []
  3623  1269  0020               	movlb	0	; select bank0
  3624  126A  111C               	bcf	28,2	;volatile
  3625  126B  0008               	return
  3626  126C                     __end_of_TMR2_StopTimer:	
  3627                           
  3628                           	psect	text12
  3629  1266                     __ptext12:	
  3630 ;; *************** function _TMR2_StartTimer *****************
  3631 ;; Defined at:
  3632 ;;		line 36 in file "Timer.c"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;		None
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;		None
  3637 ;; Return value:  Size  Location     Type
  3638 ;;                  1    wreg      void 
  3639 ;; Registers used:
  3640 ;;		None
  3641 ;; Tracked objects:
  3642 ;;		On entry : 0/0
  3643 ;;		On exit  : 0/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3650 ;;Total ram usage:        0 bytes
  3651 ;; Hardware stack levels used:    1
  3652 ;; Hardware stack levels required when called:    4
  3653 ;; This function calls:
  3654 ;;		Nothing
  3655 ;; This function is called by:
  3656 ;;		_RadioOperation
  3657 ;; This function uses a non-reentrant model
  3658 ;;
  3659                           
  3660                           
  3661                           ;psect for function _TMR2_StartTimer
  3662  1266                     _TMR2_StartTimer:	
  3663                           
  3664                           ;Timer.c: 39: T2CONbits.TMR2ON = 1;
  3665                           
  3666                           ;incstack = 0
  3667                           ; Regs used in _TMR2_StartTimer: []
  3668  1266  0020               	movlb	0	; select bank0
  3669  1267  151C               	bsf	28,2	;volatile
  3670  1268  0008               	return
  3671  1269                     __end_of_TMR2_StartTimer:	
  3672                           
  3673                           	psect	text13
  3674  1263                     __ptext13:	
  3675 ;; *************** function _SR_FRSTalk *****************
  3676 ;; Defined at:
  3677 ;;		line 7 in file "SR_FRS.c"
  3678 ;; Parameters:    Size  Location     Type
  3679 ;;		None
  3680 ;; Auto vars:     Size  Location     Type
  3681 ;;		None
  3682 ;; Return value:  Size  Location     Type
  3683 ;;                  1    wreg      void 
  3684 ;; Registers used:
  3685 ;;		None
  3686 ;; Tracked objects:
  3687 ;;		On entry : 0/0
  3688 ;;		On exit  : 0/0
  3689 ;;		Unchanged: 0/0
  3690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3695 ;;Total ram usage:        0 bytes
  3696 ;; Hardware stack levels used:    1
  3697 ;; Hardware stack levels required when called:    4
  3698 ;; This function calls:
  3699 ;;		Nothing
  3700 ;; This function is called by:
  3701 ;;		_RadioOperation
  3702 ;; This function uses a non-reentrant model
  3703 ;;
  3704                           
  3705                           
  3706                           ;psect for function _SR_FRSTalk
  3707  1263                     _SR_FRSTalk:	
  3708                           
  3709                           ;SR_FRS.c: 8: PORTCbits.RC7 = 0;
  3710                           
  3711                           ;incstack = 0
  3712                           ; Regs used in _SR_FRSTalk: []
  3713  1263  0020               	movlb	0	; select bank0
  3714  1264  138E               	bcf	14,7	;volatile
  3715  1265  0008               	return
  3716  1266                     __end_of_SR_FRSTalk:	
  3717                           
  3718                           	psect	text14
  3719  1260                     __ptext14:	
  3720 ;; *************** function _SR_FRSPowerDown *****************
  3721 ;; Defined at:
  3722 ;;		line 11 in file "SR_FRS.c"
  3723 ;; Parameters:    Size  Location     Type
  3724 ;;		None
  3725 ;; Auto vars:     Size  Location     Type
  3726 ;;		None
  3727 ;; Return value:  Size  Location     Type
  3728 ;;                  1    wreg      void 
  3729 ;; Registers used:
  3730 ;;		None
  3731 ;; Tracked objects:
  3732 ;;		On entry : 0/0
  3733 ;;		On exit  : 0/0
  3734 ;;		Unchanged: 0/0
  3735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3740 ;;Total ram usage:        0 bytes
  3741 ;; Hardware stack levels used:    1
  3742 ;; Hardware stack levels required when called:    4
  3743 ;; This function calls:
  3744 ;;		Nothing
  3745 ;; This function is called by:
  3746 ;;		_RadioOperation
  3747 ;; This function uses a non-reentrant model
  3748 ;;
  3749                           
  3750                           
  3751                           ;psect for function _SR_FRSPowerDown
  3752  1260                     _SR_FRSPowerDown:	
  3753                           
  3754                           ;SR_FRS.c: 12: PORTCbits.RC6 = 0;
  3755                           
  3756                           ;incstack = 0
  3757                           ; Regs used in _SR_FRSPowerDown: []
  3758  1260  0020               	movlb	0	; select bank0
  3759  1261  130E               	bcf	14,6	;volatile
  3760  1262  0008               	return
  3761  1263                     __end_of_SR_FRSPowerDown:	
  3762                           
  3763                           	psect	text15
  3764  0802                     __ptext15:	
  3765 ;; *************** function _ReadVoltage *****************
  3766 ;; Defined at:
  3767 ;;		line 14 in file "ADC.c"
  3768 ;; Parameters:    Size  Location     Type
  3769 ;;  ch              1    wreg     unsigned char 
  3770 ;; Auto vars:     Size  Location     Type
  3771 ;;  ch              1    4[BANK0 ] unsigned char 
  3772 ;; Return value:  Size  Location     Type
  3773 ;;                  2    1[BANK0 ] int 
  3774 ;; Registers used:
  3775 ;;		wreg, status,2, status,0, pclath, cstack
  3776 ;; Tracked objects:
  3777 ;;		On entry : 0/0
  3778 ;;		On exit  : 0/0
  3779 ;;		Unchanged: 0/0
  3780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3781 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3782 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3784 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3785 ;;Total ram usage:        4 bytes
  3786 ;; Hardware stack levels used:    1
  3787 ;; Hardware stack levels required when called:    5
  3788 ;; This function calls:
  3789 ;;		_SetADCChannel
  3790 ;; This function is called by:
  3791 ;;		_RadioOperation
  3792 ;; This function uses a non-reentrant model
  3793 ;;
  3794                           
  3795                           
  3796                           ;psect for function _ReadVoltage
  3797  0802                     _ReadVoltage:	
  3798                           
  3799                           ;incstack = 0
  3800                           ; Regs used in _ReadVoltage: [wreg+status,2+status,0+pclath+cstack]
  3801                           ;ReadVoltage@ch stored from wreg
  3802  0802  0020               	movlb	0	; select bank0
  3803  0803  00A4               	movwf	ReadVoltage@ch
  3804                           
  3805                           ;ADC.c: 15: SetADCChannel(ch);
  3806  0804  0824               	movf	ReadVoltage@ch,w
  3807  0805  3194  243B  3188   	fcall	_SetADCChannel
  3808                           
  3809                           ;ADC.c: 16: ADCON0bits.GO_nDONE = 1;
  3810  0808  0021               	movlb	1	; select bank1
  3811  0809  149D               	bsf	29,1	;volatile
  3812  080A                     l314:	
  3813                           ;ADC.c: 17: while(ADCON0bits.GO_nDONE);
  3814                           
  3815  080A  189D               	btfsc	29,1	;volatile
  3816  080B  280A               	goto	l314
  3817                           
  3818                           ;ADC.c: 19: return 0;
  3819  080C  0020               	movlb	0	; select bank0
  3820  080D  01A1               	clrf	?_ReadVoltage
  3821  080E  01A2               	clrf	?_ReadVoltage+1
  3822  080F  0008               	return
  3823  0810                     __end_of_ReadVoltage:	
  3824                           
  3825                           	psect	text16
  3826  143B                     __ptext16:	
  3827 ;; *************** function _SetADCChannel *****************
  3828 ;; Defined at:
  3829 ;;		line 22 in file "ADC.c"
  3830 ;; Parameters:    Size  Location     Type
  3831 ;;  ch              1    wreg     unsigned char 
  3832 ;; Auto vars:     Size  Location     Type
  3833 ;;  ch              1    0[BANK0 ] unsigned char 
  3834 ;; Return value:  Size  Location     Type
  3835 ;;                  1    wreg      void 
  3836 ;; Registers used:
  3837 ;;		wreg, status,2, status,0
  3838 ;; Tracked objects:
  3839 ;;		On entry : 0/0
  3840 ;;		On exit  : 0/0
  3841 ;;		Unchanged: 0/0
  3842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3844 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3846 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3847 ;;Total ram usage:        1 bytes
  3848 ;; Hardware stack levels used:    1
  3849 ;; Hardware stack levels required when called:    4
  3850 ;; This function calls:
  3851 ;;		Nothing
  3852 ;; This function is called by:
  3853 ;;		_ReadVoltage
  3854 ;; This function uses a non-reentrant model
  3855 ;;
  3856                           
  3857                           
  3858                           ;psect for function _SetADCChannel
  3859  143B                     _SetADCChannel:	
  3860                           
  3861                           ;incstack = 0
  3862                           ; Regs used in _SetADCChannel: [wreg+status,2+status,0]
  3863                           ;SetADCChannel@ch stored from wreg
  3864  143B  0020               	movlb	0	; select bank0
  3865  143C  00A0               	movwf	SetADCChannel@ch
  3866                           
  3867                           ;ADC.c: 23: if(ch == 1){
  3868  143D  0320               	decf	SetADCChannel@ch,w
  3869  143E  1D03               	btfss	3,2
  3870  143F  2C46               	goto	l2916
  3871                           
  3872                           ;ADC.c: 24: ADCON0bits.CHS = 6;
  3873  1440  0021               	movlb	1	; select bank1
  3874  1441  081D               	movf	29,w	;volatile
  3875  1442  3983               	andlw	-125
  3876  1443  3818               	iorlw	24
  3877  1444  009D               	movwf	29	;volatile
  3878                           
  3879                           ;ADC.c: 25: }
  3880  1445  0008               	return
  3881  1446                     l2916:	
  3882                           
  3883                           ;ADC.c: 26: else if(ch == 2){
  3884  1446  3002               	movlw	2
  3885  1447  0020               	movlb	0	; select bank0
  3886  1448  0620               	xorwf	SetADCChannel@ch,w
  3887  1449  1D03               	btfss	3,2
  3888  144A  2C51               	goto	l2920
  3889                           
  3890                           ;ADC.c: 27: ADCON0bits.CHS = 29;
  3891  144B  0021               	movlb	1	; select bank1
  3892  144C  081D               	movf	29,w	;volatile
  3893  144D  3983               	andlw	-125
  3894  144E  3874               	iorlw	116
  3895  144F  009D               	movwf	29	;volatile
  3896                           
  3897                           ;ADC.c: 28: }
  3898  1450  0008               	return
  3899  1451                     l2920:	
  3900                           
  3901                           ;ADC.c: 29: else if(ch == 3){
  3902  1451  3003               	movlw	3
  3903  1452  0020               	movlb	0	; select bank0
  3904  1453  0620               	xorwf	SetADCChannel@ch,w
  3905  1454  1D03               	btfss	3,2
  3906  1455  0008               	return
  3907                           
  3908                           ;ADC.c: 30: ADCON0bits.CHS = 3;
  3909  1456  0021               	movlb	1	; select bank1
  3910  1457  081D               	movf	29,w	;volatile
  3911  1458  3983               	andlw	-125
  3912  1459  380C               	iorlw	12
  3913  145A  009D               	movwf	29	;volatile
  3914  145B  0008               	return
  3915  145C                     __end_of_SetADCChannel:	
  3916                           
  3917                           	psect	text17
  3918  12F6                     __ptext17:	
  3919 ;; *************** function _ReadCharger *****************
  3920 ;; Defined at:
  3921 ;;		line 84 in file "Function.c"
  3922 ;; Parameters:    Size  Location     Type
  3923 ;;		None
  3924 ;; Auto vars:     Size  Location     Type
  3925 ;;		None
  3926 ;; Return value:  Size  Location     Type
  3927 ;;                  1    wreg      unsigned char 
  3928 ;; Registers used:
  3929 ;;		wreg
  3930 ;; Tracked objects:
  3931 ;;		On entry : 0/0
  3932 ;;		On exit  : 0/0
  3933 ;;		Unchanged: 0/0
  3934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3939 ;;Total ram usage:        0 bytes
  3940 ;; Hardware stack levels used:    1
  3941 ;; Hardware stack levels required when called:    4
  3942 ;; This function calls:
  3943 ;;		Nothing
  3944 ;; This function is called by:
  3945 ;;		_RadioOperation
  3946 ;; This function uses a non-reentrant model
  3947 ;;
  3948                           
  3949                           
  3950                           ;psect for function _ReadCharger
  3951  12F6                     _ReadCharger:	
  3952                           
  3953                           ;Function.c: 86: if(!PORTCbits.RC0 && PORTCbits.RC1){
  3954                           
  3955                           ;incstack = 0
  3956                           ; Regs used in _ReadCharger: [wreg]
  3957  12F6  0020               	movlb	0	; select bank0
  3958  12F7  1C0E               	btfss	14,0	;volatile
  3959  12F8  1C8E               	btfss	14,1	;volatile
  3960  12F9  2AFC               	goto	l78
  3961                           
  3962                           ;Function.c: 87: return 1;
  3963  12FA  3001               	movlw	1
  3964  12FB  0008               	return
  3965  12FC                     l78:	
  3966                           
  3967                           ;Function.c: 88: }
  3968                           ;Function.c: 90: if(PORTCbits.RC0 && !PORTCbits.RC1){
  3969  12FC  180E               	btfsc	14,0	;volatile
  3970  12FD  188E               	btfsc	14,1	;volatile
  3971  12FE  2B01               	goto	l80
  3972                           
  3973                           ;Function.c: 91: return 2;
  3974  12FF  3002               	movlw	2
  3975  1300  0008               	return
  3976  1301                     l80:	
  3977                           
  3978                           ;Function.c: 92: }
  3979                           ;Function.c: 94: if(PORTCbits.RC0 && PORTCbits.RC1){
  3980  1301  180E               	btfsc	14,0	;volatile
  3981  1302  1C8E               	btfss	14,1	;volatile
  3982  1303  2B06               	goto	l2994
  3983                           
  3984                           ;Function.c: 95: return 0;
  3985  1304  3000               	movlw	0
  3986                           
  3987                           ;Function.c: 96: }
  3988  1305  0008               	return
  3989  1306                     l2994:	
  3990                           
  3991                           ;Function.c: 97: else{
  3992                           ;Function.c: 98: return 255;
  3993  1306  30FF               	movlw	255
  3994  1307  0008               	return
  3995  1308                     __end_of_ReadCharger:	
  3996                           
  3997                           	psect	text18
  3998  129A                     __ptext18:	
  3999 ;; *************** function _GetTicker *****************
  4000 ;; Defined at:
  4001 ;;		line 61 in file "Timer.c"
  4002 ;; Parameters:    Size  Location     Type
  4003 ;;		None
  4004 ;; Auto vars:     Size  Location     Type
  4005 ;;		None
  4006 ;; Return value:  Size  Location     Type
  4007 ;;                  2    0[BANK0 ] unsigned int 
  4008 ;; Registers used:
  4009 ;;		wreg
  4010 ;; Tracked objects:
  4011 ;;		On entry : 0/0
  4012 ;;		On exit  : 0/0
  4013 ;;		Unchanged: 0/0
  4014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4015 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4018 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4019 ;;Total ram usage:        2 bytes
  4020 ;; Hardware stack levels used:    1
  4021 ;; Hardware stack levels required when called:    4
  4022 ;; This function calls:
  4023 ;;		Nothing
  4024 ;; This function is called by:
  4025 ;;		_RadioOperation
  4026 ;; This function uses a non-reentrant model
  4027 ;;
  4028                           
  4029                           
  4030                           ;psect for function _GetTicker
  4031  129A                     _GetTicker:	
  4032                           
  4033                           ;Timer.c: 62: return ticker;
  4034                           
  4035                           ;incstack = 0
  4036                           ; Regs used in _GetTicker: [wreg]
  4037  129A  0021               	movlb	1	; select bank1
  4038  129B  0862               	movf	(_ticker+1)^(0+128),w
  4039  129C  0020               	movlb	0	; select bank0
  4040  129D  00A1               	movwf	?_GetTicker+1
  4041  129E  0021               	movlb	1	; select bank1
  4042  129F  0861               	movf	_ticker^(0+128),w
  4043  12A0  0020               	movlb	0	; select bank0
  4044  12A1  00A0               	movwf	?_GetTicker
  4045  12A2  0008               	return
  4046  12A3                     __end_of_GetTicker:	
  4047                           
  4048                           	psect	text19
  4049  126C                     __ptext19:	
  4050 ;; *************** function _ClearTicker *****************
  4051 ;; Defined at:
  4052 ;;		line 57 in file "Timer.c"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;		None
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;		None
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  1    wreg      void 
  4059 ;; Registers used:
  4060 ;;		status,2
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4069 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4070 ;;Total ram usage:        0 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    4
  4073 ;; This function calls:
  4074 ;;		Nothing
  4075 ;; This function is called by:
  4076 ;;		_RadioOperation
  4077 ;; This function uses a non-reentrant model
  4078 ;;
  4079                           
  4080                           
  4081                           ;psect for function _ClearTicker
  4082  126C                     _ClearTicker:	
  4083                           
  4084                           ;Timer.c: 58: ticker = 0;
  4085                           
  4086                           ;incstack = 0
  4087                           ; Regs used in _ClearTicker: [status,2]
  4088  126C  0021               	movlb	1	; select bank1
  4089  126D  01E1               	clrf	_ticker^(0+128)
  4090  126E  01E2               	clrf	(_ticker+1)^(0+128)
  4091  126F  0008               	return
  4092  1270                     __end_of_ClearTicker:	
  4093                           
  4094                           	psect	text20
  4095  125D                     __ptext20:	
  4096 ;; *************** function _RadioBegin *****************
  4097 ;; Defined at:
  4098 ;;		line 21 in file "Radio.c"
  4099 ;; Parameters:    Size  Location     Type
  4100 ;;		None
  4101 ;; Auto vars:     Size  Location     Type
  4102 ;;		None
  4103 ;; Return value:  Size  Location     Type
  4104 ;;                  1    wreg      void 
  4105 ;; Registers used:
  4106 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4107 ;; Tracked objects:
  4108 ;;		On entry : 0/0
  4109 ;;		On exit  : 0/0
  4110 ;;		Unchanged: 0/0
  4111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4116 ;;Total ram usage:        0 bytes
  4117 ;; Hardware stack levels used:    1
  4118 ;; Hardware stack levels required when called:   11
  4119 ;; This function calls:
  4120 ;;		_SR_FRSStart
  4121 ;; This function is called by:
  4122 ;;		_main
  4123 ;; This function uses a non-reentrant model
  4124 ;;
  4125                           
  4126                           
  4127                           ;psect for function _RadioBegin
  4128  125D                     _RadioBegin:	
  4129                           
  4130                           ;Radio.c: 22: SR_FRSStart();
  4131                           
  4132                           ;incstack = 0
  4133                           ; Regs used in _RadioBegin: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4134  125D  3195  2506         	fcall	_SR_FRSStart
  4135  125F  0008               	return
  4136  1260                     __end_of_RadioBegin:	
  4137                           
  4138                           	psect	text21
  4139  1506                     __ptext21:	
  4140 ;; *************** function _SR_FRSStart *****************
  4141 ;; Defined at:
  4142 ;;		line 15 in file "SR_FRS.c"
  4143 ;; Parameters:    Size  Location     Type
  4144 ;;		None
  4145 ;; Auto vars:     Size  Location     Type
  4146 ;;		None
  4147 ;; Return value:  Size  Location     Type
  4148 ;;                  1    wreg      void 
  4149 ;; Registers used:
  4150 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4151 ;; Tracked objects:
  4152 ;;		On entry : 0/0
  4153 ;;		On exit  : 0/0
  4154 ;;		Unchanged: 0/0
  4155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4160 ;;Total ram usage:        0 bytes
  4161 ;; Hardware stack levels used:    1
  4162 ;; Hardware stack levels required when called:   10
  4163 ;; This function calls:
  4164 ;;		_Delay
  4165 ;;		_SetCommandMode
  4166 ;;		_SetFrequency
  4167 ;;		_SetMIC
  4168 ;;		_SetPowerSave
  4169 ;;		_SetVOX
  4170 ;;		_SetVolume
  4171 ;; This function is called by:
  4172 ;;		_RadioBegin
  4173 ;; This function uses a non-reentrant model
  4174 ;;
  4175                           
  4176                           
  4177                           ;psect for function _SR_FRSStart
  4178  1506                     _SR_FRSStart:	
  4179                           
  4180                           ;SR_FRS.c: 16: SetCommandMode();
  4181                           
  4182                           ;incstack = 0
  4183                           ; Regs used in _SR_FRSStart: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4184  1506  3192  2289  3195   	fcall	_SetCommandMode
  4185                           
  4186                           ;SR_FRS.c: 17: Delay(100);
  4187  1509  3064               	movlw	100
  4188  150A  0020               	movlb	0	; select bank0
  4189  150B  00A0               	movwf	Delay@wait
  4190  150C  3000               	movlw	0
  4191  150D  00A1               	movwf	Delay@wait+1
  4192  150E  3193  23E3  3195   	fcall	_Delay
  4193                           
  4194                           ;SR_FRS.c: 19: SetFrequency();
  4195  1511  3194  247E  3195   	fcall	_SetFrequency
  4196                           
  4197                           ;SR_FRS.c: 20: Delay(100);
  4198  1514  3064               	movlw	100
  4199  1515  0020               	movlb	0	; select bank0
  4200  1516  00A0               	movwf	Delay@wait
  4201  1517  3000               	movlw	0
  4202  1518  00A1               	movwf	Delay@wait+1
  4203  1519  3193  23E3  3195   	fcall	_Delay
  4204                           
  4205                           ;SR_FRS.c: 22: SetPowerSave();
  4206  151C  3192  22CC  3195   	fcall	_SetPowerSave
  4207                           
  4208                           ;SR_FRS.c: 23: Delay(100);
  4209  151F  3064               	movlw	100
  4210  1520  0020               	movlb	0	; select bank0
  4211  1521  00A0               	movwf	Delay@wait
  4212  1522  3000               	movlw	0
  4213  1523  00A1               	movwf	Delay@wait+1
  4214  1524  3193  23E3  3195   	fcall	_Delay
  4215                           
  4216                           ;SR_FRS.c: 25: SetVolume(5);
  4217  1527  3005               	movlw	5
  4218  1528  3194  2400  3195   	fcall	_SetVolume
  4219                           
  4220                           ;SR_FRS.c: 26: Delay(100);
  4221  152B  3064               	movlw	100
  4222  152C  0020               	movlb	0	; select bank0
  4223  152D  00A0               	movwf	Delay@wait
  4224  152E  3000               	movlw	0
  4225  152F  00A1               	movwf	Delay@wait+1
  4226  1530  3193  23E3  3195   	fcall	_Delay
  4227                           
  4228                           ;SR_FRS.c: 28: SetVOX(0);
  4229  1533  3000               	movlw	0
  4230  1534  0020               	movlb	0	; select bank0
  4231  1535  00ED               	movwf	SetVOX@volume
  4232  1536  00EE               	movwf	SetVOX@volume+1
  4233  1537  3187  27E2  3195   	fcall	_SetVOX
  4234                           
  4235                           ;SR_FRS.c: 29: Delay(100);
  4236  153A  3064               	movlw	100
  4237  153B  0020               	movlb	0	; select bank0
  4238  153C  00A0               	movwf	Delay@wait
  4239  153D  3000               	movlw	0
  4240  153E  00A1               	movwf	Delay@wait+1
  4241  153F  3193  23E3  3195   	fcall	_Delay
  4242                           
  4243                           ;SR_FRS.c: 31: SetMIC(5,0);
  4244  1542  0020               	movlb	0	; select bank0
  4245  1543  01ED               	clrf	SetMIC@scram
  4246  1544  3005               	movlw	5
  4247  1545  3194  24A4         	fcall	_SetMIC
  4248  1547  0008               	return
  4249  1548                     __end_of_SR_FRSStart:	
  4250                           
  4251                           	psect	text22
  4252  1400                     __ptext22:	
  4253 ;; *************** function _SetVolume *****************
  4254 ;; Defined at:
  4255 ;;		line 47 in file "SR_FRS.c"
  4256 ;; Parameters:    Size  Location     Type
  4257 ;;  volume          1    wreg     unsigned char 
  4258 ;; Auto vars:     Size  Location     Type
  4259 ;;  volume          1   79[BANK0 ] unsigned char 
  4260 ;; Return value:  Size  Location     Type
  4261 ;;                  1    wreg      void 
  4262 ;; Registers used:
  4263 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4264 ;; Tracked objects:
  4265 ;;		On entry : 0/0
  4266 ;;		On exit  : 0/0
  4267 ;;		Unchanged: 0/0
  4268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4270 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4271 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4272 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4273 ;;Total ram usage:        3 bytes
  4274 ;; Hardware stack levels used:    1
  4275 ;; Hardware stack levels required when called:    9
  4276 ;; This function calls:
  4277 ;;		_printf
  4278 ;; This function is called by:
  4279 ;;		_SR_FRSStart
  4280 ;; This function uses a non-reentrant model
  4281 ;;
  4282                           
  4283                           
  4284                           ;psect for function _SetVolume
  4285  1400                     _SetVolume:	
  4286                           
  4287                           ;incstack = 0
  4288                           ; Regs used in _SetVolume: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4289                           ;SetVolume@volume stored from wreg
  4290  1400  0020               	movlb	0	; select bank0
  4291  1401  00EF               	movwf	SetVolume@volume
  4292                           
  4293                           ;SR_FRS.c: 48: if((volume < 9) && (volume > 1)){
  4294  1402  3009               	movlw	9
  4295  1403  026F               	subwf	SetVolume@volume,w
  4296  1404  1803               	skipnc
  4297  1405  0008               	return
  4298  1406  3002               	movlw	2
  4299  1407  026F               	subwf	SetVolume@volume,w
  4300  1408  1C03               	skipc
  4301  1409  0008               	return
  4302                           
  4303                           ;SR_FRS.c: 49: printf("AT+DMOSETVOLUME=%c",volume);
  4304  140A  30C6               	movlw	low (STR_4| (0+32768))
  4305  140B  0021               	movlb	1	; select bank1
  4306  140C  00A0               	movwf	printf@f^(0+128)
  4307  140D  3090               	movlw	high (STR_4| (0+32768))
  4308  140E  00A1               	movwf	(printf@f^(0+128)+1)
  4309  140F  0020               	movlb	0	; select bank0
  4310  1410  086F               	movf	SetVolume@volume,w
  4311  1411  00ED               	movwf	??_SetVolume
  4312  1412  01EE               	clrf	??_SetVolume+1
  4313  1413  086D               	movf	??_SetVolume,w
  4314  1414  0021               	movlb	1	; select bank1
  4315  1415  00A2               	movwf	(?_printf^(0+128)+2)
  4316  1416  0020               	movlb	0	; select bank0
  4317  1417  086E               	movf	??_SetVolume+1,w
  4318  1418  0021               	movlb	1	; select bank1
  4319  1419  00A3               	movwf	((?_printf+1)^(0+128)+2)
  4320  141A  3180  2042         	fcall	_printf
  4321  141C  0008               	return
  4322  141D                     __end_of_SetVolume:	
  4323                           
  4324                           	psect	text23
  4325  07E2                     __ptext23:	
  4326 ;; *************** function _SetVOX *****************
  4327 ;; Defined at:
  4328 ;;		line 53 in file "SR_FRS.c"
  4329 ;; Parameters:    Size  Location     Type
  4330 ;;  volume          2   77[BANK0 ] int 
  4331 ;; Auto vars:     Size  Location     Type
  4332 ;;		None
  4333 ;; Return value:  Size  Location     Type
  4334 ;;                  1    wreg      void 
  4335 ;; Registers used:
  4336 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4337 ;; Tracked objects:
  4338 ;;		On entry : 0/0
  4339 ;;		On exit  : 0/0
  4340 ;;		Unchanged: 0/0
  4341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4342 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4344 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4345 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4346 ;;Total ram usage:        3 bytes
  4347 ;; Hardware stack levels used:    1
  4348 ;; Hardware stack levels required when called:    9
  4349 ;; This function calls:
  4350 ;;		_printf
  4351 ;; This function is called by:
  4352 ;;		_SR_FRSStart
  4353 ;; This function uses a non-reentrant model
  4354 ;;
  4355                           
  4356                           
  4357                           ;psect for function _SetVOX
  4358  07E2                     _SetVOX:	
  4359                           
  4360                           ;SR_FRS.c: 54: if((volume < 8) && (volume >= 0)){
  4361                           
  4362                           ;incstack = 0
  4363                           ; Regs used in _SetVOX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4364  07E2  0020               	movlb	0	; select bank0
  4365  07E3  086E               	movf	SetVOX@volume+1,w
  4366  07E4  3A80               	xorlw	128
  4367  07E5  00EF               	movwf	??_SetVOX
  4368  07E6  3080               	movlw	128
  4369  07E7  026F               	subwf	??_SetVOX,w
  4370  07E8  3008               	movlw	8
  4371  07E9  1903               	btfsc	3,2
  4372  07EA  026D               	subwf	SetVOX@volume,w
  4373  07EB  1803               	skipnc
  4374  07EC  0008               	return
  4375  07ED  0020               	movlb	0	; select bank0
  4376  07EE  1BEE               	btfsc	SetVOX@volume+1,7
  4377  07EF  0008               	return
  4378                           
  4379                           ;SR_FRS.c: 55: printf("AT+DMOSETVOLUME=%c",volume);
  4380  07F0  30C6               	movlw	low (STR_4| (0+32768))
  4381  07F1  0021               	movlb	1	; select bank1
  4382  07F2  00A0               	movwf	printf@f^(0+128)
  4383  07F3  3090               	movlw	high (STR_4| (0+32768))
  4384  07F4  00A1               	movwf	(printf@f^(0+128)+1)
  4385  07F5  0020               	movlb	0	; select bank0
  4386  07F6  086E               	movf	SetVOX@volume+1,w
  4387  07F7  0021               	movlb	1	; select bank1
  4388  07F8  00A3               	movwf	((?_printf+1)^(0+128)+2)
  4389  07F9  0020               	movlb	0	; select bank0
  4390  07FA  086D               	movf	SetVOX@volume,w
  4391  07FB  0021               	movlb	1	; select bank1
  4392  07FC  00A2               	movwf	(?_printf^(0+128)+2)
  4393  07FD  3180  2042         	fcall	_printf
  4394  07FF  0008               	return
  4395  0800                     __end_of_SetVOX:	
  4396                           
  4397                           	psect	text24
  4398  12CC                     __ptext24:	
  4399 ;; *************** function _SetPowerSave *****************
  4400 ;; Defined at:
  4401 ;;		line 42 in file "SR_FRS.c"
  4402 ;; Parameters:    Size  Location     Type
  4403 ;;		None
  4404 ;; Auto vars:     Size  Location     Type
  4405 ;;		None
  4406 ;; Return value:  Size  Location     Type
  4407 ;;                  1    wreg      void 
  4408 ;; Registers used:
  4409 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4410 ;; Tracked objects:
  4411 ;;		On entry : 0/0
  4412 ;;		On exit  : 0/0
  4413 ;;		Unchanged: 0/0
  4414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4419 ;;Total ram usage:        0 bytes
  4420 ;; Hardware stack levels used:    1
  4421 ;; Hardware stack levels required when called:    9
  4422 ;; This function calls:
  4423 ;;		_printf
  4424 ;; This function is called by:
  4425 ;;		_SR_FRSStart
  4426 ;; This function uses a non-reentrant model
  4427 ;;
  4428                           
  4429                           
  4430                           ;psect for function _SetPowerSave
  4431  12CC                     _SetPowerSave:	
  4432                           
  4433                           ;SR_FRS.c: 44: printf("AT+DMOAUTOPOWCONTR=%c",1);
  4434                           
  4435                           ;incstack = 0
  4436                           ; Regs used in _SetPowerSave: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4437  12CC  30B0               	movlw	low (STR_3| (0+32768))
  4438  12CD  0021               	movlb	1	; select bank1
  4439  12CE  00A0               	movwf	printf@f^(0+128)
  4440  12CF  3090               	movlw	high (STR_3| (0+32768))
  4441  12D0  00A1               	movwf	(printf@f^(0+128)+1)
  4442  12D1  3001               	movlw	1
  4443  12D2  00A2               	movwf	(?_printf^(0+128)+2)
  4444  12D3  3000               	movlw	0
  4445  12D4  00A3               	movwf	(?_printf^(0+128)+3)
  4446  12D5  3180  2042         	fcall	_printf
  4447  12D7  0008               	return
  4448  12D8                     __end_of_SetPowerSave:	
  4449                           
  4450                           	psect	text25
  4451  14A4                     __ptext25:	
  4452 ;; *************** function _SetMIC *****************
  4453 ;; Defined at:
  4454 ;;		line 59 in file "SR_FRS.c"
  4455 ;; Parameters:    Size  Location     Type
  4456 ;;  volume          1    wreg     unsigned char 
  4457 ;;  scram           1   77[BANK0 ] unsigned char 
  4458 ;; Auto vars:     Size  Location     Type
  4459 ;;  volume          1   78[BANK0 ] unsigned char 
  4460 ;; Return value:  Size  Location     Type
  4461 ;;                  1    wreg      void 
  4462 ;; Registers used:
  4463 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4464 ;; Tracked objects:
  4465 ;;		On entry : 0/0
  4466 ;;		On exit  : 0/0
  4467 ;;		Unchanged: 0/0
  4468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4469 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4470 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4471 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4472 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4473 ;;Total ram usage:        6 bytes
  4474 ;; Hardware stack levels used:    1
  4475 ;; Hardware stack levels required when called:    9
  4476 ;; This function calls:
  4477 ;;		_printf
  4478 ;; This function is called by:
  4479 ;;		_SR_FRSStart
  4480 ;; This function uses a non-reentrant model
  4481 ;;
  4482                           
  4483                           
  4484                           ;psect for function _SetMIC
  4485  14A4                     _SetMIC:	
  4486                           
  4487                           ;incstack = 0
  4488                           ; Regs used in _SetMIC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4489                           ;SetMIC@volume stored from wreg
  4490  14A4  0020               	movlb	0	; select bank0
  4491  14A5  00EE               	movwf	SetMIC@volume
  4492                           
  4493                           ;SR_FRS.c: 60: if((volume < 8) && (volume > 0)){
  4494  14A6  3008               	movlw	8
  4495  14A7  026E               	subwf	SetMIC@volume,w
  4496  14A8  1803               	skipnc
  4497  14A9  0008               	return
  4498  14AA  086E               	movf	SetMIC@volume,w
  4499  14AB  1903               	btfsc	3,2
  4500  14AC  0008               	return
  4501                           
  4502                           ;SR_FRS.c: 61: printf("AT+DMOSETMIC=%c,%c,%c",volume,scram,0);
  4503  14AD  309A               	movlw	low (STR_6| (0+32768))
  4504  14AE  0021               	movlb	1	; select bank1
  4505  14AF  00A0               	movwf	printf@f^(0+128)
  4506  14B0  3090               	movlw	high (STR_6| (0+32768))
  4507  14B1  00A1               	movwf	(printf@f^(0+128)+1)
  4508  14B2  0020               	movlb	0	; select bank0
  4509  14B3  086E               	movf	SetMIC@volume,w
  4510  14B4  0021               	movlb	1	; select bank1
  4511  14B5  00C8               	movwf	??_SetMIC^(0+128)
  4512  14B6  01C9               	clrf	(??_SetMIC^(0+128)+1)
  4513  14B7  0848               	movf	??_SetMIC^(0+128),w
  4514  14B8  00A2               	movwf	(?_printf^(0+128)+2)
  4515  14B9  0849               	movf	(??_SetMIC+1)^(0+128),w
  4516  14BA  00A3               	movwf	((?_printf+1)^(0+128)+2)
  4517  14BB  0020               	movlb	0	; select bank0
  4518  14BC  086D               	movf	SetMIC@scram,w
  4519  14BD  0021               	movlb	1	; select bank1
  4520  14BE  00CA               	movwf	(??_SetMIC+2)^(0+128)
  4521  14BF  01CB               	clrf	((??_SetMIC+2)^(0+128)+1)
  4522  14C0  084A               	movf	(??_SetMIC+2)^(0+128),w
  4523  14C1  00A4               	movwf	(?_printf^(0+128)+4)
  4524  14C2  084B               	movf	(??_SetMIC+3)^(0+128),w
  4525  14C3  00A5               	movwf	((?_printf+1)^(0+128)+4)
  4526  14C4  3000               	movlw	0
  4527  14C5  00A6               	movwf	(?_printf^(0+128)+6)
  4528  14C6  00A7               	movwf	((?_printf+1)^(0+128)+6)
  4529  14C7  3180  2042         	fcall	_printf
  4530  14C9  0008               	return
  4531  14CA                     __end_of_SetMIC:	
  4532                           
  4533                           	psect	text26
  4534  147E                     __ptext26:	
  4535 ;; *************** function _SetFrequency *****************
  4536 ;; Defined at:
  4537 ;;		line 38 in file "SR_FRS.c"
  4538 ;; Parameters:    Size  Location     Type
  4539 ;;		None
  4540 ;; Auto vars:     Size  Location     Type
  4541 ;;		None
  4542 ;; Return value:  Size  Location     Type
  4543 ;;                  1    wreg      void 
  4544 ;; Registers used:
  4545 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4546 ;; Tracked objects:
  4547 ;;		On entry : 0/0
  4548 ;;		On exit  : 0/0
  4549 ;;		Unchanged: 0/0
  4550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4555 ;;Total ram usage:        0 bytes
  4556 ;; Hardware stack levels used:    1
  4557 ;; Hardware stack levels required when called:    9
  4558 ;; This function calls:
  4559 ;;		_printf
  4560 ;; This function is called by:
  4561 ;;		_SR_FRSStart
  4562 ;; This function uses a non-reentrant model
  4563 ;;
  4564                           
  4565                           
  4566                           ;psect for function _SetFrequency
  4567  147E                     _SetFrequency:	
  4568                           
  4569                           ;SR_FRS.c: 39: printf("AT+DMOSETGROUP=%d,%f,%f,%d,%d,%d,%d",0,450.0250,450.0250,83,2,83,
      +                          0);
  4570                           
  4571                           ;incstack = 0
  4572                           ; Regs used in _SetFrequency: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4573  147E  3076               	movlw	low (STR_2| (0+32768))
  4574  147F  0021               	movlb	1	; select bank1
  4575  1480  00A0               	movwf	printf@f^(0+128)
  4576  1481  3090               	movlw	high (STR_2| (0+32768))
  4577  1482  00A1               	movwf	(printf@f^(0+128)+1)
  4578  1483  3000               	movlw	0
  4579  1484  00A2               	movwf	(?_printf^(0+128)+2)
  4580  1485  00A3               	movwf	((?_printf+1)^(0+128)+2)
  4581  1486  3003               	movlw	3
  4582  1487  00A4               	movwf	(?_printf^(0+128)+4)
  4583  1488  30E1               	movlw	225
  4584  1489  00A5               	movwf	((?_printf+1)^(0+128)+4)
  4585  148A  3043               	movlw	67
  4586  148B  00A6               	movwf	((?_printf+2)^(0+128)+4)
  4587  148C  3003               	movlw	3
  4588  148D  00A7               	movwf	(?_printf^(0+128)+7)
  4589  148E  30E1               	movlw	225
  4590  148F  00A8               	movwf	((?_printf+1)^(0+128)+7)
  4591  1490  3043               	movlw	67
  4592  1491  00A9               	movwf	((?_printf+2)^(0+128)+7)
  4593  1492  3053               	movlw	83
  4594  1493  00AA               	movwf	(?_printf^(0+128)+10)
  4595  1494  3000               	movlw	0
  4596  1495  00AB               	movwf	(?_printf^(0+128)+11)
  4597  1496  3002               	movlw	2
  4598  1497  00AC               	movwf	(?_printf^(0+128)+12)
  4599  1498  3000               	movlw	0
  4600  1499  00AD               	movwf	(?_printf^(0+128)+13)
  4601  149A  3053               	movlw	83
  4602  149B  00AE               	movwf	(?_printf^(0+128)+14)
  4603  149C  3000               	movlw	0
  4604  149D  00AF               	movwf	(?_printf^(0+128)+15)
  4605  149E  3000               	movlw	0
  4606  149F  00B0               	movwf	(?_printf^(0+128)+16)
  4607  14A0  00B1               	movwf	((?_printf+1)^(0+128)+16)
  4608  14A1  3180  2042         	fcall	_printf
  4609  14A3  0008               	return
  4610  14A4                     __end_of_SetFrequency:	
  4611                           
  4612                           	psect	text27
  4613  1289                     __ptext27:	
  4614 ;; *************** function _SetCommandMode *****************
  4615 ;; Defined at:
  4616 ;;		line 34 in file "SR_FRS.c"
  4617 ;; Parameters:    Size  Location     Type
  4618 ;;		None
  4619 ;; Auto vars:     Size  Location     Type
  4620 ;;		None
  4621 ;; Return value:  Size  Location     Type
  4622 ;;                  1    wreg      void 
  4623 ;; Registers used:
  4624 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4625 ;; Tracked objects:
  4626 ;;		On entry : 0/0
  4627 ;;		On exit  : 0/0
  4628 ;;		Unchanged: 0/0
  4629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4634 ;;Total ram usage:        0 bytes
  4635 ;; Hardware stack levels used:    1
  4636 ;; Hardware stack levels required when called:    9
  4637 ;; This function calls:
  4638 ;;		_printf
  4639 ;; This function is called by:
  4640 ;;		_SR_FRSStart
  4641 ;; This function uses a non-reentrant model
  4642 ;;
  4643                           
  4644                           
  4645                           ;psect for function _SetCommandMode
  4646  1289                     _SetCommandMode:	
  4647                           
  4648                           ;SR_FRS.c: 35: printf("AT+DMOCONNECT");
  4649                           
  4650                           ;incstack = 0
  4651                           ; Regs used in _SetCommandMode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4652  1289  30D9               	movlw	low (STR_1| (0+32768))
  4653  128A  0021               	movlb	1	; select bank1
  4654  128B  00A0               	movwf	printf@f^(0+128)
  4655  128C  3090               	movlw	high (STR_1| (0+32768))
  4656  128D  00A1               	movwf	(printf@f^(0+128)+1)
  4657  128E  3180  2042         	fcall	_printf
  4658  1290  0008               	return
  4659  1291                     __end_of_SetCommandMode:	
  4660                           
  4661                           	psect	text28
  4662  0042                     __ptext28:	
  4663 ;; *************** function _printf *****************
  4664 ;; Defined at:
  4665 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  4666 ;; Parameters:    Size  Location     Type
  4667 ;;  f               2    0[BANK1 ] PTR const unsigned char 
  4668 ;;		 -> STR_6(22), STR_5(19), STR_4(19), STR_3(22), 
  4669 ;;		 -> STR_2(36), STR_1(14), 
  4670 ;; Auto vars:     Size  Location     Type
  4671 ;;  tmpval          4   32[BANK1 ] struct .
  4672 ;;  val             4   26[BANK1 ] unsigned long 
  4673 ;;  fval            3   36[BANK1 ] unsigned long 
  4674 ;;  exp             2   30[BANK1 ] int 
  4675 ;;  prec            2   24[BANK1 ] int 
  4676 ;;  flag            2   21[BANK1 ] unsigned short 
  4677 ;;  cp              2    0        PTR const unsigned char 
  4678 ;;  len             2    0        unsigned int 
  4679 ;;  width           2    0        int 
  4680 ;;  c               1   39[BANK1 ] char 
  4681 ;;  ap              1   23[BANK1 ] PTR void [1]
  4682 ;;		 -> ?_printf(2), 
  4683 ;;  d               1    0        unsigned char 
  4684 ;; Return value:  Size  Location     Type
  4685 ;;                  2    0[BANK1 ] int 
  4686 ;; Registers used:
  4687 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4688 ;; Tracked objects:
  4689 ;;		On entry : 0/0
  4690 ;;		On exit  : 0/0
  4691 ;;		Unchanged: 0/0
  4692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4693 ;;      Params:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0
  4694 ;;      Locals:         0       0      22       0       0       0       0       0       0       0       0       0       
      +0       0
  4695 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4696 ;;      Totals:         0       6      40       0       0       0       0       0       0       0       0       0       
      +0       0
  4697 ;;Total ram usage:       46 bytes
  4698 ;; Hardware stack levels used:    1
  4699 ;; Hardware stack levels required when called:    8
  4700 ;; This function calls:
  4701 ;;		___awdiv
  4702 ;;		___ftadd
  4703 ;;		___ftge
  4704 ;;		___ftmul
  4705 ;;		___ftneg
  4706 ;;		___ftsub
  4707 ;;		___fttol
  4708 ;;		___lldiv
  4709 ;;		___llmod
  4710 ;;		___lltoft
  4711 ;;		___wmul
  4712 ;;		__div_to_l_
  4713 ;;		__tdiv_to_l_
  4714 ;;		_fround
  4715 ;;		_putch
  4716 ;;		_scale
  4717 ;; This function is called by:
  4718 ;;		_SetCommandMode
  4719 ;;		_SetFrequency
  4720 ;;		_SetPowerSave
  4721 ;;		_SetVolume
  4722 ;;		_SetVOX
  4723 ;;		_SetMIC
  4724 ;; This function uses a non-reentrant model
  4725 ;;
  4726                           
  4727                           
  4728                           ;psect for function _printf
  4729  0042                     _printf:	
  4730                           
  4731                           ;doprnt.c: 466: va_list ap;
  4732                           ;doprnt.c: 499: signed char c;
  4733                           ;doprnt.c: 501: int width;
  4734                           ;doprnt.c: 504: int prec;
  4735                           ;doprnt.c: 508: unsigned short flag;
  4736                           ;doprnt.c: 515: char d;
  4737                           ;doprnt.c: 516: double fval;
  4738                           ;doprnt.c: 517: int exp;
  4739                           ;doprnt.c: 523: union {
  4740                           ;doprnt.c: 524: unsigned long vd;
  4741                           ;doprnt.c: 525: double integ;
  4742                           ;doprnt.c: 526: } tmpval;
  4743                           ;doprnt.c: 528: unsigned long val;
  4744                           ;doprnt.c: 529: unsigned len;
  4745                           ;doprnt.c: 530: const char * cp;
  4746                           ;doprnt.c: 533: *ap = __va_start();
  4747                           
  4748                           ;incstack = 0
  4749                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4750  0042  30A2               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4751  0043  0020               	movlb	0	; select bank0
  4752  0044  00E7               	movwf	??_printf
  4753  0045  0867               	movf	??_printf,w
  4754  0046  0021               	movlb	1	; select bank1
  4755  0047  00B7               	movwf	printf@ap^(0+128)
  4756  0048                     l2880:	
  4757                           ;doprnt.c: 536: while(c = *f++) {
  4758                           
  4759  0048  0021               	movlb	1	; select bank1
  4760  0049  0821               	movf	(printf@f+1)^(0+128),w
  4761  004A  0020               	movlb	0	; select bank0
  4762  004B  00E8               	movwf	??_printf+1
  4763  004C  0021               	movlb	1	; select bank1
  4764  004D  0820               	movf	printf@f^(0+128),w
  4765  004E  0020               	movlb	0	; select bank0
  4766  004F  00E7               	movwf	??_printf
  4767  0050  0021               	movlb	1	; select bank1
  4768  0051  0AA0               	incf	printf@f^(0+128),f
  4769  0052  1903               	skipnz
  4770  0053  0AA1               	incf	(printf@f+1)^(0+128),f
  4771  0054  0020               	movlb	0	; select bank0
  4772  0055  0867               	movf	??_printf,w
  4773  0056  0084               	movwf	4
  4774  0057  0868               	movf	??_printf+1,w
  4775  0058  0085               	movwf	5
  4776  0059  0800               	movf	0,w	;code access
  4777  005A  00E9               	movwf	??_printf+2
  4778  005B  0869               	movf	??_printf+2,w
  4779  005C  0021               	movlb	1	; select bank1
  4780  005D  00C7               	movwf	printf@c^(0+128)
  4781  005E  0847               	movf	printf@c^(0+128),w
  4782  005F  1903               	btfsc	3,2
  4783  0060  0008               	return
  4784                           
  4785                           ;doprnt.c: 538: if(c != '%')
  4786  0061  3025               	movlw	37
  4787  0062  0647               	xorwf	printf@c^(0+128),w
  4788  0063  1903               	btfsc	3,2
  4789  0064  286A               	goto	l2704
  4790                           
  4791                           ;doprnt.c: 540: {
  4792                           ;doprnt.c: 541: (putch(c) );
  4793  0065  0847               	movf	printf@c^(0+128),w
  4794  0066  3192  2275  3180   	fcall	_putch
  4795                           
  4796                           ;doprnt.c: 542: continue;
  4797  0069  2848               	goto	l2880
  4798  006A                     l2704:	
  4799                           
  4800                           ;doprnt.c: 543: }
  4801                           ;doprnt.c: 548: flag = 0;
  4802  006A  0021               	movlb	1	; select bank1
  4803  006B  01B5               	clrf	printf@flag^(0+128)
  4804  006C  01B6               	clrf	(printf@flag+1)^(0+128)
  4805                           
  4806                           ;doprnt.c: 635: switch(c = *f++) {
  4807  006D  2884               	goto	l2714
  4808  006E                     l366:	
  4809                           ;doprnt.c: 662: case 'f':
  4810                           
  4811                           ;doprnt.c: 638: goto alldone;
  4812                           
  4813                           ;doprnt.c: 637: case 0:
  4814                           
  4815                           
  4816                           ;doprnt.c: 663: flag |= 0x400;
  4817  006E  1536               	bsf	(printf@flag^(0+128)+1),2
  4818                           
  4819                           ;doprnt.c: 698: case 'i':
  4820                           ;doprnt.c: 699: break;
  4821                           
  4822                           ;doprnt.c: 697: case 'd':
  4823                           
  4824                           ;doprnt.c: 664: break;
  4825  006F  28A8               	goto	l2716
  4826  0070                     l2706:	
  4827                           ;doprnt.c: 784: case 'c':
  4828                           
  4829                           
  4830                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4831  0070  0837               	movf	printf@ap^(0+128),w
  4832  0071  0086               	movwf	6
  4833  0072  0187               	clrf	7
  4834  0073  0801               	movf	1,w
  4835  0074  0020               	movlb	0	; select bank0
  4836  0075  00E7               	movwf	??_printf
  4837  0076  0867               	movf	??_printf,w
  4838  0077  0021               	movlb	1	; select bank1
  4839  0078  00C7               	movwf	printf@c^(0+128)
  4840  0079  3002               	movlw	2
  4841  007A  0020               	movlb	0	; select bank0
  4842  007B  00E7               	movwf	??_printf
  4843  007C  0867               	movf	??_printf,w
  4844  007D  0021               	movlb	1	; select bank1
  4845  007E  07B7               	addwf	printf@ap^(0+128),f
  4846  007F                     l2710:	
  4847                           ;doprnt.c: 802: default:
  4848                           
  4849                           
  4850                           ;doprnt.c: 809: (putch(c) );
  4851  007F  0847               	movf	printf@c^(0+128),w
  4852  0080  3192  2275  3180   	fcall	_putch
  4853                           
  4854                           ;doprnt.c: 810: continue;
  4855  0083  2848               	goto	l2880
  4856  0084                     l2714:	
  4857                           ;doprnt.c: 822: }
  4858                           
  4859  0084  0021               	movlb	1	; select bank1
  4860  0085  0821               	movf	(printf@f+1)^(0+128),w
  4861  0086  0020               	movlb	0	; select bank0
  4862  0087  00E8               	movwf	??_printf+1
  4863  0088  0021               	movlb	1	; select bank1
  4864  0089  0820               	movf	printf@f^(0+128),w
  4865  008A  0020               	movlb	0	; select bank0
  4866  008B  00E7               	movwf	??_printf
  4867  008C  0021               	movlb	1	; select bank1
  4868  008D  0AA0               	incf	printf@f^(0+128),f
  4869  008E  1903               	skipnz
  4870  008F  0AA1               	incf	(printf@f+1)^(0+128),f
  4871  0090  0020               	movlb	0	; select bank0
  4872  0091  0867               	movf	??_printf,w
  4873  0092  0084               	movwf	4
  4874  0093  0868               	movf	??_printf+1,w
  4875  0094  0085               	movwf	5
  4876  0095  0800               	movf	0,w	;code access
  4877  0096  0021               	movlb	1	; select bank1
  4878  0097  00C7               	movwf	printf@c^(0+128)
  4879                           
  4880                           ; Switch size 1, requested type "space"
  4881                           ; Number of cases is 5, Range of values is 0 to 105
  4882                           ; switch strategies available:
  4883                           ; Name         Instructions Cycles
  4884                           ; simple_byte           16     9 (average)
  4885                           ; direct_byte          218     6 (fixed)
  4886                           ; jumptable            260     6 (fixed)
  4887                           ;	Chosen strategy is simple_byte
  4888  0098  3A00               	xorlw	0	; case 0
  4889  0099  1903               	skipnz
  4890  009A  2DC5               	goto	l418
  4891  009B  3A63               	xorlw	99	; case 99
  4892  009C  1903               	skipnz
  4893  009D  2870               	goto	l2706
  4894  009E  3A07               	xorlw	7	; case 100
  4895  009F  1903               	skipnz
  4896  00A0  28A8               	goto	l2716
  4897  00A1  3A02               	xorlw	2	; case 102
  4898  00A2  1903               	skipnz
  4899  00A3  286E               	goto	l366
  4900  00A4  3A0F               	xorlw	15	; case 105
  4901  00A5  1903               	skipnz
  4902  00A6  28A8               	goto	l2716
  4903  00A7  287F               	goto	l2710
  4904  00A8                     l2716:	
  4905                           
  4906                           ;doprnt.c: 825: if(flag & (0x700)) {
  4907  00A8  3000               	movlw	0
  4908  00A9  0021               	movlb	1	; select bank1
  4909  00AA  0535               	andwf	printf@flag^(0+128),w
  4910  00AB  0020               	movlb	0	; select bank0
  4911  00AC  00E7               	movwf	??_printf
  4912  00AD  3007               	movlw	7
  4913  00AE  0021               	movlb	1	; select bank1
  4914  00AF  0536               	andwf	(printf@flag+1)^(0+128),w
  4915  00B0  0020               	movlb	0	; select bank0
  4916  00B1  00E8               	movwf	??_printf+1
  4917  00B2  0867               	movf	??_printf,w
  4918  00B3  0468               	iorwf	??_printf+1,w
  4919  00B4  1903               	btfsc	3,2
  4920  00B5  2CF1               	goto	l2846
  4921                           
  4922                           ;doprnt.c: 829: prec = 6;
  4923  00B6  3006               	movlw	6
  4924  00B7  0021               	movlb	1	; select bank1
  4925  00B8  00B8               	movwf	printf@prec^(0+128)
  4926  00B9  3000               	movlw	0
  4927  00BA  00B9               	movwf	(printf@prec^(0+128)+1)
  4928                           
  4929                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4930  00BB  0837               	movf	printf@ap^(0+128),w
  4931  00BC  0086               	movwf	6
  4932  00BD  0187               	clrf	7
  4933  00BE  3F40               	moviw [0]fsr1
  4934  00BF  00C4               	movwf	printf@fval^(0+128)
  4935  00C0  3F41               	moviw [1]fsr1
  4936  00C1  00C5               	movwf	(printf@fval+1)^(0+128)
  4937  00C2  3F42               	moviw [2]fsr1
  4938  00C3  00C6               	movwf	(printf@fval+2)^(0+128)
  4939  00C4  3003               	movlw	3
  4940  00C5  0020               	movlb	0	; select bank0
  4941  00C6  00E7               	movwf	??_printf
  4942  00C7  0867               	movf	??_printf,w
  4943  00C8  0021               	movlb	1	; select bank1
  4944  00C9  07B7               	addwf	printf@ap^(0+128),f
  4945                           
  4946                           ;doprnt.c: 831: if(fval < 0.0) {
  4947  00CA  0844               	movf	printf@fval^(0+128),w
  4948  00CB  0020               	movlb	0	; select bank0
  4949  00CC  00A0               	movwf	___ftge@ff1
  4950  00CD  0021               	movlb	1	; select bank1
  4951  00CE  0845               	movf	(printf@fval+1)^(0+128),w
  4952  00CF  0020               	movlb	0	; select bank0
  4953  00D0  00A1               	movwf	___ftge@ff1+1
  4954  00D1  0021               	movlb	1	; select bank1
  4955  00D2  0846               	movf	(printf@fval+2)^(0+128),w
  4956  00D3  0020               	movlb	0	; select bank0
  4957  00D4  00A2               	movwf	___ftge@ff1+2
  4958  00D5  3000               	movlw	0
  4959  00D6  00A3               	movwf	___ftge@ff2
  4960  00D7  3000               	movlw	0
  4961  00D8  00A4               	movwf	___ftge@ff2+1
  4962  00D9  3000               	movlw	0
  4963  00DA  00A5               	movwf	___ftge@ff2+2
  4964  00DB  3194  24CA  3180   	fcall	___ftge
  4965  00DE  1803               	btfsc	3,0
  4966  00DF  28FF               	goto	l2730
  4967                           
  4968                           ;doprnt.c: 832: fval = -fval;
  4969  00E0  0021               	movlb	1	; select bank1
  4970  00E1  0844               	movf	printf@fval^(0+128),w
  4971  00E2  0020               	movlb	0	; select bank0
  4972  00E3  00A0               	movwf	___ftneg@f1
  4973  00E4  0021               	movlb	1	; select bank1
  4974  00E5  0845               	movf	(printf@fval+1)^(0+128),w
  4975  00E6  0020               	movlb	0	; select bank0
  4976  00E7  00A1               	movwf	___ftneg@f1+1
  4977  00E8  0021               	movlb	1	; select bank1
  4978  00E9  0846               	movf	(printf@fval+2)^(0+128),w
  4979  00EA  0020               	movlb	0	; select bank0
  4980  00EB  00A2               	movwf	___ftneg@f1+2
  4981  00EC  3192  2291  3180   	fcall	___ftneg
  4982  00EF  0020               	movlb	0	; select bank0
  4983  00F0  0820               	movf	?___ftneg,w
  4984  00F1  0021               	movlb	1	; select bank1
  4985  00F2  00C4               	movwf	printf@fval^(0+128)
  4986  00F3  0020               	movlb	0	; select bank0
  4987  00F4  0821               	movf	?___ftneg+1,w
  4988  00F5  0021               	movlb	1	; select bank1
  4989  00F6  00C5               	movwf	(printf@fval+1)^(0+128)
  4990  00F7  0020               	movlb	0	; select bank0
  4991  00F8  0822               	movf	?___ftneg+2,w
  4992  00F9  0021               	movlb	1	; select bank1
  4993  00FA  00C6               	movwf	(printf@fval+2)^(0+128)
  4994                           
  4995                           ;doprnt.c: 833: flag |= 0x03;
  4996  00FB  3003               	movlw	3
  4997  00FC  04B5               	iorwf	printf@flag^(0+128),f
  4998  00FD  3000               	movlw	0
  4999  00FE  04B6               	iorwf	(printf@flag+1)^(0+128),f
  5000  00FF                     l2730:	
  5001                           
  5002                           ;doprnt.c: 834: }
  5003                           ;doprnt.c: 835: exp = 0;
  5004  00FF  0021               	movlb	1	; select bank1
  5005  0100  01BE               	clrf	printf@exp^(0+128)
  5006  0101  01BF               	clrf	(printf@exp+1)^(0+128)
  5007                           
  5008                           ;doprnt.c: 836: if( fval!=0) {
  5009  0102  0846               	movf	(printf@fval+2)^(0+128),w
  5010  0103  0445               	iorwf	(printf@fval+1)^(0+128),w
  5011  0104  0444               	iorwf	printf@fval^(0+128),w
  5012  0105  1903               	skipnz
  5013  0106  29D1               	goto	l374
  5014                           
  5015                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  5016  0107  30C4               	movlw	low (printf@fval| 0)
  5017  0108  0086               	movwf	6
  5018  0109  0187               	clrf	7
  5019  010A  3F40               	moviw [0]fsr1
  5020  010B  0020               	movlb	0	; select bank0
  5021  010C  00E7               	movwf	??_printf
  5022  010D  3F41               	moviw [1]fsr1
  5023  010E  00E8               	movwf	??_printf+1
  5024  010F  3F42               	moviw [2]fsr1
  5025  0110  00E9               	movwf	??_printf+2
  5026  0111  3F43               	moviw [3]fsr1
  5027  0112  00EA               	movwf	??_printf+3
  5028  0113  300F               	movlw	15
  5029  0114                     u3595:	
  5030  0114  36EA               	lsrf	??_printf+3,f
  5031  0115  0CE9               	rrf	??_printf+2,f
  5032  0116  0CE8               	rrf	??_printf+1,f
  5033  0117  0CE7               	rrf	??_printf,f
  5034  0118  0B89               	decfsz	9,f
  5035  0119  2914               	goto	u3595
  5036  011A  30FF               	movlw	255
  5037  011B  0567               	andwf	??_printf,w
  5038  011C  00EB               	movwf	??_printf+4
  5039  011D  3000               	movlw	0
  5040  011E  0568               	andwf	??_printf+1,w
  5041  011F  00EC               	movwf	??_printf+5
  5042  0120  086B               	movf	??_printf+4,w
  5043  0121  3E82               	addlw	130
  5044  0122  0021               	movlb	1	; select bank1
  5045  0123  00BE               	movwf	printf@exp^(0+128)
  5046  0124  30FF               	movlw	255
  5047  0125  0020               	movlb	0	; select bank0
  5048  0126  3D6C               	addwfc	??_printf+5,w
  5049  0127  0021               	movlb	1	; select bank1
  5050  0128  00BF               	movwf	(printf@exp+1)^(0+128)
  5051                           
  5052                           ;doprnt.c: 838: exp--;
  5053  0129  30FF               	movlw	255
  5054  012A  07BE               	addwf	printf@exp^(0+128),f
  5055  012B  30FF               	movlw	255
  5056  012C  3DBF               	addwfc	(printf@exp+1)^(0+128),f
  5057                           
  5058                           ;doprnt.c: 839: exp *= 3;
  5059  012D  3003               	movlw	3
  5060  012E  0020               	movlb	0	; select bank0
  5061  012F  00B0               	movwf	___wmul@multiplier
  5062  0130  3000               	movlw	0
  5063  0131  00B1               	movwf	___wmul@multiplier+1
  5064  0132  0021               	movlb	1	; select bank1
  5065  0133  083F               	movf	(printf@exp+1)^(0+128),w
  5066  0134  0020               	movlb	0	; select bank0
  5067  0135  00B3               	movwf	___wmul@multiplicand+1
  5068  0136  0021               	movlb	1	; select bank1
  5069  0137  083E               	movf	printf@exp^(0+128),w
  5070  0138  0020               	movlb	0	; select bank0
  5071  0139  00B2               	movwf	___wmul@multiplicand
  5072  013A  3193  238F  3180   	fcall	___wmul
  5073  013D  0020               	movlb	0	; select bank0
  5074  013E  0831               	movf	?___wmul+1,w
  5075  013F  0021               	movlb	1	; select bank1
  5076  0140  00BF               	movwf	(printf@exp+1)^(0+128)
  5077  0141  0020               	movlb	0	; select bank0
  5078  0142  0830               	movf	?___wmul,w
  5079  0143  0021               	movlb	1	; select bank1
  5080  0144  00BE               	movwf	printf@exp^(0+128)
  5081                           
  5082                           ;doprnt.c: 840: exp /= 10;
  5083  0145  300A               	movlw	10
  5084  0146  0020               	movlb	0	; select bank0
  5085  0147  00A7               	movwf	___awdiv@divisor
  5086  0148  3000               	movlw	0
  5087  0149  00A8               	movwf	___awdiv@divisor+1
  5088  014A  0021               	movlb	1	; select bank1
  5089  014B  083F               	movf	(printf@exp+1)^(0+128),w
  5090  014C  0020               	movlb	0	; select bank0
  5091  014D  00AA               	movwf	___awdiv@dividend+1
  5092  014E  0021               	movlb	1	; select bank1
  5093  014F  083E               	movf	printf@exp^(0+128),w
  5094  0150  0020               	movlb	0	; select bank0
  5095  0151  00A9               	movwf	___awdiv@dividend
  5096  0152  3196  266F  3180   	fcall	___awdiv
  5097  0155  0020               	movlb	0	; select bank0
  5098  0156  0828               	movf	?___awdiv+1,w
  5099  0157  0021               	movlb	1	; select bank1
  5100  0158  00BF               	movwf	(printf@exp+1)^(0+128)
  5101  0159  0020               	movlb	0	; select bank0
  5102  015A  0827               	movf	?___awdiv,w
  5103  015B  0021               	movlb	1	; select bank1
  5104  015C  00BE               	movwf	printf@exp^(0+128)
  5105                           
  5106                           ;doprnt.c: 841: if(exp < 0)
  5107  015D  1FBF               	btfss	(printf@exp+1)^(0+128),7
  5108  015E  2963               	goto	l2746
  5109                           
  5110                           ;doprnt.c: 842: exp--;
  5111  015F  30FF               	movlw	255
  5112  0160  07BE               	addwf	printf@exp^(0+128),f
  5113  0161  30FF               	movlw	255
  5114  0162  3DBF               	addwfc	(printf@exp+1)^(0+128),f
  5115  0163                     l2746:	
  5116                           
  5117                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  5118  0163  033E               	decf	printf@exp^(0+128),w
  5119  0164  3AFF               	xorlw	255
  5120  0165  318D  25BA  3180   	fcall	_scale
  5121  0168  0020               	movlb	0	; select bank0
  5122  0169  0846               	movf	?_scale,w
  5123  016A  0021               	movlb	1	; select bank1
  5124  016B  00C0               	movwf	printf@tmpval^(0+128)
  5125  016C  0020               	movlb	0	; select bank0
  5126  016D  0847               	movf	?_scale+1,w
  5127  016E  0021               	movlb	1	; select bank1
  5128  016F  00C1               	movwf	(printf@tmpval+1)^(0+128)
  5129  0170  0020               	movlb	0	; select bank0
  5130  0171  0848               	movf	?_scale+2,w
  5131  0172  0021               	movlb	1	; select bank1
  5132  0173  00C2               	movwf	(printf@tmpval+2)^(0+128)
  5133                           
  5134                           ;doprnt.c: 847: tmpval.integ *= fval;
  5135  0174  0844               	movf	printf@fval^(0+128),w
  5136  0175  0020               	movlb	0	; select bank0
  5137  0176  00B6               	movwf	___ftmul@f1
  5138  0177  0021               	movlb	1	; select bank1
  5139  0178  0845               	movf	(printf@fval+1)^(0+128),w
  5140  0179  0020               	movlb	0	; select bank0
  5141  017A  00B7               	movwf	___ftmul@f1+1
  5142  017B  0021               	movlb	1	; select bank1
  5143  017C  0846               	movf	(printf@fval+2)^(0+128),w
  5144  017D  0020               	movlb	0	; select bank0
  5145  017E  00B8               	movwf	___ftmul@f1+2
  5146  017F  0021               	movlb	1	; select bank1
  5147  0180  0840               	movf	printf@tmpval^(0+128),w
  5148  0181  0020               	movlb	0	; select bank0
  5149  0182  00B9               	movwf	___ftmul@f2
  5150  0183  0021               	movlb	1	; select bank1
  5151  0184  0841               	movf	(printf@tmpval+1)^(0+128),w
  5152  0185  0020               	movlb	0	; select bank0
  5153  0186  00BA               	movwf	___ftmul@f2+1
  5154  0187  0021               	movlb	1	; select bank1
  5155  0188  0842               	movf	(printf@tmpval+2)^(0+128),w
  5156  0189  0020               	movlb	0	; select bank0
  5157  018A  00BB               	movwf	___ftmul@f2+2
  5158  018B  3189  21FD  3180   	fcall	___ftmul
  5159  018E  0020               	movlb	0	; select bank0
  5160  018F  0836               	movf	?___ftmul,w
  5161  0190  0021               	movlb	1	; select bank1
  5162  0191  00C0               	movwf	printf@tmpval^(0+128)
  5163  0192  0020               	movlb	0	; select bank0
  5164  0193  0837               	movf	?___ftmul+1,w
  5165  0194  0021               	movlb	1	; select bank1
  5166  0195  00C1               	movwf	(printf@tmpval+1)^(0+128)
  5167  0196  0020               	movlb	0	; select bank0
  5168  0197  0838               	movf	?___ftmul+2,w
  5169  0198  0021               	movlb	1	; select bank1
  5170  0199  00C2               	movwf	(printf@tmpval+2)^(0+128)
  5171                           
  5172                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  5173  019A  0840               	movf	printf@tmpval^(0+128),w
  5174  019B  0020               	movlb	0	; select bank0
  5175  019C  00A0               	movwf	___ftge@ff1
  5176  019D  0021               	movlb	1	; select bank1
  5177  019E  0841               	movf	(printf@tmpval+1)^(0+128),w
  5178  019F  0020               	movlb	0	; select bank0
  5179  01A0  00A1               	movwf	___ftge@ff1+1
  5180  01A1  0021               	movlb	1	; select bank1
  5181  01A2  0842               	movf	(printf@tmpval+2)^(0+128),w
  5182  01A3  0020               	movlb	0	; select bank0
  5183  01A4  00A2               	movwf	___ftge@ff1+2
  5184  01A5  3000               	movlw	0
  5185  01A6  00A3               	movwf	___ftge@ff2
  5186  01A7  3080               	movlw	128
  5187  01A8  00A4               	movwf	___ftge@ff2+1
  5188  01A9  303F               	movlw	63
  5189  01AA  00A5               	movwf	___ftge@ff2+2
  5190  01AB  3194  24CA  3180   	fcall	___ftge
  5191  01AE  1803               	btfsc	3,0
  5192  01AF  29B5               	goto	l2754
  5193                           
  5194                           ;doprnt.c: 849: exp--;
  5195  01B0  30FF               	movlw	255
  5196  01B1  0021               	movlb	1	; select bank1
  5197  01B2  07BE               	addwf	printf@exp^(0+128),f
  5198  01B3  30FF               	movlw	255
  5199  01B4  29D0               	goto	L1
  5200  01B5                     l2754:	
  5201                           
  5202                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  5203  01B5  0021               	movlb	1	; select bank1
  5204  01B6  0840               	movf	printf@tmpval^(0+128),w
  5205  01B7  0020               	movlb	0	; select bank0
  5206  01B8  00A0               	movwf	___ftge@ff1
  5207  01B9  0021               	movlb	1	; select bank1
  5208  01BA  0841               	movf	(printf@tmpval+1)^(0+128),w
  5209  01BB  0020               	movlb	0	; select bank0
  5210  01BC  00A1               	movwf	___ftge@ff1+1
  5211  01BD  0021               	movlb	1	; select bank1
  5212  01BE  0842               	movf	(printf@tmpval+2)^(0+128),w
  5213  01BF  0020               	movlb	0	; select bank0
  5214  01C0  00A2               	movwf	___ftge@ff1+2
  5215  01C1  3000               	movlw	0
  5216  01C2  00A3               	movwf	___ftge@ff2
  5217  01C3  3020               	movlw	32
  5218  01C4  00A4               	movwf	___ftge@ff2+1
  5219  01C5  3041               	movlw	65
  5220  01C6  00A5               	movwf	___ftge@ff2+2
  5221  01C7  3194  24CA  3180   	fcall	___ftge
  5222  01CA  1C03               	btfss	3,0
  5223  01CB  29D1               	goto	l374
  5224                           
  5225                           ;doprnt.c: 851: exp++;
  5226  01CC  3001               	movlw	1
  5227  01CD  0021               	movlb	1	; select bank1
  5228  01CE  07BE               	addwf	printf@exp^(0+128),f
  5229  01CF  3000               	movlw	0
  5230  01D0                     L1:	
  5231  01D0  3DBF               	addwfc	(printf@exp+1)^(0+128),f
  5232  01D1                     l374:	
  5233                           
  5234                           ;doprnt.c: 852: }
  5235                           ;doprnt.c: 1112: if(prec <= 12)
  5236  01D1  0021               	movlb	1	; select bank1
  5237  01D2  0839               	movf	(printf@prec+1)^(0+128),w
  5238  01D3  3A80               	xorlw	128
  5239  01D4  0020               	movlb	0	; select bank0
  5240  01D5  00E7               	movwf	??_printf
  5241  01D6  3080               	movlw	128
  5242  01D7  0267               	subwf	??_printf,w
  5243  01D8  1D03               	skipz
  5244  01D9  29DD               	goto	u3635
  5245  01DA  300D               	movlw	13
  5246  01DB  0021               	movlb	1	; select bank1
  5247  01DC  0238               	subwf	printf@prec^(0+128),w
  5248  01DD                     u3635:	
  5249  01DD  1803               	skipnc
  5250  01DE  2A06               	goto	l2760
  5251                           
  5252                           ;doprnt.c: 1113: fval += fround(prec);
  5253  01DF  0021               	movlb	1	; select bank1
  5254  01E0  0838               	movf	printf@prec^(0+128),w
  5255  01E1  3185  25C6  3180   	fcall	_fround
  5256  01E4  0020               	movlb	0	; select bank0
  5257  01E5  0846               	movf	?_fround,w
  5258  01E6  00D4               	movwf	___ftadd@f1
  5259  01E7  0847               	movf	?_fround+1,w
  5260  01E8  00D5               	movwf	___ftadd@f1+1
  5261  01E9  0848               	movf	?_fround+2,w
  5262  01EA  00D6               	movwf	___ftadd@f1+2
  5263  01EB  0021               	movlb	1	; select bank1
  5264  01EC  0844               	movf	printf@fval^(0+128),w
  5265  01ED  0020               	movlb	0	; select bank0
  5266  01EE  00D7               	movwf	___ftadd@f2
  5267  01EF  0021               	movlb	1	; select bank1
  5268  01F0  0845               	movf	(printf@fval+1)^(0+128),w
  5269  01F1  0020               	movlb	0	; select bank0
  5270  01F2  00D8               	movwf	___ftadd@f2+1
  5271  01F3  0021               	movlb	1	; select bank1
  5272  01F4  0846               	movf	(printf@fval+2)^(0+128),w
  5273  01F5  0020               	movlb	0	; select bank0
  5274  01F6  00D9               	movwf	___ftadd@f2+2
  5275  01F7  318A  22B1  3180   	fcall	___ftadd
  5276  01FA  0020               	movlb	0	; select bank0
  5277  01FB  0854               	movf	?___ftadd,w
  5278  01FC  0021               	movlb	1	; select bank1
  5279  01FD  00C4               	movwf	printf@fval^(0+128)
  5280  01FE  0020               	movlb	0	; select bank0
  5281  01FF  0855               	movf	?___ftadd+1,w
  5282  0200  0021               	movlb	1	; select bank1
  5283  0201  00C5               	movwf	(printf@fval+1)^(0+128)
  5284  0202  0020               	movlb	0	; select bank0
  5285  0203  0856               	movf	?___ftadd+2,w
  5286  0204  0021               	movlb	1	; select bank1
  5287  0205  00C6               	movwf	(printf@fval+2)^(0+128)
  5288  0206                     l2760:	
  5289                           
  5290                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5291  0206  0021               	movlb	1	; select bank1
  5292  0207  083F               	movf	(printf@exp+1)^(0+128),w
  5293  0208  3A80               	xorlw	128
  5294  0209  0020               	movlb	0	; select bank0
  5295  020A  00E7               	movwf	??_printf
  5296  020B  3080               	movlw	128
  5297  020C  0267               	subwf	??_printf,w
  5298  020D  1D03               	skipz
  5299  020E  2A12               	goto	u3645
  5300  020F  300A               	movlw	10
  5301  0210  0021               	movlb	1	; select bank1
  5302  0211  023E               	subwf	printf@exp^(0+128),w
  5303  0212                     u3645:	
  5304  0212  1803               	skipnc
  5305  0213  2A3D               	goto	l2768
  5306  0214  0021               	movlb	1	; select bank1
  5307  0215  0846               	movf	(printf@fval+2)^(0+128),w
  5308  0216  0445               	iorwf	(printf@fval+1)^(0+128),w
  5309  0217  0444               	iorwf	printf@fval^(0+128),w
  5310  0218  1903               	skipnz
  5311  0219  2A9C               	goto	l2782
  5312  021A  0844               	movf	printf@fval^(0+128),w
  5313  021B  0020               	movlb	0	; select bank0
  5314  021C  00CF               	movwf	___fttol@f1
  5315  021D  0021               	movlb	1	; select bank1
  5316  021E  0845               	movf	(printf@fval+1)^(0+128),w
  5317  021F  0020               	movlb	0	; select bank0
  5318  0220  00D0               	movwf	___fttol@f1+1
  5319  0221  0021               	movlb	1	; select bank1
  5320  0222  0846               	movf	(printf@fval+2)^(0+128),w
  5321  0223  0020               	movlb	0	; select bank0
  5322  0224  00D1               	movwf	___fttol@f1+2
  5323  0225  3197  2779  3180   	fcall	___fttol
  5324  0228  0020               	movlb	0	; select bank0
  5325  0229  0852               	movf	?___fttol+3,w
  5326  022A  0451               	iorwf	?___fttol+2,w
  5327  022B  0450               	iorwf	?___fttol+1,w
  5328  022C  044F               	iorwf	?___fttol,w
  5329  022D  1D03               	skipz
  5330  022E  2A9C               	goto	l2782
  5331  022F  0021               	movlb	1	; select bank1
  5332  0230  083F               	movf	(printf@exp+1)^(0+128),w
  5333  0231  3A80               	xorlw	128
  5334  0232  0020               	movlb	0	; select bank0
  5335  0233  00E7               	movwf	??_printf
  5336  0234  3080               	movlw	128
  5337  0235  0267               	subwf	??_printf,w
  5338  0236  1D03               	skipz
  5339  0237  2A3B               	goto	u3675
  5340  0238  3002               	movlw	2
  5341  0239  0021               	movlb	1	; select bank1
  5342  023A  023E               	subwf	printf@exp^(0+128),w
  5343  023B                     u3675:	
  5344  023B  1C03               	skipc
  5345  023C  2A9C               	goto	l2782
  5346  023D                     l2768:	
  5347                           
  5348                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  5349  023D  0021               	movlb	1	; select bank1
  5350  023E  0840               	movf	printf@tmpval^(0+128),w
  5351  023F  0020               	movlb	0	; select bank0
  5352  0240  00A0               	movwf	___ftge@ff1
  5353  0241  0021               	movlb	1	; select bank1
  5354  0242  0841               	movf	(printf@tmpval+1)^(0+128),w
  5355  0243  0020               	movlb	0	; select bank0
  5356  0244  00A1               	movwf	___ftge@ff1+1
  5357  0245  0021               	movlb	1	; select bank1
  5358  0246  0842               	movf	(printf@tmpval+2)^(0+128),w
  5359  0247  0020               	movlb	0	; select bank0
  5360  0248  00A2               	movwf	___ftge@ff1+2
  5361  0249  3070               	movlw	112
  5362  024A  00A3               	movwf	___ftge@ff2
  5363  024B  3089               	movlw	137
  5364  024C  00A4               	movwf	___ftge@ff2+1
  5365  024D  3040               	movlw	64
  5366  024E  00A5               	movwf	___ftge@ff2+2
  5367  024F  3194  24CA  3180   	fcall	___ftge
  5368  0252  1803               	btfsc	3,0
  5369  0253  2A56               	goto	l2772
  5370                           
  5371                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5372  0254  30F7               	movlw	247
  5373  0255  2A57               	goto	L2
  5374  0256                     l2772:	
  5375                           ;doprnt.c: 1122: }else{
  5376                           
  5377                           
  5378                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5379  0256  30F8               	movlw	248
  5380  0257                     L2:	
  5381  0257  0021               	movlb	1	; select bank1
  5382  0258  07BE               	addwf	printf@exp^(0+128),f
  5383  0259  30FF               	movlw	255
  5384  025A  3DBF               	addwfc	(printf@exp+1)^(0+128),f
  5385                           
  5386                           ;doprnt.c: 1124: }
  5387                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  5388  025B  083E               	movf	printf@exp^(0+128),w
  5389  025C  318D  25BA  3180   	fcall	_scale
  5390  025F  0020               	movlb	0	; select bank0
  5391  0260  0846               	movf	?_scale,w
  5392  0261  0021               	movlb	1	; select bank1
  5393  0262  00C0               	movwf	printf@tmpval^(0+128)
  5394  0263  0020               	movlb	0	; select bank0
  5395  0264  0847               	movf	?_scale+1,w
  5396  0265  0021               	movlb	1	; select bank1
  5397  0266  00C1               	movwf	(printf@tmpval+1)^(0+128)
  5398  0267  0020               	movlb	0	; select bank0
  5399  0268  0848               	movf	?_scale+2,w
  5400  0269  0021               	movlb	1	; select bank1
  5401  026A  00C2               	movwf	(printf@tmpval+2)^(0+128)
  5402                           
  5403                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5404  026B  0844               	movf	printf@fval^(0+128),w
  5405  026C  0020               	movlb	0	; select bank0
  5406  026D  00A0               	movwf	__tdiv_to_l_@f1
  5407  026E  0021               	movlb	1	; select bank1
  5408  026F  0845               	movf	(printf@fval+1)^(0+128),w
  5409  0270  0020               	movlb	0	; select bank0
  5410  0271  00A1               	movwf	__tdiv_to_l_@f1+1
  5411  0272  0021               	movlb	1	; select bank1
  5412  0273  0846               	movf	(printf@fval+2)^(0+128),w
  5413  0274  0020               	movlb	0	; select bank0
  5414  0275  00A2               	movwf	__tdiv_to_l_@f1+2
  5415  0276  0021               	movlb	1	; select bank1
  5416  0277  0840               	movf	printf@tmpval^(0+128),w
  5417  0278  0020               	movlb	0	; select bank0
  5418  0279  00A3               	movwf	__tdiv_to_l_@f2
  5419  027A  0021               	movlb	1	; select bank1
  5420  027B  0841               	movf	(printf@tmpval+1)^(0+128),w
  5421  027C  0020               	movlb	0	; select bank0
  5422  027D  00A4               	movwf	__tdiv_to_l_@f2+1
  5423  027E  0021               	movlb	1	; select bank1
  5424  027F  0842               	movf	(printf@tmpval+2)^(0+128),w
  5425  0280  0020               	movlb	0	; select bank0
  5426  0281  00A5               	movwf	__tdiv_to_l_@f2+2
  5427  0282  3187  272C  3180   	fcall	__tdiv_to_l_
  5428  0285  0020               	movlb	0	; select bank0
  5429  0286  0823               	movf	?__tdiv_to_l_+3,w
  5430  0287  0021               	movlb	1	; select bank1
  5431  0288  00BD               	movwf	(printf@val+3)^(0+128)
  5432  0289  0020               	movlb	0	; select bank0
  5433  028A  0822               	movf	?__tdiv_to_l_+2,w
  5434  028B  0021               	movlb	1	; select bank1
  5435  028C  00BC               	movwf	(printf@val+2)^(0+128)
  5436  028D  0020               	movlb	0	; select bank0
  5437  028E  0821               	movf	?__tdiv_to_l_+1,w
  5438  028F  0021               	movlb	1	; select bank1
  5439  0290  00BB               	movwf	(printf@val+1)^(0+128)
  5440  0291  0020               	movlb	0	; select bank0
  5441  0292  0820               	movf	?__tdiv_to_l_,w
  5442  0293  0021               	movlb	1	; select bank1
  5443  0294  00BA               	movwf	printf@val^(0+128)
  5444                           
  5445                           ;doprnt.c: 1129: fval = 0.0;
  5446  0295  3000               	movlw	0
  5447  0296  00C4               	movwf	printf@fval^(0+128)
  5448  0297  3000               	movlw	0
  5449  0298  00C5               	movwf	(printf@fval+1)^(0+128)
  5450  0299  3000               	movlw	0
  5451  029A  00C6               	movwf	(printf@fval+2)^(0+128)
  5452                           
  5453                           ;doprnt.c: 1130: } else {
  5454  029B  2AF1               	goto	l2786
  5455  029C                     l2782:	
  5456                           
  5457                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5458  029C  0021               	movlb	1	; select bank1
  5459  029D  0844               	movf	printf@fval^(0+128),w
  5460  029E  0020               	movlb	0	; select bank0
  5461  029F  00CF               	movwf	___fttol@f1
  5462  02A0  0021               	movlb	1	; select bank1
  5463  02A1  0845               	movf	(printf@fval+1)^(0+128),w
  5464  02A2  0020               	movlb	0	; select bank0
  5465  02A3  00D0               	movwf	___fttol@f1+1
  5466  02A4  0021               	movlb	1	; select bank1
  5467  02A5  0846               	movf	(printf@fval+2)^(0+128),w
  5468  02A6  0020               	movlb	0	; select bank0
  5469  02A7  00D1               	movwf	___fttol@f1+2
  5470  02A8  3197  2779  3180   	fcall	___fttol
  5471  02AB  0020               	movlb	0	; select bank0
  5472  02AC  0852               	movf	?___fttol+3,w
  5473  02AD  0021               	movlb	1	; select bank1
  5474  02AE  00BD               	movwf	(printf@val+3)^(0+128)
  5475  02AF  0020               	movlb	0	; select bank0
  5476  02B0  0851               	movf	?___fttol+2,w
  5477  02B1  0021               	movlb	1	; select bank1
  5478  02B2  00BC               	movwf	(printf@val+2)^(0+128)
  5479  02B3  0020               	movlb	0	; select bank0
  5480  02B4  0850               	movf	?___fttol+1,w
  5481  02B5  0021               	movlb	1	; select bank1
  5482  02B6  00BB               	movwf	(printf@val+1)^(0+128)
  5483  02B7  0020               	movlb	0	; select bank0
  5484  02B8  084F               	movf	?___fttol,w
  5485  02B9  0021               	movlb	1	; select bank1
  5486  02BA  00BA               	movwf	printf@val^(0+128)
  5487                           
  5488                           ;doprnt.c: 1132: fval -= (double)val;
  5489  02BB  083D               	movf	(printf@val+3)^(0+128),w
  5490  02BC  0020               	movlb	0	; select bank0
  5491  02BD  00AB               	movwf	___lltoft@c+3
  5492  02BE  0021               	movlb	1	; select bank1
  5493  02BF  083C               	movf	(printf@val+2)^(0+128),w
  5494  02C0  0020               	movlb	0	; select bank0
  5495  02C1  00AA               	movwf	___lltoft@c+2
  5496  02C2  0021               	movlb	1	; select bank1
  5497  02C3  083B               	movf	(printf@val+1)^(0+128),w
  5498  02C4  0020               	movlb	0	; select bank0
  5499  02C5  00A9               	movwf	___lltoft@c+1
  5500  02C6  0021               	movlb	1	; select bank1
  5501  02C7  083A               	movf	printf@val^(0+128),w
  5502  02C8  0020               	movlb	0	; select bank0
  5503  02C9  00A8               	movwf	___lltoft@c
  5504  02CA  3188  2010  3180   	fcall	___lltoft
  5505  02CD  0020               	movlb	0	; select bank0
  5506  02CE  0828               	movf	?___lltoft,w
  5507  02CF  00E1               	movwf	___ftsub@f2
  5508  02D0  0829               	movf	?___lltoft+1,w
  5509  02D1  00E2               	movwf	___ftsub@f2+1
  5510  02D2  082A               	movf	?___lltoft+2,w
  5511  02D3  00E3               	movwf	___ftsub@f2+2
  5512  02D4  0021               	movlb	1	; select bank1
  5513  02D5  0844               	movf	printf@fval^(0+128),w
  5514  02D6  0020               	movlb	0	; select bank0
  5515  02D7  00E4               	movwf	___ftsub@f1
  5516  02D8  0021               	movlb	1	; select bank1
  5517  02D9  0845               	movf	(printf@fval+1)^(0+128),w
  5518  02DA  0020               	movlb	0	; select bank0
  5519  02DB  00E5               	movwf	___ftsub@f1+1
  5520  02DC  0021               	movlb	1	; select bank1
  5521  02DD  0846               	movf	(printf@fval+2)^(0+128),w
  5522  02DE  0020               	movlb	0	; select bank0
  5523  02DF  00E6               	movwf	___ftsub@f1+2
  5524  02E0  3194  241D  3180   	fcall	___ftsub
  5525  02E3  0020               	movlb	0	; select bank0
  5526  02E4  0861               	movf	?___ftsub,w
  5527  02E5  0021               	movlb	1	; select bank1
  5528  02E6  00C4               	movwf	printf@fval^(0+128)
  5529  02E7  0020               	movlb	0	; select bank0
  5530  02E8  0862               	movf	?___ftsub+1,w
  5531  02E9  0021               	movlb	1	; select bank1
  5532  02EA  00C5               	movwf	(printf@fval+1)^(0+128)
  5533  02EB  0020               	movlb	0	; select bank0
  5534  02EC  0863               	movf	?___ftsub+2,w
  5535  02ED  0021               	movlb	1	; select bank1
  5536  02EE  00C6               	movwf	(printf@fval+2)^(0+128)
  5537                           
  5538                           ;doprnt.c: 1133: exp = 0;
  5539  02EF  01BE               	clrf	printf@exp^(0+128)
  5540  02F0  01BF               	clrf	(printf@exp+1)^(0+128)
  5541  02F1                     l2786:	
  5542                           
  5543                           ;doprnt.c: 1134: }
  5544                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5545  02F1  01C7               	clrf	printf@c^(0+128)
  5546  02F2  0AC7               	incf	printf@c^(0+128),f
  5547  02F3  300A               	movlw	10
  5548  02F4  0647               	xorwf	printf@c^(0+128),w
  5549  02F5  1903               	btfsc	3,2
  5550  02F6  2B2E               	goto	l2798
  5551  02F7                     l2792:	
  5552                           
  5553                           ;doprnt.c: 1137: if(val < dpowers[c])
  5554  02F7  0847               	movf	printf@c^(0+128),w
  5555  02F8  0020               	movlb	0	; select bank0
  5556  02F9  00E7               	movwf	??_printf
  5557  02FA  01E8               	clrf	??_printf+1
  5558  02FB  35E7               	lslf	??_printf,f
  5559  02FC  0DE8               	rlf	??_printf+1,f
  5560  02FD  35E7               	lslf	??_printf,f
  5561  02FE  0DE8               	rlf	??_printf+1,f
  5562  02FF  3000               	movlw	low (_dpowers| (0+32768))
  5563  0300  0767               	addwf	??_printf,w
  5564  0301  0084               	movwf	4
  5565  0302  3090               	movlw	high (_dpowers| (0+32768))
  5566  0303  3D68               	addwfc	??_printf+1,w
  5567  0304  0085               	movwf	5
  5568  0305  3F00               	moviw [0]fsr0
  5569  0306  00E9               	movwf	??_printf+2
  5570  0307  3F01               	moviw [1]fsr0
  5571  0308  00EA               	movwf	??_printf+3
  5572  0309  3F02               	moviw [2]fsr0
  5573  030A  00EB               	movwf	??_printf+4
  5574  030B  3F03               	moviw [3]fsr0
  5575  030C  00EC               	movwf	??_printf+5
  5576  030D  086C               	movf	??_printf+5,w
  5577  030E  0021               	movlb	1	; select bank1
  5578  030F  023D               	subwf	(printf@val+3)^(0+128),w
  5579  0310  1D03               	skipz
  5580  0311  2B22               	goto	u3705
  5581  0312  0020               	movlb	0	; select bank0
  5582  0313  086B               	movf	??_printf+4,w
  5583  0314  0021               	movlb	1	; select bank1
  5584  0315  023C               	subwf	(printf@val+2)^(0+128),w
  5585  0316  1D03               	skipz
  5586  0317  2B22               	goto	u3705
  5587  0318  0020               	movlb	0	; select bank0
  5588  0319  086A               	movf	??_printf+3,w
  5589  031A  0021               	movlb	1	; select bank1
  5590  031B  023B               	subwf	(printf@val+1)^(0+128),w
  5591  031C  1D03               	skipz
  5592  031D  2B22               	goto	u3705
  5593  031E  0020               	movlb	0	; select bank0
  5594  031F  0869               	movf	??_printf+2,w
  5595  0320  0021               	movlb	1	; select bank1
  5596  0321  023A               	subwf	printf@val^(0+128),w
  5597  0322                     u3705:	
  5598  0322  1C03               	btfss	3,0
  5599  0323  2B2E               	goto	l2798
  5600                           
  5601                           ;doprnt.c: 1138: break;
  5602  0324  3001               	movlw	1
  5603  0325  0020               	movlb	0	; select bank0
  5604  0326  00E7               	movwf	??_printf
  5605  0327  0867               	movf	??_printf,w
  5606  0328  0021               	movlb	1	; select bank1
  5607  0329  07C7               	addwf	printf@c^(0+128),f
  5608  032A  300A               	movlw	10
  5609  032B  0647               	xorwf	printf@c^(0+128),w
  5610  032C  1D03               	btfss	3,2
  5611  032D  2AF7               	goto	l2792
  5612  032E                     l2798:	
  5613                           
  5614                           ;doprnt.c: 1175: {
  5615                           ;doprnt.c: 1188: if(flag & 0x03)
  5616  032E  3003               	movlw	3
  5617  032F  0535               	andwf	printf@flag^(0+128),w
  5618  0330  0020               	movlb	0	; select bank0
  5619  0331  00E7               	movwf	??_printf
  5620  0332  3000               	movlw	0
  5621  0333  0021               	movlb	1	; select bank1
  5622  0334  0536               	andwf	(printf@flag+1)^(0+128),w
  5623  0335  0020               	movlb	0	; select bank0
  5624  0336  00E8               	movwf	??_printf+1
  5625  0337  0867               	movf	??_printf,w
  5626  0338  0468               	iorwf	??_printf+1,w
  5627  0339  1903               	btfsc	3,2
  5628  033A  2B3F               	goto	l2808
  5629                           
  5630                           ;doprnt.c: 1190: (putch('-') );
  5631  033B  302D               	movlw	45
  5632  033C                     L5:	
  5633  033C  3192  2275  3180   	fcall	_putch
  5634  033F                     l2808:	
  5635                           ;doprnt.c: 1195: }
  5636                           ;doprnt.c: 1196: while(c--) {
  5637                           
  5638  033F  30FF               	movlw	255
  5639  0340  0020               	movlb	0	; select bank0
  5640  0341  00E7               	movwf	??_printf
  5641  0342  0867               	movf	??_printf,w
  5642  0343  0021               	movlb	1	; select bank1
  5643  0344  07C7               	addwf	printf@c^(0+128),f
  5644  0345  0A47               	incf	printf@c^(0+128),w
  5645  0346  1903               	btfsc	3,2
  5646  0347  2BBA               	goto	l2814
  5647                           
  5648                           ;doprnt.c: 1200: {
  5649                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  5650  0348  0021               	movlb	1	; select bank1
  5651  0349  0847               	movf	printf@c^(0+128),w
  5652  034A  0020               	movlb	0	; select bank0
  5653  034B  00E7               	movwf	??_printf
  5654  034C  01E8               	clrf	??_printf+1
  5655  034D  35E7               	lslf	??_printf,f
  5656  034E  0DE8               	rlf	??_printf+1,f
  5657  034F  35E7               	lslf	??_printf,f
  5658  0350  0DE8               	rlf	??_printf+1,f
  5659  0351  3000               	movlw	low (_dpowers| (0+32768))
  5660  0352  0767               	addwf	??_printf,w
  5661  0353  0084               	movwf	4
  5662  0354  3090               	movlw	high (_dpowers| (0+32768))
  5663  0355  3D68               	addwfc	??_printf+1,w
  5664  0356  0085               	movwf	5
  5665  0357  3F00               	moviw [0]fsr0
  5666  0358  00A0               	movwf	___lldiv@divisor
  5667  0359  3F01               	moviw [1]fsr0
  5668  035A  00A1               	movwf	___lldiv@divisor+1
  5669  035B  3F02               	moviw [2]fsr0
  5670  035C  00A2               	movwf	___lldiv@divisor+2
  5671  035D  3F03               	moviw [3]fsr0
  5672  035E  00A3               	movwf	___lldiv@divisor+3
  5673  035F  0021               	movlb	1	; select bank1
  5674  0360  083D               	movf	(printf@val+3)^(0+128),w
  5675  0361  0020               	movlb	0	; select bank0
  5676  0362  00A7               	movwf	___lldiv@dividend+3
  5677  0363  0021               	movlb	1	; select bank1
  5678  0364  083C               	movf	(printf@val+2)^(0+128),w
  5679  0365  0020               	movlb	0	; select bank0
  5680  0366  00A6               	movwf	___lldiv@dividend+2
  5681  0367  0021               	movlb	1	; select bank1
  5682  0368  083B               	movf	(printf@val+1)^(0+128),w
  5683  0369  0020               	movlb	0	; select bank0
  5684  036A  00A5               	movwf	___lldiv@dividend+1
  5685  036B  0021               	movlb	1	; select bank1
  5686  036C  083A               	movf	printf@val^(0+128),w
  5687  036D  0020               	movlb	0	; select bank0
  5688  036E  00A4               	movwf	___lldiv@dividend
  5689  036F  3196  26C1  3180   	fcall	___lldiv
  5690  0372  0020               	movlb	0	; select bank0
  5691  0373  0823               	movf	?___lldiv+3,w
  5692  0374  0021               	movlb	1	; select bank1
  5693  0375  00C3               	movwf	(printf@tmpval+3)^(0+128)
  5694  0376  0020               	movlb	0	; select bank0
  5695  0377  0822               	movf	?___lldiv+2,w
  5696  0378  0021               	movlb	1	; select bank1
  5697  0379  00C2               	movwf	(printf@tmpval+2)^(0+128)
  5698  037A  0020               	movlb	0	; select bank0
  5699  037B  0821               	movf	?___lldiv+1,w
  5700  037C  0021               	movlb	1	; select bank1
  5701  037D  00C1               	movwf	(printf@tmpval+1)^(0+128)
  5702  037E  0020               	movlb	0	; select bank0
  5703  037F  0820               	movf	?___lldiv,w
  5704  0380  0021               	movlb	1	; select bank1
  5705  0381  00C0               	movwf	printf@tmpval^(0+128)
  5706                           
  5707                           ;doprnt.c: 1202: tmpval.vd %= 10;
  5708  0382  3000               	movlw	0
  5709  0383  0020               	movlb	0	; select bank0
  5710  0384  00B1               	movwf	___llmod@divisor+3
  5711  0385  3000               	movlw	0
  5712  0386  00B0               	movwf	___llmod@divisor+2
  5713  0387  3000               	movlw	0
  5714  0388  00AF               	movwf	___llmod@divisor+1
  5715  0389  300A               	movlw	10
  5716  038A  00AE               	movwf	___llmod@divisor
  5717  038B  0021               	movlb	1	; select bank1
  5718  038C  0843               	movf	(printf@tmpval+3)^(0+128),w
  5719  038D  0020               	movlb	0	; select bank0
  5720  038E  00B5               	movwf	___llmod@dividend+3
  5721  038F  0021               	movlb	1	; select bank1
  5722  0390  0842               	movf	(printf@tmpval+2)^(0+128),w
  5723  0391  0020               	movlb	0	; select bank0
  5724  0392  00B4               	movwf	___llmod@dividend+2
  5725  0393  0021               	movlb	1	; select bank1
  5726  0394  0841               	movf	(printf@tmpval+1)^(0+128),w
  5727  0395  0020               	movlb	0	; select bank0
  5728  0396  00B3               	movwf	___llmod@dividend+1
  5729  0397  0021               	movlb	1	; select bank1
  5730  0398  0840               	movf	printf@tmpval^(0+128),w
  5731  0399  0020               	movlb	0	; select bank0
  5732  039A  00B2               	movwf	___llmod@dividend
  5733  039B  3195  2548  3180   	fcall	___llmod
  5734  039E  0020               	movlb	0	; select bank0
  5735  039F  0831               	movf	?___llmod+3,w
  5736  03A0  0021               	movlb	1	; select bank1
  5737  03A1  00C3               	movwf	(printf@tmpval+3)^(0+128)
  5738  03A2  0020               	movlb	0	; select bank0
  5739  03A3  0830               	movf	?___llmod+2,w
  5740  03A4  0021               	movlb	1	; select bank1
  5741  03A5  00C2               	movwf	(printf@tmpval+2)^(0+128)
  5742  03A6  0020               	movlb	0	; select bank0
  5743  03A7  082F               	movf	?___llmod+1,w
  5744  03A8  0021               	movlb	1	; select bank1
  5745  03A9  00C1               	movwf	(printf@tmpval+1)^(0+128)
  5746  03AA  0020               	movlb	0	; select bank0
  5747  03AB  082E               	movf	?___llmod,w
  5748  03AC  0021               	movlb	1	; select bank1
  5749  03AD  00C0               	movwf	printf@tmpval^(0+128)
  5750                           
  5751                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  5752  03AE  0840               	movf	printf@tmpval^(0+128),w
  5753  03AF  3E30               	addlw	48
  5754  03B0  2B3C               	goto	L5
  5755  03B1                     l2810:	
  5756                           ;doprnt.c: 1204: }
  5757                           ;doprnt.c: 1206: }
  5758                           ;doprnt.c: 1207: while(exp > 0) {
  5759                           
  5760                           
  5761                           ;doprnt.c: 1208: (putch('0') );
  5762  03B1  3030               	movlw	48
  5763  03B2  3192  2275  3180   	fcall	_putch
  5764                           
  5765                           ;doprnt.c: 1209: exp--;
  5766  03B5  30FF               	movlw	255
  5767  03B6  0021               	movlb	1	; select bank1
  5768  03B7  07BE               	addwf	printf@exp^(0+128),f
  5769  03B8  30FF               	movlw	255
  5770  03B9  3DBF               	addwfc	(printf@exp+1)^(0+128),f
  5771  03BA                     l2814:	
  5772  03BA  083F               	movf	(printf@exp+1)^(0+128),w
  5773  03BB  3A80               	xorlw	128
  5774  03BC  0020               	movlb	0	; select bank0
  5775  03BD  00E7               	movwf	??_printf
  5776  03BE  3080               	movlw	128
  5777  03BF  0267               	subwf	??_printf,w
  5778  03C0  1D03               	skipz
  5779  03C1  2BC5               	goto	u3745
  5780  03C2  3001               	movlw	1
  5781  03C3  0021               	movlb	1	; select bank1
  5782  03C4  023E               	subwf	printf@exp^(0+128),w
  5783  03C5                     u3745:	
  5784  03C5  1803               	skipnc
  5785  03C6  2BB1               	goto	l2810
  5786                           
  5787                           ;doprnt.c: 1210: }
  5788                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5789  03C7  0021               	movlb	1	; select bank1
  5790  03C8  0839               	movf	(printf@prec+1)^(0+128),w
  5791  03C9  3A80               	xorlw	128
  5792  03CA  0020               	movlb	0	; select bank0
  5793  03CB  00E7               	movwf	??_printf
  5794  03CC  3080               	movlw	128
  5795  03CD  0267               	subwf	??_printf,w
  5796  03CE  1D03               	skipz
  5797  03CF  2BD3               	goto	u3755
  5798  03D0  3009               	movlw	9
  5799  03D1  0021               	movlb	1	; select bank1
  5800  03D2  0238               	subwf	printf@prec^(0+128),w
  5801  03D3                     u3755:	
  5802  03D3  1C03               	skipc
  5803  03D4  2BD7               	goto	l2820
  5804                           
  5805                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5806  03D5  3008               	movlw	8
  5807  03D6  2BD9               	goto	L3
  5808  03D7                     l2820:	
  5809                           
  5810                           ;doprnt.c: 1213: else
  5811                           ;doprnt.c: 1214: c = prec;
  5812  03D7  0021               	movlb	1	; select bank1
  5813  03D8  0838               	movf	printf@prec^(0+128),w
  5814  03D9                     L3:	
  5815  03D9  0020               	movlb	0	; select bank0
  5816  03DA  00E7               	movwf	??_printf
  5817  03DB  0867               	movf	??_printf,w
  5818  03DC  0021               	movlb	1	; select bank1
  5819  03DD  00C7               	movwf	printf@c^(0+128)
  5820                           
  5821                           ;doprnt.c: 1215: prec -= c;
  5822  03DE  0847               	movf	printf@c^(0+128),w
  5823  03DF  0020               	movlb	0	; select bank0
  5824  03E0  00E7               	movwf	??_printf
  5825  03E1  01E8               	clrf	??_printf+1
  5826  03E2  1BE7               	btfsc	??_printf,7
  5827  03E3  03E8               	decf	??_printf+1,f
  5828  03E4  0867               	movf	??_printf,w
  5829  03E5  0021               	movlb	1	; select bank1
  5830  03E6  02B8               	subwf	printf@prec^(0+128),f
  5831  03E7  0020               	movlb	0	; select bank0
  5832  03E8  0868               	movf	??_printf+1,w
  5833  03E9  0021               	movlb	1	; select bank1
  5834  03EA  3BB9               	subwfb	(printf@prec+1)^(0+128),f
  5835                           
  5836                           ;doprnt.c: 1219: if(c)
  5837  03EB  0847               	movf	printf@c^(0+128),w
  5838  03EC  1903               	btfsc	3,2
  5839  03ED  2BF2               	goto	l2826
  5840                           
  5841                           ;doprnt.c: 1221: (putch('.') );
  5842  03EE  302E               	movlw	46
  5843  03EF  3192  2275  3180   	fcall	_putch
  5844  03F2                     l2826:	
  5845                           
  5846                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5847  03F2  0021               	movlb	1	; select bank1
  5848  03F3  0847               	movf	printf@c^(0+128),w
  5849  03F4  318D  25BA  3180   	fcall	_scale
  5850  03F7  0020               	movlb	0	; select bank0
  5851  03F8  0846               	movf	?_scale,w
  5852  03F9  0021               	movlb	1	; select bank1
  5853  03FA  00B2               	movwf	_printf$1275^(0+128)
  5854  03FB  0020               	movlb	0	; select bank0
  5855  03FC  0847               	movf	?_scale+1,w
  5856  03FD  0021               	movlb	1	; select bank1
  5857  03FE  00B3               	movwf	(_printf$1275+1)^(0+128)
  5858  03FF  0020               	movlb	0	; select bank0
  5859  0400  0848               	movf	?_scale+2,w
  5860  0401  0021               	movlb	1	; select bank1
  5861  0402  00B4               	movwf	(_printf$1275+2)^(0+128)
  5862                           
  5863                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5864  0403  0832               	movf	_printf$1275^(0+128),w
  5865  0404  0020               	movlb	0	; select bank0
  5866  0405  00B9               	movwf	___ftmul@f2
  5867  0406  0021               	movlb	1	; select bank1
  5868  0407  0833               	movf	(_printf$1275+1)^(0+128),w
  5869  0408  0020               	movlb	0	; select bank0
  5870  0409  00BA               	movwf	___ftmul@f2+1
  5871  040A  0021               	movlb	1	; select bank1
  5872  040B  0834               	movf	(_printf$1275+2)^(0+128),w
  5873  040C  0020               	movlb	0	; select bank0
  5874  040D  00BB               	movwf	___ftmul@f2+2
  5875  040E  0021               	movlb	1	; select bank1
  5876  040F  0844               	movf	printf@fval^(0+128),w
  5877  0410  0020               	movlb	0	; select bank0
  5878  0411  00B6               	movwf	___ftmul@f1
  5879  0412  0021               	movlb	1	; select bank1
  5880  0413  0845               	movf	(printf@fval+1)^(0+128),w
  5881  0414  0020               	movlb	0	; select bank0
  5882  0415  00B7               	movwf	___ftmul@f1+1
  5883  0416  0021               	movlb	1	; select bank1
  5884  0417  0846               	movf	(printf@fval+2)^(0+128),w
  5885  0418  0020               	movlb	0	; select bank0
  5886  0419  00B8               	movwf	___ftmul@f1+2
  5887  041A  3189  21FD  3180   	fcall	___ftmul
  5888  041D  0020               	movlb	0	; select bank0
  5889  041E  0836               	movf	?___ftmul,w
  5890  041F  00CF               	movwf	___fttol@f1
  5891  0420  0837               	movf	?___ftmul+1,w
  5892  0421  00D0               	movwf	___fttol@f1+1
  5893  0422  0838               	movf	?___ftmul+2,w
  5894  0423  00D1               	movwf	___fttol@f1+2
  5895  0424  3197  2779  3180   	fcall	___fttol
  5896  0427  0020               	movlb	0	; select bank0
  5897  0428  0852               	movf	?___fttol+3,w
  5898  0429  0021               	movlb	1	; select bank1
  5899  042A  00BD               	movwf	(printf@val+3)^(0+128)
  5900  042B  0020               	movlb	0	; select bank0
  5901  042C  0851               	movf	?___fttol+2,w
  5902  042D  0021               	movlb	1	; select bank1
  5903  042E  00BC               	movwf	(printf@val+2)^(0+128)
  5904  042F  0020               	movlb	0	; select bank0
  5905  0430  0850               	movf	?___fttol+1,w
  5906  0431  0021               	movlb	1	; select bank1
  5907  0432  00BB               	movwf	(printf@val+1)^(0+128)
  5908  0433  0020               	movlb	0	; select bank0
  5909  0434  084F               	movf	?___fttol,w
  5910  0435                     L4:	
  5911  0435  0021               	movlb	1	; select bank1
  5912  0436  00BA               	movwf	printf@val^(0+128)
  5913  0437  30FF               	movlw	255
  5914  0438  0020               	movlb	0	; select bank0
  5915  0439  00E7               	movwf	??_printf
  5916  043A  0867               	movf	??_printf,w
  5917  043B  0021               	movlb	1	; select bank1
  5918  043C  07C7               	addwf	printf@c^(0+128),f
  5919  043D  0A47               	incf	printf@c^(0+128),w
  5920  043E  1903               	btfsc	3,2
  5921  043F  2CEC               	goto	l2844
  5922                           
  5923                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  5924                           
  5925                           ;doprnt.c: 1228: while(c--) {
  5926  0440  0847               	movf	printf@c^(0+128),w
  5927  0441  0020               	movlb	0	; select bank0
  5928  0442  00E7               	movwf	??_printf
  5929  0443  01E8               	clrf	??_printf+1
  5930  0444  35E7               	lslf	??_printf,f
  5931  0445  0DE8               	rlf	??_printf+1,f
  5932  0446  35E7               	lslf	??_printf,f
  5933  0447  0DE8               	rlf	??_printf+1,f
  5934  0448  3000               	movlw	low (_dpowers| (0+32768))
  5935  0449  0767               	addwf	??_printf,w
  5936  044A  0084               	movwf	4
  5937  044B  3090               	movlw	high (_dpowers| (0+32768))
  5938  044C  3D68               	addwfc	??_printf+1,w
  5939  044D  0085               	movwf	5
  5940  044E  3F00               	moviw [0]fsr0
  5941  044F  00A0               	movwf	___lldiv@divisor
  5942  0450  3F01               	moviw [1]fsr0
  5943  0451  00A1               	movwf	___lldiv@divisor+1
  5944  0452  3F02               	moviw [2]fsr0
  5945  0453  00A2               	movwf	___lldiv@divisor+2
  5946  0454  3F03               	moviw [3]fsr0
  5947  0455  00A3               	movwf	___lldiv@divisor+3
  5948  0456  0021               	movlb	1	; select bank1
  5949  0457  083D               	movf	(printf@val+3)^(0+128),w
  5950  0458  0020               	movlb	0	; select bank0
  5951  0459  00A7               	movwf	___lldiv@dividend+3
  5952  045A  0021               	movlb	1	; select bank1
  5953  045B  083C               	movf	(printf@val+2)^(0+128),w
  5954  045C  0020               	movlb	0	; select bank0
  5955  045D  00A6               	movwf	___lldiv@dividend+2
  5956  045E  0021               	movlb	1	; select bank1
  5957  045F  083B               	movf	(printf@val+1)^(0+128),w
  5958  0460  0020               	movlb	0	; select bank0
  5959  0461  00A5               	movwf	___lldiv@dividend+1
  5960  0462  0021               	movlb	1	; select bank1
  5961  0463  083A               	movf	printf@val^(0+128),w
  5962  0464  0020               	movlb	0	; select bank0
  5963  0465  00A4               	movwf	___lldiv@dividend
  5964  0466  3196  26C1  3180   	fcall	___lldiv
  5965  0469  0020               	movlb	0	; select bank0
  5966  046A  0823               	movf	?___lldiv+3,w
  5967  046B  0021               	movlb	1	; select bank1
  5968  046C  00C3               	movwf	(printf@tmpval+3)^(0+128)
  5969  046D  0020               	movlb	0	; select bank0
  5970  046E  0822               	movf	?___lldiv+2,w
  5971  046F  0021               	movlb	1	; select bank1
  5972  0470  00C2               	movwf	(printf@tmpval+2)^(0+128)
  5973  0471  0020               	movlb	0	; select bank0
  5974  0472  0821               	movf	?___lldiv+1,w
  5975  0473  0021               	movlb	1	; select bank1
  5976  0474  00C1               	movwf	(printf@tmpval+1)^(0+128)
  5977  0475  0020               	movlb	0	; select bank0
  5978  0476  0820               	movf	?___lldiv,w
  5979  0477  0021               	movlb	1	; select bank1
  5980  0478  00C0               	movwf	printf@tmpval^(0+128)
  5981                           
  5982                           ;doprnt.c: 1230: tmpval.vd %= 10;
  5983  0479  3000               	movlw	0
  5984  047A  0020               	movlb	0	; select bank0
  5985  047B  00B1               	movwf	___llmod@divisor+3
  5986  047C  3000               	movlw	0
  5987  047D  00B0               	movwf	___llmod@divisor+2
  5988  047E  3000               	movlw	0
  5989  047F  00AF               	movwf	___llmod@divisor+1
  5990  0480  300A               	movlw	10
  5991  0481  00AE               	movwf	___llmod@divisor
  5992  0482  0021               	movlb	1	; select bank1
  5993  0483  0843               	movf	(printf@tmpval+3)^(0+128),w
  5994  0484  0020               	movlb	0	; select bank0
  5995  0485  00B5               	movwf	___llmod@dividend+3
  5996  0486  0021               	movlb	1	; select bank1
  5997  0487  0842               	movf	(printf@tmpval+2)^(0+128),w
  5998  0488  0020               	movlb	0	; select bank0
  5999  0489  00B4               	movwf	___llmod@dividend+2
  6000  048A  0021               	movlb	1	; select bank1
  6001  048B  0841               	movf	(printf@tmpval+1)^(0+128),w
  6002  048C  0020               	movlb	0	; select bank0
  6003  048D  00B3               	movwf	___llmod@dividend+1
  6004  048E  0021               	movlb	1	; select bank1
  6005  048F  0840               	movf	printf@tmpval^(0+128),w
  6006  0490  0020               	movlb	0	; select bank0
  6007  0491  00B2               	movwf	___llmod@dividend
  6008  0492  3195  2548  3180   	fcall	___llmod
  6009  0495  0020               	movlb	0	; select bank0
  6010  0496  0831               	movf	?___llmod+3,w
  6011  0497  0021               	movlb	1	; select bank1
  6012  0498  00C3               	movwf	(printf@tmpval+3)^(0+128)
  6013  0499  0020               	movlb	0	; select bank0
  6014  049A  0830               	movf	?___llmod+2,w
  6015  049B  0021               	movlb	1	; select bank1
  6016  049C  00C2               	movwf	(printf@tmpval+2)^(0+128)
  6017  049D  0020               	movlb	0	; select bank0
  6018  049E  082F               	movf	?___llmod+1,w
  6019  049F  0021               	movlb	1	; select bank1
  6020  04A0  00C1               	movwf	(printf@tmpval+1)^(0+128)
  6021  04A1  0020               	movlb	0	; select bank0
  6022  04A2  082E               	movf	?___llmod,w
  6023  04A3  0021               	movlb	1	; select bank1
  6024  04A4  00C0               	movwf	printf@tmpval^(0+128)
  6025                           
  6026                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  6027  04A5  0840               	movf	printf@tmpval^(0+128),w
  6028  04A6  3E30               	addlw	48
  6029  04A7  3192  2275  3180   	fcall	_putch
  6030                           
  6031                           ;doprnt.c: 1232: val %= dpowers[c];
  6032  04AA  0021               	movlb	1	; select bank1
  6033  04AB  0847               	movf	printf@c^(0+128),w
  6034  04AC  0020               	movlb	0	; select bank0
  6035  04AD  00E7               	movwf	??_printf
  6036  04AE  01E8               	clrf	??_printf+1
  6037  04AF  35E7               	lslf	??_printf,f
  6038  04B0  0DE8               	rlf	??_printf+1,f
  6039  04B1  35E7               	lslf	??_printf,f
  6040  04B2  0DE8               	rlf	??_printf+1,f
  6041  04B3  3000               	movlw	low (_dpowers| (0+32768))
  6042  04B4  0767               	addwf	??_printf,w
  6043  04B5  0084               	movwf	4
  6044  04B6  3090               	movlw	high (_dpowers| (0+32768))
  6045  04B7  3D68               	addwfc	??_printf+1,w
  6046  04B8  0085               	movwf	5
  6047  04B9  3F00               	moviw [0]fsr0
  6048  04BA  00AE               	movwf	___llmod@divisor
  6049  04BB  3F01               	moviw [1]fsr0
  6050  04BC  00AF               	movwf	___llmod@divisor+1
  6051  04BD  3F02               	moviw [2]fsr0
  6052  04BE  00B0               	movwf	___llmod@divisor+2
  6053  04BF  3F03               	moviw [3]fsr0
  6054  04C0  00B1               	movwf	___llmod@divisor+3
  6055  04C1  0021               	movlb	1	; select bank1
  6056  04C2  083D               	movf	(printf@val+3)^(0+128),w
  6057  04C3  0020               	movlb	0	; select bank0
  6058  04C4  00B5               	movwf	___llmod@dividend+3
  6059  04C5  0021               	movlb	1	; select bank1
  6060  04C6  083C               	movf	(printf@val+2)^(0+128),w
  6061  04C7  0020               	movlb	0	; select bank0
  6062  04C8  00B4               	movwf	___llmod@dividend+2
  6063  04C9  0021               	movlb	1	; select bank1
  6064  04CA  083B               	movf	(printf@val+1)^(0+128),w
  6065  04CB  0020               	movlb	0	; select bank0
  6066  04CC  00B3               	movwf	___llmod@dividend+1
  6067  04CD  0021               	movlb	1	; select bank1
  6068  04CE  083A               	movf	printf@val^(0+128),w
  6069  04CF  0020               	movlb	0	; select bank0
  6070  04D0  00B2               	movwf	___llmod@dividend
  6071  04D1  3195  2548  3180   	fcall	___llmod
  6072  04D4  0020               	movlb	0	; select bank0
  6073  04D5  0831               	movf	?___llmod+3,w
  6074  04D6  0021               	movlb	1	; select bank1
  6075  04D7  00BD               	movwf	(printf@val+3)^(0+128)
  6076  04D8  0020               	movlb	0	; select bank0
  6077  04D9  0830               	movf	?___llmod+2,w
  6078  04DA  0021               	movlb	1	; select bank1
  6079  04DB  00BC               	movwf	(printf@val+2)^(0+128)
  6080  04DC  0020               	movlb	0	; select bank0
  6081  04DD  082F               	movf	?___llmod+1,w
  6082  04DE  0021               	movlb	1	; select bank1
  6083  04DF  00BB               	movwf	(printf@val+1)^(0+128)
  6084  04E0  0020               	movlb	0	; select bank0
  6085  04E1  082E               	movf	?___llmod,w
  6086  04E2  2C35               	goto	L4
  6087  04E3                     l2840:	
  6088                           ;doprnt.c: 1233: }
  6089                           ;doprnt.c: 1235: while(prec) {
  6090                           
  6091                           
  6092                           ;doprnt.c: 1236: (putch('0') );
  6093  04E3  3030               	movlw	48
  6094  04E4  3192  2275  3180   	fcall	_putch
  6095                           
  6096                           ;doprnt.c: 1237: prec--;
  6097  04E7  30FF               	movlw	255
  6098  04E8  0021               	movlb	1	; select bank1
  6099  04E9  07B8               	addwf	printf@prec^(0+128),f
  6100  04EA  30FF               	movlw	255
  6101  04EB  3DB9               	addwfc	(printf@prec+1)^(0+128),f
  6102  04EC                     l2844:	
  6103  04EC  0838               	movf	printf@prec^(0+128),w
  6104  04ED  0439               	iorwf	(printf@prec+1)^(0+128),w
  6105  04EE  1903               	btfsc	3,2
  6106  04EF  2848               	goto	l2880
  6107  04F0  2CE3               	goto	l2840
  6108  04F1                     l2846:	
  6109                           ;doprnt.c: 1238: }
  6110                           ;doprnt.c: 1245: continue;
  6111                           
  6112                           
  6113                           ;doprnt.c: 1246: }
  6114                           ;doprnt.c: 1253: {
  6115                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  6116  04F1  0021               	movlb	1	; select bank1
  6117  04F2  0837               	movf	printf@ap^(0+128),w
  6118  04F3  0086               	movwf	6
  6119  04F4  0187               	clrf	7
  6120  04F5  3F40               	moviw [0]fsr1
  6121  04F6  0020               	movlb	0	; select bank0
  6122  04F7  00E7               	movwf	??_printf
  6123  04F8  3F41               	moviw [1]fsr1
  6124  04F9  00E8               	movwf	??_printf+1
  6125  04FA  0867               	movf	??_printf,w
  6126  04FB  0021               	movlb	1	; select bank1
  6127  04FC  00BA               	movwf	printf@val^(0+128)
  6128  04FD  0020               	movlb	0	; select bank0
  6129  04FE  0868               	movf	??_printf+1,w
  6130  04FF  0021               	movlb	1	; select bank1
  6131  0500  00BB               	movwf	(printf@val+1)^(0+128)
  6132  0501  0D89               	rlf	9,f
  6133  0502  3B89               	subwfb	9,f
  6134  0503  0989               	comf	9,f
  6135  0504  00BC               	movwf	(printf@val+2)^(0+128)
  6136  0505  00BD               	movwf	(printf@val+3)^(0+128)
  6137  0506  3002               	movlw	2
  6138  0507  0020               	movlb	0	; select bank0
  6139  0508  00E7               	movwf	??_printf
  6140  0509  0867               	movf	??_printf,w
  6141  050A  0021               	movlb	1	; select bank1
  6142  050B  07B7               	addwf	printf@ap^(0+128),f
  6143                           
  6144                           ;doprnt.c: 1261: if((long)val < 0) {
  6145  050C  1FBD               	btfss	(printf@val+3)^(0+128),7
  6146  050D  2D1D               	goto	l2856
  6147                           
  6148                           ;doprnt.c: 1262: flag |= 0x03;
  6149  050E  3003               	movlw	3
  6150  050F  04B5               	iorwf	printf@flag^(0+128),f
  6151  0510  3000               	movlw	0
  6152  0511  04B6               	iorwf	(printf@flag+1)^(0+128),f
  6153                           
  6154                           ;doprnt.c: 1263: val = -val;
  6155  0512  09BA               	comf	printf@val^(0+128),f
  6156  0513  09BB               	comf	(printf@val+1)^(0+128),f
  6157  0514  09BC               	comf	(printf@val+2)^(0+128),f
  6158  0515  09BD               	comf	(printf@val+3)^(0+128),f
  6159  0516  0ABA               	incf	printf@val^(0+128),f
  6160  0517  1903               	skipnz
  6161  0518  0ABB               	incf	(printf@val+1)^(0+128),f
  6162  0519  1903               	skipnz
  6163  051A  0ABC               	incf	(printf@val+2)^(0+128),f
  6164  051B  1903               	skipnz
  6165  051C  0ABD               	incf	(printf@val+3)^(0+128),f
  6166  051D                     l2856:	
  6167                           
  6168                           ;doprnt.c: 1264: }
  6169                           ;doprnt.c: 1266: }
  6170                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6171  051D  01C7               	clrf	printf@c^(0+128)
  6172  051E  0AC7               	incf	printf@c^(0+128),f
  6173  051F  300A               	movlw	10
  6174  0520  0647               	xorwf	printf@c^(0+128),w
  6175  0521  1903               	btfsc	3,2
  6176  0522  2D5A               	goto	l2868
  6177  0523                     l2862:	
  6178                           
  6179                           ;doprnt.c: 1306: if(val < dpowers[c])
  6180  0523  0847               	movf	printf@c^(0+128),w
  6181  0524  0020               	movlb	0	; select bank0
  6182  0525  00E7               	movwf	??_printf
  6183  0526  01E8               	clrf	??_printf+1
  6184  0527  35E7               	lslf	??_printf,f
  6185  0528  0DE8               	rlf	??_printf+1,f
  6186  0529  35E7               	lslf	??_printf,f
  6187  052A  0DE8               	rlf	??_printf+1,f
  6188  052B  3000               	movlw	low (_dpowers| (0+32768))
  6189  052C  0767               	addwf	??_printf,w
  6190  052D  0084               	movwf	4
  6191  052E  3090               	movlw	high (_dpowers| (0+32768))
  6192  052F  3D68               	addwfc	??_printf+1,w
  6193  0530  0085               	movwf	5
  6194  0531  3F00               	moviw [0]fsr0
  6195  0532  00E9               	movwf	??_printf+2
  6196  0533  3F01               	moviw [1]fsr0
  6197  0534  00EA               	movwf	??_printf+3
  6198  0535  3F02               	moviw [2]fsr0
  6199  0536  00EB               	movwf	??_printf+4
  6200  0537  3F03               	moviw [3]fsr0
  6201  0538  00EC               	movwf	??_printf+5
  6202  0539  086C               	movf	??_printf+5,w
  6203  053A  0021               	movlb	1	; select bank1
  6204  053B  023D               	subwf	(printf@val+3)^(0+128),w
  6205  053C  1D03               	skipz
  6206  053D  2D4E               	goto	u3815
  6207  053E  0020               	movlb	0	; select bank0
  6208  053F  086B               	movf	??_printf+4,w
  6209  0540  0021               	movlb	1	; select bank1
  6210  0541  023C               	subwf	(printf@val+2)^(0+128),w
  6211  0542  1D03               	skipz
  6212  0543  2D4E               	goto	u3815
  6213  0544  0020               	movlb	0	; select bank0
  6214  0545  086A               	movf	??_printf+3,w
  6215  0546  0021               	movlb	1	; select bank1
  6216  0547  023B               	subwf	(printf@val+1)^(0+128),w
  6217  0548  1D03               	skipz
  6218  0549  2D4E               	goto	u3815
  6219  054A  0020               	movlb	0	; select bank0
  6220  054B  0869               	movf	??_printf+2,w
  6221  054C  0021               	movlb	1	; select bank1
  6222  054D  023A               	subwf	printf@val^(0+128),w
  6223  054E                     u3815:	
  6224  054E  1C03               	btfss	3,0
  6225  054F  2D5A               	goto	l2868
  6226                           
  6227                           ;doprnt.c: 1307: break;
  6228  0550  3001               	movlw	1
  6229  0551  0020               	movlb	0	; select bank0
  6230  0552  00E7               	movwf	??_printf
  6231  0553  0867               	movf	??_printf,w
  6232  0554  0021               	movlb	1	; select bank1
  6233  0555  07C7               	addwf	printf@c^(0+128),f
  6234  0556  300A               	movlw	10
  6235  0557  0647               	xorwf	printf@c^(0+128),w
  6236  0558  1D03               	btfss	3,2
  6237  0559  2D23               	goto	l2862
  6238  055A                     l2868:	
  6239                           
  6240                           ;doprnt.c: 1422: {
  6241                           ;doprnt.c: 1438: if(flag & 0x03)
  6242  055A  3003               	movlw	3
  6243  055B  0535               	andwf	printf@flag^(0+128),w
  6244  055C  0020               	movlb	0	; select bank0
  6245  055D  00E7               	movwf	??_printf
  6246  055E  3000               	movlw	0
  6247  055F  0021               	movlb	1	; select bank1
  6248  0560  0536               	andwf	(printf@flag+1)^(0+128),w
  6249  0561  0020               	movlb	0	; select bank0
  6250  0562  00E8               	movwf	??_printf+1
  6251  0563  0867               	movf	??_printf,w
  6252  0564  0468               	iorwf	??_printf+1,w
  6253  0565  1903               	btfsc	3,2
  6254  0566  2D6B               	goto	l2872
  6255                           
  6256                           ;doprnt.c: 1439: (putch('-') );
  6257  0567  302D               	movlw	45
  6258  0568  3192  2275  3180   	fcall	_putch
  6259  056B                     l2872:	
  6260                           
  6261                           ;doprnt.c: 1469: }
  6262                           ;doprnt.c: 1472: prec = c;
  6263  056B  0021               	movlb	1	; select bank1
  6264  056C  0847               	movf	printf@c^(0+128),w
  6265  056D  00B8               	movwf	printf@prec^(0+128)
  6266  056E  01B9               	clrf	(printf@prec+1)^(0+128)
  6267  056F  1BB8               	btfsc	printf@prec^(0+128),7
  6268  0570  03B9               	decf	(printf@prec+1)^(0+128),f
  6269  0571                     l2878:	
  6270                           ;doprnt.c: 1474: while(prec--) {
  6271                           
  6272  0571  30FF               	movlw	255
  6273  0572  0021               	movlb	1	; select bank1
  6274  0573  07B8               	addwf	printf@prec^(0+128),f
  6275  0574  30FF               	movlw	255
  6276  0575  3DB9               	addwfc	(printf@prec+1)^(0+128),f
  6277  0576  0A38               	incf	printf@prec^(0+128),w
  6278  0577  1903               	btfsc	3,2
  6279  0578  0A39               	incf	(printf@prec+1)^(0+128),w
  6280  0579  1903               	btfsc	3,2
  6281  057A  2848               	goto	l2880
  6282                           
  6283                           ;doprnt.c: 1478: {
  6284                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6285  057B  3000               	movlw	0
  6286  057C  0020               	movlb	0	; select bank0
  6287  057D  00B1               	movwf	___llmod@divisor+3
  6288  057E  3000               	movlw	0
  6289  057F  00B0               	movwf	___llmod@divisor+2
  6290  0580  3000               	movlw	0
  6291  0581  00AF               	movwf	___llmod@divisor+1
  6292  0582  300A               	movlw	10
  6293  0583  00AE               	movwf	___llmod@divisor
  6294  0584  0021               	movlb	1	; select bank1
  6295  0585  0839               	movf	(printf@prec+1)^(0+128),w
  6296  0586  0085               	movwf	5
  6297  0587  0838               	movf	printf@prec^(0+128),w
  6298  0588  0084               	movwf	4
  6299  0589  3584               	lslf	4,f
  6300  058A  0D85               	rlf	5,f
  6301  058B  3584               	lslf	4,f
  6302  058C  0D85               	rlf	5,f
  6303  058D  3000               	movlw	low (_dpowers| (0+32768))
  6304  058E  0784               	addwf	4,f
  6305  058F  3090               	movlw	high (_dpowers| (0+32768))
  6306  0590  3D85               	addwfc	5,f
  6307  0591  3F00               	moviw [0]fsr0
  6308  0592  0020               	movlb	0	; select bank0
  6309  0593  00A0               	movwf	___lldiv@divisor
  6310  0594  3F01               	moviw [1]fsr0
  6311  0595  00A1               	movwf	___lldiv@divisor+1
  6312  0596  3F02               	moviw [2]fsr0
  6313  0597  00A2               	movwf	___lldiv@divisor+2
  6314  0598  3F03               	moviw [3]fsr0
  6315  0599  00A3               	movwf	___lldiv@divisor+3
  6316  059A  0021               	movlb	1	; select bank1
  6317  059B  083D               	movf	(printf@val+3)^(0+128),w
  6318  059C  0020               	movlb	0	; select bank0
  6319  059D  00A7               	movwf	___lldiv@dividend+3
  6320  059E  0021               	movlb	1	; select bank1
  6321  059F  083C               	movf	(printf@val+2)^(0+128),w
  6322  05A0  0020               	movlb	0	; select bank0
  6323  05A1  00A6               	movwf	___lldiv@dividend+2
  6324  05A2  0021               	movlb	1	; select bank1
  6325  05A3  083B               	movf	(printf@val+1)^(0+128),w
  6326  05A4  0020               	movlb	0	; select bank0
  6327  05A5  00A5               	movwf	___lldiv@dividend+1
  6328  05A6  0021               	movlb	1	; select bank1
  6329  05A7  083A               	movf	printf@val^(0+128),w
  6330  05A8  0020               	movlb	0	; select bank0
  6331  05A9  00A4               	movwf	___lldiv@dividend
  6332  05AA  3196  26C1  3180   	fcall	___lldiv
  6333  05AD  0020               	movlb	0	; select bank0
  6334  05AE  0823               	movf	?___lldiv+3,w
  6335  05AF  00B5               	movwf	___llmod@dividend+3
  6336  05B0  0822               	movf	?___lldiv+2,w
  6337  05B1  00B4               	movwf	___llmod@dividend+2
  6338  05B2  0821               	movf	?___lldiv+1,w
  6339  05B3  00B3               	movwf	___llmod@dividend+1
  6340  05B4  0820               	movf	?___lldiv,w
  6341  05B5  00B2               	movwf	___llmod@dividend
  6342  05B6  3195  2548  3180   	fcall	___llmod
  6343  05B9  0020               	movlb	0	; select bank0
  6344  05BA  082E               	movf	?___llmod,w
  6345  05BB  3E30               	addlw	48
  6346  05BC  00E7               	movwf	??_printf
  6347  05BD  0867               	movf	??_printf,w
  6348  05BE  0021               	movlb	1	; select bank1
  6349  05BF  00C7               	movwf	printf@c^(0+128)
  6350                           
  6351                           ;doprnt.c: 1523: }
  6352                           ;doprnt.c: 1524: (putch(c) );
  6353  05C0  0847               	movf	printf@c^(0+128),w
  6354  05C1  3192  2275  3180   	fcall	_putch
  6355  05C4  2D71               	goto	l2878
  6356  05C5                     l418:	
  6357                           ;doprnt.c: 1540: return 0;
  6358                           ;	Return value of _printf is never used
  6359                           
  6360                           ;doprnt.c: 1525: }
  6361                           ;doprnt.c: 1533: }
  6362                           ;doprnt.c: 1535: alldone:
  6363                           
  6364  05C5  0008               	return
  6365  05C6                     __end_of_printf:	
  6366                           
  6367                           	psect	text29
  6368  0DBA                     __ptext29:	
  6369 ;; *************** function _scale *****************
  6370 ;; Defined at:
  6371 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  6372 ;; Parameters:    Size  Location     Type
  6373 ;;  scl             1    wreg     char 
  6374 ;; Auto vars:     Size  Location     Type
  6375 ;;  scl             1   46[BANK0 ] char 
  6376 ;; Return value:  Size  Location     Type
  6377 ;;                  3   38[BANK0 ] char 
  6378 ;; Registers used:
  6379 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6380 ;; Tracked objects:
  6381 ;;		On entry : 0/0
  6382 ;;		On exit  : 0/0
  6383 ;;		Unchanged: 0/0
  6384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6385 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6386 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6387 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6388 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6389 ;;Total ram usage:        9 bytes
  6390 ;; Hardware stack levels used:    1
  6391 ;; Hardware stack levels required when called:    6
  6392 ;; This function calls:
  6393 ;;		___awdiv
  6394 ;;		___awmod
  6395 ;;		___ftmul
  6396 ;;		___wmul
  6397 ;; This function is called by:
  6398 ;;		_printf
  6399 ;; This function uses a non-reentrant model
  6400 ;;
  6401                           
  6402                           
  6403                           ;psect for function _scale
  6404  0DBA                     _scale:	
  6405                           
  6406                           ;incstack = 0
  6407                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6408                           ;scale@scl stored from wreg
  6409  0DBA  0020               	movlb	0	; select bank0
  6410  0DBB  00CE               	movwf	scale@scl
  6411                           
  6412                           ;doprnt.c: 428: if(scl < 0) {
  6413  0DBC  1FCE               	btfss	scale@scl,7
  6414  0DBD  2EE0               	goto	l2434
  6415                           
  6416                           ;doprnt.c: 429: scl = -scl;
  6417  0DBE  09CE               	comf	scale@scl,f
  6418  0DBF  0ACE               	incf	scale@scl,f
  6419                           
  6420                           ;doprnt.c: 430: if(scl>=110)
  6421  0DC0  084E               	movf	scale@scl,w
  6422  0DC1  3A80               	xorlw	128
  6423  0DC2  3E12               	addlw	-238
  6424  0DC3  1C03               	skipc
  6425  0DC4  2E64               	goto	l2424
  6426                           
  6427                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6428  0DC5  300A               	movlw	10
  6429  0DC6  00A7               	movwf	___awdiv@divisor
  6430  0DC7  3000               	movlw	0
  6431  0DC8  00A8               	movwf	___awdiv@divisor+1
  6432  0DC9  084E               	movf	scale@scl,w
  6433  0DCA  00A2               	movwf	___awmod@dividend
  6434  0DCB  01A3               	clrf	___awmod@dividend+1
  6435  0DCC  1BA2               	btfsc	___awmod@dividend,7
  6436  0DCD  03A3               	decf	___awmod@dividend+1,f
  6437  0DCE  3064               	movlw	100
  6438  0DCF  00A0               	movwf	___awmod@divisor
  6439  0DD0  3000               	movlw	0
  6440  0DD1  00A1               	movwf	___awmod@divisor+1
  6441  0DD2  3195  258B  318D   	fcall	___awmod
  6442  0DD5  0020               	movlb	0	; select bank0
  6443  0DD6  0821               	movf	?___awmod+1,w
  6444  0DD7  00AA               	movwf	___awdiv@dividend+1
  6445  0DD8  0820               	movf	?___awmod,w
  6446  0DD9  00A9               	movwf	___awdiv@dividend
  6447  0DDA  3196  266F  318D   	fcall	___awdiv
  6448  0DDD  0020               	movlb	0	; select bank0
  6449  0DDE  0827               	movf	?___awdiv,w
  6450  0DDF  3E09               	addlw	9
  6451  0DE0  00B0               	movwf	___wmul@multiplier
  6452  0DE1  3000               	movlw	0
  6453  0DE2  3D28               	addwfc	?___awdiv+1,w
  6454  0DE3  00B1               	movwf	___wmul@multiplier+1
  6455  0DE4  3003               	movlw	3
  6456  0DE5  00B2               	movwf	___wmul@multiplicand
  6457  0DE6  3000               	movlw	0
  6458  0DE7  00B3               	movwf	___wmul@multiplicand+1
  6459  0DE8  3193  238F  318D   	fcall	___wmul
  6460  0DEB  0020               	movlb	0	; select bank0
  6461  0DEC  0831               	movf	?___wmul+1,w
  6462  0DED  0085               	movwf	5
  6463  0DEE  0830               	movf	?___wmul,w
  6464  0DEF  0084               	movwf	4
  6465  0DF0  3028               	movlw	low (__npowers_| (0+32768))
  6466  0DF1  0784               	addwf	4,f
  6467  0DF2  3090               	movlw	high (__npowers_| (0+32768))
  6468  0DF3  3D85               	addwfc	5,f
  6469  0DF4  3F00               	moviw [0]fsr0
  6470  0DF5  00B6               	movwf	___ftmul@f1
  6471  0DF6  3F01               	moviw [1]fsr0
  6472  0DF7  00B7               	movwf	___ftmul@f1+1
  6473  0DF8  3F02               	moviw [2]fsr0
  6474  0DF9  00B8               	movwf	___ftmul@f1+2
  6475  0DFA  3064               	movlw	100
  6476  0DFB  00A7               	movwf	___awdiv@divisor
  6477  0DFC  3000               	movlw	0
  6478  0DFD  00A8               	movwf	___awdiv@divisor+1
  6479  0DFE  084E               	movf	scale@scl,w
  6480  0DFF  00A9               	movwf	___awdiv@dividend
  6481  0E00  01AA               	clrf	___awdiv@dividend+1
  6482  0E01  1BA9               	btfsc	___awdiv@dividend,7
  6483  0E02  03AA               	decf	___awdiv@dividend+1,f
  6484  0E03  3196  266F  318D   	fcall	___awdiv
  6485  0E06  0020               	movlb	0	; select bank0
  6486  0E07  0827               	movf	?___awdiv,w
  6487  0E08  3E12               	addlw	18
  6488  0E09  00B0               	movwf	___wmul@multiplier
  6489  0E0A  3000               	movlw	0
  6490  0E0B  3D28               	addwfc	?___awdiv+1,w
  6491  0E0C  00B1               	movwf	___wmul@multiplier+1
  6492  0E0D  3003               	movlw	3
  6493  0E0E  00B2               	movwf	___wmul@multiplicand
  6494  0E0F  3000               	movlw	0
  6495  0E10  00B3               	movwf	___wmul@multiplicand+1
  6496  0E11  3193  238F  318D   	fcall	___wmul
  6497  0E14  0020               	movlb	0	; select bank0
  6498  0E15  0831               	movf	?___wmul+1,w
  6499  0E16  0085               	movwf	5
  6500  0E17  0830               	movf	?___wmul,w
  6501  0E18  0084               	movwf	4
  6502  0E19  3028               	movlw	low (__npowers_| (0+32768))
  6503  0E1A  0784               	addwf	4,f
  6504  0E1B  3090               	movlw	high (__npowers_| (0+32768))
  6505  0E1C  3D85               	addwfc	5,f
  6506  0E1D  3F00               	moviw [0]fsr0
  6507  0E1E  00B9               	movwf	___ftmul@f2
  6508  0E1F  3F01               	moviw [1]fsr0
  6509  0E20  00BA               	movwf	___ftmul@f2+1
  6510  0E21  3F02               	moviw [2]fsr0
  6511  0E22  00BB               	movwf	___ftmul@f2+2
  6512  0E23  3189  21FD  318D   	fcall	___ftmul
  6513  0E26  0020               	movlb	0	; select bank0
  6514  0E27  0836               	movf	?___ftmul,w
  6515  0E28  00CB               	movwf	_scale$1274
  6516  0E29  0837               	movf	?___ftmul+1,w
  6517  0E2A  00CC               	movwf	_scale$1274+1
  6518  0E2B  0838               	movf	?___ftmul+2,w
  6519  0E2C  00CD               	movwf	_scale$1274+2
  6520                           
  6521                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6522  0E2D  084E               	movf	scale@scl,w
  6523  0E2E  00A2               	movwf	___awmod@dividend
  6524  0E2F  01A3               	clrf	___awmod@dividend+1
  6525  0E30  1BA2               	btfsc	___awmod@dividend,7
  6526  0E31  03A3               	decf	___awmod@dividend+1,f
  6527  0E32  300A               	movlw	10
  6528  0E33  00A0               	movwf	___awmod@divisor
  6529  0E34  3000               	movlw	0
  6530  0E35  00A1               	movwf	___awmod@divisor+1
  6531  0E36  3195  258B  318D   	fcall	___awmod
  6532  0E39  0020               	movlb	0	; select bank0
  6533  0E3A  0821               	movf	?___awmod+1,w
  6534  0E3B  00B1               	movwf	___wmul@multiplier+1
  6535  0E3C  0820               	movf	?___awmod,w
  6536  0E3D  00B0               	movwf	___wmul@multiplier
  6537  0E3E  3003               	movlw	3
  6538  0E3F  00B2               	movwf	___wmul@multiplicand
  6539  0E40  3000               	movlw	0
  6540  0E41  00B3               	movwf	___wmul@multiplicand+1
  6541  0E42  3193  238F  318D   	fcall	___wmul
  6542  0E45  0020               	movlb	0	; select bank0
  6543  0E46  0831               	movf	?___wmul+1,w
  6544  0E47  0085               	movwf	5
  6545  0E48  0830               	movf	?___wmul,w
  6546  0E49  0084               	movwf	4
  6547  0E4A  3028               	movlw	low (__npowers_| (0+32768))
  6548  0E4B  0784               	addwf	4,f
  6549  0E4C  3090               	movlw	high (__npowers_| (0+32768))
  6550  0E4D  3D85               	addwfc	5,f
  6551  0E4E  3F00               	moviw [0]fsr0
  6552  0E4F  00B6               	movwf	___ftmul@f1
  6553  0E50  3F01               	moviw [1]fsr0
  6554  0E51  00B7               	movwf	___ftmul@f1+1
  6555  0E52  3F02               	moviw [2]fsr0
  6556  0E53  00B8               	movwf	___ftmul@f1+2
  6557  0E54  084B               	movf	_scale$1274,w
  6558  0E55  00B9               	movwf	___ftmul@f2
  6559  0E56  084C               	movf	_scale$1274+1,w
  6560  0E57  00BA               	movwf	___ftmul@f2+1
  6561  0E58  084D               	movf	_scale$1274+2,w
  6562  0E59  00BB               	movwf	___ftmul@f2+2
  6563  0E5A  3189  21FD         	fcall	___ftmul
  6564  0E5C  0020               	movlb	0	; select bank0
  6565  0E5D  0836               	movf	?___ftmul,w
  6566  0E5E  00C6               	movwf	?_scale
  6567  0E5F  0837               	movf	?___ftmul+1,w
  6568  0E60  00C7               	movwf	?_scale+1
  6569  0E61  0838               	movf	?___ftmul+2,w
  6570  0E62  00C8               	movwf	?_scale+2
  6571  0E63  0008               	return
  6572  0E64                     l2424:	
  6573                           
  6574                           ;doprnt.c: 432: else if(scl > 10)
  6575  0E64  084E               	movf	scale@scl,w
  6576  0E65  3A80               	xorlw	128
  6577  0E66  3E75               	addlw	-139
  6578  0E67  1C03               	skipc
  6579  0E68  2EC3               	goto	l2430
  6580                           
  6581                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6582  0E69  084E               	movf	scale@scl,w
  6583  0E6A  00A2               	movwf	___awmod@dividend
  6584  0E6B  01A3               	clrf	___awmod@dividend+1
  6585  0E6C  1BA2               	btfsc	___awmod@dividend,7
  6586  0E6D  03A3               	decf	___awmod@dividend+1,f
  6587  0E6E  300A               	movlw	10
  6588  0E6F  00A0               	movwf	___awmod@divisor
  6589  0E70  3000               	movlw	0
  6590  0E71  00A1               	movwf	___awmod@divisor+1
  6591  0E72  3195  258B  318D   	fcall	___awmod
  6592  0E75  0020               	movlb	0	; select bank0
  6593  0E76  0821               	movf	?___awmod+1,w
  6594  0E77  00B1               	movwf	___wmul@multiplier+1
  6595  0E78  0820               	movf	?___awmod,w
  6596  0E79  00B0               	movwf	___wmul@multiplier
  6597  0E7A  3003               	movlw	3
  6598  0E7B  00B2               	movwf	___wmul@multiplicand
  6599  0E7C  3000               	movlw	0
  6600  0E7D  00B3               	movwf	___wmul@multiplicand+1
  6601  0E7E  3193  238F  318D   	fcall	___wmul
  6602  0E81  0020               	movlb	0	; select bank0
  6603  0E82  0831               	movf	?___wmul+1,w
  6604  0E83  0085               	movwf	5
  6605  0E84  0830               	movf	?___wmul,w
  6606  0E85  0084               	movwf	4
  6607  0E86  3028               	movlw	low (__npowers_| (0+32768))
  6608  0E87  0784               	addwf	4,f
  6609  0E88  3090               	movlw	high (__npowers_| (0+32768))
  6610  0E89  3D85               	addwfc	5,f
  6611  0E8A  3F00               	moviw [0]fsr0
  6612  0E8B  00B6               	movwf	___ftmul@f1
  6613  0E8C  3F01               	moviw [1]fsr0
  6614  0E8D  00B7               	movwf	___ftmul@f1+1
  6615  0E8E  3F02               	moviw [2]fsr0
  6616  0E8F  00B8               	movwf	___ftmul@f1+2
  6617  0E90  300A               	movlw	10
  6618  0E91  00A7               	movwf	___awdiv@divisor
  6619  0E92  3000               	movlw	0
  6620  0E93  00A8               	movwf	___awdiv@divisor+1
  6621  0E94  084E               	movf	scale@scl,w
  6622  0E95  00A9               	movwf	___awdiv@dividend
  6623  0E96  01AA               	clrf	___awdiv@dividend+1
  6624  0E97  1BA9               	btfsc	___awdiv@dividend,7
  6625  0E98  03AA               	decf	___awdiv@dividend+1,f
  6626  0E99  3196  266F  318D   	fcall	___awdiv
  6627  0E9C  0020               	movlb	0	; select bank0
  6628  0E9D  0827               	movf	?___awdiv,w
  6629  0E9E  3E09               	addlw	9
  6630  0E9F  00B0               	movwf	___wmul@multiplier
  6631  0EA0  3000               	movlw	0
  6632  0EA1  3D28               	addwfc	?___awdiv+1,w
  6633  0EA2  00B1               	movwf	___wmul@multiplier+1
  6634  0EA3  3003               	movlw	3
  6635  0EA4  00B2               	movwf	___wmul@multiplicand
  6636  0EA5  3000               	movlw	0
  6637  0EA6  00B3               	movwf	___wmul@multiplicand+1
  6638  0EA7  3193  238F  318D   	fcall	___wmul
  6639  0EAA  0020               	movlb	0	; select bank0
  6640  0EAB  0831               	movf	?___wmul+1,w
  6641  0EAC  0085               	movwf	5
  6642  0EAD  0830               	movf	?___wmul,w
  6643  0EAE  0084               	movwf	4
  6644  0EAF  3028               	movlw	low (__npowers_| (0+32768))
  6645  0EB0  0784               	addwf	4,f
  6646  0EB1  3090               	movlw	high (__npowers_| (0+32768))
  6647  0EB2  3D85               	addwfc	5,f
  6648  0EB3  3F00               	moviw [0]fsr0
  6649  0EB4  00B9               	movwf	___ftmul@f2
  6650  0EB5  3F01               	moviw [1]fsr0
  6651  0EB6  00BA               	movwf	___ftmul@f2+1
  6652  0EB7  3F02               	moviw [2]fsr0
  6653  0EB8  00BB               	movwf	___ftmul@f2+2
  6654  0EB9  3189  21FD         	fcall	___ftmul
  6655  0EBB  0020               	movlb	0	; select bank0
  6656  0EBC  0836               	movf	?___ftmul,w
  6657  0EBD  00C6               	movwf	?_scale
  6658  0EBE  0837               	movf	?___ftmul+1,w
  6659  0EBF  00C7               	movwf	?_scale+1
  6660  0EC0  0838               	movf	?___ftmul+2,w
  6661  0EC1  00C8               	movwf	?_scale+2
  6662  0EC2  0008               	return
  6663  0EC3                     l2430:	
  6664                           
  6665                           ;doprnt.c: 434: return _npowers_[scl];
  6666  0EC3  084E               	movf	scale@scl,w
  6667  0EC4  00C9               	movwf	??_scale
  6668  0EC5  01CA               	clrf	??_scale+1
  6669  0EC6  0849               	movf	??_scale,w
  6670  0EC7  00B0               	movwf	___wmul@multiplier
  6671  0EC8  084A               	movf	??_scale+1,w
  6672  0EC9  00B1               	movwf	___wmul@multiplier+1
  6673  0ECA  3003               	movlw	3
  6674  0ECB  00B2               	movwf	___wmul@multiplicand
  6675  0ECC  3000               	movlw	0
  6676  0ECD  00B3               	movwf	___wmul@multiplicand+1
  6677  0ECE  3193  238F         	fcall	___wmul
  6678  0ED0  0020               	movlb	0	; select bank0
  6679  0ED1  0831               	movf	?___wmul+1,w
  6680  0ED2  0085               	movwf	5
  6681  0ED3  0830               	movf	?___wmul,w
  6682  0ED4  0084               	movwf	4
  6683  0ED5  3028               	movlw	low (__npowers_| (0+32768))
  6684  0ED6  0784               	addwf	4,f
  6685  0ED7  3090               	movlw	high (__npowers_| (0+32768))
  6686  0ED8  3D85               	addwfc	5,f
  6687  0ED9  3F00               	moviw [0]fsr0
  6688  0EDA  00C6               	movwf	?_scale
  6689  0EDB  3F01               	moviw [1]fsr0
  6690  0EDC  00C7               	movwf	?_scale+1
  6691  0EDD  3F02               	moviw [2]fsr0
  6692  0EDE  00C8               	movwf	?_scale+2
  6693  0EDF  0008               	return
  6694  0EE0                     l2434:	
  6695                           
  6696                           ;doprnt.c: 435: }
  6697                           ;doprnt.c: 436: if(scl>=110)
  6698  0EE0  084E               	movf	scale@scl,w
  6699  0EE1  3A80               	xorlw	128
  6700  0EE2  3E12               	addlw	-238
  6701  0EE3  1C03               	skipc
  6702  0EE4  2F84               	goto	l2442
  6703                           
  6704                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6705  0EE5  300A               	movlw	10
  6706  0EE6  00A7               	movwf	___awdiv@divisor
  6707  0EE7  3000               	movlw	0
  6708  0EE8  00A8               	movwf	___awdiv@divisor+1
  6709  0EE9  084E               	movf	scale@scl,w
  6710  0EEA  00A2               	movwf	___awmod@dividend
  6711  0EEB  01A3               	clrf	___awmod@dividend+1
  6712  0EEC  1BA2               	btfsc	___awmod@dividend,7
  6713  0EED  03A3               	decf	___awmod@dividend+1,f
  6714  0EEE  3064               	movlw	100
  6715  0EEF  00A0               	movwf	___awmod@divisor
  6716  0EF0  3000               	movlw	0
  6717  0EF1  00A1               	movwf	___awmod@divisor+1
  6718  0EF2  3195  258B  318D   	fcall	___awmod
  6719  0EF5  0020               	movlb	0	; select bank0
  6720  0EF6  0821               	movf	?___awmod+1,w
  6721  0EF7  00AA               	movwf	___awdiv@dividend+1
  6722  0EF8  0820               	movf	?___awmod,w
  6723  0EF9  00A9               	movwf	___awdiv@dividend
  6724  0EFA  3196  266F  318D   	fcall	___awdiv
  6725  0EFD  0020               	movlb	0	; select bank0
  6726  0EFE  0827               	movf	?___awdiv,w
  6727  0EFF  3E09               	addlw	9
  6728  0F00  00B0               	movwf	___wmul@multiplier
  6729  0F01  3000               	movlw	0
  6730  0F02  3D28               	addwfc	?___awdiv+1,w
  6731  0F03  00B1               	movwf	___wmul@multiplier+1
  6732  0F04  3003               	movlw	3
  6733  0F05  00B2               	movwf	___wmul@multiplicand
  6734  0F06  3000               	movlw	0
  6735  0F07  00B3               	movwf	___wmul@multiplicand+1
  6736  0F08  3193  238F  318D   	fcall	___wmul
  6737  0F0B  0020               	movlb	0	; select bank0
  6738  0F0C  0831               	movf	?___wmul+1,w
  6739  0F0D  0085               	movwf	5
  6740  0F0E  0830               	movf	?___wmul,w
  6741  0F0F  0084               	movwf	4
  6742  0F10  304F               	movlw	low (__powers_| (0+32768))
  6743  0F11  0784               	addwf	4,f
  6744  0F12  3090               	movlw	high (__powers_| (0+32768))
  6745  0F13  3D85               	addwfc	5,f
  6746  0F14  3F00               	moviw [0]fsr0
  6747  0F15  00B6               	movwf	___ftmul@f1
  6748  0F16  3F01               	moviw [1]fsr0
  6749  0F17  00B7               	movwf	___ftmul@f1+1
  6750  0F18  3F02               	moviw [2]fsr0
  6751  0F19  00B8               	movwf	___ftmul@f1+2
  6752  0F1A  3064               	movlw	100
  6753  0F1B  00A7               	movwf	___awdiv@divisor
  6754  0F1C  3000               	movlw	0
  6755  0F1D  00A8               	movwf	___awdiv@divisor+1
  6756  0F1E  084E               	movf	scale@scl,w
  6757  0F1F  00A9               	movwf	___awdiv@dividend
  6758  0F20  01AA               	clrf	___awdiv@dividend+1
  6759  0F21  1BA9               	btfsc	___awdiv@dividend,7
  6760  0F22  03AA               	decf	___awdiv@dividend+1,f
  6761  0F23  3196  266F  318D   	fcall	___awdiv
  6762  0F26  0020               	movlb	0	; select bank0
  6763  0F27  0827               	movf	?___awdiv,w
  6764  0F28  3E12               	addlw	18
  6765  0F29  00B0               	movwf	___wmul@multiplier
  6766  0F2A  3000               	movlw	0
  6767  0F2B  3D28               	addwfc	?___awdiv+1,w
  6768  0F2C  00B1               	movwf	___wmul@multiplier+1
  6769  0F2D  3003               	movlw	3
  6770  0F2E  00B2               	movwf	___wmul@multiplicand
  6771  0F2F  3000               	movlw	0
  6772  0F30  00B3               	movwf	___wmul@multiplicand+1
  6773  0F31  3193  238F  318D   	fcall	___wmul
  6774  0F34  0020               	movlb	0	; select bank0
  6775  0F35  0831               	movf	?___wmul+1,w
  6776  0F36  0085               	movwf	5
  6777  0F37  0830               	movf	?___wmul,w
  6778  0F38  0084               	movwf	4
  6779  0F39  304F               	movlw	low (__powers_| (0+32768))
  6780  0F3A  0784               	addwf	4,f
  6781  0F3B  3090               	movlw	high (__powers_| (0+32768))
  6782  0F3C  3D85               	addwfc	5,f
  6783  0F3D  3F00               	moviw [0]fsr0
  6784  0F3E  00B9               	movwf	___ftmul@f2
  6785  0F3F  3F01               	moviw [1]fsr0
  6786  0F40  00BA               	movwf	___ftmul@f2+1
  6787  0F41  3F02               	moviw [2]fsr0
  6788  0F42  00BB               	movwf	___ftmul@f2+2
  6789  0F43  3189  21FD  318D   	fcall	___ftmul
  6790  0F46  0020               	movlb	0	; select bank0
  6791  0F47  0836               	movf	?___ftmul,w
  6792  0F48  00CB               	movwf	_scale$1274
  6793  0F49  0837               	movf	?___ftmul+1,w
  6794  0F4A  00CC               	movwf	_scale$1274+1
  6795  0F4B  0838               	movf	?___ftmul+2,w
  6796  0F4C  00CD               	movwf	_scale$1274+2
  6797                           
  6798                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6799  0F4D  084E               	movf	scale@scl,w
  6800  0F4E  00A2               	movwf	___awmod@dividend
  6801  0F4F  01A3               	clrf	___awmod@dividend+1
  6802  0F50  1BA2               	btfsc	___awmod@dividend,7
  6803  0F51  03A3               	decf	___awmod@dividend+1,f
  6804  0F52  300A               	movlw	10
  6805  0F53  00A0               	movwf	___awmod@divisor
  6806  0F54  3000               	movlw	0
  6807  0F55  00A1               	movwf	___awmod@divisor+1
  6808  0F56  3195  258B  318D   	fcall	___awmod
  6809  0F59  0020               	movlb	0	; select bank0
  6810  0F5A  0821               	movf	?___awmod+1,w
  6811  0F5B  00B1               	movwf	___wmul@multiplier+1
  6812  0F5C  0820               	movf	?___awmod,w
  6813  0F5D  00B0               	movwf	___wmul@multiplier
  6814  0F5E  3003               	movlw	3
  6815  0F5F  00B2               	movwf	___wmul@multiplicand
  6816  0F60  3000               	movlw	0
  6817  0F61  00B3               	movwf	___wmul@multiplicand+1
  6818  0F62  3193  238F  318D   	fcall	___wmul
  6819  0F65  0020               	movlb	0	; select bank0
  6820  0F66  0831               	movf	?___wmul+1,w
  6821  0F67  0085               	movwf	5
  6822  0F68  0830               	movf	?___wmul,w
  6823  0F69  0084               	movwf	4
  6824  0F6A  304F               	movlw	low (__powers_| (0+32768))
  6825  0F6B  0784               	addwf	4,f
  6826  0F6C  3090               	movlw	high (__powers_| (0+32768))
  6827  0F6D  3D85               	addwfc	5,f
  6828  0F6E  3F00               	moviw [0]fsr0
  6829  0F6F  00B6               	movwf	___ftmul@f1
  6830  0F70  3F01               	moviw [1]fsr0
  6831  0F71  00B7               	movwf	___ftmul@f1+1
  6832  0F72  3F02               	moviw [2]fsr0
  6833  0F73  00B8               	movwf	___ftmul@f1+2
  6834  0F74  084B               	movf	_scale$1274,w
  6835  0F75  00B9               	movwf	___ftmul@f2
  6836  0F76  084C               	movf	_scale$1274+1,w
  6837  0F77  00BA               	movwf	___ftmul@f2+1
  6838  0F78  084D               	movf	_scale$1274+2,w
  6839  0F79  00BB               	movwf	___ftmul@f2+2
  6840  0F7A  3189  21FD         	fcall	___ftmul
  6841  0F7C  0020               	movlb	0	; select bank0
  6842  0F7D  0836               	movf	?___ftmul,w
  6843  0F7E  00C6               	movwf	?_scale
  6844  0F7F  0837               	movf	?___ftmul+1,w
  6845  0F80  00C7               	movwf	?_scale+1
  6846  0F81  0838               	movf	?___ftmul+2,w
  6847  0F82  00C8               	movwf	?_scale+2
  6848  0F83  0008               	return
  6849  0F84                     l2442:	
  6850                           
  6851                           ;doprnt.c: 438: else if(scl > 10)
  6852  0F84  084E               	movf	scale@scl,w
  6853  0F85  3A80               	xorlw	128
  6854  0F86  3E75               	addlw	-139
  6855  0F87  1C03               	skipc
  6856  0F88  2FE3               	goto	l2448
  6857                           
  6858                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6859  0F89  084E               	movf	scale@scl,w
  6860  0F8A  00A2               	movwf	___awmod@dividend
  6861  0F8B  01A3               	clrf	___awmod@dividend+1
  6862  0F8C  1BA2               	btfsc	___awmod@dividend,7
  6863  0F8D  03A3               	decf	___awmod@dividend+1,f
  6864  0F8E  300A               	movlw	10
  6865  0F8F  00A0               	movwf	___awmod@divisor
  6866  0F90  3000               	movlw	0
  6867  0F91  00A1               	movwf	___awmod@divisor+1
  6868  0F92  3195  258B  318D   	fcall	___awmod
  6869  0F95  0020               	movlb	0	; select bank0
  6870  0F96  0821               	movf	?___awmod+1,w
  6871  0F97  00B1               	movwf	___wmul@multiplier+1
  6872  0F98  0820               	movf	?___awmod,w
  6873  0F99  00B0               	movwf	___wmul@multiplier
  6874  0F9A  3003               	movlw	3
  6875  0F9B  00B2               	movwf	___wmul@multiplicand
  6876  0F9C  3000               	movlw	0
  6877  0F9D  00B3               	movwf	___wmul@multiplicand+1
  6878  0F9E  3193  238F  318D   	fcall	___wmul
  6879  0FA1  0020               	movlb	0	; select bank0
  6880  0FA2  0831               	movf	?___wmul+1,w
  6881  0FA3  0085               	movwf	5
  6882  0FA4  0830               	movf	?___wmul,w
  6883  0FA5  0084               	movwf	4
  6884  0FA6  304F               	movlw	low (__powers_| (0+32768))
  6885  0FA7  0784               	addwf	4,f
  6886  0FA8  3090               	movlw	high (__powers_| (0+32768))
  6887  0FA9  3D85               	addwfc	5,f
  6888  0FAA  3F00               	moviw [0]fsr0
  6889  0FAB  00B6               	movwf	___ftmul@f1
  6890  0FAC  3F01               	moviw [1]fsr0
  6891  0FAD  00B7               	movwf	___ftmul@f1+1
  6892  0FAE  3F02               	moviw [2]fsr0
  6893  0FAF  00B8               	movwf	___ftmul@f1+2
  6894  0FB0  300A               	movlw	10
  6895  0FB1  00A7               	movwf	___awdiv@divisor
  6896  0FB2  3000               	movlw	0
  6897  0FB3  00A8               	movwf	___awdiv@divisor+1
  6898  0FB4  084E               	movf	scale@scl,w
  6899  0FB5  00A9               	movwf	___awdiv@dividend
  6900  0FB6  01AA               	clrf	___awdiv@dividend+1
  6901  0FB7  1BA9               	btfsc	___awdiv@dividend,7
  6902  0FB8  03AA               	decf	___awdiv@dividend+1,f
  6903  0FB9  3196  266F  318D   	fcall	___awdiv
  6904  0FBC  0020               	movlb	0	; select bank0
  6905  0FBD  0827               	movf	?___awdiv,w
  6906  0FBE  3E09               	addlw	9
  6907  0FBF  00B0               	movwf	___wmul@multiplier
  6908  0FC0  3000               	movlw	0
  6909  0FC1  3D28               	addwfc	?___awdiv+1,w
  6910  0FC2  00B1               	movwf	___wmul@multiplier+1
  6911  0FC3  3003               	movlw	3
  6912  0FC4  00B2               	movwf	___wmul@multiplicand
  6913  0FC5  3000               	movlw	0
  6914  0FC6  00B3               	movwf	___wmul@multiplicand+1
  6915  0FC7  3193  238F  318D   	fcall	___wmul
  6916  0FCA  0020               	movlb	0	; select bank0
  6917  0FCB  0831               	movf	?___wmul+1,w
  6918  0FCC  0085               	movwf	5
  6919  0FCD  0830               	movf	?___wmul,w
  6920  0FCE  0084               	movwf	4
  6921  0FCF  304F               	movlw	low (__powers_| (0+32768))
  6922  0FD0  0784               	addwf	4,f
  6923  0FD1  3090               	movlw	high (__powers_| (0+32768))
  6924  0FD2  3D85               	addwfc	5,f
  6925  0FD3  3F00               	moviw [0]fsr0
  6926  0FD4  00B9               	movwf	___ftmul@f2
  6927  0FD5  3F01               	moviw [1]fsr0
  6928  0FD6  00BA               	movwf	___ftmul@f2+1
  6929  0FD7  3F02               	moviw [2]fsr0
  6930  0FD8  00BB               	movwf	___ftmul@f2+2
  6931  0FD9  3189  21FD         	fcall	___ftmul
  6932  0FDB  0020               	movlb	0	; select bank0
  6933  0FDC  0836               	movf	?___ftmul,w
  6934  0FDD  00C6               	movwf	?_scale
  6935  0FDE  0837               	movf	?___ftmul+1,w
  6936  0FDF  00C7               	movwf	?_scale+1
  6937  0FE0  0838               	movf	?___ftmul+2,w
  6938  0FE1  00C8               	movwf	?_scale+2
  6939  0FE2  0008               	return
  6940  0FE3                     l2448:	
  6941                           
  6942                           ;doprnt.c: 440: return _powers_[scl];
  6943  0FE3  084E               	movf	scale@scl,w
  6944  0FE4  00C9               	movwf	??_scale
  6945  0FE5  01CA               	clrf	??_scale+1
  6946  0FE6  0849               	movf	??_scale,w
  6947  0FE7  00B0               	movwf	___wmul@multiplier
  6948  0FE8  084A               	movf	??_scale+1,w
  6949  0FE9  00B1               	movwf	___wmul@multiplier+1
  6950  0FEA  3003               	movlw	3
  6951  0FEB  00B2               	movwf	___wmul@multiplicand
  6952  0FEC  3000               	movlw	0
  6953  0FED  00B3               	movwf	___wmul@multiplicand+1
  6954  0FEE  3193  238F         	fcall	___wmul
  6955  0FF0  0020               	movlb	0	; select bank0
  6956  0FF1  0831               	movf	?___wmul+1,w
  6957  0FF2  0085               	movwf	5
  6958  0FF3  0830               	movf	?___wmul,w
  6959  0FF4  0084               	movwf	4
  6960  0FF5  304F               	movlw	low (__powers_| (0+32768))
  6961  0FF6  0784               	addwf	4,f
  6962  0FF7  3090               	movlw	high (__powers_| (0+32768))
  6963  0FF8  3D85               	addwfc	5,f
  6964  0FF9  3F00               	moviw [0]fsr0
  6965  0FFA  00C6               	movwf	?_scale
  6966  0FFB  3F01               	moviw [1]fsr0
  6967  0FFC  00C7               	movwf	?_scale+1
  6968  0FFD  3F02               	moviw [2]fsr0
  6969  0FFE  00C8               	movwf	?_scale+2
  6970  0FFF  0008               	return
  6971  1000                     __end_of_scale:	
  6972                           
  6973                           	psect	text30
  6974  1275                     __ptext30:	
  6975 ;; *************** function _putch *****************
  6976 ;; Defined at:
  6977 ;;		line 114 in file "UART.c"
  6978 ;; Parameters:    Size  Location     Type
  6979 ;;  txData          1    wreg     unsigned char 
  6980 ;; Auto vars:     Size  Location     Type
  6981 ;;  txData          1   13[BANK0 ] unsigned char 
  6982 ;; Return value:  Size  Location     Type
  6983 ;;                  1    wreg      void 
  6984 ;; Registers used:
  6985 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6986 ;; Tracked objects:
  6987 ;;		On entry : 0/0
  6988 ;;		On exit  : 0/0
  6989 ;;		Unchanged: 0/0
  6990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6992 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6994 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6995 ;;Total ram usage:        1 bytes
  6996 ;; Hardware stack levels used:    1
  6997 ;; Hardware stack levels required when called:    7
  6998 ;; This function calls:
  6999 ;;		_Send_put
  7000 ;; This function is called by:
  7001 ;;		_printf
  7002 ;; This function uses a non-reentrant model
  7003 ;;
  7004                           
  7005                           
  7006                           ;psect for function _putch
  7007  1275                     _putch:	
  7008                           
  7009                           ;incstack = 0
  7010                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7011                           ;putch@txData stored from wreg
  7012  1275  0020               	movlb	0	; select bank0
  7013  1276  00AD               	movwf	putch@txData
  7014                           
  7015                           ;UART.c: 115: Send_put(txData);
  7016  1277  082D               	movf	putch@txData,w
  7017  1278  3193  235E         	fcall	_Send_put
  7018  127A  0008               	return
  7019  127B                     __end_of_putch:	
  7020                           
  7021                           	psect	text31
  7022  135E                     __ptext31:	
  7023 ;; *************** function _Send_put *****************
  7024 ;; Defined at:
  7025 ;;		line 97 in file "UART.c"
  7026 ;; Parameters:    Size  Location     Type
  7027 ;;  _data           1    wreg     unsigned char 
  7028 ;; Auto vars:     Size  Location     Type
  7029 ;;  _data           1   12[BANK0 ] unsigned char 
  7030 ;; Return value:  Size  Location     Type
  7031 ;;                  1    wreg      void 
  7032 ;; Registers used:
  7033 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7034 ;; Tracked objects:
  7035 ;;		On entry : 0/0
  7036 ;;		On exit  : 0/0
  7037 ;;		Unchanged: 0/0
  7038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7040 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7041 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7042 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7043 ;;Total ram usage:        2 bytes
  7044 ;; Hardware stack levels used:    1
  7045 ;; Hardware stack levels required when called:    6
  7046 ;; This function calls:
  7047 ;;		_UART_buff_get
  7048 ;;		_UART_buff_put
  7049 ;; This function is called by:
  7050 ;;		_putch
  7051 ;; This function uses a non-reentrant model
  7052 ;;
  7053                           
  7054                           
  7055                           ;psect for function _Send_put
  7056  135E                     _Send_put:	
  7057                           
  7058                           ;incstack = 0
  7059                           ; Regs used in _Send_put: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7060                           ;Send_put@_data stored from wreg
  7061  135E  0020               	movlb	0	; select bank0
  7062  135F  00AC               	movwf	Send_put@_data
  7063                           
  7064                           ;UART.c: 98: UART_buff_put(&output_buffer, _data);
  7065  1360  082C               	movf	Send_put@_data,w
  7066  1361  00AB               	movwf	??_Send_put
  7067  1362  082B               	movf	??_Send_put,w
  7068  1363  00A6               	movwf	UART_buff_put@c
  7069  1364  303A               	movlw	(low (_output_buffer| (0+256)))& (0+255)
  7070  1365  3188  20C4  3193   	fcall	_UART_buff_put
  7071                           
  7072                           ;UART.c: 99: if (Transmit_stall == 1) {
  7073  1368  0021               	movlb	1	; select bank1
  7074  1369  036E               	decf	_Transmit_stall^(0+128),w
  7075  136A  1D03               	btfss	3,2
  7076  136B  0008               	return
  7077                           
  7078                           ;UART.c: 100: Transmit_stall = 0;
  7079  136C  01EE               	clrf	_Transmit_stall^(0+128)
  7080                           
  7081                           ;UART.c: 101: TXREG = UART_buff_get(&output_buffer);
  7082  136D  303A               	movlw	(low (_output_buffer| (0+256)))& (0+255)
  7083  136E  3196  261E         	fcall	_UART_buff_get
  7084  1370  0023               	movlb	3	; select bank3
  7085  1371  009A               	movwf	26	;volatile
  7086                           
  7087                           ;UART.c: 102: PIE1bits.TXIE = 1;
  7088  1372  0021               	movlb	1	; select bank1
  7089  1373  1611               	bsf	17,4	;volatile
  7090  1374  0008               	return
  7091  1375                     __end_of_Send_put:	
  7092                           
  7093                           	psect	text32
  7094  08C4                     __ptext32:	
  7095 ;; *************** function _UART_buff_put *****************
  7096 ;; Defined at:
  7097 ;;		line 60 in file "UART.c"
  7098 ;; Parameters:    Size  Location     Type
  7099 ;;  _this           1    wreg     PTR struct UART_ring_buf
  7100 ;;		 -> output_buffer(26), input_buffer(26), 
  7101 ;;  c               1    6[BANK0 ] unsigned char 
  7102 ;; Auto vars:     Size  Location     Type
  7103 ;;  _this           1   10[BANK0 ] PTR struct UART_ring_buf
  7104 ;;		 -> output_buffer(26), input_buffer(26), 
  7105 ;; Return value:  Size  Location     Type
  7106 ;;                  1    wreg      void 
  7107 ;; Registers used:
  7108 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7109 ;; Tracked objects:
  7110 ;;		On entry : 0/0
  7111 ;;		On exit  : 0/0
  7112 ;;		Unchanged: 0/0
  7113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7114 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7115 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7116 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7117 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7118 ;;Total ram usage:        5 bytes
  7119 ;; Hardware stack levels used:    1
  7120 ;; Hardware stack levels required when called:    5
  7121 ;; This function calls:
  7122 ;;		_UART_buff_modulo_inc
  7123 ;; This function is called by:
  7124 ;;		_Send_put
  7125 ;; This function uses a non-reentrant model
  7126 ;;
  7127                           
  7128                           
  7129                           ;psect for function _UART_buff_put
  7130  08C4                     _UART_buff_put:	
  7131                           
  7132                           ;incstack = 0
  7133                           ; Regs used in _UART_buff_put: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7134                           ;UART_buff_put@_this stored from wreg
  7135  08C4  0020               	movlb	0	; select bank0
  7136  08C5  00AA               	movwf	UART_buff_put@_this
  7137                           
  7138                           ;UART.c: 61: if (_this->count < 20) {
  7139  08C6  082A               	movf	UART_buff_put@_this,w
  7140  08C7  3E18               	addlw	24
  7141  08C8  0086               	movwf	6
  7142  08C9  3001               	movlw	1	; select bank2/3
  7143  08CA  0087               	movwf	7
  7144  08CB  3F40               	moviw [0]fsr1
  7145  08CC  00A7               	movwf	??_UART_buff_put
  7146  08CD  3F41               	moviw [1]fsr1
  7147  08CE  00A8               	movwf	??_UART_buff_put+1
  7148  08CF  0828               	movf	??_UART_buff_put+1,w
  7149  08D0  3A80               	xorlw	128
  7150  08D1  00A9               	movwf	??_UART_buff_put+2
  7151  08D2  3080               	movlw	128
  7152  08D3  0229               	subwf	??_UART_buff_put+2,w
  7153  08D4  1D03               	skipz
  7154  08D5  28D8               	goto	u2195
  7155  08D6  3014               	movlw	20
  7156  08D7  0227               	subwf	??_UART_buff_put,w
  7157  08D8                     u2195:	
  7158  08D8  1803               	skipnc
  7159  08D9  290F               	goto	l2110
  7160                           
  7161                           ;UART.c: 62: _this->buf[_this->head] = c;
  7162  08DA  0020               	movlb	0	; select bank0
  7163  08DB  0826               	movf	UART_buff_put@c,w
  7164  08DC  00A7               	movwf	??_UART_buff_put
  7165  08DD  082A               	movf	UART_buff_put@_this,w
  7166  08DE  3E14               	addlw	20
  7167  08DF  0086               	movwf	6
  7168  08E0  3001               	movlw	1	; select bank2/3
  7169  08E1  0087               	movwf	7
  7170  08E2  0801               	movf	1,w
  7171  08E3  072A               	addwf	UART_buff_put@_this,w
  7172  08E4  00A8               	movwf	??_UART_buff_put+1
  7173  08E5  0828               	movf	??_UART_buff_put+1,w
  7174  08E6  0086               	movwf	6
  7175  08E7  3001               	movlw	1	; select bank2/3
  7176  08E8  0087               	movwf	7
  7177  08E9  0827               	movf	??_UART_buff_put,w
  7178  08EA  0081               	movwf	1
  7179                           
  7180                           ;UART.c: 63: _this->head = UART_buff_modulo_inc(_this->head, 20);
  7181  08EB  082A               	movf	UART_buff_put@_this,w
  7182  08EC  3E14               	addlw	20
  7183  08ED  0086               	movwf	6
  7184  08EE  3001               	movlw	1	; select bank2/3
  7185  08EF  0087               	movwf	7
  7186  08F0  3F40               	moviw [0]fsr1
  7187  08F1  00A0               	movwf	UART_buff_modulo_inc@value
  7188  08F2  3F41               	moviw [1]fsr1
  7189  08F3  00A1               	movwf	UART_buff_modulo_inc@value+1
  7190  08F4  3014               	movlw	20
  7191  08F5  00A2               	movwf	UART_buff_modulo_inc@modulus
  7192  08F6  3000               	movlw	0
  7193  08F7  00A3               	movwf	UART_buff_modulo_inc@modulus+1
  7194  08F8  3193  2332         	fcall	_UART_buff_modulo_inc
  7195  08FA  0020               	movlb	0	; select bank0
  7196  08FB  082A               	movf	UART_buff_put@_this,w
  7197  08FC  3E14               	addlw	20
  7198  08FD  0086               	movwf	6
  7199  08FE  3001               	movlw	1	; select bank2/3
  7200  08FF  0087               	movwf	7
  7201  0900  0820               	movf	?_UART_buff_modulo_inc,w
  7202  0901  3FC0               	movwi [0]fsr1
  7203  0902  0821               	movf	?_UART_buff_modulo_inc+1,w
  7204  0903  3FC1               	movwi [1]fsr1
  7205                           
  7206                           ;UART.c: 64: ++_this->count;
  7207  0904  082A               	movf	UART_buff_put@_this,w
  7208  0905  3E18               	addlw	24
  7209  0906  0086               	movwf	6
  7210  0907  3001               	movlw	1	; select bank2/3
  7211  0908  0087               	movwf	7
  7212  0909  3001               	movlw	1
  7213  090A  0781               	addwf	1,f
  7214  090B  3141               	addfsr 1,1
  7215  090C  1803               	skipnc
  7216  090D  0A81               	incf	1,f
  7217                           
  7218                           ;UART.c: 65: } else {
  7219  090E  0008               	return
  7220  090F                     l2110:	
  7221                           
  7222                           ;UART.c: 66: _this->buf[_this->head] = c;
  7223  090F  0020               	movlb	0	; select bank0
  7224  0910  0826               	movf	UART_buff_put@c,w
  7225  0911  00A7               	movwf	??_UART_buff_put
  7226  0912  082A               	movf	UART_buff_put@_this,w
  7227  0913  3E14               	addlw	20
  7228  0914  0086               	movwf	6
  7229  0915  3001               	movlw	1	; select bank2/3
  7230  0916  0087               	movwf	7
  7231  0917  0801               	movf	1,w
  7232  0918  072A               	addwf	UART_buff_put@_this,w
  7233  0919  00A8               	movwf	??_UART_buff_put+1
  7234  091A  0828               	movf	??_UART_buff_put+1,w
  7235  091B  0086               	movwf	6
  7236  091C  3001               	movlw	1	; select bank2/3
  7237  091D  0087               	movwf	7
  7238  091E  0827               	movf	??_UART_buff_put,w
  7239  091F  0081               	movwf	1
  7240                           
  7241                           ;UART.c: 67: _this->head = UART_buff_modulo_inc(_this->head, 20);
  7242  0920  082A               	movf	UART_buff_put@_this,w
  7243  0921  3E14               	addlw	20
  7244  0922  0086               	movwf	6
  7245  0923  3001               	movlw	1	; select bank2/3
  7246  0924  0087               	movwf	7
  7247  0925  3F40               	moviw [0]fsr1
  7248  0926  00A0               	movwf	UART_buff_modulo_inc@value
  7249  0927  3F41               	moviw [1]fsr1
  7250  0928  00A1               	movwf	UART_buff_modulo_inc@value+1
  7251  0929  3014               	movlw	20
  7252  092A  00A2               	movwf	UART_buff_modulo_inc@modulus
  7253  092B  3000               	movlw	0
  7254  092C  00A3               	movwf	UART_buff_modulo_inc@modulus+1
  7255  092D  3193  2332  3188   	fcall	_UART_buff_modulo_inc
  7256  0930  0020               	movlb	0	; select bank0
  7257  0931  082A               	movf	UART_buff_put@_this,w
  7258  0932  3E14               	addlw	20
  7259  0933  0086               	movwf	6
  7260  0934  3001               	movlw	1	; select bank2/3
  7261  0935  0087               	movwf	7
  7262  0936  0820               	movf	?_UART_buff_modulo_inc,w
  7263  0937  3FC0               	movwi [0]fsr1
  7264  0938  0821               	movf	?_UART_buff_modulo_inc+1,w
  7265  0939  3FC1               	movwi [1]fsr1
  7266                           
  7267                           ;UART.c: 68: _this->tail = UART_buff_modulo_inc(_this->tail, 20);
  7268  093A  082A               	movf	UART_buff_put@_this,w
  7269  093B  3E16               	addlw	22
  7270  093C  0086               	movwf	6
  7271  093D  3001               	movlw	1	; select bank2/3
  7272  093E  0087               	movwf	7
  7273  093F  3F40               	moviw [0]fsr1
  7274  0940  00A0               	movwf	UART_buff_modulo_inc@value
  7275  0941  3F41               	moviw [1]fsr1
  7276  0942  00A1               	movwf	UART_buff_modulo_inc@value+1
  7277  0943  3014               	movlw	20
  7278  0944  00A2               	movwf	UART_buff_modulo_inc@modulus
  7279  0945  3000               	movlw	0
  7280  0946  00A3               	movwf	UART_buff_modulo_inc@modulus+1
  7281  0947  3193  2332         	fcall	_UART_buff_modulo_inc
  7282  0949  0020               	movlb	0	; select bank0
  7283  094A  082A               	movf	UART_buff_put@_this,w
  7284  094B  3E16               	addlw	22
  7285  094C  0086               	movwf	6
  7286  094D  3001               	movlw	1	; select bank2/3
  7287  094E  0087               	movwf	7
  7288  094F  0820               	movf	?_UART_buff_modulo_inc,w
  7289  0950  3FC0               	movwi [0]fsr1
  7290  0951  0821               	movf	?_UART_buff_modulo_inc+1,w
  7291  0952  3FC1               	movwi [1]fsr1
  7292  0953  0008               	return
  7293  0954                     __end_of_UART_buff_put:	
  7294                           
  7295                           	psect	text33
  7296  161E                     __ptext33:	
  7297 ;; *************** function _UART_buff_get *****************
  7298 ;; Defined at:
  7299 ;;		line 73 in file "UART.c"
  7300 ;; Parameters:    Size  Location     Type
  7301 ;;  _this           1    wreg     PTR struct UART_ring_buf
  7302 ;;		 -> output_buffer(26), input_buffer(26), 
  7303 ;; Auto vars:     Size  Location     Type
  7304 ;;  _this           1   10[BANK0 ] PTR struct UART_ring_buf
  7305 ;;		 -> output_buffer(26), input_buffer(26), 
  7306 ;;  c               1    9[BANK0 ] unsigned char 
  7307 ;; Return value:  Size  Location     Type
  7308 ;;                  1    wreg      unsigned char 
  7309 ;; Registers used:
  7310 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7311 ;; Tracked objects:
  7312 ;;		On entry : 0/0
  7313 ;;		On exit  : 0/0
  7314 ;;		Unchanged: 0/0
  7315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7317 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7318 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7319 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7320 ;;Total ram usage:        5 bytes
  7321 ;; Hardware stack levels used:    1
  7322 ;; Hardware stack levels required when called:    5
  7323 ;; This function calls:
  7324 ;;		_UART_buff_modulo_inc
  7325 ;; This function is called by:
  7326 ;;		_Send_put
  7327 ;;		_Receive_get
  7328 ;; This function uses a non-reentrant model
  7329 ;;
  7330                           
  7331                           
  7332                           ;psect for function _UART_buff_get
  7333  161E                     _UART_buff_get:	
  7334                           
  7335                           ;incstack = 0
  7336                           ; Regs used in _UART_buff_get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7337                           ;UART_buff_get@_this stored from wreg
  7338  161E  0020               	movlb	0	; select bank0
  7339  161F  00AA               	movwf	UART_buff_get@_this
  7340                           
  7341                           ;UART.c: 74: unsigned char c;
  7342                           ;UART.c: 75: if (_this->count > 0) {
  7343  1620  082A               	movf	UART_buff_get@_this,w
  7344  1621  3E18               	addlw	24
  7345  1622  0086               	movwf	6
  7346  1623  3001               	movlw	1	; select bank2/3
  7347  1624  0087               	movwf	7
  7348  1625  3F40               	moviw [0]fsr1
  7349  1626  00A6               	movwf	??_UART_buff_get
  7350  1627  3F41               	moviw [1]fsr1
  7351  1628  00A7               	movwf	??_UART_buff_get+1
  7352  1629  0827               	movf	??_UART_buff_get+1,w
  7353  162A  3A80               	xorlw	128
  7354  162B  00A8               	movwf	??_UART_buff_get+2
  7355  162C  3080               	movlw	128
  7356  162D  0228               	subwf	??_UART_buff_get+2,w
  7357  162E  1D03               	skipz
  7358  162F  2E32               	goto	u2205
  7359  1630  3001               	movlw	1
  7360  1631  0226               	subwf	??_UART_buff_get,w
  7361  1632                     u2205:	
  7362  1632  1C03               	skipc
  7363  1633  2E6B               	goto	l2124
  7364                           
  7365                           ;UART.c: 76: c = _this->buf[_this->tail];
  7366  1634  0020               	movlb	0	; select bank0
  7367  1635  082A               	movf	UART_buff_get@_this,w
  7368  1636  3E16               	addlw	22
  7369  1637  0086               	movwf	6
  7370  1638  3001               	movlw	1	; select bank2/3
  7371  1639  0087               	movwf	7
  7372  163A  0801               	movf	1,w
  7373  163B  072A               	addwf	UART_buff_get@_this,w
  7374  163C  00A6               	movwf	??_UART_buff_get
  7375  163D  0826               	movf	??_UART_buff_get,w
  7376  163E  0086               	movwf	6
  7377  163F  3001               	movlw	1	; select bank2/3
  7378  1640  0087               	movwf	7
  7379  1641  0801               	movf	1,w
  7380  1642  00A7               	movwf	??_UART_buff_get+1
  7381  1643  0827               	movf	??_UART_buff_get+1,w
  7382  1644  00A9               	movwf	UART_buff_get@c
  7383                           
  7384                           ;UART.c: 77: _this->tail = UART_buff_modulo_inc(_this->tail, 20);
  7385  1645  082A               	movf	UART_buff_get@_this,w
  7386  1646  3E16               	addlw	22
  7387  1647  0086               	movwf	6
  7388  1648  3001               	movlw	1	; select bank2/3
  7389  1649  0087               	movwf	7
  7390  164A  3F40               	moviw [0]fsr1
  7391  164B  00A0               	movwf	UART_buff_modulo_inc@value
  7392  164C  3F41               	moviw [1]fsr1
  7393  164D  00A1               	movwf	UART_buff_modulo_inc@value+1
  7394  164E  3014               	movlw	20
  7395  164F  00A2               	movwf	UART_buff_modulo_inc@modulus
  7396  1650  3000               	movlw	0
  7397  1651  00A3               	movwf	UART_buff_modulo_inc@modulus+1
  7398  1652  3193  2332  3196   	fcall	_UART_buff_modulo_inc
  7399  1655  0020               	movlb	0	; select bank0
  7400  1656  082A               	movf	UART_buff_get@_this,w
  7401  1657  3E16               	addlw	22
  7402  1658  0086               	movwf	6
  7403  1659  3001               	movlw	1	; select bank2/3
  7404  165A  0087               	movwf	7
  7405  165B  0820               	movf	?_UART_buff_modulo_inc,w
  7406  165C  3FC0               	movwi [0]fsr1
  7407  165D  0821               	movf	?_UART_buff_modulo_inc+1,w
  7408  165E  3FC1               	movwi [1]fsr1
  7409                           
  7410                           ;UART.c: 78: --_this->count;
  7411  165F  082A               	movf	UART_buff_get@_this,w
  7412  1660  3E18               	addlw	24
  7413  1661  0086               	movwf	6
  7414  1662  3001               	movlw	1	; select bank2/3
  7415  1663  0087               	movwf	7
  7416  1664  30FF               	movlw	255
  7417  1665  0781               	addwf	1,f
  7418  1666  3141               	addfsr 1,1
  7419  1667  30FF               	movlw	255
  7420  1668  3D81               	addwfc	1,f
  7421  1669  317F               	addfsr 1,-1
  7422                           
  7423                           ;UART.c: 79: } else {
  7424  166A  2E6D               	goto	l2126
  7425  166B                     l2124:	
  7426                           
  7427                           ;UART.c: 80: c = 0;
  7428  166B  0020               	movlb	0	; select bank0
  7429  166C  01A9               	clrf	UART_buff_get@c
  7430  166D                     l2126:	
  7431                           
  7432                           ;UART.c: 81: }
  7433                           ;UART.c: 82: return (c);
  7434  166D  0829               	movf	UART_buff_get@c,w
  7435  166E  0008               	return
  7436  166F                     __end_of_UART_buff_get:	
  7437                           
  7438                           	psect	text34
  7439  1332                     __ptext34:	
  7440 ;; *************** function _UART_buff_modulo_inc *****************
  7441 ;; Defined at:
  7442 ;;		line 89 in file "UART.c"
  7443 ;; Parameters:    Size  Location     Type
  7444 ;;  value           2    0[BANK0 ] const unsigned int 
  7445 ;;  modulus         2    2[BANK0 ] const unsigned int 
  7446 ;; Auto vars:     Size  Location     Type
  7447 ;;  my_value        2    4[BANK0 ] unsigned int 
  7448 ;; Return value:  Size  Location     Type
  7449 ;;                  2    0[BANK0 ] unsigned int 
  7450 ;; Registers used:
  7451 ;;		wreg, status,2, status,0
  7452 ;; Tracked objects:
  7453 ;;		On entry : 0/0
  7454 ;;		On exit  : 0/0
  7455 ;;		Unchanged: 0/0
  7456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7457 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7458 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7460 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7461 ;;Total ram usage:        6 bytes
  7462 ;; Hardware stack levels used:    1
  7463 ;; Hardware stack levels required when called:    4
  7464 ;; This function calls:
  7465 ;;		Nothing
  7466 ;; This function is called by:
  7467 ;;		_UART_buff_put
  7468 ;;		_UART_buff_get
  7469 ;; This function uses a non-reentrant model
  7470 ;;
  7471                           
  7472                           
  7473                           ;psect for function _UART_buff_modulo_inc
  7474  1332                     _UART_buff_modulo_inc:	
  7475                           
  7476                           ;UART.c: 90: unsigned int my_value = value + 1;
  7477                           
  7478                           ;incstack = 0
  7479                           ; Regs used in _UART_buff_modulo_inc: [wreg+status,2+status,0]
  7480  1332  0020               	movlb	0	; select bank0
  7481  1333  0820               	movf	UART_buff_modulo_inc@value,w
  7482  1334  3E01               	addlw	1
  7483  1335  00A4               	movwf	UART_buff_modulo_inc@my_value
  7484  1336  3000               	movlw	0
  7485  1337  3D21               	addwfc	UART_buff_modulo_inc@value+1,w
  7486  1338  00A5               	movwf	UART_buff_modulo_inc@my_value+1
  7487                           
  7488                           ;UART.c: 91: if (my_value >= modulus) {
  7489  1339  0823               	movf	UART_buff_modulo_inc@modulus+1,w
  7490  133A  0225               	subwf	UART_buff_modulo_inc@my_value+1,w
  7491  133B  1D03               	skipz
  7492  133C  2B3F               	goto	u2185
  7493  133D  0822               	movf	UART_buff_modulo_inc@modulus,w
  7494  133E  0224               	subwf	UART_buff_modulo_inc@my_value,w
  7495  133F                     u2185:	
  7496  133F  1C03               	skipc
  7497  1340  2B43               	goto	l2098
  7498                           
  7499                           ;UART.c: 92: my_value = 0;
  7500  1341  01A4               	clrf	UART_buff_modulo_inc@my_value
  7501  1342  01A5               	clrf	UART_buff_modulo_inc@my_value+1
  7502  1343                     l2098:	
  7503                           
  7504                           ;UART.c: 93: }
  7505                           ;UART.c: 94: return (my_value);
  7506  1343  0825               	movf	UART_buff_modulo_inc@my_value+1,w
  7507  1344  00A1               	movwf	?_UART_buff_modulo_inc+1
  7508  1345  0824               	movf	UART_buff_modulo_inc@my_value,w
  7509  1346  00A0               	movwf	?_UART_buff_modulo_inc
  7510  1347  0008               	return
  7511  1348                     __end_of_UART_buff_modulo_inc:	
  7512                           
  7513                           	psect	text35
  7514  05C6                     __ptext35:	
  7515 ;; *************** function _fround *****************
  7516 ;; Defined at:
  7517 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  7518 ;; Parameters:    Size  Location     Type
  7519 ;;  prec            1    wreg     unsigned char 
  7520 ;; Auto vars:     Size  Location     Type
  7521 ;;  prec            1   51[BANK0 ] unsigned char 
  7522 ;; Return value:  Size  Location     Type
  7523 ;;                  3   38[BANK0 ] unsigned char 
  7524 ;; Registers used:
  7525 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7526 ;; Tracked objects:
  7527 ;;		On entry : 0/0
  7528 ;;		On exit  : 0/0
  7529 ;;		Unchanged: 0/0
  7530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7531 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7532 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7533 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7534 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7535 ;;Total ram usage:       14 bytes
  7536 ;; Hardware stack levels used:    1
  7537 ;; Hardware stack levels required when called:    6
  7538 ;; This function calls:
  7539 ;;		___awdiv
  7540 ;;		___awmod
  7541 ;;		___ftmul
  7542 ;;		___wmul
  7543 ;; This function is called by:
  7544 ;;		_printf
  7545 ;; This function uses a non-reentrant model
  7546 ;;
  7547                           
  7548                           
  7549                           ;psect for function _fround
  7550  05C6                     _fround:	
  7551                           
  7552                           ;incstack = 0
  7553                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7554                           ;fround@prec stored from wreg
  7555  05C6  0020               	movlb	0	; select bank0
  7556  05C7  00D3               	movwf	fround@prec
  7557                           
  7558                           ;doprnt.c: 413: if(prec>=110)
  7559  05C8  306E               	movlw	110
  7560  05C9  0253               	subwf	fround@prec,w
  7561  05CA  1C03               	skipc
  7562  05CB  2E87               	goto	l2400
  7563                           
  7564                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7565  05CC  300A               	movlw	10
  7566  05CD  00A7               	movwf	___awdiv@divisor
  7567  05CE  3000               	movlw	0
  7568  05CF  00A8               	movwf	___awdiv@divisor+1
  7569  05D0  0853               	movf	fround@prec,w
  7570  05D1  00C9               	movwf	??_fround
  7571  05D2  01CA               	clrf	??_fround+1
  7572  05D3  0849               	movf	??_fround,w
  7573  05D4  00A2               	movwf	___awmod@dividend
  7574  05D5  084A               	movf	??_fround+1,w
  7575  05D6  00A3               	movwf	___awmod@dividend+1
  7576  05D7  3064               	movlw	100
  7577  05D8  00A0               	movwf	___awmod@divisor
  7578  05D9  3000               	movlw	0
  7579  05DA  00A1               	movwf	___awmod@divisor+1
  7580  05DB  3195  258B  3185   	fcall	___awmod
  7581  05DE  0020               	movlb	0	; select bank0
  7582  05DF  0821               	movf	?___awmod+1,w
  7583  05E0  00AA               	movwf	___awdiv@dividend+1
  7584  05E1  0820               	movf	?___awmod,w
  7585  05E2  00A9               	movwf	___awdiv@dividend
  7586  05E3  3196  266F  3185   	fcall	___awdiv
  7587  05E6  0020               	movlb	0	; select bank0
  7588  05E7  0827               	movf	?___awdiv,w
  7589  05E8  3E09               	addlw	9
  7590  05E9  00B0               	movwf	___wmul@multiplier
  7591  05EA  3000               	movlw	0
  7592  05EB  3D28               	addwfc	?___awdiv+1,w
  7593  05EC  00B1               	movwf	___wmul@multiplier+1
  7594  05ED  3003               	movlw	3
  7595  05EE  00B2               	movwf	___wmul@multiplicand
  7596  05EF  3000               	movlw	0
  7597  05F0  00B3               	movwf	___wmul@multiplicand+1
  7598  05F1  3193  238F  3185   	fcall	___wmul
  7599  05F4  0020               	movlb	0	; select bank0
  7600  05F5  0831               	movf	?___wmul+1,w
  7601  05F6  0085               	movwf	5
  7602  05F7  0830               	movf	?___wmul,w
  7603  05F8  0084               	movwf	4
  7604  05F9  3028               	movlw	low (__npowers_| (0+32768))
  7605  05FA  0784               	addwf	4,f
  7606  05FB  3090               	movlw	high (__npowers_| (0+32768))
  7607  05FC  3D85               	addwfc	5,f
  7608  05FD  3F00               	moviw [0]fsr0
  7609  05FE  00B6               	movwf	___ftmul@f1
  7610  05FF  3F01               	moviw [1]fsr0
  7611  0600  00B7               	movwf	___ftmul@f1+1
  7612  0601  3F02               	moviw [2]fsr0
  7613  0602  00B8               	movwf	___ftmul@f1+2
  7614  0603  3064               	movlw	100
  7615  0604  00A7               	movwf	___awdiv@divisor
  7616  0605  3000               	movlw	0
  7617  0606  00A8               	movwf	___awdiv@divisor+1
  7618  0607  0853               	movf	fround@prec,w
  7619  0608  00CB               	movwf	??_fround+2
  7620  0609  01CC               	clrf	??_fround+3
  7621  060A  084B               	movf	??_fround+2,w
  7622  060B  00A9               	movwf	___awdiv@dividend
  7623  060C  084C               	movf	??_fround+3,w
  7624  060D  00AA               	movwf	___awdiv@dividend+1
  7625  060E  3196  266F  3185   	fcall	___awdiv
  7626  0611  0020               	movlb	0	; select bank0
  7627  0612  0827               	movf	?___awdiv,w
  7628  0613  3E12               	addlw	18
  7629  0614  00B0               	movwf	___wmul@multiplier
  7630  0615  3000               	movlw	0
  7631  0616  3D28               	addwfc	?___awdiv+1,w
  7632  0617  00B1               	movwf	___wmul@multiplier+1
  7633  0618  3003               	movlw	3
  7634  0619  00B2               	movwf	___wmul@multiplicand
  7635  061A  3000               	movlw	0
  7636  061B  00B3               	movwf	___wmul@multiplicand+1
  7637  061C  3193  238F  3185   	fcall	___wmul
  7638  061F  0020               	movlb	0	; select bank0
  7639  0620  0831               	movf	?___wmul+1,w
  7640  0621  0085               	movwf	5
  7641  0622  0830               	movf	?___wmul,w
  7642  0623  0084               	movwf	4
  7643  0624  3028               	movlw	low (__npowers_| (0+32768))
  7644  0625  0784               	addwf	4,f
  7645  0626  3090               	movlw	high (__npowers_| (0+32768))
  7646  0627  3D85               	addwfc	5,f
  7647  0628  3F00               	moviw [0]fsr0
  7648  0629  00B9               	movwf	___ftmul@f2
  7649  062A  3F01               	moviw [1]fsr0
  7650  062B  00BA               	movwf	___ftmul@f2+1
  7651  062C  3F02               	moviw [2]fsr0
  7652  062D  00BB               	movwf	___ftmul@f2+2
  7653  062E  3189  21FD  3185   	fcall	___ftmul
  7654  0631  0020               	movlb	0	; select bank0
  7655  0632  0836               	movf	?___ftmul,w
  7656  0633  00D0               	movwf	_fround$1272
  7657  0634  0837               	movf	?___ftmul+1,w
  7658  0635  00D1               	movwf	_fround$1272+1
  7659  0636  0838               	movf	?___ftmul+2,w
  7660  0637  00D2               	movwf	_fround$1272+2
  7661                           
  7662                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7663  0638  0853               	movf	fround@prec,w
  7664  0639  00C9               	movwf	??_fround
  7665  063A  01CA               	clrf	??_fround+1
  7666  063B  0849               	movf	??_fround,w
  7667  063C  00A2               	movwf	___awmod@dividend
  7668  063D  084A               	movf	??_fround+1,w
  7669  063E  00A3               	movwf	___awmod@dividend+1
  7670  063F  300A               	movlw	10
  7671  0640  00A0               	movwf	___awmod@divisor
  7672  0641  3000               	movlw	0
  7673  0642  00A1               	movwf	___awmod@divisor+1
  7674  0643  3195  258B  3185   	fcall	___awmod
  7675  0646  0020               	movlb	0	; select bank0
  7676  0647  0821               	movf	?___awmod+1,w
  7677  0648  00B1               	movwf	___wmul@multiplier+1
  7678  0649  0820               	movf	?___awmod,w
  7679  064A  00B0               	movwf	___wmul@multiplier
  7680  064B  3003               	movlw	3
  7681  064C  00B2               	movwf	___wmul@multiplicand
  7682  064D  3000               	movlw	0
  7683  064E  00B3               	movwf	___wmul@multiplicand+1
  7684  064F  3193  238F  3185   	fcall	___wmul
  7685  0652  0020               	movlb	0	; select bank0
  7686  0653  0831               	movf	?___wmul+1,w
  7687  0654  0085               	movwf	5
  7688  0655  0830               	movf	?___wmul,w
  7689  0656  0084               	movwf	4
  7690  0657  3028               	movlw	low (__npowers_| (0+32768))
  7691  0658  0784               	addwf	4,f
  7692  0659  3090               	movlw	high (__npowers_| (0+32768))
  7693  065A  3D85               	addwfc	5,f
  7694  065B  3F00               	moviw [0]fsr0
  7695  065C  00B6               	movwf	___ftmul@f1
  7696  065D  3F01               	moviw [1]fsr0
  7697  065E  00B7               	movwf	___ftmul@f1+1
  7698  065F  3F02               	moviw [2]fsr0
  7699  0660  00B8               	movwf	___ftmul@f1+2
  7700  0661  0850               	movf	_fround$1272,w
  7701  0662  00B9               	movwf	___ftmul@f2
  7702  0663  0851               	movf	_fround$1272+1,w
  7703  0664  00BA               	movwf	___ftmul@f2+1
  7704  0665  0852               	movf	_fround$1272+2,w
  7705  0666  00BB               	movwf	___ftmul@f2+2
  7706  0667  3189  21FD  3185   	fcall	___ftmul
  7707  066A  0020               	movlb	0	; select bank0
  7708  066B  0836               	movf	?___ftmul,w
  7709  066C  00CD               	movwf	_fround$1273
  7710  066D  0837               	movf	?___ftmul+1,w
  7711  066E  00CE               	movwf	_fround$1273+1
  7712  066F  0838               	movf	?___ftmul+2,w
  7713  0670  00CF               	movwf	_fround$1273+2
  7714                           
  7715                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7716  0671  3000               	movlw	0
  7717  0672  00B6               	movwf	___ftmul@f1
  7718  0673  3000               	movlw	0
  7719  0674  00B7               	movwf	___ftmul@f1+1
  7720  0675  303F               	movlw	63
  7721  0676  00B8               	movwf	___ftmul@f1+2
  7722  0677  084D               	movf	_fround$1273,w
  7723  0678  00B9               	movwf	___ftmul@f2
  7724  0679  084E               	movf	_fround$1273+1,w
  7725  067A  00BA               	movwf	___ftmul@f2+1
  7726  067B  084F               	movf	_fround$1273+2,w
  7727  067C  00BB               	movwf	___ftmul@f2+2
  7728  067D  3189  21FD         	fcall	___ftmul
  7729  067F  0020               	movlb	0	; select bank0
  7730  0680  0836               	movf	?___ftmul,w
  7731  0681  00C6               	movwf	?_fround
  7732  0682  0837               	movf	?___ftmul+1,w
  7733  0683  00C7               	movwf	?_fround+1
  7734  0684  0838               	movf	?___ftmul+2,w
  7735  0685  00C8               	movwf	?_fround+2
  7736  0686  0008               	return
  7737  0687                     l2400:	
  7738                           
  7739                           ;doprnt.c: 415: else if(prec > 10)
  7740  0687  300B               	movlw	11
  7741  0688  0253               	subwf	fround@prec,w
  7742  0689  1C03               	skipc
  7743  068A  2EFF               	goto	l2408
  7744                           
  7745                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7746  068B  0853               	movf	fround@prec,w
  7747  068C  00C9               	movwf	??_fround
  7748  068D  01CA               	clrf	??_fround+1
  7749  068E  0849               	movf	??_fround,w
  7750  068F  00A2               	movwf	___awmod@dividend
  7751  0690  084A               	movf	??_fround+1,w
  7752  0691  00A3               	movwf	___awmod@dividend+1
  7753  0692  300A               	movlw	10
  7754  0693  00A0               	movwf	___awmod@divisor
  7755  0694  3000               	movlw	0
  7756  0695  00A1               	movwf	___awmod@divisor+1
  7757  0696  3195  258B  3185   	fcall	___awmod
  7758  0699  0020               	movlb	0	; select bank0
  7759  069A  0821               	movf	?___awmod+1,w
  7760  069B  00B1               	movwf	___wmul@multiplier+1
  7761  069C  0820               	movf	?___awmod,w
  7762  069D  00B0               	movwf	___wmul@multiplier
  7763  069E  3003               	movlw	3
  7764  069F  00B2               	movwf	___wmul@multiplicand
  7765  06A0  3000               	movlw	0
  7766  06A1  00B3               	movwf	___wmul@multiplicand+1
  7767  06A2  3193  238F  3185   	fcall	___wmul
  7768  06A5  0020               	movlb	0	; select bank0
  7769  06A6  0831               	movf	?___wmul+1,w
  7770  06A7  0085               	movwf	5
  7771  06A8  0830               	movf	?___wmul,w
  7772  06A9  0084               	movwf	4
  7773  06AA  3028               	movlw	low (__npowers_| (0+32768))
  7774  06AB  0784               	addwf	4,f
  7775  06AC  3090               	movlw	high (__npowers_| (0+32768))
  7776  06AD  3D85               	addwfc	5,f
  7777  06AE  3F00               	moviw [0]fsr0
  7778  06AF  00B6               	movwf	___ftmul@f1
  7779  06B0  3F01               	moviw [1]fsr0
  7780  06B1  00B7               	movwf	___ftmul@f1+1
  7781  06B2  3F02               	moviw [2]fsr0
  7782  06B3  00B8               	movwf	___ftmul@f1+2
  7783  06B4  300A               	movlw	10
  7784  06B5  00A7               	movwf	___awdiv@divisor
  7785  06B6  3000               	movlw	0
  7786  06B7  00A8               	movwf	___awdiv@divisor+1
  7787  06B8  0853               	movf	fround@prec,w
  7788  06B9  00CB               	movwf	??_fround+2
  7789  06BA  01CC               	clrf	??_fround+3
  7790  06BB  084B               	movf	??_fround+2,w
  7791  06BC  00A9               	movwf	___awdiv@dividend
  7792  06BD  084C               	movf	??_fround+3,w
  7793  06BE  00AA               	movwf	___awdiv@dividend+1
  7794  06BF  3196  266F  3185   	fcall	___awdiv
  7795  06C2  0020               	movlb	0	; select bank0
  7796  06C3  0827               	movf	?___awdiv,w
  7797  06C4  3E09               	addlw	9
  7798  06C5  00B0               	movwf	___wmul@multiplier
  7799  06C6  3000               	movlw	0
  7800  06C7  3D28               	addwfc	?___awdiv+1,w
  7801  06C8  00B1               	movwf	___wmul@multiplier+1
  7802  06C9  3003               	movlw	3
  7803  06CA  00B2               	movwf	___wmul@multiplicand
  7804  06CB  3000               	movlw	0
  7805  06CC  00B3               	movwf	___wmul@multiplicand+1
  7806  06CD  3193  238F  3185   	fcall	___wmul
  7807  06D0  0020               	movlb	0	; select bank0
  7808  06D1  0831               	movf	?___wmul+1,w
  7809  06D2  0085               	movwf	5
  7810  06D3  0830               	movf	?___wmul,w
  7811  06D4  0084               	movwf	4
  7812  06D5  3028               	movlw	low (__npowers_| (0+32768))
  7813  06D6  0784               	addwf	4,f
  7814  06D7  3090               	movlw	high (__npowers_| (0+32768))
  7815  06D8  3D85               	addwfc	5,f
  7816  06D9  3F00               	moviw [0]fsr0
  7817  06DA  00B9               	movwf	___ftmul@f2
  7818  06DB  3F01               	moviw [1]fsr0
  7819  06DC  00BA               	movwf	___ftmul@f2+1
  7820  06DD  3F02               	moviw [2]fsr0
  7821  06DE  00BB               	movwf	___ftmul@f2+2
  7822  06DF  3189  21FD  3185   	fcall	___ftmul
  7823  06E2  0020               	movlb	0	; select bank0
  7824  06E3  0836               	movf	?___ftmul,w
  7825  06E4  00D0               	movwf	_fround$1272
  7826  06E5  0837               	movf	?___ftmul+1,w
  7827  06E6  00D1               	movwf	_fround$1272+1
  7828  06E7  0838               	movf	?___ftmul+2,w
  7829  06E8  00D2               	movwf	_fround$1272+2
  7830                           
  7831                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7832  06E9  3000               	movlw	0
  7833  06EA  00B6               	movwf	___ftmul@f1
  7834  06EB  3000               	movlw	0
  7835  06EC  00B7               	movwf	___ftmul@f1+1
  7836  06ED  303F               	movlw	63
  7837  06EE  00B8               	movwf	___ftmul@f1+2
  7838  06EF  0850               	movf	_fround$1272,w
  7839  06F0  00B9               	movwf	___ftmul@f2
  7840  06F1  0851               	movf	_fround$1272+1,w
  7841  06F2  00BA               	movwf	___ftmul@f2+1
  7842  06F3  0852               	movf	_fround$1272+2,w
  7843  06F4  00BB               	movwf	___ftmul@f2+2
  7844  06F5  3189  21FD         	fcall	___ftmul
  7845  06F7  0020               	movlb	0	; select bank0
  7846  06F8  0836               	movf	?___ftmul,w
  7847  06F9  00C6               	movwf	?_fround
  7848  06FA  0837               	movf	?___ftmul+1,w
  7849  06FB  00C7               	movwf	?_fround+1
  7850  06FC  0838               	movf	?___ftmul+2,w
  7851  06FD  00C8               	movwf	?_fround+2
  7852  06FE  0008               	return
  7853  06FF                     l2408:	
  7854                           
  7855                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7856  06FF  3000               	movlw	0
  7857  0700  00B6               	movwf	___ftmul@f1
  7858  0701  3000               	movlw	0
  7859  0702  00B7               	movwf	___ftmul@f1+1
  7860  0703  303F               	movlw	63
  7861  0704  00B8               	movwf	___ftmul@f1+2
  7862  0705  0853               	movf	fround@prec,w
  7863  0706  00C9               	movwf	??_fround
  7864  0707  01CA               	clrf	??_fround+1
  7865  0708  0849               	movf	??_fround,w
  7866  0709  00B0               	movwf	___wmul@multiplier
  7867  070A  084A               	movf	??_fround+1,w
  7868  070B  00B1               	movwf	___wmul@multiplier+1
  7869  070C  3003               	movlw	3
  7870  070D  00B2               	movwf	___wmul@multiplicand
  7871  070E  3000               	movlw	0
  7872  070F  00B3               	movwf	___wmul@multiplicand+1
  7873  0710  3193  238F  3185   	fcall	___wmul
  7874  0713  0020               	movlb	0	; select bank0
  7875  0714  0831               	movf	?___wmul+1,w
  7876  0715  0085               	movwf	5
  7877  0716  0830               	movf	?___wmul,w
  7878  0717  0084               	movwf	4
  7879  0718  3028               	movlw	low (__npowers_| (0+32768))
  7880  0719  0784               	addwf	4,f
  7881  071A  3090               	movlw	high (__npowers_| (0+32768))
  7882  071B  3D85               	addwfc	5,f
  7883  071C  3F00               	moviw [0]fsr0
  7884  071D  00B9               	movwf	___ftmul@f2
  7885  071E  3F01               	moviw [1]fsr0
  7886  071F  00BA               	movwf	___ftmul@f2+1
  7887  0720  3F02               	moviw [2]fsr0
  7888  0721  00BB               	movwf	___ftmul@f2+2
  7889  0722  3189  21FD         	fcall	___ftmul
  7890  0724  0020               	movlb	0	; select bank0
  7891  0725  0836               	movf	?___ftmul,w
  7892  0726  00C6               	movwf	?_fround
  7893  0727  0837               	movf	?___ftmul+1,w
  7894  0728  00C7               	movwf	?_fround+1
  7895  0729  0838               	movf	?___ftmul+2,w
  7896  072A  00C8               	movwf	?_fround+2
  7897  072B  0008               	return
  7898  072C                     __end_of_fround:	
  7899                           
  7900                           	psect	text36
  7901  138F                     __ptext36:	
  7902 ;; *************** function ___wmul *****************
  7903 ;; Defined at:
  7904 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  7905 ;; Parameters:    Size  Location     Type
  7906 ;;  multiplier      2   16[BANK0 ] unsigned int 
  7907 ;;  multiplicand    2   18[BANK0 ] unsigned int 
  7908 ;; Auto vars:     Size  Location     Type
  7909 ;;  product         2   20[BANK0 ] unsigned int 
  7910 ;; Return value:  Size  Location     Type
  7911 ;;                  2   16[BANK0 ] unsigned int 
  7912 ;; Registers used:
  7913 ;;		wreg, status,2, status,0
  7914 ;; Tracked objects:
  7915 ;;		On entry : 0/0
  7916 ;;		On exit  : 0/0
  7917 ;;		Unchanged: 0/0
  7918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7919 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7920 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7922 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7923 ;;Total ram usage:        6 bytes
  7924 ;; Hardware stack levels used:    1
  7925 ;; Hardware stack levels required when called:    4
  7926 ;; This function calls:
  7927 ;;		Nothing
  7928 ;; This function is called by:
  7929 ;;		_fround
  7930 ;;		_scale
  7931 ;;		_printf
  7932 ;; This function uses a non-reentrant model
  7933 ;;
  7934                           
  7935                           
  7936                           ;psect for function ___wmul
  7937  138F                     ___wmul:	
  7938                           
  7939                           ;incstack = 0
  7940                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7941  138F  0020               	movlb	0	; select bank0
  7942  1390  01B4               	clrf	___wmul@product
  7943  1391  01B5               	clrf	___wmul@product+1
  7944  1392                     l2174:	
  7945  1392  1C30               	btfss	___wmul@multiplier,0
  7946  1393  2B98               	goto	l502
  7947  1394  0832               	movf	___wmul@multiplicand,w
  7948  1395  07B4               	addwf	___wmul@product,f
  7949  1396  0833               	movf	___wmul@multiplicand+1,w
  7950  1397  3DB5               	addwfc	___wmul@product+1,f
  7951  1398                     l502:	
  7952  1398  3001               	movlw	1
  7953  1399                     u2355:	
  7954  1399  35B2               	lslf	___wmul@multiplicand,f
  7955  139A  0DB3               	rlf	___wmul@multiplicand+1,f
  7956  139B  0B89               	decfsz	9,f
  7957  139C  2B99               	goto	u2355
  7958  139D  3001               	movlw	1
  7959  139E                     u2365:	
  7960  139E  36B1               	lsrf	___wmul@multiplier+1,f
  7961  139F  0CB0               	rrf	___wmul@multiplier,f
  7962  13A0  0B89               	decfsz	9,f
  7963  13A1  2B9E               	goto	u2365
  7964  13A2  0830               	movf	___wmul@multiplier,w
  7965  13A3  0431               	iorwf	___wmul@multiplier+1,w
  7966  13A4  1D03               	btfss	3,2
  7967  13A5  2B92               	goto	l2174
  7968  13A6  0835               	movf	___wmul@product+1,w
  7969  13A7  00B1               	movwf	?___wmul+1
  7970  13A8  0834               	movf	___wmul@product,w
  7971  13A9  00B0               	movwf	?___wmul
  7972  13AA  0008               	return
  7973  13AB                     __end_of___wmul:	
  7974                           
  7975                           	psect	text37
  7976  09FD                     __ptext37:	
  7977 ;; *************** function ___ftmul *****************
  7978 ;; Defined at:
  7979 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
  7980 ;; Parameters:    Size  Location     Type
  7981 ;;  f1              3   22[BANK0 ] float 
  7982 ;;  f2              3   25[BANK0 ] float 
  7983 ;; Auto vars:     Size  Location     Type
  7984 ;;  f3_as_produc    3   33[BANK0 ] unsigned um
  7985 ;;  sign            1   37[BANK0 ] unsigned char 
  7986 ;;  cntr            1   36[BANK0 ] unsigned char 
  7987 ;;  exp             1   32[BANK0 ] unsigned char 
  7988 ;; Return value:  Size  Location     Type
  7989 ;;                  3   22[BANK0 ] float 
  7990 ;; Registers used:
  7991 ;;		wreg, status,2, status,0, pclath, cstack
  7992 ;; Tracked objects:
  7993 ;;		On entry : 0/0
  7994 ;;		On exit  : 0/0
  7995 ;;		Unchanged: 0/0
  7996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7997 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7998 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7999 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8000 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8001 ;;Total ram usage:       16 bytes
  8002 ;; Hardware stack levels used:    1
  8003 ;; Hardware stack levels required when called:    5
  8004 ;; This function calls:
  8005 ;;		___ftpack
  8006 ;; This function is called by:
  8007 ;;		_RadioOperation
  8008 ;;		_fround
  8009 ;;		_scale
  8010 ;;		_printf
  8011 ;; This function uses a non-reentrant model
  8012 ;;
  8013                           
  8014                           
  8015                           ;psect for function ___ftmul
  8016  09FD                     ___ftmul:	
  8017                           
  8018                           ;incstack = 0
  8019                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8020  09FD  0020               	movlb	0	; select bank0
  8021  09FE  0836               	movf	___ftmul@f1,w
  8022  09FF  00BC               	movwf	??___ftmul
  8023  0A00  0837               	movf	___ftmul@f1+1,w
  8024  0A01  00BD               	movwf	??___ftmul+1
  8025  0A02  0838               	movf	___ftmul@f1+2,w
  8026  0A03  00BE               	movwf	??___ftmul+2
  8027  0A04  1003               	clrc
  8028  0A05  0D3D               	rlf	??___ftmul+1,w
  8029  0A06  0D3E               	rlf	??___ftmul+2,w
  8030  0A07  00BF               	movwf	??___ftmul+3
  8031  0A08  083F               	movf	??___ftmul+3,w
  8032  0A09  00C0               	movwf	___ftmul@exp
  8033  0A0A  0840               	movf	___ftmul@exp,w
  8034  0A0B  1D03               	btfss	3,2
  8035  0A0C  2A14               	goto	l2344
  8036  0A0D  3000               	movlw	0
  8037  0A0E  00B6               	movwf	?___ftmul
  8038  0A0F  3000               	movlw	0
  8039  0A10  00B7               	movwf	?___ftmul+1
  8040  0A11  3000               	movlw	0
  8041  0A12  00B8               	movwf	?___ftmul+2
  8042  0A13  0008               	return
  8043  0A14                     l2344:	
  8044  0A14  0839               	movf	___ftmul@f2,w
  8045  0A15  00BC               	movwf	??___ftmul
  8046  0A16  083A               	movf	___ftmul@f2+1,w
  8047  0A17  00BD               	movwf	??___ftmul+1
  8048  0A18  083B               	movf	___ftmul@f2+2,w
  8049  0A19  00BE               	movwf	??___ftmul+2
  8050  0A1A  1003               	clrc
  8051  0A1B  0D3D               	rlf	??___ftmul+1,w
  8052  0A1C  0D3E               	rlf	??___ftmul+2,w
  8053  0A1D  00BF               	movwf	??___ftmul+3
  8054  0A1E  083F               	movf	??___ftmul+3,w
  8055  0A1F  00C5               	movwf	___ftmul@sign
  8056  0A20  0845               	movf	___ftmul@sign,w
  8057  0A21  1D03               	btfss	3,2
  8058  0A22  2A2A               	goto	l2350
  8059  0A23  3000               	movlw	0
  8060  0A24  00B6               	movwf	?___ftmul
  8061  0A25  3000               	movlw	0
  8062  0A26  00B7               	movwf	?___ftmul+1
  8063  0A27  3000               	movlw	0
  8064  0A28  00B8               	movwf	?___ftmul+2
  8065  0A29  0008               	return
  8066  0A2A                     l2350:	
  8067  0A2A  0845               	movf	___ftmul@sign,w
  8068  0A2B  3E7B               	addlw	123
  8069  0A2C  00BC               	movwf	??___ftmul
  8070  0A2D  083C               	movf	??___ftmul,w
  8071  0A2E  07C0               	addwf	___ftmul@exp,f
  8072  0A2F  0836               	movf	___ftmul@f1,w
  8073  0A30  00BC               	movwf	??___ftmul
  8074  0A31  0837               	movf	___ftmul@f1+1,w
  8075  0A32  00BD               	movwf	??___ftmul+1
  8076  0A33  0838               	movf	___ftmul@f1+2,w
  8077  0A34  00BE               	movwf	??___ftmul+2
  8078  0A35  3010               	movlw	16
  8079  0A36                     u2825:	
  8080  0A36  36BE               	lsrf	??___ftmul+2,f
  8081  0A37  0CBD               	rrf	??___ftmul+1,f
  8082  0A38  0CBC               	rrf	??___ftmul,f
  8083  0A39  0B89               	decfsz	9,f
  8084  0A3A  2A36               	goto	u2825
  8085  0A3B  083C               	movf	??___ftmul,w
  8086  0A3C  00BF               	movwf	??___ftmul+3
  8087  0A3D  083F               	movf	??___ftmul+3,w
  8088  0A3E  00C5               	movwf	___ftmul@sign
  8089  0A3F  0839               	movf	___ftmul@f2,w
  8090  0A40  00BC               	movwf	??___ftmul
  8091  0A41  083A               	movf	___ftmul@f2+1,w
  8092  0A42  00BD               	movwf	??___ftmul+1
  8093  0A43  083B               	movf	___ftmul@f2+2,w
  8094  0A44  00BE               	movwf	??___ftmul+2
  8095  0A45  3010               	movlw	16
  8096  0A46                     u2835:	
  8097  0A46  36BE               	lsrf	??___ftmul+2,f
  8098  0A47  0CBD               	rrf	??___ftmul+1,f
  8099  0A48  0CBC               	rrf	??___ftmul,f
  8100  0A49  0B89               	decfsz	9,f
  8101  0A4A  2A46               	goto	u2835
  8102  0A4B  083C               	movf	??___ftmul,w
  8103  0A4C  00BF               	movwf	??___ftmul+3
  8104  0A4D  083F               	movf	??___ftmul+3,w
  8105  0A4E  06C5               	xorwf	___ftmul@sign,f
  8106  0A4F  3080               	movlw	128
  8107  0A50  00BC               	movwf	??___ftmul
  8108  0A51  083C               	movf	??___ftmul,w
  8109  0A52  05C5               	andwf	___ftmul@sign,f
  8110  0A53  17B7               	bsf	___ftmul@f1+1,7
  8111  0A54  17BA               	bsf	___ftmul@f2+1,7
  8112  0A55  30FF               	movlw	255
  8113  0A56  05B9               	andwf	___ftmul@f2,f
  8114  0A57  30FF               	movlw	255
  8115  0A58  05BA               	andwf	___ftmul@f2+1,f
  8116  0A59  3000               	movlw	0
  8117  0A5A  05BB               	andwf	___ftmul@f2+2,f
  8118  0A5B  3000               	movlw	0
  8119  0A5C  00C1               	movwf	___ftmul@f3_as_product
  8120  0A5D  3000               	movlw	0
  8121  0A5E  00C2               	movwf	___ftmul@f3_as_product+1
  8122  0A5F  3000               	movlw	0
  8123  0A60  00C3               	movwf	___ftmul@f3_as_product+2
  8124  0A61  3007               	movlw	7
  8125  0A62  00BC               	movwf	??___ftmul
  8126  0A63  083C               	movf	??___ftmul,w
  8127  0A64  00C4               	movwf	___ftmul@cntr
  8128  0A65                     l2362:	
  8129  0A65  1C36               	btfss	___ftmul@f1,0
  8130  0A66  2A6D               	goto	l2366
  8131  0A67  0839               	movf	___ftmul@f2,w
  8132  0A68  07C1               	addwf	___ftmul@f3_as_product,f
  8133  0A69  083A               	movf	___ftmul@f2+1,w
  8134  0A6A  3DC2               	addwfc	___ftmul@f3_as_product+1,f
  8135  0A6B  083B               	movf	___ftmul@f2+2,w
  8136  0A6C  3DC3               	addwfc	___ftmul@f3_as_product+2,f
  8137  0A6D                     l2366:	
  8138  0A6D  3001               	movlw	1
  8139  0A6E                     u2855:	
  8140  0A6E  36B8               	lsrf	___ftmul@f1+2,f
  8141  0A6F  0CB7               	rrf	___ftmul@f1+1,f
  8142  0A70  0CB6               	rrf	___ftmul@f1,f
  8143  0A71  0B89               	decfsz	9,f
  8144  0A72  2A6E               	goto	u2855
  8145  0A73  3001               	movlw	1
  8146  0A74                     u2865:	
  8147  0A74  35B9               	lslf	___ftmul@f2,f
  8148  0A75  0DBA               	rlf	___ftmul@f2+1,f
  8149  0A76  0DBB               	rlf	___ftmul@f2+2,f
  8150  0A77  0B89               	decfsz	9,f
  8151  0A78  2A74               	goto	u2865
  8152  0A79  3001               	movlw	1
  8153  0A7A  02C4               	subwf	___ftmul@cntr,f
  8154  0A7B  1D03               	btfss	3,2
  8155  0A7C  2A65               	goto	l2362
  8156  0A7D  3009               	movlw	9
  8157  0A7E  00BC               	movwf	??___ftmul
  8158  0A7F  083C               	movf	??___ftmul,w
  8159  0A80  00C4               	movwf	___ftmul@cntr
  8160  0A81                     l2374:	
  8161  0A81  1C36               	btfss	___ftmul@f1,0
  8162  0A82  2A89               	goto	l2378
  8163  0A83  0839               	movf	___ftmul@f2,w
  8164  0A84  07C1               	addwf	___ftmul@f3_as_product,f
  8165  0A85  083A               	movf	___ftmul@f2+1,w
  8166  0A86  3DC2               	addwfc	___ftmul@f3_as_product+1,f
  8167  0A87  083B               	movf	___ftmul@f2+2,w
  8168  0A88  3DC3               	addwfc	___ftmul@f3_as_product+2,f
  8169  0A89                     l2378:	
  8170  0A89  3001               	movlw	1
  8171  0A8A                     u2895:	
  8172  0A8A  36B8               	lsrf	___ftmul@f1+2,f
  8173  0A8B  0CB7               	rrf	___ftmul@f1+1,f
  8174  0A8C  0CB6               	rrf	___ftmul@f1,f
  8175  0A8D  0B89               	decfsz	9,f
  8176  0A8E  2A8A               	goto	u2895
  8177  0A8F  3001               	movlw	1
  8178  0A90                     u2905:	
  8179  0A90  36C3               	lsrf	___ftmul@f3_as_product+2,f
  8180  0A91  0CC2               	rrf	___ftmul@f3_as_product+1,f
  8181  0A92  0CC1               	rrf	___ftmul@f3_as_product,f
  8182  0A93  0B89               	decfsz	9,f
  8183  0A94  2A90               	goto	u2905
  8184  0A95  3001               	movlw	1
  8185  0A96  02C4               	subwf	___ftmul@cntr,f
  8186  0A97  1D03               	btfss	3,2
  8187  0A98  2A81               	goto	l2374
  8188  0A99  0841               	movf	___ftmul@f3_as_product,w
  8189  0A9A  00A0               	movwf	___ftpack@arg
  8190  0A9B  0842               	movf	___ftmul@f3_as_product+1,w
  8191  0A9C  00A1               	movwf	___ftpack@arg+1
  8192  0A9D  0843               	movf	___ftmul@f3_as_product+2,w
  8193  0A9E  00A2               	movwf	___ftpack@arg+2
  8194  0A9F  0840               	movf	___ftmul@exp,w
  8195  0AA0  00BC               	movwf	??___ftmul
  8196  0AA1  083C               	movf	??___ftmul,w
  8197  0AA2  00A3               	movwf	___ftpack@exp
  8198  0AA3  0845               	movf	___ftmul@sign,w
  8199  0AA4  00BD               	movwf	??___ftmul+1
  8200  0AA5  083D               	movf	??___ftmul+1,w
  8201  0AA6  00A4               	movwf	___ftpack@sign
  8202  0AA7  3197  2714         	fcall	___ftpack
  8203  0AA9  0020               	movlb	0	; select bank0
  8204  0AAA  0820               	movf	?___ftpack,w
  8205  0AAB  00B6               	movwf	?___ftmul
  8206  0AAC  0821               	movf	?___ftpack+1,w
  8207  0AAD  00B7               	movwf	?___ftmul+1
  8208  0AAE  0822               	movf	?___ftpack+2,w
  8209  0AAF  00B8               	movwf	?___ftmul+2
  8210  0AB0  0008               	return
  8211  0AB1                     __end_of___ftmul:	
  8212                           
  8213                           	psect	text38
  8214  158B                     __ptext38:	
  8215 ;; *************** function ___awmod *****************
  8216 ;; Defined at:
  8217 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  8218 ;; Parameters:    Size  Location     Type
  8219 ;;  divisor         2    0[BANK0 ] int 
  8220 ;;  dividend        2    2[BANK0 ] int 
  8221 ;; Auto vars:     Size  Location     Type
  8222 ;;  sign            1    6[BANK0 ] unsigned char 
  8223 ;;  counter         1    5[BANK0 ] unsigned char 
  8224 ;; Return value:  Size  Location     Type
  8225 ;;                  2    0[BANK0 ] int 
  8226 ;; Registers used:
  8227 ;;		wreg, status,2, status,0
  8228 ;; Tracked objects:
  8229 ;;		On entry : 0/0
  8230 ;;		On exit  : 0/0
  8231 ;;		Unchanged: 0/0
  8232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8233 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8234 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8235 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8236 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8237 ;;Total ram usage:        7 bytes
  8238 ;; Hardware stack levels used:    1
  8239 ;; Hardware stack levels required when called:    4
  8240 ;; This function calls:
  8241 ;;		Nothing
  8242 ;; This function is called by:
  8243 ;;		_fround
  8244 ;;		_scale
  8245 ;; This function uses a non-reentrant model
  8246 ;;
  8247                           
  8248                           
  8249                           ;psect for function ___awmod
  8250  158B                     ___awmod:	
  8251                           
  8252                           ;incstack = 0
  8253                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  8254  158B  0020               	movlb	0	; select bank0
  8255  158C  01A6               	clrf	___awmod@sign
  8256  158D  1FA3               	btfss	___awmod@dividend+1,7
  8257  158E  2D96               	goto	l2238
  8258  158F  09A2               	comf	___awmod@dividend,f
  8259  1590  09A3               	comf	___awmod@dividend+1,f
  8260  1591  0AA2               	incf	___awmod@dividend,f
  8261  1592  1903               	skipnz
  8262  1593  0AA3               	incf	___awmod@dividend+1,f
  8263  1594  01A6               	clrf	___awmod@sign
  8264  1595  0AA6               	incf	___awmod@sign,f
  8265  1596                     l2238:	
  8266  1596  1FA1               	btfss	___awmod@divisor+1,7
  8267  1597  2D9D               	goto	l2242
  8268  1598  09A0               	comf	___awmod@divisor,f
  8269  1599  09A1               	comf	___awmod@divisor+1,f
  8270  159A  0AA0               	incf	___awmod@divisor,f
  8271  159B  1903               	skipnz
  8272  159C  0AA1               	incf	___awmod@divisor+1,f
  8273  159D                     l2242:	
  8274  159D  0820               	movf	___awmod@divisor,w
  8275  159E  0421               	iorwf	___awmod@divisor+1,w
  8276  159F  1903               	btfsc	3,2
  8277  15A0  2DC4               	goto	l2260
  8278  15A1  01A5               	clrf	___awmod@counter
  8279  15A2  0AA5               	incf	___awmod@counter,f
  8280  15A3                     l2250:	
  8281  15A3  1BA1               	btfsc	___awmod@divisor+1,7
  8282  15A4  2DAF               	goto	l2252
  8283  15A5  3001               	movlw	1
  8284  15A6                     u2515:	
  8285  15A6  35A0               	lslf	___awmod@divisor,f
  8286  15A7  0DA1               	rlf	___awmod@divisor+1,f
  8287  15A8  0B89               	decfsz	9,f
  8288  15A9  2DA6               	goto	u2515
  8289  15AA  3001               	movlw	1
  8290  15AB  00A4               	movwf	??___awmod
  8291  15AC  0824               	movf	??___awmod,w
  8292  15AD  07A5               	addwf	___awmod@counter,f
  8293  15AE  2DA3               	goto	l2250
  8294  15AF                     l2252:	
  8295  15AF  0821               	movf	___awmod@divisor+1,w
  8296  15B0  0223               	subwf	___awmod@dividend+1,w
  8297  15B1  1D03               	skipz
  8298  15B2  2DB5               	goto	u2535
  8299  15B3  0820               	movf	___awmod@divisor,w
  8300  15B4  0222               	subwf	___awmod@dividend,w
  8301  15B5                     u2535:	
  8302  15B5  1C03               	skipc
  8303  15B6  2DBB               	goto	l2256
  8304  15B7  0820               	movf	___awmod@divisor,w
  8305  15B8  02A2               	subwf	___awmod@dividend,f
  8306  15B9  0821               	movf	___awmod@divisor+1,w
  8307  15BA  3BA3               	subwfb	___awmod@dividend+1,f
  8308  15BB                     l2256:	
  8309  15BB  3001               	movlw	1
  8310  15BC                     u2545:	
  8311  15BC  36A1               	lsrf	___awmod@divisor+1,f
  8312  15BD  0CA0               	rrf	___awmod@divisor,f
  8313  15BE  0B89               	decfsz	9,f
  8314  15BF  2DBC               	goto	u2545
  8315  15C0  3001               	movlw	1
  8316  15C1  02A5               	subwf	___awmod@counter,f
  8317  15C2  1D03               	btfss	3,2
  8318  15C3  2DAF               	goto	l2252
  8319  15C4                     l2260:	
  8320  15C4  0826               	movf	___awmod@sign,w
  8321  15C5  1903               	btfsc	3,2
  8322  15C6  2DCC               	goto	l2264
  8323  15C7  09A2               	comf	___awmod@dividend,f
  8324  15C8  09A3               	comf	___awmod@dividend+1,f
  8325  15C9  0AA2               	incf	___awmod@dividend,f
  8326  15CA  1903               	skipnz
  8327  15CB  0AA3               	incf	___awmod@dividend+1,f
  8328  15CC                     l2264:	
  8329  15CC  0823               	movf	___awmod@dividend+1,w
  8330  15CD  00A1               	movwf	?___awmod+1
  8331  15CE  0822               	movf	___awmod@dividend,w
  8332  15CF  00A0               	movwf	?___awmod
  8333  15D0  0008               	return
  8334  15D1                     __end_of___awmod:	
  8335                           
  8336                           	psect	text39
  8337  166F                     __ptext39:	
  8338 ;; *************** function ___awdiv *****************
  8339 ;; Defined at:
  8340 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  8341 ;; Parameters:    Size  Location     Type
  8342 ;;  divisor         2    7[BANK0 ] int 
  8343 ;;  dividend        2    9[BANK0 ] int 
  8344 ;; Auto vars:     Size  Location     Type
  8345 ;;  quotient        2   14[BANK0 ] int 
  8346 ;;  sign            1   13[BANK0 ] unsigned char 
  8347 ;;  counter         1   12[BANK0 ] unsigned char 
  8348 ;; Return value:  Size  Location     Type
  8349 ;;                  2    7[BANK0 ] int 
  8350 ;; Registers used:
  8351 ;;		wreg, status,2, status,0
  8352 ;; Tracked objects:
  8353 ;;		On entry : 0/0
  8354 ;;		On exit  : 0/0
  8355 ;;		Unchanged: 0/0
  8356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8357 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8358 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8359 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8360 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8361 ;;Total ram usage:        9 bytes
  8362 ;; Hardware stack levels used:    1
  8363 ;; Hardware stack levels required when called:    4
  8364 ;; This function calls:
  8365 ;;		Nothing
  8366 ;; This function is called by:
  8367 ;;		_fround
  8368 ;;		_scale
  8369 ;;		_printf
  8370 ;; This function uses a non-reentrant model
  8371 ;;
  8372                           
  8373                           
  8374                           ;psect for function ___awdiv
  8375  166F                     ___awdiv:	
  8376                           
  8377                           ;incstack = 0
  8378                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  8379  166F  0020               	movlb	0	; select bank0
  8380  1670  01AD               	clrf	___awdiv@sign
  8381  1671  1FA8               	btfss	___awdiv@divisor+1,7
  8382  1672  2E7A               	goto	l2194
  8383  1673  09A7               	comf	___awdiv@divisor,f
  8384  1674  09A8               	comf	___awdiv@divisor+1,f
  8385  1675  0AA7               	incf	___awdiv@divisor,f
  8386  1676  1903               	skipnz
  8387  1677  0AA8               	incf	___awdiv@divisor+1,f
  8388  1678  01AD               	clrf	___awdiv@sign
  8389  1679  0AAD               	incf	___awdiv@sign,f
  8390  167A                     l2194:	
  8391  167A  1FAA               	btfss	___awdiv@dividend+1,7
  8392  167B  2E85               	goto	l2200
  8393  167C  09A9               	comf	___awdiv@dividend,f
  8394  167D  09AA               	comf	___awdiv@dividend+1,f
  8395  167E  0AA9               	incf	___awdiv@dividend,f
  8396  167F  1903               	skipnz
  8397  1680  0AAA               	incf	___awdiv@dividend+1,f
  8398  1681  3001               	movlw	1
  8399  1682  00AB               	movwf	??___awdiv
  8400  1683  082B               	movf	??___awdiv,w
  8401  1684  06AD               	xorwf	___awdiv@sign,f
  8402  1685                     l2200:	
  8403  1685  01AE               	clrf	___awdiv@quotient
  8404  1686  01AF               	clrf	___awdiv@quotient+1
  8405  1687  0827               	movf	___awdiv@divisor,w
  8406  1688  0428               	iorwf	___awdiv@divisor+1,w
  8407  1689  1903               	btfsc	3,2
  8408  168A  2EB4               	goto	l2222
  8409  168B  01AC               	clrf	___awdiv@counter
  8410  168C  0AAC               	incf	___awdiv@counter,f
  8411  168D                     l2210:	
  8412  168D  1BA8               	btfsc	___awdiv@divisor+1,7
  8413  168E  2E99               	goto	l2212
  8414  168F  3001               	movlw	1
  8415  1690                     u2415:	
  8416  1690  35A7               	lslf	___awdiv@divisor,f
  8417  1691  0DA8               	rlf	___awdiv@divisor+1,f
  8418  1692  0B89               	decfsz	9,f
  8419  1693  2E90               	goto	u2415
  8420  1694  3001               	movlw	1
  8421  1695  00AB               	movwf	??___awdiv
  8422  1696  082B               	movf	??___awdiv,w
  8423  1697  07AC               	addwf	___awdiv@counter,f
  8424  1698  2E8D               	goto	l2210
  8425  1699                     l2212:	
  8426  1699  3001               	movlw	1
  8427  169A                     u2435:	
  8428  169A  35AE               	lslf	___awdiv@quotient,f
  8429  169B  0DAF               	rlf	___awdiv@quotient+1,f
  8430  169C  0B89               	decfsz	9,f
  8431  169D  2E9A               	goto	u2435
  8432  169E  0828               	movf	___awdiv@divisor+1,w
  8433  169F  022A               	subwf	___awdiv@dividend+1,w
  8434  16A0  1D03               	skipz
  8435  16A1  2EA4               	goto	u2445
  8436  16A2  0827               	movf	___awdiv@divisor,w
  8437  16A3  0229               	subwf	___awdiv@dividend,w
  8438  16A4                     u2445:	
  8439  16A4  1C03               	skipc
  8440  16A5  2EAB               	goto	l2218
  8441  16A6  0827               	movf	___awdiv@divisor,w
  8442  16A7  02A9               	subwf	___awdiv@dividend,f
  8443  16A8  0828               	movf	___awdiv@divisor+1,w
  8444  16A9  3BAA               	subwfb	___awdiv@dividend+1,f
  8445  16AA  142E               	bsf	___awdiv@quotient,0
  8446  16AB                     l2218:	
  8447  16AB  3001               	movlw	1
  8448  16AC                     u2455:	
  8449  16AC  36A8               	lsrf	___awdiv@divisor+1,f
  8450  16AD  0CA7               	rrf	___awdiv@divisor,f
  8451  16AE  0B89               	decfsz	9,f
  8452  16AF  2EAC               	goto	u2455
  8453  16B0  3001               	movlw	1
  8454  16B1  02AC               	subwf	___awdiv@counter,f
  8455  16B2  1D03               	btfss	3,2
  8456  16B3  2E99               	goto	l2212
  8457  16B4                     l2222:	
  8458  16B4  082D               	movf	___awdiv@sign,w
  8459  16B5  1903               	btfsc	3,2
  8460  16B6  2EBC               	goto	l2226
  8461  16B7  09AE               	comf	___awdiv@quotient,f
  8462  16B8  09AF               	comf	___awdiv@quotient+1,f
  8463  16B9  0AAE               	incf	___awdiv@quotient,f
  8464  16BA  1903               	skipnz
  8465  16BB  0AAF               	incf	___awdiv@quotient+1,f
  8466  16BC                     l2226:	
  8467  16BC  082F               	movf	___awdiv@quotient+1,w
  8468  16BD  00A8               	movwf	?___awdiv+1
  8469  16BE  082E               	movf	___awdiv@quotient,w
  8470  16BF  00A7               	movwf	?___awdiv
  8471  16C0  0008               	return
  8472  16C1                     __end_of___awdiv:	
  8473                           
  8474                           	psect	text40
  8475  072C                     __ptext40:	
  8476 ;; *************** function __tdiv_to_l_ *****************
  8477 ;; Defined at:
  8478 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdivl.c"
  8479 ;; Parameters:    Size  Location     Type
  8480 ;;  f1              3    0[BANK0 ] float 
  8481 ;;  f2              3    3[BANK0 ] float 
  8482 ;; Auto vars:     Size  Location     Type
  8483 ;;  quot            4   10[BANK0 ] unsigned long 
  8484 ;;  exp1            1   15[BANK0 ] unsigned char 
  8485 ;;  cntr            1   14[BANK0 ] unsigned char 
  8486 ;; Return value:  Size  Location     Type
  8487 ;;                  4    0[BANK0 ] unsigned long 
  8488 ;; Registers used:
  8489 ;;		wreg, status,2, status,0
  8490 ;; Tracked objects:
  8491 ;;		On entry : 0/0
  8492 ;;		On exit  : 0/0
  8493 ;;		Unchanged: 0/0
  8494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8495 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8496 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8497 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8498 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8499 ;;Total ram usage:       16 bytes
  8500 ;; Hardware stack levels used:    1
  8501 ;; Hardware stack levels required when called:    4
  8502 ;; This function calls:
  8503 ;;		Nothing
  8504 ;; This function is called by:
  8505 ;;		_printf
  8506 ;; This function uses a non-reentrant model
  8507 ;;
  8508                           
  8509                           
  8510                           ;psect for function __tdiv_to_l_
  8511  072C                     __tdiv_to_l_:	
  8512                           
  8513                           ;incstack = 0
  8514                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  8515  072C  0020               	movlb	0	; select bank0
  8516  072D  0820               	movf	__tdiv_to_l_@f1,w
  8517  072E  00A6               	movwf	??__tdiv_to_l_
  8518  072F  0821               	movf	__tdiv_to_l_@f1+1,w
  8519  0730  00A7               	movwf	??__tdiv_to_l_+1
  8520  0731  0822               	movf	__tdiv_to_l_@f1+2,w
  8521  0732  00A8               	movwf	??__tdiv_to_l_+2
  8522  0733  1003               	clrc
  8523  0734  0D27               	rlf	??__tdiv_to_l_+1,w
  8524  0735  0D28               	rlf	??__tdiv_to_l_+2,w
  8525  0736  00A9               	movwf	??__tdiv_to_l_+3
  8526  0737  0829               	movf	??__tdiv_to_l_+3,w
  8527  0738  00AF               	movwf	__tdiv_to_l_@exp1
  8528  0739  082F               	movf	__tdiv_to_l_@exp1,w
  8529  073A  1D03               	btfss	3,2
  8530  073B  2F45               	goto	l2458
  8531  073C  3000               	movlw	0
  8532  073D  00A3               	movwf	?__tdiv_to_l_+3
  8533  073E  3000               	movlw	0
  8534  073F  00A2               	movwf	?__tdiv_to_l_+2
  8535  0740  3000               	movlw	0
  8536  0741  00A1               	movwf	?__tdiv_to_l_+1
  8537  0742  3000               	movlw	0
  8538  0743  00A0               	movwf	?__tdiv_to_l_
  8539  0744  0008               	return
  8540  0745                     l2458:	
  8541  0745  0823               	movf	__tdiv_to_l_@f2,w
  8542  0746  00A6               	movwf	??__tdiv_to_l_
  8543  0747  0824               	movf	__tdiv_to_l_@f2+1,w
  8544  0748  00A7               	movwf	??__tdiv_to_l_+1
  8545  0749  0825               	movf	__tdiv_to_l_@f2+2,w
  8546  074A  00A8               	movwf	??__tdiv_to_l_+2
  8547  074B  1003               	clrc
  8548  074C  0D27               	rlf	??__tdiv_to_l_+1,w
  8549  074D  0D28               	rlf	??__tdiv_to_l_+2,w
  8550  074E  00A9               	movwf	??__tdiv_to_l_+3
  8551  074F  0829               	movf	??__tdiv_to_l_+3,w
  8552  0750  00AE               	movwf	__tdiv_to_l_@cntr
  8553  0751  082E               	movf	__tdiv_to_l_@cntr,w
  8554  0752  1D03               	btfss	3,2
  8555  0753  2F5D               	goto	l737
  8556  0754  3000               	movlw	0
  8557  0755  00A3               	movwf	?__tdiv_to_l_+3
  8558  0756  3000               	movlw	0
  8559  0757  00A2               	movwf	?__tdiv_to_l_+2
  8560  0758  3000               	movlw	0
  8561  0759  00A1               	movwf	?__tdiv_to_l_+1
  8562  075A  3000               	movlw	0
  8563  075B  00A0               	movwf	?__tdiv_to_l_
  8564  075C  0008               	return
  8565  075D                     l737:	
  8566  075D  17A1               	bsf	__tdiv_to_l_@f1+1,7
  8567  075E  30FF               	movlw	255
  8568  075F  05A0               	andwf	__tdiv_to_l_@f1,f
  8569  0760  30FF               	movlw	255
  8570  0761  05A1               	andwf	__tdiv_to_l_@f1+1,f
  8571  0762  3000               	movlw	0
  8572  0763  05A2               	andwf	__tdiv_to_l_@f1+2,f
  8573  0764  17A4               	bsf	__tdiv_to_l_@f2+1,7
  8574  0765  30FF               	movlw	255
  8575  0766  05A3               	andwf	__tdiv_to_l_@f2,f
  8576  0767  30FF               	movlw	255
  8577  0768  05A4               	andwf	__tdiv_to_l_@f2+1,f
  8578  0769  3000               	movlw	0
  8579  076A  05A5               	andwf	__tdiv_to_l_@f2+2,f
  8580  076B  3000               	movlw	0
  8581  076C  00AD               	movwf	__tdiv_to_l_@quot+3
  8582  076D  3000               	movlw	0
  8583  076E  00AC               	movwf	__tdiv_to_l_@quot+2
  8584  076F  3000               	movlw	0
  8585  0770  00AB               	movwf	__tdiv_to_l_@quot+1
  8586  0771  3000               	movlw	0
  8587  0772  00AA               	movwf	__tdiv_to_l_@quot
  8588  0773  307F               	movlw	127
  8589  0774  02AF               	subwf	__tdiv_to_l_@exp1,f
  8590  0775  3098               	movlw	152
  8591  0776  072E               	addwf	__tdiv_to_l_@cntr,w
  8592  0777  00A6               	movwf	??__tdiv_to_l_
  8593  0778  0826               	movf	??__tdiv_to_l_,w
  8594  0779  02AF               	subwf	__tdiv_to_l_@exp1,f
  8595  077A  3018               	movlw	24
  8596  077B  00A6               	movwf	??__tdiv_to_l_
  8597  077C  0826               	movf	??__tdiv_to_l_,w
  8598  077D  00AE               	movwf	__tdiv_to_l_@cntr
  8599  077E                     l2472:	
  8600  077E  3001               	movlw	1
  8601  077F                     u3015:	
  8602  077F  35AA               	lslf	__tdiv_to_l_@quot,f
  8603  0780  0DAB               	rlf	__tdiv_to_l_@quot+1,f
  8604  0781  0DAC               	rlf	__tdiv_to_l_@quot+2,f
  8605  0782  0DAD               	rlf	__tdiv_to_l_@quot+3,f
  8606  0783  0B89               	decfsz	9,f
  8607  0784  2F7F               	goto	u3015
  8608  0785  0825               	movf	__tdiv_to_l_@f2+2,w
  8609  0786  0222               	subwf	__tdiv_to_l_@f1+2,w
  8610  0787  1D03               	skipz
  8611  0788  2F8F               	goto	u3025
  8612  0789  0824               	movf	__tdiv_to_l_@f2+1,w
  8613  078A  0221               	subwf	__tdiv_to_l_@f1+1,w
  8614  078B  1D03               	skipz
  8615  078C  2F8F               	goto	u3025
  8616  078D  0823               	movf	__tdiv_to_l_@f2,w
  8617  078E  0220               	subwf	__tdiv_to_l_@f1,w
  8618  078F                     u3025:	
  8619  078F  1C03               	skipc
  8620  0790  2F98               	goto	l2480
  8621  0791  0823               	movf	__tdiv_to_l_@f2,w
  8622  0792  02A0               	subwf	__tdiv_to_l_@f1,f
  8623  0793  0824               	movf	__tdiv_to_l_@f2+1,w
  8624  0794  3BA1               	subwfb	__tdiv_to_l_@f1+1,f
  8625  0795  0825               	movf	__tdiv_to_l_@f2+2,w
  8626  0796  3BA2               	subwfb	__tdiv_to_l_@f1+2,f
  8627  0797  142A               	bsf	__tdiv_to_l_@quot,0
  8628  0798                     l2480:	
  8629  0798  3001               	movlw	1
  8630  0799                     u3035:	
  8631  0799  35A0               	lslf	__tdiv_to_l_@f1,f
  8632  079A  0DA1               	rlf	__tdiv_to_l_@f1+1,f
  8633  079B  0DA2               	rlf	__tdiv_to_l_@f1+2,f
  8634  079C  0B89               	decfsz	9,f
  8635  079D  2F99               	goto	u3035
  8636  079E  3001               	movlw	1
  8637  079F  02AE               	subwf	__tdiv_to_l_@cntr,f
  8638  07A0  1D03               	btfss	3,2
  8639  07A1  2F7E               	goto	l2472
  8640  07A2  1FAF               	btfss	__tdiv_to_l_@exp1,7
  8641  07A3  2FC0               	goto	l2492
  8642  07A4  082F               	movf	__tdiv_to_l_@exp1,w
  8643  07A5  3A80               	xorlw	128
  8644  07A6  3E97               	addlw	151
  8645  07A7  1803               	skipnc
  8646  07A8  2FB2               	goto	l2490
  8647  07A9  3000               	movlw	0
  8648  07AA  00A3               	movwf	?__tdiv_to_l_+3
  8649  07AB  3000               	movlw	0
  8650  07AC  00A2               	movwf	?__tdiv_to_l_+2
  8651  07AD  3000               	movlw	0
  8652  07AE  00A1               	movwf	?__tdiv_to_l_+1
  8653  07AF  3000               	movlw	0
  8654  07B0  00A0               	movwf	?__tdiv_to_l_
  8655  07B1  0008               	return
  8656  07B2                     l2490:	
  8657  07B2  3001               	movlw	1
  8658  07B3                     u3075:	
  8659  07B3  36AD               	lsrf	__tdiv_to_l_@quot+3,f
  8660  07B4  0CAC               	rrf	__tdiv_to_l_@quot+2,f
  8661  07B5  0CAB               	rrf	__tdiv_to_l_@quot+1,f
  8662  07B6  0CAA               	rrf	__tdiv_to_l_@quot,f
  8663  07B7  0B89               	decfsz	9,f
  8664  07B8  2FB3               	goto	u3075
  8665  07B9  3001               	movlw	1
  8666  07BA  00A6               	movwf	??__tdiv_to_l_
  8667  07BB  0826               	movf	??__tdiv_to_l_,w
  8668  07BC  07AF               	addwf	__tdiv_to_l_@exp1,f
  8669  07BD  1903               	btfsc	3,2
  8670  07BE  2FD9               	goto	l2500
  8671  07BF  2FB2               	goto	l2490
  8672  07C0                     l2492:	
  8673  07C0  3018               	movlw	24
  8674  07C1  022F               	subwf	__tdiv_to_l_@exp1,w
  8675  07C2  1C03               	skipc
  8676  07C3  2FD6               	goto	l747
  8677  07C4  3000               	movlw	0
  8678  07C5  00A3               	movwf	?__tdiv_to_l_+3
  8679  07C6  3000               	movlw	0
  8680  07C7  00A2               	movwf	?__tdiv_to_l_+2
  8681  07C8  3000               	movlw	0
  8682  07C9  00A1               	movwf	?__tdiv_to_l_+1
  8683  07CA  3000               	movlw	0
  8684  07CB  00A0               	movwf	?__tdiv_to_l_
  8685  07CC  0008               	return
  8686  07CD                     l2498:	
  8687  07CD  3001               	movlw	1
  8688  07CE                     u3105:	
  8689  07CE  35AA               	lslf	__tdiv_to_l_@quot,f
  8690  07CF  0DAB               	rlf	__tdiv_to_l_@quot+1,f
  8691  07D0  0DAC               	rlf	__tdiv_to_l_@quot+2,f
  8692  07D1  0DAD               	rlf	__tdiv_to_l_@quot+3,f
  8693  07D2  0B89               	decfsz	9,f
  8694  07D3  2FCE               	goto	u3105
  8695  07D4  3001               	movlw	1
  8696  07D5  02AF               	subwf	__tdiv_to_l_@exp1,f
  8697  07D6                     l747:	
  8698  07D6  082F               	movf	__tdiv_to_l_@exp1,w
  8699  07D7  1D03               	btfss	3,2
  8700  07D8  2FCD               	goto	l2498
  8701  07D9                     l2500:	
  8702  07D9  082D               	movf	__tdiv_to_l_@quot+3,w
  8703  07DA  00A3               	movwf	?__tdiv_to_l_+3
  8704  07DB  082C               	movf	__tdiv_to_l_@quot+2,w
  8705  07DC  00A2               	movwf	?__tdiv_to_l_+2
  8706  07DD  082B               	movf	__tdiv_to_l_@quot+1,w
  8707  07DE  00A1               	movwf	?__tdiv_to_l_+1
  8708  07DF  082A               	movf	__tdiv_to_l_@quot,w
  8709  07E0  00A0               	movwf	?__tdiv_to_l_
  8710  07E1  0008               	return
  8711  07E2                     __end_of__tdiv_to_l_:	
  8712                           
  8713                           	psect	text41
  8714  0C9D                     __ptext41:	
  8715 ;; *************** function __div_to_l_ *****************
  8716 ;; Defined at:
  8717 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fldivl.c"
  8718 ;; Parameters:    Size  Location     Type
  8719 ;;  f1              3    0[BANK0 ] unsigned long 
  8720 ;;  f2              3    3[BANK0 ] unsigned long 
  8721 ;; Auto vars:     Size  Location     Type
  8722 ;;  quot            4   14[BANK0 ] unsigned long 
  8723 ;;  exp1            1   19[BANK0 ] unsigned char 
  8724 ;;  cntr            1   18[BANK0 ] unsigned char 
  8725 ;; Return value:  Size  Location     Type
  8726 ;;                  4    0[BANK0 ] unsigned long 
  8727 ;; Registers used:
  8728 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8729 ;; Tracked objects:
  8730 ;;		On entry : 0/0
  8731 ;;		On exit  : 0/0
  8732 ;;		Unchanged: 0/0
  8733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8734 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8735 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8736 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8737 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8738 ;;Total ram usage:       20 bytes
  8739 ;; Hardware stack levels used:    1
  8740 ;; Hardware stack levels required when called:    4
  8741 ;; This function calls:
  8742 ;;		Nothing
  8743 ;; This function is called by:
  8744 ;;		_printf
  8745 ;; This function uses a non-reentrant model
  8746 ;;
  8747                           
  8748                           
  8749                           ;psect for function __div_to_l_
  8750  0C9D                     __div_to_l_:	
  8751                           
  8752                           ;incstack = 0
  8753                           ; Regs used in __div_to_l_: [wreg+fsr1l+fsr1h+status,2+status,0]
  8754  0C9D  3020               	movlw	low (__div_to_l_@f1| 0)
  8755  0C9E  0086               	movwf	6
  8756  0C9F  0187               	clrf	7
  8757  0CA0  3F40               	moviw [0]fsr1
  8758  0CA1  0020               	movlb	0	; select bank0
  8759  0CA2  00A6               	movwf	??__div_to_l_
  8760  0CA3  3F41               	moviw [1]fsr1
  8761  0CA4  00A7               	movwf	??__div_to_l_+1
  8762  0CA5  3F42               	moviw [2]fsr1
  8763  0CA6  00A8               	movwf	??__div_to_l_+2
  8764  0CA7  3F43               	moviw [3]fsr1
  8765  0CA8  00A9               	movwf	??__div_to_l_+3
  8766  0CA9  1003               	clrc
  8767  0CAA  0D28               	rlf	??__div_to_l_+2,w
  8768  0CAB  0D29               	rlf	??__div_to_l_+3,w
  8769  0CAC  00AA               	movwf	??__div_to_l_+4
  8770  0CAD  082A               	movf	??__div_to_l_+4,w
  8771  0CAE  00B3               	movwf	__div_to_l_@exp1
  8772  0CAF  0833               	movf	__div_to_l_@exp1,w
  8773  0CB0  1D03               	btfss	3,2
  8774  0CB1  2CBB               	goto	l2510
  8775  0CB2  3000               	movlw	0
  8776  0CB3  00A3               	movwf	?__div_to_l_+3
  8777  0CB4  3000               	movlw	0
  8778  0CB5  00A2               	movwf	?__div_to_l_+2
  8779  0CB6  3000               	movlw	0
  8780  0CB7  00A1               	movwf	?__div_to_l_+1
  8781  0CB8  3000               	movlw	0
  8782  0CB9  00A0               	movwf	?__div_to_l_
  8783  0CBA  0008               	return
  8784  0CBB                     l2510:	
  8785  0CBB  3023               	movlw	low (__div_to_l_@f2| 0)
  8786  0CBC  0086               	movwf	6
  8787  0CBD  0187               	clrf	7
  8788  0CBE  3F40               	moviw [0]fsr1
  8789  0CBF  00A6               	movwf	??__div_to_l_
  8790  0CC0  3F41               	moviw [1]fsr1
  8791  0CC1  00A7               	movwf	??__div_to_l_+1
  8792  0CC2  3F42               	moviw [2]fsr1
  8793  0CC3  00A8               	movwf	??__div_to_l_+2
  8794  0CC4  3F43               	moviw [3]fsr1
  8795  0CC5  00A9               	movwf	??__div_to_l_+3
  8796  0CC6  1003               	clrc
  8797  0CC7  0D28               	rlf	??__div_to_l_+2,w
  8798  0CC8  0D29               	rlf	??__div_to_l_+3,w
  8799  0CC9  00AA               	movwf	??__div_to_l_+4
  8800  0CCA  082A               	movf	??__div_to_l_+4,w
  8801  0CCB  00B2               	movwf	__div_to_l_@cntr
  8802  0CCC  0832               	movf	__div_to_l_@cntr,w
  8803  0CCD  1D03               	btfss	3,2
  8804  0CCE  2CD8               	goto	l2516
  8805  0CCF  3000               	movlw	0
  8806  0CD0  00A3               	movwf	?__div_to_l_+3
  8807  0CD1  3000               	movlw	0
  8808  0CD2  00A2               	movwf	?__div_to_l_+2
  8809  0CD3  3000               	movlw	0
  8810  0CD4  00A1               	movwf	?__div_to_l_+1
  8811  0CD5  3000               	movlw	0
  8812  0CD6  00A0               	movwf	?__div_to_l_
  8813  0CD7  0008               	return
  8814  0CD8                     l2516:	
  8815  0CD8  3020               	movlw	low (__div_to_l_@f1| 0)
  8816  0CD9  0086               	movwf	6
  8817  0CDA  0187               	clrf	7
  8818  0CDB  3000               	movlw	0
  8819  0CDC  0481               	iorwf	1,f
  8820  0CDD  3141               	addfsr 1,1
  8821  0CDE  3000               	movlw	0
  8822  0CDF  0481               	iorwf	1,f
  8823  0CE0  3141               	addfsr 1,1
  8824  0CE1  3080               	movlw	128
  8825  0CE2  0481               	iorwf	1,f
  8826  0CE3  3141               	addfsr 1,1
  8827  0CE4  3000               	movlw	0
  8828  0CE5  0481               	iorwf	1,f
  8829  0CE6  3020               	movlw	low (__div_to_l_@f1| 0)
  8830  0CE7  0086               	movwf	6
  8831  0CE8  0187               	clrf	7
  8832  0CE9  30FF               	movlw	255
  8833  0CEA  0581               	andwf	1,f
  8834  0CEB  3141               	addfsr 1,1
  8835  0CEC  30FF               	movlw	255
  8836  0CED  0581               	andwf	1,f
  8837  0CEE  3141               	addfsr 1,1
  8838  0CEF  30FF               	movlw	255
  8839  0CF0  0581               	andwf	1,f
  8840  0CF1  3141               	addfsr 1,1
  8841  0CF2  3000               	movlw	0
  8842  0CF3  0581               	andwf	1,f
  8843  0CF4  3023               	movlw	low (__div_to_l_@f2| 0)
  8844  0CF5  0086               	movwf	6
  8845  0CF6  0187               	clrf	7
  8846  0CF7  3000               	movlw	0
  8847  0CF8  0481               	iorwf	1,f
  8848  0CF9  3141               	addfsr 1,1
  8849  0CFA  3000               	movlw	0
  8850  0CFB  0481               	iorwf	1,f
  8851  0CFC  3141               	addfsr 1,1
  8852  0CFD  3080               	movlw	128
  8853  0CFE  0481               	iorwf	1,f
  8854  0CFF  3141               	addfsr 1,1
  8855  0D00  3000               	movlw	0
  8856  0D01  0481               	iorwf	1,f
  8857  0D02  3023               	movlw	low (__div_to_l_@f2| 0)
  8858  0D03  0086               	movwf	6
  8859  0D04  0187               	clrf	7
  8860  0D05  30FF               	movlw	255
  8861  0D06  0581               	andwf	1,f
  8862  0D07  3141               	addfsr 1,1
  8863  0D08  30FF               	movlw	255
  8864  0D09  0581               	andwf	1,f
  8865  0D0A  3141               	addfsr 1,1
  8866  0D0B  30FF               	movlw	255
  8867  0D0C  0581               	andwf	1,f
  8868  0D0D  3141               	addfsr 1,1
  8869  0D0E  3000               	movlw	0
  8870  0D0F  0581               	andwf	1,f
  8871  0D10  3000               	movlw	0
  8872  0D11  00B1               	movwf	__div_to_l_@quot+3
  8873  0D12  3000               	movlw	0
  8874  0D13  00B0               	movwf	__div_to_l_@quot+2
  8875  0D14  3000               	movlw	0
  8876  0D15  00AF               	movwf	__div_to_l_@quot+1
  8877  0D16  3000               	movlw	0
  8878  0D17  00AE               	movwf	__div_to_l_@quot
  8879  0D18  307F               	movlw	127
  8880  0D19  02B3               	subwf	__div_to_l_@exp1,f
  8881  0D1A  30A0               	movlw	160
  8882  0D1B  0732               	addwf	__div_to_l_@cntr,w
  8883  0D1C  00A6               	movwf	??__div_to_l_
  8884  0D1D  0826               	movf	??__div_to_l_,w
  8885  0D1E  02B3               	subwf	__div_to_l_@exp1,f
  8886  0D1F  3020               	movlw	32
  8887  0D20  00A6               	movwf	??__div_to_l_
  8888  0D21  0826               	movf	??__div_to_l_,w
  8889  0D22  00B2               	movwf	__div_to_l_@cntr
  8890  0D23                     l2526:	
  8891  0D23  3001               	movlw	1
  8892  0D24                     u3145:	
  8893  0D24  35AE               	lslf	__div_to_l_@quot,f
  8894  0D25  0DAF               	rlf	__div_to_l_@quot+1,f
  8895  0D26  0DB0               	rlf	__div_to_l_@quot+2,f
  8896  0D27  0DB1               	rlf	__div_to_l_@quot+3,f
  8897  0D28  0B89               	decfsz	9,f
  8898  0D29  2D24               	goto	u3145
  8899  0D2A  3023               	movlw	low (__div_to_l_@f2| 0)
  8900  0D2B  0086               	movwf	6
  8901  0D2C  0187               	clrf	7
  8902  0D2D  3F40               	moviw [0]fsr1
  8903  0D2E  00A6               	movwf	??__div_to_l_
  8904  0D2F  3F41               	moviw [1]fsr1
  8905  0D30  00A7               	movwf	??__div_to_l_+1
  8906  0D31  3F42               	moviw [2]fsr1
  8907  0D32  00A8               	movwf	??__div_to_l_+2
  8908  0D33  3F43               	moviw [3]fsr1
  8909  0D34  00A9               	movwf	??__div_to_l_+3
  8910  0D35  3020               	movlw	low (__div_to_l_@f1| 0)
  8911  0D36  0086               	movwf	6
  8912  0D37  0187               	clrf	7
  8913  0D38  3F40               	moviw [0]fsr1
  8914  0D39  00AA               	movwf	??__div_to_l_+4
  8915  0D3A  3F41               	moviw [1]fsr1
  8916  0D3B  00AB               	movwf	??__div_to_l_+5
  8917  0D3C  3F42               	moviw [2]fsr1
  8918  0D3D  00AC               	movwf	??__div_to_l_+6
  8919  0D3E  3F43               	moviw [3]fsr1
  8920  0D3F  00AD               	movwf	??__div_to_l_+7
  8921  0D40  0829               	movf	??__div_to_l_+3,w
  8922  0D41  022D               	subwf	??__div_to_l_+7,w
  8923  0D42  1D03               	skipz
  8924  0D43  2D4E               	goto	u3155
  8925  0D44  0828               	movf	??__div_to_l_+2,w
  8926  0D45  022C               	subwf	??__div_to_l_+6,w
  8927  0D46  1D03               	skipz
  8928  0D47  2D4E               	goto	u3155
  8929  0D48  0827               	movf	??__div_to_l_+1,w
  8930  0D49  022B               	subwf	??__div_to_l_+5,w
  8931  0D4A  1D03               	skipz
  8932  0D4B  2D4E               	goto	u3155
  8933  0D4C  0826               	movf	??__div_to_l_,w
  8934  0D4D  022A               	subwf	??__div_to_l_+4,w
  8935  0D4E                     u3155:	
  8936  0D4E  1C03               	skipc
  8937  0D4F  2D6B               	goto	l2534
  8938  0D50  3023               	movlw	low (__div_to_l_@f2| 0)
  8939  0D51  0086               	movwf	6
  8940  0D52  0187               	clrf	7
  8941  0D53  3F40               	moviw [0]fsr1
  8942  0D54  00A6               	movwf	??__div_to_l_
  8943  0D55  3F41               	moviw [1]fsr1
  8944  0D56  00A7               	movwf	??__div_to_l_+1
  8945  0D57  3F42               	moviw [2]fsr1
  8946  0D58  00A8               	movwf	??__div_to_l_+2
  8947  0D59  3F43               	moviw [3]fsr1
  8948  0D5A  00A9               	movwf	??__div_to_l_+3
  8949  0D5B  3020               	movlw	low (__div_to_l_@f1| 0)
  8950  0D5C  0086               	movwf	6
  8951  0D5D  0187               	clrf	7
  8952  0D5E  0826               	movf	??__div_to_l_,w
  8953  0D5F  0281               	subwf	1,f
  8954  0D60  3141               	addfsr 1,1
  8955  0D61  0827               	movf	??__div_to_l_+1,w
  8956  0D62  3B81               	subwfb	1,f
  8957  0D63  3141               	addfsr 1,1
  8958  0D64  0828               	movf	??__div_to_l_+2,w
  8959  0D65  3B81               	subwfb	1,f
  8960  0D66  3141               	addfsr 1,1
  8961  0D67  0829               	movf	??__div_to_l_+3,w
  8962  0D68  3B81               	subwfb	1,f
  8963  0D69  317D               	addfsr 1,-3
  8964  0D6A  142E               	bsf	__div_to_l_@quot,0
  8965  0D6B                     l2534:	
  8966  0D6B  3020               	movlw	low (__div_to_l_@f1| 0)
  8967  0D6C  0086               	movwf	6
  8968  0D6D  0187               	clrf	7
  8969  0D6E  3581               	lslf	1,f
  8970  0D6F  3141               	addfsr 1,1
  8971  0D70  0D81               	rlf	1,f
  8972  0D71  3141               	addfsr 1,1
  8973  0D72  0D81               	rlf	1,f
  8974  0D73  3141               	addfsr 1,1
  8975  0D74  0D81               	rlf	1,f
  8976  0D75  317D               	addfsr 1,-3
  8977  0D76  3001               	movlw	1
  8978  0D77  02B2               	subwf	__div_to_l_@cntr,f
  8979  0D78  1D03               	btfss	3,2
  8980  0D79  2D23               	goto	l2526
  8981  0D7A  1FB3               	btfss	__div_to_l_@exp1,7
  8982  0D7B  2D98               	goto	l2546
  8983  0D7C  0833               	movf	__div_to_l_@exp1,w
  8984  0D7D  3A80               	xorlw	128
  8985  0D7E  3E9F               	addlw	159
  8986  0D7F  1803               	skipnc
  8987  0D80  2D8A               	goto	l2544
  8988  0D81  3000               	movlw	0
  8989  0D82  00A3               	movwf	?__div_to_l_+3
  8990  0D83  3000               	movlw	0
  8991  0D84  00A2               	movwf	?__div_to_l_+2
  8992  0D85  3000               	movlw	0
  8993  0D86  00A1               	movwf	?__div_to_l_+1
  8994  0D87  3000               	movlw	0
  8995  0D88  00A0               	movwf	?__div_to_l_
  8996  0D89  0008               	return
  8997  0D8A                     l2544:	
  8998  0D8A  3001               	movlw	1
  8999  0D8B                     u3195:	
  9000  0D8B  36B1               	lsrf	__div_to_l_@quot+3,f
  9001  0D8C  0CB0               	rrf	__div_to_l_@quot+2,f
  9002  0D8D  0CAF               	rrf	__div_to_l_@quot+1,f
  9003  0D8E  0CAE               	rrf	__div_to_l_@quot,f
  9004  0D8F  0B89               	decfsz	9,f
  9005  0D90  2D8B               	goto	u3195
  9006  0D91  3001               	movlw	1
  9007  0D92  00A6               	movwf	??__div_to_l_
  9008  0D93  0826               	movf	??__div_to_l_,w
  9009  0D94  07B3               	addwf	__div_to_l_@exp1,f
  9010  0D95  1903               	btfsc	3,2
  9011  0D96  2DB1               	goto	l2554
  9012  0D97  2D8A               	goto	l2544
  9013  0D98                     l2546:	
  9014  0D98  3020               	movlw	32
  9015  0D99  0233               	subwf	__div_to_l_@exp1,w
  9016  0D9A  1C03               	skipc
  9017  0D9B  2DAE               	goto	l668
  9018  0D9C  3000               	movlw	0
  9019  0D9D  00A3               	movwf	?__div_to_l_+3
  9020  0D9E  3000               	movlw	0
  9021  0D9F  00A2               	movwf	?__div_to_l_+2
  9022  0DA0  3000               	movlw	0
  9023  0DA1  00A1               	movwf	?__div_to_l_+1
  9024  0DA2  3000               	movlw	0
  9025  0DA3  00A0               	movwf	?__div_to_l_
  9026  0DA4  0008               	return
  9027  0DA5                     l2552:	
  9028  0DA5  3001               	movlw	1
  9029  0DA6                     u3225:	
  9030  0DA6  35AE               	lslf	__div_to_l_@quot,f
  9031  0DA7  0DAF               	rlf	__div_to_l_@quot+1,f
  9032  0DA8  0DB0               	rlf	__div_to_l_@quot+2,f
  9033  0DA9  0DB1               	rlf	__div_to_l_@quot+3,f
  9034  0DAA  0B89               	decfsz	9,f
  9035  0DAB  2DA6               	goto	u3225
  9036  0DAC  3001               	movlw	1
  9037  0DAD  02B3               	subwf	__div_to_l_@exp1,f
  9038  0DAE                     l668:	
  9039  0DAE  0833               	movf	__div_to_l_@exp1,w
  9040  0DAF  1D03               	btfss	3,2
  9041  0DB0  2DA5               	goto	l2552
  9042  0DB1                     l2554:	
  9043  0DB1  0831               	movf	__div_to_l_@quot+3,w
  9044  0DB2  00A3               	movwf	?__div_to_l_+3
  9045  0DB3  0830               	movf	__div_to_l_@quot+2,w
  9046  0DB4  00A2               	movwf	?__div_to_l_+2
  9047  0DB5  082F               	movf	__div_to_l_@quot+1,w
  9048  0DB6  00A1               	movwf	?__div_to_l_+1
  9049  0DB7  082E               	movf	__div_to_l_@quot,w
  9050  0DB8  00A0               	movwf	?__div_to_l_
  9051  0DB9  0008               	return
  9052  0DBA                     __end_of__div_to_l_:	
  9053                           
  9054                           	psect	text42
  9055  0810                     __ptext42:	
  9056 ;; *************** function ___lltoft *****************
  9057 ;; Defined at:
  9058 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
  9059 ;; Parameters:    Size  Location     Type
  9060 ;;  c               4    8[BANK0 ] unsigned long 
  9061 ;; Auto vars:     Size  Location     Type
  9062 ;;  exp             1   13[BANK0 ] unsigned char 
  9063 ;; Return value:  Size  Location     Type
  9064 ;;                  3    8[BANK0 ] float 
  9065 ;; Registers used:
  9066 ;;		wreg, status,2, status,0, pclath, cstack
  9067 ;; Tracked objects:
  9068 ;;		On entry : 0/0
  9069 ;;		On exit  : 0/0
  9070 ;;		Unchanged: 0/0
  9071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9072 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9073 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9074 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9075 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9076 ;;Total ram usage:        6 bytes
  9077 ;; Hardware stack levels used:    1
  9078 ;; Hardware stack levels required when called:    5
  9079 ;; This function calls:
  9080 ;;		___ftpack
  9081 ;; This function is called by:
  9082 ;;		_printf
  9083 ;; This function uses a non-reentrant model
  9084 ;;
  9085                           
  9086                           
  9087                           ;psect for function ___lltoft
  9088  0810                     ___lltoft:	
  9089                           
  9090                           ;incstack = 0
  9091                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  9092  0810  308E               	movlw	142
  9093  0811  0020               	movlb	0	; select bank0
  9094  0812  00AC               	movwf	??___lltoft
  9095  0813  082C               	movf	??___lltoft,w
  9096  0814  00AD               	movwf	___lltoft@exp
  9097  0815                     l2684:	
  9098  0815  30FF               	movlw	255
  9099  0816  052B               	andwf	___lltoft@c+3,w
  9100  0817  1903               	btfsc	3,2
  9101  0818  2825               	goto	l2686
  9102  0819  3001               	movlw	1
  9103  081A                     u3525:	
  9104  081A  36AB               	lsrf	___lltoft@c+3,f
  9105  081B  0CAA               	rrf	___lltoft@c+2,f
  9106  081C  0CA9               	rrf	___lltoft@c+1,f
  9107  081D  0CA8               	rrf	___lltoft@c,f
  9108  081E  0B89               	decfsz	9,f
  9109  081F  281A               	goto	u3525
  9110  0820  3001               	movlw	1
  9111  0821  00AC               	movwf	??___lltoft
  9112  0822  082C               	movf	??___lltoft,w
  9113  0823  07AD               	addwf	___lltoft@exp,f
  9114  0824  2815               	goto	l2684
  9115  0825                     l2686:	
  9116  0825  0828               	movf	___lltoft@c,w
  9117  0826  00A0               	movwf	___ftpack@arg
  9118  0827  0829               	movf	___lltoft@c+1,w
  9119  0828  00A1               	movwf	___ftpack@arg+1
  9120  0829  082A               	movf	___lltoft@c+2,w
  9121  082A  00A2               	movwf	___ftpack@arg+2
  9122  082B  082D               	movf	___lltoft@exp,w
  9123  082C  00AC               	movwf	??___lltoft
  9124  082D  082C               	movf	??___lltoft,w
  9125  082E  00A3               	movwf	___ftpack@exp
  9126  082F  01A4               	clrf	___ftpack@sign
  9127  0830  3197  2714         	fcall	___ftpack
  9128  0832  0020               	movlb	0	; select bank0
  9129  0833  0820               	movf	?___ftpack,w
  9130  0834  00A8               	movwf	?___lltoft
  9131  0835  0821               	movf	?___ftpack+1,w
  9132  0836  00A9               	movwf	?___lltoft+1
  9133  0837  0822               	movf	?___ftpack+2,w
  9134  0838  00AA               	movwf	?___lltoft+2
  9135  0839  0008               	return
  9136  083A                     __end_of___lltoft:	
  9137                           
  9138                           	psect	text43
  9139  1548                     __ptext43:	
  9140 ;; *************** function ___llmod *****************
  9141 ;; Defined at:
  9142 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\llmod.c"
  9143 ;; Parameters:    Size  Location     Type
  9144 ;;  divisor         4   14[BANK0 ] unsigned long 
  9145 ;;  dividend        4   18[BANK0 ] unsigned long 
  9146 ;; Auto vars:     Size  Location     Type
  9147 ;;  counter         1   23[BANK0 ] unsigned char 
  9148 ;; Return value:  Size  Location     Type
  9149 ;;                  4   14[BANK0 ] unsigned long 
  9150 ;; Registers used:
  9151 ;;		wreg, status,2, status,0
  9152 ;; Tracked objects:
  9153 ;;		On entry : 0/0
  9154 ;;		On exit  : 0/0
  9155 ;;		Unchanged: 0/0
  9156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9157 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9158 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9159 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9160 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9161 ;;Total ram usage:       10 bytes
  9162 ;; Hardware stack levels used:    1
  9163 ;; Hardware stack levels required when called:    4
  9164 ;; This function calls:
  9165 ;;		Nothing
  9166 ;; This function is called by:
  9167 ;;		_printf
  9168 ;; This function uses a non-reentrant model
  9169 ;;
  9170                           
  9171                           
  9172                           ;psect for function ___llmod
  9173  1548                     ___llmod:	
  9174                           
  9175                           ;incstack = 0
  9176                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  9177  1548  0020               	movlb	0	; select bank0
  9178  1549  0831               	movf	___llmod@divisor+3,w
  9179  154A  0430               	iorwf	___llmod@divisor+2,w
  9180  154B  042F               	iorwf	___llmod@divisor+1,w
  9181  154C  042E               	iorwf	___llmod@divisor,w
  9182  154D  1903               	skipnz
  9183  154E  2D82               	goto	l2676
  9184  154F  01B7               	clrf	___llmod@counter
  9185  1550  0AB7               	incf	___llmod@counter,f
  9186  1551                     l2666:	
  9187  1551  1BB1               	btfsc	___llmod@divisor+3,7
  9188  1552  2D5F               	goto	l2668
  9189  1553  3001               	movlw	1
  9190  1554                     u3475:	
  9191  1554  35AE               	lslf	___llmod@divisor,f
  9192  1555  0DAF               	rlf	___llmod@divisor+1,f
  9193  1556  0DB0               	rlf	___llmod@divisor+2,f
  9194  1557  0DB1               	rlf	___llmod@divisor+3,f
  9195  1558  0B89               	decfsz	9,f
  9196  1559  2D54               	goto	u3475
  9197  155A  3001               	movlw	1
  9198  155B  00B6               	movwf	??___llmod
  9199  155C  0836               	movf	??___llmod,w
  9200  155D  07B7               	addwf	___llmod@counter,f
  9201  155E  2D51               	goto	l2666
  9202  155F                     l2668:	
  9203  155F  0831               	movf	___llmod@divisor+3,w
  9204  1560  0235               	subwf	___llmod@dividend+3,w
  9205  1561  1D03               	skipz
  9206  1562  2D6D               	goto	u3495
  9207  1563  0830               	movf	___llmod@divisor+2,w
  9208  1564  0234               	subwf	___llmod@dividend+2,w
  9209  1565  1D03               	skipz
  9210  1566  2D6D               	goto	u3495
  9211  1567  082F               	movf	___llmod@divisor+1,w
  9212  1568  0233               	subwf	___llmod@dividend+1,w
  9213  1569  1D03               	skipz
  9214  156A  2D6D               	goto	u3495
  9215  156B  082E               	movf	___llmod@divisor,w
  9216  156C  0232               	subwf	___llmod@dividend,w
  9217  156D                     u3495:	
  9218  156D  1C03               	skipc
  9219  156E  2D77               	goto	l2672
  9220  156F  082E               	movf	___llmod@divisor,w
  9221  1570  02B2               	subwf	___llmod@dividend,f
  9222  1571  082F               	movf	___llmod@divisor+1,w
  9223  1572  3BB3               	subwfb	___llmod@dividend+1,f
  9224  1573  0830               	movf	___llmod@divisor+2,w
  9225  1574  3BB4               	subwfb	___llmod@dividend+2,f
  9226  1575  0831               	movf	___llmod@divisor+3,w
  9227  1576  3BB5               	subwfb	___llmod@dividend+3,f
  9228  1577                     l2672:	
  9229  1577  3001               	movlw	1
  9230  1578                     u3505:	
  9231  1578  36B1               	lsrf	___llmod@divisor+3,f
  9232  1579  0CB0               	rrf	___llmod@divisor+2,f
  9233  157A  0CAF               	rrf	___llmod@divisor+1,f
  9234  157B  0CAE               	rrf	___llmod@divisor,f
  9235  157C  0B89               	decfsz	9,f
  9236  157D  2D78               	goto	u3505
  9237  157E  3001               	movlw	1
  9238  157F  02B7               	subwf	___llmod@counter,f
  9239  1580  1D03               	btfss	3,2
  9240  1581  2D5F               	goto	l2668
  9241  1582                     l2676:	
  9242  1582  0835               	movf	___llmod@dividend+3,w
  9243  1583  00B1               	movwf	?___llmod+3
  9244  1584  0834               	movf	___llmod@dividend+2,w
  9245  1585  00B0               	movwf	?___llmod+2
  9246  1586  0833               	movf	___llmod@dividend+1,w
  9247  1587  00AF               	movwf	?___llmod+1
  9248  1588  0832               	movf	___llmod@dividend,w
  9249  1589  00AE               	movwf	?___llmod
  9250  158A  0008               	return
  9251  158B                     __end_of___llmod:	
  9252                           
  9253                           	psect	text44
  9254  16C1                     __ptext44:	
  9255 ;; *************** function ___lldiv *****************
  9256 ;; Defined at:
  9257 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lldiv.c"
  9258 ;; Parameters:    Size  Location     Type
  9259 ;;  divisor         4    0[BANK0 ] unsigned long 
  9260 ;;  dividend        4    4[BANK0 ] unsigned long 
  9261 ;; Auto vars:     Size  Location     Type
  9262 ;;  quotient        4    9[BANK0 ] unsigned long 
  9263 ;;  counter         1   13[BANK0 ] unsigned char 
  9264 ;; Return value:  Size  Location     Type
  9265 ;;                  4    0[BANK0 ] unsigned long 
  9266 ;; Registers used:
  9267 ;;		wreg, status,2, status,0
  9268 ;; Tracked objects:
  9269 ;;		On entry : 0/0
  9270 ;;		On exit  : 0/0
  9271 ;;		Unchanged: 0/0
  9272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9273 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9274 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9275 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9276 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9277 ;;Total ram usage:       14 bytes
  9278 ;; Hardware stack levels used:    1
  9279 ;; Hardware stack levels required when called:    4
  9280 ;; This function calls:
  9281 ;;		Nothing
  9282 ;; This function is called by:
  9283 ;;		_printf
  9284 ;; This function uses a non-reentrant model
  9285 ;;
  9286                           
  9287                           
  9288                           ;psect for function ___lldiv
  9289  16C1                     ___lldiv:	
  9290                           
  9291                           ;incstack = 0
  9292                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  9293  16C1  3000               	movlw	0
  9294  16C2  0020               	movlb	0	; select bank0
  9295  16C3  00AC               	movwf	___lldiv@quotient+3
  9296  16C4  3000               	movlw	0
  9297  16C5  00AB               	movwf	___lldiv@quotient+2
  9298  16C6  3000               	movlw	0
  9299  16C7  00AA               	movwf	___lldiv@quotient+1
  9300  16C8  3000               	movlw	0
  9301  16C9  00A9               	movwf	___lldiv@quotient
  9302  16CA  0823               	movf	___lldiv@divisor+3,w
  9303  16CB  0422               	iorwf	___lldiv@divisor+2,w
  9304  16CC  0421               	iorwf	___lldiv@divisor+1,w
  9305  16CD  0420               	iorwf	___lldiv@divisor,w
  9306  16CE  1903               	skipnz
  9307  16CF  2F0B               	goto	l2656
  9308  16D0  01AD               	clrf	___lldiv@counter
  9309  16D1  0AAD               	incf	___lldiv@counter,f
  9310  16D2                     l2642:	
  9311  16D2  1BA3               	btfsc	___lldiv@divisor+3,7
  9312  16D3  2EE0               	goto	l2644
  9313  16D4  3001               	movlw	1
  9314  16D5                     u3405:	
  9315  16D5  35A0               	lslf	___lldiv@divisor,f
  9316  16D6  0DA1               	rlf	___lldiv@divisor+1,f
  9317  16D7  0DA2               	rlf	___lldiv@divisor+2,f
  9318  16D8  0DA3               	rlf	___lldiv@divisor+3,f
  9319  16D9  0B89               	decfsz	9,f
  9320  16DA  2ED5               	goto	u3405
  9321  16DB  3001               	movlw	1
  9322  16DC  00A8               	movwf	??___lldiv
  9323  16DD  0828               	movf	??___lldiv,w
  9324  16DE  07AD               	addwf	___lldiv@counter,f
  9325  16DF  2ED2               	goto	l2642
  9326  16E0                     l2644:	
  9327  16E0  3001               	movlw	1
  9328  16E1                     u3425:	
  9329  16E1  35A9               	lslf	___lldiv@quotient,f
  9330  16E2  0DAA               	rlf	___lldiv@quotient+1,f
  9331  16E3  0DAB               	rlf	___lldiv@quotient+2,f
  9332  16E4  0DAC               	rlf	___lldiv@quotient+3,f
  9333  16E5  0B89               	decfsz	9,f
  9334  16E6  2EE1               	goto	u3425
  9335  16E7  0823               	movf	___lldiv@divisor+3,w
  9336  16E8  0227               	subwf	___lldiv@dividend+3,w
  9337  16E9  1D03               	skipz
  9338  16EA  2EF5               	goto	u3435
  9339  16EB  0822               	movf	___lldiv@divisor+2,w
  9340  16EC  0226               	subwf	___lldiv@dividend+2,w
  9341  16ED  1D03               	skipz
  9342  16EE  2EF5               	goto	u3435
  9343  16EF  0821               	movf	___lldiv@divisor+1,w
  9344  16F0  0225               	subwf	___lldiv@dividend+1,w
  9345  16F1  1D03               	skipz
  9346  16F2  2EF5               	goto	u3435
  9347  16F3  0820               	movf	___lldiv@divisor,w
  9348  16F4  0224               	subwf	___lldiv@dividend,w
  9349  16F5                     u3435:	
  9350  16F5  1C03               	skipc
  9351  16F6  2F00               	goto	l2652
  9352  16F7  0820               	movf	___lldiv@divisor,w
  9353  16F8  02A4               	subwf	___lldiv@dividend,f
  9354  16F9  0821               	movf	___lldiv@divisor+1,w
  9355  16FA  3BA5               	subwfb	___lldiv@dividend+1,f
  9356  16FB  0822               	movf	___lldiv@divisor+2,w
  9357  16FC  3BA6               	subwfb	___lldiv@dividend+2,f
  9358  16FD  0823               	movf	___lldiv@divisor+3,w
  9359  16FE  3BA7               	subwfb	___lldiv@dividend+3,f
  9360  16FF  1429               	bsf	___lldiv@quotient,0
  9361  1700                     l2652:	
  9362  1700  3001               	movlw	1
  9363  1701                     u3445:	
  9364  1701  36A3               	lsrf	___lldiv@divisor+3,f
  9365  1702  0CA2               	rrf	___lldiv@divisor+2,f
  9366  1703  0CA1               	rrf	___lldiv@divisor+1,f
  9367  1704  0CA0               	rrf	___lldiv@divisor,f
  9368  1705  0B89               	decfsz	9,f
  9369  1706  2F01               	goto	u3445
  9370  1707  3001               	movlw	1
  9371  1708  02AD               	subwf	___lldiv@counter,f
  9372  1709  1D03               	btfss	3,2
  9373  170A  2EE0               	goto	l2644
  9374  170B                     l2656:	
  9375  170B  082C               	movf	___lldiv@quotient+3,w
  9376  170C  00A3               	movwf	?___lldiv+3
  9377  170D  082B               	movf	___lldiv@quotient+2,w
  9378  170E  00A2               	movwf	?___lldiv+2
  9379  170F  082A               	movf	___lldiv@quotient+1,w
  9380  1710  00A1               	movwf	?___lldiv+1
  9381  1711  0829               	movf	___lldiv@quotient,w
  9382  1712  00A0               	movwf	?___lldiv
  9383  1713  0008               	return
  9384  1714                     __end_of___lldiv:	
  9385                           
  9386                           	psect	text45
  9387  1779                     __ptext45:	
  9388 ;; *************** function ___fttol *****************
  9389 ;; Defined at:
  9390 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  9391 ;; Parameters:    Size  Location     Type
  9392 ;;  f1              3   47[BANK0 ] float 
  9393 ;; Auto vars:     Size  Location     Type
  9394 ;;  lval            4   56[BANK0 ] unsigned long 
  9395 ;;  exp1            1   60[BANK0 ] unsigned char 
  9396 ;;  sign1           1   55[BANK0 ] unsigned char 
  9397 ;; Return value:  Size  Location     Type
  9398 ;;                  4   47[BANK0 ] long 
  9399 ;; Registers used:
  9400 ;;		wreg, status,2, status,0
  9401 ;; Tracked objects:
  9402 ;;		On entry : 0/0
  9403 ;;		On exit  : 0/0
  9404 ;;		Unchanged: 0/0
  9405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9406 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9407 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9408 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9409 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9410 ;;Total ram usage:       14 bytes
  9411 ;; Hardware stack levels used:    1
  9412 ;; Hardware stack levels required when called:    4
  9413 ;; This function calls:
  9414 ;;		Nothing
  9415 ;; This function is called by:
  9416 ;;		_printf
  9417 ;; This function uses a non-reentrant model
  9418 ;;
  9419                           
  9420                           
  9421                           ;psect for function ___fttol
  9422  1779                     ___fttol:	
  9423                           
  9424                           ;incstack = 0
  9425                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  9426  1779  0020               	movlb	0	; select bank0
  9427  177A  084F               	movf	___fttol@f1,w
  9428  177B  00D3               	movwf	??___fttol
  9429  177C  0850               	movf	___fttol@f1+1,w
  9430  177D  00D4               	movwf	??___fttol+1
  9431  177E  0851               	movf	___fttol@f1+2,w
  9432  177F  00D5               	movwf	??___fttol+2
  9433  1780  1003               	clrc
  9434  1781  0D54               	rlf	??___fttol+1,w
  9435  1782  0D55               	rlf	??___fttol+2,w
  9436  1783  00D6               	movwf	??___fttol+3
  9437  1784  0856               	movf	??___fttol+3,w
  9438  1785  00DC               	movwf	___fttol@exp1
  9439  1786  085C               	movf	___fttol@exp1,w
  9440  1787  1D03               	btfss	3,2
  9441  1788  2F92               	goto	l2600
  9442  1789  3000               	movlw	0
  9443  178A  00D2               	movwf	?___fttol+3
  9444  178B  3000               	movlw	0
  9445  178C  00D1               	movwf	?___fttol+2
  9446  178D  3000               	movlw	0
  9447  178E  00D0               	movwf	?___fttol+1
  9448  178F  3000               	movlw	0
  9449  1790  00CF               	movwf	?___fttol
  9450  1791  0008               	return
  9451  1792                     l2600:	
  9452  1792  084F               	movf	___fttol@f1,w
  9453  1793  00D3               	movwf	??___fttol
  9454  1794  0850               	movf	___fttol@f1+1,w
  9455  1795  00D4               	movwf	??___fttol+1
  9456  1796  0851               	movf	___fttol@f1+2,w
  9457  1797  00D5               	movwf	??___fttol+2
  9458  1798  3017               	movlw	23
  9459  1799                     u3305:	
  9460  1799  36D5               	lsrf	??___fttol+2,f
  9461  179A  0CD4               	rrf	??___fttol+1,f
  9462  179B  0CD3               	rrf	??___fttol,f
  9463  179C  0B89               	decfsz	9,f
  9464  179D  2F99               	goto	u3305
  9465  179E  0853               	movf	??___fttol,w
  9466  179F  00D6               	movwf	??___fttol+3
  9467  17A0  0856               	movf	??___fttol+3,w
  9468  17A1  00D7               	movwf	___fttol@sign1
  9469  17A2  17D0               	bsf	___fttol@f1+1,7
  9470  17A3  30FF               	movlw	255
  9471  17A4  05CF               	andwf	___fttol@f1,f
  9472  17A5  30FF               	movlw	255
  9473  17A6  05D0               	andwf	___fttol@f1+1,f
  9474  17A7  3000               	movlw	0
  9475  17A8  05D1               	andwf	___fttol@f1+2,f
  9476  17A9  084F               	movf	___fttol@f1,w
  9477  17AA  00D8               	movwf	___fttol@lval
  9478  17AB  0850               	movf	___fttol@f1+1,w
  9479  17AC  00D9               	movwf	___fttol@lval+1
  9480  17AD  0851               	movf	___fttol@f1+2,w
  9481  17AE  00DA               	movwf	___fttol@lval+2
  9482  17AF  01DB               	clrf	___fttol@lval+3
  9483  17B0  308E               	movlw	142
  9484  17B1  02DC               	subwf	___fttol@exp1,f
  9485  17B2  1FDC               	btfss	___fttol@exp1,7
  9486  17B3  2FD0               	goto	l2620
  9487  17B4  085C               	movf	___fttol@exp1,w
  9488  17B5  3A80               	xorlw	128
  9489  17B6  3E8F               	addlw	143
  9490  17B7  1803               	skipnc
  9491  17B8  2FC2               	goto	l2618
  9492  17B9  3000               	movlw	0
  9493  17BA  00D2               	movwf	?___fttol+3
  9494  17BB  3000               	movlw	0
  9495  17BC  00D1               	movwf	?___fttol+2
  9496  17BD  3000               	movlw	0
  9497  17BE  00D0               	movwf	?___fttol+1
  9498  17BF  3000               	movlw	0
  9499  17C0  00CF               	movwf	?___fttol
  9500  17C1  0008               	return
  9501  17C2                     l2618:	
  9502  17C2  3001               	movlw	1
  9503  17C3                     u3335:	
  9504  17C3  36DB               	lsrf	___fttol@lval+3,f
  9505  17C4  0CDA               	rrf	___fttol@lval+2,f
  9506  17C5  0CD9               	rrf	___fttol@lval+1,f
  9507  17C6  0CD8               	rrf	___fttol@lval,f
  9508  17C7  0B89               	decfsz	9,f
  9509  17C8  2FC3               	goto	u3335
  9510  17C9  3001               	movlw	1
  9511  17CA  00D3               	movwf	??___fttol
  9512  17CB  0853               	movf	??___fttol,w
  9513  17CC  07DC               	addwf	___fttol@exp1,f
  9514  17CD  1903               	btfsc	3,2
  9515  17CE  2FE9               	goto	l2628
  9516  17CF  2FC2               	goto	l2618
  9517  17D0                     l2620:	
  9518  17D0  3018               	movlw	24
  9519  17D1  025C               	subwf	___fttol@exp1,w
  9520  17D2  1C03               	skipc
  9521  17D3  2FE6               	goto	l788
  9522  17D4  3000               	movlw	0
  9523  17D5  00D2               	movwf	?___fttol+3
  9524  17D6  3000               	movlw	0
  9525  17D7  00D1               	movwf	?___fttol+2
  9526  17D8  3000               	movlw	0
  9527  17D9  00D0               	movwf	?___fttol+1
  9528  17DA  3000               	movlw	0
  9529  17DB  00CF               	movwf	?___fttol
  9530  17DC  0008               	return
  9531  17DD                     l2626:	
  9532  17DD  3001               	movlw	1
  9533  17DE                     u3365:	
  9534  17DE  35D8               	lslf	___fttol@lval,f
  9535  17DF  0DD9               	rlf	___fttol@lval+1,f
  9536  17E0  0DDA               	rlf	___fttol@lval+2,f
  9537  17E1  0DDB               	rlf	___fttol@lval+3,f
  9538  17E2  0B89               	decfsz	9,f
  9539  17E3  2FDE               	goto	u3365
  9540  17E4  3001               	movlw	1
  9541  17E5  02DC               	subwf	___fttol@exp1,f
  9542  17E6                     l788:	
  9543  17E6  085C               	movf	___fttol@exp1,w
  9544  17E7  1D03               	btfss	3,2
  9545  17E8  2FDD               	goto	l2626
  9546  17E9                     l2628:	
  9547  17E9  0857               	movf	___fttol@sign1,w
  9548  17EA  1903               	btfsc	3,2
  9549  17EB  2FF7               	goto	l2632
  9550  17EC  09D8               	comf	___fttol@lval,f
  9551  17ED  09D9               	comf	___fttol@lval+1,f
  9552  17EE  09DA               	comf	___fttol@lval+2,f
  9553  17EF  09DB               	comf	___fttol@lval+3,f
  9554  17F0  0AD8               	incf	___fttol@lval,f
  9555  17F1  1903               	skipnz
  9556  17F2  0AD9               	incf	___fttol@lval+1,f
  9557  17F3  1903               	skipnz
  9558  17F4  0ADA               	incf	___fttol@lval+2,f
  9559  17F5  1903               	skipnz
  9560  17F6  0ADB               	incf	___fttol@lval+3,f
  9561  17F7                     l2632:	
  9562  17F7  085B               	movf	___fttol@lval+3,w
  9563  17F8  00D2               	movwf	?___fttol+3
  9564  17F9  085A               	movf	___fttol@lval+2,w
  9565  17FA  00D1               	movwf	?___fttol+2
  9566  17FB  0859               	movf	___fttol@lval+1,w
  9567  17FC  00D0               	movwf	?___fttol+1
  9568  17FD  0858               	movf	___fttol@lval,w
  9569  17FE  00CF               	movwf	?___fttol
  9570  17FF  0008               	return
  9571  1800                     __end_of___fttol:	
  9572                           
  9573                           	psect	text46
  9574  141D                     __ptext46:	
  9575 ;; *************** function ___ftsub *****************
  9576 ;; Defined at:
  9577 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
  9578 ;; Parameters:    Size  Location     Type
  9579 ;;  f2              3   65[BANK0 ] float 
  9580 ;;  f1              3   68[BANK0 ] float 
  9581 ;; Auto vars:     Size  Location     Type
  9582 ;;		None
  9583 ;; Return value:  Size  Location     Type
  9584 ;;                  3   65[BANK0 ] float 
  9585 ;; Registers used:
  9586 ;;		wreg, status,2, status,0, pclath, cstack
  9587 ;; Tracked objects:
  9588 ;;		On entry : 0/0
  9589 ;;		On exit  : 0/0
  9590 ;;		Unchanged: 0/0
  9591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9592 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9595 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9596 ;;Total ram usage:        6 bytes
  9597 ;; Hardware stack levels used:    1
  9598 ;; Hardware stack levels required when called:    6
  9599 ;; This function calls:
  9600 ;;		___ftadd
  9601 ;; This function is called by:
  9602 ;;		_printf
  9603 ;; This function uses a non-reentrant model
  9604 ;;
  9605                           
  9606                           
  9607                           ;psect for function ___ftsub
  9608  141D                     ___ftsub:	
  9609                           
  9610                           ;incstack = 0
  9611                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  9612  141D  0020               	movlb	0	; select bank0
  9613  141E  0863               	movf	___ftsub@f2+2,w
  9614  141F  0462               	iorwf	___ftsub@f2+1,w
  9615  1420  0461               	iorwf	___ftsub@f2,w
  9616  1421  1903               	skipnz
  9617  1422  2C25               	goto	l2590
  9618  1423  3080               	movlw	128
  9619  1424  06E3               	xorwf	___ftsub@f2+2,f
  9620  1425                     l2590:	
  9621  1425  0864               	movf	___ftsub@f1,w
  9622  1426  00D4               	movwf	___ftadd@f1
  9623  1427  0865               	movf	___ftsub@f1+1,w
  9624  1428  00D5               	movwf	___ftadd@f1+1
  9625  1429  0866               	movf	___ftsub@f1+2,w
  9626  142A  00D6               	movwf	___ftadd@f1+2
  9627  142B  0861               	movf	___ftsub@f2,w
  9628  142C  00D7               	movwf	___ftadd@f2
  9629  142D  0862               	movf	___ftsub@f2+1,w
  9630  142E  00D8               	movwf	___ftadd@f2+1
  9631  142F  0863               	movf	___ftsub@f2+2,w
  9632  1430  00D9               	movwf	___ftadd@f2+2
  9633  1431  318A  22B1         	fcall	___ftadd
  9634  1433  0020               	movlb	0	; select bank0
  9635  1434  0854               	movf	?___ftadd,w
  9636  1435  00E1               	movwf	?___ftsub
  9637  1436  0855               	movf	?___ftadd+1,w
  9638  1437  00E2               	movwf	?___ftsub+1
  9639  1438  0856               	movf	?___ftadd+2,w
  9640  1439  00E3               	movwf	?___ftsub+2
  9641  143A  0008               	return
  9642  143B                     __end_of___ftsub:	
  9643                           
  9644                           	psect	text47
  9645  0AB1                     __ptext47:	
  9646 ;; *************** function ___ftadd *****************
  9647 ;; Defined at:
  9648 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
  9649 ;; Parameters:    Size  Location     Type
  9650 ;;  f1              3   52[BANK0 ] float 
  9651 ;;  f2              3   55[BANK0 ] float 
  9652 ;; Auto vars:     Size  Location     Type
  9653 ;;  exp1            1   64[BANK0 ] unsigned char 
  9654 ;;  exp2            1   63[BANK0 ] unsigned char 
  9655 ;;  sign            1   62[BANK0 ] unsigned char 
  9656 ;; Return value:  Size  Location     Type
  9657 ;;                  3   52[BANK0 ] float 
  9658 ;; Registers used:
  9659 ;;		wreg, status,2, status,0, pclath, cstack
  9660 ;; Tracked objects:
  9661 ;;		On entry : 0/0
  9662 ;;		On exit  : 0/0
  9663 ;;		Unchanged: 0/0
  9664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9665 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9666 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9667 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9668 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9669 ;;Total ram usage:       13 bytes
  9670 ;; Hardware stack levels used:    1
  9671 ;; Hardware stack levels required when called:    5
  9672 ;; This function calls:
  9673 ;;		___ftpack
  9674 ;; This function is called by:
  9675 ;;		_printf
  9676 ;;		___ftsub
  9677 ;; This function uses a non-reentrant model
  9678 ;;
  9679                           
  9680                           
  9681                           ;psect for function ___ftadd
  9682  0AB1                     ___ftadd:	
  9683                           
  9684                           ;incstack = 0
  9685                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9686  0AB1  0020               	movlb	0	; select bank0
  9687  0AB2  0854               	movf	___ftadd@f1,w
  9688  0AB3  00DA               	movwf	??___ftadd
  9689  0AB4  0855               	movf	___ftadd@f1+1,w
  9690  0AB5  00DB               	movwf	??___ftadd+1
  9691  0AB6  0856               	movf	___ftadd@f1+2,w
  9692  0AB7  00DC               	movwf	??___ftadd+2
  9693  0AB8  1003               	clrc
  9694  0AB9  0D5B               	rlf	??___ftadd+1,w
  9695  0ABA  0D5C               	rlf	??___ftadd+2,w
  9696  0ABB  00DD               	movwf	??___ftadd+3
  9697  0ABC  085D               	movf	??___ftadd+3,w
  9698  0ABD  00E0               	movwf	___ftadd@exp1
  9699  0ABE  0857               	movf	___ftadd@f2,w
  9700  0ABF  00DA               	movwf	??___ftadd
  9701  0AC0  0858               	movf	___ftadd@f2+1,w
  9702  0AC1  00DB               	movwf	??___ftadd+1
  9703  0AC2  0859               	movf	___ftadd@f2+2,w
  9704  0AC3  00DC               	movwf	??___ftadd+2
  9705  0AC4  1003               	clrc
  9706  0AC5  0D5B               	rlf	??___ftadd+1,w
  9707  0AC6  0D5C               	rlf	??___ftadd+2,w
  9708  0AC7  00DD               	movwf	??___ftadd+3
  9709  0AC8  085D               	movf	??___ftadd+3,w
  9710  0AC9  00DF               	movwf	___ftadd@exp2
  9711  0ACA  0860               	movf	___ftadd@exp1,w
  9712  0ACB  1903               	btfsc	3,2
  9713  0ACC  2AD9               	goto	l2274
  9714  0ACD  085F               	movf	___ftadd@exp2,w
  9715  0ACE  0260               	subwf	___ftadd@exp1,w
  9716  0ACF  1803               	skipnc
  9717  0AD0  2AE0               	goto	l2278
  9718  0AD1  0360               	decf	___ftadd@exp1,w
  9719  0AD2  3AFF               	xorlw	255
  9720  0AD3  075F               	addwf	___ftadd@exp2,w
  9721  0AD4  00DA               	movwf	??___ftadd
  9722  0AD5  3019               	movlw	25
  9723  0AD6  025A               	subwf	??___ftadd,w
  9724  0AD7  1C03               	skipc
  9725  0AD8  2AE0               	goto	l2278
  9726  0AD9                     l2274:	
  9727  0AD9  0857               	movf	___ftadd@f2,w
  9728  0ADA  00D4               	movwf	?___ftadd
  9729  0ADB  0858               	movf	___ftadd@f2+1,w
  9730  0ADC  00D5               	movwf	?___ftadd+1
  9731  0ADD  0859               	movf	___ftadd@f2+2,w
  9732  0ADE  00D6               	movwf	?___ftadd+2
  9733  0ADF  0008               	return
  9734  0AE0                     l2278:	
  9735  0AE0  085F               	movf	___ftadd@exp2,w
  9736  0AE1  1903               	btfsc	3,2
  9737  0AE2  0008               	return
  9738  0AE3  0860               	movf	___ftadd@exp1,w
  9739  0AE4  025F               	subwf	___ftadd@exp2,w
  9740  0AE5  1803               	skipnc
  9741  0AE6  2AEF               	goto	l2284
  9742  0AE7  035F               	decf	___ftadd@exp2,w
  9743  0AE8  3AFF               	xorlw	255
  9744  0AE9  0760               	addwf	___ftadd@exp1,w
  9745  0AEA  00DA               	movwf	??___ftadd
  9746  0AEB  3019               	movlw	25
  9747  0AEC  025A               	subwf	??___ftadd,w
  9748  0AED  1803               	btfsc	3,0
  9749  0AEE  0008               	return
  9750  0AEF                     l2284:	
  9751  0AEF  3006               	movlw	6
  9752  0AF0  00DA               	movwf	??___ftadd
  9753  0AF1  085A               	movf	??___ftadd,w
  9754  0AF2  00DE               	movwf	___ftadd@sign
  9755  0AF3  1BD6               	btfsc	___ftadd@f1+2,7
  9756  0AF4  17DE               	bsf	___ftadd@sign,7
  9757  0AF5  1BD9               	btfsc	___ftadd@f2+2,7
  9758  0AF6  175E               	bsf	___ftadd@sign,6
  9759  0AF7  17D5               	bsf	___ftadd@f1+1,7
  9760  0AF8  30FF               	movlw	255
  9761  0AF9  05D4               	andwf	___ftadd@f1,f
  9762  0AFA  30FF               	movlw	255
  9763  0AFB  05D5               	andwf	___ftadd@f1+1,f
  9764  0AFC  3000               	movlw	0
  9765  0AFD  05D6               	andwf	___ftadd@f1+2,f
  9766  0AFE  17D8               	bsf	___ftadd@f2+1,7
  9767  0AFF  30FF               	movlw	255
  9768  0B00  05D7               	andwf	___ftadd@f2,f
  9769  0B01  30FF               	movlw	255
  9770  0B02  05D8               	andwf	___ftadd@f2+1,f
  9771  0B03  3000               	movlw	0
  9772  0B04  05D9               	andwf	___ftadd@f2+2,f
  9773  0B05  085F               	movf	___ftadd@exp2,w
  9774  0B06  0260               	subwf	___ftadd@exp1,w
  9775  0B07  1803               	skipnc
  9776  0B08  2B2B               	goto	l2306
  9777  0B09                     l2296:	
  9778  0B09  3001               	movlw	1
  9779  0B0A                     u2665:	
  9780  0B0A  35D7               	lslf	___ftadd@f2,f
  9781  0B0B  0DD8               	rlf	___ftadd@f2+1,f
  9782  0B0C  0DD9               	rlf	___ftadd@f2+2,f
  9783  0B0D  0B89               	decfsz	9,f
  9784  0B0E  2B0A               	goto	u2665
  9785  0B0F  3001               	movlw	1
  9786  0B10  02DF               	subwf	___ftadd@exp2,f
  9787  0B11  085F               	movf	___ftadd@exp2,w
  9788  0B12  0660               	xorwf	___ftadd@exp1,w
  9789  0B13  1903               	skipnz
  9790  0B14  2B26               	goto	l2304
  9791  0B15  3001               	movlw	1
  9792  0B16  02DE               	subwf	___ftadd@sign,f
  9793  0B17  085E               	movf	___ftadd@sign,w
  9794  0B18  3907               	andlw	7
  9795  0B19  1903               	btfsc	3,2
  9796  0B1A  2B26               	goto	l2304
  9797  0B1B  2B09               	goto	l2296
  9798  0B1C                     l2302:	
  9799  0B1C  3001               	movlw	1
  9800  0B1D                     u2695:	
  9801  0B1D  36D6               	lsrf	___ftadd@f1+2,f
  9802  0B1E  0CD5               	rrf	___ftadd@f1+1,f
  9803  0B1F  0CD4               	rrf	___ftadd@f1,f
  9804  0B20  0B89               	decfsz	9,f
  9805  0B21  2B1D               	goto	u2695
  9806  0B22  3001               	movlw	1
  9807  0B23  00DA               	movwf	??___ftadd
  9808  0B24  085A               	movf	??___ftadd,w
  9809  0B25  07E0               	addwf	___ftadd@exp1,f
  9810  0B26                     l2304:	
  9811  0B26  0860               	movf	___ftadd@exp1,w
  9812  0B27  065F               	xorwf	___ftadd@exp2,w
  9813  0B28  1903               	btfsc	3,2
  9814  0B29  2B50               	goto	l711
  9815  0B2A  2B1C               	goto	l2302
  9816  0B2B                     l2306:	
  9817  0B2B  0860               	movf	___ftadd@exp1,w
  9818  0B2C  025F               	subwf	___ftadd@exp2,w
  9819  0B2D  1803               	skipnc
  9820  0B2E  2B50               	goto	l711
  9821  0B2F                     l2308:	
  9822  0B2F  3001               	movlw	1
  9823  0B30                     u2725:	
  9824  0B30  35D4               	lslf	___ftadd@f1,f
  9825  0B31  0DD5               	rlf	___ftadd@f1+1,f
  9826  0B32  0DD6               	rlf	___ftadd@f1+2,f
  9827  0B33  0B89               	decfsz	9,f
  9828  0B34  2B30               	goto	u2725
  9829  0B35  3001               	movlw	1
  9830  0B36  02E0               	subwf	___ftadd@exp1,f
  9831  0B37  085F               	movf	___ftadd@exp2,w
  9832  0B38  0660               	xorwf	___ftadd@exp1,w
  9833  0B39  1903               	skipnz
  9834  0B3A  2B4C               	goto	l2316
  9835  0B3B  3001               	movlw	1
  9836  0B3C  02DE               	subwf	___ftadd@sign,f
  9837  0B3D  085E               	movf	___ftadd@sign,w
  9838  0B3E  3907               	andlw	7
  9839  0B3F  1903               	btfsc	3,2
  9840  0B40  2B4C               	goto	l2316
  9841  0B41  2B2F               	goto	l2308
  9842  0B42                     l2314:	
  9843  0B42  3001               	movlw	1
  9844  0B43                     u2755:	
  9845  0B43  36D9               	lsrf	___ftadd@f2+2,f
  9846  0B44  0CD8               	rrf	___ftadd@f2+1,f
  9847  0B45  0CD7               	rrf	___ftadd@f2,f
  9848  0B46  0B89               	decfsz	9,f
  9849  0B47  2B43               	goto	u2755
  9850  0B48  3001               	movlw	1
  9851  0B49  00DA               	movwf	??___ftadd
  9852  0B4A  085A               	movf	??___ftadd,w
  9853  0B4B  07DF               	addwf	___ftadd@exp2,f
  9854  0B4C                     l2316:	
  9855  0B4C  0860               	movf	___ftadd@exp1,w
  9856  0B4D  065F               	xorwf	___ftadd@exp2,w
  9857  0B4E  1D03               	skipz
  9858  0B4F  2B42               	goto	l2314
  9859  0B50                     l711:	
  9860  0B50  1FDE               	btfss	___ftadd@sign,7
  9861  0B51  2B62               	goto	l2320
  9862  0B52  30FF               	movlw	255
  9863  0B53  06D4               	xorwf	___ftadd@f1,f
  9864  0B54  30FF               	movlw	255
  9865  0B55  06D5               	xorwf	___ftadd@f1+1,f
  9866  0B56  30FF               	movlw	255
  9867  0B57  06D6               	xorwf	___ftadd@f1+2,f
  9868  0B58  3001               	movlw	1
  9869  0B59  07D4               	addwf	___ftadd@f1,f
  9870  0B5A  3000               	movlw	0
  9871  0B5B  1803               	skipnc
  9872  0B5C  3001               	movlw	1
  9873  0B5D  07D5               	addwf	___ftadd@f1+1,f
  9874  0B5E  3000               	movlw	0
  9875  0B5F  1803               	skipnc
  9876  0B60  3001               	movlw	1
  9877  0B61  07D6               	addwf	___ftadd@f1+2,f
  9878  0B62                     l2320:	
  9879  0B62  1F5E               	btfss	___ftadd@sign,6
  9880  0B63  2B74               	goto	l2324
  9881  0B64  30FF               	movlw	255
  9882  0B65  06D7               	xorwf	___ftadd@f2,f
  9883  0B66  30FF               	movlw	255
  9884  0B67  06D8               	xorwf	___ftadd@f2+1,f
  9885  0B68  30FF               	movlw	255
  9886  0B69  06D9               	xorwf	___ftadd@f2+2,f
  9887  0B6A  3001               	movlw	1
  9888  0B6B  07D7               	addwf	___ftadd@f2,f
  9889  0B6C  3000               	movlw	0
  9890  0B6D  1803               	skipnc
  9891  0B6E  3001               	movlw	1
  9892  0B6F  07D8               	addwf	___ftadd@f2+1,f
  9893  0B70  3000               	movlw	0
  9894  0B71  1803               	skipnc
  9895  0B72  3001               	movlw	1
  9896  0B73  07D9               	addwf	___ftadd@f2+2,f
  9897  0B74                     l2324:	
  9898  0B74  01DE               	clrf	___ftadd@sign
  9899  0B75  0854               	movf	___ftadd@f1,w
  9900  0B76  07D7               	addwf	___ftadd@f2,f
  9901  0B77  0855               	movf	___ftadd@f1+1,w
  9902  0B78  3DD8               	addwfc	___ftadd@f2+1,f
  9903  0B79  0856               	movf	___ftadd@f1+2,w
  9904  0B7A  3DD9               	addwfc	___ftadd@f2+2,f
  9905  0B7B  1FD9               	btfss	___ftadd@f2+2,7
  9906  0B7C  2B8F               	goto	l2334
  9907  0B7D  30FF               	movlw	255
  9908  0B7E  06D7               	xorwf	___ftadd@f2,f
  9909  0B7F  30FF               	movlw	255
  9910  0B80  06D8               	xorwf	___ftadd@f2+1,f
  9911  0B81  30FF               	movlw	255
  9912  0B82  06D9               	xorwf	___ftadd@f2+2,f
  9913  0B83  3001               	movlw	1
  9914  0B84  07D7               	addwf	___ftadd@f2,f
  9915  0B85  3000               	movlw	0
  9916  0B86  1803               	skipnc
  9917  0B87  3001               	movlw	1
  9918  0B88  07D8               	addwf	___ftadd@f2+1,f
  9919  0B89  3000               	movlw	0
  9920  0B8A  1803               	skipnc
  9921  0B8B  3001               	movlw	1
  9922  0B8C  07D9               	addwf	___ftadd@f2+2,f
  9923  0B8D  01DE               	clrf	___ftadd@sign
  9924  0B8E  0ADE               	incf	___ftadd@sign,f
  9925  0B8F                     l2334:	
  9926  0B8F  0857               	movf	___ftadd@f2,w
  9927  0B90  00A0               	movwf	___ftpack@arg
  9928  0B91  0858               	movf	___ftadd@f2+1,w
  9929  0B92  00A1               	movwf	___ftpack@arg+1
  9930  0B93  0859               	movf	___ftadd@f2+2,w
  9931  0B94  00A2               	movwf	___ftpack@arg+2
  9932  0B95  0860               	movf	___ftadd@exp1,w
  9933  0B96  00DA               	movwf	??___ftadd
  9934  0B97  085A               	movf	??___ftadd,w
  9935  0B98  00A3               	movwf	___ftpack@exp
  9936  0B99  085E               	movf	___ftadd@sign,w
  9937  0B9A  00DB               	movwf	??___ftadd+1
  9938  0B9B  085B               	movf	??___ftadd+1,w
  9939  0B9C  00A4               	movwf	___ftpack@sign
  9940  0B9D  3197  2714         	fcall	___ftpack
  9941  0B9F  0020               	movlb	0	; select bank0
  9942  0BA0  0820               	movf	?___ftpack,w
  9943  0BA1  00D4               	movwf	?___ftadd
  9944  0BA2  0821               	movf	?___ftpack+1,w
  9945  0BA3  00D5               	movwf	?___ftadd+1
  9946  0BA4  0822               	movf	?___ftpack+2,w
  9947  0BA5  00D6               	movwf	?___ftadd+2
  9948  0BA6  0008               	return
  9949  0BA7                     __end_of___ftadd:	
  9950                           
  9951                           	psect	text48
  9952  1714                     __ptext48:	
  9953 ;; *************** function ___ftpack *****************
  9954 ;; Defined at:
  9955 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
  9956 ;; Parameters:    Size  Location     Type
  9957 ;;  arg             3    0[BANK0 ] unsigned um
  9958 ;;  exp             1    3[BANK0 ] unsigned char 
  9959 ;;  sign            1    4[BANK0 ] unsigned char 
  9960 ;; Auto vars:     Size  Location     Type
  9961 ;;		None
  9962 ;; Return value:  Size  Location     Type
  9963 ;;                  3    0[BANK0 ] float 
  9964 ;; Registers used:
  9965 ;;		wreg, status,2, status,0
  9966 ;; Tracked objects:
  9967 ;;		On entry : 0/0
  9968 ;;		On exit  : 0/0
  9969 ;;		Unchanged: 0/0
  9970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9971 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9973 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9974 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9975 ;;Total ram usage:        8 bytes
  9976 ;; Hardware stack levels used:    1
  9977 ;; Hardware stack levels required when called:    4
  9978 ;; This function calls:
  9979 ;;		Nothing
  9980 ;; This function is called by:
  9981 ;;		___awtoft
  9982 ;;		___ftadd
  9983 ;;		___ftdiv
  9984 ;;		___ftmul
  9985 ;;		___lltoft
  9986 ;; This function uses a non-reentrant model
  9987 ;;
  9988                           
  9989                           
  9990                           ;psect for function ___ftpack
  9991  1714                     ___ftpack:	
  9992                           
  9993                           ;incstack = 0
  9994                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  9995  1714  0020               	movlb	0	; select bank0
  9996  1715  0823               	movf	___ftpack@exp,w
  9997  1716  1903               	btfsc	3,2
  9998  1717  2F1D               	goto	l2134
  9999  1718  0822               	movf	___ftpack@arg+2,w
 10000  1719  0421               	iorwf	___ftpack@arg+1,w
 10001  171A  0420               	iorwf	___ftpack@arg,w
 10002  171B  1D03               	skipz
 10003  171C  2F2E               	goto	l2140
 10004  171D                     l2134:	
 10005  171D  3000               	movlw	0
 10006  171E  00A0               	movwf	?___ftpack
 10007  171F  3000               	movlw	0
 10008  1720  00A1               	movwf	?___ftpack+1
 10009  1721  3000               	movlw	0
 10010  1722  00A2               	movwf	?___ftpack+2
 10011  1723  0008               	return
 10012  1724                     l2138:	
 10013  1724  3001               	movlw	1
 10014  1725  00A5               	movwf	??___ftpack
 10015  1726  0825               	movf	??___ftpack,w
 10016  1727  07A3               	addwf	___ftpack@exp,f
 10017  1728  3001               	movlw	1
 10018  1729                     u2235:	
 10019  1729  36A2               	lsrf	___ftpack@arg+2,f
 10020  172A  0CA1               	rrf	___ftpack@arg+1,f
 10021  172B  0CA0               	rrf	___ftpack@arg,f
 10022  172C  0B89               	decfsz	9,f
 10023  172D  2F29               	goto	u2235
 10024  172E                     l2140:	
 10025  172E  30FE               	movlw	254
 10026  172F  0522               	andwf	___ftpack@arg+2,w
 10027  1730  1903               	btfsc	3,2
 10028  1731  2F47               	goto	l680
 10029  1732  2F24               	goto	l2138
 10030  1733                     l2142:	
 10031  1733  3001               	movlw	1
 10032  1734  00A5               	movwf	??___ftpack
 10033  1735  0825               	movf	??___ftpack,w
 10034  1736  07A3               	addwf	___ftpack@exp,f
 10035  1737  3001               	movlw	1
 10036  1738  07A0               	addwf	___ftpack@arg,f
 10037  1739  3000               	movlw	0
 10038  173A  1803               	skipnc
 10039  173B  3001               	movlw	1
 10040  173C  07A1               	addwf	___ftpack@arg+1,f
 10041  173D  3000               	movlw	0
 10042  173E  1803               	skipnc
 10043  173F  3001               	movlw	1
 10044  1740  07A2               	addwf	___ftpack@arg+2,f
 10045  1741  3001               	movlw	1
 10046  1742                     u2255:	
 10047  1742  36A2               	lsrf	___ftpack@arg+2,f
 10048  1743  0CA1               	rrf	___ftpack@arg+1,f
 10049  1744  0CA0               	rrf	___ftpack@arg,f
 10050  1745  0B89               	decfsz	9,f
 10051  1746  2F42               	goto	u2255
 10052  1747                     l680:	
 10053  1747  30FF               	movlw	255
 10054  1748  0522               	andwf	___ftpack@arg+2,w
 10055  1749  1903               	btfsc	3,2
 10056  174A  2F54               	goto	l2150
 10057  174B  2F33               	goto	l2142
 10058  174C                     l2148:	
 10059  174C  3001               	movlw	1
 10060  174D  02A3               	subwf	___ftpack@exp,f
 10061  174E  3001               	movlw	1
 10062  174F                     u2275:	
 10063  174F  35A0               	lslf	___ftpack@arg,f
 10064  1750  0DA1               	rlf	___ftpack@arg+1,f
 10065  1751  0DA2               	rlf	___ftpack@arg+2,f
 10066  1752  0B89               	decfsz	9,f
 10067  1753  2F4F               	goto	u2275
 10068  1754                     l2150:	
 10069  1754  1BA1               	btfsc	___ftpack@arg+1,7
 10070  1755  2F5A               	goto	l687
 10071  1756  3002               	movlw	2
 10072  1757  0223               	subwf	___ftpack@exp,w
 10073  1758  1803               	skipnc
 10074  1759  2F4C               	goto	l2148
 10075  175A                     l687:	
 10076  175A  1823               	btfsc	___ftpack@exp,0
 10077  175B  2F62               	goto	l688
 10078  175C  30FF               	movlw	255
 10079  175D  05A0               	andwf	___ftpack@arg,f
 10080  175E  307F               	movlw	127
 10081  175F  05A1               	andwf	___ftpack@arg+1,f
 10082  1760  30FF               	movlw	255
 10083  1761  05A2               	andwf	___ftpack@arg+2,f
 10084  1762                     l688:	
 10085  1762  1003               	clrc
 10086  1763  0CA3               	rrf	___ftpack@exp,f
 10087  1764  0823               	movf	___ftpack@exp,w
 10088  1765  00A5               	movwf	??___ftpack
 10089  1766  01A6               	clrf	??___ftpack+1
 10090  1767  01A7               	clrf	??___ftpack+2
 10091  1768  3010               	movlw	16
 10092  1769                     u2315:	
 10093  1769  35A5               	lslf	??___ftpack,f
 10094  176A  0DA6               	rlf	??___ftpack+1,f
 10095  176B  0DA7               	rlf	??___ftpack+2,f
 10096  176C  0B89               	decfsz	9,f
 10097  176D  2F69               	goto	u2315
 10098  176E  0825               	movf	??___ftpack,w
 10099  176F  04A0               	iorwf	___ftpack@arg,f
 10100  1770  0826               	movf	??___ftpack+1,w
 10101  1771  04A1               	iorwf	___ftpack@arg+1,f
 10102  1772  0827               	movf	??___ftpack+2,w
 10103  1773  04A2               	iorwf	___ftpack@arg+2,f
 10104  1774  0824               	movf	___ftpack@sign,w
 10105  1775  1903               	btfsc	3,2
 10106  1776  0008               	return
 10107  1777  17A2               	bsf	___ftpack@arg+2,7
 10108  1778  0008               	return
 10109  1779                     __end_of___ftpack:	
 10110                           
 10111                           	psect	text49
 10112  1291                     __ptext49:	
 10113 ;; *************** function ___ftneg *****************
 10114 ;; Defined at:
 10115 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 10116 ;; Parameters:    Size  Location     Type
 10117 ;;  f1              3    0[BANK0 ] float 
 10118 ;; Auto vars:     Size  Location     Type
 10119 ;;		None
 10120 ;; Return value:  Size  Location     Type
 10121 ;;                  3    0[BANK0 ] float 
 10122 ;; Registers used:
 10123 ;;		wreg
 10124 ;; Tracked objects:
 10125 ;;		On entry : 0/0
 10126 ;;		On exit  : 0/0
 10127 ;;		Unchanged: 0/0
 10128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10129 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10132 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10133 ;;Total ram usage:        3 bytes
 10134 ;; Hardware stack levels used:    1
 10135 ;; Hardware stack levels required when called:    4
 10136 ;; This function calls:
 10137 ;;		Nothing
 10138 ;; This function is called by:
 10139 ;;		_printf
 10140 ;; This function uses a non-reentrant model
 10141 ;;
 10142                           
 10143                           
 10144                           ;psect for function ___ftneg
 10145  1291                     ___ftneg:	
 10146                           
 10147                           ;incstack = 0
 10148                           ; Regs used in ___ftneg: [wreg]
 10149  1291  0020               	movlb	0	; select bank0
 10150  1292  0822               	movf	___ftneg@f1+2,w
 10151  1293  0421               	iorwf	___ftneg@f1+1,w
 10152  1294  0420               	iorwf	___ftneg@f1,w
 10153  1295  1903               	skipnz
 10154  1296  0008               	return
 10155  1297  3080               	movlw	128
 10156  1298  06A2               	xorwf	___ftneg@f1+2,f
 10157  1299  0008               	return
 10158  129A                     __end_of___ftneg:	
 10159                           
 10160                           	psect	text50
 10161  14CA                     __ptext50:	
 10162 ;; *************** function ___ftge *****************
 10163 ;; Defined at:
 10164 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 10165 ;; Parameters:    Size  Location     Type
 10166 ;;  ff1             3    0[BANK0 ] float 
 10167 ;;  ff2             3    3[BANK0 ] float 
 10168 ;; Auto vars:     Size  Location     Type
 10169 ;;		None
 10170 ;; Return value:  Size  Location     Type
 10171 ;;		None               void
 10172 ;; Registers used:
 10173 ;;		wreg, status,2, status,0
 10174 ;; Tracked objects:
 10175 ;;		On entry : 0/0
 10176 ;;		On exit  : 0/0
 10177 ;;		Unchanged: 0/0
 10178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10179 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10181 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10182 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10183 ;;Total ram usage:        9 bytes
 10184 ;; Hardware stack levels used:    1
 10185 ;; Hardware stack levels required when called:    4
 10186 ;; This function calls:
 10187 ;;		Nothing
 10188 ;; This function is called by:
 10189 ;;		_RadioOperation
 10190 ;;		_printf
 10191 ;; This function uses a non-reentrant model
 10192 ;;
 10193                           
 10194                           
 10195                           ;psect for function ___ftge
 10196  14CA                     ___ftge:	
 10197                           
 10198                           ;incstack = 0
 10199                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 10200  14CA  0020               	movlb	0	; select bank0
 10201  14CB  1FA2               	btfss	___ftge@ff1+2,7
 10202  14CC  2CE1               	goto	l2562
 10203  14CD  0920               	comf	___ftge@ff1,w
 10204  14CE  00A6               	movwf	??___ftge
 10205  14CF  0921               	comf	___ftge@ff1+1,w
 10206  14D0  00A7               	movwf	??___ftge+1
 10207  14D1  0922               	comf	___ftge@ff1+2,w
 10208  14D2  00A8               	movwf	??___ftge+2
 10209  14D3  0AA6               	incf	??___ftge,f
 10210  14D4  1903               	skipnz
 10211  14D5  0AA7               	incf	??___ftge+1,f
 10212  14D6  1903               	skipnz
 10213  14D7  0AA8               	incf	??___ftge+2,f
 10214  14D8  3000               	movlw	0
 10215  14D9  0726               	addwf	??___ftge,w
 10216  14DA  00A0               	movwf	___ftge@ff1
 10217  14DB  3000               	movlw	0
 10218  14DC  3D27               	addwfc	??___ftge+1,w
 10219  14DD  00A1               	movwf	___ftge@ff1+1
 10220  14DE  3080               	movlw	128
 10221  14DF  3D28               	addwfc	??___ftge+2,w
 10222  14E0  00A2               	movwf	___ftge@ff1+2
 10223  14E1                     l2562:	
 10224  14E1  1FA5               	btfss	___ftge@ff2+2,7
 10225  14E2  2CF7               	goto	l2566
 10226  14E3  0923               	comf	___ftge@ff2,w
 10227  14E4  00A6               	movwf	??___ftge
 10228  14E5  0924               	comf	___ftge@ff2+1,w
 10229  14E6  00A7               	movwf	??___ftge+1
 10230  14E7  0925               	comf	___ftge@ff2+2,w
 10231  14E8  00A8               	movwf	??___ftge+2
 10232  14E9  0AA6               	incf	??___ftge,f
 10233  14EA  1903               	skipnz
 10234  14EB  0AA7               	incf	??___ftge+1,f
 10235  14EC  1903               	skipnz
 10236  14ED  0AA8               	incf	??___ftge+2,f
 10237  14EE  3000               	movlw	0
 10238  14EF  0726               	addwf	??___ftge,w
 10239  14F0  00A3               	movwf	___ftge@ff2
 10240  14F1  3000               	movlw	0
 10241  14F2  3D27               	addwfc	??___ftge+1,w
 10242  14F3  00A4               	movwf	___ftge@ff2+1
 10243  14F4  3080               	movlw	128
 10244  14F5  3D28               	addwfc	??___ftge+2,w
 10245  14F6  00A5               	movwf	___ftge@ff2+2
 10246  14F7                     l2566:	
 10247  14F7  3080               	movlw	128
 10248  14F8  06A2               	xorwf	___ftge@ff1+2,f
 10249  14F9  3080               	movlw	128
 10250  14FA  06A5               	xorwf	___ftge@ff2+2,f
 10251  14FB  0825               	movf	___ftge@ff2+2,w
 10252  14FC  0222               	subwf	___ftge@ff1+2,w
 10253  14FD  1D03               	skipz
 10254  14FE  0008               	return
 10255  14FF  0824               	movf	___ftge@ff2+1,w
 10256  1500  0221               	subwf	___ftge@ff1+1,w
 10257  1501  1D03               	skipz
 10258  1502  0008               	return
 10259  1503  0823               	movf	___ftge@ff2,w
 10260  1504  0220               	subwf	___ftge@ff1,w
 10261  1505  0008               	return
 10262  1506                     __end_of___ftge:	
 10263                           
 10264                           	psect	text51
 10265  13E3                     __ptext51:	
 10266 ;; *************** function _Delay *****************
 10267 ;; Defined at:
 10268 ;;		line 46 in file "Function.c"
 10269 ;; Parameters:    Size  Location     Type
 10270 ;;  wait            2    0[BANK0 ] int 
 10271 ;; Auto vars:     Size  Location     Type
 10272 ;;  x               2    3[BANK0 ] int 
 10273 ;; Return value:  Size  Location     Type
 10274 ;;                  1    wreg      void 
 10275 ;; Registers used:
 10276 ;;		wreg, status,2
 10277 ;; Tracked objects:
 10278 ;;		On entry : 0/0
 10279 ;;		On exit  : 0/0
 10280 ;;		Unchanged: 0/0
 10281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10282 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10283 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10284 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10285 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10286 ;;Total ram usage:        5 bytes
 10287 ;; Hardware stack levels used:    1
 10288 ;; Hardware stack levels required when called:    4
 10289 ;; This function calls:
 10290 ;;		Nothing
 10291 ;; This function is called by:
 10292 ;;		_main
 10293 ;;		_SR_FRSStart
 10294 ;; This function uses a non-reentrant model
 10295 ;;
 10296                           
 10297                           
 10298                           ;psect for function _Delay
 10299  13E3                     _Delay:	
 10300                           
 10301                           ;Function.c: 47: int x;
 10302                           ;Function.c: 48: for (x = 0; x < wait; x++) {
 10303                           
 10304                           ;incstack = 0
 10305                           ; Regs used in _Delay: [wreg+status,2]
 10306  13E3  0020               	movlb	0	; select bank0
 10307  13E4  01A3               	clrf	Delay@x
 10308  13E5  01A4               	clrf	Delay@x+1
 10309  13E6                     l62:	
 10310  13E6  0824               	movf	Delay@x+1,w
 10311  13E7  3A80               	xorlw	128
 10312  13E8  00A2               	movwf	??_Delay
 10313  13E9  0821               	movf	Delay@wait+1,w
 10314  13EA  3A80               	xorlw	128
 10315  13EB  0222               	subwf	??_Delay,w
 10316  13EC  1D03               	skipz
 10317  13ED  2BF0               	goto	u3865
 10318  13EE  0820               	movf	Delay@wait,w
 10319  13EF  0223               	subwf	Delay@x,w
 10320  13F0                     u3865:	
 10321  13F0  1803               	btfsc	3,0
 10322  13F1  0008               	return
 10323                           
 10324                           ;Function.c: 49: _delay((unsigned long)((1)*(4000000/4000.0)));
 10325  13F2  30F9               	movlw	249
 10326  13F3  0020               	movlb	0	; select bank0
 10327  13F4  00A2               	movwf	??_Delay
 10328  13F5                     u4357:	
 10329  13F5  0000               	nop
 10330  13F6  0BA2               	decfsz	??_Delay,f
 10331  13F7  2BF5               	goto	u4357
 10332  13F8  3200               	nop2	;nop
 10333  13F9  0000               	nop
 10334  13FA  3001               	movlw	1
 10335  13FB  0020               	movlb	0	; select bank0
 10336  13FC  07A3               	addwf	Delay@x,f
 10337  13FD  3000               	movlw	0
 10338  13FE  3DA4               	addwfc	Delay@x+1,f
 10339  13FF  2BE6               	goto	l62
 10340  1400                     __end_of_Delay:	
 10341                           
 10342                           	psect	text52
 10343  1270                     __ptext52:	
 10344 ;; *************** function _LEDOff *****************
 10345 ;; Defined at:
 10346 ;;		line 102 in file "Function.c"
 10347 ;; Parameters:    Size  Location     Type
 10348 ;;		None
 10349 ;; Auto vars:     Size  Location     Type
 10350 ;;		None
 10351 ;; Return value:  Size  Location     Type
 10352 ;;                  1    wreg      void 
 10353 ;; Registers used:
 10354 ;;		None
 10355 ;; Tracked objects:
 10356 ;;		On entry : 0/0
 10357 ;;		On exit  : 0/0
 10358 ;;		Unchanged: 0/0
 10359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10364 ;;Total ram usage:        0 bytes
 10365 ;; Hardware stack levels used:    1
 10366 ;; Hardware stack levels required when called:    4
 10367 ;; This function calls:
 10368 ;;		Nothing
 10369 ;; This function is called by:
 10370 ;;		_main
 10371 ;; This function uses a non-reentrant model
 10372 ;;
 10373                           
 10374                           
 10375                           ;psect for function _LEDOff
 10376  1270                     _LEDOff:	
 10377                           
 10378                           ;Function.c: 103: PORTCbits.RC3 = 1;
 10379                           
 10380                           ;incstack = 0
 10381                           ; Regs used in _LEDOff: []
 10382  1270  0020               	movlb	0	; select bank0
 10383  1271  158E               	bsf	14,3	;volatile
 10384                           
 10385                           ;Function.c: 104: PORTCbits.RC4 = 1;
 10386  1272  160E               	bsf	14,4	;volatile
 10387                           
 10388                           ;Function.c: 105: PORTCbits.RC5 = 1;
 10389  1273  168E               	bsf	14,5	;volatile
 10390  1274  0008               	return
 10391  1275                     __end_of_LEDOff:	
 10392                           
 10393                           	psect	intentry
 10394  0004                     __pintentry:	
 10395 ;; *************** function _INTERRUPT_InterruptManager *****************
 10396 ;; Defined at:
 10397 ;;		line 64 in file "Function.c"
 10398 ;; Parameters:    Size  Location     Type
 10399 ;;		None
 10400 ;; Auto vars:     Size  Location     Type
 10401 ;;		None
 10402 ;; Return value:  Size  Location     Type
 10403 ;;                  1    wreg      void 
 10404 ;; Registers used:
 10405 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10406 ;; Tracked objects:
 10407 ;;		On entry : 0/0
 10408 ;;		On exit  : 0/0
 10409 ;;		Unchanged: 0/0
 10410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10413 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10414 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10415 ;;Total ram usage:        1 bytes
 10416 ;; Hardware stack levels used:    1
 10417 ;; Hardware stack levels required when called:    3
 10418 ;; This function calls:
 10419 ;;		_EUSART1_Receive_ISR
 10420 ;;		_EUSART1_Transmit_ISR
 10421 ;;		_TMR2_ISR
 10422 ;; This function is called by:
 10423 ;;		Interrupt level 1
 10424 ;; This function uses a non-reentrant model
 10425 ;;
 10426                           
 10427  0004                     _INTERRUPT_InterruptManager:	
 10428                           
 10429                           ;incstack = 0
 10430                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10431  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 10432  0005  3180               	pagesel	$
 10433  0006  0020               	movlb	0	; select bank0
 10434  0007  087F               	movf	127,w
 10435  0008  00FD               	movwf	??_INTERRUPT_InterruptManager
 10436                           
 10437                           ;Function.c: 66: if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
 10438  0009  0021               	movlb	1	; select bank1
 10439  000A  1C91               	btfss	17,1	;volatile
 10440  000B  2812               	goto	i1l3230
 10441  000C  0020               	movlb	0	; select bank0
 10442  000D  1C91               	btfss	17,1	;volatile
 10443  000E  2812               	goto	i1l3230
 10444                           
 10445                           ;Function.c: 67: {
 10446                           ;Function.c: 68: TMR2_ISR();
 10447  000F  3192  2281  3180   	fcall	_TMR2_ISR
 10448  0012                     i1l3230:	
 10449                           
 10450                           ;Function.c: 69: }
 10451                           ;Function.c: 70: if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
 10452  0012  0021               	movlb	1	; select bank1
 10453  0013  1E91               	btfss	17,5	;volatile
 10454  0014  281B               	goto	i1l3236
 10455  0015  0020               	movlb	0	; select bank0
 10456  0016  1E91               	btfss	17,5	;volatile
 10457  0017  281B               	goto	i1l3236
 10458                           
 10459                           ;Function.c: 71: {
 10460                           ;Function.c: 72: EUSART1_Receive_ISR();
 10461  0018  3192  22E5  3180   	fcall	_EUSART1_Receive_ISR
 10462  001B                     i1l3236:	
 10463                           
 10464                           ;Function.c: 73: }
 10465                           ;Function.c: 74: if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
 10466  001B  0021               	movlb	1	; select bank1
 10467  001C  1E11               	btfss	17,4	;volatile
 10468  001D  2823               	goto	i1l75
 10469  001E  0020               	movlb	0	; select bank0
 10470  001F  1E11               	btfss	17,4	;volatile
 10471  0020  2823               	goto	i1l75
 10472                           
 10473                           ;Function.c: 75: {
 10474                           ;Function.c: 76: EUSART1_Transmit_ISR();
 10475  0021  3193  2375         	fcall	_EUSART1_Transmit_ISR
 10476  0023                     i1l75:	
 10477                           ;Function.c: 78: else
 10478                           ;Function.c: 79: {
 10479                           
 10480                           ;Function.c: 77: }
 10481                           
 10482  0023  087D               	movf	??_INTERRUPT_InterruptManager,w
 10483  0024  0020               	movlb	0	; select bank0
 10484  0025  00FF               	movwf	127
 10485  0026  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 10486  0027  0009               	retfie
 10487  0028                     __end_of_INTERRUPT_InterruptManager:	
 10488                           
 10489                           	psect	text54
 10490  1281                     __ptext54:	
 10491 ;; *************** function _TMR2_ISR *****************
 10492 ;; Defined at:
 10493 ;;		line 48 in file "Timer.c"
 10494 ;; Parameters:    Size  Location     Type
 10495 ;;		None
 10496 ;; Auto vars:     Size  Location     Type
 10497 ;;		None
 10498 ;; Return value:  Size  Location     Type
 10499 ;;                  1    wreg      void 
 10500 ;; Registers used:
 10501 ;;		wreg
 10502 ;; Tracked objects:
 10503 ;;		On entry : 0/0
 10504 ;;		On exit  : 0/0
 10505 ;;		Unchanged: 0/0
 10506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10510 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10511 ;;Total ram usage:        0 bytes
 10512 ;; Hardware stack levels used:    1
 10513 ;; This function calls:
 10514 ;;		Nothing
 10515 ;; This function is called by:
 10516 ;;		_INTERRUPT_InterruptManager
 10517 ;; This function uses a non-reentrant model
 10518 ;;
 10519                           
 10520                           
 10521                           ;psect for function _TMR2_ISR
 10522  1281                     _TMR2_ISR:	
 10523                           
 10524                           ;Timer.c: 51: ticker++;
 10525                           
 10526                           ;incstack = 0
 10527                           ; Regs used in _TMR2_ISR: [wreg]
 10528  1281  3001               	movlw	1
 10529  1282  0021               	movlb	1	; select bank1
 10530  1283  07E1               	addwf	_ticker^(0+128),f
 10531  1284  3000               	movlw	0
 10532  1285  3DE2               	addwfc	(_ticker+1)^(0+128),f
 10533                           
 10534                           ;Timer.c: 53: PIR1bits.TMR2IF = 0;
 10535  1286  0020               	movlb	0	; select bank0
 10536  1287  1091               	bcf	17,1	;volatile
 10537  1288  0008               	return
 10538  1289                     __end_of_TMR2_ISR:	
 10539                           
 10540                           	psect	text55
 10541  1375                     __ptext55:	
 10542 ;; *************** function _EUSART1_Transmit_ISR *****************
 10543 ;; Defined at:
 10544 ;;		line 129 in file "UART.c"
 10545 ;; Parameters:    Size  Location     Type
 10546 ;;		None
 10547 ;; Auto vars:     Size  Location     Type
 10548 ;;		None
 10549 ;; Return value:  Size  Location     Type
 10550 ;;                  1    wreg      void 
 10551 ;; Registers used:
 10552 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10553 ;; Tracked objects:
 10554 ;;		On entry : 0/0
 10555 ;;		On exit  : 0/0
 10556 ;;		Unchanged: 0/0
 10557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10560 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10561 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10562 ;;Total ram usage:        1 bytes
 10563 ;; Hardware stack levels used:    1
 10564 ;; Hardware stack levels required when called:    2
 10565 ;; This function calls:
 10566 ;;		_UART_buff_size
 10567 ;;		i1_UART_buff_get
 10568 ;; This function is called by:
 10569 ;;		_INTERRUPT_InterruptManager
 10570 ;; This function uses a non-reentrant model
 10571 ;;
 10572                           
 10573                           
 10574                           ;psect for function _EUSART1_Transmit_ISR
 10575  1375                     _EUSART1_Transmit_ISR:	
 10576                           
 10577                           ;UART.c: 131: if (UART_buff_size(&output_buffer) > 0) {
 10578                           
 10579                           ;incstack = 0
 10580                           ; Regs used in _EUSART1_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10581  1375  303A               	movlw	(low (_output_buffer| (0+256)))& (0+255)
 10582  1376  3192  22C1  3193   	fcall	_UART_buff_size
 10583  1379  0871               	movf	?_UART_buff_size+1,w
 10584  137A  3A80               	xorlw	128
 10585  137B  00FB               	movwf	??_EUSART1_Transmit_ISR
 10586  137C  3080               	movlw	128
 10587  137D  027B               	subwf	??_EUSART1_Transmit_ISR,w
 10588  137E  1D03               	skipz
 10589  137F  2B82               	goto	u428_25
 10590  1380  3001               	movlw	1
 10591  1381  0270               	subwf	?_UART_buff_size,w
 10592  1382                     u428_25:	
 10593  1382  1C03               	skipc
 10594  1383  2B8A               	goto	i1l202
 10595                           
 10596                           ;UART.c: 132: TXREG = UART_buff_get(&output_buffer);
 10597  1384  303A               	movlw	(low (_output_buffer| (0+256)))& (0+255)
 10598  1385  3195  25D1         	fcall	i1_UART_buff_get
 10599  1387  0023               	movlb	3	; select bank3
 10600  1388  009A               	movwf	26	;volatile
 10601                           
 10602                           ;UART.c: 133: } else {
 10603  1389  0008               	return
 10604  138A                     i1l202:	
 10605                           
 10606                           ;UART.c: 134: Transmit_stall = 1;
 10607  138A  0021               	movlb	1	; select bank1
 10608  138B  01EE               	clrf	_Transmit_stall^(0+128)
 10609  138C  0AEE               	incf	_Transmit_stall^(0+128),f
 10610                           
 10611                           ;UART.c: 135: PIE1bits.TXIE = 0;
 10612  138D  1211               	bcf	17,4	;volatile
 10613  138E  0008               	return
 10614  138F                     __end_of_EUSART1_Transmit_ISR:	
 10615                           
 10616                           	psect	text56
 10617  15D1                     __ptext56:	
 10618 ;; *************** function i1_UART_buff_get *****************
 10619 ;; Defined at:
 10620 ;;		line 73 in file "UART.c"
 10621 ;; Parameters:    Size  Location     Type
 10622 ;;  _this           1    wreg     PTR struct UART_ring_buf
 10623 ;;		 -> output_buffer(26), input_buffer(26), 
 10624 ;; Auto vars:     Size  Location     Type
 10625 ;;  _this           1   10[COMMON] PTR struct UART_ring_buf
 10626 ;;		 -> output_buffer(26), input_buffer(26), 
 10627 ;;  UART_buff_ge    1    9[COMMON] unsigned char 
 10628 ;; Return value:  Size  Location     Type
 10629 ;;                  1    wreg      unsigned char 
 10630 ;; Registers used:
 10631 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10632 ;; Tracked objects:
 10633 ;;		On entry : 0/0
 10634 ;;		On exit  : 0/0
 10635 ;;		Unchanged: 0/0
 10636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10638 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10639 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10640 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10641 ;;Total ram usage:        5 bytes
 10642 ;; Hardware stack levels used:    1
 10643 ;; Hardware stack levels required when called:    1
 10644 ;; This function calls:
 10645 ;;		i1_UART_buff_modulo_inc
 10646 ;; This function is called by:
 10647 ;;		_EUSART1_Transmit_ISR
 10648 ;; This function uses a non-reentrant model
 10649 ;;
 10650                           
 10651                           
 10652                           ;psect for function i1_UART_buff_get
 10653  15D1                     i1_UART_buff_get:	
 10654                           
 10655                           ;incstack = 0
 10656                           ; Regs used in i1_UART_buff_get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10657                           ;i1UART_buff_get@_this stored from wreg
 10658  15D1  00FA               	movwf	i1UART_buff_get@_this
 10659                           
 10660                           ;UART.c: 74: unsigned char c;
 10661                           ;UART.c: 75: if (_this->count > 0) {
 10662  15D2  087A               	movf	i1UART_buff_get@_this,w
 10663  15D3  3E18               	addlw	24
 10664  15D4  0086               	movwf	6
 10665  15D5  3001               	movlw	1	; select bank2/3
 10666  15D6  0087               	movwf	7
 10667  15D7  3F40               	moviw [0]fsr1
 10668  15D8  00F6               	movwf	??i1_UART_buff_get
 10669  15D9  3F41               	moviw [1]fsr1
 10670  15DA  00F7               	movwf	??i1_UART_buff_get+1
 10671  15DB  0877               	movf	??i1_UART_buff_get+1,w
 10672  15DC  3A80               	xorlw	128
 10673  15DD  00F8               	movwf	??i1_UART_buff_get+2
 10674  15DE  3080               	movlw	128
 10675  15DF  0278               	subwf	??i1_UART_buff_get+2,w
 10676  15E0  1D03               	skipz
 10677  15E1  2DE4               	goto	u414_25
 10678  15E2  3001               	movlw	1
 10679  15E3  0276               	subwf	??i1_UART_buff_get,w
 10680  15E4                     u414_25:	
 10681  15E4  1C03               	skipc
 10682  15E5  2E1B               	goto	i1l3116
 10683                           
 10684                           ;UART.c: 76: c = _this->buf[_this->tail];
 10685  15E6  087A               	movf	i1UART_buff_get@_this,w
 10686  15E7  3E16               	addlw	22
 10687  15E8  0086               	movwf	6
 10688  15E9  3001               	movlw	1	; select bank2/3
 10689  15EA  0087               	movwf	7
 10690  15EB  0801               	movf	1,w
 10691  15EC  077A               	addwf	i1UART_buff_get@_this,w
 10692  15ED  00F6               	movwf	??i1_UART_buff_get
 10693  15EE  0876               	movf	??i1_UART_buff_get,w
 10694  15EF  0086               	movwf	6
 10695  15F0  3001               	movlw	1	; select bank2/3
 10696  15F1  0087               	movwf	7
 10697  15F2  0801               	movf	1,w
 10698  15F3  00F7               	movwf	??i1_UART_buff_get+1
 10699  15F4  0877               	movf	??i1_UART_buff_get+1,w
 10700  15F5  00F9               	movwf	i1UART_buff_get@c
 10701                           
 10702                           ;UART.c: 77: _this->tail = UART_buff_modulo_inc(_this->tail, 20);
 10703  15F6  087A               	movf	i1UART_buff_get@_this,w
 10704  15F7  3E16               	addlw	22
 10705  15F8  0086               	movwf	6
 10706  15F9  3001               	movlw	1	; select bank2/3
 10707  15FA  0087               	movwf	7
 10708  15FB  3F40               	moviw [0]fsr1
 10709  15FC  00F0               	movwf	i1UART_buff_modulo_inc@value
 10710  15FD  3F41               	moviw [1]fsr1
 10711  15FE  00F1               	movwf	i1UART_buff_modulo_inc@value+1
 10712  15FF  3014               	movlw	20
 10713  1600  00F2               	movwf	i1UART_buff_modulo_inc@modulus
 10714  1601  3000               	movlw	0
 10715  1602  00F3               	movwf	i1UART_buff_modulo_inc@modulus+1
 10716  1603  3193  2308  3195   	fcall	i1_UART_buff_modulo_inc
 10717  1606  087A               	movf	i1UART_buff_get@_this,w
 10718  1607  3E16               	addlw	22
 10719  1608  0086               	movwf	6
 10720  1609  3001               	movlw	1	; select bank2/3
 10721  160A  0087               	movwf	7
 10722  160B  0870               	movf	?i1_UART_buff_modulo_inc,w
 10723  160C  3FC0               	movwi [0]fsr1
 10724  160D  0871               	movf	?i1_UART_buff_modulo_inc+1,w
 10725  160E  3FC1               	movwi [1]fsr1
 10726                           
 10727                           ;UART.c: 78: --_this->count;
 10728  160F  087A               	movf	i1UART_buff_get@_this,w
 10729  1610  3E18               	addlw	24
 10730  1611  0086               	movwf	6
 10731  1612  3001               	movlw	1	; select bank2/3
 10732  1613  0087               	movwf	7
 10733  1614  30FF               	movlw	255
 10734  1615  0781               	addwf	1,f
 10735  1616  3141               	addfsr 1,1
 10736  1617  30FF               	movlw	255
 10737  1618  3D81               	addwfc	1,f
 10738  1619  317F               	addfsr 1,-1
 10739                           
 10740                           ;UART.c: 79: } else {
 10741  161A  2E1C               	goto	i1l3118
 10742  161B                     i1l3116:	
 10743                           
 10744                           ;UART.c: 80: c = 0;
 10745  161B  01F9               	clrf	i1UART_buff_get@c
 10746  161C                     i1l3118:	
 10747                           
 10748                           ;UART.c: 81: }
 10749                           ;UART.c: 82: return (c);
 10750  161C  0879               	movf	i1UART_buff_get@c,w
 10751  161D  0008               	return
 10752  161E                     __end_ofi1_UART_buff_get:	
 10753                           
 10754                           	psect	text57
 10755  12C1                     __ptext57:	
 10756 ;; *************** function _UART_buff_size *****************
 10757 ;; Defined at:
 10758 ;;		line 85 in file "UART.c"
 10759 ;; Parameters:    Size  Location     Type
 10760 ;;  _this           1    wreg     PTR struct UART_ring_buf
 10761 ;;		 -> output_buffer(26), 
 10762 ;; Auto vars:     Size  Location     Type
 10763 ;;  _this           1    3[COMMON] PTR struct UART_ring_buf
 10764 ;;		 -> output_buffer(26), 
 10765 ;; Return value:  Size  Location     Type
 10766 ;;                  2    0[COMMON] int 
 10767 ;; Registers used:
 10768 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10769 ;; Tracked objects:
 10770 ;;		On entry : 0/0
 10771 ;;		On exit  : 0/0
 10772 ;;		Unchanged: 0/0
 10773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10774 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10775 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10777 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10778 ;;Total ram usage:        4 bytes
 10779 ;; Hardware stack levels used:    1
 10780 ;; This function calls:
 10781 ;;		Nothing
 10782 ;; This function is called by:
 10783 ;;		_EUSART1_Transmit_ISR
 10784 ;; This function uses a non-reentrant model
 10785 ;;
 10786                           
 10787                           
 10788                           ;psect for function _UART_buff_size
 10789  12C1                     _UART_buff_size:	
 10790                           
 10791                           ;incstack = 0
 10792                           ; Regs used in _UART_buff_size: [wreg+fsr1l+fsr1h+status,2+status,0]
 10793                           ;UART_buff_size@_this stored from wreg
 10794  12C1  00F3               	movwf	UART_buff_size@_this
 10795                           
 10796                           ;UART.c: 86: return (_this->count);
 10797  12C2  0873               	movf	UART_buff_size@_this,w
 10798  12C3  3E18               	addlw	24
 10799  12C4  0086               	movwf	6
 10800  12C5  3001               	movlw	1	; select bank2/3
 10801  12C6  0087               	movwf	7
 10802  12C7  3F40               	moviw [0]fsr1
 10803  12C8  00F0               	movwf	?_UART_buff_size
 10804  12C9  3F41               	moviw [1]fsr1
 10805  12CA  00F1               	movwf	?_UART_buff_size+1
 10806  12CB  0008               	return
 10807  12CC                     __end_of_UART_buff_size:	
 10808                           
 10809                           	psect	text58
 10810  12E5                     __ptext58:	
 10811 ;; *************** function _EUSART1_Receive_ISR *****************
 10812 ;; Defined at:
 10813 ;;		line 118 in file "UART.c"
 10814 ;; Parameters:    Size  Location     Type
 10815 ;;		None
 10816 ;; Auto vars:     Size  Location     Type
 10817 ;;  data            1   12[COMMON] unsigned char 
 10818 ;; Return value:  Size  Location     Type
 10819 ;;                  1    wreg      void 
 10820 ;; Registers used:
 10821 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10822 ;; Tracked objects:
 10823 ;;		On entry : 0/0
 10824 ;;		On exit  : 0/0
 10825 ;;		Unchanged: 0/0
 10826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10828 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10829 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10830 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10831 ;;Total ram usage:        2 bytes
 10832 ;; Hardware stack levels used:    1
 10833 ;; Hardware stack levels required when called:    2
 10834 ;; This function calls:
 10835 ;;		i1_UART_buff_put
 10836 ;; This function is called by:
 10837 ;;		_INTERRUPT_InterruptManager
 10838 ;; This function uses a non-reentrant model
 10839 ;;
 10840                           
 10841                           
 10842                           ;psect for function _EUSART1_Receive_ISR
 10843  12E5                     _EUSART1_Receive_ISR:	
 10844                           
 10845                           ;UART.c: 119: if (1 == RCSTAbits.OERR) {
 10846                           
 10847                           ;incstack = 0
 10848                           ; Regs used in _EUSART1_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10849  12E5  0023               	movlb	3	; select bank3
 10850  12E6  1C9D               	btfss	29,1	;volatile
 10851  12E7  2AEA               	goto	i1l3202
 10852                           
 10853                           ;UART.c: 122: RCSTAbits.CREN = 0;
 10854  12E8  121D               	bcf	29,4	;volatile
 10855                           
 10856                           ;UART.c: 123: RCSTAbits.CREN = 1;
 10857  12E9  161D               	bsf	29,4	;volatile
 10858  12EA                     i1l3202:	
 10859                           
 10860                           ;UART.c: 124: }
 10861                           ;UART.c: 125: unsigned char data = RCREG;
 10862  12EA  0819               	movf	25,w	;volatile
 10863  12EB  00FB               	movwf	??_EUSART1_Receive_ISR
 10864  12EC  087B               	movf	??_EUSART1_Receive_ISR,w
 10865  12ED  00FC               	movwf	EUSART1_Receive_ISR@data
 10866                           
 10867                           ;UART.c: 126: UART_buff_put(&input_buffer, data);
 10868  12EE  087C               	movf	EUSART1_Receive_ISR@data,w
 10869  12EF  00FB               	movwf	??_EUSART1_Receive_ISR
 10870  12F0  087B               	movf	??_EUSART1_Receive_ISR,w
 10871  12F1  00F6               	movwf	i1UART_buff_put@c
 10872  12F2  3020               	movlw	(low (_input_buffer| (0+256)))& (0+255)
 10873  12F3  3188  203A         	fcall	i1_UART_buff_put
 10874  12F5  0008               	return
 10875  12F6                     __end_of_EUSART1_Receive_ISR:	
 10876                           
 10877                           	psect	text59
 10878  083A                     __ptext59:	
 10879 ;; *************** function i1_UART_buff_put *****************
 10880 ;; Defined at:
 10881 ;;		line 60 in file "UART.c"
 10882 ;; Parameters:    Size  Location     Type
 10883 ;;  _this           1    wreg     PTR struct UART_ring_buf
 10884 ;;		 -> output_buffer(26), input_buffer(26), 
 10885 ;;  c               1    6[COMMON] unsigned char 
 10886 ;; Auto vars:     Size  Location     Type
 10887 ;;  _this           1   10[COMMON] PTR struct UART_ring_buf
 10888 ;;		 -> output_buffer(26), input_buffer(26), 
 10889 ;; Return value:  Size  Location     Type
 10890 ;;                  1    wreg      void 
 10891 ;; Registers used:
 10892 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10893 ;; Tracked objects:
 10894 ;;		On entry : 0/0
 10895 ;;		On exit  : 0/0
 10896 ;;		Unchanged: 0/0
 10897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10898 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10899 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10900 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10901 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10902 ;;Total ram usage:        5 bytes
 10903 ;; Hardware stack levels used:    1
 10904 ;; Hardware stack levels required when called:    1
 10905 ;; This function calls:
 10906 ;;		i1_UART_buff_modulo_inc
 10907 ;; This function is called by:
 10908 ;;		_EUSART1_Receive_ISR
 10909 ;; This function uses a non-reentrant model
 10910 ;;
 10911                           
 10912                           
 10913                           ;psect for function i1_UART_buff_put
 10914  083A                     i1_UART_buff_put:	
 10915                           
 10916                           ;incstack = 0
 10917                           ; Regs used in i1_UART_buff_put: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10918                           ;i1UART_buff_put@_this stored from wreg
 10919  083A  00FA               	movwf	i1UART_buff_put@_this
 10920                           
 10921                           ;UART.c: 61: if (_this->count < 20) {
 10922  083B  087A               	movf	i1UART_buff_put@_this,w
 10923  083C  3E18               	addlw	24
 10924  083D  0086               	movwf	6
 10925  083E  3001               	movlw	1	; select bank2/3
 10926  083F  0087               	movwf	7
 10927  0840  3F40               	moviw [0]fsr1
 10928  0841  00F7               	movwf	??i1_UART_buff_put
 10929  0842  3F41               	moviw [1]fsr1
 10930  0843  00F8               	movwf	??i1_UART_buff_put+1
 10931  0844  0878               	movf	??i1_UART_buff_put+1,w
 10932  0845  3A80               	xorlw	128
 10933  0846  00F9               	movwf	??i1_UART_buff_put+2
 10934  0847  3080               	movlw	128
 10935  0848  0279               	subwf	??i1_UART_buff_put+2,w
 10936  0849  1D03               	skipz
 10937  084A  284D               	goto	u413_25
 10938  084B  3014               	movlw	20
 10939  084C  0277               	subwf	??i1_UART_buff_put,w
 10940  084D                     u413_25:	
 10941  084D  1803               	skipnc
 10942  084E  2882               	goto	i1l3102
 10943                           
 10944                           ;UART.c: 62: _this->buf[_this->head] = c;
 10945  084F  0876               	movf	i1UART_buff_put@c,w
 10946  0850  00F7               	movwf	??i1_UART_buff_put
 10947  0851  087A               	movf	i1UART_buff_put@_this,w
 10948  0852  3E14               	addlw	20
 10949  0853  0086               	movwf	6
 10950  0854  3001               	movlw	1	; select bank2/3
 10951  0855  0087               	movwf	7
 10952  0856  0801               	movf	1,w
 10953  0857  077A               	addwf	i1UART_buff_put@_this,w
 10954  0858  00F8               	movwf	??i1_UART_buff_put+1
 10955  0859  0878               	movf	??i1_UART_buff_put+1,w
 10956  085A  0086               	movwf	6
 10957  085B  3001               	movlw	1	; select bank2/3
 10958  085C  0087               	movwf	7
 10959  085D  0877               	movf	??i1_UART_buff_put,w
 10960  085E  0081               	movwf	1
 10961                           
 10962                           ;UART.c: 63: _this->head = UART_buff_modulo_inc(_this->head, 20);
 10963  085F  087A               	movf	i1UART_buff_put@_this,w
 10964  0860  3E14               	addlw	20
 10965  0861  0086               	movwf	6
 10966  0862  3001               	movlw	1	; select bank2/3
 10967  0863  0087               	movwf	7
 10968  0864  3F40               	moviw [0]fsr1
 10969  0865  00F0               	movwf	i1UART_buff_modulo_inc@value
 10970  0866  3F41               	moviw [1]fsr1
 10971  0867  00F1               	movwf	i1UART_buff_modulo_inc@value+1
 10972  0868  3014               	movlw	20
 10973  0869  00F2               	movwf	i1UART_buff_modulo_inc@modulus
 10974  086A  3000               	movlw	0
 10975  086B  00F3               	movwf	i1UART_buff_modulo_inc@modulus+1
 10976  086C  3193  2308         	fcall	i1_UART_buff_modulo_inc
 10977  086E  087A               	movf	i1UART_buff_put@_this,w
 10978  086F  3E14               	addlw	20
 10979  0870  0086               	movwf	6
 10980  0871  3001               	movlw	1	; select bank2/3
 10981  0872  0087               	movwf	7
 10982  0873  0870               	movf	?i1_UART_buff_modulo_inc,w
 10983  0874  3FC0               	movwi [0]fsr1
 10984  0875  0871               	movf	?i1_UART_buff_modulo_inc+1,w
 10985  0876  3FC1               	movwi [1]fsr1
 10986                           
 10987                           ;UART.c: 64: ++_this->count;
 10988  0877  087A               	movf	i1UART_buff_put@_this,w
 10989  0878  3E18               	addlw	24
 10990  0879  0086               	movwf	6
 10991  087A  3001               	movlw	1	; select bank2/3
 10992  087B  0087               	movwf	7
 10993  087C  3001               	movlw	1
 10994  087D  0781               	addwf	1,f
 10995  087E  3141               	addfsr 1,1
 10996  087F  1803               	skipnc
 10997  0880  0A81               	incf	1,f
 10998                           
 10999                           ;UART.c: 65: } else {
 11000  0881  0008               	return
 11001  0882                     i1l3102:	
 11002                           
 11003                           ;UART.c: 66: _this->buf[_this->head] = c;
 11004  0882  0876               	movf	i1UART_buff_put@c,w
 11005  0883  00F7               	movwf	??i1_UART_buff_put
 11006  0884  087A               	movf	i1UART_buff_put@_this,w
 11007  0885  3E14               	addlw	20
 11008  0886  0086               	movwf	6
 11009  0887  3001               	movlw	1	; select bank2/3
 11010  0888  0087               	movwf	7
 11011  0889  0801               	movf	1,w
 11012  088A  077A               	addwf	i1UART_buff_put@_this,w
 11013  088B  00F8               	movwf	??i1_UART_buff_put+1
 11014  088C  0878               	movf	??i1_UART_buff_put+1,w
 11015  088D  0086               	movwf	6
 11016  088E  3001               	movlw	1	; select bank2/3
 11017  088F  0087               	movwf	7
 11018  0890  0877               	movf	??i1_UART_buff_put,w
 11019  0891  0081               	movwf	1
 11020                           
 11021                           ;UART.c: 67: _this->head = UART_buff_modulo_inc(_this->head, 20);
 11022  0892  087A               	movf	i1UART_buff_put@_this,w
 11023  0893  3E14               	addlw	20
 11024  0894  0086               	movwf	6
 11025  0895  3001               	movlw	1	; select bank2/3
 11026  0896  0087               	movwf	7
 11027  0897  3F40               	moviw [0]fsr1
 11028  0898  00F0               	movwf	i1UART_buff_modulo_inc@value
 11029  0899  3F41               	moviw [1]fsr1
 11030  089A  00F1               	movwf	i1UART_buff_modulo_inc@value+1
 11031  089B  3014               	movlw	20
 11032  089C  00F2               	movwf	i1UART_buff_modulo_inc@modulus
 11033  089D  3000               	movlw	0
 11034  089E  00F3               	movwf	i1UART_buff_modulo_inc@modulus+1
 11035  089F  3193  2308  3188   	fcall	i1_UART_buff_modulo_inc
 11036  08A2  087A               	movf	i1UART_buff_put@_this,w
 11037  08A3  3E14               	addlw	20
 11038  08A4  0086               	movwf	6
 11039  08A5  3001               	movlw	1	; select bank2/3
 11040  08A6  0087               	movwf	7
 11041  08A7  0870               	movf	?i1_UART_buff_modulo_inc,w
 11042  08A8  3FC0               	movwi [0]fsr1
 11043  08A9  0871               	movf	?i1_UART_buff_modulo_inc+1,w
 11044  08AA  3FC1               	movwi [1]fsr1
 11045                           
 11046                           ;UART.c: 68: _this->tail = UART_buff_modulo_inc(_this->tail, 20);
 11047  08AB  087A               	movf	i1UART_buff_put@_this,w
 11048  08AC  3E16               	addlw	22
 11049  08AD  0086               	movwf	6
 11050  08AE  3001               	movlw	1	; select bank2/3
 11051  08AF  0087               	movwf	7
 11052  08B0  3F40               	moviw [0]fsr1
 11053  08B1  00F0               	movwf	i1UART_buff_modulo_inc@value
 11054  08B2  3F41               	moviw [1]fsr1
 11055  08B3  00F1               	movwf	i1UART_buff_modulo_inc@value+1
 11056  08B4  3014               	movlw	20
 11057  08B5  00F2               	movwf	i1UART_buff_modulo_inc@modulus
 11058  08B6  3000               	movlw	0
 11059  08B7  00F3               	movwf	i1UART_buff_modulo_inc@modulus+1
 11060  08B8  3193  2308         	fcall	i1_UART_buff_modulo_inc
 11061  08BA  087A               	movf	i1UART_buff_put@_this,w
 11062  08BB  3E16               	addlw	22
 11063  08BC  0086               	movwf	6
 11064  08BD  3001               	movlw	1	; select bank2/3
 11065  08BE  0087               	movwf	7
 11066  08BF  0870               	movf	?i1_UART_buff_modulo_inc,w
 11067  08C0  3FC0               	movwi [0]fsr1
 11068  08C1  0871               	movf	?i1_UART_buff_modulo_inc+1,w
 11069  08C2  3FC1               	movwi [1]fsr1
 11070  08C3  0008               	return
 11071  08C4                     __end_ofi1_UART_buff_put:	
 11072                           
 11073                           	psect	text60
 11074  1308                     __ptext60:	
 11075 ;; *************** function i1_UART_buff_modulo_inc *****************
 11076 ;; Defined at:
 11077 ;;		line 89 in file "UART.c"
 11078 ;; Parameters:    Size  Location     Type
 11079 ;;  value           2    0[COMMON] const unsigned int 
 11080 ;;  modulus         2    2[COMMON] const unsigned int 
 11081 ;; Auto vars:     Size  Location     Type
 11082 ;;  UART_buff_mo    2    4[COMMON] unsigned int 
 11083 ;; Return value:  Size  Location     Type
 11084 ;;                  2    0[COMMON] unsigned int 
 11085 ;; Registers used:
 11086 ;;		wreg, status,2, status,0
 11087 ;; Tracked objects:
 11088 ;;		On entry : 0/0
 11089 ;;		On exit  : 0/0
 11090 ;;		Unchanged: 0/0
 11091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11092 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11093 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11095 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11096 ;;Total ram usage:        6 bytes
 11097 ;; Hardware stack levels used:    1
 11098 ;; This function calls:
 11099 ;;		Nothing
 11100 ;; This function is called by:
 11101 ;;		i1_UART_buff_put
 11102 ;;		i1_UART_buff_get
 11103 ;; This function uses a non-reentrant model
 11104 ;;
 11105                           
 11106                           
 11107                           ;psect for function i1_UART_buff_modulo_inc
 11108  1308                     i1_UART_buff_modulo_inc:	
 11109                           
 11110                           ;UART.c: 90: unsigned int my_value = value + 1;
 11111                           
 11112                           ;incstack = 0
 11113                           ; Regs used in i1_UART_buff_modulo_inc: [wreg+status,2+status,0]
 11114  1308  0870               	movf	i1UART_buff_modulo_inc@value,w
 11115  1309  3E01               	addlw	1
 11116  130A  00F4               	movwf	i1UART_buff_modulo_inc@my_value
 11117  130B  3000               	movlw	0
 11118  130C  3D71               	addwfc	i1UART_buff_modulo_inc@value+1,w
 11119  130D  00F5               	movwf	i1UART_buff_modulo_inc@my_value+1
 11120                           
 11121                           ;UART.c: 91: if (my_value >= modulus) {
 11122  130E  0873               	movf	i1UART_buff_modulo_inc@modulus+1,w
 11123  130F  0275               	subwf	i1UART_buff_modulo_inc@my_value+1,w
 11124  1310  1D03               	skipz
 11125  1311  2B14               	goto	u396_25
 11126  1312  0872               	movf	i1UART_buff_modulo_inc@modulus,w
 11127  1313  0274               	subwf	i1UART_buff_modulo_inc@my_value,w
 11128  1314                     u396_25:	
 11129  1314  1C03               	skipc
 11130  1315  2B18               	goto	i1l2930
 11131                           
 11132                           ;UART.c: 92: my_value = 0;
 11133  1316  01F4               	clrf	i1UART_buff_modulo_inc@my_value
 11134  1317  01F5               	clrf	i1UART_buff_modulo_inc@my_value+1
 11135  1318                     i1l2930:	
 11136                           
 11137                           ;UART.c: 93: }
 11138                           ;UART.c: 94: return (my_value);
 11139  1318  0875               	movf	i1UART_buff_modulo_inc@my_value+1,w
 11140  1319  00F1               	movwf	?i1_UART_buff_modulo_inc+1
 11141  131A  0874               	movf	i1UART_buff_modulo_inc@my_value,w
 11142  131B  00F0               	movwf	?i1_UART_buff_modulo_inc
 11143  131C  0008               	return
 11144  131D                     __end_ofi1_UART_buff_modulo_inc:	
 11145  007E                     btemp	set	126	;btemp
 11146  007E                     int$flags	set	126
 11147  007E                     wtemp	set	126
 11148  007E                     wtemp0	set	126
 11149  0080                     wtemp1	set	128
 11150  0082                     wtemp2	set	130
 11151  0084                     wtemp3	set	132
 11152  0086                     wtemp4	set	134
 11153  0088                     wtemp5	set	136
 11154  007F                     wtemp6	set	127
 11155  007E                     ttemp	set	126
 11156  007E                     ttemp0	set	126
 11157  0081                     ttemp1	set	129
 11158  0084                     ttemp2	set	132
 11159  0087                     ttemp3	set	135
 11160  007F                     ttemp4	set	127
 11161  007E                     ltemp	set	126
 11162  007E                     ltemp0	set	126
 11163  0082                     ltemp1	set	130
 11164  0086                     ltemp2	set	134
 11165  0080                     ltemp3	set	128


Data Sizes:
    Strings     113
    Constant    118
    Data        1
    BSS         86
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     44      79
    BANK2            80      0      52
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 

    memset@p	PTR unsigned char  size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 36
		 -> STR_6(CODE[22]), STR_5(CODE[19]), STR_4(CODE[19]), STR_3(CODE[22]), 
		 -> STR_2(CODE[36]), STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK1[2]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 

    sp__memset	PTR void  size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->i1_UART_buff_get
    i1_UART_buff_get->i1_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i1_UART_buff_put
    i1_UART_buff_put->i1_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset
    _RadioOperation->___ftdiv
    ___ftdiv->___ftmul
    ___awtoft->___ftpack
    _ReadVoltage->_SetADCChannel
    _SR_FRSStart->_SetVOX
    _SR_FRSStart->_SetVolume
    _SetVolume->_printf
    _SetVOX->_printf
    _SetPowerSave->_printf
    _SetMIC->_printf
    _SetFrequency->_printf
    _SetCommandMode->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_Send_put
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _UART_buff_get->_UART_buff_modulo_inc
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _SR_FRSStart->_SetMIC
    _SetVolume->_printf
    _SetVOX->_printf
    _SetPowerSave->_printf
    _SetMIC->_printf
    _SetFrequency->_printf
    _SetCommandMode->_printf

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  245441
                              _Delay
                             _LEDOff
                         _RadioBegin
                     _RadioOperation
                              _Start
 ---------------------------------------------------------------------------------
 (1) _Start                                                0     0      0     305
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     305
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       1     1      0     305
                                              7 BANK0      1     1      0
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               7     3      4     229
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RadioOperation                                       1     1      0    8438
                                             54 BANK0      1     1      0
                        _ClearTicker
                          _GetTicker
                        _ReadCharger
                        _ReadVoltage
                    _SR_FRSPowerDown
                         _SR_FRSTalk
                    _TMR2_StartTimer
                     _TMR2_StopTimer
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2132
                                             38 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    1890
                                              8 BANK0      6     3      3
                        _ReadVoltage (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SR_FRSTalk                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SR_FRSPowerDown                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ReadVoltage                                          4     1      3      88
                                              1 BANK0      4     1      3
                      _SetADCChannel
 ---------------------------------------------------------------------------------
 (3) _SetADCChannel                                        1     1      0      66
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ReadCharger                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetTicker                                            2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ClearTicker                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RadioBegin                                           0     0      0  236334
                        _SR_FRSStart
 ---------------------------------------------------------------------------------
 (2) _SR_FRSStart                                          0     0      0  236334
                              _Delay
                     _SetCommandMode
                       _SetFrequency
                             _SetMIC
                       _SetPowerSave
                             _SetVOX
                          _SetVolume
 ---------------------------------------------------------------------------------
 (3) _SetVolume                                            3     3      0   39340
                                             77 BANK0      3     3      0
                             _printf
 ---------------------------------------------------------------------------------
 (3) _SetVOX                                               3     1      2   39393
                                             77 BANK0      3     1      2
                             _printf
 ---------------------------------------------------------------------------------
 (3) _SetPowerSave                                         0     0      0   39274
                             _printf
 ---------------------------------------------------------------------------------
 (3) _SetMIC                                               6     5      1   39415
                                             77 BANK0      2     1      1
                                             40 BANK1      4     4      0
                             _printf
 ---------------------------------------------------------------------------------
 (3) _SetFrequency                                         0     0      0   39274
                             _printf
 ---------------------------------------------------------------------------------
 (3) _SetCommandMode                                       0     0      0   39274
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              53    35     18   39274
                                             71 BANK0      6     6      0
                                              0 BANK1     40    22     18
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (5) _scale                                               12     9      3    8867
                                             38 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0    1751
                                             13 BANK0      1     1      0
                           _Send_put
 ---------------------------------------------------------------------------------
 (6) _Send_put                                             2     2      0    1729
                                             11 BANK0      2     2      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (7) _UART_buff_put                                        5     4      1     956
                                              6 BANK0      5     4      1
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (7) _UART_buff_get                                        5     5      0     751
                                              6 BANK0      5     5      0
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _UART_buff_modulo_inc                                 6     2      4     514
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) _fround                                              17    14      3    8669
                                             38 BANK0     14    11      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    2106
                                             16 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3662
                                             22 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              7     3      4    1250
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              9     5      4    1360
                                              7 BANK0      9     5      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) __tdiv_to_l_                                         16    10      6     409
                                              0 BANK0     16    10      6
 ---------------------------------------------------------------------------------
 (5) __div_to_l_                                          20    14      6     552
                                              0 BANK0     20    14      6
 ---------------------------------------------------------------------------------
 (5) ___lltoft                                             6     2      4    1868
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___llmod                                             10     2      8     583
                                             14 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             14     6      8     480
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             14    10      4     411
                                             47 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftsub                                              6     0      6    2971
                                             65 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftadd                                             13     7      6    2798
                                             52 BANK0     13     7      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1746
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3      98
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     666
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (3) _Delay                                                5     3      2     364
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _LEDOff                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           1     1      0    1158
                                             13 COMMON     1     1      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR2_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Transmit_ISR                                1     1      0     503
                                             11 COMMON     1     1      0
                     _UART_buff_size
                    i1_UART_buff_get
 ---------------------------------------------------------------------------------
 (11) i1_UART_buff_get                                     5     5      0     454
                                              6 COMMON     5     5      0
             i1_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (11) _UART_buff_size                                      4     1      3      49
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Receive_ISR                                 2     2      0     655
                                             11 COMMON     2     2      0
                    i1_UART_buff_put
 ---------------------------------------------------------------------------------
 (11) i1_UART_buff_put                                     5     4      1     632
                                              6 COMMON     5     4      1
             i1_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (12) i1_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay
   _LEDOff
   _RadioBegin
     _SR_FRSStart
       _Delay
       _SetCommandMode
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _Send_put
               _UART_buff_get
                 _UART_buff_modulo_inc
               _UART_buff_put
                 _UART_buff_modulo_inc
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _SetFrequency
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _Send_put
               _UART_buff_get
                 _UART_buff_modulo_inc
               _UART_buff_put
                 _UART_buff_modulo_inc
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _SetMIC
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _Send_put
               _UART_buff_get
                 _UART_buff_modulo_inc
               _UART_buff_put
                 _UART_buff_modulo_inc
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _SetPowerSave
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _Send_put
               _UART_buff_get
                 _UART_buff_modulo_inc
               _UART_buff_put
                 _UART_buff_modulo_inc
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _SetVOX
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _Send_put
               _UART_buff_get
                 _UART_buff_modulo_inc
               _UART_buff_put
                 _UART_buff_modulo_inc
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _SetVolume
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _Send_put
               _UART_buff_get
                 _UART_buff_modulo_inc
               _UART_buff_put
                 _UART_buff_modulo_inc
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _RadioOperation
     _ClearTicker
     _GetTicker
     _ReadCharger
     _ReadVoltage
       _SetADCChannel
     _SR_FRSPowerDown
     _SR_FRSTalk
     _TMR2_StartTimer
     _TMR2_StopTimer
     ___awtoft
       _ReadVoltage (ARG)
         _SetADCChannel
       ___ftpack (ARG)
     ___ftdiv
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _Start
     _ADC_Initialize
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _INTERRUPT_Initialize
     _TMR2_Initialize

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     i1_UART_buff_put
       i1_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     _UART_buff_size
     i1_UART_buff_get
       i1_UART_buff_modulo_inc
   _TMR2_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     2C      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      34       9       65.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      E1      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      E1      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Aug 05 00:02:29 2016

           _eusart1TxBufferRemaining 00EB                                   l62 13E6  
                                 l80 1301                                   l78 12FC  
                       ___awdiv@sign 002D                  ___wmul@multiplicand 0032  
               i1UART_buff_get@_this 007A                         ___ftadd@exp1 0060  
                       ___ftadd@exp2 005F                         ___ftadd@sign 005E  
                                l314 080A                                  l502 1398  
                                l418 05C5                                  l374 01D1  
                                l366 006E                                  l711 0B50  
                                l680 1747                                  l737 075D  
                                l747 07D6                                  l668 0DAE  
                                l687 175A                                  l688 1762  
                                l788 17E6                           _SR_FRSTalk 1263  
                                _PR2 001B              __end_ofi1_UART_buff_get 161E  
            __end_ofi1_UART_buff_put 08C4                        _SetADCChannel 143B  
                       ___awmod@sign 0026                      _TMR2_Initialize 12B7  
                                wreg 0009                         ___ftdiv@cntr 0050  
                       ___ftdiv@sign 0055                                 l2110 090F  
                               l2200 1685                                 l2210 168D  
                               l2140 172E                                 l2212 1699  
                               l2124 166B                                 l2150 1754  
                               l2142 1733                                 l2134 171D  
                               l2302 0B1C                                 l2222 16B4  
                               l2126 166D                                 l2320 0B62  
                               l2304 0B26                                 l2400 0687  
                               l2138 1724                                 l2314 0B42  
                               l2306 0B2B                                 l2226 16BC  
                               l2218 16AB                                 l2250 15A3  
                               l2242 159D                                 l2148 174C  
                               l2324 0B74                                 l2316 0B4C  
                               l2308 0B2F                                 l2500 07D9  
                               l2252 15AF                                 l2260 15C4  
                               l3220 1326                                 l2334 0B8F  
                               l2510 0CBB                                 l2238 1596  
                               l2350 0A2A                                 l2174 1392  
                               l2430 0EC3                                 l3142 0BB2  
                               l2600 1792                                 l2264 15CC  
                               l2256 15BB                                 l2344 0A14  
                               l2408 06FF                                 l2424 0E64  
                               l3048 1467                                 l3064 0981  
                               l2274 0AD9                                 l2194 167A  
                               l2362 0A65                                 l2098 1343  
                               l2442 0F84                                 l2434 0EE0  
                               l3058 096B                                 l3170 0C06  
                               l3154 0BD6                                 l2284 0AEF  
                               l2620 17D0                                 l2516 0CD8  
                               l3180 0C6A                                 l3164 0BF6  
                               l2278 0AE0                                 l2534 0D6B  
                               l2526 0D23                                 l2374 0A81  
                               l2366 0A6D                                 l2710 007F  
                               l3086 09DB                                 l3078 09C2  
                               l2296 0B09                                 l2632 17F7  
                               l2552 0DA5                                 l2544 0D8A  
                               l2480 0798                                 l2472 077E  
                               l2448 0FE3                                 l2704 006A  
                               l3192 0C97                                 l2562 14E1  
                               l2626 17DD                                 l2618 17C2  
                               l2642 16D2                                 l2554 0DB1  
                               l2546 0D98                                 l2490 07B2  
                               l2458 0745                                 l2378 0A89  
                               l2810 03B1                                 l2730 00FF  
                               l2706 0070                                 l2714 0084  
                               l3186 0C7C                                 l2628 17E9  
                               l2652 1700                                 l2644 16E0  
                               l2492 07C0                                 l2820 03D7  
                               l2716 00A8                                 l2566 14F7  
                               l2590 1425                                 l2814 03BA  
                               l2656 170B                                 l2672 1577  
                               l2840 04E3                                 l2808 033F  
                               l2760 0206                                 l2920 1451  
                               l2666 1551                                 l2498 07CD  
                               l2826 03F2                                 l2754 01B5  
                               l2746 0163                                 l2668 155F  
                               l2676 1582                                 l2684 0815  
                               l2844 04EC                                 l2772 0256  
                               l2916 1446                                 l2686 0825  
                               l2862 0523                                 l2782 029C  
                               l2846 04F1                                 l2872 056B  
                               l2856 051D                                 l2792 02F7  
                               l2768 023D                                 l2880 0048  
                               l2696 13B1                                 l2786 02F1  
                               l2868 055A                                 l2878 0571  
                               l2798 032E                                 l2994 1306  
                               STR_1 10D9                                 STR_2 1076  
                               STR_3 10B0                                 STR_4 10C6  
                               STR_5 10C6                                 STR_6 109A  
                               u2205 1632                                 u3015 077F  
                               u3105 07CE                                 u3025 078F  
                               u2315 1769                                 u2235 1729  
                               u3035 0799                                 u2255 1742  
                               u2415 1690                                 u3305 1799  
                               u3225 0DA6                                 u3145 0D24  
                               u2185 133F                                 u4105 09D2  
                               u2275 174F                                 u3155 0D4E  
                               u3075 07B3                                 u2435 169A  
                               u2515 15A6                                 u2355 1399  
                               u2195 08D8                                 u4115 09DC  
                               u3405 16D5                                 u2445 16A4  
                               u2365 139E                                 u4205 0BE2  
                               u3335 17C3                                 u2455 16AC  
                               u2535 15B5                                 u3425 16E1  
                               u3505 1578                                 u2545 15BC  
                               u3435 16F5                                 u3195 0D8B  
                               u4075 0993                                 u4235 0C12  
                       printf@tmpval 00C0                                 u2725 0B30  
                               u3365 17DE                                 u3445 1701  
                               u3525 081A                                 u4085 09A3  
                               u4245 0C76                                 u4095 09C3  
                               u2665 0B0A                                 u2905 0A90  
                               u2825 0A36                                 u3705 0322  
                               u2755 0B43                                 u3475 1554  
                               u2835 0A46                                 u3635 01DD  
                               u4195 0BC9                                 u4357 13F5  
                               u3645 0212                                 u2695 0B1D  
                               u3495 156D                                 u2855 0A6E  
                               u3815 054E                                 u2865 0A74  
                               u3745 03C5                                 u3755 03D3  
                               u3675 023B                                 u3595 0114  
                               u2895 0A8A                                 u3865 13F0  
                               i1l75 0023                                 _TMR2 001A  
                        _SR_FRSStart 1506                                 _Mode 00E5  
                               _main 131D                         ___ftpack@arg 0020  
                       ___ftpack@exp 0023                                 _time 00E3  
                               fsr0h 0005                                 fsr1h 0007  
                               fsr0l 0004                                 indf0 0000  
                               indf1 0001                                 fsr1l 0006  
                               btemp 007E                                 ltemp 007E  
                      ??_ReadCharger 0020                                 start 0028  
                               ttemp 007E                                 wtemp 007E  
                       ___ftmul@cntr 0044                         ___ftmul@sign 0045  
                       ___fttol@exp1 005C                         ___fttol@lval 0058  
                      ??_ReadVoltage 0024                                ?_main 0070  
                    __end_of___awdiv 16C1                      __end_of___ftadd 0BA7  
                    __end_of___awmod 15D1                      __end_of___ftdiv 09FD  
                    __end_of___ftneg 129A                      __end_of___lldiv 1714  
                    __end_of___ftmul 0AB1                      ___awdiv@divisor 0027  
                    __end_of___llmod 158B                      __end_of___ftsub 143B  
                    __end_of___fttol 1800                                _T2CON 001C  
                              i1l202 138A                     ??_SetCommandMode 006D  
                     ?_SetADCChannel 0070                 i1UART_buff_put@_this 007A  
                    ___awdiv@counter 002C                                _RCREG 0199  
                              _RCSTA 019D                                _SPBRG 019B  
                              _TXREG 019A                                _TXSTA 019E  
                              _Delay 13E3                         ___lltoft@exp 002D  
               _EUSART1_Transmit_ISR 1375              __size_of_RadioOperation 00F6  
                   __end_of_TMR2_ISR 1289                                _Start 13C7  
           ??i1_UART_buff_modulo_inc 0074                        ___awtoft@sign 002D  
                    __end_of_dpowers 1028                                _count 00DF  
                              _scale 0DBA                        ___ftpack@sign 0024  
                              _putch 1275                                ltemp0 007E  
                              ltemp1 0082                                ltemp2 0086  
                              ltemp3 0080                          _ClearTicker 126C  
                              ttemp0 007E                                ttemp1 0081  
                              ttemp2 0084                                ttemp3 0087  
                              ttemp4 007F                                status 0003  
                              wtemp0 007E                                wtemp1 0080  
                              wtemp2 0082                                wtemp3 0084  
                              wtemp4 0086                                wtemp5 0088  
                              wtemp6 007F                      _TMR2_StartTimer 1266  
                    __initialization 002A           __end_of_EUSART1_Initialize 135E  
                       __end_of_main 1332                           _RadioBegin 125D  
                __end_of_ReadCharger 1308                          SetMIC@scram 006D  
     i1UART_buff_modulo_inc@my_value 0074              __end_of_TMR2_Initialize 12C1  
        ?_INTERRUPT_InterruptManager 0070                               ??_main 0070  
                      ___fttol@sign1 0057                          ?_SR_FRSTalk 0070  
                   __end_of_Send_put 1375                   __size_of_GetTicker 0009  
                   ?i1_UART_buff_get 0070                 __size_of__tdiv_to_l_ 00B6  
                   ?i1_UART_buff_put 0076                               ?_Delay 0020  
              ?_EUSART1_Transmit_ISR 0070                               ?_Start 0070  
                __end_of_ReadVoltage 0810                     ___llmod@dividend 0032  
                             ?_scale 0046                     ___awdiv@dividend 0029  
                   __end_of___awtoft 147E                               ?_putch 0070  
                   __end_of___ftpack 1779                     __end_of___lltoft 083A  
                             i1l3102 0882                               i1l3202 12EA  
                             i1l3116 161B                               i1l3118 161C  
                             i1l3230 0012                               i1l3236 001B  
                             _LEDOff 1270                               i1l2930 1318  
                             Delay@x 0023          UART_buff_modulo_inc@modulus 0022  
                             _INTCON 000B                               u413_25 084D  
                             u414_25 15E4                               u428_25 1382  
                             u396_25 1314                               _SetMIC 14A4  
                             _SetVOX 07E2                     __end_of__powers_ 1076  
                             ___ftge 14CA                        _output_buffer 013A  
                             ___wmul 138F                            ??___awdiv 002B  
                          ??___ftadd 005A                            ??___awmod 0024  
                          ??___ftdiv 004C                            ??___ftneg 0023  
                          ??___lldiv 0028                            ??___ftmul 003C  
                          ??___llmod 0036                            ??___ftsub 0067  
                          ??___fttol 0053                               _memset 13AB  
                             _fround 05C6                   __size_of_SetVolume 001D  
                   ___awdiv@quotient 002E                      ___awmod@divisor 0020  
                             _ticker 00E1                      ??_SetADCChannel 0020  
                    ___awmod@counter 0025                               _printf 0042  
              ___ftmul@f3_as_product 0041                        ?_SetFrequency 0070  
                      Send_put@_data 002C         __end_of_UART_buff_modulo_inc 1348  
            __end_of_TMR2_StartTimer 1269      __size_ofi1_UART_buff_modulo_inc 0015  
                    _eusart1RxBuffer 00CC        __size_of_INTERRUPT_Initialize 000A  
                    _eusart1TxBuffer 00D4              __end_of__initialization 003E  
                         ___ftadd@f1 0054                           ___ftadd@f2 0057  
                         ___ftge@ff1 0020                           ___ftge@ff2 0023  
                         ___ftdiv@f1 0049                           ___ftdiv@f2 0046  
                         ___ftdiv@f3 0051                  __size_of_SR_FRSTalk 0003  
                  __end_of_GetTicker 12A3                           ___ftneg@f1 0020  
                        _ReadCharger 12F6                           ___awtoft@c 0028  
                      __end_of_Delay 1400                           ___ftmul@f1 0036  
                         ___ftmul@f2 0039                           ___ftsub@f1 0064  
                         ___ftsub@f2 0061                           ___fttol@f1 004F  
                     __pcstackCOMMON 0070                        __end_of_Start 13E3  
                        ?_RadioBegin 0070                         __pidataBANK1 0003  
                      ?_SetPowerSave 0070                            ?_TMR2_ISR 0070  
                         ___lltoft@c 0028                        __end_of_scale 1000  
                      __end_of_putch 127B                     ?_TMR2_Initialize 0070  
                    SetVolume@volume 006F                   UART_buff_get@_this 002A  
                        _ReadVoltage 0802                __end_of_UART_buff_get 166F  
             ??_EUSART1_Transmit_ISR 007B                __end_of_UART_buff_put 0954  
                     ??_SetFrequency 006D                           __div_to_l_ 0C9D  
                       SetMIC@volume 006E                              ??_Delay 0022  
                     _RadioOperation 0BA7          __end_of_EUSART1_Receive_ISR 12F6  
                    SetADCChannel@ch 0020                              ??_Start 0028  
                    __div_to_l_@exp1 0033                      __div_to_l_@cntr 0032  
                            ??_scale 0049                      __div_to_l_@quot 002E  
                            ??_putch 002D                        _eusart1RxHead 00E9  
                      _eusart1TxHead 00EC                        _eusart1RxTail 00EA  
                         __pbssBANK1 00CC                           __pbssBANK2 0120  
                      _eusart1TxTail 00ED                         ?_SR_FRSStart 0070  
                            ?_LEDOff 0070                    __end_of_SetVolume 141D  
            __size_of_UART_buff_init 000D              __size_of_UART_buff_size 000B  
                      __div_to_l_@f1 0020                        __div_to_l_@f2 0023  
                          ?_Send_put 0070                              ?_SetMIC 006D  
                            ?_SetVOX 006D                           __pmaintext 131D  
                     ??_SetPowerSave 006D               i1_UART_buff_modulo_inc 1308  
                            ?___ftge 0020                              ?___wmul 0030  
                         ??_TMR2_ISR 0070                           __pintentry 0004  
                            ?_memset 0020                              ?_fround 0046  
           __size_of_SR_FRSPowerDown 0003                            ?___awtoft 0028  
                          ?___ftpack 0020                              ?_printf 00A0  
                          ?___lltoft 0028              __size_of_ADC_Initialize 000A  
             __end_of_RadioOperation 0C9D                   UART_buff_put@_this 002A  
       UART_buff_modulo_inc@my_value 0024              __size_of_TMR2_StopTimer 0003  
                   ?_TMR2_StartTimer 0070                  __size_of_RadioBegin 0003  
                    __size_of_LEDOff 0005                              _Battery 00DC  
                       ?_ClearTicker 0070                    __end_of__npowers_ 104F  
                         ??_Send_put 002B                           _scale$1274 004B  
                            _Talking 00E7                      __size_of_SetMIC 0026  
                    __size_of_SetVOX 001E                      __size_of___ftge 003C  
                            ___awdiv 166F                              ___ftadd 0AB1  
               _UART_buff_modulo_inc 1332                              ___awmod 158B  
                            ___ftdiv 0954                              ___ftneg 1291  
                            ___lldiv 16C1                      __size_of___wmul 001C  
                            ___ftmul 09FD                              ___llmod 1548  
                            ___ftsub 141D                              ___fttol 1779  
                         ??___awtoft 002B                           ??___ftpack 0025  
                    __size_of_memset 001C                      __size_of_fround 0166  
                         ??___lltoft 002C                              __ptext1 13C7  
                            __ptext2 12B7                              __ptext3 12AD  
                            __ptext4 1348                              __ptext5 12D8  
                            __ptext6 13AB                              __ptext7 12A3  
                            __ptext8 0BA7                              __ptext9 0954  
                    __size_of_printf 0584                         ??_SR_FRSTalk 0020  
                        ?__div_to_l_ 0020                      ?_RadioOperation 0070  
                            _dpowers 1000                            _T2CONbits 001C  
                   ___awmod@dividend 0022                   _EUSART1_Initialize 1348  
                       SetVOX@volume 006D                              clrloop0 127C  
               end_of_initialization 003E                            Delay@wait 0020  
                ?_EUSART1_Initialize 0070                              memset@c 0020  
                            memset@n 0022                              memset@p 0026  
               __end_of_SetFrequency 14A4                      ___lldiv@divisor 0020  
                    ___lldiv@counter 002D                   __end_of_SR_FRSTalk 1266  
                          _RCSTAbits 019D                              printf@c 00C7  
                            printf@f 00A0                ?_UART_buff_modulo_inc 0020  
                       __pstringtext 1000                       __tdiv_to_l_@f1 0020  
                     __tdiv_to_l_@f2 0023                 ??_EUSART1_Initialize 0028  
                      ??__tdiv_to_l_ 0026                            _PORTAbits 000C  
                          _PORTCbits 000E                            _TRISAbits 008C  
                          _TRISCbits 008E                    ??_SR_FRSPowerDown 0020  
               __end_of_SetPowerSave 12D8             __size_ofi1_UART_buff_get 004D  
           __size_ofi1_UART_buff_put 008A              __size_of_SetCommandMode 0008  
                     __end_of_LEDOff 1275                          ___ftdiv@exp 0054  
                     _UART_buff_init 12D8                 __size_of_SR_FRSStart 0042  
                     _UART_buff_size 12C1                         ?_ReadCharger 0070  
                __size_of__div_to_l_ 011D                          ___ftmul@exp 0040  
                     __end_of_SetMIC 14CA                         ??_RadioBegin 0070  
                     __end_of_SetVOX 0800                            _GetTicker 129A  
       __end_of_INTERRUPT_Initialize 12B7                       __end_of___ftge 1506  
                     __end_of___wmul 13AB                    __size_of_TMR2_ISR 0008  
                     _ADC_Initialize 12A3                         ?_ReadVoltage 0021  
                     __end_of_memset 13C7                       __end_of_fround 072C  
              __end_of_SetADCChannel 145C                       __end_of_printf 05C6  
                start_initialization 002A                  __end_of__tdiv_to_l_ 07E2  
                     _TMR2_StopTimer 1269        i1UART_buff_modulo_inc@modulus 0072  
                      ReadVoltage@ch 0024                          putch@txData 002D  
                 __end_of_RadioBegin 1260                             ??_LEDOff 0020  
             __end_of_UART_buff_init 12E5                       UART_buff_get@c 0029  
             __end_of_UART_buff_size 12CC                       UART_buff_put@c 0026  
                    ___llmod@divisor 002E                      ___llmod@counter 0037  
            ?i1_UART_buff_modulo_inc 0070                 __size_of_ClearTicker 0004  
                          _SetVolume 1400                             ??_SetMIC 00C8  
                           ??_SetVOX 006F               ??_UART_buff_modulo_inc 0024  
                           ??___ftge 0026                    __size_of_Send_put 0017  
                           ??___wmul 0034                           ?_GetTicker 0020  
             __end_of_ADC_Initialize 12AD                          __pdataBANK1 00EE  
                           ??_memset 0024                             ??_fround 0049  
                           ??_printf 0067                       _eusart1RxCount 00E8  
                         fround@prec 0053                    __size_of___awtoft 0022  
                  __size_of___ftpack 0065               __end_of_TMR2_StopTimer 126C  
                  __size_of___lltoft 002A                            ___latbits 0002  
      __size_of_EUSART1_Transmit_ISR 001A                        __pcstackBANK0 0020  
                      __pcstackBANK1 00A0             __size_of_TMR2_Initialize 000A  
                UART_buff_init@_this 0027                __size_of_SetFrequency 0026  
                    ?_UART_buff_init 0070                      ?_UART_buff_size 0070  
       __size_of_EUSART1_Receive_ISR 0011       __end_ofi1_UART_buff_modulo_inc 131D  
             __size_of_UART_buff_get 0051                           ?_SetVolume 0070  
             __size_of_UART_buff_put 0090                    ??i1_UART_buff_get 0076  
                  ??i1_UART_buff_put 0077                             ?___awdiv 0027  
                           ?___ftadd 0054                             ?___awmod 0020  
                           ?___ftdiv 0046                             ?___ftneg 0020  
                           ?___lldiv 0020                             ?___ftmul 0036  
                           ?___llmod 002E                             ?___ftsub 0061  
                          __npowers_ 1028                             ?___fttol 004F  
                   ??_RadioOperation 0056                      ?_ADC_Initialize 0070  
       ??_INTERRUPT_InterruptManager 007D                          __tdiv_to_l_ 072C  
                       ??__div_to_l_ 0026                __size_of_SetPowerSave 000C  
                    ?_TMR2_StopTimer 0070                         _SetFrequency 147E  
                     __size_of_Delay 001D                       __size_of_Start 001C  
                     __size_of_scale 0246                       __size_of_putch 0006  
               _INTERRUPT_Initialize 12AD                       _SetCommandMode 1289  
                     ___wmul@product 0034                  UART_buff_size@_this 0073  
                          clear_ram0 127B                             _PIE1bits 0091  
           __size_of_TMR2_StartTimer 0003  __size_of_INTERRUPT_InterruptManager 0024  
                           _PIR1bits 0011                   __end_of__div_to_l_ 0DBA  
               __size_of_ReadCharger 0012                          ??_GetTicker 0022  
                           _TMR2_ISR 1281                         _SetPowerSave 12CC  
                    _SR_FRSPowerDown 1260                         _input_buffer 0120  
                         _ADCON0bits 009D                           _ADCON1bits 009E  
                  ___wmul@multiplier 0030                           printf@flag 00B5  
                         printf@fval 00C4                        _UART_buff_get 161E  
                         printf@prec 00B8                        _UART_buff_put 08C4  
               __size_of_ReadVoltage 000E               __end_of_SetCommandMode 1291  
              ?_INTERRUPT_Initialize 0070                    ??_TMR2_Initialize 0020  
                        ??_SetVolume 006D                             _Send_put 135E  
                           _Shutdown 00E6                     __size_of___awdiv 0052  
                   __size_of___ftadd 00F6                     __size_of___awmod 0046  
                   __size_of___ftdiv 00A9                     __size_of___ftneg 0009  
                   __size_of___lldiv 0053                     __size_of___ftmul 00B4  
                   __size_of___llmod 0043                     __size_of___ftsub 001E  
                   __size_of___fttol 0087          __size_of_EUSART1_Initialize 0016  
                           ___awtoft 145C                             ___ftpack 1714  
                        _fround$1272 0050                          _fround$1273 004D  
                           ___lltoft 0810                           _ANSELAbits 018C  
                         _ANSELCbits 018E                       ?_UART_buff_get 0070  
                     ?_UART_buff_put 0026                             __ptext10 145C  
                           __ptext11 1269                             __ptext20 125D  
                           __ptext12 1266                             __ptext21 1506  
                           __ptext13 1263                             __ptext30 1275  
                           __ptext22 1400                             __ptext14 1260  
                           __ptext31 135E                             __ptext23 07E2  
                           __ptext15 0802                             __ptext40 072C  
                           __ptext32 08C4                             __ptext24 12CC  
                           __ptext16 143B                             __ptext41 0C9D  
                           __ptext33 161E                             __ptext25 14A4  
                           __ptext17 12F6                             __ptext50 14CA  
                           __ptext42 0810                             __ptext34 1332  
                           __ptext26 147E                             __ptext18 129A  
                           __ptext51 13E3                             __ptext43 1548  
                           __ptext35 05C6                             __ptext27 1289  
                           __ptext19 126C                             __ptext60 1308  
                           __ptext52 1270                             __ptext44 16C1  
                           __ptext36 138F                             __ptext28 0042  
                           __ptext45 1779                             __ptext37 09FD  
                           __ptext29 0DBA                             __ptext54 1281  
                           __ptext46 141D                             __ptext38 158B  
                           __ptext55 1375                             __ptext47 0AB1  
                           __ptext39 166F                             __ptext56 15D1  
                           __ptext48 1714                             __ptext57 12C1  
                           __ptext49 1291                             __ptext58 12E5  
                           __ptext59 083A                      ?_SetCommandMode 0070  
                           __powers_ 104F                        ??_SR_FRSStart 0070  
            EUSART1_Receive_ISR@data 007C                        __size_of_main 0015  
                     _Transmit_stall 00EE              __end_of_SR_FRSPowerDown 1263  
                           int$flags 007E                     i1UART_buff_get@c 0079  
                  ??_TMR2_StartTimer 0020   __end_of_INTERRUPT_InterruptManager 0028  
         _INTERRUPT_InterruptManager 0004                            printf@exp 00BE  
                          printf@val 00BA                     i1UART_buff_put@c 0076  
                _EUSART1_Receive_ISR 12E5                           _INTCONbits 000B  
          UART_buff_modulo_inc@value 0020                           _FVRCONbits 0117  
                   ??_UART_buff_init 0027                     ??_UART_buff_size 0073  
             ??_INTERRUPT_Initialize 0020                             memset@p1 0025  
                           scale@scl 004E                      i1_UART_buff_get 15D1  
                    i1_UART_buff_put 083A                             intlevel1 0000  
                   __tdiv_to_l_@exp1 002F                     __tdiv_to_l_@cntr 002E  
                      ??_ClearTicker 0020                     __tdiv_to_l_@quot 002A  
               ?_EUSART1_Receive_ISR 0070                     ___lldiv@dividend 0024  
       __end_of_EUSART1_Transmit_ISR 138F                     ??_ADC_Initialize 0020  
             __size_of_SetADCChannel 0021                  __end_of_SR_FRSStart 1548  
                           printf@ap 00B7        __size_of_UART_buff_modulo_inc 0016  
                   ??_TMR2_StopTimer 0020                      ??_UART_buff_get 0026  
                    ??_UART_buff_put 0027                         ?__tdiv_to_l_ 0020  
                        _printf$1275 00B2                     ___lldiv@quotient 0029  
              ??_EUSART1_Receive_ISR 007B          i1UART_buff_modulo_inc@value 0070  
                   ?_SR_FRSPowerDown 0070                  __end_of_ClearTicker 1270  
