

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Thu Aug 04 00:15:58 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2
    52                           	psect	text38,local,class=CODE,merge=1,delta=2
    53                           	psect	text39,local,class=CODE,merge=1,delta=2
    54                           	psect	text40,local,class=CODE,merge=1,delta=2
    55                           	psect	text41,local,class=CODE,merge=1,delta=2
    56                           	psect	intentry,global,class=CODE,delta=2
    57                           	psect	text43,local,class=CODE,merge=1,delta=2
    58                           	psect	text44,local,class=CODE,merge=1,delta=2
    59                           	psect	text45,local,class=CODE,merge=1,delta=2
    60                           	psect	text46,local,class=CODE,merge=1,delta=2
    61                           	psect	text47,local,class=CODE,merge=1,delta=2
    62                           	psect	text48,local,class=CODE,merge=1,delta=2
    63                           	psect	text49,local,class=CODE,merge=1,delta=2
    64                           	psect	text15_split_1,local,class=CODE,merge=1,delta=2
    65                           	psect	text15_split_2,local,class=CODE,merge=1,delta=2
    66                           	dabs	1,0x7E,2
    67  0000                     	;# 
    68  0001                     	;# 
    69  0002                     	;# 
    70  0003                     	;# 
    71  0004                     	;# 
    72  0005                     	;# 
    73  0006                     	;# 
    74  0007                     	;# 
    75  0008                     	;# 
    76  0009                     	;# 
    77  000A                     	;# 
    78  000B                     	;# 
    79  000C                     	;# 
    80  000D                     	;# 
    81  000E                     	;# 
    82  0011                     	;# 
    83  0012                     	;# 
    84  0013                     	;# 
    85  0014                     	;# 
    86  0015                     	;# 
    87  0016                     	;# 
    88  0016                     	;# 
    89  0017                     	;# 
    90  0018                     	;# 
    91  0019                     	;# 
    92  001A                     	;# 
    93  001B                     	;# 
    94  001C                     	;# 
    95  001E                     	;# 
    96  001F                     	;# 
    97  008C                     	;# 
    98  008D                     	;# 
    99  008E                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0095                     	;# 
   105  0096                     	;# 
   106  0097                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009B                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  010C                     	;# 
   116  010D                     	;# 
   117  010E                     	;# 
   118  0111                     	;# 
   119  0112                     	;# 
   120  0113                     	;# 
   121  0114                     	;# 
   122  0115                     	;# 
   123  0116                     	;# 
   124  0117                     	;# 
   125  0118                     	;# 
   126  0119                     	;# 
   127  011A                     	;# 
   128  011B                     	;# 
   129  011D                     	;# 
   130  011E                     	;# 
   131  018C                     	;# 
   132  018D                     	;# 
   133  018E                     	;# 
   134  0191                     	;# 
   135  0191                     	;# 
   136  0192                     	;# 
   137  0193                     	;# 
   138  0193                     	;# 
   139  0193                     	;# 
   140  0194                     	;# 
   141  0195                     	;# 
   142  0196                     	;# 
   143  0199                     	;# 
   144  019A                     	;# 
   145  019B                     	;# 
   146  019B                     	;# 
   147  019C                     	;# 
   148  019D                     	;# 
   149  019E                     	;# 
   150  019F                     	;# 
   151  020C                     	;# 
   152  020D                     	;# 
   153  020E                     	;# 
   154  0211                     	;# 
   155  0211                     	;# 
   156  0212                     	;# 
   157  0212                     	;# 
   158  0213                     	;# 
   159  0213                     	;# 
   160  0214                     	;# 
   161  0214                     	;# 
   162  0215                     	;# 
   163  0215                     	;# 
   164  0215                     	;# 
   165  0216                     	;# 
   166  0216                     	;# 
   167  0217                     	;# 
   168  0217                     	;# 
   169  0219                     	;# 
   170  021A                     	;# 
   171  021B                     	;# 
   172  021C                     	;# 
   173  021D                     	;# 
   174  021E                     	;# 
   175  021F                     	;# 
   176  0291                     	;# 
   177  0291                     	;# 
   178  0292                     	;# 
   179  0293                     	;# 
   180  0294                     	;# 
   181  0295                     	;# 
   182  0295                     	;# 
   183  0296                     	;# 
   184  0298                     	;# 
   185  0298                     	;# 
   186  0299                     	;# 
   187  029A                     	;# 
   188  029B                     	;# 
   189  029C                     	;# 
   190  029D                     	;# 
   191  029E                     	;# 
   192  0311                     	;# 
   193  0311                     	;# 
   194  0312                     	;# 
   195  0313                     	;# 
   196  0318                     	;# 
   197  0318                     	;# 
   198  0319                     	;# 
   199  031A                     	;# 
   200  038C                     	;# 
   201  038D                     	;# 
   202  038E                     	;# 
   203  0391                     	;# 
   204  0392                     	;# 
   205  0393                     	;# 
   206  0394                     	;# 
   207  0395                     	;# 
   208  0396                     	;# 
   209  039A                     	;# 
   210  039C                     	;# 
   211  039D                     	;# 
   212  039E                     	;# 
   213  039F                     	;# 
   214  0415                     	;# 
   215  0416                     	;# 
   216  0417                     	;# 
   217  041C                     	;# 
   218  041D                     	;# 
   219  041E                     	;# 
   220  0FE4                     	;# 
   221  0FE5                     	;# 
   222  0FE6                     	;# 
   223  0FE7                     	;# 
   224  0FE8                     	;# 
   225  0FE9                     	;# 
   226  0FEA                     	;# 
   227  0FEB                     	;# 
   228  0FED                     	;# 
   229  0FEE                     	;# 
   230  0FEF                     	;# 
   231  0000                     	;# 
   232  0001                     	;# 
   233  0002                     	;# 
   234  0003                     	;# 
   235  0004                     	;# 
   236  0005                     	;# 
   237  0006                     	;# 
   238  0007                     	;# 
   239  0008                     	;# 
   240  0009                     	;# 
   241  000A                     	;# 
   242  000B                     	;# 
   243  000C                     	;# 
   244  000D                     	;# 
   245  000E                     	;# 
   246  0011                     	;# 
   247  0012                     	;# 
   248  0013                     	;# 
   249  0014                     	;# 
   250  0015                     	;# 
   251  0016                     	;# 
   252  0016                     	;# 
   253  0017                     	;# 
   254  0018                     	;# 
   255  0019                     	;# 
   256  001A                     	;# 
   257  001B                     	;# 
   258  001C                     	;# 
   259  001E                     	;# 
   260  001F                     	;# 
   261  008C                     	;# 
   262  008D                     	;# 
   263  008E                     	;# 
   264  0091                     	;# 
   265  0092                     	;# 
   266  0093                     	;# 
   267  0094                     	;# 
   268  0095                     	;# 
   269  0096                     	;# 
   270  0097                     	;# 
   271  0098                     	;# 
   272  0099                     	;# 
   273  009A                     	;# 
   274  009B                     	;# 
   275  009B                     	;# 
   276  009C                     	;# 
   277  009D                     	;# 
   278  009E                     	;# 
   279  010C                     	;# 
   280  010D                     	;# 
   281  010E                     	;# 
   282  0111                     	;# 
   283  0112                     	;# 
   284  0113                     	;# 
   285  0114                     	;# 
   286  0115                     	;# 
   287  0116                     	;# 
   288  0117                     	;# 
   289  0118                     	;# 
   290  0119                     	;# 
   291  011A                     	;# 
   292  011B                     	;# 
   293  011D                     	;# 
   294  011E                     	;# 
   295  018C                     	;# 
   296  018D                     	;# 
   297  018E                     	;# 
   298  0191                     	;# 
   299  0191                     	;# 
   300  0192                     	;# 
   301  0193                     	;# 
   302  0193                     	;# 
   303  0193                     	;# 
   304  0194                     	;# 
   305  0195                     	;# 
   306  0196                     	;# 
   307  0199                     	;# 
   308  019A                     	;# 
   309  019B                     	;# 
   310  019B                     	;# 
   311  019C                     	;# 
   312  019D                     	;# 
   313  019E                     	;# 
   314  019F                     	;# 
   315  020C                     	;# 
   316  020D                     	;# 
   317  020E                     	;# 
   318  0211                     	;# 
   319  0211                     	;# 
   320  0212                     	;# 
   321  0212                     	;# 
   322  0213                     	;# 
   323  0213                     	;# 
   324  0214                     	;# 
   325  0214                     	;# 
   326  0215                     	;# 
   327  0215                     	;# 
   328  0215                     	;# 
   329  0216                     	;# 
   330  0216                     	;# 
   331  0217                     	;# 
   332  0217                     	;# 
   333  0219                     	;# 
   334  021A                     	;# 
   335  021B                     	;# 
   336  021C                     	;# 
   337  021D                     	;# 
   338  021E                     	;# 
   339  021F                     	;# 
   340  0291                     	;# 
   341  0291                     	;# 
   342  0292                     	;# 
   343  0293                     	;# 
   344  0294                     	;# 
   345  0295                     	;# 
   346  0295                     	;# 
   347  0296                     	;# 
   348  0298                     	;# 
   349  0298                     	;# 
   350  0299                     	;# 
   351  029A                     	;# 
   352  029B                     	;# 
   353  029C                     	;# 
   354  029D                     	;# 
   355  029E                     	;# 
   356  0311                     	;# 
   357  0311                     	;# 
   358  0312                     	;# 
   359  0313                     	;# 
   360  0318                     	;# 
   361  0318                     	;# 
   362  0319                     	;# 
   363  031A                     	;# 
   364  038C                     	;# 
   365  038D                     	;# 
   366  038E                     	;# 
   367  0391                     	;# 
   368  0392                     	;# 
   369  0393                     	;# 
   370  0394                     	;# 
   371  0395                     	;# 
   372  0396                     	;# 
   373  039A                     	;# 
   374  039C                     	;# 
   375  039D                     	;# 
   376  039E                     	;# 
   377  039F                     	;# 
   378  0415                     	;# 
   379  0416                     	;# 
   380  0417                     	;# 
   381  041C                     	;# 
   382  041D                     	;# 
   383  041E                     	;# 
   384  0FE4                     	;# 
   385  0FE5                     	;# 
   386  0FE6                     	;# 
   387  0FE7                     	;# 
   388  0FE8                     	;# 
   389  0FE9                     	;# 
   390  0FEA                     	;# 
   391  0FEB                     	;# 
   392  0FED                     	;# 
   393  0FEE                     	;# 
   394  0FEF                     	;# 
   395  0000                     	;# 
   396  0001                     	;# 
   397  0002                     	;# 
   398  0003                     	;# 
   399  0004                     	;# 
   400  0005                     	;# 
   401  0006                     	;# 
   402  0007                     	;# 
   403  0008                     	;# 
   404  0009                     	;# 
   405  000A                     	;# 
   406  000B                     	;# 
   407  000C                     	;# 
   408  000D                     	;# 
   409  000E                     	;# 
   410  0011                     	;# 
   411  0012                     	;# 
   412  0013                     	;# 
   413  0014                     	;# 
   414  0015                     	;# 
   415  0016                     	;# 
   416  0016                     	;# 
   417  0017                     	;# 
   418  0018                     	;# 
   419  0019                     	;# 
   420  001A                     	;# 
   421  001B                     	;# 
   422  001C                     	;# 
   423  001E                     	;# 
   424  001F                     	;# 
   425  008C                     	;# 
   426  008D                     	;# 
   427  008E                     	;# 
   428  0091                     	;# 
   429  0092                     	;# 
   430  0093                     	;# 
   431  0094                     	;# 
   432  0095                     	;# 
   433  0096                     	;# 
   434  0097                     	;# 
   435  0098                     	;# 
   436  0099                     	;# 
   437  009A                     	;# 
   438  009B                     	;# 
   439  009B                     	;# 
   440  009C                     	;# 
   441  009D                     	;# 
   442  009E                     	;# 
   443  010C                     	;# 
   444  010D                     	;# 
   445  010E                     	;# 
   446  0111                     	;# 
   447  0112                     	;# 
   448  0113                     	;# 
   449  0114                     	;# 
   450  0115                     	;# 
   451  0116                     	;# 
   452  0117                     	;# 
   453  0118                     	;# 
   454  0119                     	;# 
   455  011A                     	;# 
   456  011B                     	;# 
   457  011D                     	;# 
   458  011E                     	;# 
   459  018C                     	;# 
   460  018D                     	;# 
   461  018E                     	;# 
   462  0191                     	;# 
   463  0191                     	;# 
   464  0192                     	;# 
   465  0193                     	;# 
   466  0193                     	;# 
   467  0193                     	;# 
   468  0194                     	;# 
   469  0195                     	;# 
   470  0196                     	;# 
   471  0199                     	;# 
   472  019A                     	;# 
   473  019B                     	;# 
   474  019B                     	;# 
   475  019C                     	;# 
   476  019D                     	;# 
   477  019E                     	;# 
   478  019F                     	;# 
   479  020C                     	;# 
   480  020D                     	;# 
   481  020E                     	;# 
   482  0211                     	;# 
   483  0211                     	;# 
   484  0212                     	;# 
   485  0212                     	;# 
   486  0213                     	;# 
   487  0213                     	;# 
   488  0214                     	;# 
   489  0214                     	;# 
   490  0215                     	;# 
   491  0215                     	;# 
   492  0215                     	;# 
   493  0216                     	;# 
   494  0216                     	;# 
   495  0217                     	;# 
   496  0217                     	;# 
   497  0219                     	;# 
   498  021A                     	;# 
   499  021B                     	;# 
   500  021C                     	;# 
   501  021D                     	;# 
   502  021E                     	;# 
   503  021F                     	;# 
   504  0291                     	;# 
   505  0291                     	;# 
   506  0292                     	;# 
   507  0293                     	;# 
   508  0294                     	;# 
   509  0295                     	;# 
   510  0295                     	;# 
   511  0296                     	;# 
   512  0298                     	;# 
   513  0298                     	;# 
   514  0299                     	;# 
   515  029A                     	;# 
   516  029B                     	;# 
   517  029C                     	;# 
   518  029D                     	;# 
   519  029E                     	;# 
   520  0311                     	;# 
   521  0311                     	;# 
   522  0312                     	;# 
   523  0313                     	;# 
   524  0318                     	;# 
   525  0318                     	;# 
   526  0319                     	;# 
   527  031A                     	;# 
   528  038C                     	;# 
   529  038D                     	;# 
   530  038E                     	;# 
   531  0391                     	;# 
   532  0392                     	;# 
   533  0393                     	;# 
   534  0394                     	;# 
   535  0395                     	;# 
   536  0396                     	;# 
   537  039A                     	;# 
   538  039C                     	;# 
   539  039D                     	;# 
   540  039E                     	;# 
   541  039F                     	;# 
   542  0415                     	;# 
   543  0416                     	;# 
   544  0417                     	;# 
   545  041C                     	;# 
   546  041D                     	;# 
   547  041E                     	;# 
   548  0FE4                     	;# 
   549  0FE5                     	;# 
   550  0FE6                     	;# 
   551  0FE7                     	;# 
   552  0FE8                     	;# 
   553  0FE9                     	;# 
   554  0FEA                     	;# 
   555  0FEB                     	;# 
   556  0FED                     	;# 
   557  0FEE                     	;# 
   558  0FEF                     	;# 
   559  0000                     	;# 
   560  0001                     	;# 
   561  0002                     	;# 
   562  0003                     	;# 
   563  0004                     	;# 
   564  0005                     	;# 
   565  0006                     	;# 
   566  0007                     	;# 
   567  0008                     	;# 
   568  0009                     	;# 
   569  000A                     	;# 
   570  000B                     	;# 
   571  000C                     	;# 
   572  000D                     	;# 
   573  000E                     	;# 
   574  0011                     	;# 
   575  0012                     	;# 
   576  0013                     	;# 
   577  0014                     	;# 
   578  0015                     	;# 
   579  0016                     	;# 
   580  0016                     	;# 
   581  0017                     	;# 
   582  0018                     	;# 
   583  0019                     	;# 
   584  001A                     	;# 
   585  001B                     	;# 
   586  001C                     	;# 
   587  001E                     	;# 
   588  001F                     	;# 
   589  008C                     	;# 
   590  008D                     	;# 
   591  008E                     	;# 
   592  0091                     	;# 
   593  0092                     	;# 
   594  0093                     	;# 
   595  0094                     	;# 
   596  0095                     	;# 
   597  0096                     	;# 
   598  0097                     	;# 
   599  0098                     	;# 
   600  0099                     	;# 
   601  009A                     	;# 
   602  009B                     	;# 
   603  009B                     	;# 
   604  009C                     	;# 
   605  009D                     	;# 
   606  009E                     	;# 
   607  010C                     	;# 
   608  010D                     	;# 
   609  010E                     	;# 
   610  0111                     	;# 
   611  0112                     	;# 
   612  0113                     	;# 
   613  0114                     	;# 
   614  0115                     	;# 
   615  0116                     	;# 
   616  0117                     	;# 
   617  0118                     	;# 
   618  0119                     	;# 
   619  011A                     	;# 
   620  011B                     	;# 
   621  011D                     	;# 
   622  011E                     	;# 
   623  018C                     	;# 
   624  018D                     	;# 
   625  018E                     	;# 
   626  0191                     	;# 
   627  0191                     	;# 
   628  0192                     	;# 
   629  0193                     	;# 
   630  0193                     	;# 
   631  0193                     	;# 
   632  0194                     	;# 
   633  0195                     	;# 
   634  0196                     	;# 
   635  0199                     	;# 
   636  019A                     	;# 
   637  019B                     	;# 
   638  019B                     	;# 
   639  019C                     	;# 
   640  019D                     	;# 
   641  019E                     	;# 
   642  019F                     	;# 
   643  020C                     	;# 
   644  020D                     	;# 
   645  020E                     	;# 
   646  0211                     	;# 
   647  0211                     	;# 
   648  0212                     	;# 
   649  0212                     	;# 
   650  0213                     	;# 
   651  0213                     	;# 
   652  0214                     	;# 
   653  0214                     	;# 
   654  0215                     	;# 
   655  0215                     	;# 
   656  0215                     	;# 
   657  0216                     	;# 
   658  0216                     	;# 
   659  0217                     	;# 
   660  0217                     	;# 
   661  0219                     	;# 
   662  021A                     	;# 
   663  021B                     	;# 
   664  021C                     	;# 
   665  021D                     	;# 
   666  021E                     	;# 
   667  021F                     	;# 
   668  0291                     	;# 
   669  0291                     	;# 
   670  0292                     	;# 
   671  0293                     	;# 
   672  0294                     	;# 
   673  0295                     	;# 
   674  0295                     	;# 
   675  0296                     	;# 
   676  0298                     	;# 
   677  0298                     	;# 
   678  0299                     	;# 
   679  029A                     	;# 
   680  029B                     	;# 
   681  029C                     	;# 
   682  029D                     	;# 
   683  029E                     	;# 
   684  0311                     	;# 
   685  0311                     	;# 
   686  0312                     	;# 
   687  0313                     	;# 
   688  0318                     	;# 
   689  0318                     	;# 
   690  0319                     	;# 
   691  031A                     	;# 
   692  038C                     	;# 
   693  038D                     	;# 
   694  038E                     	;# 
   695  0391                     	;# 
   696  0392                     	;# 
   697  0393                     	;# 
   698  0394                     	;# 
   699  0395                     	;# 
   700  0396                     	;# 
   701  039A                     	;# 
   702  039C                     	;# 
   703  039D                     	;# 
   704  039E                     	;# 
   705  039F                     	;# 
   706  0415                     	;# 
   707  0416                     	;# 
   708  0417                     	;# 
   709  041C                     	;# 
   710  041D                     	;# 
   711  041E                     	;# 
   712  0FE4                     	;# 
   713  0FE5                     	;# 
   714  0FE6                     	;# 
   715  0FE7                     	;# 
   716  0FE8                     	;# 
   717  0FE9                     	;# 
   718  0FEA                     	;# 
   719  0FEB                     	;# 
   720  0FED                     	;# 
   721  0FEE                     	;# 
   722  0FEF                     	;# 
   723  0000                     	;# 
   724  0001                     	;# 
   725  0002                     	;# 
   726  0003                     	;# 
   727  0004                     	;# 
   728  0005                     	;# 
   729  0006                     	;# 
   730  0007                     	;# 
   731  0008                     	;# 
   732  0009                     	;# 
   733  000A                     	;# 
   734  000B                     	;# 
   735  000C                     	;# 
   736  000D                     	;# 
   737  000E                     	;# 
   738  0011                     	;# 
   739  0012                     	;# 
   740  0013                     	;# 
   741  0014                     	;# 
   742  0015                     	;# 
   743  0016                     	;# 
   744  0016                     	;# 
   745  0017                     	;# 
   746  0018                     	;# 
   747  0019                     	;# 
   748  001A                     	;# 
   749  001B                     	;# 
   750  001C                     	;# 
   751  001E                     	;# 
   752  001F                     	;# 
   753  008C                     	;# 
   754  008D                     	;# 
   755  008E                     	;# 
   756  0091                     	;# 
   757  0092                     	;# 
   758  0093                     	;# 
   759  0094                     	;# 
   760  0095                     	;# 
   761  0096                     	;# 
   762  0097                     	;# 
   763  0098                     	;# 
   764  0099                     	;# 
   765  009A                     	;# 
   766  009B                     	;# 
   767  009B                     	;# 
   768  009C                     	;# 
   769  009D                     	;# 
   770  009E                     	;# 
   771  010C                     	;# 
   772  010D                     	;# 
   773  010E                     	;# 
   774  0111                     	;# 
   775  0112                     	;# 
   776  0113                     	;# 
   777  0114                     	;# 
   778  0115                     	;# 
   779  0116                     	;# 
   780  0117                     	;# 
   781  0118                     	;# 
   782  0119                     	;# 
   783  011A                     	;# 
   784  011B                     	;# 
   785  011D                     	;# 
   786  011E                     	;# 
   787  018C                     	;# 
   788  018D                     	;# 
   789  018E                     	;# 
   790  0191                     	;# 
   791  0191                     	;# 
   792  0192                     	;# 
   793  0193                     	;# 
   794  0193                     	;# 
   795  0193                     	;# 
   796  0194                     	;# 
   797  0195                     	;# 
   798  0196                     	;# 
   799  0199                     	;# 
   800  019A                     	;# 
   801  019B                     	;# 
   802  019B                     	;# 
   803  019C                     	;# 
   804  019D                     	;# 
   805  019E                     	;# 
   806  019F                     	;# 
   807  020C                     	;# 
   808  020D                     	;# 
   809  020E                     	;# 
   810  0211                     	;# 
   811  0211                     	;# 
   812  0212                     	;# 
   813  0212                     	;# 
   814  0213                     	;# 
   815  0213                     	;# 
   816  0214                     	;# 
   817  0214                     	;# 
   818  0215                     	;# 
   819  0215                     	;# 
   820  0215                     	;# 
   821  0216                     	;# 
   822  0216                     	;# 
   823  0217                     	;# 
   824  0217                     	;# 
   825  0219                     	;# 
   826  021A                     	;# 
   827  021B                     	;# 
   828  021C                     	;# 
   829  021D                     	;# 
   830  021E                     	;# 
   831  021F                     	;# 
   832  0291                     	;# 
   833  0291                     	;# 
   834  0292                     	;# 
   835  0293                     	;# 
   836  0294                     	;# 
   837  0295                     	;# 
   838  0295                     	;# 
   839  0296                     	;# 
   840  0298                     	;# 
   841  0298                     	;# 
   842  0299                     	;# 
   843  029A                     	;# 
   844  029B                     	;# 
   845  029C                     	;# 
   846  029D                     	;# 
   847  029E                     	;# 
   848  0311                     	;# 
   849  0311                     	;# 
   850  0312                     	;# 
   851  0313                     	;# 
   852  0318                     	;# 
   853  0318                     	;# 
   854  0319                     	;# 
   855  031A                     	;# 
   856  038C                     	;# 
   857  038D                     	;# 
   858  038E                     	;# 
   859  0391                     	;# 
   860  0392                     	;# 
   861  0393                     	;# 
   862  0394                     	;# 
   863  0395                     	;# 
   864  0396                     	;# 
   865  039A                     	;# 
   866  039C                     	;# 
   867  039D                     	;# 
   868  039E                     	;# 
   869  039F                     	;# 
   870  0415                     	;# 
   871  0416                     	;# 
   872  0417                     	;# 
   873  041C                     	;# 
   874  041D                     	;# 
   875  041E                     	;# 
   876  0FE4                     	;# 
   877  0FE5                     	;# 
   878  0FE6                     	;# 
   879  0FE7                     	;# 
   880  0FE8                     	;# 
   881  0FE9                     	;# 
   882  0FEA                     	;# 
   883  0FEB                     	;# 
   884  0FED                     	;# 
   885  0FEE                     	;# 
   886  0FEF                     	;# 
   887  0000                     	;# 
   888  0001                     	;# 
   889  0002                     	;# 
   890  0003                     	;# 
   891  0004                     	;# 
   892  0005                     	;# 
   893  0006                     	;# 
   894  0007                     	;# 
   895  0008                     	;# 
   896  0009                     	;# 
   897  000A                     	;# 
   898  000B                     	;# 
   899  000C                     	;# 
   900  000D                     	;# 
   901  000E                     	;# 
   902  0011                     	;# 
   903  0012                     	;# 
   904  0013                     	;# 
   905  0014                     	;# 
   906  0015                     	;# 
   907  0016                     	;# 
   908  0016                     	;# 
   909  0017                     	;# 
   910  0018                     	;# 
   911  0019                     	;# 
   912  001A                     	;# 
   913  001B                     	;# 
   914  001C                     	;# 
   915  001E                     	;# 
   916  001F                     	;# 
   917  008C                     	;# 
   918  008D                     	;# 
   919  008E                     	;# 
   920  0091                     	;# 
   921  0092                     	;# 
   922  0093                     	;# 
   923  0094                     	;# 
   924  0095                     	;# 
   925  0096                     	;# 
   926  0097                     	;# 
   927  0098                     	;# 
   928  0099                     	;# 
   929  009A                     	;# 
   930  009B                     	;# 
   931  009B                     	;# 
   932  009C                     	;# 
   933  009D                     	;# 
   934  009E                     	;# 
   935  010C                     	;# 
   936  010D                     	;# 
   937  010E                     	;# 
   938  0111                     	;# 
   939  0112                     	;# 
   940  0113                     	;# 
   941  0114                     	;# 
   942  0115                     	;# 
   943  0116                     	;# 
   944  0117                     	;# 
   945  0118                     	;# 
   946  0119                     	;# 
   947  011A                     	;# 
   948  011B                     	;# 
   949  011D                     	;# 
   950  011E                     	;# 
   951  018C                     	;# 
   952  018D                     	;# 
   953  018E                     	;# 
   954  0191                     	;# 
   955  0191                     	;# 
   956  0192                     	;# 
   957  0193                     	;# 
   958  0193                     	;# 
   959  0193                     	;# 
   960  0194                     	;# 
   961  0195                     	;# 
   962  0196                     	;# 
   963  0199                     	;# 
   964  019A                     	;# 
   965  019B                     	;# 
   966  019B                     	;# 
   967  019C                     	;# 
   968  019D                     	;# 
   969  019E                     	;# 
   970  019F                     	;# 
   971  020C                     	;# 
   972  020D                     	;# 
   973  020E                     	;# 
   974  0211                     	;# 
   975  0211                     	;# 
   976  0212                     	;# 
   977  0212                     	;# 
   978  0213                     	;# 
   979  0213                     	;# 
   980  0214                     	;# 
   981  0214                     	;# 
   982  0215                     	;# 
   983  0215                     	;# 
   984  0215                     	;# 
   985  0216                     	;# 
   986  0216                     	;# 
   987  0217                     	;# 
   988  0217                     	;# 
   989  0219                     	;# 
   990  021A                     	;# 
   991  021B                     	;# 
   992  021C                     	;# 
   993  021D                     	;# 
   994  021E                     	;# 
   995  021F                     	;# 
   996  0291                     	;# 
   997  0291                     	;# 
   998  0292                     	;# 
   999  0293                     	;# 
  1000  0294                     	;# 
  1001  0295                     	;# 
  1002  0295                     	;# 
  1003  0296                     	;# 
  1004  0298                     	;# 
  1005  0298                     	;# 
  1006  0299                     	;# 
  1007  029A                     	;# 
  1008  029B                     	;# 
  1009  029C                     	;# 
  1010  029D                     	;# 
  1011  029E                     	;# 
  1012  0311                     	;# 
  1013  0311                     	;# 
  1014  0312                     	;# 
  1015  0313                     	;# 
  1016  0318                     	;# 
  1017  0318                     	;# 
  1018  0319                     	;# 
  1019  031A                     	;# 
  1020  038C                     	;# 
  1021  038D                     	;# 
  1022  038E                     	;# 
  1023  0391                     	;# 
  1024  0392                     	;# 
  1025  0393                     	;# 
  1026  0394                     	;# 
  1027  0395                     	;# 
  1028  0396                     	;# 
  1029  039A                     	;# 
  1030  039C                     	;# 
  1031  039D                     	;# 
  1032  039E                     	;# 
  1033  039F                     	;# 
  1034  0415                     	;# 
  1035  0416                     	;# 
  1036  0417                     	;# 
  1037  041C                     	;# 
  1038  041D                     	;# 
  1039  041E                     	;# 
  1040  0FE4                     	;# 
  1041  0FE5                     	;# 
  1042  0FE6                     	;# 
  1043  0FE7                     	;# 
  1044  0FE8                     	;# 
  1045  0FE9                     	;# 
  1046  0FEA                     	;# 
  1047  0FEB                     	;# 
  1048  0FED                     	;# 
  1049  0FEE                     	;# 
  1050  0FEF                     	;# 
  1051                           
  1052                           	psect	idataBANK1
  1053  07FF                     __pidataBANK1:	
  1054                           
  1055                           ;initializer for _Transmit_stall
  1056  07FF  3401               	retlw	1
  1057                           
  1058                           	psect	stringtext
  1059  1000                     __pstringtext:	
  1060  1000                     _octpowers:	
  1061  1000  3401               	retlw	1
  1062  1001  3400               	retlw	0
  1063  1002  3400               	retlw	0
  1064  1003  3400               	retlw	0
  1065  1004  3408               	retlw	8
  1066  1005  3400               	retlw	0
  1067  1006  3400               	retlw	0
  1068  1007  3400               	retlw	0
  1069  1008  3440               	retlw	64
  1070  1009  3400               	retlw	0
  1071  100A  3400               	retlw	0
  1072  100B  3400               	retlw	0
  1073  100C  3400               	retlw	0
  1074  100D  3402               	retlw	2
  1075  100E  3400               	retlw	0
  1076  100F  3400               	retlw	0
  1077  1010  3400               	retlw	0
  1078  1011  3410               	retlw	16
  1079  1012  3400               	retlw	0
  1080  1013  3400               	retlw	0
  1081  1014  3400               	retlw	0
  1082  1015  3480               	retlw	128
  1083  1016  3400               	retlw	0
  1084  1017  3400               	retlw	0
  1085  1018  3400               	retlw	0
  1086  1019  3400               	retlw	0
  1087  101A  3404               	retlw	4
  1088  101B  3400               	retlw	0
  1089  101C  3400               	retlw	0
  1090  101D  3400               	retlw	0
  1091  101E  3420               	retlw	32
  1092  101F  3400               	retlw	0
  1093  1020  3400               	retlw	0
  1094  1021  3400               	retlw	0
  1095  1022  3400               	retlw	0
  1096  1023  3401               	retlw	1
  1097  1024  3400               	retlw	0
  1098  1025  3400               	retlw	0
  1099  1026  3400               	retlw	0
  1100  1027  3408               	retlw	8
  1101  1028  3400               	retlw	0
  1102  1029  3400               	retlw	0
  1103  102A  3400               	retlw	0
  1104  102B  3440               	retlw	64
  1105  102C  3400               	retlw	0
  1106  102D  3400               	retlw	0
  1107  102E  3400               	retlw	0
  1108  102F  3400               	retlw	0
  1109  1030                     __end_of_octpowers:	
  1110  1030                     _dpowers:	
  1111  1030  3401               	retlw	1
  1112  1031  3400               	retlw	0
  1113  1032  3400               	retlw	0
  1114  1033  3400               	retlw	0
  1115  1034  340A               	retlw	10
  1116  1035  3400               	retlw	0
  1117  1036  3400               	retlw	0
  1118  1037  3400               	retlw	0
  1119  1038  3464               	retlw	100
  1120  1039  3400               	retlw	0
  1121  103A  3400               	retlw	0
  1122  103B  3400               	retlw	0
  1123  103C  34E8               	retlw	232
  1124  103D  3403               	retlw	3
  1125  103E  3400               	retlw	0
  1126  103F  3400               	retlw	0
  1127  1040  3410               	retlw	16
  1128  1041  3427               	retlw	39
  1129  1042  3400               	retlw	0
  1130  1043  3400               	retlw	0
  1131  1044  34A0               	retlw	160
  1132  1045  3486               	retlw	134
  1133  1046  3401               	retlw	1
  1134  1047  3400               	retlw	0
  1135  1048  3440               	retlw	64
  1136  1049  3442               	retlw	66
  1137  104A  340F               	retlw	15
  1138  104B  3400               	retlw	0
  1139  104C  3480               	retlw	128
  1140  104D  3496               	retlw	150
  1141  104E  3498               	retlw	152
  1142  104F  3400               	retlw	0
  1143  1050  3400               	retlw	0
  1144  1051  34E1               	retlw	225
  1145  1052  34F5               	retlw	245
  1146  1053  3405               	retlw	5
  1147  1054  3400               	retlw	0
  1148  1055  34CA               	retlw	202
  1149  1056  349A               	retlw	154
  1150  1057  343B               	retlw	59
  1151  1058                     __end_of_dpowers:	
  1152  1058                     __npowers_:	
  1153  1058  3400               	retlw	0
  1154  1059  3480               	retlw	128
  1155  105A  343F               	retlw	63
  1156  105B  34CD               	retlw	205
  1157  105C  34CC               	retlw	204
  1158  105D  343D               	retlw	61
  1159  105E  34D7               	retlw	215
  1160  105F  3423               	retlw	35
  1161  1060  343C               	retlw	60
  1162  1061  3412               	retlw	18
  1163  1062  3483               	retlw	131
  1164  1063  343A               	retlw	58
  1165  1064  34B7               	retlw	183
  1166  1065  34D1               	retlw	209
  1167  1066  3438               	retlw	56
  1168  1067  34C6               	retlw	198
  1169  1068  3427               	retlw	39
  1170  1069  3437               	retlw	55
  1171  106A  3438               	retlw	56
  1172  106B  3486               	retlw	134
  1173  106C  3435               	retlw	53
  1174  106D  34C0               	retlw	192
  1175  106E  34D6               	retlw	214
  1176  106F  3433               	retlw	51
  1177  1070  34CC               	retlw	204
  1178  1071  342B               	retlw	43
  1179  1072  3432               	retlw	50
  1180  1073  3470               	retlw	112
  1181  1074  3489               	retlw	137
  1182  1075  3430               	retlw	48
  1183  1076  34E7               	retlw	231
  1184  1077  34DB               	retlw	219
  1185  1078  342E               	retlw	46
  1186  1079  34E5               	retlw	229
  1187  107A  343C               	retlw	60
  1188  107B  341E               	retlw	30
  1189  107C  3442               	retlw	66
  1190  107D  34A2               	retlw	162
  1191  107E  340D               	retlw	13
  1192  107F                     __end_of__npowers_:	
  1193  107F                     __powers_:	
  1194  107F  3400               	retlw	0
  1195  1080  3480               	retlw	128
  1196  1081  343F               	retlw	63
  1197  1082  3400               	retlw	0
  1198  1083  3420               	retlw	32
  1199  1084  3441               	retlw	65
  1200  1085  3400               	retlw	0
  1201  1086  34C8               	retlw	200
  1202  1087  3442               	retlw	66
  1203  1088  3400               	retlw	0
  1204  1089  347A               	retlw	122
  1205  108A  3444               	retlw	68
  1206  108B  3440               	retlw	64
  1207  108C  341C               	retlw	28
  1208  108D  3446               	retlw	70
  1209  108E  3450               	retlw	80
  1210  108F  34C3               	retlw	195
  1211  1090  3447               	retlw	71
  1212  1091  3424               	retlw	36
  1213  1092  3474               	retlw	116
  1214  1093  3449               	retlw	73
  1215  1094  3497               	retlw	151
  1216  1095  3418               	retlw	24
  1217  1096  344B               	retlw	75
  1218  1097  34BC               	retlw	188
  1219  1098  34BE               	retlw	190
  1220  1099  344C               	retlw	76
  1221  109A  346B               	retlw	107
  1222  109B  346E               	retlw	110
  1223  109C  344E               	retlw	78
  1224  109D  3403               	retlw	3
  1225  109E  3415               	retlw	21
  1226  109F  3450               	retlw	80
  1227  10A0  3479               	retlw	121
  1228  10A1  34AD               	retlw	173
  1229  10A2  3460               	retlw	96
  1230  10A3  34F3               	retlw	243
  1231  10A4  3449               	retlw	73
  1232  10A5  3471               	retlw	113
  1233  10A6                     __end_of__powers_:	
  1234  10A6                     _hexpowers:	
  1235  10A6  3401               	retlw	1
  1236  10A7  3400               	retlw	0
  1237  10A8  3400               	retlw	0
  1238  10A9  3400               	retlw	0
  1239  10AA  3410               	retlw	16
  1240  10AB  3400               	retlw	0
  1241  10AC  3400               	retlw	0
  1242  10AD  3400               	retlw	0
  1243  10AE  3400               	retlw	0
  1244  10AF  3401               	retlw	1
  1245  10B0  3400               	retlw	0
  1246  10B1  3400               	retlw	0
  1247  10B2  3400               	retlw	0
  1248  10B3  3410               	retlw	16
  1249  10B4  3400               	retlw	0
  1250  10B5  3400               	retlw	0
  1251  10B6  3400               	retlw	0
  1252  10B7  3400               	retlw	0
  1253  10B8  3401               	retlw	1
  1254  10B9  3400               	retlw	0
  1255  10BA  3400               	retlw	0
  1256  10BB  3400               	retlw	0
  1257  10BC  3410               	retlw	16
  1258  10BD  3400               	retlw	0
  1259  10BE  3400               	retlw	0
  1260  10BF  3400               	retlw	0
  1261  10C0  3400               	retlw	0
  1262  10C1  3401               	retlw	1
  1263  10C2  3400               	retlw	0
  1264  10C3  3400               	retlw	0
  1265  10C4  3400               	retlw	0
  1266  10C5  3410               	retlw	16
  1267  10C6                     __end_of_hexpowers:	
  1268  000B                     _INTCON	set	11
  1269  000B                     _INTCONbits	set	11
  1270  0011                     _PIR1bits	set	17
  1271  000C                     _PORTAbits	set	12
  1272  000E                     _PORTCbits	set	14
  1273  001B                     _PR2	set	27
  1274  001C                     _T2CON	set	28
  1275  001C                     _T2CONbits	set	28
  1276  001A                     _TMR2	set	26
  1277  009D                     _ADCON0bits	set	157
  1278  009E                     _ADCON1bits	set	158
  1279  0091                     _PIE1bits	set	145
  1280  008C                     _TRISAbits	set	140
  1281  008E                     _TRISCbits	set	142
  1282  0117                     _FVRCONbits	set	279
  1283  019B                     _SPBRG	set	411
  1284  018C                     _ANSELAbits	set	396
  1285  018E                     _ANSELCbits	set	398
  1286  0199                     _RCREG	set	409
  1287  019D                     _RCSTA	set	413
  1288  019D                     _RCSTAbits	set	413
  1289  019A                     _TXREG	set	410
  1290  019E                     _TXSTA	set	414
  1291  10C6                     STR_2:	
  1292  10C6  3441               	retlw	65	;'A'
  1293  10C7  3454               	retlw	84	;'T'
  1294  10C8  342B               	retlw	43	;'+'
  1295  10C9  3444               	retlw	68	;'D'
  1296  10CA  344D               	retlw	77	;'M'
  1297  10CB  344F               	retlw	79	;'O'
  1298  10CC  3453               	retlw	83	;'S'
  1299  10CD  3445               	retlw	69	;'E'
  1300  10CE  3454               	retlw	84	;'T'
  1301  10CF  3447               	retlw	71	;'G'
  1302  10D0  3452               	retlw	82	;'R'
  1303  10D1  344F               	retlw	79	;'O'
  1304  10D2  3455               	retlw	85	;'U'
  1305  10D3  3450               	retlw	80	;'P'
  1306  10D4  343D               	retlw	61	;'='
  1307  10D5  3425               	retlw	37	;'%'
  1308  10D6  3464               	retlw	100	;'d'
  1309  10D7  342C               	retlw	44	;','
  1310  10D8  3425               	retlw	37	;'%'
  1311  10D9  3466               	retlw	102	;'f'
  1312  10DA  342C               	retlw	44	;','
  1313  10DB  3425               	retlw	37	;'%'
  1314  10DC  3466               	retlw	102	;'f'
  1315  10DD  342C               	retlw	44	;','
  1316  10DE  3425               	retlw	37	;'%'
  1317  10DF  3464               	retlw	100	;'d'
  1318  10E0  342C               	retlw	44	;','
  1319  10E1  3425               	retlw	37	;'%'
  1320  10E2  3464               	retlw	100	;'d'
  1321  10E3  342C               	retlw	44	;','
  1322  10E4  3425               	retlw	37	;'%'
  1323  10E5  3464               	retlw	100	;'d'
  1324  10E6  3400               	retlw	0
  1325  10E7                     STR_6:	
  1326  10E7  3441               	retlw	65	;'A'
  1327  10E8  3454               	retlw	84	;'T'
  1328  10E9  342B               	retlw	43	;'+'
  1329  10EA  3444               	retlw	68	;'D'
  1330  10EB  344D               	retlw	77	;'M'
  1331  10EC  344F               	retlw	79	;'O'
  1332  10ED  3453               	retlw	83	;'S'
  1333  10EE  3445               	retlw	69	;'E'
  1334  10EF  3454               	retlw	84	;'T'
  1335  10F0  344D               	retlw	77	;'M'
  1336  10F1  3449               	retlw	73	;'I'
  1337  10F2  3443               	retlw	67	;'C'
  1338  10F3  343D               	retlw	61	;'='
  1339  10F4  3425               	retlw	37	;'%'
  1340  10F5  3463               	retlw	99	;'c'
  1341  10F6  342C               	retlw	44	;','
  1342  10F7  3425               	retlw	37	;'%'
  1343  10F8  3463               	retlw	99	;'c'
  1344  10F9  342C               	retlw	44	;','
  1345  10FA  3425               	retlw	37	;'%'
  1346  10FB  3463               	retlw	99	;'c'
  1347  10FC  3400               	retlw	0
  1348  10FD                     STR_3:	
  1349  10FD  3441               	retlw	65	;'A'
  1350  10FE  3454               	retlw	84	;'T'
  1351  10FF  342B               	retlw	43	;'+'
  1352  1100  3444               	retlw	68	;'D'
  1353  1101  344D               	retlw	77	;'M'
  1354  1102  344F               	retlw	79	;'O'
  1355  1103  3441               	retlw	65	;'A'
  1356  1104  3455               	retlw	85	;'U'
  1357  1105  3454               	retlw	84	;'T'
  1358  1106  344F               	retlw	79	;'O'
  1359  1107  3450               	retlw	80	;'P'
  1360  1108  344F               	retlw	79	;'O'
  1361  1109  3457               	retlw	87	;'W'
  1362  110A  3443               	retlw	67	;'C'
  1363  110B  344F               	retlw	79	;'O'
  1364  110C  344E               	retlw	78	;'N'
  1365  110D  3454               	retlw	84	;'T'
  1366  110E  3452               	retlw	82	;'R'
  1367  110F  343D               	retlw	61	;'='
  1368  1110  3425               	retlw	37	;'%'
  1369  1111  3463               	retlw	99	;'c'
  1370  1112  3400               	retlw	0
  1371  1113                     STR_4:	
  1372  1113  3441               	retlw	65	;'A'
  1373  1114  3454               	retlw	84	;'T'
  1374  1115  342B               	retlw	43	;'+'
  1375  1116  3444               	retlw	68	;'D'
  1376  1117  344D               	retlw	77	;'M'
  1377  1118  344F               	retlw	79	;'O'
  1378  1119  3453               	retlw	83	;'S'
  1379  111A  3445               	retlw	69	;'E'
  1380  111B  3454               	retlw	84	;'T'
  1381  111C  3456               	retlw	86	;'V'
  1382  111D  344F               	retlw	79	;'O'
  1383  111E  344C               	retlw	76	;'L'
  1384  111F  3455               	retlw	85	;'U'
  1385  1120  344D               	retlw	77	;'M'
  1386  1121  3445               	retlw	69	;'E'
  1387  1122  343D               	retlw	61	;'='
  1388  1123  3425               	retlw	37	;'%'
  1389  1124  3463               	retlw	99	;'c'
  1390  1125  3400               	retlw	0
  1391  1126                     STR_7:	
  1392  1126  3430               	retlw	48	;'0'
  1393  1127  3431               	retlw	49	;'1'
  1394  1128  3432               	retlw	50	;'2'
  1395  1129  3433               	retlw	51	;'3'
  1396  112A  3434               	retlw	52	;'4'
  1397  112B  3435               	retlw	53	;'5'
  1398  112C  3436               	retlw	54	;'6'
  1399  112D  3437               	retlw	55	;'7'
  1400  112E  3438               	retlw	56	;'8'
  1401  112F  3439               	retlw	57	;'9'
  1402  1130  3441               	retlw	65	;'A'
  1403  1131  3442               	retlw	66	;'B'
  1404  1132  3443               	retlw	67	;'C'
  1405  1133  3444               	retlw	68	;'D'
  1406  1134  3445               	retlw	69	;'E'
  1407  1135  3446               	retlw	70	;'F'
  1408  1136  3400               	retlw	0
  1409  1137                     STR_8:	
  1410  1137  3430               	retlw	48	;'0'
  1411  1138  3431               	retlw	49	;'1'
  1412  1139  3432               	retlw	50	;'2'
  1413  113A  3433               	retlw	51	;'3'
  1414  113B  3434               	retlw	52	;'4'
  1415  113C  3435               	retlw	53	;'5'
  1416  113D  3436               	retlw	54	;'6'
  1417  113E  3437               	retlw	55	;'7'
  1418  113F  3438               	retlw	56	;'8'
  1419  1140  3439               	retlw	57	;'9'
  1420  1141  3461               	retlw	97	;'a'
  1421  1142  3462               	retlw	98	;'b'
  1422  1143  3463               	retlw	99	;'c'
  1423  1144  3464               	retlw	100	;'d'
  1424  1145  3465               	retlw	101	;'e'
  1425  1146  3466               	retlw	102	;'f'
  1426  1147  3400               	retlw	0
  1427  1148                     STR_1:	
  1428  1148  3441               	retlw	65	;'A'
  1429  1149  3454               	retlw	84	;'T'
  1430  114A  342B               	retlw	43	;'+'
  1431  114B  3444               	retlw	68	;'D'
  1432  114C  344D               	retlw	77	;'M'
  1433  114D  344F               	retlw	79	;'O'
  1434  114E  3443               	retlw	67	;'C'
  1435  114F  344F               	retlw	79	;'O'
  1436  1150  344E               	retlw	78	;'N'
  1437  1151  344E               	retlw	78	;'N'
  1438  1152  3445               	retlw	69	;'E'
  1439  1153  3443               	retlw	67	;'C'
  1440  1154  3454               	retlw	84	;'T'
  1441  1155  3400               	retlw	0
  1442  1113                     
  1443                           	psect	cinit
  1444  002A                     start_initialization:	
  1445                           ; #config settings
  1446                           
  1447  002A                     __initialization:	
  1448                           
  1449                           ; Clear objects allocated to BANK1
  1450  002A  30DC               	movlw	low __pbssBANK1
  1451  002B  0084               	movwf	4
  1452  002C  3000               	movlw	high __pbssBANK1
  1453  002D  0085               	movwf	5
  1454  002E  3011               	movlw	17
  1455  002F  319E  261E  3180   	fcall	clear_ram0
  1456                           
  1457                           ; Clear objects allocated to BANK2
  1458  0032  3020               	movlw	low __pbssBANK2
  1459  0033  0084               	movwf	4
  1460  0034  3001               	movlw	high __pbssBANK2
  1461  0035  0085               	movwf	5
  1462  0036  303C               	movlw	60
  1463  0037  319E  261E  3180   	fcall	clear_ram0
  1464                           
  1465                           ; Initialize objects allocated to BANK1
  1466  003A  0021               	movlb	1	; select bank1
  1467  003B  3187  27FF         	fcall	__pidataBANK1	;fetch initializer
  1468  003D  00ED               	movwf	__pdataBANK1& (0+127)
  1469  003E                     end_of_initialization:	
  1470                           ;End of C runtime variable initialization code
  1471                           
  1472  003E                     __end_of__initialization:	
  1473  003E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1474  003F  0020               	movlb	0
  1475  0040  319E  2E3F         	ljmp	_main	;jump to C main() function
  1476                           
  1477                           	psect	bssBANK1
  1478  00DC                     __pbssBANK1:	
  1479  00DC                     _eusart1TxBuffer:	
  1480  00DC                     	ds	8
  1481  00E4                     _count:	
  1482  00E4                     	ds	2
  1483  00E6                     _Talking:	
  1484  00E6                     	ds	1
  1485  00E7                     _eusart1RxCount:	
  1486  00E7                     	ds	1
  1487  00E8                     _eusart1RxHead:	
  1488  00E8                     	ds	1
  1489  00E9                     _eusart1RxTail:	
  1490  00E9                     	ds	1
  1491  00EA                     _eusart1TxBufferRemaining:	
  1492  00EA                     	ds	1
  1493  00EB                     _eusart1TxHead:	
  1494  00EB                     	ds	1
  1495  00EC                     _eusart1TxTail:	
  1496  00EC                     	ds	1
  1497                           
  1498                           	psect	dataBANK1
  1499  00ED                     __pdataBANK1:	
  1500  00ED                     _Transmit_stall:	
  1501  00ED                     	ds	1
  1502                           
  1503                           	psect	bssBANK2
  1504  0120                     __pbssBANK2:	
  1505  0120                     _eusart1RxBuffer:	
  1506  0120                     	ds	8
  1507  0128                     _input_buffer:	
  1508  0128                     	ds	26
  1509  0142                     _output_buffer:	
  1510  0142                     	ds	26
  1511                           
  1512                           	psect	clrtext
  1513  1E1E                     clear_ram0:	
  1514                           ;	Called with FSR0 containing the base address, and
  1515                           ;	WREG with the size to clear
  1516                           
  1517  1E1E  0064               	clrwdt	;clear the watchdog before getting into this loop
  1518  1E1F                     clrloop0:	
  1519  1E1F  0180               	clrf	0	;clear RAM location pointed to by FSR
  1520  1E20  3101               	addfsr 0,1
  1521  1E21  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1522  1E22  2E1F               	goto	clrloop0	;have we reached the end yet?
  1523  1E23  3400               	retlw	0	;all done for this memory range, return
  1524                           
  1525                           	psect	cstackBANK1
  1526  00A0                     __pcstackBANK1:	
  1527  00A0                     ?_printf:	
  1528  00A0                     printf@f:	
  1529                           ; 2 bytes @ 0x0
  1530                           
  1531                           
  1532                           ; 2 bytes @ 0x0
  1533  00A0                     	ds	18
  1534  00B2                     _printf$1253:	
  1535                           
  1536                           ; 3 bytes @ 0x12
  1537  00B2                     	ds	3
  1538  00B5                     _printf$792:	
  1539                           
  1540                           ; 2 bytes @ 0x15
  1541  00B5                     	ds	2
  1542  00B7                     _printf$793:	
  1543                           
  1544                           ; 2 bytes @ 0x17
  1545  00B7                     	ds	2
  1546  00B9                     _printf$794:	
  1547                           
  1548                           ; 2 bytes @ 0x19
  1549  00B9                     	ds	2
  1550  00BB                     _printf$795:	
  1551                           
  1552                           ; 2 bytes @ 0x1B
  1553  00BB                     	ds	2
  1554  00BD                     _printf$801:	
  1555                           
  1556                           ; 2 bytes @ 0x1D
  1557  00BD                     	ds	2
  1558  00BF                     printf@idx:	
  1559                           
  1560                           ; 1 bytes @ 0x1F
  1561  00BF                     	ds	1
  1562  00C0                     printf@cp:	
  1563                           
  1564                           ; 1 bytes @ 0x20
  1565  00C0                     	ds	1
  1566  00C1                     printf@len:	
  1567                           
  1568                           ; 2 bytes @ 0x21
  1569  00C1                     	ds	2
  1570  00C3                     printf@ap:	
  1571                           
  1572                           ; 1 bytes @ 0x23
  1573  00C3                     	ds	1
  1574  00C4                     printf@tmpval:	
  1575                           
  1576                           ; 4 bytes @ 0x24
  1577  00C4                     	ds	4
  1578  00C8                     printf@exp:	
  1579                           
  1580                           ; 2 bytes @ 0x28
  1581  00C8                     	ds	2
  1582  00CA                     printf@fval:	
  1583                           
  1584                           ; 3 bytes @ 0x2A
  1585  00CA                     	ds	3
  1586  00CD                     printf@val:	
  1587                           
  1588                           ; 4 bytes @ 0x2D
  1589  00CD                     	ds	4
  1590  00D1                     printf@prec:	
  1591                           
  1592                           ; 2 bytes @ 0x31
  1593  00D1                     	ds	2
  1594  00D3                     printf@width:	
  1595                           
  1596                           ; 2 bytes @ 0x33
  1597  00D3                     	ds	2
  1598  00D5                     printf@c:	
  1599                           
  1600                           ; 1 bytes @ 0x35
  1601  00D5                     	ds	1
  1602  00D6                     printf@flag:	
  1603                           
  1604                           ; 2 bytes @ 0x36
  1605  00D6                     	ds	2
  1606  00D8                     ??_SetMIC:	
  1607                           
  1608                           ; 1 bytes @ 0x38
  1609  00D8                     	ds	4
  1610                           
  1611                           	psect	cstackCOMMON
  1612  0070                     __pcstackCOMMON:	
  1613  0070                     ?_isdigit:	
  1614  0070                     ?_Start:	
  1615                           ; 1 bit 
  1616                           
  1617  0070                     ?_SR_FRSStart:	
  1618                           ; 1 bytes @ 0x0
  1619                           
  1620  0070                     ?_RadioOperation:	
  1621                           ; 1 bytes @ 0x0
  1622                           
  1623  0070                     ?_EUSART1_Initialize:	
  1624                           ; 1 bytes @ 0x0
  1625                           
  1626  0070                     ?_INTERRUPT_Initialize:	
  1627                           ; 1 bytes @ 0x0
  1628                           
  1629  0070                     ?_TMR2_Initialize:	
  1630                           ; 1 bytes @ 0x0
  1631                           
  1632  0070                     ?_TMR2_ISR:	
  1633                           ; 1 bytes @ 0x0
  1634                           
  1635  0070                     ??_TMR2_ISR:	
  1636                           ; 1 bytes @ 0x0
  1637                           
  1638  0070                     ?_EUSART1_Receive_ISR:	
  1639                           ; 1 bytes @ 0x0
  1640                           
  1641  0070                     ?_EUSART1_Transmit_ISR:	
  1642                           ; 1 bytes @ 0x0
  1643                           
  1644  0070                     ?_TMR2_StartTimer:	
  1645                           ; 1 bytes @ 0x0
  1646                           
  1647  0070                     ?_UART_buff_init:	
  1648                           ; 1 bytes @ 0x0
  1649                           
  1650  0070                     ?_SetCommandMode:	
  1651                           ; 1 bytes @ 0x0
  1652                           
  1653  0070                     ?_SetFrequency:	
  1654                           ; 1 bytes @ 0x0
  1655                           
  1656  0070                     ?_SetPowerSave:	
  1657                           ; 1 bytes @ 0x0
  1658                           
  1659  0070                     ?_SetVolume:	
  1660                           ; 1 bytes @ 0x0
  1661                           
  1662  0070                     ?_INTERRUPT_InterruptManager:	
  1663                           ; 1 bytes @ 0x0
  1664                           
  1665  0070                     ?_UART_buff_get:	
  1666                           ; 1 bytes @ 0x0
  1667                           
  1668  0070                     ?_Send_put:	
  1669                           ; 1 bytes @ 0x0
  1670                           
  1671  0070                     ?_putch:	
  1672                           ; 1 bytes @ 0x0
  1673                           
  1674  0070                     ?_SR_FRSTalk:	
  1675                           ; 1 bytes @ 0x0
  1676                           
  1677  0070                     ?i1_UART_buff_get:	
  1678                           ; 1 bytes @ 0x0
  1679                           
  1680  0070                     ?_main:	
  1681                           ; 1 bytes @ 0x0
  1682                           
  1683  0070                     ?_UART_buff_size:	
  1684                           ; 2 bytes @ 0x0
  1685                           
  1686  0070                     ?i1_UART_buff_modulo_inc:	
  1687                           ; 2 bytes @ 0x0
  1688                           
  1689  0070                     i1UART_buff_modulo_inc@value:	
  1690                           ; 2 bytes @ 0x0
  1691                           
  1692                           
  1693                           ; 2 bytes @ 0x0
  1694  0070                     	ds	2
  1695  0072                     i1UART_buff_modulo_inc@modulus:	
  1696                           
  1697                           ; 2 bytes @ 0x2
  1698  0072                     	ds	1
  1699  0073                     ??_UART_buff_size:	
  1700  0073                     UART_buff_size@_this:	
  1701                           ; 1 bytes @ 0x3
  1702                           
  1703                           
  1704                           ; 1 bytes @ 0x3
  1705  0073                     	ds	1
  1706  0074                     ??i1_UART_buff_modulo_inc:	
  1707  0074                     i1UART_buff_modulo_inc@my_value:	
  1708                           ; 1 bytes @ 0x4
  1709                           
  1710                           
  1711                           ; 2 bytes @ 0x4
  1712  0074                     	ds	2
  1713  0076                     ?i1_UART_buff_put:	
  1714  0076                     ??i1_UART_buff_get:	
  1715                           ; 1 bytes @ 0x6
  1716                           
  1717  0076                     i1UART_buff_put@c:	
  1718                           ; 1 bytes @ 0x6
  1719                           
  1720                           
  1721                           ; 1 bytes @ 0x6
  1722  0076                     	ds	1
  1723  0077                     ??i1_UART_buff_put:	
  1724                           
  1725                           ; 1 bytes @ 0x7
  1726  0077                     	ds	2
  1727  0079                     i1UART_buff_get@c:	
  1728                           
  1729                           ; 1 bytes @ 0x9
  1730  0079                     	ds	1
  1731  007A                     i1UART_buff_put@_this:	
  1732  007A                     i1UART_buff_get@_this:	
  1733                           ; 1 bytes @ 0xA
  1734                           
  1735                           
  1736                           ; 1 bytes @ 0xA
  1737  007A                     	ds	1
  1738  007B                     ??_EUSART1_Receive_ISR:	
  1739  007B                     ??_EUSART1_Transmit_ISR:	
  1740                           ; 1 bytes @ 0xB
  1741                           
  1742                           
  1743                           ; 1 bytes @ 0xB
  1744  007B                     	ds	1
  1745  007C                     EUSART1_Receive_ISR@data:	
  1746                           
  1747                           ; 1 bytes @ 0xC
  1748  007C                     	ds	1
  1749  007D                     ??_INTERRUPT_InterruptManager:	
  1750                           
  1751                           ; 1 bytes @ 0xD
  1752  007D                     	ds	1
  1753                           
  1754                           	psect	cstackBANK0
  1755  0020                     __pcstackBANK0:	
  1756  0020                     ?___ftge:	
  1757  0020                     ??_RadioOperation:	
  1758                           ; 1 bit 
  1759                           
  1760  0020                     ??_INTERRUPT_Initialize:	
  1761                           ; 1 bytes @ 0x0
  1762                           
  1763  0020                     ??_TMR2_Initialize:	
  1764                           ; 1 bytes @ 0x0
  1765                           
  1766  0020                     ??_TMR2_StartTimer:	
  1767                           ; 1 bytes @ 0x0
  1768                           
  1769  0020                     ?_memset:	
  1770                           ; 1 bytes @ 0x0
  1771                           
  1772  0020                     ??_isdigit:	
  1773                           ; 1 bytes @ 0x0
  1774                           
  1775  0020                     ?_Delay:	
  1776                           ; 1 bytes @ 0x0
  1777                           
  1778  0020                     ??_SR_FRSTalk:	
  1779                           ; 1 bytes @ 0x0
  1780                           
  1781  0020                     ?_UART_buff_modulo_inc:	
  1782                           ; 1 bytes @ 0x0
  1783                           
  1784  0020                     ?___awmod:	
  1785                           ; 2 bytes @ 0x0
  1786                           
  1787  0020                     ?___ftpack:	
  1788                           ; 2 bytes @ 0x0
  1789                           
  1790  0020                     ?___ftneg:	
  1791                           ; 3 bytes @ 0x0
  1792                           
  1793  0020                     ?__tdiv_to_l_:	
  1794                           ; 3 bytes @ 0x0
  1795                           
  1796  0020                     ?__div_to_l_:	
  1797                           ; 4 bytes @ 0x0
  1798                           
  1799  0020                     ?___lldiv:	
  1800                           ; 4 bytes @ 0x0
  1801                           
  1802  0020                     _isdigit$999:	
  1803                           ; 4 bytes @ 0x0
  1804                           
  1805  0020                     Delay@wait:	
  1806                           ; 1 bytes @ 0x0
  1807                           
  1808  0020                     UART_buff_modulo_inc@value:	
  1809                           ; 2 bytes @ 0x0
  1810                           
  1811  0020                     ___awmod@divisor:	
  1812                           ; 2 bytes @ 0x0
  1813                           
  1814  0020                     memset@c:	
  1815                           ; 2 bytes @ 0x0
  1816                           
  1817  0020                     __div_to_l_@f1:	
  1818                           ; 2 bytes @ 0x0
  1819                           
  1820  0020                     ___ftpack@arg:	
  1821                           ; 3 bytes @ 0x0
  1822                           
  1823  0020                     __tdiv_to_l_@f1:	
  1824                           ; 3 bytes @ 0x0
  1825                           
  1826  0020                     ___ftge@ff1:	
  1827                           ; 3 bytes @ 0x0
  1828                           
  1829  0020                     ___ftneg@f1:	
  1830                           ; 3 bytes @ 0x0
  1831                           
  1832  0020                     ___lldiv@divisor:	
  1833                           ; 3 bytes @ 0x0
  1834                           
  1835                           
  1836                           ; 4 bytes @ 0x0
  1837  0020                     	ds	1
  1838  0021                     isdigit@c:	
  1839                           
  1840                           ; 1 bytes @ 0x1
  1841  0021                     	ds	1
  1842  0022                     ??_Delay:	
  1843  0022                     UART_buff_modulo_inc@modulus:	
  1844                           ; 1 bytes @ 0x2
  1845                           
  1846  0022                     ___awmod@dividend:	
  1847                           ; 2 bytes @ 0x2
  1848                           
  1849  0022                     memset@n:	
  1850                           ; 2 bytes @ 0x2
  1851                           
  1852                           
  1853                           ; 2 bytes @ 0x2
  1854  0022                     	ds	1
  1855  0023                     ??___ftneg:	
  1856  0023                     ___ftpack@exp:	
  1857                           ; 1 bytes @ 0x3
  1858                           
  1859  0023                     Delay@x:	
  1860                           ; 1 bytes @ 0x3
  1861                           
  1862  0023                     __div_to_l_@f2:	
  1863                           ; 2 bytes @ 0x3
  1864                           
  1865  0023                     __tdiv_to_l_@f2:	
  1866                           ; 3 bytes @ 0x3
  1867                           
  1868  0023                     ___ftge@ff2:	
  1869                           ; 3 bytes @ 0x3
  1870                           
  1871                           
  1872                           ; 3 bytes @ 0x3
  1873  0023                     	ds	1
  1874  0024                     ??_memset:	
  1875  0024                     ??_UART_buff_modulo_inc:	
  1876                           ; 1 bytes @ 0x4
  1877                           
  1878  0024                     ??___awmod:	
  1879                           ; 1 bytes @ 0x4
  1880                           
  1881  0024                     ___ftpack@sign:	
  1882                           ; 1 bytes @ 0x4
  1883                           
  1884  0024                     UART_buff_modulo_inc@my_value:	
  1885                           ; 1 bytes @ 0x4
  1886                           
  1887  0024                     ___lldiv@dividend:	
  1888                           ; 2 bytes @ 0x4
  1889                           
  1890                           
  1891                           ; 4 bytes @ 0x4
  1892  0024                     	ds	1
  1893  0025                     ??___ftpack:	
  1894  0025                     ___awmod@counter:	
  1895                           ; 1 bytes @ 0x5
  1896                           
  1897  0025                     memset@p1:	
  1898                           ; 1 bytes @ 0x5
  1899                           
  1900                           
  1901                           ; 1 bytes @ 0x5
  1902  0025                     	ds	1
  1903  0026                     ??__tdiv_to_l_:	
  1904  0026                     ??__div_to_l_:	
  1905                           ; 1 bytes @ 0x6
  1906                           
  1907  0026                     ?_UART_buff_put:	
  1908                           ; 1 bytes @ 0x6
  1909                           
  1910  0026                     ??_UART_buff_get:	
  1911                           ; 1 bytes @ 0x6
  1912                           
  1913  0026                     ??___ftge:	
  1914                           ; 1 bytes @ 0x6
  1915                           
  1916  0026                     UART_buff_put@c:	
  1917                           ; 1 bytes @ 0x6
  1918                           
  1919  0026                     ___awmod@sign:	
  1920                           ; 1 bytes @ 0x6
  1921                           
  1922  0026                     memset@p:	
  1923                           ; 1 bytes @ 0x6
  1924                           
  1925                           
  1926                           ; 1 bytes @ 0x6
  1927  0026                     	ds	1
  1928  0027                     ??_UART_buff_init:	
  1929  0027                     ??_UART_buff_put:	
  1930                           ; 1 bytes @ 0x7
  1931                           
  1932  0027                     ?___awdiv:	
  1933                           ; 1 bytes @ 0x7
  1934                           
  1935  0027                     UART_buff_init@_this:	
  1936                           ; 2 bytes @ 0x7
  1937                           
  1938  0027                     ___awdiv@divisor:	
  1939                           ; 1 bytes @ 0x7
  1940                           
  1941                           
  1942                           ; 2 bytes @ 0x7
  1943  0027                     	ds	1
  1944  0028                     ??_Start:	
  1945  0028                     ??_EUSART1_Initialize:	
  1946                           ; 1 bytes @ 0x8
  1947                           
  1948  0028                     ??___lldiv:	
  1949                           ; 1 bytes @ 0x8
  1950                           
  1951  0028                     ?___lltoft:	
  1952                           ; 1 bytes @ 0x8
  1953                           
  1954  0028                     ___lltoft@c:	
  1955                           ; 3 bytes @ 0x8
  1956                           
  1957                           
  1958                           ; 4 bytes @ 0x8
  1959  0028                     	ds	1
  1960  0029                     UART_buff_get@c:	
  1961  0029                     ___awdiv@dividend:	
  1962                           ; 1 bytes @ 0x9
  1963                           
  1964  0029                     ___lldiv@quotient:	
  1965                           ; 2 bytes @ 0x9
  1966                           
  1967                           
  1968                           ; 4 bytes @ 0x9
  1969  0029                     	ds	1
  1970  002A                     UART_buff_put@_this:	
  1971  002A                     UART_buff_get@_this:	
  1972                           ; 1 bytes @ 0xA
  1973                           
  1974  002A                     __tdiv_to_l_@quot:	
  1975                           ; 1 bytes @ 0xA
  1976                           
  1977                           
  1978                           ; 4 bytes @ 0xA
  1979  002A                     	ds	1
  1980  002B                     ??_Send_put:	
  1981  002B                     ??___awdiv:	
  1982                           ; 1 bytes @ 0xB
  1983                           
  1984                           
  1985                           ; 1 bytes @ 0xB
  1986  002B                     	ds	1
  1987  002C                     ??___lltoft:	
  1988  002C                     Send_put@_data:	
  1989                           ; 1 bytes @ 0xC
  1990                           
  1991  002C                     ___awdiv@counter:	
  1992                           ; 1 bytes @ 0xC
  1993                           
  1994                           
  1995                           ; 1 bytes @ 0xC
  1996  002C                     	ds	1
  1997  002D                     ??_putch:	
  1998  002D                     putch@txData:	
  1999                           ; 1 bytes @ 0xD
  2000                           
  2001  002D                     ___awdiv@sign:	
  2002                           ; 1 bytes @ 0xD
  2003                           
  2004  002D                     ___lldiv@counter:	
  2005                           ; 1 bytes @ 0xD
  2006                           
  2007  002D                     ___lltoft@exp:	
  2008                           ; 1 bytes @ 0xD
  2009                           
  2010                           
  2011                           ; 1 bytes @ 0xD
  2012  002D                     	ds	1
  2013  002E                     ?___llmod:	
  2014  002E                     __tdiv_to_l_@cntr:	
  2015                           ; 4 bytes @ 0xE
  2016                           
  2017  002E                     ___awdiv@quotient:	
  2018                           ; 1 bytes @ 0xE
  2019                           
  2020  002E                     __div_to_l_@quot:	
  2021                           ; 2 bytes @ 0xE
  2022                           
  2023  002E                     ___llmod@divisor:	
  2024                           ; 4 bytes @ 0xE
  2025                           
  2026                           
  2027                           ; 4 bytes @ 0xE
  2028  002E                     	ds	1
  2029  002F                     __tdiv_to_l_@exp1:	
  2030                           
  2031                           ; 1 bytes @ 0xF
  2032  002F                     	ds	1
  2033  0030                     ?___wmul:	
  2034  0030                     ___wmul@multiplier:	
  2035                           ; 2 bytes @ 0x10
  2036                           
  2037                           
  2038                           ; 2 bytes @ 0x10
  2039  0030                     	ds	2
  2040  0032                     __div_to_l_@cntr:	
  2041  0032                     ___wmul@multiplicand:	
  2042                           ; 1 bytes @ 0x12
  2043                           
  2044  0032                     ___llmod@dividend:	
  2045                           ; 2 bytes @ 0x12
  2046                           
  2047                           
  2048                           ; 4 bytes @ 0x12
  2049  0032                     	ds	1
  2050  0033                     __div_to_l_@exp1:	
  2051                           
  2052                           ; 1 bytes @ 0x13
  2053  0033                     	ds	1
  2054  0034                     ??___wmul:	
  2055  0034                     ___wmul@product:	
  2056                           ; 1 bytes @ 0x14
  2057                           
  2058                           
  2059                           ; 2 bytes @ 0x14
  2060  0034                     	ds	2
  2061  0036                     ??___llmod:	
  2062  0036                     ?___ftmul:	
  2063                           ; 1 bytes @ 0x16
  2064                           
  2065  0036                     ___ftmul@f1:	
  2066                           ; 3 bytes @ 0x16
  2067                           
  2068                           
  2069                           ; 3 bytes @ 0x16
  2070  0036                     	ds	1
  2071  0037                     ___llmod@counter:	
  2072                           
  2073                           ; 1 bytes @ 0x17
  2074  0037                     	ds	2
  2075  0039                     ___ftmul@f2:	
  2076                           
  2077                           ; 3 bytes @ 0x19
  2078  0039                     	ds	3
  2079  003C                     ??___ftmul:	
  2080                           
  2081                           ; 1 bytes @ 0x1C
  2082  003C                     	ds	4
  2083  0040                     ___ftmul@exp:	
  2084                           
  2085                           ; 1 bytes @ 0x20
  2086  0040                     	ds	1
  2087  0041                     ___ftmul@f3_as_product:	
  2088                           
  2089                           ; 3 bytes @ 0x21
  2090  0041                     	ds	3
  2091  0044                     ___ftmul@cntr:	
  2092                           
  2093                           ; 1 bytes @ 0x24
  2094  0044                     	ds	1
  2095  0045                     ___ftmul@sign:	
  2096                           
  2097                           ; 1 bytes @ 0x25
  2098  0045                     	ds	1
  2099  0046                     ?_fround:	
  2100  0046                     ?_scale:	
  2101                           ; 3 bytes @ 0x26
  2102                           
  2103                           
  2104                           ; 3 bytes @ 0x26
  2105  0046                     	ds	3
  2106  0049                     ??_fround:	
  2107  0049                     ??_scale:	
  2108                           ; 1 bytes @ 0x29
  2109                           
  2110                           
  2111                           ; 1 bytes @ 0x29
  2112  0049                     	ds	2
  2113  004B                     _scale$1252:	
  2114                           
  2115                           ; 3 bytes @ 0x2B
  2116  004B                     	ds	2
  2117  004D                     _fround$1251:	
  2118                           
  2119                           ; 3 bytes @ 0x2D
  2120  004D                     	ds	1
  2121  004E                     scale@scl:	
  2122                           
  2123                           ; 1 bytes @ 0x2E
  2124  004E                     	ds	1
  2125  004F                     ?___fttol:	
  2126  004F                     ___fttol@f1:	
  2127                           ; 4 bytes @ 0x2F
  2128                           
  2129                           
  2130                           ; 3 bytes @ 0x2F
  2131  004F                     	ds	1
  2132  0050                     _fround$1250:	
  2133                           
  2134                           ; 3 bytes @ 0x30
  2135  0050                     	ds	3
  2136  0053                     ??___fttol:	
  2137  0053                     fround@prec:	
  2138                           ; 1 bytes @ 0x33
  2139                           
  2140                           
  2141                           ; 1 bytes @ 0x33
  2142  0053                     	ds	1
  2143  0054                     ?___ftadd:	
  2144  0054                     ___ftadd@f1:	
  2145                           ; 3 bytes @ 0x34
  2146                           
  2147                           
  2148                           ; 3 bytes @ 0x34
  2149  0054                     	ds	3
  2150  0057                     ___fttol@sign1:	
  2151  0057                     ___ftadd@f2:	
  2152                           ; 1 bytes @ 0x37
  2153                           
  2154                           
  2155                           ; 3 bytes @ 0x37
  2156  0057                     	ds	1
  2157  0058                     ___fttol@lval:	
  2158                           
  2159                           ; 4 bytes @ 0x38
  2160  0058                     	ds	2
  2161  005A                     ??___ftadd:	
  2162                           
  2163                           ; 1 bytes @ 0x3A
  2164  005A                     	ds	2
  2165  005C                     ___fttol@exp1:	
  2166                           
  2167                           ; 1 bytes @ 0x3C
  2168  005C                     	ds	2
  2169  005E                     ___ftadd@sign:	
  2170                           
  2171                           ; 1 bytes @ 0x3E
  2172  005E                     	ds	1
  2173  005F                     ___ftadd@exp2:	
  2174                           
  2175                           ; 1 bytes @ 0x3F
  2176  005F                     	ds	1
  2177  0060                     ___ftadd@exp1:	
  2178                           
  2179                           ; 1 bytes @ 0x40
  2180  0060                     	ds	1
  2181  0061                     ?___ftsub:	
  2182  0061                     ___ftsub@f2:	
  2183                           ; 3 bytes @ 0x41
  2184                           
  2185                           
  2186                           ; 3 bytes @ 0x41
  2187  0061                     	ds	3
  2188  0064                     ___ftsub@f1:	
  2189                           
  2190                           ; 3 bytes @ 0x44
  2191  0064                     	ds	3
  2192  0067                     ??_printf:	
  2193  0067                     ??___ftsub:	
  2194                           ; 1 bytes @ 0x47
  2195                           
  2196                           
  2197                           ; 1 bytes @ 0x47
  2198  0067                     	ds	6
  2199  006D                     ??_SetCommandMode:	
  2200  006D                     ??_SetFrequency:	
  2201                           ; 1 bytes @ 0x4D
  2202                           
  2203  006D                     ??_SetPowerSave:	
  2204                           ; 1 bytes @ 0x4D
  2205                           
  2206  006D                     ??_SetVolume:	
  2207                           ; 1 bytes @ 0x4D
  2208                           
  2209  006D                     ?_SetVOX:	
  2210                           ; 1 bytes @ 0x4D
  2211                           
  2212  006D                     ?_SetMIC:	
  2213                           ; 1 bytes @ 0x4D
  2214                           
  2215  006D                     SetMIC@scram:	
  2216                           ; 1 bytes @ 0x4D
  2217                           
  2218  006D                     SetVOX@volume:	
  2219                           ; 1 bytes @ 0x4D
  2220                           
  2221                           
  2222                           ; 2 bytes @ 0x4D
  2223  006D                     	ds	1
  2224  006E                     SetMIC@volume:	
  2225                           
  2226                           ; 1 bytes @ 0x4E
  2227  006E                     	ds	1
  2228  006F                     ??_SetVOX:	
  2229  006F                     SetVolume@volume:	
  2230                           ; 1 bytes @ 0x4F
  2231                           
  2232                           
  2233                           ; 1 bytes @ 0x4F
  2234  006F                     	ds	1
  2235  0070                     ??_SR_FRSStart:	
  2236  0070                     ??_main:	
  2237                           ; 1 bytes @ 0x50
  2238                           
  2239                           
  2240                           	psect	maintext
  2241  1E3F                     __pmaintext:	
  2242                           ; 1 bytes @ 0x50
  2243 ;;
  2244 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2245 ;;
  2246 ;; *************** function _main *****************
  2247 ;; Defined at:
  2248 ;;		line 14 in file "Main.c"
  2249 ;; Parameters:    Size  Location     Type
  2250 ;;		None
  2251 ;; Auto vars:     Size  Location     Type
  2252 ;;		None
  2253 ;; Return value:  Size  Location     Type
  2254 ;;                  2    8[None  ] int 
  2255 ;; Registers used:
  2256 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2257 ;; Tracked objects:
  2258 ;;		On entry : B1F/0
  2259 ;;		On exit  : 0/0
  2260 ;;		Unchanged: 0/0
  2261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2266 ;;Total ram usage:        0 bytes
  2267 ;; Hardware stack levels required when called:   11
  2268 ;; This function calls:
  2269 ;;		_RadioOperation
  2270 ;;		_SR_FRSStart
  2271 ;;		_Start
  2272 ;; This function is called by:
  2273 ;;		Startup code after reset
  2274 ;; This function uses a non-reentrant model
  2275 ;;
  2276                           
  2277                           
  2278                           ;psect for function _main
  2279  1E3F                     _main:	
  2280                           
  2281                           ;Main.c: 15: Start();
  2282                           
  2283                           ;incstack = 0
  2284                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2285  1E3F  319F  27B9  319E   	fcall	_Start
  2286                           
  2287                           ;Main.c: 16: SR_FRSStart();
  2288  1E42  3191  21DF  319E   	fcall	_SR_FRSStart
  2289  1E45                     l3648:	
  2290                           ;Main.c: 17: while(1){
  2291                           
  2292                           
  2293                           ;Main.c: 18: RadioOperation();
  2294  1E45  3191  2179  319E   	fcall	_RadioOperation
  2295  1E48  2E45               	goto	l3648
  2296  1E49                     __end_of_main:	
  2297                           ;Main.c: 19: }
  2298                           ;Main.c: 20: return 0;
  2299                           ;	Return value of _main is never used
  2300                           
  2301                           
  2302                           	psect	text1
  2303  1FB9                     __ptext1:	
  2304 ;; *************** function _Start *****************
  2305 ;; Defined at:
  2306 ;;		line 8 in file "Function.c"
  2307 ;; Parameters:    Size  Location     Type
  2308 ;;		None
  2309 ;; Auto vars:     Size  Location     Type
  2310 ;;		None
  2311 ;; Return value:  Size  Location     Type
  2312 ;;                  1    wreg      void 
  2313 ;; Registers used:
  2314 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2315 ;; Tracked objects:
  2316 ;;		On entry : 0/0
  2317 ;;		On exit  : 0/0
  2318 ;;		Unchanged: 0/0
  2319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2324 ;;Total ram usage:        0 bytes
  2325 ;; Hardware stack levels used:    1
  2326 ;; Hardware stack levels required when called:    7
  2327 ;; This function calls:
  2328 ;;		_EUSART1_Initialize
  2329 ;;		_INTERRUPT_Initialize
  2330 ;;		_TMR2_Initialize
  2331 ;; This function is called by:
  2332 ;;		_main
  2333 ;; This function uses a non-reentrant model
  2334 ;;
  2335                           
  2336                           
  2337                           ;psect for function _Start
  2338  1FB9                     _Start:	
  2339                           
  2340                           ;Function.c: 12: TRISCbits.TRISC7 = 0;
  2341                           
  2342                           ;incstack = 0
  2343                           ; Regs used in _Start: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2344  1FB9  0021               	movlb	1	; select bank1
  2345  1FBA  138E               	bcf	14,7	;volatile
  2346                           
  2347                           ;Function.c: 13: TRISCbits.TRISC6 = 0;
  2348  1FBB  130E               	bcf	14,6	;volatile
  2349                           
  2350                           ;Function.c: 14: TRISCbits.TRISC5 = 0;
  2351  1FBC  128E               	bcf	14,5	;volatile
  2352                           
  2353                           ;Function.c: 15: TRISCbits.TRISC4 = 0;
  2354  1FBD  120E               	bcf	14,4	;volatile
  2355                           
  2356                           ;Function.c: 16: TRISCbits.TRISC3 = 0;
  2357  1FBE  118E               	bcf	14,3	;volatile
  2358                           
  2359                           ;Function.c: 17: TRISAbits.TRISA2 = 1;
  2360  1FBF  150C               	bsf	12,2	;volatile
  2361                           
  2362                           ;Function.c: 18: TRISCbits.TRISC0 = 1;
  2363  1FC0  140E               	bsf	14,0	;volatile
  2364                           
  2365                           ;Function.c: 19: TRISCbits.TRISC1 = 1;
  2366  1FC1  148E               	bsf	14,1	;volatile
  2367                           
  2368                           ;Function.c: 23: ANSELCbits.ANSC0 = 0;
  2369  1FC2  0023               	movlb	3	; select bank3
  2370  1FC3  100E               	bcf	14,0	;volatile
  2371                           
  2372                           ;Function.c: 24: ANSELCbits.ANSC1 = 0;
  2373  1FC4  108E               	bcf	14,1	;volatile
  2374                           
  2375                           ;Function.c: 25: ANSELAbits.ANSA2 = 0;
  2376  1FC5  110C               	bcf	12,2	;volatile
  2377                           
  2378                           ;Function.c: 26: ANSELCbits.ANSC3 = 0;
  2379  1FC6  118E               	bcf	14,3	;volatile
  2380                           
  2381                           ;Function.c: 27: ANSELCbits.ANSC6 = 0;
  2382  1FC7  130E               	bcf	14,6	;volatile
  2383                           
  2384                           ;Function.c: 28: ANSELCbits.ANSC7 = 0;
  2385  1FC8  138E               	bcf	14,7	;volatile
  2386                           
  2387                           ;Function.c: 32: FVRCONbits.ADFVR0 = 1;
  2388  1FC9  0022               	movlb	2	; select bank2
  2389  1FCA  1417               	bsf	23,0	;volatile
  2390                           
  2391                           ;Function.c: 33: FVRCONbits.ADFVR1 = 1;
  2392  1FCB  1497               	bsf	23,1	;volatile
  2393                           
  2394                           ;Function.c: 34: ADCON1bits.ADCS0 = 0;
  2395  1FCC  0021               	movlb	1	; select bank1
  2396  1FCD  121E               	bcf	30,4	;volatile
  2397                           
  2398                           ;Function.c: 35: ADCON1bits.ADCS1 = 0;
  2399  1FCE  129E               	bcf	30,5	;volatile
  2400                           
  2401                           ;Function.c: 36: ADCON1bits.ADCS2 = 1;
  2402  1FCF  171E               	bsf	30,6	;volatile
  2403                           
  2404                           ;Function.c: 37: ADCON0bits.ADON = 1;
  2405  1FD0  141D               	bsf	29,0	;volatile
  2406                           
  2407                           ;Function.c: 41: EUSART1_Initialize();
  2408  1FD1  319E  26C4  319F   	fcall	_EUSART1_Initialize
  2409                           
  2410                           ;Function.c: 45: INTERRUPT_Initialize();
  2411  1FD4  319E  2635  319F   	fcall	_INTERRUPT_Initialize
  2412                           
  2413                           ;Function.c: 46: TMR2_Initialize();
  2414  1FD7  319E  2660         	fcall	_TMR2_Initialize
  2415  1FD9  0008               	return
  2416  1FDA                     __end_of_Start:	
  2417                           
  2418                           	psect	text2
  2419  1E60                     __ptext2:	
  2420 ;; *************** function _TMR2_Initialize *****************
  2421 ;; Defined at:
  2422 ;;		line 8 in file "Timer.c"
  2423 ;; Parameters:    Size  Location     Type
  2424 ;;		None
  2425 ;; Auto vars:     Size  Location     Type
  2426 ;;		None
  2427 ;; Return value:  Size  Location     Type
  2428 ;;                  1    wreg      void 
  2429 ;; Registers used:
  2430 ;;		wreg, status,2, status,0, pclath, cstack
  2431 ;; Tracked objects:
  2432 ;;		On entry : 0/0
  2433 ;;		On exit  : 0/0
  2434 ;;		Unchanged: 0/0
  2435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2440 ;;Total ram usage:        0 bytes
  2441 ;; Hardware stack levels used:    1
  2442 ;; Hardware stack levels required when called:    5
  2443 ;; This function calls:
  2444 ;;		_TMR2_StartTimer
  2445 ;; This function is called by:
  2446 ;;		_Start
  2447 ;; This function uses a non-reentrant model
  2448 ;;
  2449                           
  2450                           
  2451                           ;psect for function _TMR2_Initialize
  2452  1E60                     _TMR2_Initialize:	
  2453                           
  2454                           ;Timer.c: 13: T2CON = 0x00;
  2455                           
  2456                           ;incstack = 0
  2457                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2458  1E60  0020               	movlb	0	; select bank0
  2459  1E61  019C               	clrf	28	;volatile
  2460                           
  2461                           ;Timer.c: 14: T2CONbits.TMR2ON = 0;
  2462  1E62  111C               	bcf	28,2	;volatile
  2463                           
  2464                           ;Timer.c: 17: PR2 = 18;
  2465  1E63  3012               	movlw	18
  2466  1E64  009B               	movwf	27	;volatile
  2467                           
  2468                           ;Timer.c: 20: TMR2 = 0;
  2469  1E65  019A               	clrf	26	;volatile
  2470                           
  2471                           ;Timer.c: 23: PIR1bits.TMR2IF = 0;
  2472  1E66  1091               	bcf	17,1	;volatile
  2473                           
  2474                           ;Timer.c: 26: PIE1bits.TMR2IE = 1;
  2475  1E67  0021               	movlb	1	; select bank1
  2476  1E68  1491               	bsf	17,1	;volatile
  2477                           
  2478                           ;Timer.c: 32: TMR2_StartTimer();
  2479  1E69  3187  27FC         	fcall	_TMR2_StartTimer
  2480  1E6B  0008               	return
  2481  1E6C                     __end_of_TMR2_Initialize:	
  2482                           
  2483                           	psect	text3
  2484  07FC                     __ptext3:	
  2485 ;; *************** function _TMR2_StartTimer *****************
  2486 ;; Defined at:
  2487 ;;		line 35 in file "Timer.c"
  2488 ;; Parameters:    Size  Location     Type
  2489 ;;		None
  2490 ;; Auto vars:     Size  Location     Type
  2491 ;;		None
  2492 ;; Return value:  Size  Location     Type
  2493 ;;                  1    wreg      void 
  2494 ;; Registers used:
  2495 ;;		None
  2496 ;; Tracked objects:
  2497 ;;		On entry : 0/0
  2498 ;;		On exit  : 0/0
  2499 ;;		Unchanged: 0/0
  2500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2505 ;;Total ram usage:        0 bytes
  2506 ;; Hardware stack levels used:    1
  2507 ;; Hardware stack levels required when called:    4
  2508 ;; This function calls:
  2509 ;;		Nothing
  2510 ;; This function is called by:
  2511 ;;		_TMR2_Initialize
  2512 ;; This function uses a non-reentrant model
  2513 ;;
  2514                           
  2515                           
  2516                           ;psect for function _TMR2_StartTimer
  2517  07FC                     _TMR2_StartTimer:	
  2518                           
  2519                           ;Timer.c: 38: T2CONbits.TMR2ON = 1;
  2520                           
  2521                           ;incstack = 0
  2522                           ; Regs used in _TMR2_StartTimer: []
  2523  07FC  0020               	movlb	0	; select bank0
  2524  07FD  151C               	bsf	28,2	;volatile
  2525  07FE  0008               	return
  2526  07FF                     __end_of_TMR2_StartTimer:	
  2527                           
  2528                           	psect	text4
  2529  1E35                     __ptext4:	
  2530 ;; *************** function _INTERRUPT_Initialize *****************
  2531 ;; Defined at:
  2532 ;;		line 60 in file "Function.c"
  2533 ;; Parameters:    Size  Location     Type
  2534 ;;		None
  2535 ;; Auto vars:     Size  Location     Type
  2536 ;;		None
  2537 ;; Return value:  Size  Location     Type
  2538 ;;                  1    wreg      void 
  2539 ;; Registers used:
  2540 ;;		status,2
  2541 ;; Tracked objects:
  2542 ;;		On entry : 0/0
  2543 ;;		On exit  : 0/0
  2544 ;;		Unchanged: 0/0
  2545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2549 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2550 ;;Total ram usage:        0 bytes
  2551 ;; Hardware stack levels used:    1
  2552 ;; Hardware stack levels required when called:    4
  2553 ;; This function calls:
  2554 ;;		Nothing
  2555 ;; This function is called by:
  2556 ;;		_Start
  2557 ;; This function uses a non-reentrant model
  2558 ;;
  2559                           
  2560                           
  2561                           ;psect for function _INTERRUPT_Initialize
  2562  1E35                     _INTERRUPT_Initialize:	
  2563                           
  2564                           ;Function.c: 62: INTCON = 0;
  2565                           
  2566                           ;incstack = 0
  2567                           ; Regs used in _INTERRUPT_Initialize: [status,2]
  2568  1E35  018B               	clrf	11	;volatile
  2569                           
  2570                           ;Function.c: 63: INTCONbits.TMR0IE = 0;
  2571  1E36  128B               	bcf	11,5	;volatile
  2572                           
  2573                           ;Function.c: 64: PIR1bits.TMR2IF = 0;
  2574  1E37  0020               	movlb	0	; select bank0
  2575  1E38  1091               	bcf	17,1	;volatile
  2576                           
  2577                           ;Function.c: 65: PIE1bits.TMR2IE = 1;
  2578  1E39  0021               	movlb	1	; select bank1
  2579  1E3A  1491               	bsf	17,1	;volatile
  2580                           
  2581                           ;Function.c: 66: INTCONbits.TMR0IF = 0;
  2582  1E3B  110B               	bcf	11,2	;volatile
  2583                           
  2584                           ;Function.c: 67: INTCONbits.GIE = 1;
  2585  1E3C  178B               	bsf	11,7	;volatile
  2586                           
  2587                           ;Function.c: 68: INTCONbits.PEIE = 1;
  2588  1E3D  170B               	bsf	11,6	;volatile
  2589  1E3E  0008               	return
  2590  1E3F                     __end_of_INTERRUPT_Initialize:	
  2591                           
  2592                           	psect	text5
  2593  1EC4                     __ptext5:	
  2594 ;; *************** function _EUSART1_Initialize *****************
  2595 ;; Defined at:
  2596 ;;		line 30 in file "UART.c"
  2597 ;; Parameters:    Size  Location     Type
  2598 ;;		None
  2599 ;; Auto vars:     Size  Location     Type
  2600 ;;		None
  2601 ;; Return value:  Size  Location     Type
  2602 ;;                  1    wreg      void 
  2603 ;; Registers used:
  2604 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2605 ;; Tracked objects:
  2606 ;;		On entry : 0/0
  2607 ;;		On exit  : 0/0
  2608 ;;		Unchanged: 0/0
  2609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2614 ;;Total ram usage:        0 bytes
  2615 ;; Hardware stack levels used:    1
  2616 ;; Hardware stack levels required when called:    6
  2617 ;; This function calls:
  2618 ;;		_UART_buff_init
  2619 ;; This function is called by:
  2620 ;;		_Start
  2621 ;; This function uses a non-reentrant model
  2622 ;;
  2623                           
  2624                           
  2625                           ;psect for function _EUSART1_Initialize
  2626  1EC4                     _EUSART1_Initialize:	
  2627                           
  2628                           ;UART.c: 32: PIE1bits.RCIE = 0;
  2629                           
  2630                           ;incstack = 0
  2631                           ; Regs used in _EUSART1_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2632  1EC4  0021               	movlb	1	; select bank1
  2633  1EC5  1291               	bcf	17,5	;volatile
  2634                           
  2635                           ;UART.c: 33: PIE1bits.TXIE = 0;
  2636  1EC6  1211               	bcf	17,4	;volatile
  2637                           
  2638                           ;UART.c: 35: SPBRG = 0x25;
  2639  1EC7  3000               	movlw	0
  2640  1EC8  0023               	movlb	3	; select bank3
  2641  1EC9  009C               	movwf	28	;volatile
  2642  1ECA  3025               	movlw	37
  2643  1ECB  009B               	movwf	27	;volatile
  2644                           
  2645                           ;UART.c: 37: RCSTA = 0b100100000;
  2646  1ECC  3020               	movlw	32
  2647  1ECD  009D               	movwf	29	;volatile
  2648                           
  2649                           ;UART.c: 39: TXSTA = 0b001000000;
  2650  1ECE  3040               	movlw	64
  2651  1ECF  009E               	movwf	30	;volatile
  2652                           
  2653                           ;UART.c: 41: UART_buff_init(&input_buffer);
  2654  1ED0  3028               	movlw	(low (_input_buffer| (0+256)))& (0+255)
  2655  1ED1  319E  266C  319E   	fcall	_UART_buff_init
  2656                           
  2657                           ;UART.c: 42: UART_buff_init(&output_buffer);
  2658  1ED4  3042               	movlw	(low (_output_buffer| (0+256)))& (0+255)
  2659  1ED5  319E  266C         	fcall	_UART_buff_init
  2660                           
  2661                           ;UART.c: 44: PIE1bits.RCIE = 1;
  2662  1ED7  0021               	movlb	1	; select bank1
  2663  1ED8  1691               	bsf	17,5	;volatile
  2664  1ED9  0008               	return
  2665  1EDA                     __end_of_EUSART1_Initialize:	
  2666                           
  2667                           	psect	text6
  2668  1E6C                     __ptext6:	
  2669 ;; *************** function _UART_buff_init *****************
  2670 ;; Defined at:
  2671 ;;		line 48 in file "UART.c"
  2672 ;; Parameters:    Size  Location     Type
  2673 ;;  _this           1    wreg     PTR struct UART_ring_buf
  2674 ;;		 -> output_buffer(26), input_buffer(26), 
  2675 ;; Auto vars:     Size  Location     Type
  2676 ;;  _this           1    7[BANK0 ] PTR struct UART_ring_buf
  2677 ;;		 -> output_buffer(26), input_buffer(26), 
  2678 ;; Return value:  Size  Location     Type
  2679 ;;                  1    wreg      void 
  2680 ;; Registers used:
  2681 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2682 ;; Tracked objects:
  2683 ;;		On entry : 0/0
  2684 ;;		On exit  : 0/0
  2685 ;;		Unchanged: 0/0
  2686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2688 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2690 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2691 ;;Total ram usage:        1 bytes
  2692 ;; Hardware stack levels used:    1
  2693 ;; Hardware stack levels required when called:    5
  2694 ;; This function calls:
  2695 ;;		_memset
  2696 ;; This function is called by:
  2697 ;;		_EUSART1_Initialize
  2698 ;; This function uses a non-reentrant model
  2699 ;;
  2700                           
  2701                           
  2702                           ;psect for function _UART_buff_init
  2703  1E6C                     _UART_buff_init:	
  2704                           
  2705                           ;incstack = 0
  2706                           ; Regs used in _UART_buff_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2707                           ;UART_buff_init@_this stored from wreg
  2708  1E6C  0020               	movlb	0	; select bank0
  2709  1E6D  00A7               	movwf	UART_buff_init@_this
  2710                           
  2711                           ;UART.c: 57: memset(_this, 0, sizeof (*_this));
  2712  1E6E  3000               	movlw	0
  2713  1E6F  00A0               	movwf	memset@c
  2714  1E70  00A1               	movwf	memset@c+1
  2715  1E71  301A               	movlw	26
  2716  1E72  00A2               	movwf	memset@n
  2717  1E73  3000               	movlw	0
  2718  1E74  00A3               	movwf	memset@n+1
  2719  1E75  0827               	movf	UART_buff_init@_this,w
  2720  1E76  319F  2727         	fcall	_memset
  2721  1E78  0008               	return
  2722  1E79                     __end_of_UART_buff_init:	
  2723                           
  2724                           	psect	text7
  2725  1F27                     __ptext7:	
  2726 ;; *************** function _memset *****************
  2727 ;; Defined at:
  2728 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  2729 ;; Parameters:    Size  Location     Type
  2730 ;;  p1              1    wreg     PTR void 
  2731 ;;		 -> output_buffer(26), input_buffer(26), 
  2732 ;;  c               2    0[BANK0 ] int 
  2733 ;;  n               2    2[BANK0 ] unsigned int 
  2734 ;; Auto vars:     Size  Location     Type
  2735 ;;  p1              1    5[BANK0 ] PTR void 
  2736 ;;		 -> output_buffer(26), input_buffer(26), 
  2737 ;;  p               1    6[BANK0 ] PTR unsigned char 
  2738 ;;		 -> output_buffer(26), input_buffer(26), 
  2739 ;; Return value:  Size  Location     Type
  2740 ;;                  1    wreg      PTR void 
  2741 ;; Registers used:
  2742 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2743 ;; Tracked objects:
  2744 ;;		On entry : 0/0
  2745 ;;		On exit  : 0/0
  2746 ;;		Unchanged: 0/0
  2747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2748 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2749 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2750 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2751 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2752 ;;Total ram usage:        7 bytes
  2753 ;; Hardware stack levels used:    1
  2754 ;; Hardware stack levels required when called:    4
  2755 ;; This function calls:
  2756 ;;		Nothing
  2757 ;; This function is called by:
  2758 ;;		_UART_buff_init
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762                           
  2763                           ;psect for function _memset
  2764  1F27                     _memset:	
  2765                           
  2766                           ;incstack = 0
  2767                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  2768                           ;memset@p1 stored from wreg
  2769  1F27  0020               	movlb	0	; select bank0
  2770  1F28  00A5               	movwf	memset@p1
  2771  1F29  0825               	movf	memset@p1,w
  2772  1F2A  00A4               	movwf	??_memset
  2773  1F2B  0824               	movf	??_memset,w
  2774  1F2C  00A6               	movwf	memset@p
  2775  1F2D                     l2670:	
  2776  1F2D  3001               	movlw	1
  2777  1F2E  02A2               	subwf	memset@n,f
  2778  1F2F  3000               	movlw	0
  2779  1F30  3BA3               	subwfb	memset@n+1,f
  2780  1F31  0A22               	incf	memset@n,w
  2781  1F32  1903               	btfsc	3,2
  2782  1F33  0A23               	incf	memset@n+1,w
  2783  1F34  1903               	btfsc	3,2
  2784  1F35  0008               	return
  2785  1F36  0820               	movf	memset@c,w
  2786  1F37  00A4               	movwf	??_memset
  2787  1F38  0826               	movf	memset@p,w
  2788  1F39  0086               	movwf	6
  2789  1F3A  3001               	movlw	1	; select bank2/3
  2790  1F3B  0087               	movwf	7
  2791  1F3C  0824               	movf	??_memset,w
  2792  1F3D  0081               	movwf	1
  2793  1F3E  3001               	movlw	1
  2794  1F3F  00A4               	movwf	??_memset
  2795  1F40  0824               	movf	??_memset,w
  2796  1F41  07A6               	addwf	memset@p,f
  2797  1F42  2F2D               	goto	l2670
  2798  1F43                     __end_of_memset:	
  2799                           ;	Return value of _memset is never used
  2800                           
  2801                           
  2802                           	psect	text8
  2803  11DF                     __ptext8:	
  2804 ;; *************** function _SR_FRSStart *****************
  2805 ;; Defined at:
  2806 ;;		line 15 in file "SR_FRS.c"
  2807 ;; Parameters:    Size  Location     Type
  2808 ;;		None
  2809 ;; Auto vars:     Size  Location     Type
  2810 ;;		None
  2811 ;; Return value:  Size  Location     Type
  2812 ;;                  1    wreg      void 
  2813 ;; Registers used:
  2814 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2815 ;; Tracked objects:
  2816 ;;		On entry : 0/0
  2817 ;;		On exit  : 0/0
  2818 ;;		Unchanged: 0/0
  2819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2824 ;;Total ram usage:        0 bytes
  2825 ;; Hardware stack levels used:    1
  2826 ;; Hardware stack levels required when called:   10
  2827 ;; This function calls:
  2828 ;;		_Delay
  2829 ;;		_SetCommandMode
  2830 ;;		_SetFrequency
  2831 ;;		_SetMIC
  2832 ;;		_SetPowerSave
  2833 ;;		_SetVOX
  2834 ;;		_SetVolume
  2835 ;; This function is called by:
  2836 ;;		_main
  2837 ;;		_RadioBegin
  2838 ;; This function uses a non-reentrant model
  2839 ;;
  2840                           
  2841                           
  2842                           ;psect for function _SR_FRSStart
  2843  11DF                     _SR_FRSStart:	
  2844                           
  2845                           ;SR_FRS.c: 16: SetCommandMode();
  2846                           
  2847                           ;incstack = 0
  2848                           ; Regs used in _SR_FRSStart: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2849  11DF  319E  2624  3191   	fcall	_SetCommandMode
  2850                           
  2851                           ;SR_FRS.c: 17: Delay(100);
  2852  11E2  3064               	movlw	100
  2853  11E3  0020               	movlb	0	; select bank0
  2854  11E4  00A0               	movwf	Delay@wait
  2855  11E5  3000               	movlw	0
  2856  11E6  00A1               	movwf	Delay@wait+1
  2857  11E7  319F  2743  3191   	fcall	_Delay
  2858                           
  2859                           ;SR_FRS.c: 19: SetFrequency();
  2860  11EA  319F  27DA  3191   	fcall	_SetFrequency
  2861                           
  2862                           ;SR_FRS.c: 20: Delay(100);
  2863  11ED  3064               	movlw	100
  2864  11EE  0020               	movlb	0	; select bank0
  2865  11EF  00A0               	movwf	Delay@wait
  2866  11F0  3000               	movlw	0
  2867  11F1  00A1               	movwf	Delay@wait+1
  2868  11F2  319F  2743  3191   	fcall	_Delay
  2869                           
  2870                           ;SR_FRS.c: 22: SetPowerSave();
  2871  11F5  319E  2654  3191   	fcall	_SetPowerSave
  2872                           
  2873                           ;SR_FRS.c: 23: Delay(100);
  2874  11F8  3064               	movlw	100
  2875  11F9  0020               	movlb	0	; select bank0
  2876  11FA  00A0               	movwf	Delay@wait
  2877  11FB  3000               	movlw	0
  2878  11FC  00A1               	movwf	Delay@wait+1
  2879  11FD  319F  2743  3191   	fcall	_Delay
  2880                           
  2881                           ;SR_FRS.c: 25: SetVolume(5);
  2882  1200  3005               	movlw	5
  2883  1201  319F  2760  3191   	fcall	_SetVolume
  2884                           
  2885                           ;SR_FRS.c: 26: Delay(100);
  2886  1204  3064               	movlw	100
  2887  1205  0020               	movlb	0	; select bank0
  2888  1206  00A0               	movwf	Delay@wait
  2889  1207  3000               	movlw	0
  2890  1208  00A1               	movwf	Delay@wait+1
  2891  1209  319F  2743  3191   	fcall	_Delay
  2892                           
  2893                           ;SR_FRS.c: 28: SetVOX(0);
  2894  120C  3000               	movlw	0
  2895  120D  0020               	movlb	0	; select bank0
  2896  120E  00ED               	movwf	SetVOX@volume
  2897  120F  00EE               	movwf	SetVOX@volume+1
  2898  1210  319F  279B  3191   	fcall	_SetVOX
  2899                           
  2900                           ;SR_FRS.c: 29: Delay(100);
  2901  1213  3064               	movlw	100
  2902  1214  0020               	movlb	0	; select bank0
  2903  1215  00A0               	movwf	Delay@wait
  2904  1216  3000               	movlw	0
  2905  1217  00A1               	movwf	Delay@wait+1
  2906  1218  319F  2743  3191   	fcall	_Delay
  2907                           
  2908                           ;SR_FRS.c: 31: SetMIC(5,0);
  2909  121B  0020               	movlb	0	; select bank0
  2910  121C  01ED               	clrf	SetMIC@scram
  2911  121D  3005               	movlw	5
  2912  121E  3191  2156         	fcall	_SetMIC
  2913  1220  0008               	return
  2914  1221                     __end_of_SR_FRSStart:	
  2915                           
  2916                           	psect	text9
  2917  1F60                     __ptext9:	
  2918 ;; *************** function _SetVolume *****************
  2919 ;; Defined at:
  2920 ;;		line 47 in file "SR_FRS.c"
  2921 ;; Parameters:    Size  Location     Type
  2922 ;;  volume          1    wreg     unsigned char 
  2923 ;; Auto vars:     Size  Location     Type
  2924 ;;  volume          1   79[BANK0 ] unsigned char 
  2925 ;; Return value:  Size  Location     Type
  2926 ;;                  1    wreg      void 
  2927 ;; Registers used:
  2928 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2929 ;; Tracked objects:
  2930 ;;		On entry : 0/0
  2931 ;;		On exit  : 0/0
  2932 ;;		Unchanged: 0/0
  2933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2935 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2936 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2937 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2938 ;;Total ram usage:        3 bytes
  2939 ;; Hardware stack levels used:    1
  2940 ;; Hardware stack levels required when called:    9
  2941 ;; This function calls:
  2942 ;;		_printf
  2943 ;; This function is called by:
  2944 ;;		_SR_FRSStart
  2945 ;; This function uses a non-reentrant model
  2946 ;;
  2947                           
  2948                           
  2949                           ;psect for function _SetVolume
  2950  1F60                     _SetVolume:	
  2951                           
  2952                           ;incstack = 0
  2953                           ; Regs used in _SetVolume: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2954                           ;SetVolume@volume stored from wreg
  2955  1F60  0020               	movlb	0	; select bank0
  2956  1F61  00EF               	movwf	SetVolume@volume
  2957                           
  2958                           ;SR_FRS.c: 48: if((volume < 9) && (volume > 1)){
  2959  1F62  3009               	movlw	9
  2960  1F63  026F               	subwf	SetVolume@volume,w
  2961  1F64  1803               	skipnc
  2962  1F65  0008               	return
  2963  1F66  3002               	movlw	2
  2964  1F67  026F               	subwf	SetVolume@volume,w
  2965  1F68  1C03               	skipc
  2966  1F69  0008               	return
  2967                           
  2968                           ;SR_FRS.c: 49: printf("AT+DMOSETVOLUME=%c",volume);
  2969  1F6A  3013               	movlw	low (STR_4| (0+32768))
  2970  1F6B  0021               	movlb	1	; select bank1
  2971  1F6C  00A0               	movwf	printf@f^(0+128)
  2972  1F6D  3091               	movlw	high (STR_4| (0+32768))
  2973  1F6E  00A1               	movwf	(printf@f^(0+128)+1)
  2974  1F6F  0020               	movlb	0	; select bank0
  2975  1F70  086F               	movf	SetVolume@volume,w
  2976  1F71  00ED               	movwf	??_SetVolume
  2977  1F72  01EE               	clrf	??_SetVolume+1
  2978  1F73  086D               	movf	??_SetVolume,w
  2979  1F74  0021               	movlb	1	; select bank1
  2980  1F75  00A2               	movwf	(?_printf^(0+128)+2)
  2981  1F76  0020               	movlb	0	; select bank0
  2982  1F77  086E               	movf	??_SetVolume+1,w
  2983  1F78  0021               	movlb	1	; select bank1
  2984  1F79  00A3               	movwf	((?_printf+1)^(0+128)+2)
  2985  1F7A  3188  202F         	fcall	_printf
  2986  1F7C  0008               	return
  2987  1F7D                     __end_of_SetVolume:	
  2988                           
  2989                           	psect	text10
  2990  1F9B                     __ptext10:	
  2991 ;; *************** function _SetVOX *****************
  2992 ;; Defined at:
  2993 ;;		line 53 in file "SR_FRS.c"
  2994 ;; Parameters:    Size  Location     Type
  2995 ;;  volume          2   77[BANK0 ] int 
  2996 ;; Auto vars:     Size  Location     Type
  2997 ;;		None
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  1    wreg      void 
  3000 ;; Registers used:
  3001 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3007 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3009 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3010 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3011 ;;Total ram usage:        3 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; Hardware stack levels required when called:    9
  3014 ;; This function calls:
  3015 ;;		_printf
  3016 ;; This function is called by:
  3017 ;;		_SR_FRSStart
  3018 ;; This function uses a non-reentrant model
  3019 ;;
  3020                           
  3021                           
  3022                           ;psect for function _SetVOX
  3023  1F9B                     _SetVOX:	
  3024                           
  3025                           ;SR_FRS.c: 54: if((volume < 8) && (volume >= 0)){
  3026                           
  3027                           ;incstack = 0
  3028                           ; Regs used in _SetVOX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3029  1F9B  0020               	movlb	0	; select bank0
  3030  1F9C  086E               	movf	SetVOX@volume+1,w
  3031  1F9D  3A80               	xorlw	128
  3032  1F9E  00EF               	movwf	??_SetVOX
  3033  1F9F  3080               	movlw	128
  3034  1FA0  026F               	subwf	??_SetVOX,w
  3035  1FA1  3008               	movlw	8
  3036  1FA2  1903               	btfsc	3,2
  3037  1FA3  026D               	subwf	SetVOX@volume,w
  3038  1FA4  1803               	skipnc
  3039  1FA5  0008               	return
  3040  1FA6  0020               	movlb	0	; select bank0
  3041  1FA7  1BEE               	btfsc	SetVOX@volume+1,7
  3042  1FA8  0008               	return
  3043                           
  3044                           ;SR_FRS.c: 55: printf("AT+DMOSETVOLUME=%c",volume);
  3045  1FA9  3013               	movlw	low (STR_4| (0+32768))
  3046  1FAA  0021               	movlb	1	; select bank1
  3047  1FAB  00A0               	movwf	printf@f^(0+128)
  3048  1FAC  3091               	movlw	high (STR_4| (0+32768))
  3049  1FAD  00A1               	movwf	(printf@f^(0+128)+1)
  3050  1FAE  0020               	movlb	0	; select bank0
  3051  1FAF  086E               	movf	SetVOX@volume+1,w
  3052  1FB0  0021               	movlb	1	; select bank1
  3053  1FB1  00A3               	movwf	((?_printf+1)^(0+128)+2)
  3054  1FB2  0020               	movlb	0	; select bank0
  3055  1FB3  086D               	movf	SetVOX@volume,w
  3056  1FB4  0021               	movlb	1	; select bank1
  3057  1FB5  00A2               	movwf	(?_printf^(0+128)+2)
  3058  1FB6  3188  202F         	fcall	_printf
  3059  1FB8  0008               	return
  3060  1FB9                     __end_of_SetVOX:	
  3061                           
  3062                           	psect	text11
  3063  1E54                     __ptext11:	
  3064 ;; *************** function _SetPowerSave *****************
  3065 ;; Defined at:
  3066 ;;		line 42 in file "SR_FRS.c"
  3067 ;; Parameters:    Size  Location     Type
  3068 ;;		None
  3069 ;; Auto vars:     Size  Location     Type
  3070 ;;		None
  3071 ;; Return value:  Size  Location     Type
  3072 ;;                  1    wreg      void 
  3073 ;; Registers used:
  3074 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3075 ;; Tracked objects:
  3076 ;;		On entry : 0/0
  3077 ;;		On exit  : 0/0
  3078 ;;		Unchanged: 0/0
  3079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3084 ;;Total ram usage:        0 bytes
  3085 ;; Hardware stack levels used:    1
  3086 ;; Hardware stack levels required when called:    9
  3087 ;; This function calls:
  3088 ;;		_printf
  3089 ;; This function is called by:
  3090 ;;		_SR_FRSStart
  3091 ;; This function uses a non-reentrant model
  3092 ;;
  3093                           
  3094                           
  3095                           ;psect for function _SetPowerSave
  3096  1E54                     _SetPowerSave:	
  3097                           
  3098                           ;SR_FRS.c: 44: printf("AT+DMOAUTOPOWCONTR=%c",1);
  3099                           
  3100                           ;incstack = 0
  3101                           ; Regs used in _SetPowerSave: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3102  1E54  30FD               	movlw	low (STR_3| (0+32768))
  3103  1E55  0021               	movlb	1	; select bank1
  3104  1E56  00A0               	movwf	printf@f^(0+128)
  3105  1E57  3090               	movlw	high (STR_3| (0+32768))
  3106  1E58  00A1               	movwf	(printf@f^(0+128)+1)
  3107  1E59  3001               	movlw	1
  3108  1E5A  00A2               	movwf	(?_printf^(0+128)+2)
  3109  1E5B  3000               	movlw	0
  3110  1E5C  00A3               	movwf	(?_printf^(0+128)+3)
  3111  1E5D  3188  202F         	fcall	_printf
  3112  1E5F  0008               	return
  3113  1E60                     __end_of_SetPowerSave:	
  3114                           
  3115                           	psect	text12
  3116  1156                     __ptext12:	
  3117 ;; *************** function _SetMIC *****************
  3118 ;; Defined at:
  3119 ;;		line 59 in file "SR_FRS.c"
  3120 ;; Parameters:    Size  Location     Type
  3121 ;;  volume          1    wreg     unsigned char 
  3122 ;;  scram           1   77[BANK0 ] unsigned char 
  3123 ;; Auto vars:     Size  Location     Type
  3124 ;;  volume          1   78[BANK0 ] unsigned char 
  3125 ;; Return value:  Size  Location     Type
  3126 ;;                  1    wreg      void 
  3127 ;; Registers used:
  3128 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3129 ;; Tracked objects:
  3130 ;;		On entry : 0/0
  3131 ;;		On exit  : 0/0
  3132 ;;		Unchanged: 0/0
  3133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3134 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3135 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3136 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3137 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3138 ;;Total ram usage:        6 bytes
  3139 ;; Hardware stack levels used:    1
  3140 ;; Hardware stack levels required when called:    9
  3141 ;; This function calls:
  3142 ;;		_printf
  3143 ;; This function is called by:
  3144 ;;		_SR_FRSStart
  3145 ;; This function uses a non-reentrant model
  3146 ;;
  3147                           
  3148                           
  3149                           ;psect for function _SetMIC
  3150  1156                     _SetMIC:	
  3151                           
  3152                           ;incstack = 0
  3153                           ; Regs used in _SetMIC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3154                           ;SetMIC@volume stored from wreg
  3155  1156  0020               	movlb	0	; select bank0
  3156  1157  00EE               	movwf	SetMIC@volume
  3157                           
  3158                           ;SR_FRS.c: 60: if((volume < 8) && (volume >= 0)){
  3159  1158  3008               	movlw	8
  3160  1159  026E               	subwf	SetMIC@volume,w
  3161  115A  1803               	skipnc
  3162  115B  0008               	return
  3163                           
  3164                           ;SR_FRS.c: 61: printf("AT+DMOSETMIC=%c,%c,%c",volume,scram,0);
  3165  115C  30E7               	movlw	low (STR_6| (0+32768))
  3166  115D  0021               	movlb	1	; select bank1
  3167  115E  00A0               	movwf	printf@f^(0+128)
  3168  115F  3090               	movlw	high (STR_6| (0+32768))
  3169  1160  00A1               	movwf	(printf@f^(0+128)+1)
  3170  1161  0020               	movlb	0	; select bank0
  3171  1162  086E               	movf	SetMIC@volume,w
  3172  1163  0021               	movlb	1	; select bank1
  3173  1164  00D8               	movwf	??_SetMIC^(0+128)
  3174  1165  01D9               	clrf	(??_SetMIC^(0+128)+1)
  3175  1166  0858               	movf	??_SetMIC^(0+128),w
  3176  1167  00A2               	movwf	(?_printf^(0+128)+2)
  3177  1168  0859               	movf	(??_SetMIC+1)^(0+128),w
  3178  1169  00A3               	movwf	((?_printf+1)^(0+128)+2)
  3179  116A  0020               	movlb	0	; select bank0
  3180  116B  086D               	movf	SetMIC@scram,w
  3181  116C  0021               	movlb	1	; select bank1
  3182  116D  00DA               	movwf	(??_SetMIC+2)^(0+128)
  3183  116E  01DB               	clrf	((??_SetMIC+2)^(0+128)+1)
  3184  116F  085A               	movf	(??_SetMIC+2)^(0+128),w
  3185  1170  00A4               	movwf	(?_printf^(0+128)+4)
  3186  1171  085B               	movf	(??_SetMIC+3)^(0+128),w
  3187  1172  00A5               	movwf	((?_printf+1)^(0+128)+4)
  3188  1173  3000               	movlw	0
  3189  1174  00A6               	movwf	(?_printf^(0+128)+6)
  3190  1175  00A7               	movwf	((?_printf+1)^(0+128)+6)
  3191  1176  3188  202F         	fcall	_printf
  3192  1178  0008               	return
  3193  1179                     __end_of_SetMIC:	
  3194                           
  3195                           	psect	text13
  3196  1FDA                     __ptext13:	
  3197 ;; *************** function _SetFrequency *****************
  3198 ;; Defined at:
  3199 ;;		line 38 in file "SR_FRS.c"
  3200 ;; Parameters:    Size  Location     Type
  3201 ;;		None
  3202 ;; Auto vars:     Size  Location     Type
  3203 ;;		None
  3204 ;; Return value:  Size  Location     Type
  3205 ;;                  1    wreg      void 
  3206 ;; Registers used:
  3207 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3208 ;; Tracked objects:
  3209 ;;		On entry : 0/0
  3210 ;;		On exit  : 0/0
  3211 ;;		Unchanged: 0/0
  3212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3217 ;;Total ram usage:        0 bytes
  3218 ;; Hardware stack levels used:    1
  3219 ;; Hardware stack levels required when called:    9
  3220 ;; This function calls:
  3221 ;;		_printf
  3222 ;; This function is called by:
  3223 ;;		_SR_FRSStart
  3224 ;; This function uses a non-reentrant model
  3225 ;;
  3226                           
  3227                           
  3228                           ;psect for function _SetFrequency
  3229  1FDA                     _SetFrequency:	
  3230                           
  3231                           ;SR_FRS.c: 39: printf("AT+DMOSETGROUP=%d,%f,%f,%d,%d,%d",0,450.0250,450.0250,83,2,83,0);
  3232                           
  3233                           ;incstack = 0
  3234                           ; Regs used in _SetFrequency: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3235  1FDA  30C6               	movlw	low (STR_2| (0+32768))
  3236  1FDB  0021               	movlb	1	; select bank1
  3237  1FDC  00A0               	movwf	printf@f^(0+128)
  3238  1FDD  3090               	movlw	high (STR_2| (0+32768))
  3239  1FDE  00A1               	movwf	(printf@f^(0+128)+1)
  3240  1FDF  3000               	movlw	0
  3241  1FE0  00A2               	movwf	(?_printf^(0+128)+2)
  3242  1FE1  00A3               	movwf	((?_printf+1)^(0+128)+2)
  3243  1FE2  3003               	movlw	3
  3244  1FE3  00A4               	movwf	(?_printf^(0+128)+4)
  3245  1FE4  30E1               	movlw	225
  3246  1FE5  00A5               	movwf	((?_printf+1)^(0+128)+4)
  3247  1FE6  3043               	movlw	67
  3248  1FE7  00A6               	movwf	((?_printf+2)^(0+128)+4)
  3249  1FE8  3003               	movlw	3
  3250  1FE9  00A7               	movwf	(?_printf^(0+128)+7)
  3251  1FEA  30E1               	movlw	225
  3252  1FEB  00A8               	movwf	((?_printf+1)^(0+128)+7)
  3253  1FEC  3043               	movlw	67
  3254  1FED  00A9               	movwf	((?_printf+2)^(0+128)+7)
  3255  1FEE  3053               	movlw	83
  3256  1FEF  00AA               	movwf	(?_printf^(0+128)+10)
  3257  1FF0  3000               	movlw	0
  3258  1FF1  00AB               	movwf	(?_printf^(0+128)+11)
  3259  1FF2  3002               	movlw	2
  3260  1FF3  00AC               	movwf	(?_printf^(0+128)+12)
  3261  1FF4  3000               	movlw	0
  3262  1FF5  00AD               	movwf	(?_printf^(0+128)+13)
  3263  1FF6  3053               	movlw	83
  3264  1FF7  00AE               	movwf	(?_printf^(0+128)+14)
  3265  1FF8  3000               	movlw	0
  3266  1FF9  00AF               	movwf	(?_printf^(0+128)+15)
  3267  1FFA  3000               	movlw	0
  3268  1FFB  00B0               	movwf	(?_printf^(0+128)+16)
  3269  1FFC  00B1               	movwf	((?_printf+1)^(0+128)+16)
  3270  1FFD  3188  202F         	fcall	_printf
  3271  1FFF  0008               	return
  3272  2000                     __end_of_SetFrequency:	
  3273                           
  3274                           	psect	text14
  3275  1E24                     __ptext14:	
  3276 ;; *************** function _SetCommandMode *****************
  3277 ;; Defined at:
  3278 ;;		line 34 in file "SR_FRS.c"
  3279 ;; Parameters:    Size  Location     Type
  3280 ;;		None
  3281 ;; Auto vars:     Size  Location     Type
  3282 ;;		None
  3283 ;; Return value:  Size  Location     Type
  3284 ;;                  1    wreg      void 
  3285 ;; Registers used:
  3286 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3287 ;; Tracked objects:
  3288 ;;		On entry : 0/0
  3289 ;;		On exit  : 0/0
  3290 ;;		Unchanged: 0/0
  3291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3296 ;;Total ram usage:        0 bytes
  3297 ;; Hardware stack levels used:    1
  3298 ;; Hardware stack levels required when called:    9
  3299 ;; This function calls:
  3300 ;;		_printf
  3301 ;; This function is called by:
  3302 ;;		_SR_FRSStart
  3303 ;; This function uses a non-reentrant model
  3304 ;;
  3305                           
  3306                           
  3307                           ;psect for function _SetCommandMode
  3308  1E24                     _SetCommandMode:	
  3309                           
  3310                           ;SR_FRS.c: 35: printf("AT+DMOCONNECT");
  3311                           
  3312                           ;incstack = 0
  3313                           ; Regs used in _SetCommandMode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3314  1E24  3048               	movlw	low (STR_1| (0+32768))
  3315  1E25  0021               	movlb	1	; select bank1
  3316  1E26  00A0               	movwf	printf@f^(0+128)
  3317  1E27  3091               	movlw	high (STR_1| (0+32768))
  3318  1E28  00A1               	movwf	(printf@f^(0+128)+1)
  3319  1E29  3188  202F         	fcall	_printf
  3320  1E2B  0008               	return
  3321  1E2C                     __end_of_SetCommandMode:	
  3322                           
  3323                           	psect	text15
  3324  082F                     __ptext15:	
  3325 ;; *************** function _printf *****************
  3326 ;; Defined at:
  3327 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  3328 ;; Parameters:    Size  Location     Type
  3329 ;;  f               2    0[BANK1 ] PTR const unsigned char 
  3330 ;;		 -> STR_6(22), STR_5(19), STR_4(19), STR_3(22), 
  3331 ;;		 -> STR_2(33), STR_1(14), 
  3332 ;; Auto vars:     Size  Location     Type
  3333 ;;  idx             1   31[BANK1 ] unsigned char 
  3334 ;;  val             4   45[BANK1 ] unsigned long 
  3335 ;;  tmpval          4   36[BANK1 ] struct .
  3336 ;;  fval            3   42[BANK1 ] struct .
  3337 ;;  flag            2   54[BANK1 ] unsigned short 
  3338 ;;  width           2   51[BANK1 ] int 
  3339 ;;  prec            2   49[BANK1 ] int 
  3340 ;;  exp             2   40[BANK1 ] int 
  3341 ;;  len             2   33[BANK1 ] unsigned int 
  3342 ;;  c               1   53[BANK1 ] char 
  3343 ;;  ap              1   35[BANK1 ] PTR void [1]
  3344 ;;		 -> ?_printf(2), 
  3345 ;;  cp              1   32[BANK1 ] PTR const unsigned char 
  3346 ;;		 -> printf@c(1), 
  3347 ;;  d               1    0        unsigned char 
  3348 ;; Return value:  Size  Location     Type
  3349 ;;                  2    0[BANK1 ] int 
  3350 ;; Registers used:
  3351 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3352 ;; Tracked objects:
  3353 ;;		On entry : 0/0
  3354 ;;		On exit  : 0/0
  3355 ;;		Unchanged: 0/0
  3356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3357 ;;      Params:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0
  3358 ;;      Locals:         0       0      38       0       0       0       0       0       0       0       0       0       
      +0       0
  3359 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3360 ;;      Totals:         0       6      56       0       0       0       0       0       0       0       0       0       
      +0       0
  3361 ;;Total ram usage:       62 bytes
  3362 ;; Hardware stack levels used:    1
  3363 ;; Hardware stack levels required when called:    8
  3364 ;; This function calls:
  3365 ;;		___awdiv
  3366 ;;		___ftadd
  3367 ;;		___ftge
  3368 ;;		___ftmul
  3369 ;;		___ftneg
  3370 ;;		___ftsub
  3371 ;;		___fttol
  3372 ;;		___lldiv
  3373 ;;		___llmod
  3374 ;;		___lltoft
  3375 ;;		___wmul
  3376 ;;		__div_to_l_
  3377 ;;		__tdiv_to_l_
  3378 ;;		_fround
  3379 ;;		_isdigit
  3380 ;;		_putch
  3381 ;;		_scale
  3382 ;; This function is called by:
  3383 ;;		_SetCommandMode
  3384 ;;		_SetFrequency
  3385 ;;		_SetPowerSave
  3386 ;;		_SetVolume
  3387 ;;		_SetVOX
  3388 ;;		_SetMIC
  3389 ;; This function uses a non-reentrant model
  3390 ;;
  3391                           
  3392                           
  3393                           ;psect for function _printf
  3394  082F                     _printf:	
  3395                           
  3396                           ;doprnt.c: 466: va_list ap;
  3397                           ;doprnt.c: 499: signed char c;
  3398                           ;doprnt.c: 501: int width;
  3399                           ;doprnt.c: 504: int prec;
  3400                           ;doprnt.c: 508: unsigned short flag;
  3401                           ;doprnt.c: 515: char d;
  3402                           ;doprnt.c: 516: double fval;
  3403                           ;doprnt.c: 517: int exp;
  3404                           ;doprnt.c: 523: union {
  3405                           ;doprnt.c: 524: unsigned long vd;
  3406                           ;doprnt.c: 525: double integ;
  3407                           ;doprnt.c: 526: } tmpval;
  3408                           ;doprnt.c: 528: unsigned long val;
  3409                           ;doprnt.c: 529: unsigned len;
  3410                           ;doprnt.c: 530: const char * cp;
  3411                           ;doprnt.c: 533: *ap = __va_start();
  3412                           
  3413                           ;incstack = 0
  3414                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3415  082F  30A2               	movlw	(low ((?_printf| 0+2)))& (0+255)
  3416  0830  0020               	movlb	0	; select bank0
  3417  0831  00E7               	movwf	??_printf
  3418  0832  0867               	movf	??_printf,w
  3419  0833  0021               	movlb	1	; select bank1
  3420  0834  00C3               	movwf	printf@ap^(0+128)
  3421  0835                     l3472:	
  3422                           ;doprnt.c: 536: while(c = *f++) {
  3423                           
  3424  0835  0021               	movlb	1	; select bank1
  3425  0836  0821               	movf	(printf@f+1)^(0+128),w
  3426  0837  0020               	movlb	0	; select bank0
  3427  0838  00E8               	movwf	??_printf+1
  3428  0839  0021               	movlb	1	; select bank1
  3429  083A  0820               	movf	printf@f^(0+128),w
  3430  083B  0020               	movlb	0	; select bank0
  3431  083C  00E7               	movwf	??_printf
  3432  083D  0021               	movlb	1	; select bank1
  3433  083E  0AA0               	incf	printf@f^(0+128),f
  3434  083F  1903               	skipnz
  3435  0840  0AA1               	incf	(printf@f+1)^(0+128),f
  3436  0841  0020               	movlb	0	; select bank0
  3437  0842  0867               	movf	??_printf,w
  3438  0843  0084               	movwf	4
  3439  0844  0868               	movf	??_printf+1,w
  3440  0845  0085               	movwf	5
  3441  0846  0800               	movf	0,w	;code access
  3442  0847  00E9               	movwf	??_printf+2
  3443  0848  0869               	movf	??_printf+2,w
  3444  0849  0021               	movlb	1	; select bank1
  3445  084A  00D5               	movwf	printf@c^(0+128)
  3446  084B  0855               	movf	printf@c^(0+128),w
  3447  084C  1903               	btfsc	3,2
  3448  084D  0008               	return
  3449                           
  3450                           ;doprnt.c: 538: if(c != '%')
  3451  084E  3025               	movlw	37
  3452  084F  0655               	xorwf	printf@c^(0+128),w
  3453  0850  1903               	btfsc	3,2
  3454  0851  2857               	goto	l2996
  3455                           
  3456                           ;doprnt.c: 540: {
  3457                           ;doprnt.c: 541: (putch(c) );
  3458  0852  0855               	movf	printf@c^(0+128),w
  3459  0853  319E  2618  3188   	fcall	_putch
  3460                           
  3461                           ;doprnt.c: 542: continue;
  3462  0856  2835               	goto	l3472
  3463  0857                     l2996:	
  3464                           
  3465                           ;doprnt.c: 543: }
  3466                           ;doprnt.c: 546: width = 0;
  3467  0857  0021               	movlb	1	; select bank1
  3468  0858  01D3               	clrf	printf@width^(0+128)
  3469  0859  01D4               	clrf	(printf@width+1)^(0+128)
  3470                           
  3471                           ;doprnt.c: 548: flag = 0;
  3472  085A  01D6               	clrf	printf@flag^(0+128)
  3473  085B  01D7               	clrf	(printf@flag+1)^(0+128)
  3474                           
  3475                           ;doprnt.c: 551: switch(*f) {
  3476                           
  3477                           ;doprnt.c: 550: for(;;) {
  3478  085C  2868               	goto	l3008
  3479  085D                     l317:	
  3480                           ;doprnt.c: 553: case '-':
  3481                           
  3482                           
  3483                           ;doprnt.c: 554: flag |= 0x08;
  3484  085D  15D6               	bsf	printf@flag^(0+128),3
  3485  085E  2864               	goto	l3004
  3486  085F                     l319:	
  3487                           ;doprnt.c: 560: case ' ':
  3488                           
  3489                           ;doprnt.c: 556: continue;
  3490                           
  3491                           ;doprnt.c: 555: f++;
  3492                           
  3493                           
  3494                           ;doprnt.c: 561: flag |= 0x01;
  3495  085F  1456               	bsf	printf@flag^(0+128),0
  3496  0860  2864               	goto	l3004
  3497  0861                     l320:	
  3498                           ;doprnt.c: 573: case '#':
  3499                           
  3500                           ;doprnt.c: 563: continue;
  3501                           
  3502                           ;doprnt.c: 562: f++;
  3503                           
  3504                           
  3505                           ;doprnt.c: 574: flag |= 0x800;
  3506  0861  15D7               	bsf	(printf@flag^(0+128)+1),3
  3507  0862  2864               	goto	l3004
  3508  0863                     l321:	
  3509                           ;doprnt.c: 579: case '0':
  3510                           
  3511                           ;doprnt.c: 576: continue;
  3512                           
  3513                           ;doprnt.c: 575: f++;
  3514                           
  3515                           
  3516                           ;doprnt.c: 580: flag |= 0x04;
  3517  0863  1556               	bsf	printf@flag^(0+128),2
  3518  0864                     l3004:	
  3519                           
  3520                           ;doprnt.c: 581: f++;
  3521  0864  3001               	movlw	1
  3522  0865  07A0               	addwf	printf@f^(0+128),f
  3523  0866  3000               	movlw	0
  3524  0867  3DA1               	addwfc	(printf@f+1)^(0+128),f
  3525  0868                     l3008:	
  3526                           ;doprnt.c: 584: }
  3527                           
  3528                           ;doprnt.c: 582: continue;
  3529                           
  3530  0868  0820               	movf	printf@f^(0+128),w
  3531  0869  0084               	movwf	4
  3532  086A  0821               	movf	(printf@f+1)^(0+128),w
  3533  086B  0085               	movwf	5
  3534  086C  0800               	movf	0,w	;code access
  3535                           
  3536                           ; Switch size 1, requested type "space"
  3537                           ; Number of cases is 4, Range of values is 32 to 48
  3538                           ; switch strategies available:
  3539                           ; Name         Instructions Cycles
  3540                           ; simple_byte           13     7 (average)
  3541                           ; direct_byte           43     9 (fixed)
  3542                           ; jumptable            263     9 (fixed)
  3543                           ;	Chosen strategy is simple_byte
  3544  086D  3A20               	xorlw	32	; case 32
  3545  086E  1903               	skipnz
  3546  086F  285F               	goto	l319
  3547  0870  3A03               	xorlw	3	; case 35
  3548  0871  1903               	skipnz
  3549  0872  2861               	goto	l320
  3550  0873  3A0E               	xorlw	14	; case 45
  3551  0874  1903               	skipnz
  3552  0875  285D               	goto	l317
  3553  0876  3A1D               	xorlw	29	; case 48
  3554  0877  1903               	skipnz
  3555  0878  2863               	goto	l321
  3556  0879  287A               	goto	l323
  3557  087A                     l323:	
  3558                           ;doprnt.c: 586: }
  3559                           
  3560                           ;doprnt.c: 585: break;
  3561                           
  3562                           
  3563                           ;doprnt.c: 593: if(flag & 0x08)
  3564  087A  1DD6               	btfss	printf@flag^(0+128),3
  3565  087B  2880               	goto	l3012
  3566                           
  3567                           ;doprnt.c: 594: flag &= ~0x04;
  3568  087C  30FB               	movlw	251
  3569  087D  05D6               	andwf	printf@flag^(0+128),f
  3570  087E  30FF               	movlw	255
  3571  087F  05D7               	andwf	(printf@flag+1)^(0+128),f
  3572  0880                     l3012:	
  3573                           
  3574                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3575  0880  0820               	movf	printf@f^(0+128),w
  3576  0881  0084               	movwf	4
  3577  0882  0821               	movf	(printf@f+1)^(0+128),w
  3578  0883  0085               	movwf	5
  3579  0884  0800               	movf	0,w	;code access
  3580  0885  319E  2679  3188   	fcall	_isdigit
  3581  0888  1C03               	btfss	3,0
  3582  0889  28C7               	goto	l3024
  3583                           
  3584                           ;doprnt.c: 598: width = 0;
  3585  088A  0021               	movlb	1	; select bank1
  3586  088B  01D3               	clrf	printf@width^(0+128)
  3587  088C  01D4               	clrf	(printf@width+1)^(0+128)
  3588  088D                     l3016:	
  3589                           ;doprnt.c: 599: do {
  3590                           
  3591                           
  3592                           ;doprnt.c: 600: width *= 10;
  3593  088D  300A               	movlw	10
  3594  088E  0020               	movlb	0	; select bank0
  3595  088F  00B0               	movwf	___wmul@multiplier
  3596  0890  3000               	movlw	0
  3597  0891  00B1               	movwf	___wmul@multiplier+1
  3598  0892  0021               	movlb	1	; select bank1
  3599  0893  0854               	movf	(printf@width+1)^(0+128),w
  3600  0894  0020               	movlb	0	; select bank0
  3601  0895  00B3               	movwf	___wmul@multiplicand+1
  3602  0896  0021               	movlb	1	; select bank1
  3603  0897  0853               	movf	printf@width^(0+128),w
  3604  0898  0020               	movlb	0	; select bank0
  3605  0899  00B2               	movwf	___wmul@multiplicand
  3606  089A  319F  270B  3188   	fcall	___wmul
  3607  089D  0020               	movlb	0	; select bank0
  3608  089E  0831               	movf	?___wmul+1,w
  3609  089F  0021               	movlb	1	; select bank1
  3610  08A0  00D4               	movwf	(printf@width+1)^(0+128)
  3611  08A1  0020               	movlb	0	; select bank0
  3612  08A2  0830               	movf	?___wmul,w
  3613  08A3  0021               	movlb	1	; select bank1
  3614  08A4  00D3               	movwf	printf@width^(0+128)
  3615                           
  3616                           ;doprnt.c: 601: width += *f++ - '0';
  3617  08A5  0820               	movf	printf@f^(0+128),w
  3618  08A6  0084               	movwf	4
  3619  08A7  0821               	movf	(printf@f+1)^(0+128),w
  3620  08A8  0085               	movwf	5
  3621  08A9  0800               	movf	0,w	;code access
  3622  08AA  3ED0               	addlw	208
  3623  08AB  0020               	movlb	0	; select bank0
  3624  08AC  00E7               	movwf	??_printf
  3625  08AD  30FF               	movlw	255
  3626  08AE  1803               	skipnc
  3627  08AF  3000               	movlw	0
  3628  08B0  00E8               	movwf	??_printf+1
  3629  08B1  0867               	movf	??_printf,w
  3630  08B2  0021               	movlb	1	; select bank1
  3631  08B3  07D3               	addwf	printf@width^(0+128),f
  3632  08B4  0020               	movlb	0	; select bank0
  3633  08B5  0868               	movf	??_printf+1,w
  3634  08B6  0021               	movlb	1	; select bank1
  3635  08B7  3DD4               	addwfc	(printf@width+1)^(0+128),f
  3636  08B8  3001               	movlw	1
  3637  08B9  07A0               	addwf	printf@f^(0+128),f
  3638  08BA  3000               	movlw	0
  3639  08BB  3DA1               	addwfc	(printf@f+1)^(0+128),f
  3640                           
  3641                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3642  08BC  0820               	movf	printf@f^(0+128),w
  3643  08BD  0084               	movwf	4
  3644  08BE  0821               	movf	(printf@f+1)^(0+128),w
  3645  08BF  0085               	movwf	5
  3646  08C0  0800               	movf	0,w	;code access
  3647  08C1  319E  2679  3188   	fcall	_isdigit
  3648  08C4  1C03               	btfss	3,0
  3649  08C5  28E1               	goto	l3032
  3650  08C6  288D               	goto	l3016
  3651  08C7                     l3024:	
  3652                           ;doprnt.c: 604: } else if(*f == '*') {
  3653                           
  3654  08C7  0021               	movlb	1	; select bank1
  3655  08C8  0820               	movf	printf@f^(0+128),w
  3656  08C9  0084               	movwf	4
  3657  08CA  0821               	movf	(printf@f+1)^(0+128),w
  3658  08CB  0085               	movwf	5
  3659  08CC  0012               	moviw fsr0++
  3660  08CD  3A2A               	xorlw	42
  3661  08CE  1D03               	btfss	3,2
  3662  08CF  28E1               	goto	l3032
  3663                           
  3664                           ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  3665  08D0  0843               	movf	printf@ap^(0+128),w
  3666  08D1  0086               	movwf	6
  3667  08D2  0187               	clrf	7
  3668  08D3  3F40               	moviw [0]fsr1
  3669  08D4  00D3               	movwf	printf@width^(0+128)
  3670  08D5  3F41               	moviw [1]fsr1
  3671  08D6  00D4               	movwf	(printf@width+1)^(0+128)
  3672  08D7  3002               	movlw	2
  3673  08D8  0020               	movlb	0	; select bank0
  3674  08D9  00E7               	movwf	??_printf
  3675  08DA  0867               	movf	??_printf,w
  3676  08DB  0021               	movlb	1	; select bank1
  3677  08DC  07C3               	addwf	printf@ap^(0+128),f
  3678                           
  3679                           ;doprnt.c: 606: f++;
  3680  08DD  3001               	movlw	1
  3681  08DE  07A0               	addwf	printf@f^(0+128),f
  3682  08DF  3000               	movlw	0
  3683  08E0  3DA1               	addwfc	(printf@f+1)^(0+128),f
  3684  08E1                     l3032:	
  3685                           
  3686                           ;doprnt.c: 608: }
  3687                           ;doprnt.c: 611: if(*f == '.') {
  3688  08E1  0021               	movlb	1	; select bank1
  3689  08E2  0820               	movf	printf@f^(0+128),w
  3690  08E3  0084               	movwf	4
  3691  08E4  0821               	movf	(printf@f+1)^(0+128),w
  3692  08E5  0085               	movwf	5
  3693  08E6  0012               	moviw fsr0++
  3694  08E7  3A2E               	xorlw	46
  3695  08E8  1D03               	btfss	3,2
  3696  08E9  2943               	goto	L25
  3697                           
  3698                           ;doprnt.c: 612: flag |= 0x4000;
  3699  08EA  1757               	bsf	(printf@flag^(0+128)+1),6
  3700                           
  3701                           ;doprnt.c: 613: f++;
  3702  08EB  3001               	movlw	1
  3703  08EC  07A0               	addwf	printf@f^(0+128),f
  3704  08ED  3000               	movlw	0
  3705  08EE  3DA1               	addwfc	(printf@f+1)^(0+128),f
  3706                           
  3707                           ;doprnt.c: 615: if(*f == '*') {
  3708  08EF  0820               	movf	printf@f^(0+128),w
  3709  08F0  0084               	movwf	4
  3710  08F1  0821               	movf	(printf@f+1)^(0+128),w
  3711  08F2  0085               	movwf	5
  3712  08F3  0012               	moviw fsr0++
  3713  08F4  3A2A               	xorlw	42
  3714  08F5  1D03               	btfss	3,2
  3715  08F6  290A               	goto	l3046
  3716                           
  3717                           ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  3718  08F7  0843               	movf	printf@ap^(0+128),w
  3719  08F8  0086               	movwf	6
  3720  08F9  0187               	clrf	7
  3721  08FA  3F40               	moviw [0]fsr1
  3722  08FB  00D1               	movwf	printf@prec^(0+128)
  3723  08FC  3F41               	moviw [1]fsr1
  3724  08FD  00D2               	movwf	(printf@prec+1)^(0+128)
  3725  08FE  3002               	movlw	2
  3726  08FF  0020               	movlb	0	; select bank0
  3727  0900  00E7               	movwf	??_printf
  3728  0901  0867               	movf	??_printf,w
  3729  0902  0021               	movlb	1	; select bank1
  3730  0903  07C3               	addwf	printf@ap^(0+128),f
  3731                           
  3732                           ;doprnt.c: 617: f++;
  3733  0904  3001               	movlw	1
  3734  0905  07A0               	addwf	printf@f^(0+128),f
  3735  0906  3000               	movlw	0
  3736  0907  3DA1               	addwfc	(printf@f+1)^(0+128),f
  3737  0908                     L26:	
  3738                           
  3739                           ;doprnt.c: 618: } else
  3740  0908  3180  28CA         	goto	l3100
  3741  090A                     l3046:	
  3742                           
  3743                           ;doprnt.c: 620: {
  3744                           ;doprnt.c: 621: prec = 0;
  3745  090A  01D1               	clrf	printf@prec^(0+128)
  3746  090B  01D2               	clrf	(printf@prec+1)^(0+128)
  3747  090C                     l3052:	
  3748                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  3749                           
  3750  090C  0820               	movf	printf@f^(0+128),w
  3751  090D  0084               	movwf	4
  3752  090E  0821               	movf	(printf@f+1)^(0+128),w
  3753  090F  0085               	movwf	5
  3754  0910  0800               	movf	0,w	;code access
  3755  0911  319E  2679  3188   	fcall	_isdigit
  3756  0914  1C03               	btfss	3,0
  3757  0915  2908               	goto	L26
  3758                           
  3759                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  3760  0916  0021               	movlb	1	; select bank1
  3761  0917  0820               	movf	printf@f^(0+128),w
  3762  0918  0084               	movwf	4
  3763  0919  0821               	movf	(printf@f+1)^(0+128),w
  3764  091A  0085               	movwf	5
  3765  091B  0800               	movf	0,w	;code access
  3766  091C  0020               	movlb	0	; select bank0
  3767  091D  00E7               	movwf	??_printf
  3768  091E  01E8               	clrf	??_printf+1
  3769  091F  0021               	movlb	1	; select bank1
  3770  0920  0852               	movf	(printf@prec+1)^(0+128),w
  3771  0921  0020               	movlb	0	; select bank0
  3772  0922  00B1               	movwf	___wmul@multiplier+1
  3773  0923  0021               	movlb	1	; select bank1
  3774  0924  0851               	movf	printf@prec^(0+128),w
  3775  0925  0020               	movlb	0	; select bank0
  3776  0926  00B0               	movwf	___wmul@multiplier
  3777  0927  300A               	movlw	10
  3778  0928  00B2               	movwf	___wmul@multiplicand
  3779  0929  3000               	movlw	0
  3780  092A  00B3               	movwf	___wmul@multiplicand+1
  3781  092B  319F  270B  3188   	fcall	___wmul
  3782  092E  0020               	movlb	0	; select bank0
  3783  092F  0867               	movf	??_printf,w
  3784  0930  0730               	addwf	?___wmul,w
  3785  0931  00E9               	movwf	??_printf+2
  3786  0932  0868               	movf	??_printf+1,w
  3787  0933  3D31               	addwfc	?___wmul+1,w
  3788  0934  00EA               	movwf	??_printf+3
  3789  0935  0869               	movf	??_printf+2,w
  3790  0936  3ED0               	addlw	208
  3791  0937  0021               	movlb	1	; select bank1
  3792  0938  00D1               	movwf	printf@prec^(0+128)
  3793  0939  30FF               	movlw	255
  3794  093A  0020               	movlb	0	; select bank0
  3795  093B  3D6A               	addwfc	??_printf+3,w
  3796  093C  0021               	movlb	1	; select bank1
  3797  093D  00D2               	movwf	(printf@prec+1)^(0+128)
  3798  093E  3001               	movlw	1
  3799  093F  07A0               	addwf	printf@f^(0+128),f
  3800  0940  3000               	movlw	0
  3801  0941  3DA1               	addwfc	(printf@f+1)^(0+128),f
  3802  0942  290C               	goto	l3052
  3803  0943                     L25:	
  3804  0943                     L24:	
  3805  0943  3180  2842         	ljmp	l3054
  3806                           
  3807                           	psect	text16
  3808  0A62                     __ptext16:	
  3809 ;; *************** function _scale *****************
  3810 ;; Defined at:
  3811 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  3812 ;; Parameters:    Size  Location     Type
  3813 ;;  scl             1    wreg     char 
  3814 ;; Auto vars:     Size  Location     Type
  3815 ;;  scl             1   46[BANK0 ] char 
  3816 ;; Return value:  Size  Location     Type
  3817 ;;                  3   38[BANK0 ] char 
  3818 ;; Registers used:
  3819 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3820 ;; Tracked objects:
  3821 ;;		On entry : 0/0
  3822 ;;		On exit  : 0/0
  3823 ;;		Unchanged: 0/0
  3824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3825 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3826 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3827 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3828 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3829 ;;Total ram usage:        9 bytes
  3830 ;; Hardware stack levels used:    1
  3831 ;; Hardware stack levels required when called:    6
  3832 ;; This function calls:
  3833 ;;		___awdiv
  3834 ;;		___awmod
  3835 ;;		___ftmul
  3836 ;;		___wmul
  3837 ;; This function is called by:
  3838 ;;		_printf
  3839 ;; This function uses a non-reentrant model
  3840 ;;
  3841                           
  3842                           
  3843                           ;psect for function _scale
  3844  0A62                     _scale:	
  3845                           
  3846                           ;incstack = 0
  3847                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3848                           ;scale@scl stored from wreg
  3849  0A62  0020               	movlb	0	; select bank0
  3850  0A63  00CE               	movwf	scale@scl
  3851                           
  3852                           ;doprnt.c: 428: if(scl < 0) {
  3853  0A64  1FCE               	btfss	scale@scl,7
  3854  0A65  2B88               	goto	l2718
  3855                           
  3856                           ;doprnt.c: 429: scl = -scl;
  3857  0A66  09CE               	comf	scale@scl,f
  3858  0A67  0ACE               	incf	scale@scl,f
  3859                           
  3860                           ;doprnt.c: 430: if(scl>=110)
  3861  0A68  084E               	movf	scale@scl,w
  3862  0A69  3A80               	xorlw	128
  3863  0A6A  3E12               	addlw	-238
  3864  0A6B  1C03               	skipc
  3865  0A6C  2B0C               	goto	l2708
  3866                           
  3867                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3868  0A6D  300A               	movlw	10
  3869  0A6E  00A7               	movwf	___awdiv@divisor
  3870  0A6F  3000               	movlw	0
  3871  0A70  00A8               	movwf	___awdiv@divisor+1
  3872  0A71  084E               	movf	scale@scl,w
  3873  0A72  00A2               	movwf	___awmod@dividend
  3874  0A73  01A3               	clrf	___awmod@dividend+1
  3875  0A74  1BA2               	btfsc	___awmod@dividend,7
  3876  0A75  03A3               	decf	___awmod@dividend+1,f
  3877  0A76  3064               	movlw	100
  3878  0A77  00A0               	movwf	___awmod@divisor
  3879  0A78  3000               	movlw	0
  3880  0A79  00A1               	movwf	___awmod@divisor+1
  3881  0A7A  3192  2264  318A   	fcall	___awmod
  3882  0A7D  0020               	movlb	0	; select bank0
  3883  0A7E  0821               	movf	?___awmod+1,w
  3884  0A7F  00AA               	movwf	___awdiv@dividend+1
  3885  0A80  0820               	movf	?___awmod,w
  3886  0A81  00A9               	movwf	___awdiv@dividend
  3887  0A82  3193  2348  318A   	fcall	___awdiv
  3888  0A85  0020               	movlb	0	; select bank0
  3889  0A86  0827               	movf	?___awdiv,w
  3890  0A87  3E09               	addlw	9
  3891  0A88  00B0               	movwf	___wmul@multiplier
  3892  0A89  3000               	movlw	0
  3893  0A8A  3D28               	addwfc	?___awdiv+1,w
  3894  0A8B  00B1               	movwf	___wmul@multiplier+1
  3895  0A8C  3003               	movlw	3
  3896  0A8D  00B2               	movwf	___wmul@multiplicand
  3897  0A8E  3000               	movlw	0
  3898  0A8F  00B3               	movwf	___wmul@multiplicand+1
  3899  0A90  319F  270B  318A   	fcall	___wmul
  3900  0A93  0020               	movlb	0	; select bank0
  3901  0A94  0831               	movf	?___wmul+1,w
  3902  0A95  0085               	movwf	5
  3903  0A96  0830               	movf	?___wmul,w
  3904  0A97  0084               	movwf	4
  3905  0A98  3058               	movlw	low (__npowers_| (0+32768))
  3906  0A99  0784               	addwf	4,f
  3907  0A9A  3090               	movlw	high (__npowers_| (0+32768))
  3908  0A9B  3D85               	addwfc	5,f
  3909  0A9C  3F00               	moviw [0]fsr0
  3910  0A9D  00B6               	movwf	___ftmul@f1
  3911  0A9E  3F01               	moviw [1]fsr0
  3912  0A9F  00B7               	movwf	___ftmul@f1+1
  3913  0AA0  3F02               	moviw [2]fsr0
  3914  0AA1  00B8               	movwf	___ftmul@f1+2
  3915  0AA2  3064               	movlw	100
  3916  0AA3  00A7               	movwf	___awdiv@divisor
  3917  0AA4  3000               	movlw	0
  3918  0AA5  00A8               	movwf	___awdiv@divisor+1
  3919  0AA6  084E               	movf	scale@scl,w
  3920  0AA7  00A9               	movwf	___awdiv@dividend
  3921  0AA8  01AA               	clrf	___awdiv@dividend+1
  3922  0AA9  1BA9               	btfsc	___awdiv@dividend,7
  3923  0AAA  03AA               	decf	___awdiv@dividend+1,f
  3924  0AAB  3193  2348  318A   	fcall	___awdiv
  3925  0AAE  0020               	movlb	0	; select bank0
  3926  0AAF  0827               	movf	?___awdiv,w
  3927  0AB0  3E12               	addlw	18
  3928  0AB1  00B0               	movwf	___wmul@multiplier
  3929  0AB2  3000               	movlw	0
  3930  0AB3  3D28               	addwfc	?___awdiv+1,w
  3931  0AB4  00B1               	movwf	___wmul@multiplier+1
  3932  0AB5  3003               	movlw	3
  3933  0AB6  00B2               	movwf	___wmul@multiplicand
  3934  0AB7  3000               	movlw	0
  3935  0AB8  00B3               	movwf	___wmul@multiplicand+1
  3936  0AB9  319F  270B  318A   	fcall	___wmul
  3937  0ABC  0020               	movlb	0	; select bank0
  3938  0ABD  0831               	movf	?___wmul+1,w
  3939  0ABE  0085               	movwf	5
  3940  0ABF  0830               	movf	?___wmul,w
  3941  0AC0  0084               	movwf	4
  3942  0AC1  3058               	movlw	low (__npowers_| (0+32768))
  3943  0AC2  0784               	addwf	4,f
  3944  0AC3  3090               	movlw	high (__npowers_| (0+32768))
  3945  0AC4  3D85               	addwfc	5,f
  3946  0AC5  3F00               	moviw [0]fsr0
  3947  0AC6  00B9               	movwf	___ftmul@f2
  3948  0AC7  3F01               	moviw [1]fsr0
  3949  0AC8  00BA               	movwf	___ftmul@f2+1
  3950  0AC9  3F02               	moviw [2]fsr0
  3951  0ACA  00BB               	movwf	___ftmul@f2+2
  3952  0ACB  3195  25A0  318A   	fcall	___ftmul
  3953  0ACE  0020               	movlb	0	; select bank0
  3954  0ACF  0836               	movf	?___ftmul,w
  3955  0AD0  00CB               	movwf	_scale$1252
  3956  0AD1  0837               	movf	?___ftmul+1,w
  3957  0AD2  00CC               	movwf	_scale$1252+1
  3958  0AD3  0838               	movf	?___ftmul+2,w
  3959  0AD4  00CD               	movwf	_scale$1252+2
  3960                           
  3961                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3962  0AD5  084E               	movf	scale@scl,w
  3963  0AD6  00A2               	movwf	___awmod@dividend
  3964  0AD7  01A3               	clrf	___awmod@dividend+1
  3965  0AD8  1BA2               	btfsc	___awmod@dividend,7
  3966  0AD9  03A3               	decf	___awmod@dividend+1,f
  3967  0ADA  300A               	movlw	10
  3968  0ADB  00A0               	movwf	___awmod@divisor
  3969  0ADC  3000               	movlw	0
  3970  0ADD  00A1               	movwf	___awmod@divisor+1
  3971  0ADE  3192  2264  318A   	fcall	___awmod
  3972  0AE1  0020               	movlb	0	; select bank0
  3973  0AE2  0821               	movf	?___awmod+1,w
  3974  0AE3  00B1               	movwf	___wmul@multiplier+1
  3975  0AE4  0820               	movf	?___awmod,w
  3976  0AE5  00B0               	movwf	___wmul@multiplier
  3977  0AE6  3003               	movlw	3
  3978  0AE7  00B2               	movwf	___wmul@multiplicand
  3979  0AE8  3000               	movlw	0
  3980  0AE9  00B3               	movwf	___wmul@multiplicand+1
  3981  0AEA  319F  270B  318A   	fcall	___wmul
  3982  0AED  0020               	movlb	0	; select bank0
  3983  0AEE  0831               	movf	?___wmul+1,w
  3984  0AEF  0085               	movwf	5
  3985  0AF0  0830               	movf	?___wmul,w
  3986  0AF1  0084               	movwf	4
  3987  0AF2  3058               	movlw	low (__npowers_| (0+32768))
  3988  0AF3  0784               	addwf	4,f
  3989  0AF4  3090               	movlw	high (__npowers_| (0+32768))
  3990  0AF5  3D85               	addwfc	5,f
  3991  0AF6  3F00               	moviw [0]fsr0
  3992  0AF7  00B6               	movwf	___ftmul@f1
  3993  0AF8  3F01               	moviw [1]fsr0
  3994  0AF9  00B7               	movwf	___ftmul@f1+1
  3995  0AFA  3F02               	moviw [2]fsr0
  3996  0AFB  00B8               	movwf	___ftmul@f1+2
  3997  0AFC  084B               	movf	_scale$1252,w
  3998  0AFD  00B9               	movwf	___ftmul@f2
  3999  0AFE  084C               	movf	_scale$1252+1,w
  4000  0AFF  00BA               	movwf	___ftmul@f2+1
  4001  0B00  084D               	movf	_scale$1252+2,w
  4002  0B01  00BB               	movwf	___ftmul@f2+2
  4003  0B02  3195  25A0         	fcall	___ftmul
  4004  0B04  0020               	movlb	0	; select bank0
  4005  0B05  0836               	movf	?___ftmul,w
  4006  0B06  00C6               	movwf	?_scale
  4007  0B07  0837               	movf	?___ftmul+1,w
  4008  0B08  00C7               	movwf	?_scale+1
  4009  0B09  0838               	movf	?___ftmul+2,w
  4010  0B0A  00C8               	movwf	?_scale+2
  4011  0B0B  0008               	return
  4012  0B0C                     l2708:	
  4013                           
  4014                           ;doprnt.c: 432: else if(scl > 10)
  4015  0B0C  084E               	movf	scale@scl,w
  4016  0B0D  3A80               	xorlw	128
  4017  0B0E  3E75               	addlw	-139
  4018  0B0F  1C03               	skipc
  4019  0B10  2B6B               	goto	l2714
  4020                           
  4021                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4022  0B11  084E               	movf	scale@scl,w
  4023  0B12  00A2               	movwf	___awmod@dividend
  4024  0B13  01A3               	clrf	___awmod@dividend+1
  4025  0B14  1BA2               	btfsc	___awmod@dividend,7
  4026  0B15  03A3               	decf	___awmod@dividend+1,f
  4027  0B16  300A               	movlw	10
  4028  0B17  00A0               	movwf	___awmod@divisor
  4029  0B18  3000               	movlw	0
  4030  0B19  00A1               	movwf	___awmod@divisor+1
  4031  0B1A  3192  2264  318A   	fcall	___awmod
  4032  0B1D  0020               	movlb	0	; select bank0
  4033  0B1E  0821               	movf	?___awmod+1,w
  4034  0B1F  00B1               	movwf	___wmul@multiplier+1
  4035  0B20  0820               	movf	?___awmod,w
  4036  0B21  00B0               	movwf	___wmul@multiplier
  4037  0B22  3003               	movlw	3
  4038  0B23  00B2               	movwf	___wmul@multiplicand
  4039  0B24  3000               	movlw	0
  4040  0B25  00B3               	movwf	___wmul@multiplicand+1
  4041  0B26  319F  270B  318A   	fcall	___wmul
  4042  0B29  0020               	movlb	0	; select bank0
  4043  0B2A  0831               	movf	?___wmul+1,w
  4044  0B2B  0085               	movwf	5
  4045  0B2C  0830               	movf	?___wmul,w
  4046  0B2D  0084               	movwf	4
  4047  0B2E  3058               	movlw	low (__npowers_| (0+32768))
  4048  0B2F  0784               	addwf	4,f
  4049  0B30  3090               	movlw	high (__npowers_| (0+32768))
  4050  0B31  3D85               	addwfc	5,f
  4051  0B32  3F00               	moviw [0]fsr0
  4052  0B33  00B6               	movwf	___ftmul@f1
  4053  0B34  3F01               	moviw [1]fsr0
  4054  0B35  00B7               	movwf	___ftmul@f1+1
  4055  0B36  3F02               	moviw [2]fsr0
  4056  0B37  00B8               	movwf	___ftmul@f1+2
  4057  0B38  300A               	movlw	10
  4058  0B39  00A7               	movwf	___awdiv@divisor
  4059  0B3A  3000               	movlw	0
  4060  0B3B  00A8               	movwf	___awdiv@divisor+1
  4061  0B3C  084E               	movf	scale@scl,w
  4062  0B3D  00A9               	movwf	___awdiv@dividend
  4063  0B3E  01AA               	clrf	___awdiv@dividend+1
  4064  0B3F  1BA9               	btfsc	___awdiv@dividend,7
  4065  0B40  03AA               	decf	___awdiv@dividend+1,f
  4066  0B41  3193  2348  318A   	fcall	___awdiv
  4067  0B44  0020               	movlb	0	; select bank0
  4068  0B45  0827               	movf	?___awdiv,w
  4069  0B46  3E09               	addlw	9
  4070  0B47  00B0               	movwf	___wmul@multiplier
  4071  0B48  3000               	movlw	0
  4072  0B49  3D28               	addwfc	?___awdiv+1,w
  4073  0B4A  00B1               	movwf	___wmul@multiplier+1
  4074  0B4B  3003               	movlw	3
  4075  0B4C  00B2               	movwf	___wmul@multiplicand
  4076  0B4D  3000               	movlw	0
  4077  0B4E  00B3               	movwf	___wmul@multiplicand+1
  4078  0B4F  319F  270B  318A   	fcall	___wmul
  4079  0B52  0020               	movlb	0	; select bank0
  4080  0B53  0831               	movf	?___wmul+1,w
  4081  0B54  0085               	movwf	5
  4082  0B55  0830               	movf	?___wmul,w
  4083  0B56  0084               	movwf	4
  4084  0B57  3058               	movlw	low (__npowers_| (0+32768))
  4085  0B58  0784               	addwf	4,f
  4086  0B59  3090               	movlw	high (__npowers_| (0+32768))
  4087  0B5A  3D85               	addwfc	5,f
  4088  0B5B  3F00               	moviw [0]fsr0
  4089  0B5C  00B9               	movwf	___ftmul@f2
  4090  0B5D  3F01               	moviw [1]fsr0
  4091  0B5E  00BA               	movwf	___ftmul@f2+1
  4092  0B5F  3F02               	moviw [2]fsr0
  4093  0B60  00BB               	movwf	___ftmul@f2+2
  4094  0B61  3195  25A0         	fcall	___ftmul
  4095  0B63  0020               	movlb	0	; select bank0
  4096  0B64  0836               	movf	?___ftmul,w
  4097  0B65  00C6               	movwf	?_scale
  4098  0B66  0837               	movf	?___ftmul+1,w
  4099  0B67  00C7               	movwf	?_scale+1
  4100  0B68  0838               	movf	?___ftmul+2,w
  4101  0B69  00C8               	movwf	?_scale+2
  4102  0B6A  0008               	return
  4103  0B6B                     l2714:	
  4104                           
  4105                           ;doprnt.c: 434: return _npowers_[scl];
  4106  0B6B  084E               	movf	scale@scl,w
  4107  0B6C  00C9               	movwf	??_scale
  4108  0B6D  01CA               	clrf	??_scale+1
  4109  0B6E  0849               	movf	??_scale,w
  4110  0B6F  00B0               	movwf	___wmul@multiplier
  4111  0B70  084A               	movf	??_scale+1,w
  4112  0B71  00B1               	movwf	___wmul@multiplier+1
  4113  0B72  3003               	movlw	3
  4114  0B73  00B2               	movwf	___wmul@multiplicand
  4115  0B74  3000               	movlw	0
  4116  0B75  00B3               	movwf	___wmul@multiplicand+1
  4117  0B76  319F  270B         	fcall	___wmul
  4118  0B78  0020               	movlb	0	; select bank0
  4119  0B79  0831               	movf	?___wmul+1,w
  4120  0B7A  0085               	movwf	5
  4121  0B7B  0830               	movf	?___wmul,w
  4122  0B7C  0084               	movwf	4
  4123  0B7D  3058               	movlw	low (__npowers_| (0+32768))
  4124  0B7E  0784               	addwf	4,f
  4125  0B7F  3090               	movlw	high (__npowers_| (0+32768))
  4126  0B80  3D85               	addwfc	5,f
  4127  0B81  3F00               	moviw [0]fsr0
  4128  0B82  00C6               	movwf	?_scale
  4129  0B83  3F01               	moviw [1]fsr0
  4130  0B84  00C7               	movwf	?_scale+1
  4131  0B85  3F02               	moviw [2]fsr0
  4132  0B86  00C8               	movwf	?_scale+2
  4133  0B87  0008               	return
  4134  0B88                     l2718:	
  4135                           
  4136                           ;doprnt.c: 435: }
  4137                           ;doprnt.c: 436: if(scl>=110)
  4138  0B88  084E               	movf	scale@scl,w
  4139  0B89  3A80               	xorlw	128
  4140  0B8A  3E12               	addlw	-238
  4141  0B8B  1C03               	skipc
  4142  0B8C  2C2C               	goto	l2726
  4143                           
  4144                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4145  0B8D  300A               	movlw	10
  4146  0B8E  00A7               	movwf	___awdiv@divisor
  4147  0B8F  3000               	movlw	0
  4148  0B90  00A8               	movwf	___awdiv@divisor+1
  4149  0B91  084E               	movf	scale@scl,w
  4150  0B92  00A2               	movwf	___awmod@dividend
  4151  0B93  01A3               	clrf	___awmod@dividend+1
  4152  0B94  1BA2               	btfsc	___awmod@dividend,7
  4153  0B95  03A3               	decf	___awmod@dividend+1,f
  4154  0B96  3064               	movlw	100
  4155  0B97  00A0               	movwf	___awmod@divisor
  4156  0B98  3000               	movlw	0
  4157  0B99  00A1               	movwf	___awmod@divisor+1
  4158  0B9A  3192  2264  318A   	fcall	___awmod
  4159  0B9D  0020               	movlb	0	; select bank0
  4160  0B9E  0821               	movf	?___awmod+1,w
  4161  0B9F  00AA               	movwf	___awdiv@dividend+1
  4162  0BA0  0820               	movf	?___awmod,w
  4163  0BA1  00A9               	movwf	___awdiv@dividend
  4164  0BA2  3193  2348  318A   	fcall	___awdiv
  4165  0BA5  0020               	movlb	0	; select bank0
  4166  0BA6  0827               	movf	?___awdiv,w
  4167  0BA7  3E09               	addlw	9
  4168  0BA8  00B0               	movwf	___wmul@multiplier
  4169  0BA9  3000               	movlw	0
  4170  0BAA  3D28               	addwfc	?___awdiv+1,w
  4171  0BAB  00B1               	movwf	___wmul@multiplier+1
  4172  0BAC  3003               	movlw	3
  4173  0BAD  00B2               	movwf	___wmul@multiplicand
  4174  0BAE  3000               	movlw	0
  4175  0BAF  00B3               	movwf	___wmul@multiplicand+1
  4176  0BB0  319F  270B  318A   	fcall	___wmul
  4177  0BB3  0020               	movlb	0	; select bank0
  4178  0BB4  0831               	movf	?___wmul+1,w
  4179  0BB5  0085               	movwf	5
  4180  0BB6  0830               	movf	?___wmul,w
  4181  0BB7  0084               	movwf	4
  4182  0BB8  307F               	movlw	low (__powers_| (0+32768))
  4183  0BB9  0784               	addwf	4,f
  4184  0BBA  3090               	movlw	high (__powers_| (0+32768))
  4185  0BBB  3D85               	addwfc	5,f
  4186  0BBC  3F00               	moviw [0]fsr0
  4187  0BBD  00B6               	movwf	___ftmul@f1
  4188  0BBE  3F01               	moviw [1]fsr0
  4189  0BBF  00B7               	movwf	___ftmul@f1+1
  4190  0BC0  3F02               	moviw [2]fsr0
  4191  0BC1  00B8               	movwf	___ftmul@f1+2
  4192  0BC2  3064               	movlw	100
  4193  0BC3  00A7               	movwf	___awdiv@divisor
  4194  0BC4  3000               	movlw	0
  4195  0BC5  00A8               	movwf	___awdiv@divisor+1
  4196  0BC6  084E               	movf	scale@scl,w
  4197  0BC7  00A9               	movwf	___awdiv@dividend
  4198  0BC8  01AA               	clrf	___awdiv@dividend+1
  4199  0BC9  1BA9               	btfsc	___awdiv@dividend,7
  4200  0BCA  03AA               	decf	___awdiv@dividend+1,f
  4201  0BCB  3193  2348  318A   	fcall	___awdiv
  4202  0BCE  0020               	movlb	0	; select bank0
  4203  0BCF  0827               	movf	?___awdiv,w
  4204  0BD0  3E12               	addlw	18
  4205  0BD1  00B0               	movwf	___wmul@multiplier
  4206  0BD2  3000               	movlw	0
  4207  0BD3  3D28               	addwfc	?___awdiv+1,w
  4208  0BD4  00B1               	movwf	___wmul@multiplier+1
  4209  0BD5  3003               	movlw	3
  4210  0BD6  00B2               	movwf	___wmul@multiplicand
  4211  0BD7  3000               	movlw	0
  4212  0BD8  00B3               	movwf	___wmul@multiplicand+1
  4213  0BD9  319F  270B  318A   	fcall	___wmul
  4214  0BDC  0020               	movlb	0	; select bank0
  4215  0BDD  0831               	movf	?___wmul+1,w
  4216  0BDE  0085               	movwf	5
  4217  0BDF  0830               	movf	?___wmul,w
  4218  0BE0  0084               	movwf	4
  4219  0BE1  307F               	movlw	low (__powers_| (0+32768))
  4220  0BE2  0784               	addwf	4,f
  4221  0BE3  3090               	movlw	high (__powers_| (0+32768))
  4222  0BE4  3D85               	addwfc	5,f
  4223  0BE5  3F00               	moviw [0]fsr0
  4224  0BE6  00B9               	movwf	___ftmul@f2
  4225  0BE7  3F01               	moviw [1]fsr0
  4226  0BE8  00BA               	movwf	___ftmul@f2+1
  4227  0BE9  3F02               	moviw [2]fsr0
  4228  0BEA  00BB               	movwf	___ftmul@f2+2
  4229  0BEB  3195  25A0  318A   	fcall	___ftmul
  4230  0BEE  0020               	movlb	0	; select bank0
  4231  0BEF  0836               	movf	?___ftmul,w
  4232  0BF0  00CB               	movwf	_scale$1252
  4233  0BF1  0837               	movf	?___ftmul+1,w
  4234  0BF2  00CC               	movwf	_scale$1252+1
  4235  0BF3  0838               	movf	?___ftmul+2,w
  4236  0BF4  00CD               	movwf	_scale$1252+2
  4237                           
  4238                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4239  0BF5  084E               	movf	scale@scl,w
  4240  0BF6  00A2               	movwf	___awmod@dividend
  4241  0BF7  01A3               	clrf	___awmod@dividend+1
  4242  0BF8  1BA2               	btfsc	___awmod@dividend,7
  4243  0BF9  03A3               	decf	___awmod@dividend+1,f
  4244  0BFA  300A               	movlw	10
  4245  0BFB  00A0               	movwf	___awmod@divisor
  4246  0BFC  3000               	movlw	0
  4247  0BFD  00A1               	movwf	___awmod@divisor+1
  4248  0BFE  3192  2264  318A   	fcall	___awmod
  4249  0C01  0020               	movlb	0	; select bank0
  4250  0C02  0821               	movf	?___awmod+1,w
  4251  0C03  00B1               	movwf	___wmul@multiplier+1
  4252  0C04  0820               	movf	?___awmod,w
  4253  0C05  00B0               	movwf	___wmul@multiplier
  4254  0C06  3003               	movlw	3
  4255  0C07  00B2               	movwf	___wmul@multiplicand
  4256  0C08  3000               	movlw	0
  4257  0C09  00B3               	movwf	___wmul@multiplicand+1
  4258  0C0A  319F  270B  318A   	fcall	___wmul
  4259  0C0D  0020               	movlb	0	; select bank0
  4260  0C0E  0831               	movf	?___wmul+1,w
  4261  0C0F  0085               	movwf	5
  4262  0C10  0830               	movf	?___wmul,w
  4263  0C11  0084               	movwf	4
  4264  0C12  307F               	movlw	low (__powers_| (0+32768))
  4265  0C13  0784               	addwf	4,f
  4266  0C14  3090               	movlw	high (__powers_| (0+32768))
  4267  0C15  3D85               	addwfc	5,f
  4268  0C16  3F00               	moviw [0]fsr0
  4269  0C17  00B6               	movwf	___ftmul@f1
  4270  0C18  3F01               	moviw [1]fsr0
  4271  0C19  00B7               	movwf	___ftmul@f1+1
  4272  0C1A  3F02               	moviw [2]fsr0
  4273  0C1B  00B8               	movwf	___ftmul@f1+2
  4274  0C1C  084B               	movf	_scale$1252,w
  4275  0C1D  00B9               	movwf	___ftmul@f2
  4276  0C1E  084C               	movf	_scale$1252+1,w
  4277  0C1F  00BA               	movwf	___ftmul@f2+1
  4278  0C20  084D               	movf	_scale$1252+2,w
  4279  0C21  00BB               	movwf	___ftmul@f2+2
  4280  0C22  3195  25A0         	fcall	___ftmul
  4281  0C24  0020               	movlb	0	; select bank0
  4282  0C25  0836               	movf	?___ftmul,w
  4283  0C26  00C6               	movwf	?_scale
  4284  0C27  0837               	movf	?___ftmul+1,w
  4285  0C28  00C7               	movwf	?_scale+1
  4286  0C29  0838               	movf	?___ftmul+2,w
  4287  0C2A  00C8               	movwf	?_scale+2
  4288  0C2B  0008               	return
  4289  0C2C                     l2726:	
  4290                           
  4291                           ;doprnt.c: 438: else if(scl > 10)
  4292  0C2C  084E               	movf	scale@scl,w
  4293  0C2D  3A80               	xorlw	128
  4294  0C2E  3E75               	addlw	-139
  4295  0C2F  1C03               	skipc
  4296  0C30  2C8B               	goto	l2732
  4297                           
  4298                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4299  0C31  084E               	movf	scale@scl,w
  4300  0C32  00A2               	movwf	___awmod@dividend
  4301  0C33  01A3               	clrf	___awmod@dividend+1
  4302  0C34  1BA2               	btfsc	___awmod@dividend,7
  4303  0C35  03A3               	decf	___awmod@dividend+1,f
  4304  0C36  300A               	movlw	10
  4305  0C37  00A0               	movwf	___awmod@divisor
  4306  0C38  3000               	movlw	0
  4307  0C39  00A1               	movwf	___awmod@divisor+1
  4308  0C3A  3192  2264  318A   	fcall	___awmod
  4309  0C3D  0020               	movlb	0	; select bank0
  4310  0C3E  0821               	movf	?___awmod+1,w
  4311  0C3F  00B1               	movwf	___wmul@multiplier+1
  4312  0C40  0820               	movf	?___awmod,w
  4313  0C41  00B0               	movwf	___wmul@multiplier
  4314  0C42  3003               	movlw	3
  4315  0C43  00B2               	movwf	___wmul@multiplicand
  4316  0C44  3000               	movlw	0
  4317  0C45  00B3               	movwf	___wmul@multiplicand+1
  4318  0C46  319F  270B  318A   	fcall	___wmul
  4319  0C49  0020               	movlb	0	; select bank0
  4320  0C4A  0831               	movf	?___wmul+1,w
  4321  0C4B  0085               	movwf	5
  4322  0C4C  0830               	movf	?___wmul,w
  4323  0C4D  0084               	movwf	4
  4324  0C4E  307F               	movlw	low (__powers_| (0+32768))
  4325  0C4F  0784               	addwf	4,f
  4326  0C50  3090               	movlw	high (__powers_| (0+32768))
  4327  0C51  3D85               	addwfc	5,f
  4328  0C52  3F00               	moviw [0]fsr0
  4329  0C53  00B6               	movwf	___ftmul@f1
  4330  0C54  3F01               	moviw [1]fsr0
  4331  0C55  00B7               	movwf	___ftmul@f1+1
  4332  0C56  3F02               	moviw [2]fsr0
  4333  0C57  00B8               	movwf	___ftmul@f1+2
  4334  0C58  300A               	movlw	10
  4335  0C59  00A7               	movwf	___awdiv@divisor
  4336  0C5A  3000               	movlw	0
  4337  0C5B  00A8               	movwf	___awdiv@divisor+1
  4338  0C5C  084E               	movf	scale@scl,w
  4339  0C5D  00A9               	movwf	___awdiv@dividend
  4340  0C5E  01AA               	clrf	___awdiv@dividend+1
  4341  0C5F  1BA9               	btfsc	___awdiv@dividend,7
  4342  0C60  03AA               	decf	___awdiv@dividend+1,f
  4343  0C61  3193  2348  318A   	fcall	___awdiv
  4344  0C64  0020               	movlb	0	; select bank0
  4345  0C65  0827               	movf	?___awdiv,w
  4346  0C66  3E09               	addlw	9
  4347  0C67  00B0               	movwf	___wmul@multiplier
  4348  0C68  3000               	movlw	0
  4349  0C69  3D28               	addwfc	?___awdiv+1,w
  4350  0C6A  00B1               	movwf	___wmul@multiplier+1
  4351  0C6B  3003               	movlw	3
  4352  0C6C  00B2               	movwf	___wmul@multiplicand
  4353  0C6D  3000               	movlw	0
  4354  0C6E  00B3               	movwf	___wmul@multiplicand+1
  4355  0C6F  319F  270B  318A   	fcall	___wmul
  4356  0C72  0020               	movlb	0	; select bank0
  4357  0C73  0831               	movf	?___wmul+1,w
  4358  0C74  0085               	movwf	5
  4359  0C75  0830               	movf	?___wmul,w
  4360  0C76  0084               	movwf	4
  4361  0C77  307F               	movlw	low (__powers_| (0+32768))
  4362  0C78  0784               	addwf	4,f
  4363  0C79  3090               	movlw	high (__powers_| (0+32768))
  4364  0C7A  3D85               	addwfc	5,f
  4365  0C7B  3F00               	moviw [0]fsr0
  4366  0C7C  00B9               	movwf	___ftmul@f2
  4367  0C7D  3F01               	moviw [1]fsr0
  4368  0C7E  00BA               	movwf	___ftmul@f2+1
  4369  0C7F  3F02               	moviw [2]fsr0
  4370  0C80  00BB               	movwf	___ftmul@f2+2
  4371  0C81  3195  25A0         	fcall	___ftmul
  4372  0C83  0020               	movlb	0	; select bank0
  4373  0C84  0836               	movf	?___ftmul,w
  4374  0C85  00C6               	movwf	?_scale
  4375  0C86  0837               	movf	?___ftmul+1,w
  4376  0C87  00C7               	movwf	?_scale+1
  4377  0C88  0838               	movf	?___ftmul+2,w
  4378  0C89  00C8               	movwf	?_scale+2
  4379  0C8A  0008               	return
  4380  0C8B                     l2732:	
  4381                           
  4382                           ;doprnt.c: 440: return _powers_[scl];
  4383  0C8B  084E               	movf	scale@scl,w
  4384  0C8C  00C9               	movwf	??_scale
  4385  0C8D  01CA               	clrf	??_scale+1
  4386  0C8E  0849               	movf	??_scale,w
  4387  0C8F  00B0               	movwf	___wmul@multiplier
  4388  0C90  084A               	movf	??_scale+1,w
  4389  0C91  00B1               	movwf	___wmul@multiplier+1
  4390  0C92  3003               	movlw	3
  4391  0C93  00B2               	movwf	___wmul@multiplicand
  4392  0C94  3000               	movlw	0
  4393  0C95  00B3               	movwf	___wmul@multiplicand+1
  4394  0C96  319F  270B         	fcall	___wmul
  4395  0C98  0020               	movlb	0	; select bank0
  4396  0C99  0831               	movf	?___wmul+1,w
  4397  0C9A  0085               	movwf	5
  4398  0C9B  0830               	movf	?___wmul,w
  4399  0C9C  0084               	movwf	4
  4400  0C9D  307F               	movlw	low (__powers_| (0+32768))
  4401  0C9E  0784               	addwf	4,f
  4402  0C9F  3090               	movlw	high (__powers_| (0+32768))
  4403  0CA0  3D85               	addwfc	5,f
  4404  0CA1  3F00               	moviw [0]fsr0
  4405  0CA2  00C6               	movwf	?_scale
  4406  0CA3  3F01               	moviw [1]fsr0
  4407  0CA4  00C7               	movwf	?_scale+1
  4408  0CA5  3F02               	moviw [2]fsr0
  4409  0CA6  00C8               	movwf	?_scale+2
  4410  0CA7  0008               	return
  4411  0CA8                     __end_of_scale:	
  4412                           
  4413                           	psect	text17
  4414  1E18                     __ptext17:	
  4415 ;; *************** function _putch *****************
  4416 ;; Defined at:
  4417 ;;		line 126 in file "UART.c"
  4418 ;; Parameters:    Size  Location     Type
  4419 ;;  txData          1    wreg     unsigned char 
  4420 ;; Auto vars:     Size  Location     Type
  4421 ;;  txData          1   13[BANK0 ] unsigned char 
  4422 ;; Return value:  Size  Location     Type
  4423 ;;                  1    wreg      void 
  4424 ;; Registers used:
  4425 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4426 ;; Tracked objects:
  4427 ;;		On entry : 0/0
  4428 ;;		On exit  : 0/0
  4429 ;;		Unchanged: 0/0
  4430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4432 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4434 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4435 ;;Total ram usage:        1 bytes
  4436 ;; Hardware stack levels used:    1
  4437 ;; Hardware stack levels required when called:    7
  4438 ;; This function calls:
  4439 ;;		_Send_put
  4440 ;; This function is called by:
  4441 ;;		_printf
  4442 ;; This function uses a non-reentrant model
  4443 ;;
  4444                           
  4445                           
  4446                           ;psect for function _putch
  4447  1E18                     _putch:	
  4448                           
  4449                           ;incstack = 0
  4450                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4451                           ;putch@txData stored from wreg
  4452  1E18  0020               	movlb	0	; select bank0
  4453  1E19  00AD               	movwf	putch@txData
  4454                           
  4455                           ;UART.c: 127: Send_put(txData);
  4456  1E1A  082D               	movf	putch@txData,w
  4457  1E1B  319E  26DA         	fcall	_Send_put
  4458  1E1D  0008               	return
  4459  1E1E                     __end_of_putch:	
  4460                           
  4461                           	psect	text18
  4462  1EDA                     __ptext18:	
  4463 ;; *************** function _Send_put *****************
  4464 ;; Defined at:
  4465 ;;		line 113 in file "UART.c"
  4466 ;; Parameters:    Size  Location     Type
  4467 ;;  _data           1    wreg     unsigned char 
  4468 ;; Auto vars:     Size  Location     Type
  4469 ;;  _data           1   12[BANK0 ] unsigned char 
  4470 ;; Return value:  Size  Location     Type
  4471 ;;                  1    wreg      void 
  4472 ;; Registers used:
  4473 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4474 ;; Tracked objects:
  4475 ;;		On entry : 0/0
  4476 ;;		On exit  : 0/0
  4477 ;;		Unchanged: 0/0
  4478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4480 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4481 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4482 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4483 ;;Total ram usage:        2 bytes
  4484 ;; Hardware stack levels used:    1
  4485 ;; Hardware stack levels required when called:    6
  4486 ;; This function calls:
  4487 ;;		_UART_buff_get
  4488 ;;		_UART_buff_put
  4489 ;; This function is called by:
  4490 ;;		_putch
  4491 ;; This function uses a non-reentrant model
  4492 ;;
  4493                           
  4494                           
  4495                           ;psect for function _Send_put
  4496  1EDA                     _Send_put:	
  4497                           
  4498                           ;incstack = 0
  4499                           ; Regs used in _Send_put: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4500                           ;Send_put@_data stored from wreg
  4501  1EDA  0020               	movlb	0	; select bank0
  4502  1EDB  00AC               	movwf	Send_put@_data
  4503                           
  4504                           ;UART.c: 114: UART_buff_put(&output_buffer, _data);
  4505  1EDC  082C               	movf	Send_put@_data,w
  4506  1EDD  00AB               	movwf	??_Send_put
  4507  1EDE  082B               	movf	??_Send_put,w
  4508  1EDF  00A6               	movwf	UART_buff_put@c
  4509  1EE0  3042               	movlw	(low (_output_buffer| (0+256)))& (0+255)
  4510  1EE1  3195  2510  319E   	fcall	_UART_buff_put
  4511                           
  4512                           ;UART.c: 115: if (Transmit_stall == 1) {
  4513  1EE4  0021               	movlb	1	; select bank1
  4514  1EE5  036D               	decf	_Transmit_stall^(0+128),w
  4515  1EE6  1D03               	btfss	3,2
  4516  1EE7  0008               	return
  4517                           
  4518                           ;UART.c: 116: Transmit_stall = 0;
  4519  1EE8  01ED               	clrf	_Transmit_stall^(0+128)
  4520                           
  4521                           ;UART.c: 117: TXREG = UART_buff_get(&output_buffer);
  4522  1EE9  3042               	movlw	(low (_output_buffer| (0+256)))& (0+255)
  4523  1EEA  3192  22F7         	fcall	_UART_buff_get
  4524  1EEC  0023               	movlb	3	; select bank3
  4525  1EED  009A               	movwf	26	;volatile
  4526                           
  4527                           ;UART.c: 118: PIE1bits.TXIE = 1;
  4528  1EEE  0021               	movlb	1	; select bank1
  4529  1EEF  1611               	bsf	17,4	;volatile
  4530  1EF0  0008               	return
  4531  1EF1                     __end_of_Send_put:	
  4532                           
  4533                           	psect	text19
  4534  1510                     __ptext19:	
  4535 ;; *************** function _UART_buff_put *****************
  4536 ;; Defined at:
  4537 ;;		line 60 in file "UART.c"
  4538 ;; Parameters:    Size  Location     Type
  4539 ;;  _this           1    wreg     PTR struct UART_ring_buf
  4540 ;;		 -> output_buffer(26), input_buffer(26), 
  4541 ;;  c               1    6[BANK0 ] const unsigned char 
  4542 ;; Auto vars:     Size  Location     Type
  4543 ;;  _this           1   10[BANK0 ] PTR struct UART_ring_buf
  4544 ;;		 -> output_buffer(26), input_buffer(26), 
  4545 ;; Return value:  Size  Location     Type
  4546 ;;                  1    wreg      void 
  4547 ;; Registers used:
  4548 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4549 ;; Tracked objects:
  4550 ;;		On entry : 0/0
  4551 ;;		On exit  : 0/0
  4552 ;;		Unchanged: 0/0
  4553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4554 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4555 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4556 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4557 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4558 ;;Total ram usage:        5 bytes
  4559 ;; Hardware stack levels used:    1
  4560 ;; Hardware stack levels required when called:    5
  4561 ;; This function calls:
  4562 ;;		_UART_buff_modulo_inc
  4563 ;; This function is called by:
  4564 ;;		_Send_put
  4565 ;; This function uses a non-reentrant model
  4566 ;;
  4567                           
  4568                           
  4569                           ;psect for function _UART_buff_put
  4570  1510                     _UART_buff_put:	
  4571                           
  4572                           ;incstack = 0
  4573                           ; Regs used in _UART_buff_put: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4574                           ;UART_buff_put@_this stored from wreg
  4575  1510  0020               	movlb	0	; select bank0
  4576  1511  00AA               	movwf	UART_buff_put@_this
  4577                           
  4578                           ;UART.c: 61: if (_this->count < 20) {
  4579  1512  082A               	movf	UART_buff_put@_this,w
  4580  1513  3E18               	addlw	24
  4581  1514  0086               	movwf	6
  4582  1515  3001               	movlw	1	; select bank2/3
  4583  1516  0087               	movwf	7
  4584  1517  3F40               	moviw [0]fsr1
  4585  1518  00A7               	movwf	??_UART_buff_put
  4586  1519  3F41               	moviw [1]fsr1
  4587  151A  00A8               	movwf	??_UART_buff_put+1
  4588  151B  0828               	movf	??_UART_buff_put+1,w
  4589  151C  3A80               	xorlw	128
  4590  151D  00A9               	movwf	??_UART_buff_put+2
  4591  151E  3080               	movlw	128
  4592  151F  0229               	subwf	??_UART_buff_put+2,w
  4593  1520  1D03               	skipz
  4594  1521  2D24               	goto	u2675
  4595  1522  3014               	movlw	20
  4596  1523  0227               	subwf	??_UART_buff_put,w
  4597  1524                     u2675:	
  4598  1524  1803               	skipnc
  4599  1525  2D5B               	goto	l2386
  4600                           
  4601                           ;UART.c: 62: _this->buf[_this->head] = c;
  4602  1526  0020               	movlb	0	; select bank0
  4603  1527  0826               	movf	UART_buff_put@c,w
  4604  1528  00A7               	movwf	??_UART_buff_put
  4605  1529  082A               	movf	UART_buff_put@_this,w
  4606  152A  3E14               	addlw	20
  4607  152B  0086               	movwf	6
  4608  152C  3001               	movlw	1	; select bank2/3
  4609  152D  0087               	movwf	7
  4610  152E  0801               	movf	1,w
  4611  152F  072A               	addwf	UART_buff_put@_this,w
  4612  1530  00A8               	movwf	??_UART_buff_put+1
  4613  1531  0828               	movf	??_UART_buff_put+1,w
  4614  1532  0086               	movwf	6
  4615  1533  3001               	movlw	1	; select bank2/3
  4616  1534  0087               	movwf	7
  4617  1535  0827               	movf	??_UART_buff_put,w
  4618  1536  0081               	movwf	1
  4619                           
  4620                           ;UART.c: 63: _this->head = UART_buff_modulo_inc(_this->head, 20);
  4621  1537  082A               	movf	UART_buff_put@_this,w
  4622  1538  3E14               	addlw	20
  4623  1539  0086               	movwf	6
  4624  153A  3001               	movlw	1	; select bank2/3
  4625  153B  0087               	movwf	7
  4626  153C  3F40               	moviw [0]fsr1
  4627  153D  00A0               	movwf	UART_buff_modulo_inc@value
  4628  153E  3F41               	moviw [1]fsr1
  4629  153F  00A1               	movwf	UART_buff_modulo_inc@value+1
  4630  1540  3014               	movlw	20
  4631  1541  00A2               	movwf	UART_buff_modulo_inc@modulus
  4632  1542  3000               	movlw	0
  4633  1543  00A3               	movwf	UART_buff_modulo_inc@modulus+1
  4634  1544  319E  26AE         	fcall	_UART_buff_modulo_inc
  4635  1546  0020               	movlb	0	; select bank0
  4636  1547  082A               	movf	UART_buff_put@_this,w
  4637  1548  3E14               	addlw	20
  4638  1549  0086               	movwf	6
  4639  154A  3001               	movlw	1	; select bank2/3
  4640  154B  0087               	movwf	7
  4641  154C  0820               	movf	?_UART_buff_modulo_inc,w
  4642  154D  3FC0               	movwi [0]fsr1
  4643  154E  0821               	movf	?_UART_buff_modulo_inc+1,w
  4644  154F  3FC1               	movwi [1]fsr1
  4645                           
  4646                           ;UART.c: 64: ++_this->count;
  4647  1550  082A               	movf	UART_buff_put@_this,w
  4648  1551  3E18               	addlw	24
  4649  1552  0086               	movwf	6
  4650  1553  3001               	movlw	1	; select bank2/3
  4651  1554  0087               	movwf	7
  4652  1555  3001               	movlw	1
  4653  1556  0781               	addwf	1,f
  4654  1557  3141               	addfsr 1,1
  4655  1558  1803               	skipnc
  4656  1559  0A81               	incf	1,f
  4657                           
  4658                           ;UART.c: 65: } else {
  4659  155A  0008               	return
  4660  155B                     l2386:	
  4661                           
  4662                           ;UART.c: 66: _this->buf[_this->head] = c;
  4663  155B  0020               	movlb	0	; select bank0
  4664  155C  0826               	movf	UART_buff_put@c,w
  4665  155D  00A7               	movwf	??_UART_buff_put
  4666  155E  082A               	movf	UART_buff_put@_this,w
  4667  155F  3E14               	addlw	20
  4668  1560  0086               	movwf	6
  4669  1561  3001               	movlw	1	; select bank2/3
  4670  1562  0087               	movwf	7
  4671  1563  0801               	movf	1,w
  4672  1564  072A               	addwf	UART_buff_put@_this,w
  4673  1565  00A8               	movwf	??_UART_buff_put+1
  4674  1566  0828               	movf	??_UART_buff_put+1,w
  4675  1567  0086               	movwf	6
  4676  1568  3001               	movlw	1	; select bank2/3
  4677  1569  0087               	movwf	7
  4678  156A  0827               	movf	??_UART_buff_put,w
  4679  156B  0081               	movwf	1
  4680                           
  4681                           ;UART.c: 67: _this->head = UART_buff_modulo_inc(_this->head, 20);
  4682  156C  082A               	movf	UART_buff_put@_this,w
  4683  156D  3E14               	addlw	20
  4684  156E  0086               	movwf	6
  4685  156F  3001               	movlw	1	; select bank2/3
  4686  1570  0087               	movwf	7
  4687  1571  3F40               	moviw [0]fsr1
  4688  1572  00A0               	movwf	UART_buff_modulo_inc@value
  4689  1573  3F41               	moviw [1]fsr1
  4690  1574  00A1               	movwf	UART_buff_modulo_inc@value+1
  4691  1575  3014               	movlw	20
  4692  1576  00A2               	movwf	UART_buff_modulo_inc@modulus
  4693  1577  3000               	movlw	0
  4694  1578  00A3               	movwf	UART_buff_modulo_inc@modulus+1
  4695  1579  319E  26AE  3195   	fcall	_UART_buff_modulo_inc
  4696  157C  0020               	movlb	0	; select bank0
  4697  157D  082A               	movf	UART_buff_put@_this,w
  4698  157E  3E14               	addlw	20
  4699  157F  0086               	movwf	6
  4700  1580  3001               	movlw	1	; select bank2/3
  4701  1581  0087               	movwf	7
  4702  1582  0820               	movf	?_UART_buff_modulo_inc,w
  4703  1583  3FC0               	movwi [0]fsr1
  4704  1584  0821               	movf	?_UART_buff_modulo_inc+1,w
  4705  1585  3FC1               	movwi [1]fsr1
  4706                           
  4707                           ;UART.c: 68: _this->tail = UART_buff_modulo_inc(_this->tail, 20);
  4708  1586  082A               	movf	UART_buff_put@_this,w
  4709  1587  3E16               	addlw	22
  4710  1588  0086               	movwf	6
  4711  1589  3001               	movlw	1	; select bank2/3
  4712  158A  0087               	movwf	7
  4713  158B  3F40               	moviw [0]fsr1
  4714  158C  00A0               	movwf	UART_buff_modulo_inc@value
  4715  158D  3F41               	moviw [1]fsr1
  4716  158E  00A1               	movwf	UART_buff_modulo_inc@value+1
  4717  158F  3014               	movlw	20
  4718  1590  00A2               	movwf	UART_buff_modulo_inc@modulus
  4719  1591  3000               	movlw	0
  4720  1592  00A3               	movwf	UART_buff_modulo_inc@modulus+1
  4721  1593  319E  26AE         	fcall	_UART_buff_modulo_inc
  4722  1595  0020               	movlb	0	; select bank0
  4723  1596  082A               	movf	UART_buff_put@_this,w
  4724  1597  3E16               	addlw	22
  4725  1598  0086               	movwf	6
  4726  1599  3001               	movlw	1	; select bank2/3
  4727  159A  0087               	movwf	7
  4728  159B  0820               	movf	?_UART_buff_modulo_inc,w
  4729  159C  3FC0               	movwi [0]fsr1
  4730  159D  0821               	movf	?_UART_buff_modulo_inc+1,w
  4731  159E  3FC1               	movwi [1]fsr1
  4732  159F  0008               	return
  4733  15A0                     __end_of_UART_buff_put:	
  4734                           
  4735                           	psect	text20
  4736  12F7                     __ptext20:	
  4737 ;; *************** function _UART_buff_get *****************
  4738 ;; Defined at:
  4739 ;;		line 73 in file "UART.c"
  4740 ;; Parameters:    Size  Location     Type
  4741 ;;  _this           1    wreg     PTR struct UART_ring_buf
  4742 ;;		 -> output_buffer(26), input_buffer(26), 
  4743 ;; Auto vars:     Size  Location     Type
  4744 ;;  _this           1   10[BANK0 ] PTR struct UART_ring_buf
  4745 ;;		 -> output_buffer(26), input_buffer(26), 
  4746 ;;  c               1    9[BANK0 ] unsigned char 
  4747 ;; Return value:  Size  Location     Type
  4748 ;;                  1    wreg      unsigned char 
  4749 ;; Registers used:
  4750 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4751 ;; Tracked objects:
  4752 ;;		On entry : 0/0
  4753 ;;		On exit  : 0/0
  4754 ;;		Unchanged: 0/0
  4755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4757 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4758 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4759 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4760 ;;Total ram usage:        5 bytes
  4761 ;; Hardware stack levels used:    1
  4762 ;; Hardware stack levels required when called:    5
  4763 ;; This function calls:
  4764 ;;		_UART_buff_modulo_inc
  4765 ;; This function is called by:
  4766 ;;		_Send_put
  4767 ;;		_Receive_get
  4768 ;; This function uses a non-reentrant model
  4769 ;;
  4770                           
  4771                           
  4772                           ;psect for function _UART_buff_get
  4773  12F7                     _UART_buff_get:	
  4774                           
  4775                           ;incstack = 0
  4776                           ; Regs used in _UART_buff_get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4777                           ;UART_buff_get@_this stored from wreg
  4778  12F7  0020               	movlb	0	; select bank0
  4779  12F8  00AA               	movwf	UART_buff_get@_this
  4780                           
  4781                           ;UART.c: 74: unsigned char c;
  4782                           ;UART.c: 75: if (_this->count > 0) {
  4783  12F9  082A               	movf	UART_buff_get@_this,w
  4784  12FA  3E18               	addlw	24
  4785  12FB  0086               	movwf	6
  4786  12FC  3001               	movlw	1	; select bank2/3
  4787  12FD  0087               	movwf	7
  4788  12FE  3F40               	moviw [0]fsr1
  4789  12FF  00A6               	movwf	??_UART_buff_get
  4790  1300  3F41               	moviw [1]fsr1
  4791  1301  00A7               	movwf	??_UART_buff_get+1
  4792  1302  0827               	movf	??_UART_buff_get+1,w
  4793  1303  3A80               	xorlw	128
  4794  1304  00A8               	movwf	??_UART_buff_get+2
  4795  1305  3080               	movlw	128
  4796  1306  0228               	subwf	??_UART_buff_get+2,w
  4797  1307  1D03               	skipz
  4798  1308  2B0B               	goto	u2685
  4799  1309  3001               	movlw	1
  4800  130A  0226               	subwf	??_UART_buff_get,w
  4801  130B                     u2685:	
  4802  130B  1C03               	skipc
  4803  130C  2B44               	goto	l2400
  4804                           
  4805                           ;UART.c: 76: c = _this->buf[_this->tail];
  4806  130D  0020               	movlb	0	; select bank0
  4807  130E  082A               	movf	UART_buff_get@_this,w
  4808  130F  3E16               	addlw	22
  4809  1310  0086               	movwf	6
  4810  1311  3001               	movlw	1	; select bank2/3
  4811  1312  0087               	movwf	7
  4812  1313  0801               	movf	1,w
  4813  1314  072A               	addwf	UART_buff_get@_this,w
  4814  1315  00A6               	movwf	??_UART_buff_get
  4815  1316  0826               	movf	??_UART_buff_get,w
  4816  1317  0086               	movwf	6
  4817  1318  3001               	movlw	1	; select bank2/3
  4818  1319  0087               	movwf	7
  4819  131A  0801               	movf	1,w
  4820  131B  00A7               	movwf	??_UART_buff_get+1
  4821  131C  0827               	movf	??_UART_buff_get+1,w
  4822  131D  00A9               	movwf	UART_buff_get@c
  4823                           
  4824                           ;UART.c: 77: _this->tail = UART_buff_modulo_inc(_this->tail, 20);
  4825  131E  082A               	movf	UART_buff_get@_this,w
  4826  131F  3E16               	addlw	22
  4827  1320  0086               	movwf	6
  4828  1321  3001               	movlw	1	; select bank2/3
  4829  1322  0087               	movwf	7
  4830  1323  3F40               	moviw [0]fsr1
  4831  1324  00A0               	movwf	UART_buff_modulo_inc@value
  4832  1325  3F41               	moviw [1]fsr1
  4833  1326  00A1               	movwf	UART_buff_modulo_inc@value+1
  4834  1327  3014               	movlw	20
  4835  1328  00A2               	movwf	UART_buff_modulo_inc@modulus
  4836  1329  3000               	movlw	0
  4837  132A  00A3               	movwf	UART_buff_modulo_inc@modulus+1
  4838  132B  319E  26AE  3192   	fcall	_UART_buff_modulo_inc
  4839  132E  0020               	movlb	0	; select bank0
  4840  132F  082A               	movf	UART_buff_get@_this,w
  4841  1330  3E16               	addlw	22
  4842  1331  0086               	movwf	6
  4843  1332  3001               	movlw	1	; select bank2/3
  4844  1333  0087               	movwf	7
  4845  1334  0820               	movf	?_UART_buff_modulo_inc,w
  4846  1335  3FC0               	movwi [0]fsr1
  4847  1336  0821               	movf	?_UART_buff_modulo_inc+1,w
  4848  1337  3FC1               	movwi [1]fsr1
  4849                           
  4850                           ;UART.c: 78: --_this->count;
  4851  1338  082A               	movf	UART_buff_get@_this,w
  4852  1339  3E18               	addlw	24
  4853  133A  0086               	movwf	6
  4854  133B  3001               	movlw	1	; select bank2/3
  4855  133C  0087               	movwf	7
  4856  133D  30FF               	movlw	255
  4857  133E  0781               	addwf	1,f
  4858  133F  3141               	addfsr 1,1
  4859  1340  30FF               	movlw	255
  4860  1341  3D81               	addwfc	1,f
  4861  1342  317F               	addfsr 1,-1
  4862                           
  4863                           ;UART.c: 79: } else {
  4864  1343  2B46               	goto	l2402
  4865  1344                     l2400:	
  4866                           
  4867                           ;UART.c: 80: c = 0;
  4868  1344  0020               	movlb	0	; select bank0
  4869  1345  01A9               	clrf	UART_buff_get@c
  4870  1346                     l2402:	
  4871                           
  4872                           ;UART.c: 81: }
  4873                           ;UART.c: 82: return (c);
  4874  1346  0829               	movf	UART_buff_get@c,w
  4875  1347  0008               	return
  4876  1348                     __end_of_UART_buff_get:	
  4877                           
  4878                           	psect	text21
  4879  1EAE                     __ptext21:	
  4880 ;; *************** function _UART_buff_modulo_inc *****************
  4881 ;; Defined at:
  4882 ;;		line 89 in file "UART.c"
  4883 ;; Parameters:    Size  Location     Type
  4884 ;;  value           2    0[BANK0 ] const unsigned int 
  4885 ;;  modulus         2    2[BANK0 ] const unsigned int 
  4886 ;; Auto vars:     Size  Location     Type
  4887 ;;  my_value        2    4[BANK0 ] unsigned int 
  4888 ;; Return value:  Size  Location     Type
  4889 ;;                  2    0[BANK0 ] unsigned int 
  4890 ;; Registers used:
  4891 ;;		wreg, status,2, status,0
  4892 ;; Tracked objects:
  4893 ;;		On entry : 0/0
  4894 ;;		On exit  : 0/0
  4895 ;;		Unchanged: 0/0
  4896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4897 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4898 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4900 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4901 ;;Total ram usage:        6 bytes
  4902 ;; Hardware stack levels used:    1
  4903 ;; Hardware stack levels required when called:    4
  4904 ;; This function calls:
  4905 ;;		Nothing
  4906 ;; This function is called by:
  4907 ;;		_UART_buff_put
  4908 ;;		_UART_buff_get
  4909 ;; This function uses a non-reentrant model
  4910 ;;
  4911                           
  4912                           
  4913                           ;psect for function _UART_buff_modulo_inc
  4914  1EAE                     _UART_buff_modulo_inc:	
  4915                           
  4916                           ;UART.c: 90: unsigned int my_value = value + 1;
  4917                           
  4918                           ;incstack = 0
  4919                           ; Regs used in _UART_buff_modulo_inc: [wreg+status,2+status,0]
  4920  1EAE  0020               	movlb	0	; select bank0
  4921  1EAF  0820               	movf	UART_buff_modulo_inc@value,w
  4922  1EB0  3E01               	addlw	1
  4923  1EB1  00A4               	movwf	UART_buff_modulo_inc@my_value
  4924  1EB2  3000               	movlw	0
  4925  1EB3  3D21               	addwfc	UART_buff_modulo_inc@value+1,w
  4926  1EB4  00A5               	movwf	UART_buff_modulo_inc@my_value+1
  4927                           
  4928                           ;UART.c: 91: if (my_value >= modulus) {
  4929  1EB5  0823               	movf	UART_buff_modulo_inc@modulus+1,w
  4930  1EB6  0225               	subwf	UART_buff_modulo_inc@my_value+1,w
  4931  1EB7  1D03               	skipz
  4932  1EB8  2EBB               	goto	u2665
  4933  1EB9  0822               	movf	UART_buff_modulo_inc@modulus,w
  4934  1EBA  0224               	subwf	UART_buff_modulo_inc@my_value,w
  4935  1EBB                     u2665:	
  4936  1EBB  1C03               	skipc
  4937  1EBC  2EBF               	goto	l2374
  4938                           
  4939                           ;UART.c: 92: my_value = 0;
  4940  1EBD  01A4               	clrf	UART_buff_modulo_inc@my_value
  4941  1EBE  01A5               	clrf	UART_buff_modulo_inc@my_value+1
  4942  1EBF                     l2374:	
  4943                           
  4944                           ;UART.c: 93: }
  4945                           ;UART.c: 94: return (my_value);
  4946  1EBF  0825               	movf	UART_buff_modulo_inc@my_value+1,w
  4947  1EC0  00A1               	movwf	?_UART_buff_modulo_inc+1
  4948  1EC1  0824               	movf	UART_buff_modulo_inc@my_value,w
  4949  1EC2  00A0               	movwf	?_UART_buff_modulo_inc
  4950  1EC3  0008               	return
  4951  1EC4                     __end_of_UART_buff_modulo_inc:	
  4952                           
  4953                           	psect	text22
  4954  1E79                     __ptext22:	
  4955 ;; *************** function _isdigit *****************
  4956 ;; Defined at:
  4957 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\isdigit.c"
  4958 ;; Parameters:    Size  Location     Type
  4959 ;;  c               1    wreg     unsigned char 
  4960 ;; Auto vars:     Size  Location     Type
  4961 ;;  c               1    1[BANK0 ] unsigned char 
  4962 ;; Return value:  Size  Location     Type
  4963 ;;		None               void
  4964 ;; Registers used:
  4965 ;;		wreg, status,2, status,0
  4966 ;; Tracked objects:
  4967 ;;		On entry : 0/0
  4968 ;;		On exit  : 0/0
  4969 ;;		Unchanged: 0/0
  4970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4972 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4974 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4975 ;;Total ram usage:        2 bytes
  4976 ;; Hardware stack levels used:    1
  4977 ;; Hardware stack levels required when called:    4
  4978 ;; This function calls:
  4979 ;;		Nothing
  4980 ;; This function is called by:
  4981 ;;		_printf
  4982 ;; This function uses a non-reentrant model
  4983 ;;
  4984                           
  4985                           
  4986                           ;psect for function _isdigit
  4987  1E79                     _isdigit:	
  4988                           
  4989                           ;incstack = 0
  4990                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4991                           ;isdigit@c stored from wreg
  4992  1E79  0020               	movlb	0	; select bank0
  4993  1E7A  00A1               	movwf	isdigit@c
  4994  1E7B  01A0               	clrf	_isdigit$999
  4995  1E7C  303A               	movlw	58
  4996  1E7D  0221               	subwf	isdigit@c,w
  4997  1E7E  1803               	skipnc
  4998  1E7F  2E86               	goto	l2744
  4999  1E80  3030               	movlw	48
  5000  1E81  0221               	subwf	isdigit@c,w
  5001  1E82  1C03               	skipc
  5002  1E83  2E86               	goto	l2744
  5003  1E84  01A0               	clrf	_isdigit$999
  5004  1E85  0AA0               	incf	_isdigit$999,f
  5005  1E86                     l2744:	
  5006  1E86  0C20               	rrf	_isdigit$999,w
  5007  1E87  0008               	return
  5008  1E88                     __end_of_isdigit:	
  5009                           
  5010                           	psect	text23
  5011  0643                     __ptext23:	
  5012 ;; *************** function _fround *****************
  5013 ;; Defined at:
  5014 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  5015 ;; Parameters:    Size  Location     Type
  5016 ;;  prec            1    wreg     unsigned char 
  5017 ;; Auto vars:     Size  Location     Type
  5018 ;;  prec            1   51[BANK0 ] unsigned char 
  5019 ;; Return value:  Size  Location     Type
  5020 ;;                  3   38[BANK0 ] unsigned char 
  5021 ;; Registers used:
  5022 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5023 ;; Tracked objects:
  5024 ;;		On entry : 0/0
  5025 ;;		On exit  : 0/0
  5026 ;;		Unchanged: 0/0
  5027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5028 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5029 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5030 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5031 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5032 ;;Total ram usage:       14 bytes
  5033 ;; Hardware stack levels used:    1
  5034 ;; Hardware stack levels required when called:    6
  5035 ;; This function calls:
  5036 ;;		___awdiv
  5037 ;;		___awmod
  5038 ;;		___ftmul
  5039 ;;		___wmul
  5040 ;; This function is called by:
  5041 ;;		_printf
  5042 ;; This function uses a non-reentrant model
  5043 ;;
  5044                           
  5045                           
  5046                           ;psect for function _fround
  5047  0643                     _fround:	
  5048                           
  5049                           ;incstack = 0
  5050                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5051                           ;fround@prec stored from wreg
  5052  0643  0020               	movlb	0	; select bank0
  5053  0644  00D3               	movwf	fround@prec
  5054                           
  5055                           ;doprnt.c: 413: if(prec>=110)
  5056  0645  306E               	movlw	110
  5057  0646  0253               	subwf	fround@prec,w
  5058  0647  1C03               	skipc
  5059  0648  2F04               	goto	l2684
  5060                           
  5061                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5062  0649  300A               	movlw	10
  5063  064A  00A7               	movwf	___awdiv@divisor
  5064  064B  3000               	movlw	0
  5065  064C  00A8               	movwf	___awdiv@divisor+1
  5066  064D  0853               	movf	fround@prec,w
  5067  064E  00C9               	movwf	??_fround
  5068  064F  01CA               	clrf	??_fround+1
  5069  0650  0849               	movf	??_fround,w
  5070  0651  00A2               	movwf	___awmod@dividend
  5071  0652  084A               	movf	??_fround+1,w
  5072  0653  00A3               	movwf	___awmod@dividend+1
  5073  0654  3064               	movlw	100
  5074  0655  00A0               	movwf	___awmod@divisor
  5075  0656  3000               	movlw	0
  5076  0657  00A1               	movwf	___awmod@divisor+1
  5077  0658  3192  2264  3186   	fcall	___awmod
  5078  065B  0020               	movlb	0	; select bank0
  5079  065C  0821               	movf	?___awmod+1,w
  5080  065D  00AA               	movwf	___awdiv@dividend+1
  5081  065E  0820               	movf	?___awmod,w
  5082  065F  00A9               	movwf	___awdiv@dividend
  5083  0660  3193  2348  3186   	fcall	___awdiv
  5084  0663  0020               	movlb	0	; select bank0
  5085  0664  0827               	movf	?___awdiv,w
  5086  0665  3E09               	addlw	9
  5087  0666  00B0               	movwf	___wmul@multiplier
  5088  0667  3000               	movlw	0
  5089  0668  3D28               	addwfc	?___awdiv+1,w
  5090  0669  00B1               	movwf	___wmul@multiplier+1
  5091  066A  3003               	movlw	3
  5092  066B  00B2               	movwf	___wmul@multiplicand
  5093  066C  3000               	movlw	0
  5094  066D  00B3               	movwf	___wmul@multiplicand+1
  5095  066E  319F  270B  3186   	fcall	___wmul
  5096  0671  0020               	movlb	0	; select bank0
  5097  0672  0831               	movf	?___wmul+1,w
  5098  0673  0085               	movwf	5
  5099  0674  0830               	movf	?___wmul,w
  5100  0675  0084               	movwf	4
  5101  0676  3058               	movlw	low (__npowers_| (0+32768))
  5102  0677  0784               	addwf	4,f
  5103  0678  3090               	movlw	high (__npowers_| (0+32768))
  5104  0679  3D85               	addwfc	5,f
  5105  067A  3F00               	moviw [0]fsr0
  5106  067B  00B6               	movwf	___ftmul@f1
  5107  067C  3F01               	moviw [1]fsr0
  5108  067D  00B7               	movwf	___ftmul@f1+1
  5109  067E  3F02               	moviw [2]fsr0
  5110  067F  00B8               	movwf	___ftmul@f1+2
  5111  0680  3064               	movlw	100
  5112  0681  00A7               	movwf	___awdiv@divisor
  5113  0682  3000               	movlw	0
  5114  0683  00A8               	movwf	___awdiv@divisor+1
  5115  0684  0853               	movf	fround@prec,w
  5116  0685  00CB               	movwf	??_fround+2
  5117  0686  01CC               	clrf	??_fround+3
  5118  0687  084B               	movf	??_fround+2,w
  5119  0688  00A9               	movwf	___awdiv@dividend
  5120  0689  084C               	movf	??_fround+3,w
  5121  068A  00AA               	movwf	___awdiv@dividend+1
  5122  068B  3193  2348  3186   	fcall	___awdiv
  5123  068E  0020               	movlb	0	; select bank0
  5124  068F  0827               	movf	?___awdiv,w
  5125  0690  3E12               	addlw	18
  5126  0691  00B0               	movwf	___wmul@multiplier
  5127  0692  3000               	movlw	0
  5128  0693  3D28               	addwfc	?___awdiv+1,w
  5129  0694  00B1               	movwf	___wmul@multiplier+1
  5130  0695  3003               	movlw	3
  5131  0696  00B2               	movwf	___wmul@multiplicand
  5132  0697  3000               	movlw	0
  5133  0698  00B3               	movwf	___wmul@multiplicand+1
  5134  0699  319F  270B  3186   	fcall	___wmul
  5135  069C  0020               	movlb	0	; select bank0
  5136  069D  0831               	movf	?___wmul+1,w
  5137  069E  0085               	movwf	5
  5138  069F  0830               	movf	?___wmul,w
  5139  06A0  0084               	movwf	4
  5140  06A1  3058               	movlw	low (__npowers_| (0+32768))
  5141  06A2  0784               	addwf	4,f
  5142  06A3  3090               	movlw	high (__npowers_| (0+32768))
  5143  06A4  3D85               	addwfc	5,f
  5144  06A5  3F00               	moviw [0]fsr0
  5145  06A6  00B9               	movwf	___ftmul@f2
  5146  06A7  3F01               	moviw [1]fsr0
  5147  06A8  00BA               	movwf	___ftmul@f2+1
  5148  06A9  3F02               	moviw [2]fsr0
  5149  06AA  00BB               	movwf	___ftmul@f2+2
  5150  06AB  3195  25A0  3186   	fcall	___ftmul
  5151  06AE  0020               	movlb	0	; select bank0
  5152  06AF  0836               	movf	?___ftmul,w
  5153  06B0  00D0               	movwf	_fround$1250
  5154  06B1  0837               	movf	?___ftmul+1,w
  5155  06B2  00D1               	movwf	_fround$1250+1
  5156  06B3  0838               	movf	?___ftmul+2,w
  5157  06B4  00D2               	movwf	_fround$1250+2
  5158                           
  5159                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5160  06B5  0853               	movf	fround@prec,w
  5161  06B6  00C9               	movwf	??_fround
  5162  06B7  01CA               	clrf	??_fround+1
  5163  06B8  0849               	movf	??_fround,w
  5164  06B9  00A2               	movwf	___awmod@dividend
  5165  06BA  084A               	movf	??_fround+1,w
  5166  06BB  00A3               	movwf	___awmod@dividend+1
  5167  06BC  300A               	movlw	10
  5168  06BD  00A0               	movwf	___awmod@divisor
  5169  06BE  3000               	movlw	0
  5170  06BF  00A1               	movwf	___awmod@divisor+1
  5171  06C0  3192  2264  3186   	fcall	___awmod
  5172  06C3  0020               	movlb	0	; select bank0
  5173  06C4  0821               	movf	?___awmod+1,w
  5174  06C5  00B1               	movwf	___wmul@multiplier+1
  5175  06C6  0820               	movf	?___awmod,w
  5176  06C7  00B0               	movwf	___wmul@multiplier
  5177  06C8  3003               	movlw	3
  5178  06C9  00B2               	movwf	___wmul@multiplicand
  5179  06CA  3000               	movlw	0
  5180  06CB  00B3               	movwf	___wmul@multiplicand+1
  5181  06CC  319F  270B  3186   	fcall	___wmul
  5182  06CF  0020               	movlb	0	; select bank0
  5183  06D0  0831               	movf	?___wmul+1,w
  5184  06D1  0085               	movwf	5
  5185  06D2  0830               	movf	?___wmul,w
  5186  06D3  0084               	movwf	4
  5187  06D4  3058               	movlw	low (__npowers_| (0+32768))
  5188  06D5  0784               	addwf	4,f
  5189  06D6  3090               	movlw	high (__npowers_| (0+32768))
  5190  06D7  3D85               	addwfc	5,f
  5191  06D8  3F00               	moviw [0]fsr0
  5192  06D9  00B6               	movwf	___ftmul@f1
  5193  06DA  3F01               	moviw [1]fsr0
  5194  06DB  00B7               	movwf	___ftmul@f1+1
  5195  06DC  3F02               	moviw [2]fsr0
  5196  06DD  00B8               	movwf	___ftmul@f1+2
  5197  06DE  0850               	movf	_fround$1250,w
  5198  06DF  00B9               	movwf	___ftmul@f2
  5199  06E0  0851               	movf	_fround$1250+1,w
  5200  06E1  00BA               	movwf	___ftmul@f2+1
  5201  06E2  0852               	movf	_fround$1250+2,w
  5202  06E3  00BB               	movwf	___ftmul@f2+2
  5203  06E4  3195  25A0  3186   	fcall	___ftmul
  5204  06E7  0020               	movlb	0	; select bank0
  5205  06E8  0836               	movf	?___ftmul,w
  5206  06E9  00CD               	movwf	_fround$1251
  5207  06EA  0837               	movf	?___ftmul+1,w
  5208  06EB  00CE               	movwf	_fround$1251+1
  5209  06EC  0838               	movf	?___ftmul+2,w
  5210  06ED  00CF               	movwf	_fround$1251+2
  5211                           
  5212                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5213  06EE  3000               	movlw	0
  5214  06EF  00B6               	movwf	___ftmul@f1
  5215  06F0  3000               	movlw	0
  5216  06F1  00B7               	movwf	___ftmul@f1+1
  5217  06F2  303F               	movlw	63
  5218  06F3  00B8               	movwf	___ftmul@f1+2
  5219  06F4  084D               	movf	_fround$1251,w
  5220  06F5  00B9               	movwf	___ftmul@f2
  5221  06F6  084E               	movf	_fround$1251+1,w
  5222  06F7  00BA               	movwf	___ftmul@f2+1
  5223  06F8  084F               	movf	_fround$1251+2,w
  5224  06F9  00BB               	movwf	___ftmul@f2+2
  5225  06FA  3195  25A0         	fcall	___ftmul
  5226  06FC  0020               	movlb	0	; select bank0
  5227  06FD  0836               	movf	?___ftmul,w
  5228  06FE  00C6               	movwf	?_fround
  5229  06FF  0837               	movf	?___ftmul+1,w
  5230  0700  00C7               	movwf	?_fround+1
  5231  0701  0838               	movf	?___ftmul+2,w
  5232  0702  00C8               	movwf	?_fround+2
  5233  0703  0008               	return
  5234  0704                     l2684:	
  5235                           
  5236                           ;doprnt.c: 415: else if(prec > 10)
  5237  0704  300B               	movlw	11
  5238  0705  0253               	subwf	fround@prec,w
  5239  0706  1C03               	skipc
  5240  0707  2F7C               	goto	l2692
  5241                           
  5242                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5243  0708  0853               	movf	fround@prec,w
  5244  0709  00C9               	movwf	??_fround
  5245  070A  01CA               	clrf	??_fround+1
  5246  070B  0849               	movf	??_fround,w
  5247  070C  00A2               	movwf	___awmod@dividend
  5248  070D  084A               	movf	??_fround+1,w
  5249  070E  00A3               	movwf	___awmod@dividend+1
  5250  070F  300A               	movlw	10
  5251  0710  00A0               	movwf	___awmod@divisor
  5252  0711  3000               	movlw	0
  5253  0712  00A1               	movwf	___awmod@divisor+1
  5254  0713  3192  2264  3186   	fcall	___awmod
  5255  0716  0020               	movlb	0	; select bank0
  5256  0717  0821               	movf	?___awmod+1,w
  5257  0718  00B1               	movwf	___wmul@multiplier+1
  5258  0719  0820               	movf	?___awmod,w
  5259  071A  00B0               	movwf	___wmul@multiplier
  5260  071B  3003               	movlw	3
  5261  071C  00B2               	movwf	___wmul@multiplicand
  5262  071D  3000               	movlw	0
  5263  071E  00B3               	movwf	___wmul@multiplicand+1
  5264  071F  319F  270B  3186   	fcall	___wmul
  5265  0722  0020               	movlb	0	; select bank0
  5266  0723  0831               	movf	?___wmul+1,w
  5267  0724  0085               	movwf	5
  5268  0725  0830               	movf	?___wmul,w
  5269  0726  0084               	movwf	4
  5270  0727  3058               	movlw	low (__npowers_| (0+32768))
  5271  0728  0784               	addwf	4,f
  5272  0729  3090               	movlw	high (__npowers_| (0+32768))
  5273  072A  3D85               	addwfc	5,f
  5274  072B  3F00               	moviw [0]fsr0
  5275  072C  00B6               	movwf	___ftmul@f1
  5276  072D  3F01               	moviw [1]fsr0
  5277  072E  00B7               	movwf	___ftmul@f1+1
  5278  072F  3F02               	moviw [2]fsr0
  5279  0730  00B8               	movwf	___ftmul@f1+2
  5280  0731  300A               	movlw	10
  5281  0732  00A7               	movwf	___awdiv@divisor
  5282  0733  3000               	movlw	0
  5283  0734  00A8               	movwf	___awdiv@divisor+1
  5284  0735  0853               	movf	fround@prec,w
  5285  0736  00CB               	movwf	??_fround+2
  5286  0737  01CC               	clrf	??_fround+3
  5287  0738  084B               	movf	??_fround+2,w
  5288  0739  00A9               	movwf	___awdiv@dividend
  5289  073A  084C               	movf	??_fround+3,w
  5290  073B  00AA               	movwf	___awdiv@dividend+1
  5291  073C  3193  2348  3186   	fcall	___awdiv
  5292  073F  0020               	movlb	0	; select bank0
  5293  0740  0827               	movf	?___awdiv,w
  5294  0741  3E09               	addlw	9
  5295  0742  00B0               	movwf	___wmul@multiplier
  5296  0743  3000               	movlw	0
  5297  0744  3D28               	addwfc	?___awdiv+1,w
  5298  0745  00B1               	movwf	___wmul@multiplier+1
  5299  0746  3003               	movlw	3
  5300  0747  00B2               	movwf	___wmul@multiplicand
  5301  0748  3000               	movlw	0
  5302  0749  00B3               	movwf	___wmul@multiplicand+1
  5303  074A  319F  270B  3186   	fcall	___wmul
  5304  074D  0020               	movlb	0	; select bank0
  5305  074E  0831               	movf	?___wmul+1,w
  5306  074F  0085               	movwf	5
  5307  0750  0830               	movf	?___wmul,w
  5308  0751  0084               	movwf	4
  5309  0752  3058               	movlw	low (__npowers_| (0+32768))
  5310  0753  0784               	addwf	4,f
  5311  0754  3090               	movlw	high (__npowers_| (0+32768))
  5312  0755  3D85               	addwfc	5,f
  5313  0756  3F00               	moviw [0]fsr0
  5314  0757  00B9               	movwf	___ftmul@f2
  5315  0758  3F01               	moviw [1]fsr0
  5316  0759  00BA               	movwf	___ftmul@f2+1
  5317  075A  3F02               	moviw [2]fsr0
  5318  075B  00BB               	movwf	___ftmul@f2+2
  5319  075C  3195  25A0  3186   	fcall	___ftmul
  5320  075F  0020               	movlb	0	; select bank0
  5321  0760  0836               	movf	?___ftmul,w
  5322  0761  00D0               	movwf	_fround$1250
  5323  0762  0837               	movf	?___ftmul+1,w
  5324  0763  00D1               	movwf	_fround$1250+1
  5325  0764  0838               	movf	?___ftmul+2,w
  5326  0765  00D2               	movwf	_fround$1250+2
  5327                           
  5328                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5329  0766  3000               	movlw	0
  5330  0767  00B6               	movwf	___ftmul@f1
  5331  0768  3000               	movlw	0
  5332  0769  00B7               	movwf	___ftmul@f1+1
  5333  076A  303F               	movlw	63
  5334  076B  00B8               	movwf	___ftmul@f1+2
  5335  076C  0850               	movf	_fround$1250,w
  5336  076D  00B9               	movwf	___ftmul@f2
  5337  076E  0851               	movf	_fround$1250+1,w
  5338  076F  00BA               	movwf	___ftmul@f2+1
  5339  0770  0852               	movf	_fround$1250+2,w
  5340  0771  00BB               	movwf	___ftmul@f2+2
  5341  0772  3195  25A0         	fcall	___ftmul
  5342  0774  0020               	movlb	0	; select bank0
  5343  0775  0836               	movf	?___ftmul,w
  5344  0776  00C6               	movwf	?_fround
  5345  0777  0837               	movf	?___ftmul+1,w
  5346  0778  00C7               	movwf	?_fround+1
  5347  0779  0838               	movf	?___ftmul+2,w
  5348  077A  00C8               	movwf	?_fround+2
  5349  077B  0008               	return
  5350  077C                     l2692:	
  5351                           
  5352                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5353  077C  3000               	movlw	0
  5354  077D  00B6               	movwf	___ftmul@f1
  5355  077E  3000               	movlw	0
  5356  077F  00B7               	movwf	___ftmul@f1+1
  5357  0780  303F               	movlw	63
  5358  0781  00B8               	movwf	___ftmul@f1+2
  5359  0782  0853               	movf	fround@prec,w
  5360  0783  00C9               	movwf	??_fround
  5361  0784  01CA               	clrf	??_fround+1
  5362  0785  0849               	movf	??_fround,w
  5363  0786  00B0               	movwf	___wmul@multiplier
  5364  0787  084A               	movf	??_fround+1,w
  5365  0788  00B1               	movwf	___wmul@multiplier+1
  5366  0789  3003               	movlw	3
  5367  078A  00B2               	movwf	___wmul@multiplicand
  5368  078B  3000               	movlw	0
  5369  078C  00B3               	movwf	___wmul@multiplicand+1
  5370  078D  319F  270B  3186   	fcall	___wmul
  5371  0790  0020               	movlb	0	; select bank0
  5372  0791  0831               	movf	?___wmul+1,w
  5373  0792  0085               	movwf	5
  5374  0793  0830               	movf	?___wmul,w
  5375  0794  0084               	movwf	4
  5376  0795  3058               	movlw	low (__npowers_| (0+32768))
  5377  0796  0784               	addwf	4,f
  5378  0797  3090               	movlw	high (__npowers_| (0+32768))
  5379  0798  3D85               	addwfc	5,f
  5380  0799  3F00               	moviw [0]fsr0
  5381  079A  00B9               	movwf	___ftmul@f2
  5382  079B  3F01               	moviw [1]fsr0
  5383  079C  00BA               	movwf	___ftmul@f2+1
  5384  079D  3F02               	moviw [2]fsr0
  5385  079E  00BB               	movwf	___ftmul@f2+2
  5386  079F  3195  25A0         	fcall	___ftmul
  5387  07A1  0020               	movlb	0	; select bank0
  5388  07A2  0836               	movf	?___ftmul,w
  5389  07A3  00C6               	movwf	?_fround
  5390  07A4  0837               	movf	?___ftmul+1,w
  5391  07A5  00C7               	movwf	?_fround+1
  5392  07A6  0838               	movf	?___ftmul+2,w
  5393  07A7  00C8               	movwf	?_fround+2
  5394  07A8  0008               	return
  5395  07A9                     __end_of_fround:	
  5396                           
  5397                           	psect	text24
  5398  1F0B                     __ptext24:	
  5399 ;; *************** function ___wmul *****************
  5400 ;; Defined at:
  5401 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  5402 ;; Parameters:    Size  Location     Type
  5403 ;;  multiplier      2   16[BANK0 ] unsigned int 
  5404 ;;  multiplicand    2   18[BANK0 ] unsigned int 
  5405 ;; Auto vars:     Size  Location     Type
  5406 ;;  product         2   20[BANK0 ] unsigned int 
  5407 ;; Return value:  Size  Location     Type
  5408 ;;                  2   16[BANK0 ] unsigned int 
  5409 ;; Registers used:
  5410 ;;		wreg, status,2, status,0
  5411 ;; Tracked objects:
  5412 ;;		On entry : 0/0
  5413 ;;		On exit  : 0/0
  5414 ;;		Unchanged: 0/0
  5415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5416 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5417 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5419 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5420 ;;Total ram usage:        6 bytes
  5421 ;; Hardware stack levels used:    1
  5422 ;; Hardware stack levels required when called:    4
  5423 ;; This function calls:
  5424 ;;		Nothing
  5425 ;; This function is called by:
  5426 ;;		_fround
  5427 ;;		_scale
  5428 ;;		_printf
  5429 ;; This function uses a non-reentrant model
  5430 ;;
  5431                           
  5432                           
  5433                           ;psect for function ___wmul
  5434  1F0B                     ___wmul:	
  5435                           
  5436                           ;incstack = 0
  5437                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5438  1F0B  0020               	movlb	0	; select bank0
  5439  1F0C  01B4               	clrf	___wmul@product
  5440  1F0D  01B5               	clrf	___wmul@product+1
  5441  1F0E                     l2450:	
  5442  1F0E  1C30               	btfss	___wmul@multiplier,0
  5443  1F0F  2F14               	goto	l595
  5444  1F10  0832               	movf	___wmul@multiplicand,w
  5445  1F11  07B4               	addwf	___wmul@product,f
  5446  1F12  0833               	movf	___wmul@multiplicand+1,w
  5447  1F13  3DB5               	addwfc	___wmul@product+1,f
  5448  1F14                     l595:	
  5449  1F14  3001               	movlw	1
  5450  1F15                     u2835:	
  5451  1F15  35B2               	lslf	___wmul@multiplicand,f
  5452  1F16  0DB3               	rlf	___wmul@multiplicand+1,f
  5453  1F17  0B89               	decfsz	9,f
  5454  1F18  2F15               	goto	u2835
  5455  1F19  3001               	movlw	1
  5456  1F1A                     u2845:	
  5457  1F1A  36B1               	lsrf	___wmul@multiplier+1,f
  5458  1F1B  0CB0               	rrf	___wmul@multiplier,f
  5459  1F1C  0B89               	decfsz	9,f
  5460  1F1D  2F1A               	goto	u2845
  5461  1F1E  0830               	movf	___wmul@multiplier,w
  5462  1F1F  0431               	iorwf	___wmul@multiplier+1,w
  5463  1F20  1D03               	btfss	3,2
  5464  1F21  2F0E               	goto	l2450
  5465  1F22  0835               	movf	___wmul@product+1,w
  5466  1F23  00B1               	movwf	?___wmul+1
  5467  1F24  0834               	movf	___wmul@product,w
  5468  1F25  00B0               	movwf	?___wmul
  5469  1F26  0008               	return
  5470  1F27                     __end_of___wmul:	
  5471                           
  5472                           	psect	text25
  5473  15A0                     __ptext25:	
  5474 ;; *************** function ___ftmul *****************
  5475 ;; Defined at:
  5476 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
  5477 ;; Parameters:    Size  Location     Type
  5478 ;;  f1              3   22[BANK0 ] float 
  5479 ;;  f2              3   25[BANK0 ] float 
  5480 ;; Auto vars:     Size  Location     Type
  5481 ;;  f3_as_produc    3   33[BANK0 ] unsigned um
  5482 ;;  sign            1   37[BANK0 ] unsigned char 
  5483 ;;  cntr            1   36[BANK0 ] unsigned char 
  5484 ;;  exp             1   32[BANK0 ] unsigned char 
  5485 ;; Return value:  Size  Location     Type
  5486 ;;                  3   22[BANK0 ] float 
  5487 ;; Registers used:
  5488 ;;		wreg, status,2, status,0, pclath, cstack
  5489 ;; Tracked objects:
  5490 ;;		On entry : 0/0
  5491 ;;		On exit  : 0/0
  5492 ;;		Unchanged: 0/0
  5493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5494 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5495 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5496 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5497 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5498 ;;Total ram usage:       16 bytes
  5499 ;; Hardware stack levels used:    1
  5500 ;; Hardware stack levels required when called:    5
  5501 ;; This function calls:
  5502 ;;		___ftpack
  5503 ;; This function is called by:
  5504 ;;		_fround
  5505 ;;		_scale
  5506 ;;		_printf
  5507 ;; This function uses a non-reentrant model
  5508 ;;
  5509                           
  5510                           
  5511                           ;psect for function ___ftmul
  5512  15A0                     ___ftmul:	
  5513                           
  5514                           ;incstack = 0
  5515                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5516  15A0  0020               	movlb	0	; select bank0
  5517  15A1  0836               	movf	___ftmul@f1,w
  5518  15A2  00BC               	movwf	??___ftmul
  5519  15A3  0837               	movf	___ftmul@f1+1,w
  5520  15A4  00BD               	movwf	??___ftmul+1
  5521  15A5  0838               	movf	___ftmul@f1+2,w
  5522  15A6  00BE               	movwf	??___ftmul+2
  5523  15A7  1003               	clrc
  5524  15A8  0D3D               	rlf	??___ftmul+1,w
  5525  15A9  0D3E               	rlf	??___ftmul+2,w
  5526  15AA  00BF               	movwf	??___ftmul+3
  5527  15AB  083F               	movf	??___ftmul+3,w
  5528  15AC  00C0               	movwf	___ftmul@exp
  5529  15AD  0840               	movf	___ftmul@exp,w
  5530  15AE  1D03               	btfss	3,2
  5531  15AF  2DB7               	goto	l2620
  5532  15B0  3000               	movlw	0
  5533  15B1  00B6               	movwf	?___ftmul
  5534  15B2  3000               	movlw	0
  5535  15B3  00B7               	movwf	?___ftmul+1
  5536  15B4  3000               	movlw	0
  5537  15B5  00B8               	movwf	?___ftmul+2
  5538  15B6  0008               	return
  5539  15B7                     l2620:	
  5540  15B7  0839               	movf	___ftmul@f2,w
  5541  15B8  00BC               	movwf	??___ftmul
  5542  15B9  083A               	movf	___ftmul@f2+1,w
  5543  15BA  00BD               	movwf	??___ftmul+1
  5544  15BB  083B               	movf	___ftmul@f2+2,w
  5545  15BC  00BE               	movwf	??___ftmul+2
  5546  15BD  1003               	clrc
  5547  15BE  0D3D               	rlf	??___ftmul+1,w
  5548  15BF  0D3E               	rlf	??___ftmul+2,w
  5549  15C0  00BF               	movwf	??___ftmul+3
  5550  15C1  083F               	movf	??___ftmul+3,w
  5551  15C2  00C5               	movwf	___ftmul@sign
  5552  15C3  0845               	movf	___ftmul@sign,w
  5553  15C4  1D03               	btfss	3,2
  5554  15C5  2DCD               	goto	l2626
  5555  15C6  3000               	movlw	0
  5556  15C7  00B6               	movwf	?___ftmul
  5557  15C8  3000               	movlw	0
  5558  15C9  00B7               	movwf	?___ftmul+1
  5559  15CA  3000               	movlw	0
  5560  15CB  00B8               	movwf	?___ftmul+2
  5561  15CC  0008               	return
  5562  15CD                     l2626:	
  5563  15CD  0845               	movf	___ftmul@sign,w
  5564  15CE  3E7B               	addlw	123
  5565  15CF  00BC               	movwf	??___ftmul
  5566  15D0  083C               	movf	??___ftmul,w
  5567  15D1  07C0               	addwf	___ftmul@exp,f
  5568  15D2  0836               	movf	___ftmul@f1,w
  5569  15D3  00BC               	movwf	??___ftmul
  5570  15D4  0837               	movf	___ftmul@f1+1,w
  5571  15D5  00BD               	movwf	??___ftmul+1
  5572  15D6  0838               	movf	___ftmul@f1+2,w
  5573  15D7  00BE               	movwf	??___ftmul+2
  5574  15D8  3010               	movlw	16
  5575  15D9                     u3305:	
  5576  15D9  36BE               	lsrf	??___ftmul+2,f
  5577  15DA  0CBD               	rrf	??___ftmul+1,f
  5578  15DB  0CBC               	rrf	??___ftmul,f
  5579  15DC  0B89               	decfsz	9,f
  5580  15DD  2DD9               	goto	u3305
  5581  15DE  083C               	movf	??___ftmul,w
  5582  15DF  00BF               	movwf	??___ftmul+3
  5583  15E0  083F               	movf	??___ftmul+3,w
  5584  15E1  00C5               	movwf	___ftmul@sign
  5585  15E2  0839               	movf	___ftmul@f2,w
  5586  15E3  00BC               	movwf	??___ftmul
  5587  15E4  083A               	movf	___ftmul@f2+1,w
  5588  15E5  00BD               	movwf	??___ftmul+1
  5589  15E6  083B               	movf	___ftmul@f2+2,w
  5590  15E7  00BE               	movwf	??___ftmul+2
  5591  15E8  3010               	movlw	16
  5592  15E9                     u3315:	
  5593  15E9  36BE               	lsrf	??___ftmul+2,f
  5594  15EA  0CBD               	rrf	??___ftmul+1,f
  5595  15EB  0CBC               	rrf	??___ftmul,f
  5596  15EC  0B89               	decfsz	9,f
  5597  15ED  2DE9               	goto	u3315
  5598  15EE  083C               	movf	??___ftmul,w
  5599  15EF  00BF               	movwf	??___ftmul+3
  5600  15F0  083F               	movf	??___ftmul+3,w
  5601  15F1  06C5               	xorwf	___ftmul@sign,f
  5602  15F2  3080               	movlw	128
  5603  15F3  00BC               	movwf	??___ftmul
  5604  15F4  083C               	movf	??___ftmul,w
  5605  15F5  05C5               	andwf	___ftmul@sign,f
  5606  15F6  17B7               	bsf	___ftmul@f1+1,7
  5607  15F7  17BA               	bsf	___ftmul@f2+1,7
  5608  15F8  30FF               	movlw	255
  5609  15F9  05B9               	andwf	___ftmul@f2,f
  5610  15FA  30FF               	movlw	255
  5611  15FB  05BA               	andwf	___ftmul@f2+1,f
  5612  15FC  3000               	movlw	0
  5613  15FD  05BB               	andwf	___ftmul@f2+2,f
  5614  15FE  3000               	movlw	0
  5615  15FF  00C1               	movwf	___ftmul@f3_as_product
  5616  1600  3000               	movlw	0
  5617  1601  00C2               	movwf	___ftmul@f3_as_product+1
  5618  1602  3000               	movlw	0
  5619  1603  00C3               	movwf	___ftmul@f3_as_product+2
  5620  1604  3007               	movlw	7
  5621  1605  00BC               	movwf	??___ftmul
  5622  1606  083C               	movf	??___ftmul,w
  5623  1607  00C4               	movwf	___ftmul@cntr
  5624  1608                     l2638:	
  5625  1608  1C36               	btfss	___ftmul@f1,0
  5626  1609  2E10               	goto	l2642
  5627  160A  0839               	movf	___ftmul@f2,w
  5628  160B  07C1               	addwf	___ftmul@f3_as_product,f
  5629  160C  083A               	movf	___ftmul@f2+1,w
  5630  160D  3DC2               	addwfc	___ftmul@f3_as_product+1,f
  5631  160E  083B               	movf	___ftmul@f2+2,w
  5632  160F  3DC3               	addwfc	___ftmul@f3_as_product+2,f
  5633  1610                     l2642:	
  5634  1610  3001               	movlw	1
  5635  1611                     u3335:	
  5636  1611  36B8               	lsrf	___ftmul@f1+2,f
  5637  1612  0CB7               	rrf	___ftmul@f1+1,f
  5638  1613  0CB6               	rrf	___ftmul@f1,f
  5639  1614  0B89               	decfsz	9,f
  5640  1615  2E11               	goto	u3335
  5641  1616  3001               	movlw	1
  5642  1617                     u3345:	
  5643  1617  35B9               	lslf	___ftmul@f2,f
  5644  1618  0DBA               	rlf	___ftmul@f2+1,f
  5645  1619  0DBB               	rlf	___ftmul@f2+2,f
  5646  161A  0B89               	decfsz	9,f
  5647  161B  2E17               	goto	u3345
  5648  161C  3001               	movlw	1
  5649  161D  02C4               	subwf	___ftmul@cntr,f
  5650  161E  1D03               	btfss	3,2
  5651  161F  2E08               	goto	l2638
  5652  1620  3009               	movlw	9
  5653  1621  00BC               	movwf	??___ftmul
  5654  1622  083C               	movf	??___ftmul,w
  5655  1623  00C4               	movwf	___ftmul@cntr
  5656  1624                     l2650:	
  5657  1624  1C36               	btfss	___ftmul@f1,0
  5658  1625  2E2C               	goto	l2654
  5659  1626  0839               	movf	___ftmul@f2,w
  5660  1627  07C1               	addwf	___ftmul@f3_as_product,f
  5661  1628  083A               	movf	___ftmul@f2+1,w
  5662  1629  3DC2               	addwfc	___ftmul@f3_as_product+1,f
  5663  162A  083B               	movf	___ftmul@f2+2,w
  5664  162B  3DC3               	addwfc	___ftmul@f3_as_product+2,f
  5665  162C                     l2654:	
  5666  162C  3001               	movlw	1
  5667  162D                     u3375:	
  5668  162D  36B8               	lsrf	___ftmul@f1+2,f
  5669  162E  0CB7               	rrf	___ftmul@f1+1,f
  5670  162F  0CB6               	rrf	___ftmul@f1,f
  5671  1630  0B89               	decfsz	9,f
  5672  1631  2E2D               	goto	u3375
  5673  1632  3001               	movlw	1
  5674  1633                     u3385:	
  5675  1633  36C3               	lsrf	___ftmul@f3_as_product+2,f
  5676  1634  0CC2               	rrf	___ftmul@f3_as_product+1,f
  5677  1635  0CC1               	rrf	___ftmul@f3_as_product,f
  5678  1636  0B89               	decfsz	9,f
  5679  1637  2E33               	goto	u3385
  5680  1638  3001               	movlw	1
  5681  1639  02C4               	subwf	___ftmul@cntr,f
  5682  163A  1D03               	btfss	3,2
  5683  163B  2E24               	goto	l2650
  5684  163C  0841               	movf	___ftmul@f3_as_product,w
  5685  163D  00A0               	movwf	___ftpack@arg
  5686  163E  0842               	movf	___ftmul@f3_as_product+1,w
  5687  163F  00A1               	movwf	___ftpack@arg+1
  5688  1640  0843               	movf	___ftmul@f3_as_product+2,w
  5689  1641  00A2               	movwf	___ftpack@arg+2
  5690  1642  0840               	movf	___ftmul@exp,w
  5691  1643  00BC               	movwf	??___ftmul
  5692  1644  083C               	movf	??___ftmul,w
  5693  1645  00A3               	movwf	___ftpack@exp
  5694  1646  0845               	movf	___ftmul@sign,w
  5695  1647  00BD               	movwf	??___ftmul+1
  5696  1648  083D               	movf	??___ftmul+1,w
  5697  1649  00A4               	movwf	___ftpack@sign
  5698  164A  3193  239A         	fcall	___ftpack
  5699  164C  0020               	movlb	0	; select bank0
  5700  164D  0820               	movf	?___ftpack,w
  5701  164E  00B6               	movwf	?___ftmul
  5702  164F  0821               	movf	?___ftpack+1,w
  5703  1650  00B7               	movwf	?___ftmul+1
  5704  1651  0822               	movf	?___ftpack+2,w
  5705  1652  00B8               	movwf	?___ftmul+2
  5706  1653  0008               	return
  5707  1654                     __end_of___ftmul:	
  5708                           
  5709                           	psect	text26
  5710  1264                     __ptext26:	
  5711 ;; *************** function ___awmod *****************
  5712 ;; Defined at:
  5713 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  5714 ;; Parameters:    Size  Location     Type
  5715 ;;  divisor         2    0[BANK0 ] int 
  5716 ;;  dividend        2    2[BANK0 ] int 
  5717 ;; Auto vars:     Size  Location     Type
  5718 ;;  sign            1    6[BANK0 ] unsigned char 
  5719 ;;  counter         1    5[BANK0 ] unsigned char 
  5720 ;; Return value:  Size  Location     Type
  5721 ;;                  2    0[BANK0 ] int 
  5722 ;; Registers used:
  5723 ;;		wreg, status,2, status,0
  5724 ;; Tracked objects:
  5725 ;;		On entry : 0/0
  5726 ;;		On exit  : 0/0
  5727 ;;		Unchanged: 0/0
  5728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5729 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5730 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5731 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5732 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5733 ;;Total ram usage:        7 bytes
  5734 ;; Hardware stack levels used:    1
  5735 ;; Hardware stack levels required when called:    4
  5736 ;; This function calls:
  5737 ;;		Nothing
  5738 ;; This function is called by:
  5739 ;;		_fround
  5740 ;;		_scale
  5741 ;; This function uses a non-reentrant model
  5742 ;;
  5743                           
  5744                           
  5745                           ;psect for function ___awmod
  5746  1264                     ___awmod:	
  5747                           
  5748                           ;incstack = 0
  5749                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5750  1264  0020               	movlb	0	; select bank0
  5751  1265  01A6               	clrf	___awmod@sign
  5752  1266  1FA3               	btfss	___awmod@dividend+1,7
  5753  1267  2A6F               	goto	l2514
  5754  1268  09A2               	comf	___awmod@dividend,f
  5755  1269  09A3               	comf	___awmod@dividend+1,f
  5756  126A  0AA2               	incf	___awmod@dividend,f
  5757  126B  1903               	skipnz
  5758  126C  0AA3               	incf	___awmod@dividend+1,f
  5759  126D  01A6               	clrf	___awmod@sign
  5760  126E  0AA6               	incf	___awmod@sign,f
  5761  126F                     l2514:	
  5762  126F  1FA1               	btfss	___awmod@divisor+1,7
  5763  1270  2A76               	goto	l2518
  5764  1271  09A0               	comf	___awmod@divisor,f
  5765  1272  09A1               	comf	___awmod@divisor+1,f
  5766  1273  0AA0               	incf	___awmod@divisor,f
  5767  1274  1903               	skipnz
  5768  1275  0AA1               	incf	___awmod@divisor+1,f
  5769  1276                     l2518:	
  5770  1276  0820               	movf	___awmod@divisor,w
  5771  1277  0421               	iorwf	___awmod@divisor+1,w
  5772  1278  1903               	btfsc	3,2
  5773  1279  2A9D               	goto	l2536
  5774  127A  01A5               	clrf	___awmod@counter
  5775  127B  0AA5               	incf	___awmod@counter,f
  5776  127C                     l2526:	
  5777  127C  1BA1               	btfsc	___awmod@divisor+1,7
  5778  127D  2A88               	goto	l2528
  5779  127E  3001               	movlw	1
  5780  127F                     u2995:	
  5781  127F  35A0               	lslf	___awmod@divisor,f
  5782  1280  0DA1               	rlf	___awmod@divisor+1,f
  5783  1281  0B89               	decfsz	9,f
  5784  1282  2A7F               	goto	u2995
  5785  1283  3001               	movlw	1
  5786  1284  00A4               	movwf	??___awmod
  5787  1285  0824               	movf	??___awmod,w
  5788  1286  07A5               	addwf	___awmod@counter,f
  5789  1287  2A7C               	goto	l2526
  5790  1288                     l2528:	
  5791  1288  0821               	movf	___awmod@divisor+1,w
  5792  1289  0223               	subwf	___awmod@dividend+1,w
  5793  128A  1D03               	skipz
  5794  128B  2A8E               	goto	u3015
  5795  128C  0820               	movf	___awmod@divisor,w
  5796  128D  0222               	subwf	___awmod@dividend,w
  5797  128E                     u3015:	
  5798  128E  1C03               	skipc
  5799  128F  2A94               	goto	l2532
  5800  1290  0820               	movf	___awmod@divisor,w
  5801  1291  02A2               	subwf	___awmod@dividend,f
  5802  1292  0821               	movf	___awmod@divisor+1,w
  5803  1293  3BA3               	subwfb	___awmod@dividend+1,f
  5804  1294                     l2532:	
  5805  1294  3001               	movlw	1
  5806  1295                     u3025:	
  5807  1295  36A1               	lsrf	___awmod@divisor+1,f
  5808  1296  0CA0               	rrf	___awmod@divisor,f
  5809  1297  0B89               	decfsz	9,f
  5810  1298  2A95               	goto	u3025
  5811  1299  3001               	movlw	1
  5812  129A  02A5               	subwf	___awmod@counter,f
  5813  129B  1D03               	btfss	3,2
  5814  129C  2A88               	goto	l2528
  5815  129D                     l2536:	
  5816  129D  0826               	movf	___awmod@sign,w
  5817  129E  1903               	btfsc	3,2
  5818  129F  2AA5               	goto	l2540
  5819  12A0  09A2               	comf	___awmod@dividend,f
  5820  12A1  09A3               	comf	___awmod@dividend+1,f
  5821  12A2  0AA2               	incf	___awmod@dividend,f
  5822  12A3  1903               	skipnz
  5823  12A4  0AA3               	incf	___awmod@dividend+1,f
  5824  12A5                     l2540:	
  5825  12A5  0823               	movf	___awmod@dividend+1,w
  5826  12A6  00A1               	movwf	?___awmod+1
  5827  12A7  0822               	movf	___awmod@dividend,w
  5828  12A8  00A0               	movwf	?___awmod
  5829  12A9  0008               	return
  5830  12AA                     __end_of___awmod:	
  5831                           
  5832                           	psect	text27
  5833  1348                     __ptext27:	
  5834 ;; *************** function ___awdiv *****************
  5835 ;; Defined at:
  5836 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  5837 ;; Parameters:    Size  Location     Type
  5838 ;;  divisor         2    7[BANK0 ] int 
  5839 ;;  dividend        2    9[BANK0 ] int 
  5840 ;; Auto vars:     Size  Location     Type
  5841 ;;  quotient        2   14[BANK0 ] int 
  5842 ;;  sign            1   13[BANK0 ] unsigned char 
  5843 ;;  counter         1   12[BANK0 ] unsigned char 
  5844 ;; Return value:  Size  Location     Type
  5845 ;;                  2    7[BANK0 ] int 
  5846 ;; Registers used:
  5847 ;;		wreg, status,2, status,0
  5848 ;; Tracked objects:
  5849 ;;		On entry : 0/0
  5850 ;;		On exit  : 0/0
  5851 ;;		Unchanged: 0/0
  5852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5853 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5854 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5855 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5856 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5857 ;;Total ram usage:        9 bytes
  5858 ;; Hardware stack levels used:    1
  5859 ;; Hardware stack levels required when called:    4
  5860 ;; This function calls:
  5861 ;;		Nothing
  5862 ;; This function is called by:
  5863 ;;		_fround
  5864 ;;		_scale
  5865 ;;		_printf
  5866 ;; This function uses a non-reentrant model
  5867 ;;
  5868                           
  5869                           
  5870                           ;psect for function ___awdiv
  5871  1348                     ___awdiv:	
  5872                           
  5873                           ;incstack = 0
  5874                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5875  1348  0020               	movlb	0	; select bank0
  5876  1349  01AD               	clrf	___awdiv@sign
  5877  134A  1FA8               	btfss	___awdiv@divisor+1,7
  5878  134B  2B53               	goto	l2470
  5879  134C  09A7               	comf	___awdiv@divisor,f
  5880  134D  09A8               	comf	___awdiv@divisor+1,f
  5881  134E  0AA7               	incf	___awdiv@divisor,f
  5882  134F  1903               	skipnz
  5883  1350  0AA8               	incf	___awdiv@divisor+1,f
  5884  1351  01AD               	clrf	___awdiv@sign
  5885  1352  0AAD               	incf	___awdiv@sign,f
  5886  1353                     l2470:	
  5887  1353  1FAA               	btfss	___awdiv@dividend+1,7
  5888  1354  2B5E               	goto	l2476
  5889  1355  09A9               	comf	___awdiv@dividend,f
  5890  1356  09AA               	comf	___awdiv@dividend+1,f
  5891  1357  0AA9               	incf	___awdiv@dividend,f
  5892  1358  1903               	skipnz
  5893  1359  0AAA               	incf	___awdiv@dividend+1,f
  5894  135A  3001               	movlw	1
  5895  135B  00AB               	movwf	??___awdiv
  5896  135C  082B               	movf	??___awdiv,w
  5897  135D  06AD               	xorwf	___awdiv@sign,f
  5898  135E                     l2476:	
  5899  135E  01AE               	clrf	___awdiv@quotient
  5900  135F  01AF               	clrf	___awdiv@quotient+1
  5901  1360  0827               	movf	___awdiv@divisor,w
  5902  1361  0428               	iorwf	___awdiv@divisor+1,w
  5903  1362  1903               	btfsc	3,2
  5904  1363  2B8D               	goto	l2498
  5905  1364  01AC               	clrf	___awdiv@counter
  5906  1365  0AAC               	incf	___awdiv@counter,f
  5907  1366                     l2486:	
  5908  1366  1BA8               	btfsc	___awdiv@divisor+1,7
  5909  1367  2B72               	goto	l2488
  5910  1368  3001               	movlw	1
  5911  1369                     u2895:	
  5912  1369  35A7               	lslf	___awdiv@divisor,f
  5913  136A  0DA8               	rlf	___awdiv@divisor+1,f
  5914  136B  0B89               	decfsz	9,f
  5915  136C  2B69               	goto	u2895
  5916  136D  3001               	movlw	1
  5917  136E  00AB               	movwf	??___awdiv
  5918  136F  082B               	movf	??___awdiv,w
  5919  1370  07AC               	addwf	___awdiv@counter,f
  5920  1371  2B66               	goto	l2486
  5921  1372                     l2488:	
  5922  1372  3001               	movlw	1
  5923  1373                     u2915:	
  5924  1373  35AE               	lslf	___awdiv@quotient,f
  5925  1374  0DAF               	rlf	___awdiv@quotient+1,f
  5926  1375  0B89               	decfsz	9,f
  5927  1376  2B73               	goto	u2915
  5928  1377  0828               	movf	___awdiv@divisor+1,w
  5929  1378  022A               	subwf	___awdiv@dividend+1,w
  5930  1379  1D03               	skipz
  5931  137A  2B7D               	goto	u2925
  5932  137B  0827               	movf	___awdiv@divisor,w
  5933  137C  0229               	subwf	___awdiv@dividend,w
  5934  137D                     u2925:	
  5935  137D  1C03               	skipc
  5936  137E  2B84               	goto	l2494
  5937  137F  0827               	movf	___awdiv@divisor,w
  5938  1380  02A9               	subwf	___awdiv@dividend,f
  5939  1381  0828               	movf	___awdiv@divisor+1,w
  5940  1382  3BAA               	subwfb	___awdiv@dividend+1,f
  5941  1383  142E               	bsf	___awdiv@quotient,0
  5942  1384                     l2494:	
  5943  1384  3001               	movlw	1
  5944  1385                     u2935:	
  5945  1385  36A8               	lsrf	___awdiv@divisor+1,f
  5946  1386  0CA7               	rrf	___awdiv@divisor,f
  5947  1387  0B89               	decfsz	9,f
  5948  1388  2B85               	goto	u2935
  5949  1389  3001               	movlw	1
  5950  138A  02AC               	subwf	___awdiv@counter,f
  5951  138B  1D03               	btfss	3,2
  5952  138C  2B72               	goto	l2488
  5953  138D                     l2498:	
  5954  138D  082D               	movf	___awdiv@sign,w
  5955  138E  1903               	btfsc	3,2
  5956  138F  2B95               	goto	l2502
  5957  1390  09AE               	comf	___awdiv@quotient,f
  5958  1391  09AF               	comf	___awdiv@quotient+1,f
  5959  1392  0AAE               	incf	___awdiv@quotient,f
  5960  1393  1903               	skipnz
  5961  1394  0AAF               	incf	___awdiv@quotient+1,f
  5962  1395                     l2502:	
  5963  1395  082F               	movf	___awdiv@quotient+1,w
  5964  1396  00A8               	movwf	?___awdiv+1
  5965  1397  082E               	movf	___awdiv@quotient,w
  5966  1398  00A7               	movwf	?___awdiv
  5967  1399  0008               	return
  5968  139A                     __end_of___awdiv:	
  5969                           
  5970                           	psect	text28
  5971  1654                     __ptext28:	
  5972 ;; *************** function __tdiv_to_l_ *****************
  5973 ;; Defined at:
  5974 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdivl.c"
  5975 ;; Parameters:    Size  Location     Type
  5976 ;;  f1              3    0[BANK0 ] float 
  5977 ;;  f2              3    3[BANK0 ] float 
  5978 ;; Auto vars:     Size  Location     Type
  5979 ;;  quot            4   10[BANK0 ] unsigned long 
  5980 ;;  exp1            1   15[BANK0 ] unsigned char 
  5981 ;;  cntr            1   14[BANK0 ] unsigned char 
  5982 ;; Return value:  Size  Location     Type
  5983 ;;                  4    0[BANK0 ] unsigned long 
  5984 ;; Registers used:
  5985 ;;		wreg, status,2, status,0
  5986 ;; Tracked objects:
  5987 ;;		On entry : 0/0
  5988 ;;		On exit  : 0/0
  5989 ;;		Unchanged: 0/0
  5990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5991 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5992 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5993 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5994 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5995 ;;Total ram usage:       16 bytes
  5996 ;; Hardware stack levels used:    1
  5997 ;; Hardware stack levels required when called:    4
  5998 ;; This function calls:
  5999 ;;		Nothing
  6000 ;; This function is called by:
  6001 ;;		_printf
  6002 ;; This function uses a non-reentrant model
  6003 ;;
  6004                           
  6005                           
  6006                           ;psect for function __tdiv_to_l_
  6007  1654                     __tdiv_to_l_:	
  6008                           
  6009                           ;incstack = 0
  6010                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  6011  1654  0020               	movlb	0	; select bank0
  6012  1655  0820               	movf	__tdiv_to_l_@f1,w
  6013  1656  00A6               	movwf	??__tdiv_to_l_
  6014  1657  0821               	movf	__tdiv_to_l_@f1+1,w
  6015  1658  00A7               	movwf	??__tdiv_to_l_+1
  6016  1659  0822               	movf	__tdiv_to_l_@f1+2,w
  6017  165A  00A8               	movwf	??__tdiv_to_l_+2
  6018  165B  1003               	clrc
  6019  165C  0D27               	rlf	??__tdiv_to_l_+1,w
  6020  165D  0D28               	rlf	??__tdiv_to_l_+2,w
  6021  165E  00A9               	movwf	??__tdiv_to_l_+3
  6022  165F  0829               	movf	??__tdiv_to_l_+3,w
  6023  1660  00AF               	movwf	__tdiv_to_l_@exp1
  6024  1661  082F               	movf	__tdiv_to_l_@exp1,w
  6025  1662  1D03               	btfss	3,2
  6026  1663  2E6D               	goto	l2754
  6027  1664  3000               	movlw	0
  6028  1665  00A3               	movwf	?__tdiv_to_l_+3
  6029  1666  3000               	movlw	0
  6030  1667  00A2               	movwf	?__tdiv_to_l_+2
  6031  1668  3000               	movlw	0
  6032  1669  00A1               	movwf	?__tdiv_to_l_+1
  6033  166A  3000               	movlw	0
  6034  166B  00A0               	movwf	?__tdiv_to_l_
  6035  166C  0008               	return
  6036  166D                     l2754:	
  6037  166D  0823               	movf	__tdiv_to_l_@f2,w
  6038  166E  00A6               	movwf	??__tdiv_to_l_
  6039  166F  0824               	movf	__tdiv_to_l_@f2+1,w
  6040  1670  00A7               	movwf	??__tdiv_to_l_+1
  6041  1671  0825               	movf	__tdiv_to_l_@f2+2,w
  6042  1672  00A8               	movwf	??__tdiv_to_l_+2
  6043  1673  1003               	clrc
  6044  1674  0D27               	rlf	??__tdiv_to_l_+1,w
  6045  1675  0D28               	rlf	??__tdiv_to_l_+2,w
  6046  1676  00A9               	movwf	??__tdiv_to_l_+3
  6047  1677  0829               	movf	??__tdiv_to_l_+3,w
  6048  1678  00AE               	movwf	__tdiv_to_l_@cntr
  6049  1679  082E               	movf	__tdiv_to_l_@cntr,w
  6050  167A  1D03               	btfss	3,2
  6051  167B  2E85               	goto	l830
  6052  167C  3000               	movlw	0
  6053  167D  00A3               	movwf	?__tdiv_to_l_+3
  6054  167E  3000               	movlw	0
  6055  167F  00A2               	movwf	?__tdiv_to_l_+2
  6056  1680  3000               	movlw	0
  6057  1681  00A1               	movwf	?__tdiv_to_l_+1
  6058  1682  3000               	movlw	0
  6059  1683  00A0               	movwf	?__tdiv_to_l_
  6060  1684  0008               	return
  6061  1685                     l830:	
  6062  1685  17A1               	bsf	__tdiv_to_l_@f1+1,7
  6063  1686  30FF               	movlw	255
  6064  1687  05A0               	andwf	__tdiv_to_l_@f1,f
  6065  1688  30FF               	movlw	255
  6066  1689  05A1               	andwf	__tdiv_to_l_@f1+1,f
  6067  168A  3000               	movlw	0
  6068  168B  05A2               	andwf	__tdiv_to_l_@f1+2,f
  6069  168C  17A4               	bsf	__tdiv_to_l_@f2+1,7
  6070  168D  30FF               	movlw	255
  6071  168E  05A3               	andwf	__tdiv_to_l_@f2,f
  6072  168F  30FF               	movlw	255
  6073  1690  05A4               	andwf	__tdiv_to_l_@f2+1,f
  6074  1691  3000               	movlw	0
  6075  1692  05A5               	andwf	__tdiv_to_l_@f2+2,f
  6076  1693  3000               	movlw	0
  6077  1694  00AD               	movwf	__tdiv_to_l_@quot+3
  6078  1695  3000               	movlw	0
  6079  1696  00AC               	movwf	__tdiv_to_l_@quot+2
  6080  1697  3000               	movlw	0
  6081  1698  00AB               	movwf	__tdiv_to_l_@quot+1
  6082  1699  3000               	movlw	0
  6083  169A  00AA               	movwf	__tdiv_to_l_@quot
  6084  169B  307F               	movlw	127
  6085  169C  02AF               	subwf	__tdiv_to_l_@exp1,f
  6086  169D  3098               	movlw	152
  6087  169E  072E               	addwf	__tdiv_to_l_@cntr,w
  6088  169F  00A6               	movwf	??__tdiv_to_l_
  6089  16A0  0826               	movf	??__tdiv_to_l_,w
  6090  16A1  02AF               	subwf	__tdiv_to_l_@exp1,f
  6091  16A2  3018               	movlw	24
  6092  16A3  00A6               	movwf	??__tdiv_to_l_
  6093  16A4  0826               	movf	??__tdiv_to_l_,w
  6094  16A5  00AE               	movwf	__tdiv_to_l_@cntr
  6095  16A6                     l2768:	
  6096  16A6  3001               	movlw	1
  6097  16A7                     u3525:	
  6098  16A7  35AA               	lslf	__tdiv_to_l_@quot,f
  6099  16A8  0DAB               	rlf	__tdiv_to_l_@quot+1,f
  6100  16A9  0DAC               	rlf	__tdiv_to_l_@quot+2,f
  6101  16AA  0DAD               	rlf	__tdiv_to_l_@quot+3,f
  6102  16AB  0B89               	decfsz	9,f
  6103  16AC  2EA7               	goto	u3525
  6104  16AD  0825               	movf	__tdiv_to_l_@f2+2,w
  6105  16AE  0222               	subwf	__tdiv_to_l_@f1+2,w
  6106  16AF  1D03               	skipz
  6107  16B0  2EB7               	goto	u3535
  6108  16B1  0824               	movf	__tdiv_to_l_@f2+1,w
  6109  16B2  0221               	subwf	__tdiv_to_l_@f1+1,w
  6110  16B3  1D03               	skipz
  6111  16B4  2EB7               	goto	u3535
  6112  16B5  0823               	movf	__tdiv_to_l_@f2,w
  6113  16B6  0220               	subwf	__tdiv_to_l_@f1,w
  6114  16B7                     u3535:	
  6115  16B7  1C03               	skipc
  6116  16B8  2EC0               	goto	l2776
  6117  16B9  0823               	movf	__tdiv_to_l_@f2,w
  6118  16BA  02A0               	subwf	__tdiv_to_l_@f1,f
  6119  16BB  0824               	movf	__tdiv_to_l_@f2+1,w
  6120  16BC  3BA1               	subwfb	__tdiv_to_l_@f1+1,f
  6121  16BD  0825               	movf	__tdiv_to_l_@f2+2,w
  6122  16BE  3BA2               	subwfb	__tdiv_to_l_@f1+2,f
  6123  16BF  142A               	bsf	__tdiv_to_l_@quot,0
  6124  16C0                     l2776:	
  6125  16C0  3001               	movlw	1
  6126  16C1                     u3545:	
  6127  16C1  35A0               	lslf	__tdiv_to_l_@f1,f
  6128  16C2  0DA1               	rlf	__tdiv_to_l_@f1+1,f
  6129  16C3  0DA2               	rlf	__tdiv_to_l_@f1+2,f
  6130  16C4  0B89               	decfsz	9,f
  6131  16C5  2EC1               	goto	u3545
  6132  16C6  3001               	movlw	1
  6133  16C7  02AE               	subwf	__tdiv_to_l_@cntr,f
  6134  16C8  1D03               	btfss	3,2
  6135  16C9  2EA6               	goto	l2768
  6136  16CA  1FAF               	btfss	__tdiv_to_l_@exp1,7
  6137  16CB  2EE8               	goto	l2788
  6138  16CC  082F               	movf	__tdiv_to_l_@exp1,w
  6139  16CD  3A80               	xorlw	128
  6140  16CE  3E97               	addlw	151
  6141  16CF  1803               	skipnc
  6142  16D0  2EDA               	goto	l2786
  6143  16D1  3000               	movlw	0
  6144  16D2  00A3               	movwf	?__tdiv_to_l_+3
  6145  16D3  3000               	movlw	0
  6146  16D4  00A2               	movwf	?__tdiv_to_l_+2
  6147  16D5  3000               	movlw	0
  6148  16D6  00A1               	movwf	?__tdiv_to_l_+1
  6149  16D7  3000               	movlw	0
  6150  16D8  00A0               	movwf	?__tdiv_to_l_
  6151  16D9  0008               	return
  6152  16DA                     l2786:	
  6153  16DA  3001               	movlw	1
  6154  16DB                     u3585:	
  6155  16DB  36AD               	lsrf	__tdiv_to_l_@quot+3,f
  6156  16DC  0CAC               	rrf	__tdiv_to_l_@quot+2,f
  6157  16DD  0CAB               	rrf	__tdiv_to_l_@quot+1,f
  6158  16DE  0CAA               	rrf	__tdiv_to_l_@quot,f
  6159  16DF  0B89               	decfsz	9,f
  6160  16E0  2EDB               	goto	u3585
  6161  16E1  3001               	movlw	1
  6162  16E2  00A6               	movwf	??__tdiv_to_l_
  6163  16E3  0826               	movf	??__tdiv_to_l_,w
  6164  16E4  07AF               	addwf	__tdiv_to_l_@exp1,f
  6165  16E5  1903               	btfsc	3,2
  6166  16E6  2F01               	goto	l2796
  6167  16E7  2EDA               	goto	l2786
  6168  16E8                     l2788:	
  6169  16E8  3018               	movlw	24
  6170  16E9  022F               	subwf	__tdiv_to_l_@exp1,w
  6171  16EA  1C03               	skipc
  6172  16EB  2EFE               	goto	l840
  6173  16EC  3000               	movlw	0
  6174  16ED  00A3               	movwf	?__tdiv_to_l_+3
  6175  16EE  3000               	movlw	0
  6176  16EF  00A2               	movwf	?__tdiv_to_l_+2
  6177  16F0  3000               	movlw	0
  6178  16F1  00A1               	movwf	?__tdiv_to_l_+1
  6179  16F2  3000               	movlw	0
  6180  16F3  00A0               	movwf	?__tdiv_to_l_
  6181  16F4  0008               	return
  6182  16F5                     l2794:	
  6183  16F5  3001               	movlw	1
  6184  16F6                     u3615:	
  6185  16F6  35AA               	lslf	__tdiv_to_l_@quot,f
  6186  16F7  0DAB               	rlf	__tdiv_to_l_@quot+1,f
  6187  16F8  0DAC               	rlf	__tdiv_to_l_@quot+2,f
  6188  16F9  0DAD               	rlf	__tdiv_to_l_@quot+3,f
  6189  16FA  0B89               	decfsz	9,f
  6190  16FB  2EF6               	goto	u3615
  6191  16FC  3001               	movlw	1
  6192  16FD  02AF               	subwf	__tdiv_to_l_@exp1,f
  6193  16FE                     l840:	
  6194  16FE  082F               	movf	__tdiv_to_l_@exp1,w
  6195  16FF  1D03               	btfss	3,2
  6196  1700  2EF5               	goto	l2794
  6197  1701                     l2796:	
  6198  1701  082D               	movf	__tdiv_to_l_@quot+3,w
  6199  1702  00A3               	movwf	?__tdiv_to_l_+3
  6200  1703  082C               	movf	__tdiv_to_l_@quot+2,w
  6201  1704  00A2               	movwf	?__tdiv_to_l_+2
  6202  1705  082B               	movf	__tdiv_to_l_@quot+1,w
  6203  1706  00A1               	movwf	?__tdiv_to_l_+1
  6204  1707  082A               	movf	__tdiv_to_l_@quot,w
  6205  1708  00A0               	movwf	?__tdiv_to_l_
  6206  1709  0008               	return
  6207  170A                     __end_of__tdiv_to_l_:	
  6208                           
  6209                           	psect	text29
  6210  0945                     __ptext29:	
  6211 ;; *************** function __div_to_l_ *****************
  6212 ;; Defined at:
  6213 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fldivl.c"
  6214 ;; Parameters:    Size  Location     Type
  6215 ;;  f1              3    0[BANK0 ] unsigned long 
  6216 ;;  f2              3    3[BANK0 ] unsigned long 
  6217 ;; Auto vars:     Size  Location     Type
  6218 ;;  quot            4   14[BANK0 ] unsigned long 
  6219 ;;  exp1            1   19[BANK0 ] unsigned char 
  6220 ;;  cntr            1   18[BANK0 ] unsigned char 
  6221 ;; Return value:  Size  Location     Type
  6222 ;;                  4    0[BANK0 ] unsigned long 
  6223 ;; Registers used:
  6224 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6225 ;; Tracked objects:
  6226 ;;		On entry : 0/0
  6227 ;;		On exit  : 0/0
  6228 ;;		Unchanged: 0/0
  6229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6230 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6231 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6232 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6233 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6234 ;;Total ram usage:       20 bytes
  6235 ;; Hardware stack levels used:    1
  6236 ;; Hardware stack levels required when called:    4
  6237 ;; This function calls:
  6238 ;;		Nothing
  6239 ;; This function is called by:
  6240 ;;		_printf
  6241 ;; This function uses a non-reentrant model
  6242 ;;
  6243                           
  6244                           
  6245                           ;psect for function __div_to_l_
  6246  0945                     __div_to_l_:	
  6247                           
  6248                           ;incstack = 0
  6249                           ; Regs used in __div_to_l_: [wreg+fsr1l+fsr1h+status,2+status,0]
  6250  0945  3020               	movlw	low (__div_to_l_@f1| 0)
  6251  0946  0086               	movwf	6
  6252  0947  0187               	clrf	7
  6253  0948  3F40               	moviw [0]fsr1
  6254  0949  0020               	movlb	0	; select bank0
  6255  094A  00A6               	movwf	??__div_to_l_
  6256  094B  3F41               	moviw [1]fsr1
  6257  094C  00A7               	movwf	??__div_to_l_+1
  6258  094D  3F42               	moviw [2]fsr1
  6259  094E  00A8               	movwf	??__div_to_l_+2
  6260  094F  3F43               	moviw [3]fsr1
  6261  0950  00A9               	movwf	??__div_to_l_+3
  6262  0951  1003               	clrc
  6263  0952  0D28               	rlf	??__div_to_l_+2,w
  6264  0953  0D29               	rlf	??__div_to_l_+3,w
  6265  0954  00AA               	movwf	??__div_to_l_+4
  6266  0955  082A               	movf	??__div_to_l_+4,w
  6267  0956  00B3               	movwf	__div_to_l_@exp1
  6268  0957  0833               	movf	__div_to_l_@exp1,w
  6269  0958  1D03               	btfss	3,2
  6270  0959  2963               	goto	l2806
  6271  095A  3000               	movlw	0
  6272  095B  00A3               	movwf	?__div_to_l_+3
  6273  095C  3000               	movlw	0
  6274  095D  00A2               	movwf	?__div_to_l_+2
  6275  095E  3000               	movlw	0
  6276  095F  00A1               	movwf	?__div_to_l_+1
  6277  0960  3000               	movlw	0
  6278  0961  00A0               	movwf	?__div_to_l_
  6279  0962  0008               	return
  6280  0963                     l2806:	
  6281  0963  3023               	movlw	low (__div_to_l_@f2| 0)
  6282  0964  0086               	movwf	6
  6283  0965  0187               	clrf	7
  6284  0966  3F40               	moviw [0]fsr1
  6285  0967  00A6               	movwf	??__div_to_l_
  6286  0968  3F41               	moviw [1]fsr1
  6287  0969  00A7               	movwf	??__div_to_l_+1
  6288  096A  3F42               	moviw [2]fsr1
  6289  096B  00A8               	movwf	??__div_to_l_+2
  6290  096C  3F43               	moviw [3]fsr1
  6291  096D  00A9               	movwf	??__div_to_l_+3
  6292  096E  1003               	clrc
  6293  096F  0D28               	rlf	??__div_to_l_+2,w
  6294  0970  0D29               	rlf	??__div_to_l_+3,w
  6295  0971  00AA               	movwf	??__div_to_l_+4
  6296  0972  082A               	movf	??__div_to_l_+4,w
  6297  0973  00B2               	movwf	__div_to_l_@cntr
  6298  0974  0832               	movf	__div_to_l_@cntr,w
  6299  0975  1D03               	btfss	3,2
  6300  0976  2980               	goto	l2812
  6301  0977  3000               	movlw	0
  6302  0978  00A3               	movwf	?__div_to_l_+3
  6303  0979  3000               	movlw	0
  6304  097A  00A2               	movwf	?__div_to_l_+2
  6305  097B  3000               	movlw	0
  6306  097C  00A1               	movwf	?__div_to_l_+1
  6307  097D  3000               	movlw	0
  6308  097E  00A0               	movwf	?__div_to_l_
  6309  097F  0008               	return
  6310  0980                     l2812:	
  6311  0980  3020               	movlw	low (__div_to_l_@f1| 0)
  6312  0981  0086               	movwf	6
  6313  0982  0187               	clrf	7
  6314  0983  3000               	movlw	0
  6315  0984  0481               	iorwf	1,f
  6316  0985  3141               	addfsr 1,1
  6317  0986  3000               	movlw	0
  6318  0987  0481               	iorwf	1,f
  6319  0988  3141               	addfsr 1,1
  6320  0989  3080               	movlw	128
  6321  098A  0481               	iorwf	1,f
  6322  098B  3141               	addfsr 1,1
  6323  098C  3000               	movlw	0
  6324  098D  0481               	iorwf	1,f
  6325  098E  3020               	movlw	low (__div_to_l_@f1| 0)
  6326  098F  0086               	movwf	6
  6327  0990  0187               	clrf	7
  6328  0991  30FF               	movlw	255
  6329  0992  0581               	andwf	1,f
  6330  0993  3141               	addfsr 1,1
  6331  0994  30FF               	movlw	255
  6332  0995  0581               	andwf	1,f
  6333  0996  3141               	addfsr 1,1
  6334  0997  30FF               	movlw	255
  6335  0998  0581               	andwf	1,f
  6336  0999  3141               	addfsr 1,1
  6337  099A  3000               	movlw	0
  6338  099B  0581               	andwf	1,f
  6339  099C  3023               	movlw	low (__div_to_l_@f2| 0)
  6340  099D  0086               	movwf	6
  6341  099E  0187               	clrf	7
  6342  099F  3000               	movlw	0
  6343  09A0  0481               	iorwf	1,f
  6344  09A1  3141               	addfsr 1,1
  6345  09A2  3000               	movlw	0
  6346  09A3  0481               	iorwf	1,f
  6347  09A4  3141               	addfsr 1,1
  6348  09A5  3080               	movlw	128
  6349  09A6  0481               	iorwf	1,f
  6350  09A7  3141               	addfsr 1,1
  6351  09A8  3000               	movlw	0
  6352  09A9  0481               	iorwf	1,f
  6353  09AA  3023               	movlw	low (__div_to_l_@f2| 0)
  6354  09AB  0086               	movwf	6
  6355  09AC  0187               	clrf	7
  6356  09AD  30FF               	movlw	255
  6357  09AE  0581               	andwf	1,f
  6358  09AF  3141               	addfsr 1,1
  6359  09B0  30FF               	movlw	255
  6360  09B1  0581               	andwf	1,f
  6361  09B2  3141               	addfsr 1,1
  6362  09B3  30FF               	movlw	255
  6363  09B4  0581               	andwf	1,f
  6364  09B5  3141               	addfsr 1,1
  6365  09B6  3000               	movlw	0
  6366  09B7  0581               	andwf	1,f
  6367  09B8  3000               	movlw	0
  6368  09B9  00B1               	movwf	__div_to_l_@quot+3
  6369  09BA  3000               	movlw	0
  6370  09BB  00B0               	movwf	__div_to_l_@quot+2
  6371  09BC  3000               	movlw	0
  6372  09BD  00AF               	movwf	__div_to_l_@quot+1
  6373  09BE  3000               	movlw	0
  6374  09BF  00AE               	movwf	__div_to_l_@quot
  6375  09C0  307F               	movlw	127
  6376  09C1  02B3               	subwf	__div_to_l_@exp1,f
  6377  09C2  30A0               	movlw	160
  6378  09C3  0732               	addwf	__div_to_l_@cntr,w
  6379  09C4  00A6               	movwf	??__div_to_l_
  6380  09C5  0826               	movf	??__div_to_l_,w
  6381  09C6  02B3               	subwf	__div_to_l_@exp1,f
  6382  09C7  3020               	movlw	32
  6383  09C8  00A6               	movwf	??__div_to_l_
  6384  09C9  0826               	movf	??__div_to_l_,w
  6385  09CA  00B2               	movwf	__div_to_l_@cntr
  6386  09CB                     l2822:	
  6387  09CB  3001               	movlw	1
  6388  09CC                     u3655:	
  6389  09CC  35AE               	lslf	__div_to_l_@quot,f
  6390  09CD  0DAF               	rlf	__div_to_l_@quot+1,f
  6391  09CE  0DB0               	rlf	__div_to_l_@quot+2,f
  6392  09CF  0DB1               	rlf	__div_to_l_@quot+3,f
  6393  09D0  0B89               	decfsz	9,f
  6394  09D1  29CC               	goto	u3655
  6395  09D2  3023               	movlw	low (__div_to_l_@f2| 0)
  6396  09D3  0086               	movwf	6
  6397  09D4  0187               	clrf	7
  6398  09D5  3F40               	moviw [0]fsr1
  6399  09D6  00A6               	movwf	??__div_to_l_
  6400  09D7  3F41               	moviw [1]fsr1
  6401  09D8  00A7               	movwf	??__div_to_l_+1
  6402  09D9  3F42               	moviw [2]fsr1
  6403  09DA  00A8               	movwf	??__div_to_l_+2
  6404  09DB  3F43               	moviw [3]fsr1
  6405  09DC  00A9               	movwf	??__div_to_l_+3
  6406  09DD  3020               	movlw	low (__div_to_l_@f1| 0)
  6407  09DE  0086               	movwf	6
  6408  09DF  0187               	clrf	7
  6409  09E0  3F40               	moviw [0]fsr1
  6410  09E1  00AA               	movwf	??__div_to_l_+4
  6411  09E2  3F41               	moviw [1]fsr1
  6412  09E3  00AB               	movwf	??__div_to_l_+5
  6413  09E4  3F42               	moviw [2]fsr1
  6414  09E5  00AC               	movwf	??__div_to_l_+6
  6415  09E6  3F43               	moviw [3]fsr1
  6416  09E7  00AD               	movwf	??__div_to_l_+7
  6417  09E8  0829               	movf	??__div_to_l_+3,w
  6418  09E9  022D               	subwf	??__div_to_l_+7,w
  6419  09EA  1D03               	skipz
  6420  09EB  29F6               	goto	u3665
  6421  09EC  0828               	movf	??__div_to_l_+2,w
  6422  09ED  022C               	subwf	??__div_to_l_+6,w
  6423  09EE  1D03               	skipz
  6424  09EF  29F6               	goto	u3665
  6425  09F0  0827               	movf	??__div_to_l_+1,w
  6426  09F1  022B               	subwf	??__div_to_l_+5,w
  6427  09F2  1D03               	skipz
  6428  09F3  29F6               	goto	u3665
  6429  09F4  0826               	movf	??__div_to_l_,w
  6430  09F5  022A               	subwf	??__div_to_l_+4,w
  6431  09F6                     u3665:	
  6432  09F6  1C03               	skipc
  6433  09F7  2A13               	goto	l2830
  6434  09F8  3023               	movlw	low (__div_to_l_@f2| 0)
  6435  09F9  0086               	movwf	6
  6436  09FA  0187               	clrf	7
  6437  09FB  3F40               	moviw [0]fsr1
  6438  09FC  00A6               	movwf	??__div_to_l_
  6439  09FD  3F41               	moviw [1]fsr1
  6440  09FE  00A7               	movwf	??__div_to_l_+1
  6441  09FF  3F42               	moviw [2]fsr1
  6442  0A00  00A8               	movwf	??__div_to_l_+2
  6443  0A01  3F43               	moviw [3]fsr1
  6444  0A02  00A9               	movwf	??__div_to_l_+3
  6445  0A03  3020               	movlw	low (__div_to_l_@f1| 0)
  6446  0A04  0086               	movwf	6
  6447  0A05  0187               	clrf	7
  6448  0A06  0826               	movf	??__div_to_l_,w
  6449  0A07  0281               	subwf	1,f
  6450  0A08  3141               	addfsr 1,1
  6451  0A09  0827               	movf	??__div_to_l_+1,w
  6452  0A0A  3B81               	subwfb	1,f
  6453  0A0B  3141               	addfsr 1,1
  6454  0A0C  0828               	movf	??__div_to_l_+2,w
  6455  0A0D  3B81               	subwfb	1,f
  6456  0A0E  3141               	addfsr 1,1
  6457  0A0F  0829               	movf	??__div_to_l_+3,w
  6458  0A10  3B81               	subwfb	1,f
  6459  0A11  317D               	addfsr 1,-3
  6460  0A12  142E               	bsf	__div_to_l_@quot,0
  6461  0A13                     l2830:	
  6462  0A13  3020               	movlw	low (__div_to_l_@f1| 0)
  6463  0A14  0086               	movwf	6
  6464  0A15  0187               	clrf	7
  6465  0A16  3581               	lslf	1,f
  6466  0A17  3141               	addfsr 1,1
  6467  0A18  0D81               	rlf	1,f
  6468  0A19  3141               	addfsr 1,1
  6469  0A1A  0D81               	rlf	1,f
  6470  0A1B  3141               	addfsr 1,1
  6471  0A1C  0D81               	rlf	1,f
  6472  0A1D  317D               	addfsr 1,-3
  6473  0A1E  3001               	movlw	1
  6474  0A1F  02B2               	subwf	__div_to_l_@cntr,f
  6475  0A20  1D03               	btfss	3,2
  6476  0A21  29CB               	goto	l2822
  6477  0A22  1FB3               	btfss	__div_to_l_@exp1,7
  6478  0A23  2A40               	goto	l2842
  6479  0A24  0833               	movf	__div_to_l_@exp1,w
  6480  0A25  3A80               	xorlw	128
  6481  0A26  3E9F               	addlw	159
  6482  0A27  1803               	skipnc
  6483  0A28  2A32               	goto	l2840
  6484  0A29  3000               	movlw	0
  6485  0A2A  00A3               	movwf	?__div_to_l_+3
  6486  0A2B  3000               	movlw	0
  6487  0A2C  00A2               	movwf	?__div_to_l_+2
  6488  0A2D  3000               	movlw	0
  6489  0A2E  00A1               	movwf	?__div_to_l_+1
  6490  0A2F  3000               	movlw	0
  6491  0A30  00A0               	movwf	?__div_to_l_
  6492  0A31  0008               	return
  6493  0A32                     l2840:	
  6494  0A32  3001               	movlw	1
  6495  0A33                     u3705:	
  6496  0A33  36B1               	lsrf	__div_to_l_@quot+3,f
  6497  0A34  0CB0               	rrf	__div_to_l_@quot+2,f
  6498  0A35  0CAF               	rrf	__div_to_l_@quot+1,f
  6499  0A36  0CAE               	rrf	__div_to_l_@quot,f
  6500  0A37  0B89               	decfsz	9,f
  6501  0A38  2A33               	goto	u3705
  6502  0A39  3001               	movlw	1
  6503  0A3A  00A6               	movwf	??__div_to_l_
  6504  0A3B  0826               	movf	??__div_to_l_,w
  6505  0A3C  07B3               	addwf	__div_to_l_@exp1,f
  6506  0A3D  1903               	btfsc	3,2
  6507  0A3E  2A59               	goto	l2850
  6508  0A3F  2A32               	goto	l2840
  6509  0A40                     l2842:	
  6510  0A40  3020               	movlw	32
  6511  0A41  0233               	subwf	__div_to_l_@exp1,w
  6512  0A42  1C03               	skipc
  6513  0A43  2A56               	goto	l761
  6514  0A44  3000               	movlw	0
  6515  0A45  00A3               	movwf	?__div_to_l_+3
  6516  0A46  3000               	movlw	0
  6517  0A47  00A2               	movwf	?__div_to_l_+2
  6518  0A48  3000               	movlw	0
  6519  0A49  00A1               	movwf	?__div_to_l_+1
  6520  0A4A  3000               	movlw	0
  6521  0A4B  00A0               	movwf	?__div_to_l_
  6522  0A4C  0008               	return
  6523  0A4D                     l2848:	
  6524  0A4D  3001               	movlw	1
  6525  0A4E                     u3735:	
  6526  0A4E  35AE               	lslf	__div_to_l_@quot,f
  6527  0A4F  0DAF               	rlf	__div_to_l_@quot+1,f
  6528  0A50  0DB0               	rlf	__div_to_l_@quot+2,f
  6529  0A51  0DB1               	rlf	__div_to_l_@quot+3,f
  6530  0A52  0B89               	decfsz	9,f
  6531  0A53  2A4E               	goto	u3735
  6532  0A54  3001               	movlw	1
  6533  0A55  02B3               	subwf	__div_to_l_@exp1,f
  6534  0A56                     l761:	
  6535  0A56  0833               	movf	__div_to_l_@exp1,w
  6536  0A57  1D03               	btfss	3,2
  6537  0A58  2A4D               	goto	l2848
  6538  0A59                     l2850:	
  6539  0A59  0831               	movf	__div_to_l_@quot+3,w
  6540  0A5A  00A3               	movwf	?__div_to_l_+3
  6541  0A5B  0830               	movf	__div_to_l_@quot+2,w
  6542  0A5C  00A2               	movwf	?__div_to_l_+2
  6543  0A5D  082F               	movf	__div_to_l_@quot+1,w
  6544  0A5E  00A1               	movwf	?__div_to_l_+1
  6545  0A5F  082E               	movf	__div_to_l_@quot,w
  6546  0A60  00A0               	movwf	?__div_to_l_
  6547  0A61  0008               	return
  6548  0A62                     __end_of__div_to_l_:	
  6549                           
  6550                           	psect	text30
  6551  0805                     __ptext30:	
  6552 ;; *************** function ___lltoft *****************
  6553 ;; Defined at:
  6554 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
  6555 ;; Parameters:    Size  Location     Type
  6556 ;;  c               4    8[BANK0 ] unsigned long 
  6557 ;; Auto vars:     Size  Location     Type
  6558 ;;  exp             1   13[BANK0 ] unsigned char 
  6559 ;; Return value:  Size  Location     Type
  6560 ;;                  3    8[BANK0 ] float 
  6561 ;; Registers used:
  6562 ;;		wreg, status,2, status,0, pclath, cstack
  6563 ;; Tracked objects:
  6564 ;;		On entry : 0/0
  6565 ;;		On exit  : 0/0
  6566 ;;		Unchanged: 0/0
  6567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6568 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6569 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6570 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6571 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6572 ;;Total ram usage:        6 bytes
  6573 ;; Hardware stack levels used:    1
  6574 ;; Hardware stack levels required when called:    5
  6575 ;; This function calls:
  6576 ;;		___ftpack
  6577 ;; This function is called by:
  6578 ;;		_printf
  6579 ;; This function uses a non-reentrant model
  6580 ;;
  6581                           
  6582                           
  6583                           ;psect for function ___lltoft
  6584  0805                     ___lltoft:	
  6585                           
  6586                           ;incstack = 0
  6587                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  6588  0805  308E               	movlw	142
  6589  0806  0020               	movlb	0	; select bank0
  6590  0807  00AC               	movwf	??___lltoft
  6591  0808  082C               	movf	??___lltoft,w
  6592  0809  00AD               	movwf	___lltoft@exp
  6593  080A                     l2980:	
  6594  080A  30FF               	movlw	255
  6595  080B  052B               	andwf	___lltoft@c+3,w
  6596  080C  1903               	btfsc	3,2
  6597  080D  281A               	goto	l2982
  6598  080E  3001               	movlw	1
  6599  080F                     u4035:	
  6600  080F  36AB               	lsrf	___lltoft@c+3,f
  6601  0810  0CAA               	rrf	___lltoft@c+2,f
  6602  0811  0CA9               	rrf	___lltoft@c+1,f
  6603  0812  0CA8               	rrf	___lltoft@c,f
  6604  0813  0B89               	decfsz	9,f
  6605  0814  280F               	goto	u4035
  6606  0815  3001               	movlw	1
  6607  0816  00AC               	movwf	??___lltoft
  6608  0817  082C               	movf	??___lltoft,w
  6609  0818  07AD               	addwf	___lltoft@exp,f
  6610  0819  280A               	goto	l2980
  6611  081A                     l2982:	
  6612  081A  0828               	movf	___lltoft@c,w
  6613  081B  00A0               	movwf	___ftpack@arg
  6614  081C  0829               	movf	___lltoft@c+1,w
  6615  081D  00A1               	movwf	___ftpack@arg+1
  6616  081E  082A               	movf	___lltoft@c+2,w
  6617  081F  00A2               	movwf	___ftpack@arg+2
  6618  0820  082D               	movf	___lltoft@exp,w
  6619  0821  00AC               	movwf	??___lltoft
  6620  0822  082C               	movf	??___lltoft,w
  6621  0823  00A3               	movwf	___ftpack@exp
  6622  0824  01A4               	clrf	___ftpack@sign
  6623  0825  3193  239A         	fcall	___ftpack
  6624  0827  0020               	movlb	0	; select bank0
  6625  0828  0820               	movf	?___ftpack,w
  6626  0829  00A8               	movwf	?___lltoft
  6627  082A  0821               	movf	?___ftpack+1,w
  6628  082B  00A9               	movwf	?___lltoft+1
  6629  082C  0822               	movf	?___ftpack+2,w
  6630  082D  00AA               	movwf	?___lltoft+2
  6631  082E  0008               	return
  6632  082F                     __end_of___lltoft:	
  6633                           
  6634                           	psect	text31
  6635  1221                     __ptext31:	
  6636 ;; *************** function ___llmod *****************
  6637 ;; Defined at:
  6638 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\llmod.c"
  6639 ;; Parameters:    Size  Location     Type
  6640 ;;  divisor         4   14[BANK0 ] unsigned long 
  6641 ;;  dividend        4   18[BANK0 ] unsigned long 
  6642 ;; Auto vars:     Size  Location     Type
  6643 ;;  counter         1   23[BANK0 ] unsigned char 
  6644 ;; Return value:  Size  Location     Type
  6645 ;;                  4   14[BANK0 ] unsigned long 
  6646 ;; Registers used:
  6647 ;;		wreg, status,2, status,0
  6648 ;; Tracked objects:
  6649 ;;		On entry : 0/0
  6650 ;;		On exit  : 0/0
  6651 ;;		Unchanged: 0/0
  6652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6653 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6654 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6655 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6656 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6657 ;;Total ram usage:       10 bytes
  6658 ;; Hardware stack levels used:    1
  6659 ;; Hardware stack levels required when called:    4
  6660 ;; This function calls:
  6661 ;;		Nothing
  6662 ;; This function is called by:
  6663 ;;		_printf
  6664 ;; This function uses a non-reentrant model
  6665 ;;
  6666                           
  6667                           
  6668                           ;psect for function ___llmod
  6669  1221                     ___llmod:	
  6670                           
  6671                           ;incstack = 0
  6672                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  6673  1221  0020               	movlb	0	; select bank0
  6674  1222  0831               	movf	___llmod@divisor+3,w
  6675  1223  0430               	iorwf	___llmod@divisor+2,w
  6676  1224  042F               	iorwf	___llmod@divisor+1,w
  6677  1225  042E               	iorwf	___llmod@divisor,w
  6678  1226  1903               	skipnz
  6679  1227  2A5B               	goto	l2972
  6680  1228  01B7               	clrf	___llmod@counter
  6681  1229  0AB7               	incf	___llmod@counter,f
  6682  122A                     l2962:	
  6683  122A  1BB1               	btfsc	___llmod@divisor+3,7
  6684  122B  2A38               	goto	l2964
  6685  122C  3001               	movlw	1
  6686  122D                     u3985:	
  6687  122D  35AE               	lslf	___llmod@divisor,f
  6688  122E  0DAF               	rlf	___llmod@divisor+1,f
  6689  122F  0DB0               	rlf	___llmod@divisor+2,f
  6690  1230  0DB1               	rlf	___llmod@divisor+3,f
  6691  1231  0B89               	decfsz	9,f
  6692  1232  2A2D               	goto	u3985
  6693  1233  3001               	movlw	1
  6694  1234  00B6               	movwf	??___llmod
  6695  1235  0836               	movf	??___llmod,w
  6696  1236  07B7               	addwf	___llmod@counter,f
  6697  1237  2A2A               	goto	l2962
  6698  1238                     l2964:	
  6699  1238  0831               	movf	___llmod@divisor+3,w
  6700  1239  0235               	subwf	___llmod@dividend+3,w
  6701  123A  1D03               	skipz
  6702  123B  2A46               	goto	u4005
  6703  123C  0830               	movf	___llmod@divisor+2,w
  6704  123D  0234               	subwf	___llmod@dividend+2,w
  6705  123E  1D03               	skipz
  6706  123F  2A46               	goto	u4005
  6707  1240  082F               	movf	___llmod@divisor+1,w
  6708  1241  0233               	subwf	___llmod@dividend+1,w
  6709  1242  1D03               	skipz
  6710  1243  2A46               	goto	u4005
  6711  1244  082E               	movf	___llmod@divisor,w
  6712  1245  0232               	subwf	___llmod@dividend,w
  6713  1246                     u4005:	
  6714  1246  1C03               	skipc
  6715  1247  2A50               	goto	l2968
  6716  1248  082E               	movf	___llmod@divisor,w
  6717  1249  02B2               	subwf	___llmod@dividend,f
  6718  124A  082F               	movf	___llmod@divisor+1,w
  6719  124B  3BB3               	subwfb	___llmod@dividend+1,f
  6720  124C  0830               	movf	___llmod@divisor+2,w
  6721  124D  3BB4               	subwfb	___llmod@dividend+2,f
  6722  124E  0831               	movf	___llmod@divisor+3,w
  6723  124F  3BB5               	subwfb	___llmod@dividend+3,f
  6724  1250                     l2968:	
  6725  1250  3001               	movlw	1
  6726  1251                     u4015:	
  6727  1251  36B1               	lsrf	___llmod@divisor+3,f
  6728  1252  0CB0               	rrf	___llmod@divisor+2,f
  6729  1253  0CAF               	rrf	___llmod@divisor+1,f
  6730  1254  0CAE               	rrf	___llmod@divisor,f
  6731  1255  0B89               	decfsz	9,f
  6732  1256  2A51               	goto	u4015
  6733  1257  3001               	movlw	1
  6734  1258  02B7               	subwf	___llmod@counter,f
  6735  1259  1D03               	btfss	3,2
  6736  125A  2A38               	goto	l2964
  6737  125B                     l2972:	
  6738  125B  0835               	movf	___llmod@dividend+3,w
  6739  125C  00B1               	movwf	?___llmod+3
  6740  125D  0834               	movf	___llmod@dividend+2,w
  6741  125E  00B0               	movwf	?___llmod+2
  6742  125F  0833               	movf	___llmod@dividend+1,w
  6743  1260  00AF               	movwf	?___llmod+1
  6744  1261  0832               	movf	___llmod@dividend,w
  6745  1262  00AE               	movwf	?___llmod
  6746  1263  0008               	return
  6747  1264                     __end_of___llmod:	
  6748                           
  6749                           	psect	text32
  6750  07A9                     __ptext32:	
  6751 ;; *************** function ___lldiv *****************
  6752 ;; Defined at:
  6753 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lldiv.c"
  6754 ;; Parameters:    Size  Location     Type
  6755 ;;  divisor         4    0[BANK0 ] unsigned long 
  6756 ;;  dividend        4    4[BANK0 ] unsigned long 
  6757 ;; Auto vars:     Size  Location     Type
  6758 ;;  quotient        4    9[BANK0 ] unsigned long 
  6759 ;;  counter         1   13[BANK0 ] unsigned char 
  6760 ;; Return value:  Size  Location     Type
  6761 ;;                  4    0[BANK0 ] unsigned long 
  6762 ;; Registers used:
  6763 ;;		wreg, status,2, status,0
  6764 ;; Tracked objects:
  6765 ;;		On entry : 0/0
  6766 ;;		On exit  : 0/0
  6767 ;;		Unchanged: 0/0
  6768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6769 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6770 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6771 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6772 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6773 ;;Total ram usage:       14 bytes
  6774 ;; Hardware stack levels used:    1
  6775 ;; Hardware stack levels required when called:    4
  6776 ;; This function calls:
  6777 ;;		Nothing
  6778 ;; This function is called by:
  6779 ;;		_printf
  6780 ;; This function uses a non-reentrant model
  6781 ;;
  6782                           
  6783                           
  6784                           ;psect for function ___lldiv
  6785  07A9                     ___lldiv:	
  6786                           
  6787                           ;incstack = 0
  6788                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6789  07A9  3000               	movlw	0
  6790  07AA  0020               	movlb	0	; select bank0
  6791  07AB  00AC               	movwf	___lldiv@quotient+3
  6792  07AC  3000               	movlw	0
  6793  07AD  00AB               	movwf	___lldiv@quotient+2
  6794  07AE  3000               	movlw	0
  6795  07AF  00AA               	movwf	___lldiv@quotient+1
  6796  07B0  3000               	movlw	0
  6797  07B1  00A9               	movwf	___lldiv@quotient
  6798  07B2  0823               	movf	___lldiv@divisor+3,w
  6799  07B3  0422               	iorwf	___lldiv@divisor+2,w
  6800  07B4  0421               	iorwf	___lldiv@divisor+1,w
  6801  07B5  0420               	iorwf	___lldiv@divisor,w
  6802  07B6  1903               	skipnz
  6803  07B7  2FF3               	goto	l2952
  6804  07B8  01AD               	clrf	___lldiv@counter
  6805  07B9  0AAD               	incf	___lldiv@counter,f
  6806  07BA                     l2938:	
  6807  07BA  1BA3               	btfsc	___lldiv@divisor+3,7
  6808  07BB  2FC8               	goto	l2940
  6809  07BC  3001               	movlw	1
  6810  07BD                     u3915:	
  6811  07BD  35A0               	lslf	___lldiv@divisor,f
  6812  07BE  0DA1               	rlf	___lldiv@divisor+1,f
  6813  07BF  0DA2               	rlf	___lldiv@divisor+2,f
  6814  07C0  0DA3               	rlf	___lldiv@divisor+3,f
  6815  07C1  0B89               	decfsz	9,f
  6816  07C2  2FBD               	goto	u3915
  6817  07C3  3001               	movlw	1
  6818  07C4  00A8               	movwf	??___lldiv
  6819  07C5  0828               	movf	??___lldiv,w
  6820  07C6  07AD               	addwf	___lldiv@counter,f
  6821  07C7  2FBA               	goto	l2938
  6822  07C8                     l2940:	
  6823  07C8  3001               	movlw	1
  6824  07C9                     u3935:	
  6825  07C9  35A9               	lslf	___lldiv@quotient,f
  6826  07CA  0DAA               	rlf	___lldiv@quotient+1,f
  6827  07CB  0DAB               	rlf	___lldiv@quotient+2,f
  6828  07CC  0DAC               	rlf	___lldiv@quotient+3,f
  6829  07CD  0B89               	decfsz	9,f
  6830  07CE  2FC9               	goto	u3935
  6831  07CF  0823               	movf	___lldiv@divisor+3,w
  6832  07D0  0227               	subwf	___lldiv@dividend+3,w
  6833  07D1  1D03               	skipz
  6834  07D2  2FDD               	goto	u3945
  6835  07D3  0822               	movf	___lldiv@divisor+2,w
  6836  07D4  0226               	subwf	___lldiv@dividend+2,w
  6837  07D5  1D03               	skipz
  6838  07D6  2FDD               	goto	u3945
  6839  07D7  0821               	movf	___lldiv@divisor+1,w
  6840  07D8  0225               	subwf	___lldiv@dividend+1,w
  6841  07D9  1D03               	skipz
  6842  07DA  2FDD               	goto	u3945
  6843  07DB  0820               	movf	___lldiv@divisor,w
  6844  07DC  0224               	subwf	___lldiv@dividend,w
  6845  07DD                     u3945:	
  6846  07DD  1C03               	skipc
  6847  07DE  2FE8               	goto	l2948
  6848  07DF  0820               	movf	___lldiv@divisor,w
  6849  07E0  02A4               	subwf	___lldiv@dividend,f
  6850  07E1  0821               	movf	___lldiv@divisor+1,w
  6851  07E2  3BA5               	subwfb	___lldiv@dividend+1,f
  6852  07E3  0822               	movf	___lldiv@divisor+2,w
  6853  07E4  3BA6               	subwfb	___lldiv@dividend+2,f
  6854  07E5  0823               	movf	___lldiv@divisor+3,w
  6855  07E6  3BA7               	subwfb	___lldiv@dividend+3,f
  6856  07E7  1429               	bsf	___lldiv@quotient,0
  6857  07E8                     l2948:	
  6858  07E8  3001               	movlw	1
  6859  07E9                     u3955:	
  6860  07E9  36A3               	lsrf	___lldiv@divisor+3,f
  6861  07EA  0CA2               	rrf	___lldiv@divisor+2,f
  6862  07EB  0CA1               	rrf	___lldiv@divisor+1,f
  6863  07EC  0CA0               	rrf	___lldiv@divisor,f
  6864  07ED  0B89               	decfsz	9,f
  6865  07EE  2FE9               	goto	u3955
  6866  07EF  3001               	movlw	1
  6867  07F0  02AD               	subwf	___lldiv@counter,f
  6868  07F1  1D03               	btfss	3,2
  6869  07F2  2FC8               	goto	l2940
  6870  07F3                     l2952:	
  6871  07F3  082C               	movf	___lldiv@quotient+3,w
  6872  07F4  00A3               	movwf	?___lldiv+3
  6873  07F5  082B               	movf	___lldiv@quotient+2,w
  6874  07F6  00A2               	movwf	?___lldiv+2
  6875  07F7  082A               	movf	___lldiv@quotient+1,w
  6876  07F8  00A1               	movwf	?___lldiv+1
  6877  07F9  0829               	movf	___lldiv@quotient,w
  6878  07FA  00A0               	movwf	?___lldiv
  6879  07FB  0008               	return
  6880  07FC                     __end_of___lldiv:	
  6881                           
  6882                           	psect	text33
  6883  13FF                     __ptext33:	
  6884 ;; *************** function ___fttol *****************
  6885 ;; Defined at:
  6886 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  6887 ;; Parameters:    Size  Location     Type
  6888 ;;  f1              3   47[BANK0 ] float 
  6889 ;; Auto vars:     Size  Location     Type
  6890 ;;  lval            4   56[BANK0 ] unsigned long 
  6891 ;;  exp1            1   60[BANK0 ] unsigned char 
  6892 ;;  sign1           1   55[BANK0 ] unsigned char 
  6893 ;; Return value:  Size  Location     Type
  6894 ;;                  4   47[BANK0 ] long 
  6895 ;; Registers used:
  6896 ;;		wreg, status,2, status,0
  6897 ;; Tracked objects:
  6898 ;;		On entry : 0/0
  6899 ;;		On exit  : 0/0
  6900 ;;		Unchanged: 0/0
  6901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6902 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6903 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6904 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6905 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6906 ;;Total ram usage:       14 bytes
  6907 ;; Hardware stack levels used:    1
  6908 ;; Hardware stack levels required when called:    4
  6909 ;; This function calls:
  6910 ;;		Nothing
  6911 ;; This function is called by:
  6912 ;;		_printf
  6913 ;; This function uses a non-reentrant model
  6914 ;;
  6915                           
  6916                           
  6917                           ;psect for function ___fttol
  6918  13FF                     ___fttol:	
  6919                           
  6920                           ;incstack = 0
  6921                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6922  13FF  0020               	movlb	0	; select bank0
  6923  1400  084F               	movf	___fttol@f1,w
  6924  1401  00D3               	movwf	??___fttol
  6925  1402  0850               	movf	___fttol@f1+1,w
  6926  1403  00D4               	movwf	??___fttol+1
  6927  1404  0851               	movf	___fttol@f1+2,w
  6928  1405  00D5               	movwf	??___fttol+2
  6929  1406  1003               	clrc
  6930  1407  0D54               	rlf	??___fttol+1,w
  6931  1408  0D55               	rlf	??___fttol+2,w
  6932  1409  00D6               	movwf	??___fttol+3
  6933  140A  0856               	movf	??___fttol+3,w
  6934  140B  00DC               	movwf	___fttol@exp1
  6935  140C  085C               	movf	___fttol@exp1,w
  6936  140D  1D03               	btfss	3,2
  6937  140E  2C18               	goto	l2896
  6938  140F  3000               	movlw	0
  6939  1410  00D2               	movwf	?___fttol+3
  6940  1411  3000               	movlw	0
  6941  1412  00D1               	movwf	?___fttol+2
  6942  1413  3000               	movlw	0
  6943  1414  00D0               	movwf	?___fttol+1
  6944  1415  3000               	movlw	0
  6945  1416  00CF               	movwf	?___fttol
  6946  1417  0008               	return
  6947  1418                     l2896:	
  6948  1418  084F               	movf	___fttol@f1,w
  6949  1419  00D3               	movwf	??___fttol
  6950  141A  0850               	movf	___fttol@f1+1,w
  6951  141B  00D4               	movwf	??___fttol+1
  6952  141C  0851               	movf	___fttol@f1+2,w
  6953  141D  00D5               	movwf	??___fttol+2
  6954  141E  3017               	movlw	23
  6955  141F                     u3815:	
  6956  141F  36D5               	lsrf	??___fttol+2,f
  6957  1420  0CD4               	rrf	??___fttol+1,f
  6958  1421  0CD3               	rrf	??___fttol,f
  6959  1422  0B89               	decfsz	9,f
  6960  1423  2C1F               	goto	u3815
  6961  1424  0853               	movf	??___fttol,w
  6962  1425  00D6               	movwf	??___fttol+3
  6963  1426  0856               	movf	??___fttol+3,w
  6964  1427  00D7               	movwf	___fttol@sign1
  6965  1428  17D0               	bsf	___fttol@f1+1,7
  6966  1429  30FF               	movlw	255
  6967  142A  05CF               	andwf	___fttol@f1,f
  6968  142B  30FF               	movlw	255
  6969  142C  05D0               	andwf	___fttol@f1+1,f
  6970  142D  3000               	movlw	0
  6971  142E  05D1               	andwf	___fttol@f1+2,f
  6972  142F  084F               	movf	___fttol@f1,w
  6973  1430  00D8               	movwf	___fttol@lval
  6974  1431  0850               	movf	___fttol@f1+1,w
  6975  1432  00D9               	movwf	___fttol@lval+1
  6976  1433  0851               	movf	___fttol@f1+2,w
  6977  1434  00DA               	movwf	___fttol@lval+2
  6978  1435  01DB               	clrf	___fttol@lval+3
  6979  1436  308E               	movlw	142
  6980  1437  02DC               	subwf	___fttol@exp1,f
  6981  1438  1FDC               	btfss	___fttol@exp1,7
  6982  1439  2C56               	goto	l2916
  6983  143A  085C               	movf	___fttol@exp1,w
  6984  143B  3A80               	xorlw	128
  6985  143C  3E8F               	addlw	143
  6986  143D  1803               	skipnc
  6987  143E  2C48               	goto	l2914
  6988  143F  3000               	movlw	0
  6989  1440  00D2               	movwf	?___fttol+3
  6990  1441  3000               	movlw	0
  6991  1442  00D1               	movwf	?___fttol+2
  6992  1443  3000               	movlw	0
  6993  1444  00D0               	movwf	?___fttol+1
  6994  1445  3000               	movlw	0
  6995  1446  00CF               	movwf	?___fttol
  6996  1447  0008               	return
  6997  1448                     l2914:	
  6998  1448  3001               	movlw	1
  6999  1449                     u3845:	
  7000  1449  36DB               	lsrf	___fttol@lval+3,f
  7001  144A  0CDA               	rrf	___fttol@lval+2,f
  7002  144B  0CD9               	rrf	___fttol@lval+1,f
  7003  144C  0CD8               	rrf	___fttol@lval,f
  7004  144D  0B89               	decfsz	9,f
  7005  144E  2C49               	goto	u3845
  7006  144F  3001               	movlw	1
  7007  1450  00D3               	movwf	??___fttol
  7008  1451  0853               	movf	??___fttol,w
  7009  1452  07DC               	addwf	___fttol@exp1,f
  7010  1453  1903               	btfsc	3,2
  7011  1454  2C6F               	goto	l2924
  7012  1455  2C48               	goto	l2914
  7013  1456                     l2916:	
  7014  1456  3018               	movlw	24
  7015  1457  025C               	subwf	___fttol@exp1,w
  7016  1458  1C03               	skipc
  7017  1459  2C6C               	goto	l881
  7018  145A  3000               	movlw	0
  7019  145B  00D2               	movwf	?___fttol+3
  7020  145C  3000               	movlw	0
  7021  145D  00D1               	movwf	?___fttol+2
  7022  145E  3000               	movlw	0
  7023  145F  00D0               	movwf	?___fttol+1
  7024  1460  3000               	movlw	0
  7025  1461  00CF               	movwf	?___fttol
  7026  1462  0008               	return
  7027  1463                     l2922:	
  7028  1463  3001               	movlw	1
  7029  1464                     u3875:	
  7030  1464  35D8               	lslf	___fttol@lval,f
  7031  1465  0DD9               	rlf	___fttol@lval+1,f
  7032  1466  0DDA               	rlf	___fttol@lval+2,f
  7033  1467  0DDB               	rlf	___fttol@lval+3,f
  7034  1468  0B89               	decfsz	9,f
  7035  1469  2C64               	goto	u3875
  7036  146A  3001               	movlw	1
  7037  146B  02DC               	subwf	___fttol@exp1,f
  7038  146C                     l881:	
  7039  146C  085C               	movf	___fttol@exp1,w
  7040  146D  1D03               	btfss	3,2
  7041  146E  2C63               	goto	l2922
  7042  146F                     l2924:	
  7043  146F  0857               	movf	___fttol@sign1,w
  7044  1470  1903               	btfsc	3,2
  7045  1471  2C7D               	goto	l2928
  7046  1472  09D8               	comf	___fttol@lval,f
  7047  1473  09D9               	comf	___fttol@lval+1,f
  7048  1474  09DA               	comf	___fttol@lval+2,f
  7049  1475  09DB               	comf	___fttol@lval+3,f
  7050  1476  0AD8               	incf	___fttol@lval,f
  7051  1477  1903               	skipnz
  7052  1478  0AD9               	incf	___fttol@lval+1,f
  7053  1479  1903               	skipnz
  7054  147A  0ADA               	incf	___fttol@lval+2,f
  7055  147B  1903               	skipnz
  7056  147C  0ADB               	incf	___fttol@lval+3,f
  7057  147D                     l2928:	
  7058  147D  085B               	movf	___fttol@lval+3,w
  7059  147E  00D2               	movwf	?___fttol+3
  7060  147F  085A               	movf	___fttol@lval+2,w
  7061  1480  00D1               	movwf	?___fttol+2
  7062  1481  0859               	movf	___fttol@lval+1,w
  7063  1482  00D0               	movwf	?___fttol+1
  7064  1483  0858               	movf	___fttol@lval,w
  7065  1484  00CF               	movwf	?___fttol
  7066  1485  0008               	return
  7067  1486                     __end_of___fttol:	
  7068                           
  7069                           	psect	text34
  7070  1F7D                     __ptext34:	
  7071 ;; *************** function ___ftsub *****************
  7072 ;; Defined at:
  7073 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
  7074 ;; Parameters:    Size  Location     Type
  7075 ;;  f2              3   65[BANK0 ] float 
  7076 ;;  f1              3   68[BANK0 ] float 
  7077 ;; Auto vars:     Size  Location     Type
  7078 ;;		None
  7079 ;; Return value:  Size  Location     Type
  7080 ;;                  3   65[BANK0 ] float 
  7081 ;; Registers used:
  7082 ;;		wreg, status,2, status,0, pclath, cstack
  7083 ;; Tracked objects:
  7084 ;;		On entry : 0/0
  7085 ;;		On exit  : 0/0
  7086 ;;		Unchanged: 0/0
  7087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7088 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7091 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7092 ;;Total ram usage:        6 bytes
  7093 ;; Hardware stack levels used:    1
  7094 ;; Hardware stack levels required when called:    6
  7095 ;; This function calls:
  7096 ;;		___ftadd
  7097 ;; This function is called by:
  7098 ;;		_printf
  7099 ;; This function uses a non-reentrant model
  7100 ;;
  7101                           
  7102                           
  7103                           ;psect for function ___ftsub
  7104  1F7D                     ___ftsub:	
  7105                           
  7106                           ;incstack = 0
  7107                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  7108  1F7D  0020               	movlb	0	; select bank0
  7109  1F7E  0863               	movf	___ftsub@f2+2,w
  7110  1F7F  0462               	iorwf	___ftsub@f2+1,w
  7111  1F80  0461               	iorwf	___ftsub@f2,w
  7112  1F81  1903               	skipnz
  7113  1F82  2F85               	goto	l2886
  7114  1F83  3080               	movlw	128
  7115  1F84  06E3               	xorwf	___ftsub@f2+2,f
  7116  1F85                     l2886:	
  7117  1F85  0864               	movf	___ftsub@f1,w
  7118  1F86  00D4               	movwf	___ftadd@f1
  7119  1F87  0865               	movf	___ftsub@f1+1,w
  7120  1F88  00D5               	movwf	___ftadd@f1+1
  7121  1F89  0866               	movf	___ftsub@f1+2,w
  7122  1F8A  00D6               	movwf	___ftadd@f1+2
  7123  1F8B  0861               	movf	___ftsub@f2,w
  7124  1F8C  00D7               	movwf	___ftadd@f2
  7125  1F8D  0862               	movf	___ftsub@f2+1,w
  7126  1F8E  00D8               	movwf	___ftadd@f2+1
  7127  1F8F  0863               	movf	___ftsub@f2+2,w
  7128  1F90  00D9               	movwf	___ftadd@f2+2
  7129  1F91  3197  270A         	fcall	___ftadd
  7130  1F93  0020               	movlb	0	; select bank0
  7131  1F94  0854               	movf	?___ftadd,w
  7132  1F95  00E1               	movwf	?___ftsub
  7133  1F96  0855               	movf	?___ftadd+1,w
  7134  1F97  00E2               	movwf	?___ftsub+1
  7135  1F98  0856               	movf	?___ftadd+2,w
  7136  1F99  00E3               	movwf	?___ftsub+2
  7137  1F9A  0008               	return
  7138  1F9B                     __end_of___ftsub:	
  7139                           
  7140                           	psect	text35
  7141  170A                     __ptext35:	
  7142 ;; *************** function ___ftadd *****************
  7143 ;; Defined at:
  7144 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
  7145 ;; Parameters:    Size  Location     Type
  7146 ;;  f1              3   52[BANK0 ] float 
  7147 ;;  f2              3   55[BANK0 ] float 
  7148 ;; Auto vars:     Size  Location     Type
  7149 ;;  exp1            1   64[BANK0 ] unsigned char 
  7150 ;;  exp2            1   63[BANK0 ] unsigned char 
  7151 ;;  sign            1   62[BANK0 ] unsigned char 
  7152 ;; Return value:  Size  Location     Type
  7153 ;;                  3   52[BANK0 ] float 
  7154 ;; Registers used:
  7155 ;;		wreg, status,2, status,0, pclath, cstack
  7156 ;; Tracked objects:
  7157 ;;		On entry : 0/0
  7158 ;;		On exit  : 0/0
  7159 ;;		Unchanged: 0/0
  7160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7161 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7162 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7163 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7164 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7165 ;;Total ram usage:       13 bytes
  7166 ;; Hardware stack levels used:    1
  7167 ;; Hardware stack levels required when called:    5
  7168 ;; This function calls:
  7169 ;;		___ftpack
  7170 ;; This function is called by:
  7171 ;;		_printf
  7172 ;;		___ftsub
  7173 ;; This function uses a non-reentrant model
  7174 ;;
  7175                           
  7176                           
  7177                           ;psect for function ___ftadd
  7178  170A                     ___ftadd:	
  7179                           
  7180                           ;incstack = 0
  7181                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7182  170A  0020               	movlb	0	; select bank0
  7183  170B  0854               	movf	___ftadd@f1,w
  7184  170C  00DA               	movwf	??___ftadd
  7185  170D  0855               	movf	___ftadd@f1+1,w
  7186  170E  00DB               	movwf	??___ftadd+1
  7187  170F  0856               	movf	___ftadd@f1+2,w
  7188  1710  00DC               	movwf	??___ftadd+2
  7189  1711  1003               	clrc
  7190  1712  0D5B               	rlf	??___ftadd+1,w
  7191  1713  0D5C               	rlf	??___ftadd+2,w
  7192  1714  00DD               	movwf	??___ftadd+3
  7193  1715  085D               	movf	??___ftadd+3,w
  7194  1716  00E0               	movwf	___ftadd@exp1
  7195  1717  0857               	movf	___ftadd@f2,w
  7196  1718  00DA               	movwf	??___ftadd
  7197  1719  0858               	movf	___ftadd@f2+1,w
  7198  171A  00DB               	movwf	??___ftadd+1
  7199  171B  0859               	movf	___ftadd@f2+2,w
  7200  171C  00DC               	movwf	??___ftadd+2
  7201  171D  1003               	clrc
  7202  171E  0D5B               	rlf	??___ftadd+1,w
  7203  171F  0D5C               	rlf	??___ftadd+2,w
  7204  1720  00DD               	movwf	??___ftadd+3
  7205  1721  085D               	movf	??___ftadd+3,w
  7206  1722  00DF               	movwf	___ftadd@exp2
  7207  1723  0860               	movf	___ftadd@exp1,w
  7208  1724  1903               	btfsc	3,2
  7209  1725  2F32               	goto	l2550
  7210  1726  085F               	movf	___ftadd@exp2,w
  7211  1727  0260               	subwf	___ftadd@exp1,w
  7212  1728  1803               	skipnc
  7213  1729  2F39               	goto	l2554
  7214  172A  0360               	decf	___ftadd@exp1,w
  7215  172B  3AFF               	xorlw	255
  7216  172C  075F               	addwf	___ftadd@exp2,w
  7217  172D  00DA               	movwf	??___ftadd
  7218  172E  3019               	movlw	25
  7219  172F  025A               	subwf	??___ftadd,w
  7220  1730  1C03               	skipc
  7221  1731  2F39               	goto	l2554
  7222  1732                     l2550:	
  7223  1732  0857               	movf	___ftadd@f2,w
  7224  1733  00D4               	movwf	?___ftadd
  7225  1734  0858               	movf	___ftadd@f2+1,w
  7226  1735  00D5               	movwf	?___ftadd+1
  7227  1736  0859               	movf	___ftadd@f2+2,w
  7228  1737  00D6               	movwf	?___ftadd+2
  7229  1738  0008               	return
  7230  1739                     l2554:	
  7231  1739  085F               	movf	___ftadd@exp2,w
  7232  173A  1903               	btfsc	3,2
  7233  173B  0008               	return
  7234  173C  0860               	movf	___ftadd@exp1,w
  7235  173D  025F               	subwf	___ftadd@exp2,w
  7236  173E  1803               	skipnc
  7237  173F  2F48               	goto	l2560
  7238  1740  035F               	decf	___ftadd@exp2,w
  7239  1741  3AFF               	xorlw	255
  7240  1742  0760               	addwf	___ftadd@exp1,w
  7241  1743  00DA               	movwf	??___ftadd
  7242  1744  3019               	movlw	25
  7243  1745  025A               	subwf	??___ftadd,w
  7244  1746  1803               	btfsc	3,0
  7245  1747  0008               	return
  7246  1748                     l2560:	
  7247  1748  3006               	movlw	6
  7248  1749  00DA               	movwf	??___ftadd
  7249  174A  085A               	movf	??___ftadd,w
  7250  174B  00DE               	movwf	___ftadd@sign
  7251  174C  1BD6               	btfsc	___ftadd@f1+2,7
  7252  174D  17DE               	bsf	___ftadd@sign,7
  7253  174E  1BD9               	btfsc	___ftadd@f2+2,7
  7254  174F  175E               	bsf	___ftadd@sign,6
  7255  1750  17D5               	bsf	___ftadd@f1+1,7
  7256  1751  30FF               	movlw	255
  7257  1752  05D4               	andwf	___ftadd@f1,f
  7258  1753  30FF               	movlw	255
  7259  1754  05D5               	andwf	___ftadd@f1+1,f
  7260  1755  3000               	movlw	0
  7261  1756  05D6               	andwf	___ftadd@f1+2,f
  7262  1757  17D8               	bsf	___ftadd@f2+1,7
  7263  1758  30FF               	movlw	255
  7264  1759  05D7               	andwf	___ftadd@f2,f
  7265  175A  30FF               	movlw	255
  7266  175B  05D8               	andwf	___ftadd@f2+1,f
  7267  175C  3000               	movlw	0
  7268  175D  05D9               	andwf	___ftadd@f2+2,f
  7269  175E  085F               	movf	___ftadd@exp2,w
  7270  175F  0260               	subwf	___ftadd@exp1,w
  7271  1760  1803               	skipnc
  7272  1761  2F84               	goto	l2582
  7273  1762                     l2572:	
  7274  1762  3001               	movlw	1
  7275  1763                     u3145:	
  7276  1763  35D7               	lslf	___ftadd@f2,f
  7277  1764  0DD8               	rlf	___ftadd@f2+1,f
  7278  1765  0DD9               	rlf	___ftadd@f2+2,f
  7279  1766  0B89               	decfsz	9,f
  7280  1767  2F63               	goto	u3145
  7281  1768  3001               	movlw	1
  7282  1769  02DF               	subwf	___ftadd@exp2,f
  7283  176A  085F               	movf	___ftadd@exp2,w
  7284  176B  0660               	xorwf	___ftadd@exp1,w
  7285  176C  1903               	skipnz
  7286  176D  2F7F               	goto	l2580
  7287  176E  3001               	movlw	1
  7288  176F  02DE               	subwf	___ftadd@sign,f
  7289  1770  085E               	movf	___ftadd@sign,w
  7290  1771  3907               	andlw	7
  7291  1772  1903               	btfsc	3,2
  7292  1773  2F7F               	goto	l2580
  7293  1774  2F62               	goto	l2572
  7294  1775                     l2578:	
  7295  1775  3001               	movlw	1
  7296  1776                     u3175:	
  7297  1776  36D6               	lsrf	___ftadd@f1+2,f
  7298  1777  0CD5               	rrf	___ftadd@f1+1,f
  7299  1778  0CD4               	rrf	___ftadd@f1,f
  7300  1779  0B89               	decfsz	9,f
  7301  177A  2F76               	goto	u3175
  7302  177B  3001               	movlw	1
  7303  177C  00DA               	movwf	??___ftadd
  7304  177D  085A               	movf	??___ftadd,w
  7305  177E  07E0               	addwf	___ftadd@exp1,f
  7306  177F                     l2580:	
  7307  177F  0860               	movf	___ftadd@exp1,w
  7308  1780  065F               	xorwf	___ftadd@exp2,w
  7309  1781  1903               	btfsc	3,2
  7310  1782  2FA9               	goto	l804
  7311  1783  2F75               	goto	l2578
  7312  1784                     l2582:	
  7313  1784  0860               	movf	___ftadd@exp1,w
  7314  1785  025F               	subwf	___ftadd@exp2,w
  7315  1786  1803               	skipnc
  7316  1787  2FA9               	goto	l804
  7317  1788                     l2584:	
  7318  1788  3001               	movlw	1
  7319  1789                     u3205:	
  7320  1789  35D4               	lslf	___ftadd@f1,f
  7321  178A  0DD5               	rlf	___ftadd@f1+1,f
  7322  178B  0DD6               	rlf	___ftadd@f1+2,f
  7323  178C  0B89               	decfsz	9,f
  7324  178D  2F89               	goto	u3205
  7325  178E  3001               	movlw	1
  7326  178F  02E0               	subwf	___ftadd@exp1,f
  7327  1790  085F               	movf	___ftadd@exp2,w
  7328  1791  0660               	xorwf	___ftadd@exp1,w
  7329  1792  1903               	skipnz
  7330  1793  2FA5               	goto	l2592
  7331  1794  3001               	movlw	1
  7332  1795  02DE               	subwf	___ftadd@sign,f
  7333  1796  085E               	movf	___ftadd@sign,w
  7334  1797  3907               	andlw	7
  7335  1798  1903               	btfsc	3,2
  7336  1799  2FA5               	goto	l2592
  7337  179A  2F88               	goto	l2584
  7338  179B                     l2590:	
  7339  179B  3001               	movlw	1
  7340  179C                     u3235:	
  7341  179C  36D9               	lsrf	___ftadd@f2+2,f
  7342  179D  0CD8               	rrf	___ftadd@f2+1,f
  7343  179E  0CD7               	rrf	___ftadd@f2,f
  7344  179F  0B89               	decfsz	9,f
  7345  17A0  2F9C               	goto	u3235
  7346  17A1  3001               	movlw	1
  7347  17A2  00DA               	movwf	??___ftadd
  7348  17A3  085A               	movf	??___ftadd,w
  7349  17A4  07DF               	addwf	___ftadd@exp2,f
  7350  17A5                     l2592:	
  7351  17A5  0860               	movf	___ftadd@exp1,w
  7352  17A6  065F               	xorwf	___ftadd@exp2,w
  7353  17A7  1D03               	skipz
  7354  17A8  2F9B               	goto	l2590
  7355  17A9                     l804:	
  7356  17A9  1FDE               	btfss	___ftadd@sign,7
  7357  17AA  2FBB               	goto	l2596
  7358  17AB  30FF               	movlw	255
  7359  17AC  06D4               	xorwf	___ftadd@f1,f
  7360  17AD  30FF               	movlw	255
  7361  17AE  06D5               	xorwf	___ftadd@f1+1,f
  7362  17AF  30FF               	movlw	255
  7363  17B0  06D6               	xorwf	___ftadd@f1+2,f
  7364  17B1  3001               	movlw	1
  7365  17B2  07D4               	addwf	___ftadd@f1,f
  7366  17B3  3000               	movlw	0
  7367  17B4  1803               	skipnc
  7368  17B5  3001               	movlw	1
  7369  17B6  07D5               	addwf	___ftadd@f1+1,f
  7370  17B7  3000               	movlw	0
  7371  17B8  1803               	skipnc
  7372  17B9  3001               	movlw	1
  7373  17BA  07D6               	addwf	___ftadd@f1+2,f
  7374  17BB                     l2596:	
  7375  17BB  1F5E               	btfss	___ftadd@sign,6
  7376  17BC  2FCD               	goto	l2600
  7377  17BD  30FF               	movlw	255
  7378  17BE  06D7               	xorwf	___ftadd@f2,f
  7379  17BF  30FF               	movlw	255
  7380  17C0  06D8               	xorwf	___ftadd@f2+1,f
  7381  17C1  30FF               	movlw	255
  7382  17C2  06D9               	xorwf	___ftadd@f2+2,f
  7383  17C3  3001               	movlw	1
  7384  17C4  07D7               	addwf	___ftadd@f2,f
  7385  17C5  3000               	movlw	0
  7386  17C6  1803               	skipnc
  7387  17C7  3001               	movlw	1
  7388  17C8  07D8               	addwf	___ftadd@f2+1,f
  7389  17C9  3000               	movlw	0
  7390  17CA  1803               	skipnc
  7391  17CB  3001               	movlw	1
  7392  17CC  07D9               	addwf	___ftadd@f2+2,f
  7393  17CD                     l2600:	
  7394  17CD  01DE               	clrf	___ftadd@sign
  7395  17CE  0854               	movf	___ftadd@f1,w
  7396  17CF  07D7               	addwf	___ftadd@f2,f
  7397  17D0  0855               	movf	___ftadd@f1+1,w
  7398  17D1  3DD8               	addwfc	___ftadd@f2+1,f
  7399  17D2  0856               	movf	___ftadd@f1+2,w
  7400  17D3  3DD9               	addwfc	___ftadd@f2+2,f
  7401  17D4  1FD9               	btfss	___ftadd@f2+2,7
  7402  17D5  2FE8               	goto	l2610
  7403  17D6  30FF               	movlw	255
  7404  17D7  06D7               	xorwf	___ftadd@f2,f
  7405  17D8  30FF               	movlw	255
  7406  17D9  06D8               	xorwf	___ftadd@f2+1,f
  7407  17DA  30FF               	movlw	255
  7408  17DB  06D9               	xorwf	___ftadd@f2+2,f
  7409  17DC  3001               	movlw	1
  7410  17DD  07D7               	addwf	___ftadd@f2,f
  7411  17DE  3000               	movlw	0
  7412  17DF  1803               	skipnc
  7413  17E0  3001               	movlw	1
  7414  17E1  07D8               	addwf	___ftadd@f2+1,f
  7415  17E2  3000               	movlw	0
  7416  17E3  1803               	skipnc
  7417  17E4  3001               	movlw	1
  7418  17E5  07D9               	addwf	___ftadd@f2+2,f
  7419  17E6  01DE               	clrf	___ftadd@sign
  7420  17E7  0ADE               	incf	___ftadd@sign,f
  7421  17E8                     l2610:	
  7422  17E8  0857               	movf	___ftadd@f2,w
  7423  17E9  00A0               	movwf	___ftpack@arg
  7424  17EA  0858               	movf	___ftadd@f2+1,w
  7425  17EB  00A1               	movwf	___ftpack@arg+1
  7426  17EC  0859               	movf	___ftadd@f2+2,w
  7427  17ED  00A2               	movwf	___ftpack@arg+2
  7428  17EE  0860               	movf	___ftadd@exp1,w
  7429  17EF  00DA               	movwf	??___ftadd
  7430  17F0  085A               	movf	??___ftadd,w
  7431  17F1  00A3               	movwf	___ftpack@exp
  7432  17F2  085E               	movf	___ftadd@sign,w
  7433  17F3  00DB               	movwf	??___ftadd+1
  7434  17F4  085B               	movf	??___ftadd+1,w
  7435  17F5  00A4               	movwf	___ftpack@sign
  7436  17F6  3193  239A         	fcall	___ftpack
  7437  17F8  0020               	movlb	0	; select bank0
  7438  17F9  0820               	movf	?___ftpack,w
  7439  17FA  00D4               	movwf	?___ftadd
  7440  17FB  0821               	movf	?___ftpack+1,w
  7441  17FC  00D5               	movwf	?___ftadd+1
  7442  17FD  0822               	movf	?___ftpack+2,w
  7443  17FE  00D6               	movwf	?___ftadd+2
  7444  17FF  0008               	return
  7445  1800                     __end_of___ftadd:	
  7446                           
  7447                           	psect	text36
  7448  139A                     __ptext36:	
  7449 ;; *************** function ___ftpack *****************
  7450 ;; Defined at:
  7451 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
  7452 ;; Parameters:    Size  Location     Type
  7453 ;;  arg             3    0[BANK0 ] unsigned um
  7454 ;;  exp             1    3[BANK0 ] unsigned char 
  7455 ;;  sign            1    4[BANK0 ] unsigned char 
  7456 ;; Auto vars:     Size  Location     Type
  7457 ;;		None
  7458 ;; Return value:  Size  Location     Type
  7459 ;;                  3    0[BANK0 ] float 
  7460 ;; Registers used:
  7461 ;;		wreg, status,2, status,0
  7462 ;; Tracked objects:
  7463 ;;		On entry : 0/0
  7464 ;;		On exit  : 0/0
  7465 ;;		Unchanged: 0/0
  7466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7467 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7469 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7470 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7471 ;;Total ram usage:        8 bytes
  7472 ;; Hardware stack levels used:    1
  7473 ;; Hardware stack levels required when called:    4
  7474 ;; This function calls:
  7475 ;;		Nothing
  7476 ;; This function is called by:
  7477 ;;		___ftadd
  7478 ;;		___ftmul
  7479 ;;		___lltoft
  7480 ;; This function uses a non-reentrant model
  7481 ;;
  7482                           
  7483                           
  7484                           ;psect for function ___ftpack
  7485  139A                     ___ftpack:	
  7486                           
  7487                           ;incstack = 0
  7488                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7489  139A  0020               	movlb	0	; select bank0
  7490  139B  0823               	movf	___ftpack@exp,w
  7491  139C  1903               	btfsc	3,2
  7492  139D  2BA3               	goto	l2410
  7493  139E  0822               	movf	___ftpack@arg+2,w
  7494  139F  0421               	iorwf	___ftpack@arg+1,w
  7495  13A0  0420               	iorwf	___ftpack@arg,w
  7496  13A1  1D03               	skipz
  7497  13A2  2BB4               	goto	l2416
  7498  13A3                     l2410:	
  7499  13A3  3000               	movlw	0
  7500  13A4  00A0               	movwf	?___ftpack
  7501  13A5  3000               	movlw	0
  7502  13A6  00A1               	movwf	?___ftpack+1
  7503  13A7  3000               	movlw	0
  7504  13A8  00A2               	movwf	?___ftpack+2
  7505  13A9  0008               	return
  7506  13AA                     l2414:	
  7507  13AA  3001               	movlw	1
  7508  13AB  00A5               	movwf	??___ftpack
  7509  13AC  0825               	movf	??___ftpack,w
  7510  13AD  07A3               	addwf	___ftpack@exp,f
  7511  13AE  3001               	movlw	1
  7512  13AF                     u2715:	
  7513  13AF  36A2               	lsrf	___ftpack@arg+2,f
  7514  13B0  0CA1               	rrf	___ftpack@arg+1,f
  7515  13B1  0CA0               	rrf	___ftpack@arg,f
  7516  13B2  0B89               	decfsz	9,f
  7517  13B3  2BAF               	goto	u2715
  7518  13B4                     l2416:	
  7519  13B4  30FE               	movlw	254
  7520  13B5  0522               	andwf	___ftpack@arg+2,w
  7521  13B6  1903               	btfsc	3,2
  7522  13B7  2BCD               	goto	l773
  7523  13B8  2BAA               	goto	l2414
  7524  13B9                     l2418:	
  7525  13B9  3001               	movlw	1
  7526  13BA  00A5               	movwf	??___ftpack
  7527  13BB  0825               	movf	??___ftpack,w
  7528  13BC  07A3               	addwf	___ftpack@exp,f
  7529  13BD  3001               	movlw	1
  7530  13BE  07A0               	addwf	___ftpack@arg,f
  7531  13BF  3000               	movlw	0
  7532  13C0  1803               	skipnc
  7533  13C1  3001               	movlw	1
  7534  13C2  07A1               	addwf	___ftpack@arg+1,f
  7535  13C3  3000               	movlw	0
  7536  13C4  1803               	skipnc
  7537  13C5  3001               	movlw	1
  7538  13C6  07A2               	addwf	___ftpack@arg+2,f
  7539  13C7  3001               	movlw	1
  7540  13C8                     u2735:	
  7541  13C8  36A2               	lsrf	___ftpack@arg+2,f
  7542  13C9  0CA1               	rrf	___ftpack@arg+1,f
  7543  13CA  0CA0               	rrf	___ftpack@arg,f
  7544  13CB  0B89               	decfsz	9,f
  7545  13CC  2BC8               	goto	u2735
  7546  13CD                     l773:	
  7547  13CD  30FF               	movlw	255
  7548  13CE  0522               	andwf	___ftpack@arg+2,w
  7549  13CF  1903               	btfsc	3,2
  7550  13D0  2BDA               	goto	l2426
  7551  13D1  2BB9               	goto	l2418
  7552  13D2                     l2424:	
  7553  13D2  3001               	movlw	1
  7554  13D3  02A3               	subwf	___ftpack@exp,f
  7555  13D4  3001               	movlw	1
  7556  13D5                     u2755:	
  7557  13D5  35A0               	lslf	___ftpack@arg,f
  7558  13D6  0DA1               	rlf	___ftpack@arg+1,f
  7559  13D7  0DA2               	rlf	___ftpack@arg+2,f
  7560  13D8  0B89               	decfsz	9,f
  7561  13D9  2BD5               	goto	u2755
  7562  13DA                     l2426:	
  7563  13DA  1BA1               	btfsc	___ftpack@arg+1,7
  7564  13DB  2BE0               	goto	l780
  7565  13DC  3002               	movlw	2
  7566  13DD  0223               	subwf	___ftpack@exp,w
  7567  13DE  1803               	skipnc
  7568  13DF  2BD2               	goto	l2424
  7569  13E0                     l780:	
  7570  13E0  1823               	btfsc	___ftpack@exp,0
  7571  13E1  2BE8               	goto	l781
  7572  13E2  30FF               	movlw	255
  7573  13E3  05A0               	andwf	___ftpack@arg,f
  7574  13E4  307F               	movlw	127
  7575  13E5  05A1               	andwf	___ftpack@arg+1,f
  7576  13E6  30FF               	movlw	255
  7577  13E7  05A2               	andwf	___ftpack@arg+2,f
  7578  13E8                     l781:	
  7579  13E8  1003               	clrc
  7580  13E9  0CA3               	rrf	___ftpack@exp,f
  7581  13EA  0823               	movf	___ftpack@exp,w
  7582  13EB  00A5               	movwf	??___ftpack
  7583  13EC  01A6               	clrf	??___ftpack+1
  7584  13ED  01A7               	clrf	??___ftpack+2
  7585  13EE  3010               	movlw	16
  7586  13EF                     u2795:	
  7587  13EF  35A5               	lslf	??___ftpack,f
  7588  13F0  0DA6               	rlf	??___ftpack+1,f
  7589  13F1  0DA7               	rlf	??___ftpack+2,f
  7590  13F2  0B89               	decfsz	9,f
  7591  13F3  2BEF               	goto	u2795
  7592  13F4  0825               	movf	??___ftpack,w
  7593  13F5  04A0               	iorwf	___ftpack@arg,f
  7594  13F6  0826               	movf	??___ftpack+1,w
  7595  13F7  04A1               	iorwf	___ftpack@arg+1,f
  7596  13F8  0827               	movf	??___ftpack+2,w
  7597  13F9  04A2               	iorwf	___ftpack@arg+2,f
  7598  13FA  0824               	movf	___ftpack@sign,w
  7599  13FB  1903               	btfsc	3,2
  7600  13FC  0008               	return
  7601  13FD  17A2               	bsf	___ftpack@arg+2,7
  7602  13FE  0008               	return
  7603  13FF                     __end_of___ftpack:	
  7604                           
  7605                           	psect	text37
  7606  1E2C                     __ptext37:	
  7607 ;; *************** function ___ftneg *****************
  7608 ;; Defined at:
  7609 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
  7610 ;; Parameters:    Size  Location     Type
  7611 ;;  f1              3    0[BANK0 ] float 
  7612 ;; Auto vars:     Size  Location     Type
  7613 ;;		None
  7614 ;; Return value:  Size  Location     Type
  7615 ;;                  3    0[BANK0 ] float 
  7616 ;; Registers used:
  7617 ;;		wreg
  7618 ;; Tracked objects:
  7619 ;;		On entry : 0/0
  7620 ;;		On exit  : 0/0
  7621 ;;		Unchanged: 0/0
  7622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7623 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7626 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7627 ;;Total ram usage:        3 bytes
  7628 ;; Hardware stack levels used:    1
  7629 ;; Hardware stack levels required when called:    4
  7630 ;; This function calls:
  7631 ;;		Nothing
  7632 ;; This function is called by:
  7633 ;;		_printf
  7634 ;; This function uses a non-reentrant model
  7635 ;;
  7636                           
  7637                           
  7638                           ;psect for function ___ftneg
  7639  1E2C                     ___ftneg:	
  7640                           
  7641                           ;incstack = 0
  7642                           ; Regs used in ___ftneg: [wreg]
  7643  1E2C  0020               	movlb	0	; select bank0
  7644  1E2D  0822               	movf	___ftneg@f1+2,w
  7645  1E2E  0421               	iorwf	___ftneg@f1+1,w
  7646  1E2F  0420               	iorwf	___ftneg@f1,w
  7647  1E30  1903               	skipnz
  7648  1E31  0008               	return
  7649  1E32  3080               	movlw	128
  7650  1E33  06A2               	xorwf	___ftneg@f1+2,f
  7651  1E34  0008               	return
  7652  1E35                     __end_of___ftneg:	
  7653                           
  7654                           	psect	text38
  7655  11A3                     __ptext38:	
  7656 ;; *************** function ___ftge *****************
  7657 ;; Defined at:
  7658 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
  7659 ;; Parameters:    Size  Location     Type
  7660 ;;  ff1             3    0[BANK0 ] float 
  7661 ;;  ff2             3    3[BANK0 ] float 
  7662 ;; Auto vars:     Size  Location     Type
  7663 ;;		None
  7664 ;; Return value:  Size  Location     Type
  7665 ;;		None               void
  7666 ;; Registers used:
  7667 ;;		wreg, status,2, status,0
  7668 ;; Tracked objects:
  7669 ;;		On entry : 0/0
  7670 ;;		On exit  : 0/0
  7671 ;;		Unchanged: 0/0
  7672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7673 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7675 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7676 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7677 ;;Total ram usage:        9 bytes
  7678 ;; Hardware stack levels used:    1
  7679 ;; Hardware stack levels required when called:    4
  7680 ;; This function calls:
  7681 ;;		Nothing
  7682 ;; This function is called by:
  7683 ;;		_printf
  7684 ;; This function uses a non-reentrant model
  7685 ;;
  7686                           
  7687                           
  7688                           ;psect for function ___ftge
  7689  11A3                     ___ftge:	
  7690                           
  7691                           ;incstack = 0
  7692                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  7693  11A3  0020               	movlb	0	; select bank0
  7694  11A4  1FA2               	btfss	___ftge@ff1+2,7
  7695  11A5  29BA               	goto	l2858
  7696  11A6  0920               	comf	___ftge@ff1,w
  7697  11A7  00A6               	movwf	??___ftge
  7698  11A8  0921               	comf	___ftge@ff1+1,w
  7699  11A9  00A7               	movwf	??___ftge+1
  7700  11AA  0922               	comf	___ftge@ff1+2,w
  7701  11AB  00A8               	movwf	??___ftge+2
  7702  11AC  0AA6               	incf	??___ftge,f
  7703  11AD  1903               	skipnz
  7704  11AE  0AA7               	incf	??___ftge+1,f
  7705  11AF  1903               	skipnz
  7706  11B0  0AA8               	incf	??___ftge+2,f
  7707  11B1  3000               	movlw	0
  7708  11B2  0726               	addwf	??___ftge,w
  7709  11B3  00A0               	movwf	___ftge@ff1
  7710  11B4  3000               	movlw	0
  7711  11B5  3D27               	addwfc	??___ftge+1,w
  7712  11B6  00A1               	movwf	___ftge@ff1+1
  7713  11B7  3080               	movlw	128
  7714  11B8  3D28               	addwfc	??___ftge+2,w
  7715  11B9  00A2               	movwf	___ftge@ff1+2
  7716  11BA                     l2858:	
  7717  11BA  1FA5               	btfss	___ftge@ff2+2,7
  7718  11BB  29D0               	goto	l2862
  7719  11BC  0923               	comf	___ftge@ff2,w
  7720  11BD  00A6               	movwf	??___ftge
  7721  11BE  0924               	comf	___ftge@ff2+1,w
  7722  11BF  00A7               	movwf	??___ftge+1
  7723  11C0  0925               	comf	___ftge@ff2+2,w
  7724  11C1  00A8               	movwf	??___ftge+2
  7725  11C2  0AA6               	incf	??___ftge,f
  7726  11C3  1903               	skipnz
  7727  11C4  0AA7               	incf	??___ftge+1,f
  7728  11C5  1903               	skipnz
  7729  11C6  0AA8               	incf	??___ftge+2,f
  7730  11C7  3000               	movlw	0
  7731  11C8  0726               	addwf	??___ftge,w
  7732  11C9  00A3               	movwf	___ftge@ff2
  7733  11CA  3000               	movlw	0
  7734  11CB  3D27               	addwfc	??___ftge+1,w
  7735  11CC  00A4               	movwf	___ftge@ff2+1
  7736  11CD  3080               	movlw	128
  7737  11CE  3D28               	addwfc	??___ftge+2,w
  7738  11CF  00A5               	movwf	___ftge@ff2+2
  7739  11D0                     l2862:	
  7740  11D0  3080               	movlw	128
  7741  11D1  06A2               	xorwf	___ftge@ff1+2,f
  7742  11D2  3080               	movlw	128
  7743  11D3  06A5               	xorwf	___ftge@ff2+2,f
  7744  11D4  0825               	movf	___ftge@ff2+2,w
  7745  11D5  0222               	subwf	___ftge@ff1+2,w
  7746  11D6  1D03               	skipz
  7747  11D7  0008               	return
  7748  11D8  0824               	movf	___ftge@ff2+1,w
  7749  11D9  0221               	subwf	___ftge@ff1+1,w
  7750  11DA  1D03               	skipz
  7751  11DB  0008               	return
  7752  11DC  0823               	movf	___ftge@ff2,w
  7753  11DD  0220               	subwf	___ftge@ff1,w
  7754  11DE  0008               	return
  7755  11DF                     __end_of___ftge:	
  7756                           
  7757                           	psect	text39
  7758  1F43                     __ptext39:	
  7759 ;; *************** function _Delay *****************
  7760 ;; Defined at:
  7761 ;;		line 53 in file "Function.c"
  7762 ;; Parameters:    Size  Location     Type
  7763 ;;  wait            2    0[BANK0 ] int 
  7764 ;; Auto vars:     Size  Location     Type
  7765 ;;  x               2    3[BANK0 ] int 
  7766 ;; Return value:  Size  Location     Type
  7767 ;;                  1    wreg      void 
  7768 ;; Registers used:
  7769 ;;		wreg, status,2
  7770 ;; Tracked objects:
  7771 ;;		On entry : 0/0
  7772 ;;		On exit  : 0/0
  7773 ;;		Unchanged: 0/0
  7774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7775 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7776 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7777 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7778 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7779 ;;Total ram usage:        5 bytes
  7780 ;; Hardware stack levels used:    1
  7781 ;; Hardware stack levels required when called:    4
  7782 ;; This function calls:
  7783 ;;		Nothing
  7784 ;; This function is called by:
  7785 ;;		_SR_FRSStart
  7786 ;; This function uses a non-reentrant model
  7787 ;;
  7788                           
  7789                           
  7790                           ;psect for function _Delay
  7791  1F43                     _Delay:	
  7792                           
  7793                           ;Function.c: 54: int x;
  7794                           ;Function.c: 55: for (x = 0; x < wait; x++) {
  7795                           
  7796                           ;incstack = 0
  7797                           ; Regs used in _Delay: [wreg+status,2]
  7798  1F43  0020               	movlb	0	; select bank0
  7799  1F44  01A3               	clrf	Delay@x
  7800  1F45  01A4               	clrf	Delay@x+1
  7801  1F46                     l62:	
  7802  1F46  0824               	movf	Delay@x+1,w
  7803  1F47  3A80               	xorlw	128
  7804  1F48  00A2               	movwf	??_Delay
  7805  1F49  0821               	movf	Delay@wait+1,w
  7806  1F4A  3A80               	xorlw	128
  7807  1F4B  0222               	subwf	??_Delay,w
  7808  1F4C  1D03               	skipz
  7809  1F4D  2F50               	goto	u5075
  7810  1F4E  0820               	movf	Delay@wait,w
  7811  1F4F  0223               	subwf	Delay@x,w
  7812  1F50                     u5075:	
  7813  1F50  1803               	btfsc	3,0
  7814  1F51  0008               	return
  7815                           
  7816                           ;Function.c: 56: _delay((unsigned long)((1)*(4000000/4000.0)));
  7817  1F52  30F9               	movlw	249
  7818  1F53  0020               	movlb	0	; select bank0
  7819  1F54  00A2               	movwf	??_Delay
  7820  1F55                     u5267:	
  7821  1F55  0000               	nop
  7822  1F56  0BA2               	decfsz	??_Delay,f
  7823  1F57  2F55               	goto	u5267
  7824  1F58  3200               	nop2	;nop
  7825  1F59  0000               	nop
  7826  1F5A  3001               	movlw	1
  7827  1F5B  0020               	movlb	0	; select bank0
  7828  1F5C  07A3               	addwf	Delay@x,f
  7829  1F5D  3000               	movlw	0
  7830  1F5E  3DA4               	addwfc	Delay@x+1,f
  7831  1F5F  2F46               	goto	l62
  7832  1F60                     __end_of_Delay:	
  7833                           
  7834                           	psect	text40
  7835  1179                     __ptext40:	
  7836 ;; *************** function _RadioOperation *****************
  7837 ;; Defined at:
  7838 ;;		line 15 in file "Radio.c"
  7839 ;; Parameters:    Size  Location     Type
  7840 ;;		None
  7841 ;; Auto vars:     Size  Location     Type
  7842 ;;		None
  7843 ;; Return value:  Size  Location     Type
  7844 ;;                  1    wreg      void 
  7845 ;; Registers used:
  7846 ;;		wreg, status,2, status,0, pclath, cstack
  7847 ;; Tracked objects:
  7848 ;;		On entry : 0/0
  7849 ;;		On exit  : 0/0
  7850 ;;		Unchanged: 0/0
  7851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7854 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7855 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7856 ;;Total ram usage:        1 bytes
  7857 ;; Hardware stack levels used:    1
  7858 ;; Hardware stack levels required when called:    5
  7859 ;; This function calls:
  7860 ;;		_SR_FRSTalk
  7861 ;; This function is called by:
  7862 ;;		_main
  7863 ;; This function uses a non-reentrant model
  7864 ;;
  7865                           
  7866                           
  7867                           ;psect for function _RadioOperation
  7868  1179                     _RadioOperation:	
  7869                           
  7870                           ;Radio.c: 16: if(PORTAbits.RA2){
  7871                           
  7872                           ;incstack = 0
  7873                           ; Regs used in _RadioOperation: [wreg+status,2+status,0+pclath+cstack]
  7874  1179  0020               	movlb	0	; select bank0
  7875  117A  1D0C               	btfss	12,2	;volatile
  7876  117B  2982               	goto	l3608
  7877                           
  7878                           ;Radio.c: 17: count++;
  7879  117C  3001               	movlw	1
  7880  117D  0021               	movlb	1	; select bank1
  7881  117E  07E4               	addwf	_count^(0+128),f
  7882  117F  3000               	movlw	0
  7883  1180  3DE5               	addwfc	(_count+1)^(0+128),f
  7884                           
  7885                           ;Radio.c: 18: }
  7886  1181  298D               	goto	l3616
  7887  1182                     l3608:	
  7888                           
  7889                           ;Radio.c: 19: else{
  7890                           ;Radio.c: 20: count = 0;
  7891  1182  0021               	movlb	1	; select bank1
  7892  1183  01E4               	clrf	_count^(0+128)
  7893  1184  01E5               	clrf	(_count+1)^(0+128)
  7894                           
  7895                           ;Radio.c: 21: if(Talking){
  7896  1185  0866               	movf	_Talking^(0+128),w
  7897  1186  1903               	btfsc	3,2
  7898  1187  298D               	goto	l3616
  7899                           
  7900                           ;Radio.c: 22: PORTCbits.RC3 = 1;
  7901  1188  0020               	movlb	0	; select bank0
  7902  1189  158E               	bsf	14,3	;volatile
  7903                           
  7904                           ;Radio.c: 23: SR_FRSTalk();
  7905  118A  3180  2003  3191   	fcall	_SR_FRSTalk
  7906  118D                     l3616:	
  7907                           
  7908                           ;Radio.c: 24: }
  7909                           ;Radio.c: 25: }
  7910                           ;Radio.c: 26: if(count > 100){
  7911  118D  0021               	movlb	1	; select bank1
  7912  118E  0865               	movf	(_count+1)^(0+128),w
  7913  118F  3A80               	xorlw	128
  7914  1190  0020               	movlb	0	; select bank0
  7915  1191  00A0               	movwf	??_RadioOperation
  7916  1192  3080               	movlw	128
  7917  1193  0220               	subwf	??_RadioOperation,w
  7918  1194  1D03               	skipz
  7919  1195  2999               	goto	u5175
  7920  1196  3065               	movlw	101
  7921  1197  0021               	movlb	1	; select bank1
  7922  1198  0264               	subwf	_count^(0+128),w
  7923  1199                     u5175:	
  7924  1199  1C03               	skipc
  7925  119A  0008               	return
  7926                           
  7927                           ;Radio.c: 27: SR_FRSTalk();
  7928  119B  3180  2003         	fcall	_SR_FRSTalk
  7929                           
  7930                           ;Radio.c: 28: PORTCbits.RC3 = 0;
  7931  119D  0020               	movlb	0	; select bank0
  7932  119E  118E               	bcf	14,3	;volatile
  7933                           
  7934                           ;Radio.c: 29: Talking = 1;
  7935  119F  0021               	movlb	1	; select bank1
  7936  11A0  01E6               	clrf	_Talking^(0+128)
  7937  11A1  0AE6               	incf	_Talking^(0+128),f
  7938  11A2  0008               	return
  7939  11A3                     __end_of_RadioOperation:	
  7940                           
  7941                           	psect	text41
  7942  0003                     __ptext41:	
  7943 ;; *************** function _SR_FRSTalk *****************
  7944 ;; Defined at:
  7945 ;;		line 7 in file "SR_FRS.c"
  7946 ;; Parameters:    Size  Location     Type
  7947 ;;		None
  7948 ;; Auto vars:     Size  Location     Type
  7949 ;;		None
  7950 ;; Return value:  Size  Location     Type
  7951 ;;                  1    wreg      void 
  7952 ;; Registers used:
  7953 ;;		None
  7954 ;; Tracked objects:
  7955 ;;		On entry : 0/0
  7956 ;;		On exit  : 0/0
  7957 ;;		Unchanged: 0/0
  7958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7963 ;;Total ram usage:        0 bytes
  7964 ;; Hardware stack levels used:    1
  7965 ;; Hardware stack levels required when called:    4
  7966 ;; This function calls:
  7967 ;;		Nothing
  7968 ;; This function is called by:
  7969 ;;		_RadioOperation
  7970 ;; This function uses a non-reentrant model
  7971 ;;
  7972                           
  7973                           
  7974                           ;psect for function _SR_FRSTalk
  7975  0003                     _SR_FRSTalk:	
  7976                           
  7977                           ;incstack = 0
  7978                           ; Regs used in _SR_FRSTalk: []
  7979  0003  0008               	return
  7980  0004                     __end_of_SR_FRSTalk:	
  7981                           
  7982                           	psect	intentry
  7983  0004                     __pintentry:	
  7984 ;; *************** function _INTERRUPT_InterruptManager *****************
  7985 ;; Defined at:
  7986 ;;		line 71 in file "Function.c"
  7987 ;; Parameters:    Size  Location     Type
  7988 ;;		None
  7989 ;; Auto vars:     Size  Location     Type
  7990 ;;		None
  7991 ;; Return value:  Size  Location     Type
  7992 ;;                  1    wreg      void 
  7993 ;; Registers used:
  7994 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7995 ;; Tracked objects:
  7996 ;;		On entry : 0/0
  7997 ;;		On exit  : 0/0
  7998 ;;		Unchanged: 0/0
  7999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8002 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8003 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8004 ;;Total ram usage:        1 bytes
  8005 ;; Hardware stack levels used:    1
  8006 ;; Hardware stack levels required when called:    3
  8007 ;; This function calls:
  8008 ;;		_EUSART1_Receive_ISR
  8009 ;;		_EUSART1_Transmit_ISR
  8010 ;;		_TMR2_ISR
  8011 ;; This function is called by:
  8012 ;;		Interrupt level 1
  8013 ;; This function uses a non-reentrant model
  8014 ;;
  8015                           
  8016  0004                     _INTERRUPT_InterruptManager:	
  8017                           
  8018                           ;incstack = 0
  8019                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8020  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  8021  0005  3180               	pagesel	$
  8022  0006  0020               	movlb	0	; select bank0
  8023  0007  087F               	movf	127,w
  8024  0008  00FD               	movwf	??_INTERRUPT_InterruptManager
  8025                           
  8026                           ;Function.c: 73: if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
  8027  0009  0021               	movlb	1	; select bank1
  8028  000A  1C91               	btfss	17,1	;volatile
  8029  000B  2812               	goto	i1l3656
  8030  000C  0020               	movlb	0	; select bank0
  8031  000D  1C91               	btfss	17,1	;volatile
  8032  000E  2812               	goto	i1l3656
  8033                           
  8034                           ;Function.c: 74: {
  8035                           ;Function.c: 75: TMR2_ISR();
  8036  000F  3188  2002  3180   	fcall	_TMR2_ISR
  8037  0012                     i1l3656:	
  8038                           
  8039                           ;Function.c: 76: }
  8040                           ;Function.c: 77: if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
  8041  0012  0021               	movlb	1	; select bank1
  8042  0013  1E91               	btfss	17,5	;volatile
  8043  0014  281B               	goto	i1l3662
  8044  0015  0020               	movlb	0	; select bank0
  8045  0016  1E91               	btfss	17,5	;volatile
  8046  0017  281B               	goto	i1l3662
  8047                           
  8048                           ;Function.c: 78: {
  8049                           ;Function.c: 79: EUSART1_Receive_ISR();
  8050  0018  319E  2688  3180   	fcall	_EUSART1_Receive_ISR
  8051  001B                     i1l3662:	
  8052                           
  8053                           ;Function.c: 80: }
  8054                           ;Function.c: 81: if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
  8055  001B  0021               	movlb	1	; select bank1
  8056  001C  1E11               	btfss	17,4	;volatile
  8057  001D  2823               	goto	i1l75
  8058  001E  0020               	movlb	0	; select bank0
  8059  001F  1E11               	btfss	17,4	;volatile
  8060  0020  2823               	goto	i1l75
  8061                           
  8062                           ;Function.c: 82: {
  8063                           ;Function.c: 83: EUSART1_Transmit_ISR();
  8064  0021  319E  26F1         	fcall	_EUSART1_Transmit_ISR
  8065  0023                     i1l75:	
  8066                           ;Function.c: 85: else
  8067                           ;Function.c: 86: {
  8068                           
  8069                           ;Function.c: 84: }
  8070                           
  8071  0023  087D               	movf	??_INTERRUPT_InterruptManager,w
  8072  0024  0020               	movlb	0	; select bank0
  8073  0025  00FF               	movwf	127
  8074  0026  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  8075  0027  0009               	retfie
  8076  0028                     __end_of_INTERRUPT_InterruptManager:	
  8077                           
  8078                           	psect	text43
  8079  0802                     __ptext43:	
  8080 ;; *************** function _TMR2_ISR *****************
  8081 ;; Defined at:
  8082 ;;		line 47 in file "Timer.c"
  8083 ;; Parameters:    Size  Location     Type
  8084 ;;		None
  8085 ;; Auto vars:     Size  Location     Type
  8086 ;;		None
  8087 ;; Return value:  Size  Location     Type
  8088 ;;                  1    wreg      void 
  8089 ;; Registers used:
  8090 ;;		None
  8091 ;; Tracked objects:
  8092 ;;		On entry : 0/0
  8093 ;;		On exit  : 0/0
  8094 ;;		Unchanged: 0/0
  8095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8100 ;;Total ram usage:        0 bytes
  8101 ;; Hardware stack levels used:    1
  8102 ;; This function calls:
  8103 ;;		Nothing
  8104 ;; This function is called by:
  8105 ;;		_INTERRUPT_InterruptManager
  8106 ;; This function uses a non-reentrant model
  8107 ;;
  8108                           
  8109                           
  8110                           ;psect for function _TMR2_ISR
  8111  0802                     _TMR2_ISR:	
  8112                           
  8113                           ;Timer.c: 51: PIR1bits.TMR2IF = 0;
  8114                           
  8115                           ;incstack = 0
  8116                           ; Regs used in _TMR2_ISR: []
  8117  0802  0020               	movlb	0	; select bank0
  8118  0803  1091               	bcf	17,1	;volatile
  8119  0804  0008               	return
  8120  0805                     __end_of_TMR2_ISR:	
  8121                           
  8122                           	psect	text44
  8123  1EF1                     __ptext44:	
  8124 ;; *************** function _EUSART1_Transmit_ISR *****************
  8125 ;; Defined at:
  8126 ;;		line 141 in file "UART.c"
  8127 ;; Parameters:    Size  Location     Type
  8128 ;;		None
  8129 ;; Auto vars:     Size  Location     Type
  8130 ;;		None
  8131 ;; Return value:  Size  Location     Type
  8132 ;;                  1    wreg      void 
  8133 ;; Registers used:
  8134 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8135 ;; Tracked objects:
  8136 ;;		On entry : 0/0
  8137 ;;		On exit  : 0/0
  8138 ;;		Unchanged: 0/0
  8139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8142 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8143 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8144 ;;Total ram usage:        1 bytes
  8145 ;; Hardware stack levels used:    1
  8146 ;; Hardware stack levels required when called:    2
  8147 ;; This function calls:
  8148 ;;		_UART_buff_size
  8149 ;;		i1_UART_buff_get
  8150 ;; This function is called by:
  8151 ;;		_INTERRUPT_InterruptManager
  8152 ;; This function uses a non-reentrant model
  8153 ;;
  8154                           
  8155                           
  8156                           ;psect for function _EUSART1_Transmit_ISR
  8157  1EF1                     _EUSART1_Transmit_ISR:	
  8158                           
  8159                           ;UART.c: 143: if (UART_buff_size(&output_buffer) > 0) {
  8160                           
  8161                           ;incstack = 0
  8162                           ; Regs used in _EUSART1_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8163  1EF1  3042               	movlw	(low (_output_buffer| (0+256)))& (0+255)
  8164  1EF2  319E  2649  319E   	fcall	_UART_buff_size
  8165  1EF5  0871               	movf	?_UART_buff_size+1,w
  8166  1EF6  3A80               	xorlw	128
  8167  1EF7  00FB               	movwf	??_EUSART1_Transmit_ISR
  8168  1EF8  3080               	movlw	128
  8169  1EF9  027B               	subwf	??_EUSART1_Transmit_ISR,w
  8170  1EFA  1D03               	skipz
  8171  1EFB  2EFE               	goto	u519_25
  8172  1EFC  3001               	movlw	1
  8173  1EFD  0270               	subwf	?_UART_buff_size,w
  8174  1EFE                     u519_25:	
  8175  1EFE  1C03               	skipc
  8176  1EFF  2F06               	goto	i1l201
  8177                           
  8178                           ;UART.c: 144: TXREG = UART_buff_get(&output_buffer);
  8179  1F00  3042               	movlw	(low (_output_buffer| (0+256)))& (0+255)
  8180  1F01  3192  22AA         	fcall	i1_UART_buff_get
  8181  1F03  0023               	movlb	3	; select bank3
  8182  1F04  009A               	movwf	26	;volatile
  8183                           
  8184                           ;UART.c: 145: } else {
  8185  1F05  0008               	return
  8186  1F06                     i1l201:	
  8187                           
  8188                           ;UART.c: 146: Transmit_stall = 1;
  8189  1F06  0021               	movlb	1	; select bank1
  8190  1F07  01ED               	clrf	_Transmit_stall^(0+128)
  8191  1F08  0AED               	incf	_Transmit_stall^(0+128),f
  8192                           
  8193                           ;UART.c: 147: PIE1bits.TXIE = 0;
  8194  1F09  1211               	bcf	17,4	;volatile
  8195  1F0A  0008               	return
  8196  1F0B                     __end_of_EUSART1_Transmit_ISR:	
  8197                           
  8198                           	psect	text45
  8199  12AA                     __ptext45:	
  8200 ;; *************** function i1_UART_buff_get *****************
  8201 ;; Defined at:
  8202 ;;		line 73 in file "UART.c"
  8203 ;; Parameters:    Size  Location     Type
  8204 ;;  _this           1    wreg     PTR struct UART_ring_buf
  8205 ;;		 -> output_buffer(26), input_buffer(26), 
  8206 ;; Auto vars:     Size  Location     Type
  8207 ;;  _this           1   10[COMMON] PTR struct UART_ring_buf
  8208 ;;		 -> output_buffer(26), input_buffer(26), 
  8209 ;;  UART_buff_ge    1    9[COMMON] unsigned char 
  8210 ;; Return value:  Size  Location     Type
  8211 ;;                  1    wreg      unsigned char 
  8212 ;; Registers used:
  8213 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8214 ;; Tracked objects:
  8215 ;;		On entry : 0/0
  8216 ;;		On exit  : 0/0
  8217 ;;		Unchanged: 0/0
  8218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8220 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8221 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8222 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8223 ;;Total ram usage:        5 bytes
  8224 ;; Hardware stack levels used:    1
  8225 ;; Hardware stack levels required when called:    1
  8226 ;; This function calls:
  8227 ;;		i1_UART_buff_modulo_inc
  8228 ;; This function is called by:
  8229 ;;		_EUSART1_Transmit_ISR
  8230 ;; This function uses a non-reentrant model
  8231 ;;
  8232                           
  8233                           
  8234                           ;psect for function i1_UART_buff_get
  8235  12AA                     i1_UART_buff_get:	
  8236                           
  8237                           ;incstack = 0
  8238                           ; Regs used in i1_UART_buff_get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8239                           ;i1UART_buff_get@_this stored from wreg
  8240  12AA  00FA               	movwf	i1UART_buff_get@_this
  8241                           
  8242                           ;UART.c: 74: unsigned char c;
  8243                           ;UART.c: 75: if (_this->count > 0) {
  8244  12AB  087A               	movf	i1UART_buff_get@_this,w
  8245  12AC  3E18               	addlw	24
  8246  12AD  0086               	movwf	6
  8247  12AE  3001               	movlw	1	; select bank2/3
  8248  12AF  0087               	movwf	7
  8249  12B0  3F40               	moviw [0]fsr1
  8250  12B1  00F6               	movwf	??i1_UART_buff_get
  8251  12B2  3F41               	moviw [1]fsr1
  8252  12B3  00F7               	movwf	??i1_UART_buff_get+1
  8253  12B4  0877               	movf	??i1_UART_buff_get+1,w
  8254  12B5  3A80               	xorlw	128
  8255  12B6  00F8               	movwf	??i1_UART_buff_get+2
  8256  12B7  3080               	movlw	128
  8257  12B8  0278               	subwf	??i1_UART_buff_get+2,w
  8258  12B9  1D03               	skipz
  8259  12BA  2ABD               	goto	u514_25
  8260  12BB  3001               	movlw	1
  8261  12BC  0276               	subwf	??i1_UART_buff_get,w
  8262  12BD                     u514_25:	
  8263  12BD  1C03               	skipc
  8264  12BE  2AF4               	goto	i1l3574
  8265                           
  8266                           ;UART.c: 76: c = _this->buf[_this->tail];
  8267  12BF  087A               	movf	i1UART_buff_get@_this,w
  8268  12C0  3E16               	addlw	22
  8269  12C1  0086               	movwf	6
  8270  12C2  3001               	movlw	1	; select bank2/3
  8271  12C3  0087               	movwf	7
  8272  12C4  0801               	movf	1,w
  8273  12C5  077A               	addwf	i1UART_buff_get@_this,w
  8274  12C6  00F6               	movwf	??i1_UART_buff_get
  8275  12C7  0876               	movf	??i1_UART_buff_get,w
  8276  12C8  0086               	movwf	6
  8277  12C9  3001               	movlw	1	; select bank2/3
  8278  12CA  0087               	movwf	7
  8279  12CB  0801               	movf	1,w
  8280  12CC  00F7               	movwf	??i1_UART_buff_get+1
  8281  12CD  0877               	movf	??i1_UART_buff_get+1,w
  8282  12CE  00F9               	movwf	i1UART_buff_get@c
  8283                           
  8284                           ;UART.c: 77: _this->tail = UART_buff_modulo_inc(_this->tail, 20);
  8285  12CF  087A               	movf	i1UART_buff_get@_this,w
  8286  12D0  3E16               	addlw	22
  8287  12D1  0086               	movwf	6
  8288  12D2  3001               	movlw	1	; select bank2/3
  8289  12D3  0087               	movwf	7
  8290  12D4  3F40               	moviw [0]fsr1
  8291  12D5  00F0               	movwf	i1UART_buff_modulo_inc@value
  8292  12D6  3F41               	moviw [1]fsr1
  8293  12D7  00F1               	movwf	i1UART_buff_modulo_inc@value+1
  8294  12D8  3014               	movlw	20
  8295  12D9  00F2               	movwf	i1UART_buff_modulo_inc@modulus
  8296  12DA  3000               	movlw	0
  8297  12DB  00F3               	movwf	i1UART_buff_modulo_inc@modulus+1
  8298  12DC  319E  2699  3192   	fcall	i1_UART_buff_modulo_inc
  8299  12DF  087A               	movf	i1UART_buff_get@_this,w
  8300  12E0  3E16               	addlw	22
  8301  12E1  0086               	movwf	6
  8302  12E2  3001               	movlw	1	; select bank2/3
  8303  12E3  0087               	movwf	7
  8304  12E4  0870               	movf	?i1_UART_buff_modulo_inc,w
  8305  12E5  3FC0               	movwi [0]fsr1
  8306  12E6  0871               	movf	?i1_UART_buff_modulo_inc+1,w
  8307  12E7  3FC1               	movwi [1]fsr1
  8308                           
  8309                           ;UART.c: 78: --_this->count;
  8310  12E8  087A               	movf	i1UART_buff_get@_this,w
  8311  12E9  3E18               	addlw	24
  8312  12EA  0086               	movwf	6
  8313  12EB  3001               	movlw	1	; select bank2/3
  8314  12EC  0087               	movwf	7
  8315  12ED  30FF               	movlw	255
  8316  12EE  0781               	addwf	1,f
  8317  12EF  3141               	addfsr 1,1
  8318  12F0  30FF               	movlw	255
  8319  12F1  3D81               	addwfc	1,f
  8320  12F2  317F               	addfsr 1,-1
  8321                           
  8322                           ;UART.c: 79: } else {
  8323  12F3  2AF5               	goto	i1l3576
  8324  12F4                     i1l3574:	
  8325                           
  8326                           ;UART.c: 80: c = 0;
  8327  12F4  01F9               	clrf	i1UART_buff_get@c
  8328  12F5                     i1l3576:	
  8329                           
  8330                           ;UART.c: 81: }
  8331                           ;UART.c: 82: return (c);
  8332  12F5  0879               	movf	i1UART_buff_get@c,w
  8333  12F6  0008               	return
  8334  12F7                     __end_ofi1_UART_buff_get:	
  8335                           
  8336                           	psect	text46
  8337  1E49                     __ptext46:	
  8338 ;; *************** function _UART_buff_size *****************
  8339 ;; Defined at:
  8340 ;;		line 85 in file "UART.c"
  8341 ;; Parameters:    Size  Location     Type
  8342 ;;  _this           1    wreg     PTR struct UART_ring_buf
  8343 ;;		 -> output_buffer(26), input_buffer(26), 
  8344 ;; Auto vars:     Size  Location     Type
  8345 ;;  _this           1    3[COMMON] PTR struct UART_ring_buf
  8346 ;;		 -> output_buffer(26), input_buffer(26), 
  8347 ;; Return value:  Size  Location     Type
  8348 ;;                  2    0[COMMON] int 
  8349 ;; Registers used:
  8350 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8351 ;; Tracked objects:
  8352 ;;		On entry : 0/0
  8353 ;;		On exit  : 0/0
  8354 ;;		Unchanged: 0/0
  8355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8356 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8357 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8359 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8360 ;;Total ram usage:        4 bytes
  8361 ;; Hardware stack levels used:    1
  8362 ;; This function calls:
  8363 ;;		Nothing
  8364 ;; This function is called by:
  8365 ;;		_EUSART1_Transmit_ISR
  8366 ;;		_Receive_available
  8367 ;; This function uses a non-reentrant model
  8368 ;;
  8369                           
  8370                           
  8371                           ;psect for function _UART_buff_size
  8372  1E49                     _UART_buff_size:	
  8373                           
  8374                           ;incstack = 0
  8375                           ; Regs used in _UART_buff_size: [wreg+fsr1l+fsr1h+status,2+status,0]
  8376                           ;UART_buff_size@_this stored from wreg
  8377  1E49  00F3               	movwf	UART_buff_size@_this
  8378                           
  8379                           ;UART.c: 86: return (_this->count);
  8380  1E4A  0873               	movf	UART_buff_size@_this,w
  8381  1E4B  3E18               	addlw	24
  8382  1E4C  0086               	movwf	6
  8383  1E4D  3001               	movlw	1	; select bank2/3
  8384  1E4E  0087               	movwf	7
  8385  1E4F  3F40               	moviw [0]fsr1
  8386  1E50  00F0               	movwf	?_UART_buff_size
  8387  1E51  3F41               	moviw [1]fsr1
  8388  1E52  00F1               	movwf	?_UART_buff_size+1
  8389  1E53  0008               	return
  8390  1E54                     __end_of_UART_buff_size:	
  8391                           
  8392                           	psect	text47
  8393  1E88                     __ptext47:	
  8394 ;; *************** function _EUSART1_Receive_ISR *****************
  8395 ;; Defined at:
  8396 ;;		line 130 in file "UART.c"
  8397 ;; Parameters:    Size  Location     Type
  8398 ;;		None
  8399 ;; Auto vars:     Size  Location     Type
  8400 ;;  data            1   12[COMMON] unsigned char 
  8401 ;; Return value:  Size  Location     Type
  8402 ;;                  1    wreg      void 
  8403 ;; Registers used:
  8404 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8405 ;; Tracked objects:
  8406 ;;		On entry : 0/0
  8407 ;;		On exit  : 0/0
  8408 ;;		Unchanged: 0/0
  8409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8411 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8412 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8413 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8414 ;;Total ram usage:        2 bytes
  8415 ;; Hardware stack levels used:    1
  8416 ;; Hardware stack levels required when called:    2
  8417 ;; This function calls:
  8418 ;;		i1_UART_buff_put
  8419 ;; This function is called by:
  8420 ;;		_INTERRUPT_InterruptManager
  8421 ;; This function uses a non-reentrant model
  8422 ;;
  8423                           
  8424                           
  8425                           ;psect for function _EUSART1_Receive_ISR
  8426  1E88                     _EUSART1_Receive_ISR:	
  8427                           
  8428                           ;UART.c: 131: if (1 == RCSTAbits.OERR) {
  8429                           
  8430                           ;incstack = 0
  8431                           ; Regs used in _EUSART1_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8432  1E88  0023               	movlb	3	; select bank3
  8433  1E89  1C9D               	btfss	29,1	;volatile
  8434  1E8A  2E8D               	goto	i1l3628
  8435                           
  8436                           ;UART.c: 134: RCSTAbits.CREN = 0;
  8437  1E8B  121D               	bcf	29,4	;volatile
  8438                           
  8439                           ;UART.c: 135: RCSTAbits.CREN = 1;
  8440  1E8C  161D               	bsf	29,4	;volatile
  8441  1E8D                     i1l3628:	
  8442                           
  8443                           ;UART.c: 136: }
  8444                           ;UART.c: 137: unsigned char data = RCREG;
  8445  1E8D  0819               	movf	25,w	;volatile
  8446  1E8E  00FB               	movwf	??_EUSART1_Receive_ISR
  8447  1E8F  087B               	movf	??_EUSART1_Receive_ISR,w
  8448  1E90  00FC               	movwf	EUSART1_Receive_ISR@data
  8449                           
  8450                           ;UART.c: 138: UART_buff_put(&input_buffer, data);
  8451  1E91  087C               	movf	EUSART1_Receive_ISR@data,w
  8452  1E92  00FB               	movwf	??_EUSART1_Receive_ISR
  8453  1E93  087B               	movf	??_EUSART1_Receive_ISR,w
  8454  1E94  00F6               	movwf	i1UART_buff_put@c
  8455  1E95  3028               	movlw	(low (_input_buffer| (0+256)))& (0+255)
  8456  1E96  3194  2486         	fcall	i1_UART_buff_put
  8457  1E98  0008               	return
  8458  1E99                     __end_of_EUSART1_Receive_ISR:	
  8459                           
  8460                           	psect	text48
  8461  1486                     __ptext48:	
  8462 ;; *************** function i1_UART_buff_put *****************
  8463 ;; Defined at:
  8464 ;;		line 60 in file "UART.c"
  8465 ;; Parameters:    Size  Location     Type
  8466 ;;  _this           1    wreg     PTR struct UART_ring_buf
  8467 ;;		 -> output_buffer(26), input_buffer(26), 
  8468 ;;  c               1    6[COMMON] const unsigned char 
  8469 ;; Auto vars:     Size  Location     Type
  8470 ;;  _this           1   10[COMMON] PTR struct UART_ring_buf
  8471 ;;		 -> output_buffer(26), input_buffer(26), 
  8472 ;; Return value:  Size  Location     Type
  8473 ;;                  1    wreg      void 
  8474 ;; Registers used:
  8475 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8476 ;; Tracked objects:
  8477 ;;		On entry : 0/0
  8478 ;;		On exit  : 0/0
  8479 ;;		Unchanged: 0/0
  8480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8481 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8482 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8483 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8484 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8485 ;;Total ram usage:        5 bytes
  8486 ;; Hardware stack levels used:    1
  8487 ;; Hardware stack levels required when called:    1
  8488 ;; This function calls:
  8489 ;;		i1_UART_buff_modulo_inc
  8490 ;; This function is called by:
  8491 ;;		_EUSART1_Receive_ISR
  8492 ;; This function uses a non-reentrant model
  8493 ;;
  8494                           
  8495                           
  8496                           ;psect for function i1_UART_buff_put
  8497  1486                     i1_UART_buff_put:	
  8498                           
  8499                           ;incstack = 0
  8500                           ; Regs used in i1_UART_buff_put: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8501                           ;i1UART_buff_put@_this stored from wreg
  8502  1486  00FA               	movwf	i1UART_buff_put@_this
  8503                           
  8504                           ;UART.c: 61: if (_this->count < 20) {
  8505  1487  087A               	movf	i1UART_buff_put@_this,w
  8506  1488  3E18               	addlw	24
  8507  1489  0086               	movwf	6
  8508  148A  3001               	movlw	1	; select bank2/3
  8509  148B  0087               	movwf	7
  8510  148C  3F40               	moviw [0]fsr1
  8511  148D  00F7               	movwf	??i1_UART_buff_put
  8512  148E  3F41               	moviw [1]fsr1
  8513  148F  00F8               	movwf	??i1_UART_buff_put+1
  8514  1490  0878               	movf	??i1_UART_buff_put+1,w
  8515  1491  3A80               	xorlw	128
  8516  1492  00F9               	movwf	??i1_UART_buff_put+2
  8517  1493  3080               	movlw	128
  8518  1494  0279               	subwf	??i1_UART_buff_put+2,w
  8519  1495  1D03               	skipz
  8520  1496  2C99               	goto	u513_25
  8521  1497  3014               	movlw	20
  8522  1498  0277               	subwf	??i1_UART_buff_put,w
  8523  1499                     u513_25:	
  8524  1499  1803               	skipnc
  8525  149A  2CCE               	goto	i1l3560
  8526                           
  8527                           ;UART.c: 62: _this->buf[_this->head] = c;
  8528  149B  0876               	movf	i1UART_buff_put@c,w
  8529  149C  00F7               	movwf	??i1_UART_buff_put
  8530  149D  087A               	movf	i1UART_buff_put@_this,w
  8531  149E  3E14               	addlw	20
  8532  149F  0086               	movwf	6
  8533  14A0  3001               	movlw	1	; select bank2/3
  8534  14A1  0087               	movwf	7
  8535  14A2  0801               	movf	1,w
  8536  14A3  077A               	addwf	i1UART_buff_put@_this,w
  8537  14A4  00F8               	movwf	??i1_UART_buff_put+1
  8538  14A5  0878               	movf	??i1_UART_buff_put+1,w
  8539  14A6  0086               	movwf	6
  8540  14A7  3001               	movlw	1	; select bank2/3
  8541  14A8  0087               	movwf	7
  8542  14A9  0877               	movf	??i1_UART_buff_put,w
  8543  14AA  0081               	movwf	1
  8544                           
  8545                           ;UART.c: 63: _this->head = UART_buff_modulo_inc(_this->head, 20);
  8546  14AB  087A               	movf	i1UART_buff_put@_this,w
  8547  14AC  3E14               	addlw	20
  8548  14AD  0086               	movwf	6
  8549  14AE  3001               	movlw	1	; select bank2/3
  8550  14AF  0087               	movwf	7
  8551  14B0  3F40               	moviw [0]fsr1
  8552  14B1  00F0               	movwf	i1UART_buff_modulo_inc@value
  8553  14B2  3F41               	moviw [1]fsr1
  8554  14B3  00F1               	movwf	i1UART_buff_modulo_inc@value+1
  8555  14B4  3014               	movlw	20
  8556  14B5  00F2               	movwf	i1UART_buff_modulo_inc@modulus
  8557  14B6  3000               	movlw	0
  8558  14B7  00F3               	movwf	i1UART_buff_modulo_inc@modulus+1
  8559  14B8  319E  2699         	fcall	i1_UART_buff_modulo_inc
  8560  14BA  087A               	movf	i1UART_buff_put@_this,w
  8561  14BB  3E14               	addlw	20
  8562  14BC  0086               	movwf	6
  8563  14BD  3001               	movlw	1	; select bank2/3
  8564  14BE  0087               	movwf	7
  8565  14BF  0870               	movf	?i1_UART_buff_modulo_inc,w
  8566  14C0  3FC0               	movwi [0]fsr1
  8567  14C1  0871               	movf	?i1_UART_buff_modulo_inc+1,w
  8568  14C2  3FC1               	movwi [1]fsr1
  8569                           
  8570                           ;UART.c: 64: ++_this->count;
  8571  14C3  087A               	movf	i1UART_buff_put@_this,w
  8572  14C4  3E18               	addlw	24
  8573  14C5  0086               	movwf	6
  8574  14C6  3001               	movlw	1	; select bank2/3
  8575  14C7  0087               	movwf	7
  8576  14C8  3001               	movlw	1
  8577  14C9  0781               	addwf	1,f
  8578  14CA  3141               	addfsr 1,1
  8579  14CB  1803               	skipnc
  8580  14CC  0A81               	incf	1,f
  8581                           
  8582                           ;UART.c: 65: } else {
  8583  14CD  0008               	return
  8584  14CE                     i1l3560:	
  8585                           
  8586                           ;UART.c: 66: _this->buf[_this->head] = c;
  8587  14CE  0876               	movf	i1UART_buff_put@c,w
  8588  14CF  00F7               	movwf	??i1_UART_buff_put
  8589  14D0  087A               	movf	i1UART_buff_put@_this,w
  8590  14D1  3E14               	addlw	20
  8591  14D2  0086               	movwf	6
  8592  14D3  3001               	movlw	1	; select bank2/3
  8593  14D4  0087               	movwf	7
  8594  14D5  0801               	movf	1,w
  8595  14D6  077A               	addwf	i1UART_buff_put@_this,w
  8596  14D7  00F8               	movwf	??i1_UART_buff_put+1
  8597  14D8  0878               	movf	??i1_UART_buff_put+1,w
  8598  14D9  0086               	movwf	6
  8599  14DA  3001               	movlw	1	; select bank2/3
  8600  14DB  0087               	movwf	7
  8601  14DC  0877               	movf	??i1_UART_buff_put,w
  8602  14DD  0081               	movwf	1
  8603                           
  8604                           ;UART.c: 67: _this->head = UART_buff_modulo_inc(_this->head, 20);
  8605  14DE  087A               	movf	i1UART_buff_put@_this,w
  8606  14DF  3E14               	addlw	20
  8607  14E0  0086               	movwf	6
  8608  14E1  3001               	movlw	1	; select bank2/3
  8609  14E2  0087               	movwf	7
  8610  14E3  3F40               	moviw [0]fsr1
  8611  14E4  00F0               	movwf	i1UART_buff_modulo_inc@value
  8612  14E5  3F41               	moviw [1]fsr1
  8613  14E6  00F1               	movwf	i1UART_buff_modulo_inc@value+1
  8614  14E7  3014               	movlw	20
  8615  14E8  00F2               	movwf	i1UART_buff_modulo_inc@modulus
  8616  14E9  3000               	movlw	0
  8617  14EA  00F3               	movwf	i1UART_buff_modulo_inc@modulus+1
  8618  14EB  319E  2699  3194   	fcall	i1_UART_buff_modulo_inc
  8619  14EE  087A               	movf	i1UART_buff_put@_this,w
  8620  14EF  3E14               	addlw	20
  8621  14F0  0086               	movwf	6
  8622  14F1  3001               	movlw	1	; select bank2/3
  8623  14F2  0087               	movwf	7
  8624  14F3  0870               	movf	?i1_UART_buff_modulo_inc,w
  8625  14F4  3FC0               	movwi [0]fsr1
  8626  14F5  0871               	movf	?i1_UART_buff_modulo_inc+1,w
  8627  14F6  3FC1               	movwi [1]fsr1
  8628                           
  8629                           ;UART.c: 68: _this->tail = UART_buff_modulo_inc(_this->tail, 20);
  8630  14F7  087A               	movf	i1UART_buff_put@_this,w
  8631  14F8  3E16               	addlw	22
  8632  14F9  0086               	movwf	6
  8633  14FA  3001               	movlw	1	; select bank2/3
  8634  14FB  0087               	movwf	7
  8635  14FC  3F40               	moviw [0]fsr1
  8636  14FD  00F0               	movwf	i1UART_buff_modulo_inc@value
  8637  14FE  3F41               	moviw [1]fsr1
  8638  14FF  00F1               	movwf	i1UART_buff_modulo_inc@value+1
  8639  1500  3014               	movlw	20
  8640  1501  00F2               	movwf	i1UART_buff_modulo_inc@modulus
  8641  1502  3000               	movlw	0
  8642  1503  00F3               	movwf	i1UART_buff_modulo_inc@modulus+1
  8643  1504  319E  2699         	fcall	i1_UART_buff_modulo_inc
  8644  1506  087A               	movf	i1UART_buff_put@_this,w
  8645  1507  3E16               	addlw	22
  8646  1508  0086               	movwf	6
  8647  1509  3001               	movlw	1	; select bank2/3
  8648  150A  0087               	movwf	7
  8649  150B  0870               	movf	?i1_UART_buff_modulo_inc,w
  8650  150C  3FC0               	movwi [0]fsr1
  8651  150D  0871               	movf	?i1_UART_buff_modulo_inc+1,w
  8652  150E  3FC1               	movwi [1]fsr1
  8653  150F  0008               	return
  8654  1510                     __end_ofi1_UART_buff_put:	
  8655                           
  8656                           	psect	text49
  8657  1E99                     __ptext49:	
  8658 ;; *************** function i1_UART_buff_modulo_inc *****************
  8659 ;; Defined at:
  8660 ;;		line 89 in file "UART.c"
  8661 ;; Parameters:    Size  Location     Type
  8662 ;;  value           2    0[COMMON] const unsigned int 
  8663 ;;  modulus         2    2[COMMON] const unsigned int 
  8664 ;; Auto vars:     Size  Location     Type
  8665 ;;  UART_buff_mo    2    4[COMMON] unsigned int 
  8666 ;; Return value:  Size  Location     Type
  8667 ;;                  2    0[COMMON] unsigned int 
  8668 ;; Registers used:
  8669 ;;		wreg, status,2, status,0
  8670 ;; Tracked objects:
  8671 ;;		On entry : 0/0
  8672 ;;		On exit  : 0/0
  8673 ;;		Unchanged: 0/0
  8674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8675 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8676 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8678 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8679 ;;Total ram usage:        6 bytes
  8680 ;; Hardware stack levels used:    1
  8681 ;; This function calls:
  8682 ;;		Nothing
  8683 ;; This function is called by:
  8684 ;;		i1_UART_buff_put
  8685 ;;		i1_UART_buff_get
  8686 ;; This function uses a non-reentrant model
  8687 ;;
  8688                           
  8689                           
  8690                           ;psect for function i1_UART_buff_modulo_inc
  8691  1E99                     i1_UART_buff_modulo_inc:	
  8692                           
  8693                           ;UART.c: 90: unsigned int my_value = value + 1;
  8694                           
  8695                           ;incstack = 0
  8696                           ; Regs used in i1_UART_buff_modulo_inc: [wreg+status,2+status,0]
  8697  1E99  0870               	movf	i1UART_buff_modulo_inc@value,w
  8698  1E9A  3E01               	addlw	1
  8699  1E9B  00F4               	movwf	i1UART_buff_modulo_inc@my_value
  8700  1E9C  3000               	movlw	0
  8701  1E9D  3D71               	addwfc	i1UART_buff_modulo_inc@value+1,w
  8702  1E9E  00F5               	movwf	i1UART_buff_modulo_inc@my_value+1
  8703                           
  8704                           ;UART.c: 91: if (my_value >= modulus) {
  8705  1E9F  0873               	movf	i1UART_buff_modulo_inc@modulus+1,w
  8706  1EA0  0275               	subwf	i1UART_buff_modulo_inc@my_value+1,w
  8707  1EA1  1D03               	skipz
  8708  1EA2  2EA5               	goto	u506_25
  8709  1EA3  0872               	movf	i1UART_buff_modulo_inc@modulus,w
  8710  1EA4  0274               	subwf	i1UART_buff_modulo_inc@my_value,w
  8711  1EA5                     u506_25:	
  8712  1EA5  1C03               	skipc
  8713  1EA6  2EA9               	goto	i1l3480
  8714                           
  8715                           ;UART.c: 92: my_value = 0;
  8716  1EA7  01F4               	clrf	i1UART_buff_modulo_inc@my_value
  8717  1EA8  01F5               	clrf	i1UART_buff_modulo_inc@my_value+1
  8718  1EA9                     i1l3480:	
  8719                           
  8720                           ;UART.c: 93: }
  8721                           ;UART.c: 94: return (my_value);
  8722  1EA9  0875               	movf	i1UART_buff_modulo_inc@my_value+1,w
  8723  1EAA  00F1               	movwf	?i1_UART_buff_modulo_inc+1
  8724  1EAB  0874               	movf	i1UART_buff_modulo_inc@my_value,w
  8725  1EAC  00F0               	movwf	?i1_UART_buff_modulo_inc
  8726  1EAD  0008               	return
  8727  1EAE                     __end_ofi1_UART_buff_modulo_inc:	
  8728  007E                     btemp	set	126	;btemp
  8729  007E                     int$flags	set	126
  8730  007E                     wtemp	set	126
  8731  007E                     wtemp0	set	126
  8732  0080                     wtemp1	set	128
  8733  0082                     wtemp2	set	130
  8734  0084                     wtemp3	set	132
  8735  0086                     wtemp4	set	134
  8736  0088                     wtemp5	set	136
  8737  007F                     wtemp6	set	127
  8738  007E                     ttemp	set	126
  8739  007E                     ttemp0	set	126
  8740  0081                     ttemp1	set	129
  8741  0084                     ttemp2	set	132
  8742  0087                     ttemp3	set	135
  8743  007F                     ttemp4	set	127
  8744  007E                     ltemp	set	126
  8745  007E                     ltemp0	set	126
  8746  0082                     ltemp1	set	130
  8747  0086                     ltemp2	set	134
  8748  0080                     ltemp3	set	128
  8749                           
  8750                           	psect	text15_split_1
  8751  0042                     l3054:	
  8752                           ;doprnt.c: 624: }
  8753                           ;doprnt.c: 625: } else {
  8754                           
  8755                           
  8756                           ;doprnt.c: 626: prec = 0;
  8757  0042  0021               	movlb	1	; select bank1
  8758  0043  01D1               	clrf	printf@prec^(0+128)
  8759  0044  01D2               	clrf	(printf@prec+1)^(0+128)
  8760                           
  8761                           ;doprnt.c: 628: flag |= 0x1000;
  8762  0045  1657               	bsf	(printf@flag^(0+128)+1),4
  8763                           
  8764                           ;doprnt.c: 630: }
  8765                           ;doprnt.c: 635: switch(c = *f++) {
  8766  0046  28CA               	goto	l3100
  8767  0047                     l340:	
  8768                           ;doprnt.c: 662: case 'f':
  8769                           
  8770                           ;doprnt.c: 638: goto alldone;
  8771                           
  8772                           ;doprnt.c: 637: case 0:
  8773                           
  8774                           
  8775                           ;doprnt.c: 663: flag |= 0x400;
  8776  0047  1557               	bsf	(printf@flag^(0+128)+1),2
  8777                           
  8778                           ;doprnt.c: 664: break;
  8779  0048  28FA               	goto	l3102
  8780  0049                     l342:	
  8781                           ;doprnt.c: 689: case 'o':
  8782                           
  8783                           
  8784                           ;doprnt.c: 691: flag |= 0x40;
  8785  0049  1756               	bsf	printf@flag^(0+128),6
  8786                           
  8787                           ;doprnt.c: 698: case 'i':
  8788                           ;doprnt.c: 699: break;
  8789                           
  8790                           ;doprnt.c: 697: case 'd':
  8791                           
  8792                           ;doprnt.c: 693: break;
  8793  004A  28FA               	goto	l3102
  8794  004B                     l345:	
  8795                           ;doprnt.c: 712: case 'X':
  8796                           
  8797                           
  8798                           ;doprnt.c: 714: flag |= 0x20;
  8799  004B  16D6               	bsf	printf@flag^(0+128),5
  8800  004C                     l346:	
  8801                           ;doprnt.c: 718: case 'x':
  8802                           
  8803                           
  8804                           ;doprnt.c: 721: flag |= 0x80;
  8805  004C  17D6               	bsf	printf@flag^(0+128),7
  8806                           
  8807                           ;doprnt.c: 723: break;
  8808  004D  28FA               	goto	l3102
  8809  004E                     l3058:	
  8810                           ;doprnt.c: 750: dostring:
  8811                           
  8812                           
  8813                           ;doprnt.c: 753: if(prec && prec < len)
  8814  004E  0851               	movf	printf@prec^(0+128),w
  8815  004F  0452               	iorwf	(printf@prec+1)^(0+128),w
  8816  0050  1903               	btfsc	3,2
  8817  0051  285E               	goto	l348
  8818  0052  0842               	movf	(printf@len+1)^(0+128),w
  8819  0053  0252               	subwf	(printf@prec+1)^(0+128),w
  8820  0054  1D03               	skipz
  8821  0055  2858               	goto	u4145
  8822  0056  0841               	movf	printf@len^(0+128),w
  8823  0057  0251               	subwf	printf@prec^(0+128),w
  8824  0058                     u4145:	
  8825  0058  1803               	skipnc
  8826  0059  285E               	goto	l348
  8827                           
  8828                           ;doprnt.c: 754: len = prec;
  8829  005A  0852               	movf	(printf@prec+1)^(0+128),w
  8830  005B  00C2               	movwf	(printf@len+1)^(0+128)
  8831  005C  0851               	movf	printf@prec^(0+128),w
  8832  005D  00C1               	movwf	printf@len^(0+128)
  8833  005E                     l348:	
  8834                           
  8835                           ;doprnt.c: 757: if(width > len)
  8836  005E  0854               	movf	(printf@width+1)^(0+128),w
  8837  005F  0242               	subwf	(printf@len+1)^(0+128),w
  8838  0060  1D03               	skipz
  8839  0061  2864               	goto	u4155
  8840  0062  0853               	movf	printf@width^(0+128),w
  8841  0063  0241               	subwf	printf@len^(0+128),w
  8842  0064                     u4155:	
  8843  0064  1803               	skipnc
  8844  0065  286B               	goto	l3066
  8845                           
  8846                           ;doprnt.c: 758: width -= len;
  8847  0066  0841               	movf	printf@len^(0+128),w
  8848  0067  02D3               	subwf	printf@width^(0+128),f
  8849  0068  0842               	movf	(printf@len+1)^(0+128),w
  8850  0069  3BD4               	subwfb	(printf@width+1)^(0+128),f
  8851  006A  286D               	goto	l3068
  8852  006B                     l3066:	
  8853                           
  8854                           ;doprnt.c: 759: else
  8855                           ;doprnt.c: 760: width = 0;
  8856  006B  01D3               	clrf	printf@width^(0+128)
  8857  006C  01D4               	clrf	(printf@width+1)^(0+128)
  8858  006D                     l3068:	
  8859                           
  8860                           ;doprnt.c: 762: if(!(flag & 0x08))
  8861  006D  1DD6               	btfss	printf@flag^(0+128),3
  8862  006E  2874               	goto	l3074
  8863  006F  288D               	goto	l3080
  8864  0070                     l3072:	
  8865                           ;doprnt.c: 764: while(width--)
  8866                           
  8867                           
  8868                           ;doprnt.c: 765: (putch(' ') );
  8869  0070  3020               	movlw	32
  8870  0071  319E  2618  3180   	fcall	_putch
  8871  0074                     l3074:	
  8872  0074  30FF               	movlw	255
  8873  0075  0021               	movlb	1	; select bank1
  8874  0076  07D3               	addwf	printf@width^(0+128),f
  8875  0077  30FF               	movlw	255
  8876  0078  3DD4               	addwfc	(printf@width+1)^(0+128),f
  8877  0079  0A53               	incf	printf@width^(0+128),w
  8878  007A  1D03               	skipz
  8879  007B  2870               	goto	l3072
  8880  007C  0A54               	incf	(printf@width+1)^(0+128),w
  8881  007D  1903               	btfsc	3,2
  8882  007E  288D               	goto	l3080
  8883  007F  2870               	goto	l3072
  8884  0080                     l3076:	
  8885                           ;doprnt.c: 767: while(len--)
  8886                           
  8887                           
  8888                           ;doprnt.c: 768: (putch(*cp++) );
  8889  0080  0840               	movf	printf@cp^(0+128),w
  8890  0081  0086               	movwf	6
  8891  0082  0187               	clrf	7
  8892  0083  0801               	movf	1,w
  8893  0084  319E  2618  3180   	fcall	_putch
  8894  0087  3001               	movlw	1
  8895  0088  0020               	movlb	0	; select bank0
  8896  0089  00E7               	movwf	??_printf
  8897  008A  0867               	movf	??_printf,w
  8898  008B  0021               	movlb	1	; select bank1
  8899  008C  07C0               	addwf	printf@cp^(0+128),f
  8900  008D                     l3080:	
  8901  008D  3001               	movlw	1
  8902  008E  02C1               	subwf	printf@len^(0+128),f
  8903  008F  3000               	movlw	0
  8904  0090  3BC2               	subwfb	(printf@len+1)^(0+128),f
  8905  0091  0A41               	incf	printf@len^(0+128),w
  8906  0092  1D03               	skipz
  8907  0093  2880               	goto	l3076
  8908  0094  0A42               	incf	(printf@len+1)^(0+128),w
  8909  0095  1D03               	btfss	3,2
  8910  0096  2880               	goto	l3076
  8911                           
  8912                           ;doprnt.c: 770: if(flag & 0x08)
  8913  0097  19D6               	btfsc	printf@flag^(0+128),3
  8914  0098  289F               	goto	l3086
  8915  0099                     L27:	
  8916  0099  3188  2835         	goto	l3472
  8917  009B                     l3084:	
  8918                           ;doprnt.c: 771: while(width--)
  8919                           
  8920                           
  8921                           ;doprnt.c: 772: (putch(' ') );
  8922  009B  3020               	movlw	32
  8923  009C  319E  2618  3180   	fcall	_putch
  8924  009F                     l3086:	
  8925  009F  30FF               	movlw	255
  8926  00A0  0021               	movlb	1	; select bank1
  8927  00A1  07D3               	addwf	printf@width^(0+128),f
  8928  00A2  30FF               	movlw	255
  8929  00A3  3DD4               	addwfc	(printf@width+1)^(0+128),f
  8930  00A4  0A53               	incf	printf@width^(0+128),w
  8931  00A5  1D03               	skipz
  8932  00A6  289B               	goto	l3084
  8933  00A7  0A54               	incf	(printf@width+1)^(0+128),w
  8934  00A8  1903               	btfsc	3,2
  8935  00A9  2899               	goto	L27
  8936  00AA  289B               	goto	l3084
  8937  00AB                     l3088:	
  8938                           ;doprnt.c: 784: case 'c':
  8939                           
  8940                           ;doprnt.c: 774: continue;
  8941                           
  8942                           
  8943                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  8944  00AB  0843               	movf	printf@ap^(0+128),w
  8945  00AC  0086               	movwf	6
  8946  00AD  0187               	clrf	7
  8947  00AE  0801               	movf	1,w
  8948  00AF  0020               	movlb	0	; select bank0
  8949  00B0  00E7               	movwf	??_printf
  8950  00B1  0867               	movf	??_printf,w
  8951  00B2  0021               	movlb	1	; select bank1
  8952  00B3  00D5               	movwf	printf@c^(0+128)
  8953  00B4  3002               	movlw	2
  8954  00B5  0020               	movlb	0	; select bank0
  8955  00B6  00E7               	movwf	??_printf
  8956  00B7  0867               	movf	??_printf,w
  8957  00B8  0021               	movlb	1	; select bank1
  8958  00B9  07C3               	addwf	printf@ap^(0+128),f
  8959  00BA                     l3092:	
  8960                           ;doprnt.c: 802: default:
  8961                           
  8962                           
  8963                           ;doprnt.c: 805: cp = (char *)&c;
  8964  00BA  30D5               	movlw	(low (printf@c| 0))& (0+255)
  8965  00BB  0020               	movlb	0	; select bank0
  8966  00BC  00E7               	movwf	??_printf
  8967  00BD  0867               	movf	??_printf,w
  8968  00BE  0021               	movlb	1	; select bank1
  8969  00BF  00C0               	movwf	printf@cp^(0+128)
  8970                           
  8971                           ;doprnt.c: 806: len = 1;
  8972  00C0  3001               	movlw	1
  8973  00C1  00C1               	movwf	printf@len^(0+128)
  8974  00C2  3000               	movlw	0
  8975  00C3  00C2               	movwf	(printf@len^(0+128)+1)
  8976                           
  8977                           ;doprnt.c: 807: goto dostring;
  8978  00C4  284E               	goto	l3058
  8979  00C5                     l3096:	
  8980                           ;doprnt.c: 817: case 'u':
  8981                           
  8982                           
  8983                           ;doprnt.c: 818: flag |= 0xC0;
  8984  00C5  30C0               	movlw	192
  8985  00C6  04D6               	iorwf	printf@flag^(0+128),f
  8986  00C7  3000               	movlw	0
  8987  00C8  04D7               	iorwf	(printf@flag+1)^(0+128),f
  8988                           
  8989                           ;doprnt.c: 822: }
  8990                           
  8991                           ;doprnt.c: 819: break;
  8992  00C9  28FA               	goto	l3102
  8993  00CA                     l3100:	
  8994  00CA  0021               	movlb	1	; select bank1
  8995  00CB  0821               	movf	(printf@f+1)^(0+128),w
  8996  00CC  0020               	movlb	0	; select bank0
  8997  00CD  00E8               	movwf	??_printf+1
  8998  00CE  0021               	movlb	1	; select bank1
  8999  00CF  0820               	movf	printf@f^(0+128),w
  9000  00D0  0020               	movlb	0	; select bank0
  9001  00D1  00E7               	movwf	??_printf
  9002  00D2  0021               	movlb	1	; select bank1
  9003  00D3  0AA0               	incf	printf@f^(0+128),f
  9004  00D4  1903               	skipnz
  9005  00D5  0AA1               	incf	(printf@f+1)^(0+128),f
  9006  00D6  0020               	movlb	0	; select bank0
  9007  00D7  0867               	movf	??_printf,w
  9008  00D8  0084               	movwf	4
  9009  00D9  0868               	movf	??_printf+1,w
  9010  00DA  0085               	movwf	5
  9011  00DB  0800               	movf	0,w	;code access
  9012  00DC  0021               	movlb	1	; select bank1
  9013  00DD  00D5               	movwf	printf@c^(0+128)
  9014                           
  9015                           ; Switch size 1, requested type "space"
  9016                           ; Number of cases is 9, Range of values is 0 to 120
  9017                           ; switch strategies available:
  9018                           ; Name         Instructions Cycles
  9019                           ; simple_byte           28    15 (average)
  9020                           ; direct_byte          248     6 (fixed)
  9021                           ; jumptable            260     6 (fixed)
  9022                           ;	Chosen strategy is simple_byte
  9023  00DE  3A00               	xorlw	0	; case 0
  9024  00DF  1903               	skipnz
  9025  00E0  2E41               	goto	L29
  9026  00E1  3A58               	xorlw	88	; case 88
  9027  00E2  1903               	skipnz
  9028  00E3  284B               	goto	l345
  9029  00E4  3A3B               	xorlw	59	; case 99
  9030  00E5  1903               	skipnz
  9031  00E6  28AB               	goto	l3088
  9032  00E7  3A07               	xorlw	7	; case 100
  9033  00E8  1903               	skipnz
  9034  00E9  28FA               	goto	l3102
  9035  00EA  3A02               	xorlw	2	; case 102
  9036  00EB  1903               	skipnz
  9037  00EC  2847               	goto	l340
  9038  00ED  3A0F               	xorlw	15	; case 105
  9039  00EE  1903               	skipnz
  9040  00EF  28FA               	goto	l3102
  9041  00F0  3A06               	xorlw	6	; case 111
  9042  00F1  1903               	skipnz
  9043  00F2  2849               	goto	l342
  9044  00F3  3A1A               	xorlw	26	; case 117
  9045  00F4  1903               	skipnz
  9046  00F5  28C5               	goto	l3096
  9047  00F6  3A0D               	xorlw	13	; case 120
  9048  00F7  1903               	skipnz
  9049  00F8  284C               	goto	l346
  9050  00F9  28BA               	goto	l3092
  9051  00FA                     l3102:	
  9052                           
  9053                           ;doprnt.c: 825: if(flag & (0x700)) {
  9054  00FA  3000               	movlw	0
  9055  00FB  0556               	andwf	printf@flag^(0+128),w
  9056  00FC  0020               	movlb	0	; select bank0
  9057  00FD  00E7               	movwf	??_printf
  9058  00FE  3007               	movlw	7
  9059  00FF  0021               	movlb	1	; select bank1
  9060  0100  0557               	andwf	(printf@flag+1)^(0+128),w
  9061  0101  0020               	movlb	0	; select bank0
  9062  0102  00E8               	movwf	??_printf+1
  9063  0103  0867               	movf	??_printf,w
  9064  0104  0468               	iorwf	??_printf+1,w
  9065  0105  1903               	btfsc	3,2
  9066  0106  2E03               	goto	l3292
  9067                           
  9068                           ;doprnt.c: 827: if(flag & 0x1000)
  9069  0107  0021               	movlb	1	; select bank1
  9070  0108  1E57               	btfss	(printf@flag+1)^(0+128),4
  9071  0109  290E               	goto	l3108
  9072                           
  9073                           ;doprnt.c: 829: prec = 6;
  9074  010A  3006               	movlw	6
  9075  010B  00D1               	movwf	printf@prec^(0+128)
  9076  010C  3000               	movlw	0
  9077  010D  00D2               	movwf	(printf@prec^(0+128)+1)
  9078  010E                     l3108:	
  9079                           
  9080                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  9081  010E  0843               	movf	printf@ap^(0+128),w
  9082  010F  0086               	movwf	6
  9083  0110  0187               	clrf	7
  9084  0111  3F40               	moviw [0]fsr1
  9085  0112  00CA               	movwf	printf@fval^(0+128)
  9086  0113  3F41               	moviw [1]fsr1
  9087  0114  00CB               	movwf	(printf@fval+1)^(0+128)
  9088  0115  3F42               	moviw [2]fsr1
  9089  0116  00CC               	movwf	(printf@fval+2)^(0+128)
  9090  0117  3003               	movlw	3
  9091  0118  0020               	movlb	0	; select bank0
  9092  0119  00E7               	movwf	??_printf
  9093  011A  0867               	movf	??_printf,w
  9094  011B  0021               	movlb	1	; select bank1
  9095  011C  07C3               	addwf	printf@ap^(0+128),f
  9096                           
  9097                           ;doprnt.c: 831: if(fval < 0.0) {
  9098  011D  084A               	movf	printf@fval^(0+128),w
  9099  011E  0020               	movlb	0	; select bank0
  9100  011F  00A0               	movwf	___ftge@ff1
  9101  0120  0021               	movlb	1	; select bank1
  9102  0121  084B               	movf	(printf@fval+1)^(0+128),w
  9103  0122  0020               	movlb	0	; select bank0
  9104  0123  00A1               	movwf	___ftge@ff1+1
  9105  0124  0021               	movlb	1	; select bank1
  9106  0125  084C               	movf	(printf@fval+2)^(0+128),w
  9107  0126  0020               	movlb	0	; select bank0
  9108  0127  00A2               	movwf	___ftge@ff1+2
  9109  0128  3000               	movlw	0
  9110  0129  00A3               	movwf	___ftge@ff2
  9111  012A  3000               	movlw	0
  9112  012B  00A4               	movwf	___ftge@ff2+1
  9113  012C  3000               	movlw	0
  9114  012D  00A5               	movwf	___ftge@ff2+2
  9115  012E  3191  21A3  3180   	fcall	___ftge
  9116  0131  1803               	btfsc	3,0
  9117  0132  2952               	goto	l3118
  9118                           
  9119                           ;doprnt.c: 832: fval = -fval;
  9120  0133  0021               	movlb	1	; select bank1
  9121  0134  084A               	movf	printf@fval^(0+128),w
  9122  0135  0020               	movlb	0	; select bank0
  9123  0136  00A0               	movwf	___ftneg@f1
  9124  0137  0021               	movlb	1	; select bank1
  9125  0138  084B               	movf	(printf@fval+1)^(0+128),w
  9126  0139  0020               	movlb	0	; select bank0
  9127  013A  00A1               	movwf	___ftneg@f1+1
  9128  013B  0021               	movlb	1	; select bank1
  9129  013C  084C               	movf	(printf@fval+2)^(0+128),w
  9130  013D  0020               	movlb	0	; select bank0
  9131  013E  00A2               	movwf	___ftneg@f1+2
  9132  013F  319E  262C  3180   	fcall	___ftneg
  9133  0142  0020               	movlb	0	; select bank0
  9134  0143  0820               	movf	?___ftneg,w
  9135  0144  0021               	movlb	1	; select bank1
  9136  0145  00CA               	movwf	printf@fval^(0+128)
  9137  0146  0020               	movlb	0	; select bank0
  9138  0147  0821               	movf	?___ftneg+1,w
  9139  0148  0021               	movlb	1	; select bank1
  9140  0149  00CB               	movwf	(printf@fval+1)^(0+128)
  9141  014A  0020               	movlb	0	; select bank0
  9142  014B  0822               	movf	?___ftneg+2,w
  9143  014C  0021               	movlb	1	; select bank1
  9144  014D  00CC               	movwf	(printf@fval+2)^(0+128)
  9145                           
  9146                           ;doprnt.c: 833: flag |= 0x03;
  9147  014E  3003               	movlw	3
  9148  014F  04D6               	iorwf	printf@flag^(0+128),f
  9149  0150  3000               	movlw	0
  9150  0151  04D7               	iorwf	(printf@flag+1)^(0+128),f
  9151  0152                     l3118:	
  9152                           
  9153                           ;doprnt.c: 834: }
  9154                           ;doprnt.c: 835: exp = 0;
  9155  0152  0021               	movlb	1	; select bank1
  9156  0153  01C8               	clrf	printf@exp^(0+128)
  9157  0154  01C9               	clrf	(printf@exp+1)^(0+128)
  9158                           
  9159                           ;doprnt.c: 836: if( fval!=0) {
  9160  0155  084C               	movf	(printf@fval+2)^(0+128),w
  9161  0156  044B               	iorwf	(printf@fval+1)^(0+128),w
  9162  0157  044A               	iorwf	printf@fval^(0+128),w
  9163  0158  1903               	skipnz
  9164  0159  2A24               	goto	l368
  9165                           
  9166                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  9167  015A  30CA               	movlw	low (printf@fval| 0)
  9168  015B  0086               	movwf	6
  9169  015C  0187               	clrf	7
  9170  015D  3F40               	moviw [0]fsr1
  9171  015E  0020               	movlb	0	; select bank0
  9172  015F  00E7               	movwf	??_printf
  9173  0160  3F41               	moviw [1]fsr1
  9174  0161  00E8               	movwf	??_printf+1
  9175  0162  3F42               	moviw [2]fsr1
  9176  0163  00E9               	movwf	??_printf+2
  9177  0164  3F43               	moviw [3]fsr1
  9178  0165  00EA               	movwf	??_printf+3
  9179  0166  300F               	movlw	15
  9180  0167                     u4255:	
  9181  0167  36EA               	lsrf	??_printf+3,f
  9182  0168  0CE9               	rrf	??_printf+2,f
  9183  0169  0CE8               	rrf	??_printf+1,f
  9184  016A  0CE7               	rrf	??_printf,f
  9185  016B  0B89               	decfsz	9,f
  9186  016C  2967               	goto	u4255
  9187  016D  30FF               	movlw	255
  9188  016E  0567               	andwf	??_printf,w
  9189  016F  00EB               	movwf	??_printf+4
  9190  0170  3000               	movlw	0
  9191  0171  0568               	andwf	??_printf+1,w
  9192  0172  00EC               	movwf	??_printf+5
  9193  0173  086B               	movf	??_printf+4,w
  9194  0174  3E82               	addlw	130
  9195  0175  0021               	movlb	1	; select bank1
  9196  0176  00C8               	movwf	printf@exp^(0+128)
  9197  0177  30FF               	movlw	255
  9198  0178  0020               	movlb	0	; select bank0
  9199  0179  3D6C               	addwfc	??_printf+5,w
  9200  017A  0021               	movlb	1	; select bank1
  9201  017B  00C9               	movwf	(printf@exp+1)^(0+128)
  9202                           
  9203                           ;doprnt.c: 838: exp--;
  9204  017C  30FF               	movlw	255
  9205  017D  07C8               	addwf	printf@exp^(0+128),f
  9206  017E  30FF               	movlw	255
  9207  017F  3DC9               	addwfc	(printf@exp+1)^(0+128),f
  9208                           
  9209                           ;doprnt.c: 839: exp *= 3;
  9210  0180  3003               	movlw	3
  9211  0181  0020               	movlb	0	; select bank0
  9212  0182  00B0               	movwf	___wmul@multiplier
  9213  0183  3000               	movlw	0
  9214  0184  00B1               	movwf	___wmul@multiplier+1
  9215  0185  0021               	movlb	1	; select bank1
  9216  0186  0849               	movf	(printf@exp+1)^(0+128),w
  9217  0187  0020               	movlb	0	; select bank0
  9218  0188  00B3               	movwf	___wmul@multiplicand+1
  9219  0189  0021               	movlb	1	; select bank1
  9220  018A  0848               	movf	printf@exp^(0+128),w
  9221  018B  0020               	movlb	0	; select bank0
  9222  018C  00B2               	movwf	___wmul@multiplicand
  9223  018D  319F  270B  3180   	fcall	___wmul
  9224  0190  0020               	movlb	0	; select bank0
  9225  0191  0831               	movf	?___wmul+1,w
  9226  0192  0021               	movlb	1	; select bank1
  9227  0193  00C9               	movwf	(printf@exp+1)^(0+128)
  9228  0194  0020               	movlb	0	; select bank0
  9229  0195  0830               	movf	?___wmul,w
  9230  0196  0021               	movlb	1	; select bank1
  9231  0197  00C8               	movwf	printf@exp^(0+128)
  9232                           
  9233                           ;doprnt.c: 840: exp /= 10;
  9234  0198  300A               	movlw	10
  9235  0199  0020               	movlb	0	; select bank0
  9236  019A  00A7               	movwf	___awdiv@divisor
  9237  019B  3000               	movlw	0
  9238  019C  00A8               	movwf	___awdiv@divisor+1
  9239  019D  0021               	movlb	1	; select bank1
  9240  019E  0849               	movf	(printf@exp+1)^(0+128),w
  9241  019F  0020               	movlb	0	; select bank0
  9242  01A0  00AA               	movwf	___awdiv@dividend+1
  9243  01A1  0021               	movlb	1	; select bank1
  9244  01A2  0848               	movf	printf@exp^(0+128),w
  9245  01A3  0020               	movlb	0	; select bank0
  9246  01A4  00A9               	movwf	___awdiv@dividend
  9247  01A5  3193  2348  3180   	fcall	___awdiv
  9248  01A8  0020               	movlb	0	; select bank0
  9249  01A9  0828               	movf	?___awdiv+1,w
  9250  01AA  0021               	movlb	1	; select bank1
  9251  01AB  00C9               	movwf	(printf@exp+1)^(0+128)
  9252  01AC  0020               	movlb	0	; select bank0
  9253  01AD  0827               	movf	?___awdiv,w
  9254  01AE  0021               	movlb	1	; select bank1
  9255  01AF  00C8               	movwf	printf@exp^(0+128)
  9256                           
  9257                           ;doprnt.c: 841: if(exp < 0)
  9258  01B0  1FC9               	btfss	(printf@exp+1)^(0+128),7
  9259  01B1  29B6               	goto	l3134
  9260                           
  9261                           ;doprnt.c: 842: exp--;
  9262  01B2  30FF               	movlw	255
  9263  01B3  07C8               	addwf	printf@exp^(0+128),f
  9264  01B4  30FF               	movlw	255
  9265  01B5  3DC9               	addwfc	(printf@exp+1)^(0+128),f
  9266  01B6                     l3134:	
  9267                           
  9268                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  9269  01B6  0348               	decf	printf@exp^(0+128),w
  9270  01B7  3AFF               	xorlw	255
  9271  01B8  318A  2262  3180   	fcall	_scale
  9272  01BB  0020               	movlb	0	; select bank0
  9273  01BC  0846               	movf	?_scale,w
  9274  01BD  0021               	movlb	1	; select bank1
  9275  01BE  00C4               	movwf	printf@tmpval^(0+128)
  9276  01BF  0020               	movlb	0	; select bank0
  9277  01C0  0847               	movf	?_scale+1,w
  9278  01C1  0021               	movlb	1	; select bank1
  9279  01C2  00C5               	movwf	(printf@tmpval+1)^(0+128)
  9280  01C3  0020               	movlb	0	; select bank0
  9281  01C4  0848               	movf	?_scale+2,w
  9282  01C5  0021               	movlb	1	; select bank1
  9283  01C6  00C6               	movwf	(printf@tmpval+2)^(0+128)
  9284                           
  9285                           ;doprnt.c: 847: tmpval.integ *= fval;
  9286  01C7  084A               	movf	printf@fval^(0+128),w
  9287  01C8  0020               	movlb	0	; select bank0
  9288  01C9  00B6               	movwf	___ftmul@f1
  9289  01CA  0021               	movlb	1	; select bank1
  9290  01CB  084B               	movf	(printf@fval+1)^(0+128),w
  9291  01CC  0020               	movlb	0	; select bank0
  9292  01CD  00B7               	movwf	___ftmul@f1+1
  9293  01CE  0021               	movlb	1	; select bank1
  9294  01CF  084C               	movf	(printf@fval+2)^(0+128),w
  9295  01D0  0020               	movlb	0	; select bank0
  9296  01D1  00B8               	movwf	___ftmul@f1+2
  9297  01D2  0021               	movlb	1	; select bank1
  9298  01D3  0844               	movf	printf@tmpval^(0+128),w
  9299  01D4  0020               	movlb	0	; select bank0
  9300  01D5  00B9               	movwf	___ftmul@f2
  9301  01D6  0021               	movlb	1	; select bank1
  9302  01D7  0845               	movf	(printf@tmpval+1)^(0+128),w
  9303  01D8  0020               	movlb	0	; select bank0
  9304  01D9  00BA               	movwf	___ftmul@f2+1
  9305  01DA  0021               	movlb	1	; select bank1
  9306  01DB  0846               	movf	(printf@tmpval+2)^(0+128),w
  9307  01DC  0020               	movlb	0	; select bank0
  9308  01DD  00BB               	movwf	___ftmul@f2+2
  9309  01DE  3195  25A0  3180   	fcall	___ftmul
  9310  01E1  0020               	movlb	0	; select bank0
  9311  01E2  0836               	movf	?___ftmul,w
  9312  01E3  0021               	movlb	1	; select bank1
  9313  01E4  00C4               	movwf	printf@tmpval^(0+128)
  9314  01E5  0020               	movlb	0	; select bank0
  9315  01E6  0837               	movf	?___ftmul+1,w
  9316  01E7  0021               	movlb	1	; select bank1
  9317  01E8  00C5               	movwf	(printf@tmpval+1)^(0+128)
  9318  01E9  0020               	movlb	0	; select bank0
  9319  01EA  0838               	movf	?___ftmul+2,w
  9320  01EB  0021               	movlb	1	; select bank1
  9321  01EC  00C6               	movwf	(printf@tmpval+2)^(0+128)
  9322                           
  9323                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  9324  01ED  0844               	movf	printf@tmpval^(0+128),w
  9325  01EE  0020               	movlb	0	; select bank0
  9326  01EF  00A0               	movwf	___ftge@ff1
  9327  01F0  0021               	movlb	1	; select bank1
  9328  01F1  0845               	movf	(printf@tmpval+1)^(0+128),w
  9329  01F2  0020               	movlb	0	; select bank0
  9330  01F3  00A1               	movwf	___ftge@ff1+1
  9331  01F4  0021               	movlb	1	; select bank1
  9332  01F5  0846               	movf	(printf@tmpval+2)^(0+128),w
  9333  01F6  0020               	movlb	0	; select bank0
  9334  01F7  00A2               	movwf	___ftge@ff1+2
  9335  01F8  3000               	movlw	0
  9336  01F9  00A3               	movwf	___ftge@ff2
  9337  01FA  3080               	movlw	128
  9338  01FB  00A4               	movwf	___ftge@ff2+1
  9339  01FC  303F               	movlw	63
  9340  01FD  00A5               	movwf	___ftge@ff2+2
  9341  01FE  3191  21A3  3180   	fcall	___ftge
  9342  0201  1803               	btfsc	3,0
  9343  0202  2A08               	goto	l3142
  9344                           
  9345                           ;doprnt.c: 849: exp--;
  9346  0203  30FF               	movlw	255
  9347  0204  0021               	movlb	1	; select bank1
  9348  0205  07C8               	addwf	printf@exp^(0+128),f
  9349  0206  30FF               	movlw	255
  9350  0207  2A23               	goto	L1
  9351  0208                     l3142:	
  9352                           
  9353                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  9354  0208  0021               	movlb	1	; select bank1
  9355  0209  0844               	movf	printf@tmpval^(0+128),w
  9356  020A  0020               	movlb	0	; select bank0
  9357  020B  00A0               	movwf	___ftge@ff1
  9358  020C  0021               	movlb	1	; select bank1
  9359  020D  0845               	movf	(printf@tmpval+1)^(0+128),w
  9360  020E  0020               	movlb	0	; select bank0
  9361  020F  00A1               	movwf	___ftge@ff1+1
  9362  0210  0021               	movlb	1	; select bank1
  9363  0211  0846               	movf	(printf@tmpval+2)^(0+128),w
  9364  0212  0020               	movlb	0	; select bank0
  9365  0213  00A2               	movwf	___ftge@ff1+2
  9366  0214  3000               	movlw	0
  9367  0215  00A3               	movwf	___ftge@ff2
  9368  0216  3020               	movlw	32
  9369  0217  00A4               	movwf	___ftge@ff2+1
  9370  0218  3041               	movlw	65
  9371  0219  00A5               	movwf	___ftge@ff2+2
  9372  021A  3191  21A3  3180   	fcall	___ftge
  9373  021D  1C03               	btfss	3,0
  9374  021E  2A24               	goto	l368
  9375                           
  9376                           ;doprnt.c: 851: exp++;
  9377  021F  3001               	movlw	1
  9378  0220  0021               	movlb	1	; select bank1
  9379  0221  07C8               	addwf	printf@exp^(0+128),f
  9380  0222  3000               	movlw	0
  9381  0223                     L1:	
  9382  0223  3DC9               	addwfc	(printf@exp+1)^(0+128),f
  9383  0224                     l368:	
  9384                           
  9385                           ;doprnt.c: 852: }
  9386                           ;doprnt.c: 1112: if(prec <= 12)
  9387  0224  0021               	movlb	1	; select bank1
  9388  0225  0852               	movf	(printf@prec+1)^(0+128),w
  9389  0226  3A80               	xorlw	128
  9390  0227  0020               	movlb	0	; select bank0
  9391  0228  00E7               	movwf	??_printf
  9392  0229  3080               	movlw	128
  9393  022A  0267               	subwf	??_printf,w
  9394  022B  1D03               	skipz
  9395  022C  2A30               	goto	u4295
  9396  022D  300D               	movlw	13
  9397  022E  0021               	movlb	1	; select bank1
  9398  022F  0251               	subwf	printf@prec^(0+128),w
  9399  0230                     u4295:	
  9400  0230  1803               	skipnc
  9401  0231  2A59               	goto	l3148
  9402                           
  9403                           ;doprnt.c: 1113: fval += fround(prec);
  9404  0232  0021               	movlb	1	; select bank1
  9405  0233  0851               	movf	printf@prec^(0+128),w
  9406  0234  3186  2643  3180   	fcall	_fround
  9407  0237  0020               	movlb	0	; select bank0
  9408  0238  0846               	movf	?_fround,w
  9409  0239  00D4               	movwf	___ftadd@f1
  9410  023A  0847               	movf	?_fround+1,w
  9411  023B  00D5               	movwf	___ftadd@f1+1
  9412  023C  0848               	movf	?_fround+2,w
  9413  023D  00D6               	movwf	___ftadd@f1+2
  9414  023E  0021               	movlb	1	; select bank1
  9415  023F  084A               	movf	printf@fval^(0+128),w
  9416  0240  0020               	movlb	0	; select bank0
  9417  0241  00D7               	movwf	___ftadd@f2
  9418  0242  0021               	movlb	1	; select bank1
  9419  0243  084B               	movf	(printf@fval+1)^(0+128),w
  9420  0244  0020               	movlb	0	; select bank0
  9421  0245  00D8               	movwf	___ftadd@f2+1
  9422  0246  0021               	movlb	1	; select bank1
  9423  0247  084C               	movf	(printf@fval+2)^(0+128),w
  9424  0248  0020               	movlb	0	; select bank0
  9425  0249  00D9               	movwf	___ftadd@f2+2
  9426  024A  3197  270A  3180   	fcall	___ftadd
  9427  024D  0020               	movlb	0	; select bank0
  9428  024E  0854               	movf	?___ftadd,w
  9429  024F  0021               	movlb	1	; select bank1
  9430  0250  00CA               	movwf	printf@fval^(0+128)
  9431  0251  0020               	movlb	0	; select bank0
  9432  0252  0855               	movf	?___ftadd+1,w
  9433  0253  0021               	movlb	1	; select bank1
  9434  0254  00CB               	movwf	(printf@fval+1)^(0+128)
  9435  0255  0020               	movlb	0	; select bank0
  9436  0256  0856               	movf	?___ftadd+2,w
  9437  0257  0021               	movlb	1	; select bank1
  9438  0258  00CC               	movwf	(printf@fval+2)^(0+128)
  9439  0259                     l3148:	
  9440                           
  9441                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  9442  0259  0021               	movlb	1	; select bank1
  9443  025A  0849               	movf	(printf@exp+1)^(0+128),w
  9444  025B  3A80               	xorlw	128
  9445  025C  0020               	movlb	0	; select bank0
  9446  025D  00E7               	movwf	??_printf
  9447  025E  3080               	movlw	128
  9448  025F  0267               	subwf	??_printf,w
  9449  0260  1D03               	skipz
  9450  0261  2A65               	goto	u4305
  9451  0262  300A               	movlw	10
  9452  0263  0021               	movlb	1	; select bank1
  9453  0264  0248               	subwf	printf@exp^(0+128),w
  9454  0265                     u4305:	
  9455  0265  1803               	skipnc
  9456  0266  2A90               	goto	l3156
  9457  0267  0021               	movlb	1	; select bank1
  9458  0268  084C               	movf	(printf@fval+2)^(0+128),w
  9459  0269  044B               	iorwf	(printf@fval+1)^(0+128),w
  9460  026A  044A               	iorwf	printf@fval^(0+128),w
  9461  026B  1903               	skipnz
  9462  026C  2AEF               	goto	l3170
  9463  026D  084A               	movf	printf@fval^(0+128),w
  9464  026E  0020               	movlb	0	; select bank0
  9465  026F  00CF               	movwf	___fttol@f1
  9466  0270  0021               	movlb	1	; select bank1
  9467  0271  084B               	movf	(printf@fval+1)^(0+128),w
  9468  0272  0020               	movlb	0	; select bank0
  9469  0273  00D0               	movwf	___fttol@f1+1
  9470  0274  0021               	movlb	1	; select bank1
  9471  0275  084C               	movf	(printf@fval+2)^(0+128),w
  9472  0276  0020               	movlb	0	; select bank0
  9473  0277  00D1               	movwf	___fttol@f1+2
  9474  0278  3193  23FF  3180   	fcall	___fttol
  9475  027B  0020               	movlb	0	; select bank0
  9476  027C  0852               	movf	?___fttol+3,w
  9477  027D  0451               	iorwf	?___fttol+2,w
  9478  027E  0450               	iorwf	?___fttol+1,w
  9479  027F  044F               	iorwf	?___fttol,w
  9480  0280  1D03               	skipz
  9481  0281  2AEF               	goto	l3170
  9482  0282  0021               	movlb	1	; select bank1
  9483  0283  0849               	movf	(printf@exp+1)^(0+128),w
  9484  0284  3A80               	xorlw	128
  9485  0285  0020               	movlb	0	; select bank0
  9486  0286  00E7               	movwf	??_printf
  9487  0287  3080               	movlw	128
  9488  0288  0267               	subwf	??_printf,w
  9489  0289  1D03               	skipz
  9490  028A  2A8E               	goto	u4335
  9491  028B  3002               	movlw	2
  9492  028C  0021               	movlb	1	; select bank1
  9493  028D  0248               	subwf	printf@exp^(0+128),w
  9494  028E                     u4335:	
  9495  028E  1C03               	skipc
  9496  028F  2AEF               	goto	l3170
  9497  0290                     l3156:	
  9498                           
  9499                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  9500  0290  0021               	movlb	1	; select bank1
  9501  0291  0844               	movf	printf@tmpval^(0+128),w
  9502  0292  0020               	movlb	0	; select bank0
  9503  0293  00A0               	movwf	___ftge@ff1
  9504  0294  0021               	movlb	1	; select bank1
  9505  0295  0845               	movf	(printf@tmpval+1)^(0+128),w
  9506  0296  0020               	movlb	0	; select bank0
  9507  0297  00A1               	movwf	___ftge@ff1+1
  9508  0298  0021               	movlb	1	; select bank1
  9509  0299  0846               	movf	(printf@tmpval+2)^(0+128),w
  9510  029A  0020               	movlb	0	; select bank0
  9511  029B  00A2               	movwf	___ftge@ff1+2
  9512  029C  3070               	movlw	112
  9513  029D  00A3               	movwf	___ftge@ff2
  9514  029E  3089               	movlw	137
  9515  029F  00A4               	movwf	___ftge@ff2+1
  9516  02A0  3040               	movlw	64
  9517  02A1  00A5               	movwf	___ftge@ff2+2
  9518  02A2  3191  21A3  3180   	fcall	___ftge
  9519  02A5  1803               	btfsc	3,0
  9520  02A6  2AA9               	goto	l3160
  9521                           
  9522                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  9523  02A7  30F7               	movlw	247
  9524  02A8  2AAA               	goto	L2
  9525  02A9                     l3160:	
  9526                           ;doprnt.c: 1122: }else{
  9527                           
  9528                           
  9529                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  9530  02A9  30F8               	movlw	248
  9531  02AA                     L2:	
  9532  02AA  0021               	movlb	1	; select bank1
  9533  02AB  07C8               	addwf	printf@exp^(0+128),f
  9534  02AC  30FF               	movlw	255
  9535  02AD  3DC9               	addwfc	(printf@exp+1)^(0+128),f
  9536                           
  9537                           ;doprnt.c: 1124: }
  9538                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  9539  02AE  0848               	movf	printf@exp^(0+128),w
  9540  02AF  318A  2262  3180   	fcall	_scale
  9541  02B2  0020               	movlb	0	; select bank0
  9542  02B3  0846               	movf	?_scale,w
  9543  02B4  0021               	movlb	1	; select bank1
  9544  02B5  00C4               	movwf	printf@tmpval^(0+128)
  9545  02B6  0020               	movlb	0	; select bank0
  9546  02B7  0847               	movf	?_scale+1,w
  9547  02B8  0021               	movlb	1	; select bank1
  9548  02B9  00C5               	movwf	(printf@tmpval+1)^(0+128)
  9549  02BA  0020               	movlb	0	; select bank0
  9550  02BB  0848               	movf	?_scale+2,w
  9551  02BC  0021               	movlb	1	; select bank1
  9552  02BD  00C6               	movwf	(printf@tmpval+2)^(0+128)
  9553                           
  9554                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  9555  02BE  084A               	movf	printf@fval^(0+128),w
  9556  02BF  0020               	movlb	0	; select bank0
  9557  02C0  00A0               	movwf	__tdiv_to_l_@f1
  9558  02C1  0021               	movlb	1	; select bank1
  9559  02C2  084B               	movf	(printf@fval+1)^(0+128),w
  9560  02C3  0020               	movlb	0	; select bank0
  9561  02C4  00A1               	movwf	__tdiv_to_l_@f1+1
  9562  02C5  0021               	movlb	1	; select bank1
  9563  02C6  084C               	movf	(printf@fval+2)^(0+128),w
  9564  02C7  0020               	movlb	0	; select bank0
  9565  02C8  00A2               	movwf	__tdiv_to_l_@f1+2
  9566  02C9  0021               	movlb	1	; select bank1
  9567  02CA  0844               	movf	printf@tmpval^(0+128),w
  9568  02CB  0020               	movlb	0	; select bank0
  9569  02CC  00A3               	movwf	__tdiv_to_l_@f2
  9570  02CD  0021               	movlb	1	; select bank1
  9571  02CE  0845               	movf	(printf@tmpval+1)^(0+128),w
  9572  02CF  0020               	movlb	0	; select bank0
  9573  02D0  00A4               	movwf	__tdiv_to_l_@f2+1
  9574  02D1  0021               	movlb	1	; select bank1
  9575  02D2  0846               	movf	(printf@tmpval+2)^(0+128),w
  9576  02D3  0020               	movlb	0	; select bank0
  9577  02D4  00A5               	movwf	__tdiv_to_l_@f2+2
  9578  02D5  3196  2654  3180   	fcall	__tdiv_to_l_
  9579  02D8  0020               	movlb	0	; select bank0
  9580  02D9  0823               	movf	?__tdiv_to_l_+3,w
  9581  02DA  0021               	movlb	1	; select bank1
  9582  02DB  00D0               	movwf	(printf@val+3)^(0+128)
  9583  02DC  0020               	movlb	0	; select bank0
  9584  02DD  0822               	movf	?__tdiv_to_l_+2,w
  9585  02DE  0021               	movlb	1	; select bank1
  9586  02DF  00CF               	movwf	(printf@val+2)^(0+128)
  9587  02E0  0020               	movlb	0	; select bank0
  9588  02E1  0821               	movf	?__tdiv_to_l_+1,w
  9589  02E2  0021               	movlb	1	; select bank1
  9590  02E3  00CE               	movwf	(printf@val+1)^(0+128)
  9591  02E4  0020               	movlb	0	; select bank0
  9592  02E5  0820               	movf	?__tdiv_to_l_,w
  9593  02E6  0021               	movlb	1	; select bank1
  9594  02E7  00CD               	movwf	printf@val^(0+128)
  9595                           
  9596                           ;doprnt.c: 1129: fval = 0.0;
  9597  02E8  3000               	movlw	0
  9598  02E9  00CA               	movwf	printf@fval^(0+128)
  9599  02EA  3000               	movlw	0
  9600  02EB  00CB               	movwf	(printf@fval+1)^(0+128)
  9601  02EC  3000               	movlw	0
  9602  02ED  00CC               	movwf	(printf@fval+2)^(0+128)
  9603                           
  9604                           ;doprnt.c: 1130: } else {
  9605  02EE  2B44               	goto	l3174
  9606  02EF                     l3170:	
  9607                           
  9608                           ;doprnt.c: 1131: val = (unsigned long)fval;
  9609  02EF  0021               	movlb	1	; select bank1
  9610  02F0  084A               	movf	printf@fval^(0+128),w
  9611  02F1  0020               	movlb	0	; select bank0
  9612  02F2  00CF               	movwf	___fttol@f1
  9613  02F3  0021               	movlb	1	; select bank1
  9614  02F4  084B               	movf	(printf@fval+1)^(0+128),w
  9615  02F5  0020               	movlb	0	; select bank0
  9616  02F6  00D0               	movwf	___fttol@f1+1
  9617  02F7  0021               	movlb	1	; select bank1
  9618  02F8  084C               	movf	(printf@fval+2)^(0+128),w
  9619  02F9  0020               	movlb	0	; select bank0
  9620  02FA  00D1               	movwf	___fttol@f1+2
  9621  02FB  3193  23FF  3180   	fcall	___fttol
  9622  02FE  0020               	movlb	0	; select bank0
  9623  02FF  0852               	movf	?___fttol+3,w
  9624  0300  0021               	movlb	1	; select bank1
  9625  0301  00D0               	movwf	(printf@val+3)^(0+128)
  9626  0302  0020               	movlb	0	; select bank0
  9627  0303  0851               	movf	?___fttol+2,w
  9628  0304  0021               	movlb	1	; select bank1
  9629  0305  00CF               	movwf	(printf@val+2)^(0+128)
  9630  0306  0020               	movlb	0	; select bank0
  9631  0307  0850               	movf	?___fttol+1,w
  9632  0308  0021               	movlb	1	; select bank1
  9633  0309  00CE               	movwf	(printf@val+1)^(0+128)
  9634  030A  0020               	movlb	0	; select bank0
  9635  030B  084F               	movf	?___fttol,w
  9636  030C  0021               	movlb	1	; select bank1
  9637  030D  00CD               	movwf	printf@val^(0+128)
  9638                           
  9639                           ;doprnt.c: 1132: fval -= (double)val;
  9640  030E  0850               	movf	(printf@val+3)^(0+128),w
  9641  030F  0020               	movlb	0	; select bank0
  9642  0310  00AB               	movwf	___lltoft@c+3
  9643  0311  0021               	movlb	1	; select bank1
  9644  0312  084F               	movf	(printf@val+2)^(0+128),w
  9645  0313  0020               	movlb	0	; select bank0
  9646  0314  00AA               	movwf	___lltoft@c+2
  9647  0315  0021               	movlb	1	; select bank1
  9648  0316  084E               	movf	(printf@val+1)^(0+128),w
  9649  0317  0020               	movlb	0	; select bank0
  9650  0318  00A9               	movwf	___lltoft@c+1
  9651  0319  0021               	movlb	1	; select bank1
  9652  031A  084D               	movf	printf@val^(0+128),w
  9653  031B  0020               	movlb	0	; select bank0
  9654  031C  00A8               	movwf	___lltoft@c
  9655  031D  3188  2005  3180   	fcall	___lltoft
  9656  0320  0020               	movlb	0	; select bank0
  9657  0321  0828               	movf	?___lltoft,w
  9658  0322  00E1               	movwf	___ftsub@f2
  9659  0323  0829               	movf	?___lltoft+1,w
  9660  0324  00E2               	movwf	___ftsub@f2+1
  9661  0325  082A               	movf	?___lltoft+2,w
  9662  0326  00E3               	movwf	___ftsub@f2+2
  9663  0327  0021               	movlb	1	; select bank1
  9664  0328  084A               	movf	printf@fval^(0+128),w
  9665  0329  0020               	movlb	0	; select bank0
  9666  032A  00E4               	movwf	___ftsub@f1
  9667  032B  0021               	movlb	1	; select bank1
  9668  032C  084B               	movf	(printf@fval+1)^(0+128),w
  9669  032D  0020               	movlb	0	; select bank0
  9670  032E  00E5               	movwf	___ftsub@f1+1
  9671  032F  0021               	movlb	1	; select bank1
  9672  0330  084C               	movf	(printf@fval+2)^(0+128),w
  9673  0331  0020               	movlb	0	; select bank0
  9674  0332  00E6               	movwf	___ftsub@f1+2
  9675  0333  319F  277D  3180   	fcall	___ftsub
  9676  0336  0020               	movlb	0	; select bank0
  9677  0337  0861               	movf	?___ftsub,w
  9678  0338  0021               	movlb	1	; select bank1
  9679  0339  00CA               	movwf	printf@fval^(0+128)
  9680  033A  0020               	movlb	0	; select bank0
  9681  033B  0862               	movf	?___ftsub+1,w
  9682  033C  0021               	movlb	1	; select bank1
  9683  033D  00CB               	movwf	(printf@fval+1)^(0+128)
  9684  033E  0020               	movlb	0	; select bank0
  9685  033F  0863               	movf	?___ftsub+2,w
  9686  0340  0021               	movlb	1	; select bank1
  9687  0341  00CC               	movwf	(printf@fval+2)^(0+128)
  9688                           
  9689                           ;doprnt.c: 1133: exp = 0;
  9690  0342  01C8               	clrf	printf@exp^(0+128)
  9691  0343  01C9               	clrf	(printf@exp+1)^(0+128)
  9692  0344                     l3174:	
  9693                           
  9694                           ;doprnt.c: 1134: }
  9695                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  9696  0344  01D5               	clrf	printf@c^(0+128)
  9697  0345  0AD5               	incf	printf@c^(0+128),f
  9698  0346  300A               	movlw	10
  9699  0347  0655               	xorwf	printf@c^(0+128),w
  9700  0348  1903               	btfsc	3,2
  9701  0349  2B81               	goto	l3186
  9702  034A                     l3180:	
  9703                           
  9704                           ;doprnt.c: 1137: if(val < dpowers[c])
  9705  034A  0855               	movf	printf@c^(0+128),w
  9706  034B  0020               	movlb	0	; select bank0
  9707  034C  00E7               	movwf	??_printf
  9708  034D  01E8               	clrf	??_printf+1
  9709  034E  35E7               	lslf	??_printf,f
  9710  034F  0DE8               	rlf	??_printf+1,f
  9711  0350  35E7               	lslf	??_printf,f
  9712  0351  0DE8               	rlf	??_printf+1,f
  9713  0352  3030               	movlw	low (_dpowers| (0+32768))
  9714  0353  0767               	addwf	??_printf,w
  9715  0354  0084               	movwf	4
  9716  0355  3090               	movlw	high (_dpowers| (0+32768))
  9717  0356  3D68               	addwfc	??_printf+1,w
  9718  0357  0085               	movwf	5
  9719  0358  3F00               	moviw [0]fsr0
  9720  0359  00E9               	movwf	??_printf+2
  9721  035A  3F01               	moviw [1]fsr0
  9722  035B  00EA               	movwf	??_printf+3
  9723  035C  3F02               	moviw [2]fsr0
  9724  035D  00EB               	movwf	??_printf+4
  9725  035E  3F03               	moviw [3]fsr0
  9726  035F  00EC               	movwf	??_printf+5
  9727  0360  086C               	movf	??_printf+5,w
  9728  0361  0021               	movlb	1	; select bank1
  9729  0362  0250               	subwf	(printf@val+3)^(0+128),w
  9730  0363  1D03               	skipz
  9731  0364  2B75               	goto	u4365
  9732  0365  0020               	movlb	0	; select bank0
  9733  0366  086B               	movf	??_printf+4,w
  9734  0367  0021               	movlb	1	; select bank1
  9735  0368  024F               	subwf	(printf@val+2)^(0+128),w
  9736  0369  1D03               	skipz
  9737  036A  2B75               	goto	u4365
  9738  036B  0020               	movlb	0	; select bank0
  9739  036C  086A               	movf	??_printf+3,w
  9740  036D  0021               	movlb	1	; select bank1
  9741  036E  024E               	subwf	(printf@val+1)^(0+128),w
  9742  036F  1D03               	skipz
  9743  0370  2B75               	goto	u4365
  9744  0371  0020               	movlb	0	; select bank0
  9745  0372  0869               	movf	??_printf+2,w
  9746  0373  0021               	movlb	1	; select bank1
  9747  0374  024D               	subwf	printf@val^(0+128),w
  9748  0375                     u4365:	
  9749  0375  1C03               	btfss	3,0
  9750  0376  2B81               	goto	l3186
  9751                           
  9752                           ;doprnt.c: 1138: break;
  9753  0377  3001               	movlw	1
  9754  0378  0020               	movlb	0	; select bank0
  9755  0379  00E7               	movwf	??_printf
  9756  037A  0867               	movf	??_printf,w
  9757  037B  0021               	movlb	1	; select bank1
  9758  037C  07D5               	addwf	printf@c^(0+128),f
  9759  037D  300A               	movlw	10
  9760  037E  0655               	xorwf	printf@c^(0+128),w
  9761  037F  1D03               	btfss	3,2
  9762  0380  2B4A               	goto	l3180
  9763  0381                     l3186:	
  9764                           
  9765                           ;doprnt.c: 1142: width -= prec + c + exp;
  9766  0381  0855               	movf	printf@c^(0+128),w
  9767  0382  0020               	movlb	0	; select bank0
  9768  0383  00E7               	movwf	??_printf
  9769  0384  01E8               	clrf	??_printf+1
  9770  0385  1BE7               	btfsc	??_printf,7
  9771  0386  03E8               	decf	??_printf+1,f
  9772  0387  0021               	movlb	1	; select bank1
  9773  0388  0851               	movf	printf@prec^(0+128),w
  9774  0389  0020               	movlb	0	; select bank0
  9775  038A  0767               	addwf	??_printf,w
  9776  038B  00E9               	movwf	??_printf+2
  9777  038C  0021               	movlb	1	; select bank1
  9778  038D  0852               	movf	(printf@prec+1)^(0+128),w
  9779  038E  0020               	movlb	0	; select bank0
  9780  038F  3D68               	addwfc	??_printf+1,w
  9781  0390  00EA               	movwf	??_printf+3
  9782  0391  0021               	movlb	1	; select bank1
  9783  0392  0848               	movf	printf@exp^(0+128),w
  9784  0393  0020               	movlb	0	; select bank0
  9785  0394  0769               	addwf	??_printf+2,w
  9786  0395  00EB               	movwf	??_printf+4
  9787  0396  0021               	movlb	1	; select bank1
  9788  0397  0849               	movf	(printf@exp+1)^(0+128),w
  9789  0398  0020               	movlb	0	; select bank0
  9790  0399  3D6A               	addwfc	??_printf+3,w
  9791  039A  00EC               	movwf	??_printf+5
  9792  039B  086B               	movf	??_printf+4,w
  9793  039C  0021               	movlb	1	; select bank1
  9794  039D  02D3               	subwf	printf@width^(0+128),f
  9795  039E  0020               	movlb	0	; select bank0
  9796  039F  086C               	movf	??_printf+5,w
  9797  03A0  0021               	movlb	1	; select bank1
  9798  03A1  3BD4               	subwfb	(printf@width+1)^(0+128),f
  9799                           
  9800                           ;doprnt.c: 1143: if(
  9801                           ;doprnt.c: 1145: flag & 0x800 ||
  9802                           ;doprnt.c: 1147: prec)
  9803  03A2  19D7               	btfsc	(printf@flag+1)^(0+128),3
  9804  03A3  2BA8               	goto	l3192
  9805  03A4  0851               	movf	printf@prec^(0+128),w
  9806  03A5  0452               	iorwf	(printf@prec+1)^(0+128),w
  9807  03A6  1903               	btfsc	3,2
  9808  03A7  2BAC               	goto	l3194
  9809  03A8                     l3192:	
  9810                           
  9811                           ;doprnt.c: 1148: width--;
  9812  03A8  30FF               	movlw	255
  9813  03A9  07D3               	addwf	printf@width^(0+128),f
  9814  03AA  30FF               	movlw	255
  9815  03AB  3DD4               	addwfc	(printf@width+1)^(0+128),f
  9816  03AC                     l3194:	
  9817                           
  9818                           ;doprnt.c: 1149: if(flag & 0x03)
  9819  03AC  3003               	movlw	3
  9820  03AD  0556               	andwf	printf@flag^(0+128),w
  9821  03AE  0020               	movlb	0	; select bank0
  9822  03AF  00E7               	movwf	??_printf
  9823  03B0  3000               	movlw	0
  9824  03B1  0021               	movlb	1	; select bank1
  9825  03B2  0557               	andwf	(printf@flag+1)^(0+128),w
  9826  03B3  0020               	movlb	0	; select bank0
  9827  03B4  00E8               	movwf	??_printf+1
  9828  03B5  0867               	movf	??_printf,w
  9829  03B6  0468               	iorwf	??_printf+1,w
  9830  03B7  1903               	btfsc	3,2
  9831  03B8  2BBE               	goto	l3198
  9832                           
  9833                           ;doprnt.c: 1150: width--;
  9834  03B9  30FF               	movlw	255
  9835  03BA  0021               	movlb	1	; select bank1
  9836  03BB  07D3               	addwf	printf@width^(0+128),f
  9837  03BC  30FF               	movlw	255
  9838  03BD  3DD4               	addwfc	(printf@width+1)^(0+128),f
  9839  03BE                     l3198:	
  9840                           
  9841                           ;doprnt.c: 1153: if(flag & 0x04) {
  9842  03BE  0021               	movlb	1	; select bank1
  9843  03BF  1D56               	btfss	printf@flag^(0+128),2
  9844  03C0  2BFA               	goto	l391
  9845                           
  9846                           ;doprnt.c: 1157: if(flag & 0x03)
  9847  03C1  3003               	movlw	3
  9848  03C2  0556               	andwf	printf@flag^(0+128),w
  9849  03C3  0020               	movlb	0	; select bank0
  9850  03C4  00E7               	movwf	??_printf
  9851  03C5  3000               	movlw	0
  9852  03C6  0021               	movlb	1	; select bank1
  9853  03C7  0557               	andwf	(printf@flag+1)^(0+128),w
  9854  03C8  0020               	movlb	0	; select bank0
  9855  03C9  00E8               	movwf	??_printf+1
  9856  03CA  0867               	movf	??_printf,w
  9857  03CB  0468               	iorwf	??_printf+1,w
  9858  03CC  1903               	btfsc	3,2
  9859  03CD  2BDB               	goto	l3210
  9860                           
  9861                           ;doprnt.c: 1159: (putch(flag & 0x01 ? '-' : '+') );
  9862  03CE  0021               	movlb	1	; select bank1
  9863  03CF  1856               	btfsc	printf@flag^(0+128),0
  9864  03D0  2BD3               	goto	l3206
  9865  03D1  302B               	movlw	43
  9866  03D2  2BD4               	goto	L3
  9867  03D3                     l3206:	
  9868  03D3  302D               	movlw	45
  9869  03D4                     L3:	
  9870  03D4  00B5               	movwf	_printf$792^(0+128)
  9871  03D5  3000               	movlw	0
  9872  03D6  00B6               	movwf	(_printf$792^(0+128)+1)
  9873  03D7  0835               	movf	_printf$792^(0+128),w
  9874  03D8  319E  2618  3180   	fcall	_putch
  9875  03DB                     l3210:	
  9876                           
  9877                           ;doprnt.c: 1164: if(flag & 0x01)
  9878  03DB  0021               	movlb	1	; select bank1
  9879  03DC  1C56               	btfss	printf@flag^(0+128),0
  9880  03DD  2BE2               	goto	l3218
  9881                           
  9882                           ;doprnt.c: 1165: (putch(' ') );
  9883  03DE  3020               	movlw	32
  9884  03DF  319E  2618  3180   	fcall	_putch
  9885  03E2                     l3218:	
  9886                           ;doprnt.c: 1168: while(width > 0) {
  9887                           
  9888  03E2  0021               	movlb	1	; select bank1
  9889  03E3  0854               	movf	(printf@width+1)^(0+128),w
  9890  03E4  3A80               	xorlw	128
  9891  03E5  0020               	movlb	0	; select bank0
  9892  03E6  00E7               	movwf	??_printf
  9893  03E7  3080               	movlw	128
  9894  03E8  0267               	subwf	??_printf,w
  9895  03E9  1D03               	skipz
  9896  03EA  2BEE               	goto	u4455
  9897  03EB  3001               	movlw	1
  9898  03EC  0021               	movlb	1	; select bank1
  9899  03ED  0253               	subwf	printf@width^(0+128),w
  9900  03EE                     u4455:	
  9901  03EE  1C03               	btfss	3,0
  9902  03EF  2C33               	goto	l3246
  9903                           
  9904                           ;doprnt.c: 1169: (putch('0') );
  9905  03F0  3030               	movlw	48
  9906  03F1  319E  2618  3180   	fcall	_putch
  9907                           
  9908                           ;doprnt.c: 1170: width--;
  9909  03F4  30FF               	movlw	255
  9910  03F5  0021               	movlb	1	; select bank1
  9911  03F6  07D3               	addwf	printf@width^(0+128),f
  9912  03F7  30FF               	movlw	255
  9913  03F8  3DD4               	addwfc	(printf@width+1)^(0+128),f
  9914  03F9  2BE2               	goto	l3218
  9915  03FA                     l391:	
  9916                           ;doprnt.c: 1171: }
  9917                           ;doprnt.c: 1173: } else
  9918                           
  9919                           
  9920                           ;doprnt.c: 1175: {
  9921                           ;doprnt.c: 1177: if(!(flag & 0x08))
  9922  03FA  1DD6               	btfss	printf@flag^(0+128),3
  9923  03FB  2C06               	goto	l3226
  9924  03FC  2C13               	goto	l3228
  9925  03FD                     l3222:	
  9926                           ;doprnt.c: 1180: while(width > 0) {
  9927                           
  9928                           
  9929                           ;doprnt.c: 1181: (putch(' ') );
  9930  03FD  3020               	movlw	32
  9931  03FE  319E  2618  3180   	fcall	_putch
  9932                           
  9933                           ;doprnt.c: 1182: width--;
  9934  0401  30FF               	movlw	255
  9935  0402  0021               	movlb	1	; select bank1
  9936  0403  07D3               	addwf	printf@width^(0+128),f
  9937  0404  30FF               	movlw	255
  9938  0405  3DD4               	addwfc	(printf@width+1)^(0+128),f
  9939  0406                     l3226:	
  9940  0406  0854               	movf	(printf@width+1)^(0+128),w
  9941  0407  3A80               	xorlw	128
  9942  0408  0020               	movlb	0	; select bank0
  9943  0409  00E7               	movwf	??_printf
  9944  040A  3080               	movlw	128
  9945  040B  0267               	subwf	??_printf,w
  9946  040C  1D03               	skipz
  9947  040D  2C11               	goto	u4475
  9948  040E  3001               	movlw	1
  9949  040F  0021               	movlb	1	; select bank1
  9950  0410  0253               	subwf	printf@width^(0+128),w
  9951  0411                     u4475:	
  9952  0411  1803               	skipnc
  9953  0412  2BFD               	goto	l3222
  9954  0413                     l3228:	
  9955                           
  9956                           ;doprnt.c: 1183: }
  9957                           ;doprnt.c: 1188: if(flag & 0x03)
  9958  0413  3003               	movlw	3
  9959  0414  0021               	movlb	1	; select bank1
  9960  0415  0556               	andwf	printf@flag^(0+128),w
  9961  0416  0020               	movlb	0	; select bank0
  9962  0417  00E7               	movwf	??_printf
  9963  0418  3000               	movlw	0
  9964  0419  0021               	movlb	1	; select bank1
  9965  041A  0557               	andwf	(printf@flag+1)^(0+128),w
  9966  041B  0020               	movlb	0	; select bank0
  9967  041C  00E8               	movwf	??_printf+1
  9968  041D  0867               	movf	??_printf,w
  9969  041E  0468               	iorwf	??_printf+1,w
  9970  041F  1903               	btfsc	3,2
  9971  0420  2C2C               	goto	l406
  9972                           
  9973                           ;doprnt.c: 1190: (putch(flag & 0x01 ? '-' : '+') );
  9974  0421  0021               	movlb	1	; select bank1
  9975  0422  1856               	btfsc	printf@flag^(0+128),0
  9976  0423  2C26               	goto	l3234
  9977  0424  302B               	movlw	43
  9978  0425  2C27               	goto	L4
  9979  0426                     l3234:	
  9980  0426  302D               	movlw	45
  9981  0427                     L4:	
  9982  0427  00B7               	movwf	_printf$793^(0+128)
  9983  0428  3000               	movlw	0
  9984  0429  00B8               	movwf	(_printf$793^(0+128)+1)
  9985  042A  0837               	movf	_printf$793^(0+128),w
  9986  042B  2C30               	goto	L21
  9987  042C                     l406:	
  9988                           
  9989                           ;doprnt.c: 1192: else if(flag & 0x01)
  9990  042C  0021               	movlb	1	; select bank1
  9991  042D  1C56               	btfss	printf@flag^(0+128),0
  9992  042E  2C33               	goto	l3246
  9993                           
  9994                           ;doprnt.c: 1193: (putch(' ') );
  9995  042F  3020               	movlw	32
  9996  0430                     L21:	
  9997  0430  319E  2618  3180   	fcall	_putch
  9998  0433                     l3246:	
  9999                           ;doprnt.c: 1195: }
 10000                           ;doprnt.c: 1196: while(c--) {
 10001                           
 10002  0433  30FF               	movlw	255
 10003  0434  0020               	movlb	0	; select bank0
 10004  0435  00E7               	movwf	??_printf
 10005  0436  0867               	movf	??_printf,w
 10006  0437  0021               	movlb	1	; select bank1
 10007  0438  07D5               	addwf	printf@c^(0+128),f
 10008  0439  0A55               	incf	printf@c^(0+128),w
 10009  043A  1903               	btfsc	3,2
 10010  043B  2CAE               	goto	l3252
 10011                           
 10012                           ;doprnt.c: 1200: {
 10013                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 10014  043C  0021               	movlb	1	; select bank1
 10015  043D  0855               	movf	printf@c^(0+128),w
 10016  043E  0020               	movlb	0	; select bank0
 10017  043F  00E7               	movwf	??_printf
 10018  0440  01E8               	clrf	??_printf+1
 10019  0441  35E7               	lslf	??_printf,f
 10020  0442  0DE8               	rlf	??_printf+1,f
 10021  0443  35E7               	lslf	??_printf,f
 10022  0444  0DE8               	rlf	??_printf+1,f
 10023  0445  3030               	movlw	low (_dpowers| (0+32768))
 10024  0446  0767               	addwf	??_printf,w
 10025  0447  0084               	movwf	4
 10026  0448  3090               	movlw	high (_dpowers| (0+32768))
 10027  0449  3D68               	addwfc	??_printf+1,w
 10028  044A  0085               	movwf	5
 10029  044B  3F00               	moviw [0]fsr0
 10030  044C  00A0               	movwf	___lldiv@divisor
 10031  044D  3F01               	moviw [1]fsr0
 10032  044E  00A1               	movwf	___lldiv@divisor+1
 10033  044F  3F02               	moviw [2]fsr0
 10034  0450  00A2               	movwf	___lldiv@divisor+2
 10035  0451  3F03               	moviw [3]fsr0
 10036  0452  00A3               	movwf	___lldiv@divisor+3
 10037  0453  0021               	movlb	1	; select bank1
 10038  0454  0850               	movf	(printf@val+3)^(0+128),w
 10039  0455  0020               	movlb	0	; select bank0
 10040  0456  00A7               	movwf	___lldiv@dividend+3
 10041  0457  0021               	movlb	1	; select bank1
 10042  0458  084F               	movf	(printf@val+2)^(0+128),w
 10043  0459  0020               	movlb	0	; select bank0
 10044  045A  00A6               	movwf	___lldiv@dividend+2
 10045  045B  0021               	movlb	1	; select bank1
 10046  045C  084E               	movf	(printf@val+1)^(0+128),w
 10047  045D  0020               	movlb	0	; select bank0
 10048  045E  00A5               	movwf	___lldiv@dividend+1
 10049  045F  0021               	movlb	1	; select bank1
 10050  0460  084D               	movf	printf@val^(0+128),w
 10051  0461  0020               	movlb	0	; select bank0
 10052  0462  00A4               	movwf	___lldiv@dividend
 10053  0463  3187  27A9  3180   	fcall	___lldiv
 10054  0466  0020               	movlb	0	; select bank0
 10055  0467  0823               	movf	?___lldiv+3,w
 10056  0468  0021               	movlb	1	; select bank1
 10057  0469  00C7               	movwf	(printf@tmpval+3)^(0+128)
 10058  046A  0020               	movlb	0	; select bank0
 10059  046B  0822               	movf	?___lldiv+2,w
 10060  046C  0021               	movlb	1	; select bank1
 10061  046D  00C6               	movwf	(printf@tmpval+2)^(0+128)
 10062  046E  0020               	movlb	0	; select bank0
 10063  046F  0821               	movf	?___lldiv+1,w
 10064  0470  0021               	movlb	1	; select bank1
 10065  0471  00C5               	movwf	(printf@tmpval+1)^(0+128)
 10066  0472  0020               	movlb	0	; select bank0
 10067  0473  0820               	movf	?___lldiv,w
 10068  0474  0021               	movlb	1	; select bank1
 10069  0475  00C4               	movwf	printf@tmpval^(0+128)
 10070                           
 10071                           ;doprnt.c: 1202: tmpval.vd %= 10;
 10072  0476  3000               	movlw	0
 10073  0477  0020               	movlb	0	; select bank0
 10074  0478  00B1               	movwf	___llmod@divisor+3
 10075  0479  3000               	movlw	0
 10076  047A  00B0               	movwf	___llmod@divisor+2
 10077  047B  3000               	movlw	0
 10078  047C  00AF               	movwf	___llmod@divisor+1
 10079  047D  300A               	movlw	10
 10080  047E  00AE               	movwf	___llmod@divisor
 10081  047F  0021               	movlb	1	; select bank1
 10082  0480  0847               	movf	(printf@tmpval+3)^(0+128),w
 10083  0481  0020               	movlb	0	; select bank0
 10084  0482  00B5               	movwf	___llmod@dividend+3
 10085  0483  0021               	movlb	1	; select bank1
 10086  0484  0846               	movf	(printf@tmpval+2)^(0+128),w
 10087  0485  0020               	movlb	0	; select bank0
 10088  0486  00B4               	movwf	___llmod@dividend+2
 10089  0487  0021               	movlb	1	; select bank1
 10090  0488  0845               	movf	(printf@tmpval+1)^(0+128),w
 10091  0489  0020               	movlb	0	; select bank0
 10092  048A  00B3               	movwf	___llmod@dividend+1
 10093  048B  0021               	movlb	1	; select bank1
 10094  048C  0844               	movf	printf@tmpval^(0+128),w
 10095  048D  0020               	movlb	0	; select bank0
 10096  048E  00B2               	movwf	___llmod@dividend
 10097  048F  3192  2221  3180   	fcall	___llmod
 10098  0492  0020               	movlb	0	; select bank0
 10099  0493  0831               	movf	?___llmod+3,w
 10100  0494  0021               	movlb	1	; select bank1
 10101  0495  00C7               	movwf	(printf@tmpval+3)^(0+128)
 10102  0496  0020               	movlb	0	; select bank0
 10103  0497  0830               	movf	?___llmod+2,w
 10104  0498  0021               	movlb	1	; select bank1
 10105  0499  00C6               	movwf	(printf@tmpval+2)^(0+128)
 10106  049A  0020               	movlb	0	; select bank0
 10107  049B  082F               	movf	?___llmod+1,w
 10108  049C  0021               	movlb	1	; select bank1
 10109  049D  00C5               	movwf	(printf@tmpval+1)^(0+128)
 10110  049E  0020               	movlb	0	; select bank0
 10111  049F  082E               	movf	?___llmod,w
 10112  04A0  0021               	movlb	1	; select bank1
 10113  04A1  00C4               	movwf	printf@tmpval^(0+128)
 10114                           
 10115                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
 10116  04A2  0844               	movf	printf@tmpval^(0+128),w
 10117  04A3  3E30               	addlw	48
 10118  04A4  2C30               	goto	L21
 10119  04A5                     l3248:	
 10120                           ;doprnt.c: 1204: }
 10121                           ;doprnt.c: 1206: }
 10122                           ;doprnt.c: 1207: while(exp > 0) {
 10123                           
 10124                           
 10125                           ;doprnt.c: 1208: (putch('0') );
 10126  04A5  3030               	movlw	48
 10127  04A6  319E  2618  3180   	fcall	_putch
 10128                           
 10129                           ;doprnt.c: 1209: exp--;
 10130  04A9  30FF               	movlw	255
 10131  04AA  0021               	movlb	1	; select bank1
 10132  04AB  07C8               	addwf	printf@exp^(0+128),f
 10133  04AC  30FF               	movlw	255
 10134  04AD  3DC9               	addwfc	(printf@exp+1)^(0+128),f
 10135  04AE                     l3252:	
 10136  04AE  0849               	movf	(printf@exp+1)^(0+128),w
 10137  04AF  3A80               	xorlw	128
 10138  04B0  0020               	movlb	0	; select bank0
 10139  04B1  00E7               	movwf	??_printf
 10140  04B2  3080               	movlw	128
 10141  04B3  0267               	subwf	??_printf,w
 10142  04B4  1D03               	skipz
 10143  04B5  2CB9               	goto	u4525
 10144  04B6  3001               	movlw	1
 10145  04B7  0021               	movlb	1	; select bank1
 10146  04B8  0248               	subwf	printf@exp^(0+128),w
 10147  04B9                     u4525:	
 10148  04B9  1803               	skipnc
 10149  04BA  2CA5               	goto	l3248
 10150                           
 10151                           ;doprnt.c: 1210: }
 10152                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 10153  04BB  0021               	movlb	1	; select bank1
 10154  04BC  0852               	movf	(printf@prec+1)^(0+128),w
 10155  04BD  3A80               	xorlw	128
 10156  04BE  0020               	movlb	0	; select bank0
 10157  04BF  00E7               	movwf	??_printf
 10158  04C0  3080               	movlw	128
 10159  04C1  0267               	subwf	??_printf,w
 10160  04C2  1D03               	skipz
 10161  04C3  2CC7               	goto	u4535
 10162  04C4  3009               	movlw	9
 10163  04C5  0021               	movlb	1	; select bank1
 10164  04C6  0251               	subwf	printf@prec^(0+128),w
 10165  04C7                     u4535:	
 10166  04C7  1C03               	skipc
 10167  04C8  2CCB               	goto	l3258
 10168                           
 10169                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 10170  04C9  3008               	movlw	8
 10171  04CA  2CCD               	goto	L5
 10172  04CB                     l3258:	
 10173                           
 10174                           ;doprnt.c: 1213: else
 10175                           ;doprnt.c: 1214: c = prec;
 10176  04CB  0021               	movlb	1	; select bank1
 10177  04CC  0851               	movf	printf@prec^(0+128),w
 10178  04CD                     L5:	
 10179  04CD  0020               	movlb	0	; select bank0
 10180  04CE  00E7               	movwf	??_printf
 10181  04CF  0867               	movf	??_printf,w
 10182  04D0  0021               	movlb	1	; select bank1
 10183  04D1  00D5               	movwf	printf@c^(0+128)
 10184                           
 10185                           ;doprnt.c: 1215: prec -= c;
 10186  04D2  0855               	movf	printf@c^(0+128),w
 10187  04D3  0020               	movlb	0	; select bank0
 10188  04D4  00E7               	movwf	??_printf
 10189  04D5  01E8               	clrf	??_printf+1
 10190  04D6  1BE7               	btfsc	??_printf,7
 10191  04D7  03E8               	decf	??_printf+1,f
 10192  04D8  0867               	movf	??_printf,w
 10193  04D9  0021               	movlb	1	; select bank1
 10194  04DA  02D1               	subwf	printf@prec^(0+128),f
 10195  04DB  0020               	movlb	0	; select bank0
 10196  04DC  0868               	movf	??_printf+1,w
 10197  04DD  0021               	movlb	1	; select bank1
 10198  04DE  3BD2               	subwfb	(printf@prec+1)^(0+128),f
 10199                           
 10200                           ;doprnt.c: 1217: if(c || flag & 0x800)
 10201  04DF  0855               	movf	printf@c^(0+128),w
 10202  04E0  1D03               	btfss	3,2
 10203  04E1  2CE4               	goto	l3264
 10204  04E2  1DD7               	btfss	(printf@flag+1)^(0+128),3
 10205  04E3  2CE8               	goto	l3266
 10206  04E4                     l3264:	
 10207                           
 10208                           ;doprnt.c: 1221: (putch('.') );
 10209  04E4  302E               	movlw	46
 10210  04E5  319E  2618  3180   	fcall	_putch
 10211  04E8                     l3266:	
 10212                           
 10213                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 10214  04E8  0021               	movlb	1	; select bank1
 10215  04E9  0855               	movf	printf@c^(0+128),w
 10216  04EA  318A  2262  3180   	fcall	_scale
 10217  04ED  0020               	movlb	0	; select bank0
 10218  04EE  0846               	movf	?_scale,w
 10219  04EF  0021               	movlb	1	; select bank1
 10220  04F0  00B2               	movwf	_printf$1253^(0+128)
 10221  04F1  0020               	movlb	0	; select bank0
 10222  04F2  0847               	movf	?_scale+1,w
 10223  04F3  0021               	movlb	1	; select bank1
 10224  04F4  00B3               	movwf	(_printf$1253+1)^(0+128)
 10225  04F5  0020               	movlb	0	; select bank0
 10226  04F6  0848               	movf	?_scale+2,w
 10227  04F7  0021               	movlb	1	; select bank1
 10228  04F8  00B4               	movwf	(_printf$1253+2)^(0+128)
 10229                           
 10230                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 10231  04F9  0832               	movf	_printf$1253^(0+128),w
 10232  04FA  0020               	movlb	0	; select bank0
 10233  04FB  00B9               	movwf	___ftmul@f2
 10234  04FC  0021               	movlb	1	; select bank1
 10235  04FD  0833               	movf	(_printf$1253+1)^(0+128),w
 10236  04FE  0020               	movlb	0	; select bank0
 10237  04FF  00BA               	movwf	___ftmul@f2+1
 10238  0500  0021               	movlb	1	; select bank1
 10239  0501  0834               	movf	(_printf$1253+2)^(0+128),w
 10240  0502  0020               	movlb	0	; select bank0
 10241  0503  00BB               	movwf	___ftmul@f2+2
 10242  0504  0021               	movlb	1	; select bank1
 10243  0505  084A               	movf	printf@fval^(0+128),w
 10244  0506  0020               	movlb	0	; select bank0
 10245  0507  00B6               	movwf	___ftmul@f1
 10246  0508  0021               	movlb	1	; select bank1
 10247  0509  084B               	movf	(printf@fval+1)^(0+128),w
 10248  050A  0020               	movlb	0	; select bank0
 10249  050B  00B7               	movwf	___ftmul@f1+1
 10250  050C  0021               	movlb	1	; select bank1
 10251  050D  084C               	movf	(printf@fval+2)^(0+128),w
 10252  050E  0020               	movlb	0	; select bank0
 10253  050F  00B8               	movwf	___ftmul@f1+2
 10254  0510  3195  25A0  3180   	fcall	___ftmul
 10255  0513  0020               	movlb	0	; select bank0
 10256  0514  0836               	movf	?___ftmul,w
 10257  0515  00CF               	movwf	___fttol@f1
 10258  0516  0837               	movf	?___ftmul+1,w
 10259  0517  00D0               	movwf	___fttol@f1+1
 10260  0518  0838               	movf	?___ftmul+2,w
 10261  0519  00D1               	movwf	___fttol@f1+2
 10262  051A  3193  23FF  3180   	fcall	___fttol
 10263  051D  0020               	movlb	0	; select bank0
 10264  051E  0852               	movf	?___fttol+3,w
 10265  051F  0021               	movlb	1	; select bank1
 10266  0520  00D0               	movwf	(printf@val+3)^(0+128)
 10267  0521  0020               	movlb	0	; select bank0
 10268  0522  0851               	movf	?___fttol+2,w
 10269  0523  0021               	movlb	1	; select bank1
 10270  0524  00CF               	movwf	(printf@val+2)^(0+128)
 10271  0525  0020               	movlb	0	; select bank0
 10272  0526  0850               	movf	?___fttol+1,w
 10273  0527  0021               	movlb	1	; select bank1
 10274  0528  00CE               	movwf	(printf@val+1)^(0+128)
 10275  0529  0020               	movlb	0	; select bank0
 10276  052A  084F               	movf	?___fttol,w
 10277  052B                     L6:	
 10278  052B  0021               	movlb	1	; select bank1
 10279  052C  00CD               	movwf	printf@val^(0+128)
 10280  052D  30FF               	movlw	255
 10281  052E  0020               	movlb	0	; select bank0
 10282  052F  00E7               	movwf	??_printf
 10283  0530  0867               	movf	??_printf,w
 10284  0531  0021               	movlb	1	; select bank1
 10285  0532  07D5               	addwf	printf@c^(0+128),f
 10286  0533  0A55               	incf	printf@c^(0+128),w
 10287  0534  1903               	btfsc	3,2
 10288  0535  2DE2               	goto	l3284
 10289                           
 10290                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 10291                           
 10292                           ;doprnt.c: 1228: while(c--) {
 10293  0536  0855               	movf	printf@c^(0+128),w
 10294  0537  0020               	movlb	0	; select bank0
 10295  0538  00E7               	movwf	??_printf
 10296  0539  01E8               	clrf	??_printf+1
 10297  053A  35E7               	lslf	??_printf,f
 10298  053B  0DE8               	rlf	??_printf+1,f
 10299  053C  35E7               	lslf	??_printf,f
 10300  053D  0DE8               	rlf	??_printf+1,f
 10301  053E  3030               	movlw	low (_dpowers| (0+32768))
 10302  053F  0767               	addwf	??_printf,w
 10303  0540  0084               	movwf	4
 10304  0541  3090               	movlw	high (_dpowers| (0+32768))
 10305  0542  3D68               	addwfc	??_printf+1,w
 10306  0543  0085               	movwf	5
 10307  0544  3F00               	moviw [0]fsr0
 10308  0545  00A0               	movwf	___lldiv@divisor
 10309  0546  3F01               	moviw [1]fsr0
 10310  0547  00A1               	movwf	___lldiv@divisor+1
 10311  0548  3F02               	moviw [2]fsr0
 10312  0549  00A2               	movwf	___lldiv@divisor+2
 10313  054A  3F03               	moviw [3]fsr0
 10314  054B  00A3               	movwf	___lldiv@divisor+3
 10315  054C  0021               	movlb	1	; select bank1
 10316  054D  0850               	movf	(printf@val+3)^(0+128),w
 10317  054E  0020               	movlb	0	; select bank0
 10318  054F  00A7               	movwf	___lldiv@dividend+3
 10319  0550  0021               	movlb	1	; select bank1
 10320  0551  084F               	movf	(printf@val+2)^(0+128),w
 10321  0552  0020               	movlb	0	; select bank0
 10322  0553  00A6               	movwf	___lldiv@dividend+2
 10323  0554  0021               	movlb	1	; select bank1
 10324  0555  084E               	movf	(printf@val+1)^(0+128),w
 10325  0556  0020               	movlb	0	; select bank0
 10326  0557  00A5               	movwf	___lldiv@dividend+1
 10327  0558  0021               	movlb	1	; select bank1
 10328  0559  084D               	movf	printf@val^(0+128),w
 10329  055A  0020               	movlb	0	; select bank0
 10330  055B  00A4               	movwf	___lldiv@dividend
 10331  055C  3187  27A9  3180   	fcall	___lldiv
 10332  055F  0020               	movlb	0	; select bank0
 10333  0560  0823               	movf	?___lldiv+3,w
 10334  0561  0021               	movlb	1	; select bank1
 10335  0562  00C7               	movwf	(printf@tmpval+3)^(0+128)
 10336  0563  0020               	movlb	0	; select bank0
 10337  0564  0822               	movf	?___lldiv+2,w
 10338  0565  0021               	movlb	1	; select bank1
 10339  0566  00C6               	movwf	(printf@tmpval+2)^(0+128)
 10340  0567  0020               	movlb	0	; select bank0
 10341  0568  0821               	movf	?___lldiv+1,w
 10342  0569  0021               	movlb	1	; select bank1
 10343  056A  00C5               	movwf	(printf@tmpval+1)^(0+128)
 10344  056B  0020               	movlb	0	; select bank0
 10345  056C  0820               	movf	?___lldiv,w
 10346  056D  0021               	movlb	1	; select bank1
 10347  056E  00C4               	movwf	printf@tmpval^(0+128)
 10348                           
 10349                           ;doprnt.c: 1230: tmpval.vd %= 10;
 10350  056F  3000               	movlw	0
 10351  0570  0020               	movlb	0	; select bank0
 10352  0571  00B1               	movwf	___llmod@divisor+3
 10353  0572  3000               	movlw	0
 10354  0573  00B0               	movwf	___llmod@divisor+2
 10355  0574  3000               	movlw	0
 10356  0575  00AF               	movwf	___llmod@divisor+1
 10357  0576  300A               	movlw	10
 10358  0577  00AE               	movwf	___llmod@divisor
 10359  0578  0021               	movlb	1	; select bank1
 10360  0579  0847               	movf	(printf@tmpval+3)^(0+128),w
 10361  057A  0020               	movlb	0	; select bank0
 10362  057B  00B5               	movwf	___llmod@dividend+3
 10363  057C  0021               	movlb	1	; select bank1
 10364  057D  0846               	movf	(printf@tmpval+2)^(0+128),w
 10365  057E  0020               	movlb	0	; select bank0
 10366  057F  00B4               	movwf	___llmod@dividend+2
 10367  0580  0021               	movlb	1	; select bank1
 10368  0581  0845               	movf	(printf@tmpval+1)^(0+128),w
 10369  0582  0020               	movlb	0	; select bank0
 10370  0583  00B3               	movwf	___llmod@dividend+1
 10371  0584  0021               	movlb	1	; select bank1
 10372  0585  0844               	movf	printf@tmpval^(0+128),w
 10373  0586  0020               	movlb	0	; select bank0
 10374  0587  00B2               	movwf	___llmod@dividend
 10375  0588  3192  2221  3180   	fcall	___llmod
 10376  058B  0020               	movlb	0	; select bank0
 10377  058C  0831               	movf	?___llmod+3,w
 10378  058D  0021               	movlb	1	; select bank1
 10379  058E  00C7               	movwf	(printf@tmpval+3)^(0+128)
 10380  058F  0020               	movlb	0	; select bank0
 10381  0590  0830               	movf	?___llmod+2,w
 10382  0591  0021               	movlb	1	; select bank1
 10383  0592  00C6               	movwf	(printf@tmpval+2)^(0+128)
 10384  0593  0020               	movlb	0	; select bank0
 10385  0594  082F               	movf	?___llmod+1,w
 10386  0595  0021               	movlb	1	; select bank1
 10387  0596  00C5               	movwf	(printf@tmpval+1)^(0+128)
 10388  0597  0020               	movlb	0	; select bank0
 10389  0598  082E               	movf	?___llmod,w
 10390  0599  0021               	movlb	1	; select bank1
 10391  059A  00C4               	movwf	printf@tmpval^(0+128)
 10392                           
 10393                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
 10394  059B  0844               	movf	printf@tmpval^(0+128),w
 10395  059C  3E30               	addlw	48
 10396  059D  319E  2618  3180   	fcall	_putch
 10397                           
 10398                           ;doprnt.c: 1232: val %= dpowers[c];
 10399  05A0  0021               	movlb	1	; select bank1
 10400  05A1  0855               	movf	printf@c^(0+128),w
 10401  05A2  0020               	movlb	0	; select bank0
 10402  05A3  00E7               	movwf	??_printf
 10403  05A4  01E8               	clrf	??_printf+1
 10404  05A5  35E7               	lslf	??_printf,f
 10405  05A6  0DE8               	rlf	??_printf+1,f
 10406  05A7  35E7               	lslf	??_printf,f
 10407  05A8  0DE8               	rlf	??_printf+1,f
 10408  05A9  3030               	movlw	low (_dpowers| (0+32768))
 10409  05AA  0767               	addwf	??_printf,w
 10410  05AB  0084               	movwf	4
 10411  05AC  3090               	movlw	high (_dpowers| (0+32768))
 10412  05AD  3D68               	addwfc	??_printf+1,w
 10413  05AE  0085               	movwf	5
 10414  05AF  3F00               	moviw [0]fsr0
 10415  05B0  00AE               	movwf	___llmod@divisor
 10416  05B1  3F01               	moviw [1]fsr0
 10417  05B2  00AF               	movwf	___llmod@divisor+1
 10418  05B3  3F02               	moviw [2]fsr0
 10419  05B4  00B0               	movwf	___llmod@divisor+2
 10420  05B5  3F03               	moviw [3]fsr0
 10421  05B6  00B1               	movwf	___llmod@divisor+3
 10422  05B7  0021               	movlb	1	; select bank1
 10423  05B8  0850               	movf	(printf@val+3)^(0+128),w
 10424  05B9  0020               	movlb	0	; select bank0
 10425  05BA  00B5               	movwf	___llmod@dividend+3
 10426  05BB  0021               	movlb	1	; select bank1
 10427  05BC  084F               	movf	(printf@val+2)^(0+128),w
 10428  05BD  0020               	movlb	0	; select bank0
 10429  05BE  00B4               	movwf	___llmod@dividend+2
 10430  05BF  0021               	movlb	1	; select bank1
 10431  05C0  084E               	movf	(printf@val+1)^(0+128),w
 10432  05C1  0020               	movlb	0	; select bank0
 10433  05C2  00B3               	movwf	___llmod@dividend+1
 10434  05C3  0021               	movlb	1	; select bank1
 10435  05C4  084D               	movf	printf@val^(0+128),w
 10436  05C5  0020               	movlb	0	; select bank0
 10437  05C6  00B2               	movwf	___llmod@dividend
 10438  05C7  3192  2221  3180   	fcall	___llmod
 10439  05CA  0020               	movlb	0	; select bank0
 10440  05CB  0831               	movf	?___llmod+3,w
 10441  05CC  0021               	movlb	1	; select bank1
 10442  05CD  00D0               	movwf	(printf@val+3)^(0+128)
 10443  05CE  0020               	movlb	0	; select bank0
 10444  05CF  0830               	movf	?___llmod+2,w
 10445  05D0  0021               	movlb	1	; select bank1
 10446  05D1  00CF               	movwf	(printf@val+2)^(0+128)
 10447  05D2  0020               	movlb	0	; select bank0
 10448  05D3  082F               	movf	?___llmod+1,w
 10449  05D4  0021               	movlb	1	; select bank1
 10450  05D5  00CE               	movwf	(printf@val+1)^(0+128)
 10451  05D6  0020               	movlb	0	; select bank0
 10452  05D7  082E               	movf	?___llmod,w
 10453  05D8  2D2B               	goto	L6
 10454  05D9                     l3280:	
 10455                           ;doprnt.c: 1233: }
 10456                           ;doprnt.c: 1235: while(prec) {
 10457                           
 10458                           
 10459                           ;doprnt.c: 1236: (putch('0') );
 10460  05D9  3030               	movlw	48
 10461  05DA  319E  2618  3180   	fcall	_putch
 10462                           
 10463                           ;doprnt.c: 1237: prec--;
 10464  05DD  30FF               	movlw	255
 10465  05DE  0021               	movlb	1	; select bank1
 10466  05DF  07D1               	addwf	printf@prec^(0+128),f
 10467  05E0  30FF               	movlw	255
 10468  05E1  3DD2               	addwfc	(printf@prec+1)^(0+128),f
 10469  05E2                     l3284:	
 10470  05E2  0851               	movf	printf@prec^(0+128),w
 10471  05E3  0452               	iorwf	(printf@prec+1)^(0+128),w
 10472  05E4  1D03               	btfss	3,2
 10473  05E5  2DD9               	goto	l3280
 10474                           
 10475                           ;doprnt.c: 1238: }
 10476                           ;doprnt.c: 1240: if((flag & 0x08) && width > 0)
 10477  05E6  1DD6               	btfss	printf@flag^(0+128),3
 10478  05E7  2899               	goto	L27
 10479  05E8  0854               	movf	(printf@width+1)^(0+128),w
 10480  05E9  3A80               	xorlw	128
 10481  05EA  0020               	movlb	0	; select bank0
 10482  05EB  00E7               	movwf	??_printf
 10483  05EC  3080               	movlw	128
 10484  05ED  0267               	subwf	??_printf,w
 10485  05EE  1D03               	skipz
 10486  05EF  2DF3               	goto	u4595
 10487  05F0  3001               	movlw	1
 10488  05F1  0021               	movlb	1	; select bank1
 10489  05F2  0253               	subwf	printf@width^(0+128),w
 10490  05F3                     u4595:	
 10491  05F3  1C03               	skipc
 10492  05F4  2899               	goto	L27
 10493  05F5                     l3288:	
 10494                           ;doprnt.c: 1241: do
 10495                           
 10496                           
 10497                           ;doprnt.c: 1242: (putch(' ') );
 10498  05F5  3020               	movlw	32
 10499  05F6  319E  2618  3180   	fcall	_putch
 10500                           
 10501                           ;doprnt.c: 1243: while(--width);
 10502  05F9  30FF               	movlw	255
 10503  05FA  0021               	movlb	1	; select bank1
 10504  05FB  07D3               	addwf	printf@width^(0+128),f
 10505  05FC  30FF               	movlw	255
 10506  05FD  3DD4               	addwfc	(printf@width+1)^(0+128),f
 10507  05FE  0853               	movf	printf@width^(0+128),w
 10508  05FF  0454               	iorwf	(printf@width+1)^(0+128),w
 10509  0600  1903               	btfsc	3,2
 10510  0601  2899               	goto	L27
 10511  0602  2DF5               	goto	l3288
 10512  0603                     l3292:	
 10513                           ;doprnt.c: 1245: continue;
 10514                           
 10515                           
 10516                           ;doprnt.c: 1246: }
 10517                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
 10518  0603  30C0               	movlw	192
 10519  0604  0021               	movlb	1	; select bank1
 10520  0605  0556               	andwf	printf@flag^(0+128),w
 10521  0606  0020               	movlb	0	; select bank0
 10522  0607  00E7               	movwf	??_printf
 10523  0608  3000               	movlw	0
 10524  0609  0021               	movlb	1	; select bank1
 10525  060A  0557               	andwf	(printf@flag+1)^(0+128),w
 10526  060B  0020               	movlb	0	; select bank0
 10527  060C  00E8               	movwf	??_printf+1
 10528  060D  0867               	movf	??_printf,w
 10529  060E  0468               	iorwf	??_printf+1,w
 10530  060F  318C  1D03         	btfss	3,2
 10531  0611  2CA8  3180         	goto	l3304
 10532                           
 10533                           ;doprnt.c: 1253: {
 10534                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 10535  0613  0021               	movlb	1	; select bank1
 10536  0614  0843               	movf	printf@ap^(0+128),w
 10537  0615  0086               	movwf	6
 10538  0616  0187               	clrf	7
 10539  0617  3F40               	moviw [0]fsr1
 10540  0618  0020               	movlb	0	; select bank0
 10541  0619  00E7               	movwf	??_printf
 10542  061A  3F41               	moviw [1]fsr1
 10543  061B  00E8               	movwf	??_printf+1
 10544  061C  0867               	movf	??_printf,w
 10545  061D  0021               	movlb	1	; select bank1
 10546  061E  00CD               	movwf	printf@val^(0+128)
 10547  061F  0020               	movlb	0	; select bank0
 10548  0620  0868               	movf	??_printf+1,w
 10549  0621  0021               	movlb	1	; select bank1
 10550  0622  00CE               	movwf	(printf@val+1)^(0+128)
 10551  0623  0D89               	rlf	9,f
 10552  0624  3B89               	subwfb	9,f
 10553  0625  0989               	comf	9,f
 10554  0626  00CF               	movwf	(printf@val+2)^(0+128)
 10555  0627  00D0               	movwf	(printf@val+3)^(0+128)
 10556  0628  3002               	movlw	2
 10557  0629  0020               	movlb	0	; select bank0
 10558  062A  00E7               	movwf	??_printf
 10559  062B  0867               	movf	??_printf,w
 10560  062C  0021               	movlb	1	; select bank1
 10561  062D  07C3               	addwf	printf@ap^(0+128),f
 10562                           
 10563                           ;doprnt.c: 1261: if((long)val < 0) {
 10564  062E  1FD0               	btfss	(printf@val+3)^(0+128),7
 10565  062F  2E3F               	goto	L30
 10566                           
 10567                           ;doprnt.c: 1262: flag |= 0x03;
 10568  0630  3003               	movlw	3
 10569  0631  04D6               	iorwf	printf@flag^(0+128),f
 10570  0632  3000               	movlw	0
 10571  0633  04D7               	iorwf	(printf@flag+1)^(0+128),f
 10572                           
 10573                           ;doprnt.c: 1263: val = -val;
 10574  0634  09CD               	comf	printf@val^(0+128),f
 10575  0635  09CE               	comf	(printf@val+1)^(0+128),f
 10576  0636  09CF               	comf	(printf@val+2)^(0+128),f
 10577  0637  09D0               	comf	(printf@val+3)^(0+128),f
 10578  0638  0ACD               	incf	printf@val^(0+128),f
 10579  0639  1903               	skipnz
 10580  063A  0ACE               	incf	(printf@val+1)^(0+128),f
 10581  063B  1903               	skipnz
 10582  063C  0ACF               	incf	(printf@val+2)^(0+128),f
 10583  063D  1903               	skipnz
 10584  063E  0AD0               	incf	(printf@val+3)^(0+128),f
 10585  063F                     L30:	
 10586                           
 10587                           ;doprnt.c: 1264: }
 10588                           ;doprnt.c: 1266: }
 10589  063F  318C  2CC0         	goto	l3308
 10590  0641                     L29:	
 10591  0641                     L28:	
 10592  0641  318F  2FFD         	ljmp	l511
 10593                           
 10594                           	psect	text15_split_2
 10595  0CA8                     l3304:	
 10596                           
 10597                           ;doprnt.c: 1268: else
 10598                           ;doprnt.c: 1273: {
 10599                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 10600  0CA8  0021               	movlb	1	; select bank1
 10601  0CA9  0843               	movf	printf@ap^(0+128),w
 10602  0CAA  0086               	movwf	6
 10603  0CAB  0187               	clrf	7
 10604  0CAC  3F40               	moviw [0]fsr1
 10605  0CAD  0020               	movlb	0	; select bank0
 10606  0CAE  00E7               	movwf	??_printf
 10607  0CAF  3F41               	moviw [1]fsr1
 10608  0CB0  00E8               	movwf	??_printf+1
 10609  0CB1  0867               	movf	??_printf,w
 10610  0CB2  0021               	movlb	1	; select bank1
 10611  0CB3  00CD               	movwf	printf@val^(0+128)
 10612  0CB4  0020               	movlb	0	; select bank0
 10613  0CB5  0868               	movf	??_printf+1,w
 10614  0CB6  0021               	movlb	1	; select bank1
 10615  0CB7  00CE               	movwf	(printf@val^(0+128)+1)
 10616  0CB8  01CF               	clrf	(printf@val^(0+128)+2)
 10617  0CB9  01D0               	clrf	(printf@val^(0+128)+3)
 10618  0CBA  3002               	movlw	2
 10619  0CBB  0020               	movlb	0	; select bank0
 10620  0CBC  00E7               	movwf	??_printf
 10621  0CBD  0867               	movf	??_printf,w
 10622  0CBE  0021               	movlb	1	; select bank1
 10623  0CBF  07C3               	addwf	printf@ap^(0+128),f
 10624  0CC0                     l3308:	
 10625                           
 10626                           ;doprnt.c: 1287: }
 10627                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
 10628  0CC0  0851               	movf	printf@prec^(0+128),w
 10629  0CC1  0452               	iorwf	(printf@prec+1)^(0+128),w
 10630  0CC2  1D03               	btfss	3,2
 10631  0CC3  2D7D               	goto	l3346
 10632  0CC4  0850               	movf	(printf@val+3)^(0+128),w
 10633  0CC5  044F               	iorwf	(printf@val+2)^(0+128),w
 10634  0CC6  044E               	iorwf	(printf@val+1)^(0+128),w
 10635  0CC7  044D               	iorwf	printf@val^(0+128),w
 10636  0CC8  1D03               	skipz
 10637  0CC9  2D7D               	goto	l3346
 10638                           
 10639                           ;doprnt.c: 1291: prec++;
 10640  0CCA  3001               	movlw	1
 10641  0CCB  07D1               	addwf	printf@prec^(0+128),f
 10642  0CCC  3000               	movlw	0
 10643  0CCD  3DD2               	addwfc	(printf@prec+1)^(0+128),f
 10644                           
 10645                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
 10646  0CCE  2D7D               	goto	l3346
 10647  0CCF                     l439:	
 10648                           ;doprnt.c: 1299: case 0x00:
 10649                           
 10650                           
 10651                           ;doprnt.c: 1302: case 0xC0:
 10652                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10653  0CCF  01D5               	clrf	printf@c^(0+128)
 10654  0CD0  0AD5               	incf	printf@c^(0+128),f
 10655  0CD1                     L14:	
 10656  0CD1  300A               	movlw	10
 10657  0CD2  0655               	xorwf	printf@c^(0+128),w
 10658  0CD3  1903               	btfsc	3,2
 10659  0CD4  2D8C               	goto	l3348
 10660                           
 10661                           ;doprnt.c: 1306: if(val < dpowers[c])
 10662  0CD5  0855               	movf	printf@c^(0+128),w
 10663  0CD6  0020               	movlb	0	; select bank0
 10664  0CD7  00E7               	movwf	??_printf
 10665  0CD8  01E8               	clrf	??_printf+1
 10666  0CD9  35E7               	lslf	??_printf,f
 10667  0CDA  0DE8               	rlf	??_printf+1,f
 10668  0CDB  35E7               	lslf	??_printf,f
 10669  0CDC  0DE8               	rlf	??_printf+1,f
 10670  0CDD  3030               	movlw	low (_dpowers| (0+32768))
 10671  0CDE  0767               	addwf	??_printf,w
 10672  0CDF  0084               	movwf	4
 10673  0CE0  3090               	movlw	high (_dpowers| (0+32768))
 10674  0CE1  3D68               	addwfc	??_printf+1,w
 10675  0CE2  0085               	movwf	5
 10676  0CE3  3F00               	moviw [0]fsr0
 10677  0CE4  00E9               	movwf	??_printf+2
 10678  0CE5  3F01               	moviw [1]fsr0
 10679  0CE6  00EA               	movwf	??_printf+3
 10680  0CE7  3F02               	moviw [2]fsr0
 10681  0CE8  00EB               	movwf	??_printf+4
 10682  0CE9  3F03               	moviw [3]fsr0
 10683  0CEA  00EC               	movwf	??_printf+5
 10684  0CEB  086C               	movf	??_printf+5,w
 10685  0CEC  0021               	movlb	1	; select bank1
 10686  0CED  0250               	subwf	(printf@val+3)^(0+128),w
 10687  0CEE  1D03               	skipz
 10688  0CEF  2D00               	goto	u4665
 10689  0CF0  0020               	movlb	0	; select bank0
 10690  0CF1  086B               	movf	??_printf+4,w
 10691  0CF2  0021               	movlb	1	; select bank1
 10692  0CF3  024F               	subwf	(printf@val+2)^(0+128),w
 10693  0CF4  1D03               	skipz
 10694  0CF5  2D00               	goto	u4665
 10695  0CF6  0020               	movlb	0	; select bank0
 10696  0CF7  086A               	movf	??_printf+3,w
 10697  0CF8  0021               	movlb	1	; select bank1
 10698  0CF9  024E               	subwf	(printf@val+1)^(0+128),w
 10699  0CFA  1D03               	skipz
 10700  0CFB  2D00               	goto	u4665
 10701  0CFC  0020               	movlb	0	; select bank0
 10702  0CFD  0869               	movf	??_printf+2,w
 10703  0CFE  0021               	movlb	1	; select bank1
 10704  0CFF  024D               	subwf	printf@val^(0+128),w
 10705  0D00                     u4665:	
 10706  0D00  1C03               	btfss	3,0
 10707  0D01  2D8C               	goto	l3348
 10708                           
 10709                           ;doprnt.c: 1307: break;
 10710  0D02  3001               	movlw	1
 10711  0D03  0020               	movlb	0	; select bank0
 10712  0D04  00E7               	movwf	??_printf
 10713  0D05  0867               	movf	??_printf,w
 10714  0D06  0021               	movlb	1	; select bank1
 10715  0D07  07D5               	addwf	printf@c^(0+128),f
 10716  0D08  2CD1               	goto	L14
 10717  0D09                     l444:	
 10718                           ;doprnt.c: 1314: case 0x80:
 10719                           
 10720                           ;doprnt.c: 1309: break;
 10721                           
 10722                           
 10723                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 10724  0D09  01D5               	clrf	printf@c^(0+128)
 10725  0D0A  0AD5               	incf	printf@c^(0+128),f
 10726  0D0B                     L15:	
 10727  0D0B  3008               	movlw	8
 10728  0D0C  0655               	xorwf	printf@c^(0+128),w
 10729  0D0D  1903               	btfsc	3,2
 10730  0D0E  2D8C               	goto	l3348
 10731                           
 10732                           ;doprnt.c: 1317: if(val < hexpowers[c])
 10733  0D0F  0855               	movf	printf@c^(0+128),w
 10734  0D10  0020               	movlb	0	; select bank0
 10735  0D11  00E7               	movwf	??_printf
 10736  0D12  01E8               	clrf	??_printf+1
 10737  0D13  35E7               	lslf	??_printf,f
 10738  0D14  0DE8               	rlf	??_printf+1,f
 10739  0D15  35E7               	lslf	??_printf,f
 10740  0D16  0DE8               	rlf	??_printf+1,f
 10741  0D17  30A6               	movlw	low (_hexpowers| (0+32768))
 10742  0D18  0767               	addwf	??_printf,w
 10743  0D19  0084               	movwf	4
 10744  0D1A  3090               	movlw	high (_hexpowers| (0+32768))
 10745  0D1B  3D68               	addwfc	??_printf+1,w
 10746  0D1C  0085               	movwf	5
 10747  0D1D  3F00               	moviw [0]fsr0
 10748  0D1E  00E9               	movwf	??_printf+2
 10749  0D1F  3F01               	moviw [1]fsr0
 10750  0D20  00EA               	movwf	??_printf+3
 10751  0D21  3F02               	moviw [2]fsr0
 10752  0D22  00EB               	movwf	??_printf+4
 10753  0D23  3F03               	moviw [3]fsr0
 10754  0D24  00EC               	movwf	??_printf+5
 10755  0D25  086C               	movf	??_printf+5,w
 10756  0D26  0021               	movlb	1	; select bank1
 10757  0D27  0250               	subwf	(printf@val+3)^(0+128),w
 10758  0D28  1D03               	skipz
 10759  0D29  2D3A               	goto	u4695
 10760  0D2A  0020               	movlb	0	; select bank0
 10761  0D2B  086B               	movf	??_printf+4,w
 10762  0D2C  0021               	movlb	1	; select bank1
 10763  0D2D  024F               	subwf	(printf@val+2)^(0+128),w
 10764  0D2E  1D03               	skipz
 10765  0D2F  2D3A               	goto	u4695
 10766  0D30  0020               	movlb	0	; select bank0
 10767  0D31  086A               	movf	??_printf+3,w
 10768  0D32  0021               	movlb	1	; select bank1
 10769  0D33  024E               	subwf	(printf@val+1)^(0+128),w
 10770  0D34  1D03               	skipz
 10771  0D35  2D3A               	goto	u4695
 10772  0D36  0020               	movlb	0	; select bank0
 10773  0D37  0869               	movf	??_printf+2,w
 10774  0D38  0021               	movlb	1	; select bank1
 10775  0D39  024D               	subwf	printf@val^(0+128),w
 10776  0D3A                     u4695:	
 10777  0D3A  1C03               	btfss	3,0
 10778  0D3B  2D8C               	goto	l3348
 10779                           
 10780                           ;doprnt.c: 1318: break;
 10781  0D3C  3001               	movlw	1
 10782  0D3D  0020               	movlb	0	; select bank0
 10783  0D3E  00E7               	movwf	??_printf
 10784  0D3F  0867               	movf	??_printf,w
 10785  0D40  0021               	movlb	1	; select bank1
 10786  0D41  07D5               	addwf	printf@c^(0+128),f
 10787  0D42  2D0B               	goto	L15
 10788  0D43                     l448:	
 10789                           ;doprnt.c: 1326: case 0x40:
 10790                           
 10791                           ;doprnt.c: 1320: break;
 10792                           
 10793                           
 10794                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 10795  0D43  01D5               	clrf	printf@c^(0+128)
 10796  0D44  0AD5               	incf	printf@c^(0+128),f
 10797  0D45                     L16:	
 10798  0D45  300C               	movlw	12
 10799  0D46  0655               	xorwf	printf@c^(0+128),w
 10800  0D47  1903               	btfsc	3,2
 10801  0D48  2D8C               	goto	l3348
 10802                           
 10803                           ;doprnt.c: 1329: if(val < octpowers[c])
 10804  0D49  0855               	movf	printf@c^(0+128),w
 10805  0D4A  0020               	movlb	0	; select bank0
 10806  0D4B  00E7               	movwf	??_printf
 10807  0D4C  01E8               	clrf	??_printf+1
 10808  0D4D  35E7               	lslf	??_printf,f
 10809  0D4E  0DE8               	rlf	??_printf+1,f
 10810  0D4F  35E7               	lslf	??_printf,f
 10811  0D50  0DE8               	rlf	??_printf+1,f
 10812  0D51  3000               	movlw	low (_octpowers| (0+32768))
 10813  0D52  0767               	addwf	??_printf,w
 10814  0D53  0084               	movwf	4
 10815  0D54  3090               	movlw	high (_octpowers| (0+32768))
 10816  0D55  3D68               	addwfc	??_printf+1,w
 10817  0D56  0085               	movwf	5
 10818  0D57  3F00               	moviw [0]fsr0
 10819  0D58  00E9               	movwf	??_printf+2
 10820  0D59  3F01               	moviw [1]fsr0
 10821  0D5A  00EA               	movwf	??_printf+3
 10822  0D5B  3F02               	moviw [2]fsr0
 10823  0D5C  00EB               	movwf	??_printf+4
 10824  0D5D  3F03               	moviw [3]fsr0
 10825  0D5E  00EC               	movwf	??_printf+5
 10826  0D5F  086C               	movf	??_printf+5,w
 10827  0D60  0021               	movlb	1	; select bank1
 10828  0D61  0250               	subwf	(printf@val+3)^(0+128),w
 10829  0D62  1D03               	skipz
 10830  0D63  2D74               	goto	u4725
 10831  0D64  0020               	movlb	0	; select bank0
 10832  0D65  086B               	movf	??_printf+4,w
 10833  0D66  0021               	movlb	1	; select bank1
 10834  0D67  024F               	subwf	(printf@val+2)^(0+128),w
 10835  0D68  1D03               	skipz
 10836  0D69  2D74               	goto	u4725
 10837  0D6A  0020               	movlb	0	; select bank0
 10838  0D6B  086A               	movf	??_printf+3,w
 10839  0D6C  0021               	movlb	1	; select bank1
 10840  0D6D  024E               	subwf	(printf@val+1)^(0+128),w
 10841  0D6E  1D03               	skipz
 10842  0D6F  2D74               	goto	u4725
 10843  0D70  0020               	movlb	0	; select bank0
 10844  0D71  0869               	movf	??_printf+2,w
 10845  0D72  0021               	movlb	1	; select bank1
 10846  0D73  024D               	subwf	printf@val^(0+128),w
 10847  0D74                     u4725:	
 10848  0D74  1C03               	btfss	3,0
 10849  0D75  2D8C               	goto	l3348
 10850                           
 10851                           ;doprnt.c: 1330: break;
 10852  0D76  3001               	movlw	1
 10853  0D77  0020               	movlb	0	; select bank0
 10854  0D78  00E7               	movwf	??_printf
 10855  0D79  0867               	movf	??_printf,w
 10856  0D7A  0021               	movlb	1	; select bank1
 10857  0D7B  07D5               	addwf	printf@c^(0+128),f
 10858  0D7C  2D45               	goto	L16
 10859  0D7D                     l3346:	
 10860                           ;doprnt.c: 1336: }
 10861                           
 10862                           ;doprnt.c: 1332: break;
 10863                           
 10864  0D7D  0856               	movf	printf@flag^(0+128),w
 10865  0D7E  39C0               	andlw	192
 10866                           
 10867                           ; Switch size 1, requested type "space"
 10868                           ; Number of cases is 4, Range of values is 0 to 192
 10869                           ; switch strategies available:
 10870                           ; Name         Instructions Cycles
 10871                           ; simple_byte           13     7 (average)
 10872                           ; jumptable            260     6 (fixed)
 10873                           ;	Chosen strategy is simple_byte
 10874  0D7F  3A00               	xorlw	0	; case 0
 10875  0D80  1903               	skipnz
 10876  0D81  2CCF               	goto	l439
 10877  0D82  3A40               	xorlw	64	; case 64
 10878  0D83  1903               	skipnz
 10879  0D84  2D43               	goto	l448
 10880  0D85  3AC0               	xorlw	192	; case 128
 10881  0D86  1903               	skipnz
 10882  0D87  2D09               	goto	l444
 10883  0D88  3A40               	xorlw	64	; case 192
 10884  0D89  1903               	skipnz
 10885  0D8A  2CCF               	goto	l439
 10886  0D8B  2D8C               	goto	l3348
 10887  0D8C                     l3348:	
 10888                           
 10889                           ;doprnt.c: 1339: if(c < prec)
 10890  0D8C  0855               	movf	printf@c^(0+128),w
 10891  0D8D  0020               	movlb	0	; select bank0
 10892  0D8E  00E7               	movwf	??_printf
 10893  0D8F  01E8               	clrf	??_printf+1
 10894  0D90  1BE7               	btfsc	??_printf,7
 10895  0D91  03E8               	decf	??_printf+1,f
 10896  0D92  0868               	movf	??_printf+1,w
 10897  0D93  3A80               	xorlw	128
 10898  0D94  00E9               	movwf	??_printf+2
 10899  0D95  0021               	movlb	1	; select bank1
 10900  0D96  0852               	movf	(printf@prec+1)^(0+128),w
 10901  0D97  3A80               	xorlw	128
 10902  0D98  0020               	movlb	0	; select bank0
 10903  0D99  0269               	subwf	??_printf+2,w
 10904  0D9A  1D03               	skipz
 10905  0D9B  2DA0               	goto	u4745
 10906  0D9C  0021               	movlb	1	; select bank1
 10907  0D9D  0851               	movf	printf@prec^(0+128),w
 10908  0D9E  0020               	movlb	0	; select bank0
 10909  0D9F  0267               	subwf	??_printf,w
 10910  0DA0                     u4745:	
 10911  0DA0  1803               	skipnc
 10912  0DA1  2DAA               	goto	l3352
 10913                           
 10914                           ;doprnt.c: 1340: c = prec;
 10915  0DA2  0021               	movlb	1	; select bank1
 10916  0DA3  0851               	movf	printf@prec^(0+128),w
 10917  0DA4  0020               	movlb	0	; select bank0
 10918  0DA5  00E7               	movwf	??_printf
 10919  0DA6  0867               	movf	??_printf,w
 10920  0DA7  0021               	movlb	1	; select bank1
 10921  0DA8  00D5               	movwf	printf@c^(0+128)
 10922  0DA9  2DC6               	goto	l453
 10923  0DAA                     l3352:	
 10924                           
 10925                           ;doprnt.c: 1341: else if(prec < c)
 10926  0DAA  0021               	movlb	1	; select bank1
 10927  0DAB  0855               	movf	printf@c^(0+128),w
 10928  0DAC  0020               	movlb	0	; select bank0
 10929  0DAD  00E7               	movwf	??_printf
 10930  0DAE  01E8               	clrf	??_printf+1
 10931  0DAF  1BE7               	btfsc	??_printf,7
 10932  0DB0  03E8               	decf	??_printf+1,f
 10933  0DB1  0021               	movlb	1	; select bank1
 10934  0DB2  0852               	movf	(printf@prec+1)^(0+128),w
 10935  0DB3  3A80               	xorlw	128
 10936  0DB4  0020               	movlb	0	; select bank0
 10937  0DB5  00E9               	movwf	??_printf+2
 10938  0DB6  0868               	movf	??_printf+1,w
 10939  0DB7  3A80               	xorlw	128
 10940  0DB8  0269               	subwf	??_printf+2,w
 10941  0DB9  1D03               	skipz
 10942  0DBA  2DBE               	goto	u4755
 10943  0DBB  0867               	movf	??_printf,w
 10944  0DBC  0021               	movlb	1	; select bank1
 10945  0DBD  0251               	subwf	printf@prec^(0+128),w
 10946  0DBE                     u4755:	
 10947  0DBE  1803               	skipnc
 10948  0DBF  2DC6               	goto	l453
 10949                           
 10950                           ;doprnt.c: 1342: prec = c;
 10951  0DC0  0021               	movlb	1	; select bank1
 10952  0DC1  0855               	movf	printf@c^(0+128),w
 10953  0DC2  00D1               	movwf	printf@prec^(0+128)
 10954  0DC3  01D2               	clrf	(printf@prec+1)^(0+128)
 10955  0DC4  1BD1               	btfsc	printf@prec^(0+128),7
 10956  0DC5  03D2               	decf	(printf@prec+1)^(0+128),f
 10957  0DC6                     l453:	
 10958                           
 10959                           ;doprnt.c: 1345: if(width && flag & 0x03)
 10960  0DC6  0021               	movlb	1	; select bank1
 10961  0DC7  0853               	movf	printf@width^(0+128),w
 10962  0DC8  0454               	iorwf	(printf@width+1)^(0+128),w
 10963  0DC9  1903               	btfsc	3,2
 10964  0DCA  2DDD               	goto	l3360
 10965  0DCB  3003               	movlw	3
 10966  0DCC  0556               	andwf	printf@flag^(0+128),w
 10967  0DCD  0020               	movlb	0	; select bank0
 10968  0DCE  00E7               	movwf	??_printf
 10969  0DCF  3000               	movlw	0
 10970  0DD0  0021               	movlb	1	; select bank1
 10971  0DD1  0557               	andwf	(printf@flag+1)^(0+128),w
 10972  0DD2  0020               	movlb	0	; select bank0
 10973  0DD3  00E8               	movwf	??_printf+1
 10974  0DD4  0867               	movf	??_printf,w
 10975  0DD5  0468               	iorwf	??_printf+1,w
 10976  0DD6  1903               	btfsc	3,2
 10977  0DD7  2DDD               	goto	l3360
 10978                           
 10979                           ;doprnt.c: 1346: width--;
 10980  0DD8  30FF               	movlw	255
 10981  0DD9  0021               	movlb	1	; select bank1
 10982  0DDA  07D3               	addwf	printf@width^(0+128),f
 10983  0DDB  30FF               	movlw	255
 10984  0DDC  3DD4               	addwfc	(printf@width+1)^(0+128),f
 10985  0DDD                     l3360:	
 10986                           
 10987                           ;doprnt.c: 1348: if(flag & 0x4000) {
 10988  0DDD  0021               	movlb	1	; select bank1
 10989  0DDE  1F57               	btfss	(printf@flag+1)^(0+128),6
 10990  0DDF  2DF9               	goto	l3368
 10991                           
 10992                           ;doprnt.c: 1349: if(width > prec)
 10993  0DE0  0852               	movf	(printf@prec+1)^(0+128),w
 10994  0DE1  3A80               	xorlw	128
 10995  0DE2  0020               	movlb	0	; select bank0
 10996  0DE3  00E7               	movwf	??_printf
 10997  0DE4  0021               	movlb	1	; select bank1
 10998  0DE5  0854               	movf	(printf@width+1)^(0+128),w
 10999  0DE6  3A80               	xorlw	128
 11000  0DE7  0020               	movlb	0	; select bank0
 11001  0DE8  0267               	subwf	??_printf,w
 11002  0DE9  1D03               	skipz
 11003  0DEA  2DEE               	goto	u4795
 11004  0DEB  0021               	movlb	1	; select bank1
 11005  0DEC  0853               	movf	printf@width^(0+128),w
 11006  0DED  0251               	subwf	printf@prec^(0+128),w
 11007  0DEE                     u4795:	
 11008  0DEE  1803               	skipnc
 11009  0DEF  2DF6               	goto	l3366
 11010                           
 11011                           ;doprnt.c: 1350: width -= prec;
 11012  0DF0  0021               	movlb	1	; select bank1
 11013  0DF1  0851               	movf	printf@prec^(0+128),w
 11014  0DF2  02D3               	subwf	printf@width^(0+128),f
 11015  0DF3  0852               	movf	(printf@prec+1)^(0+128),w
 11016  0DF4  3BD4               	subwfb	(printf@width+1)^(0+128),f
 11017  0DF5  2DF9               	goto	l3368
 11018  0DF6                     l3366:	
 11019                           
 11020                           ;doprnt.c: 1351: else
 11021                           ;doprnt.c: 1352: width = 0;
 11022  0DF6  0021               	movlb	1	; select bank1
 11023  0DF7  01D3               	clrf	printf@width^(0+128)
 11024  0DF8  01D4               	clrf	(printf@width+1)^(0+128)
 11025  0DF9                     l3368:	
 11026                           
 11027                           ;doprnt.c: 1353: }
 11028                           ;doprnt.c: 1357: if((flag & (
 11029                           ;doprnt.c: 1359: 0x04|
 11030                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
 11031  0DF9  30C4               	movlw	196
 11032  0DFA  0556               	andwf	printf@flag^(0+128),w
 11033  0DFB  0020               	movlb	0	; select bank0
 11034  0DFC  00E7               	movwf	??_printf
 11035  0DFD  3008               	movlw	8
 11036  0DFE  0021               	movlb	1	; select bank1
 11037  0DFF  0557               	andwf	(printf@flag+1)^(0+128),w
 11038  0E00  0020               	movlb	0	; select bank0
 11039  0E01  00E8               	movwf	??_printf+1
 11040  0E02  3040               	movlw	64
 11041  0E03  0667               	xorwf	??_printf,w
 11042  0E04  3008               	movlw	8
 11043  0E05  1903               	skipnz
 11044  0E06  0668               	xorwf	??_printf+1,w
 11045  0E07  1D03               	btfss	3,2
 11046  0E08  2E10               	goto	l3374
 11047                           
 11048                           ;doprnt.c: 1362: if(width)
 11049  0E09  0021               	movlb	1	; select bank1
 11050  0E0A  0853               	movf	printf@width^(0+128),w
 11051  0E0B  0454               	iorwf	(printf@width+1)^(0+128),w
 11052  0E0C  1903               	btfsc	3,2
 11053  0E0D  2E38               	goto	l3382
 11054                           
 11055                           ;doprnt.c: 1363: width--;
 11056  0E0E  30FF               	movlw	255
 11057  0E0F  2E31               	goto	L7
 11058  0E10                     l3374:	
 11059                           ;doprnt.c: 1364: } else
 11060                           
 11061                           
 11062                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 11063  0E10  30C0               	movlw	192
 11064  0E11  0021               	movlb	1	; select bank1
 11065  0E12  0556               	andwf	printf@flag^(0+128),w
 11066  0E13  0020               	movlb	0	; select bank0
 11067  0E14  00E7               	movwf	??_printf
 11068  0E15  3008               	movlw	8
 11069  0E16  0021               	movlb	1	; select bank1
 11070  0E17  0557               	andwf	(printf@flag+1)^(0+128),w
 11071  0E18  0020               	movlb	0	; select bank0
 11072  0E19  00E8               	movwf	??_printf+1
 11073  0E1A  3080               	movlw	128
 11074  0E1B  0667               	xorwf	??_printf,w
 11075  0E1C  3008               	movlw	8
 11076  0E1D  1903               	skipnz
 11077  0E1E  0668               	xorwf	??_printf+1,w
 11078  0E1F  1D03               	btfss	3,2
 11079  0E20  2E38               	goto	l3382
 11080                           
 11081                           ;doprnt.c: 1372: if(width > 2)
 11082  0E21  0021               	movlb	1	; select bank1
 11083  0E22  0854               	movf	(printf@width+1)^(0+128),w
 11084  0E23  3A80               	xorlw	128
 11085  0E24  0020               	movlb	0	; select bank0
 11086  0E25  00E7               	movwf	??_printf
 11087  0E26  3080               	movlw	128
 11088  0E27  0267               	subwf	??_printf,w
 11089  0E28  1D03               	skipz
 11090  0E29  2E2D               	goto	u4835
 11091  0E2A  3003               	movlw	3
 11092  0E2B  0021               	movlb	1	; select bank1
 11093  0E2C  0253               	subwf	printf@width^(0+128),w
 11094  0E2D                     u4835:	
 11095  0E2D  1C03               	skipc
 11096  0E2E  2E35               	goto	l3380
 11097                           
 11098                           ;doprnt.c: 1373: width -= 2;
 11099  0E2F  30FE               	movlw	254
 11100  0E30  0021               	movlb	1	; select bank1
 11101  0E31                     L7:	
 11102  0E31  07D3               	addwf	printf@width^(0+128),f
 11103  0E32  30FF               	movlw	255
 11104  0E33  3DD4               	addwfc	(printf@width+1)^(0+128),f
 11105  0E34  2E38               	goto	l3382
 11106  0E35                     l3380:	
 11107                           
 11108                           ;doprnt.c: 1374: else
 11109                           ;doprnt.c: 1375: width = 0;
 11110  0E35  0021               	movlb	1	; select bank1
 11111  0E36  01D3               	clrf	printf@width^(0+128)
 11112  0E37  01D4               	clrf	(printf@width+1)^(0+128)
 11113  0E38                     l3382:	
 11114                           
 11115                           ;doprnt.c: 1376: }
 11116                           ;doprnt.c: 1381: if(width > c)
 11117  0E38  0021               	movlb	1	; select bank1
 11118  0E39  0855               	movf	printf@c^(0+128),w
 11119  0E3A  0020               	movlb	0	; select bank0
 11120  0E3B  00E7               	movwf	??_printf
 11121  0E3C  01E8               	clrf	??_printf+1
 11122  0E3D  1BE7               	btfsc	??_printf,7
 11123  0E3E  03E8               	decf	??_printf+1,f
 11124  0E3F  0868               	movf	??_printf+1,w
 11125  0E40  3A80               	xorlw	128
 11126  0E41  00E9               	movwf	??_printf+2
 11127  0E42  0021               	movlb	1	; select bank1
 11128  0E43  0854               	movf	(printf@width+1)^(0+128),w
 11129  0E44  3A80               	xorlw	128
 11130  0E45  0020               	movlb	0	; select bank0
 11131  0E46  0269               	subwf	??_printf+2,w
 11132  0E47  1D03               	skipz
 11133  0E48  2E4D               	goto	u4845
 11134  0E49  0021               	movlb	1	; select bank1
 11135  0E4A  0853               	movf	printf@width^(0+128),w
 11136  0E4B  0020               	movlb	0	; select bank0
 11137  0E4C  0267               	subwf	??_printf,w
 11138  0E4D                     u4845:	
 11139  0E4D  1803               	skipnc
 11140  0E4E  2E5E               	goto	l3386
 11141                           
 11142                           ;doprnt.c: 1382: width -= c;
 11143  0E4F  0021               	movlb	1	; select bank1
 11144  0E50  0855               	movf	printf@c^(0+128),w
 11145  0E51  0020               	movlb	0	; select bank0
 11146  0E52  00E7               	movwf	??_printf
 11147  0E53  01E8               	clrf	??_printf+1
 11148  0E54  1BE7               	btfsc	??_printf,7
 11149  0E55  03E8               	decf	??_printf+1,f
 11150  0E56  0867               	movf	??_printf,w
 11151  0E57  0021               	movlb	1	; select bank1
 11152  0E58  02D3               	subwf	printf@width^(0+128),f
 11153  0E59  0020               	movlb	0	; select bank0
 11154  0E5A  0868               	movf	??_printf+1,w
 11155  0E5B  0021               	movlb	1	; select bank1
 11156  0E5C  3BD4               	subwfb	(printf@width+1)^(0+128),f
 11157  0E5D  2E61               	goto	l3388
 11158  0E5E                     l3386:	
 11159                           
 11160                           ;doprnt.c: 1383: else
 11161                           ;doprnt.c: 1384: width = 0;
 11162  0E5E  0021               	movlb	1	; select bank1
 11163  0E5F  01D3               	clrf	printf@width^(0+128)
 11164  0E60  01D4               	clrf	(printf@width+1)^(0+128)
 11165  0E61                     l3388:	
 11166                           
 11167                           ;doprnt.c: 1387: if(flag & 0x04) {
 11168  0E61  1D56               	btfss	printf@flag^(0+128),2
 11169  0E62  2EA8               	goto	l3414
 11170                           
 11171                           ;doprnt.c: 1392: if(flag & 0x03)
 11172  0E63  3003               	movlw	3
 11173  0E64  0556               	andwf	printf@flag^(0+128),w
 11174  0E65  0020               	movlb	0	; select bank0
 11175  0E66  00E7               	movwf	??_printf
 11176  0E67  3000               	movlw	0
 11177  0E68  0021               	movlb	1	; select bank1
 11178  0E69  0557               	andwf	(printf@flag+1)^(0+128),w
 11179  0E6A  0020               	movlb	0	; select bank0
 11180  0E6B  00E8               	movwf	??_printf+1
 11181  0E6C  0867               	movf	??_printf,w
 11182  0E6D  0468               	iorwf	??_printf+1,w
 11183  0E6E  1903               	btfsc	3,2
 11184  0E6F  2E72               	goto	l468
 11185                           
 11186                           ;doprnt.c: 1393: (putch('-') );
 11187  0E70  302D               	movlw	45
 11188  0E71  2E96               	goto	L17
 11189  0E72                     l468:	
 11190                           
 11191                           ;doprnt.c: 1396: else
 11192                           ;doprnt.c: 1399: if(flag & 0x01)
 11193  0E72  0021               	movlb	1	; select bank1
 11194  0E73  1C56               	btfss	printf@flag^(0+128),0
 11195  0E74  2E77               	goto	l3396
 11196                           
 11197                           ;doprnt.c: 1400: (putch(' ') );
 11198  0E75  3020               	movlw	32
 11199  0E76  2E96               	goto	L17
 11200  0E77                     l3396:	
 11201                           
 11202                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 11203  0E77  30C0               	movlw	192
 11204  0E78  0021               	movlb	1	; select bank1
 11205  0E79  0556               	andwf	printf@flag^(0+128),w
 11206  0E7A  0020               	movlb	0	; select bank0
 11207  0E7B  00E7               	movwf	??_printf
 11208  0E7C  3008               	movlw	8
 11209  0E7D  0021               	movlb	1	; select bank1
 11210  0E7E  0557               	andwf	(printf@flag+1)^(0+128),w
 11211  0E7F  0020               	movlb	0	; select bank0
 11212  0E80  00E8               	movwf	??_printf+1
 11213  0E81  3080               	movlw	128
 11214  0E82  0667               	xorwf	??_printf,w
 11215  0E83  3008               	movlw	8
 11216  0E84  1903               	skipnz
 11217  0E85  0668               	xorwf	??_printf+1,w
 11218  0E86  1D03               	btfss	3,2
 11219  0E87  2E99               	goto	l3408
 11220                           
 11221                           ;doprnt.c: 1404: (putch('0') );
 11222  0E88  3030               	movlw	48
 11223  0E89  319E  2618  318C   	fcall	_putch
 11224                           
 11225                           ;doprnt.c: 1406: (putch(flag & 0x20 ? 'X' : 'x') );
 11226  0E8C  0021               	movlb	1	; select bank1
 11227  0E8D  1AD6               	btfsc	printf@flag^(0+128),5
 11228  0E8E  2E91               	goto	l3404
 11229  0E8F  3078               	movlw	120
 11230  0E90  2E92               	goto	L8
 11231  0E91                     l3404:	
 11232  0E91  3058               	movlw	88
 11233  0E92                     L8:	
 11234  0E92  00B9               	movwf	_printf$794^(0+128)
 11235  0E93  3000               	movlw	0
 11236  0E94  00BA               	movwf	(_printf$794^(0+128)+1)
 11237  0E95  0839               	movf	_printf$794^(0+128),w
 11238  0E96                     L17:	
 11239  0E96  319E  2618  318C   	fcall	_putch
 11240  0E99                     l3408:	
 11241                           
 11242                           ;doprnt.c: 1412: }
 11243                           ;doprnt.c: 1415: if(width)
 11244  0E99  0021               	movlb	1	; select bank1
 11245  0E9A                     L18:	
 11246  0E9A  0853               	movf	printf@width^(0+128),w
 11247  0E9B  0454               	iorwf	(printf@width+1)^(0+128),w
 11248  0E9C  1903               	btfsc	3,2
 11249  0E9D  2FC5               	goto	l3464
 11250                           
 11251                           ;doprnt.c: 1417: (putch('0') );
 11252                           
 11253                           ;doprnt.c: 1416: do
 11254  0E9E  3030               	movlw	48
 11255  0E9F  319E  2618  318C   	fcall	_putch
 11256                           
 11257                           ;doprnt.c: 1418: while(--width);
 11258  0EA2  30FF               	movlw	255
 11259  0EA3  0021               	movlb	1	; select bank1
 11260  0EA4  07D3               	addwf	printf@width^(0+128),f
 11261  0EA5  30FF               	movlw	255
 11262  0EA6  3DD4               	addwfc	(printf@width+1)^(0+128),f
 11263  0EA7  2E9A               	goto	L18
 11264  0EA8                     l3414:	
 11265                           ;doprnt.c: 1420: } else
 11266                           
 11267                           
 11268                           ;doprnt.c: 1422: {
 11269                           ;doprnt.c: 1424: if(width
 11270                           ;doprnt.c: 1426: && !(flag & 0x08)
 11271                           ;doprnt.c: 1428: )
 11272  0EA8  0853               	movf	printf@width^(0+128),w
 11273  0EA9  0454               	iorwf	(printf@width+1)^(0+128),w
 11274  0EAA  1D03               	btfss	3,2
 11275  0EAB  19D6               	btfsc	printf@flag^(0+128),3
 11276  0EAC  2EBA               	goto	l3422
 11277  0EAD                     l3418:	
 11278                           ;doprnt.c: 1429: do
 11279                           
 11280                           
 11281                           ;doprnt.c: 1430: (putch(' ') );
 11282  0EAD  3020               	movlw	32
 11283  0EAE  319E  2618  318C   	fcall	_putch
 11284                           
 11285                           ;doprnt.c: 1431: while(--width);
 11286  0EB1  30FF               	movlw	255
 11287  0EB2  0021               	movlb	1	; select bank1
 11288  0EB3  07D3               	addwf	printf@width^(0+128),f
 11289  0EB4  30FF               	movlw	255
 11290  0EB5  3DD4               	addwfc	(printf@width+1)^(0+128),f
 11291  0EB6  0853               	movf	printf@width^(0+128),w
 11292  0EB7  0454               	iorwf	(printf@width+1)^(0+128),w
 11293  0EB8  1D03               	btfss	3,2
 11294  0EB9  2EAD               	goto	l3418
 11295  0EBA                     l3422:	
 11296                           
 11297                           ;doprnt.c: 1438: if(flag & 0x03)
 11298  0EBA  3003               	movlw	3
 11299  0EBB  0556               	andwf	printf@flag^(0+128),w
 11300  0EBC  0020               	movlb	0	; select bank0
 11301  0EBD  00E7               	movwf	??_printf
 11302  0EBE  3000               	movlw	0
 11303  0EBF  0021               	movlb	1	; select bank1
 11304  0EC0  0557               	andwf	(printf@flag+1)^(0+128),w
 11305  0EC1  0020               	movlb	0	; select bank0
 11306  0EC2  00E8               	movwf	??_printf+1
 11307  0EC3  0867               	movf	??_printf,w
 11308  0EC4  0468               	iorwf	??_printf+1,w
 11309  0EC5  1903               	btfsc	3,2
 11310  0EC6  2EC9               	goto	l484
 11311                           
 11312                           ;doprnt.c: 1439: (putch('-') );
 11313  0EC7  302D               	movlw	45
 11314  0EC8  2ECD               	goto	L19
 11315  0EC9                     l484:	
 11316                           
 11317                           ;doprnt.c: 1443: else if(flag & 0x01)
 11318  0EC9  0021               	movlb	1	; select bank1
 11319  0ECA  1C56               	btfss	printf@flag^(0+128),0
 11320  0ECB  2ED0               	goto	l3428
 11321                           
 11322                           ;doprnt.c: 1444: (putch(' ') );
 11323  0ECC  3020               	movlw	32
 11324  0ECD                     L19:	
 11325  0ECD  319E  2618  318C   	fcall	_putch
 11326  0ED0                     l3428:	
 11327                           
 11328                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 11329  0ED0  30C0               	movlw	192
 11330  0ED1  0021               	movlb	1	; select bank1
 11331  0ED2  0556               	andwf	printf@flag^(0+128),w
 11332  0ED3  0020               	movlb	0	; select bank0
 11333  0ED4  00E7               	movwf	??_printf
 11334  0ED5  3008               	movlw	8
 11335  0ED6  0021               	movlb	1	; select bank1
 11336  0ED7  0557               	andwf	(printf@flag+1)^(0+128),w
 11337  0ED8  0020               	movlb	0	; select bank0
 11338  0ED9  00E8               	movwf	??_printf+1
 11339  0EDA  3040               	movlw	64
 11340  0EDB  0667               	xorwf	??_printf,w
 11341  0EDC  3008               	movlw	8
 11342  0EDD  1903               	skipnz
 11343  0EDE  0668               	xorwf	??_printf+1,w
 11344  0EDF  1D03               	btfss	3,2
 11345  0EE0  2EE3               	goto	l3432
 11346                           
 11347                           ;doprnt.c: 1449: (putch('0') );
 11348  0EE1  3030               	movlw	48
 11349  0EE2  2FC2               	goto	L20
 11350  0EE3                     l3432:	
 11351                           
 11352                           ;doprnt.c: 1450: else
 11353                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 11354  0EE3  30C0               	movlw	192
 11355  0EE4  0021               	movlb	1	; select bank1
 11356  0EE5  0556               	andwf	printf@flag^(0+128),w
 11357  0EE6  0020               	movlb	0	; select bank0
 11358  0EE7  00E7               	movwf	??_printf
 11359  0EE8  3008               	movlw	8
 11360  0EE9  0021               	movlb	1	; select bank1
 11361  0EEA  0557               	andwf	(printf@flag+1)^(0+128),w
 11362  0EEB  0020               	movlb	0	; select bank0
 11363  0EEC  00E8               	movwf	??_printf+1
 11364  0EED  3080               	movlw	128
 11365  0EEE  0667               	xorwf	??_printf,w
 11366  0EEF  3008               	movlw	8
 11367  0EF0  1903               	skipnz
 11368  0EF1  0668               	xorwf	??_printf+1,w
 11369  0EF2  1D03               	btfss	3,2
 11370  0EF3  2FC5               	goto	l3464
 11371                           
 11372                           ;doprnt.c: 1458: (putch('0') );
 11373  0EF4  3030               	movlw	48
 11374  0EF5  319E  2618  318C   	fcall	_putch
 11375                           
 11376                           ;doprnt.c: 1460: (putch(flag & 0x20 ? 'X' : 'x') );
 11377  0EF8  0021               	movlb	1	; select bank1
 11378  0EF9  1AD6               	btfsc	printf@flag^(0+128),5
 11379  0EFA  2EFD               	goto	l3440
 11380  0EFB  3078               	movlw	120
 11381  0EFC  2EFE               	goto	L9
 11382  0EFD                     l3440:	
 11383  0EFD  3058               	movlw	88
 11384  0EFE                     L9:	
 11385  0EFE  00BB               	movwf	_printf$795^(0+128)
 11386  0EFF  3000               	movlw	0
 11387  0F00  00BC               	movwf	(_printf$795^(0+128)+1)
 11388  0F01  083B               	movf	_printf$795^(0+128),w
 11389  0F02  2FC2               	goto	L20
 11390  0F03                     l3444:	
 11391                           ;doprnt.c: 1478: {
 11392                           ;doprnt.c: 1483: case 0x00:
 11393                           
 11394                           ;doprnt.c: 1476: switch((unsigned char)(flag & (0xC0)))
 11395                           
 11396                           ;doprnt.c: 1466: }
 11397                           ;doprnt.c: 1469: }
 11398                           ;doprnt.c: 1474: while(prec--) {
 11399                           
 11400                           
 11401                           ;doprnt.c: 1486: case 0xC0:
 11402                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 11403  0F03  3000               	movlw	0
 11404  0F04  0020               	movlb	0	; select bank0
 11405  0F05  00B1               	movwf	___llmod@divisor+3
 11406  0F06  3000               	movlw	0
 11407  0F07  00B0               	movwf	___llmod@divisor+2
 11408  0F08  3000               	movlw	0
 11409  0F09  00AF               	movwf	___llmod@divisor+1
 11410  0F0A  300A               	movlw	10
 11411  0F0B  00AE               	movwf	___llmod@divisor
 11412  0F0C  0021               	movlb	1	; select bank1
 11413  0F0D  0852               	movf	(printf@prec+1)^(0+128),w
 11414  0F0E  0085               	movwf	5
 11415  0F0F  0851               	movf	printf@prec^(0+128),w
 11416  0F10  0084               	movwf	4
 11417  0F11  3584               	lslf	4,f
 11418  0F12  0D85               	rlf	5,f
 11419  0F13  3584               	lslf	4,f
 11420  0F14  0D85               	rlf	5,f
 11421  0F15  3030               	movlw	low (_dpowers| (0+32768))
 11422  0F16  0784               	addwf	4,f
 11423  0F17  3090               	movlw	high (_dpowers| (0+32768))
 11424  0F18  3D85               	addwfc	5,f
 11425  0F19  3F00               	moviw [0]fsr0
 11426  0F1A  0020               	movlb	0	; select bank0
 11427  0F1B  00A0               	movwf	___lldiv@divisor
 11428  0F1C  3F01               	moviw [1]fsr0
 11429  0F1D  00A1               	movwf	___lldiv@divisor+1
 11430  0F1E  3F02               	moviw [2]fsr0
 11431  0F1F  00A2               	movwf	___lldiv@divisor+2
 11432  0F20  3F03               	moviw [3]fsr0
 11433  0F21  00A3               	movwf	___lldiv@divisor+3
 11434  0F22  0021               	movlb	1	; select bank1
 11435  0F23  0850               	movf	(printf@val+3)^(0+128),w
 11436  0F24  0020               	movlb	0	; select bank0
 11437  0F25  00A7               	movwf	___lldiv@dividend+3
 11438  0F26  0021               	movlb	1	; select bank1
 11439  0F27  084F               	movf	(printf@val+2)^(0+128),w
 11440  0F28  0020               	movlb	0	; select bank0
 11441  0F29  00A6               	movwf	___lldiv@dividend+2
 11442  0F2A  0021               	movlb	1	; select bank1
 11443  0F2B  084E               	movf	(printf@val+1)^(0+128),w
 11444  0F2C  0020               	movlb	0	; select bank0
 11445  0F2D  00A5               	movwf	___lldiv@dividend+1
 11446  0F2E  0021               	movlb	1	; select bank1
 11447  0F2F  084D               	movf	printf@val^(0+128),w
 11448  0F30  0020               	movlb	0	; select bank0
 11449  0F31  00A4               	movwf	___lldiv@dividend
 11450  0F32  3187  27A9  318C   	fcall	___lldiv
 11451  0F35  0020               	movlb	0	; select bank0
 11452  0F36  0823               	movf	?___lldiv+3,w
 11453  0F37  00B5               	movwf	___llmod@dividend+3
 11454  0F38  0822               	movf	?___lldiv+2,w
 11455  0F39  00B4               	movwf	___llmod@dividend+2
 11456  0F3A  0821               	movf	?___lldiv+1,w
 11457  0F3B  00B3               	movwf	___llmod@dividend+1
 11458  0F3C  0820               	movf	?___lldiv,w
 11459  0F3D  00B2               	movwf	___llmod@dividend
 11460  0F3E  3192  2221  318C   	fcall	___llmod
 11461  0F41  0020               	movlb	0	; select bank0
 11462  0F42  082E               	movf	?___llmod,w
 11463  0F43  2FBC               	goto	L22
 11464  0F44                     l3446:	
 11465                           ;doprnt.c: 1497: case 0x80:
 11466                           
 11467                           ;doprnt.c: 1491: break;
 11468                           
 11469                           
 11470                           ;doprnt.c: 1499: {
 11471                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 11472  0F44  0852               	movf	(printf@prec+1)^(0+128),w
 11473  0F45  0085               	movwf	5
 11474  0F46  0851               	movf	printf@prec^(0+128),w
 11475  0F47  0084               	movwf	4
 11476  0F48  3584               	lslf	4,f
 11477  0F49  0D85               	rlf	5,f
 11478  0F4A  3584               	lslf	4,f
 11479  0F4B  0D85               	rlf	5,f
 11480  0F4C  30A6               	movlw	low (_hexpowers| (0+32768))
 11481  0F4D  0784               	addwf	4,f
 11482  0F4E  3090               	movlw	high (_hexpowers| (0+32768))
 11483  0F4F  3D85               	addwfc	5,f
 11484  0F50  3F00               	moviw [0]fsr0
 11485  0F51  0020               	movlb	0	; select bank0
 11486  0F52  00A0               	movwf	___lldiv@divisor
 11487  0F53  3F01               	moviw [1]fsr0
 11488  0F54  00A1               	movwf	___lldiv@divisor+1
 11489  0F55  3F02               	moviw [2]fsr0
 11490  0F56  00A2               	movwf	___lldiv@divisor+2
 11491  0F57  3F03               	moviw [3]fsr0
 11492  0F58  00A3               	movwf	___lldiv@divisor+3
 11493  0F59  0021               	movlb	1	; select bank1
 11494  0F5A  0850               	movf	(printf@val+3)^(0+128),w
 11495  0F5B  0020               	movlb	0	; select bank0
 11496  0F5C  00A7               	movwf	___lldiv@dividend+3
 11497  0F5D  0021               	movlb	1	; select bank1
 11498  0F5E  084F               	movf	(printf@val+2)^(0+128),w
 11499  0F5F  0020               	movlb	0	; select bank0
 11500  0F60  00A6               	movwf	___lldiv@dividend+2
 11501  0F61  0021               	movlb	1	; select bank1
 11502  0F62  084E               	movf	(printf@val+1)^(0+128),w
 11503  0F63  0020               	movlb	0	; select bank0
 11504  0F64  00A5               	movwf	___lldiv@dividend+1
 11505  0F65  0021               	movlb	1	; select bank1
 11506  0F66  084D               	movf	printf@val^(0+128),w
 11507  0F67  0020               	movlb	0	; select bank0
 11508  0F68  00A4               	movwf	___lldiv@dividend
 11509  0F69  3187  27A9  318C   	fcall	___lldiv
 11510  0F6C  0020               	movlb	0	; select bank0
 11511  0F6D  0820               	movf	?___lldiv,w
 11512  0F6E  390F               	andlw	15
 11513  0F6F  00E7               	movwf	??_printf
 11514  0F70  0867               	movf	??_printf,w
 11515  0F71  0021               	movlb	1	; select bank1
 11516  0F72  00BF               	movwf	printf@idx^(0+128)
 11517                           
 11518                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 11519  0F73  1AD6               	btfsc	printf@flag^(0+128),5
 11520  0F74  2F79               	goto	l3452
 11521  0F75  3037               	movlw	low (STR_8| (0+32768))
 11522  0F76  00BD               	movwf	_printf$801^(0+128)
 11523  0F77  3091               	movlw	high (STR_8| (0+32768))
 11524  0F78  2F7C               	goto	L11
 11525  0F79                     l3452:	
 11526  0F79  3026               	movlw	low (STR_7| (0+32768))
 11527  0F7A  00BD               	movwf	_printf$801^(0+128)
 11528  0F7B  3091               	movlw	high (STR_7| (0+32768))
 11529  0F7C                     L11:	
 11530  0F7C  00BE               	movwf	(_printf$801^(0+128)+1)
 11531  0F7D  083E               	movf	(_printf$801+1)^(0+128),w
 11532  0F7E  0020               	movlb	0	; select bank0
 11533  0F7F  00E8               	movwf	??_printf+1
 11534  0F80  0021               	movlb	1	; select bank1
 11535  0F81  083D               	movf	_printf$801^(0+128),w
 11536  0F82  0020               	movlb	0	; select bank0
 11537  0F83  00E7               	movwf	??_printf
 11538  0F84  0021               	movlb	1	; select bank1
 11539  0F85  083F               	movf	printf@idx^(0+128),w
 11540  0F86  0020               	movlb	0	; select bank0
 11541  0F87  0767               	addwf	??_printf,w
 11542  0F88  0084               	movwf	4
 11543  0F89  0868               	movf	??_printf+1,w
 11544  0F8A  1803               	skipnc
 11545  0F8B  0A68               	incf	??_printf+1,w
 11546  0F8C  0085               	movwf	5
 11547  0F8D  0800               	movf	0,w	;code access
 11548  0F8E  00E9               	movwf	??_printf+2
 11549  0F8F  0869               	movf	??_printf+2,w
 11550  0F90  2FBF               	goto	L12
 11551  0F91                     l3456:	
 11552                           ;doprnt.c: 1516: case 0x40:
 11553                           
 11554                           ;doprnt.c: 1508: }
 11555                           ;doprnt.c: 1510: break;
 11556                           
 11557                           
 11558                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
 11559  0F91  0852               	movf	(printf@prec+1)^(0+128),w
 11560  0F92  0085               	movwf	5
 11561  0F93  0851               	movf	printf@prec^(0+128),w
 11562  0F94  0084               	movwf	4
 11563  0F95  3584               	lslf	4,f
 11564  0F96  0D85               	rlf	5,f
 11565  0F97  3584               	lslf	4,f
 11566  0F98  0D85               	rlf	5,f
 11567  0F99  3000               	movlw	low (_octpowers| (0+32768))
 11568  0F9A  0784               	addwf	4,f
 11569  0F9B  3090               	movlw	high (_octpowers| (0+32768))
 11570  0F9C  3D85               	addwfc	5,f
 11571  0F9D  3F00               	moviw [0]fsr0
 11572  0F9E  0020               	movlb	0	; select bank0
 11573  0F9F  00A0               	movwf	___lldiv@divisor
 11574  0FA0  3F01               	moviw [1]fsr0
 11575  0FA1  00A1               	movwf	___lldiv@divisor+1
 11576  0FA2  3F02               	moviw [2]fsr0
 11577  0FA3  00A2               	movwf	___lldiv@divisor+2
 11578  0FA4  3F03               	moviw [3]fsr0
 11579  0FA5  00A3               	movwf	___lldiv@divisor+3
 11580  0FA6  0021               	movlb	1	; select bank1
 11581  0FA7  0850               	movf	(printf@val+3)^(0+128),w
 11582  0FA8  0020               	movlb	0	; select bank0
 11583  0FA9  00A7               	movwf	___lldiv@dividend+3
 11584  0FAA  0021               	movlb	1	; select bank1
 11585  0FAB  084F               	movf	(printf@val+2)^(0+128),w
 11586  0FAC  0020               	movlb	0	; select bank0
 11587  0FAD  00A6               	movwf	___lldiv@dividend+2
 11588  0FAE  0021               	movlb	1	; select bank1
 11589  0FAF  084E               	movf	(printf@val+1)^(0+128),w
 11590  0FB0  0020               	movlb	0	; select bank0
 11591  0FB1  00A5               	movwf	___lldiv@dividend+1
 11592  0FB2  0021               	movlb	1	; select bank1
 11593  0FB3  084D               	movf	printf@val^(0+128),w
 11594  0FB4  0020               	movlb	0	; select bank0
 11595  0FB5  00A4               	movwf	___lldiv@dividend
 11596  0FB6  3187  27A9  318C   	fcall	___lldiv
 11597  0FB9  0020               	movlb	0	; select bank0
 11598  0FBA  0820               	movf	?___lldiv,w
 11599  0FBB  3907               	andlw	7
 11600  0FBC                     L22:	
 11601  0FBC  3E30               	addlw	48
 11602  0FBD  00E7               	movwf	??_printf
 11603  0FBE  0867               	movf	??_printf,w
 11604  0FBF                     L12:	
 11605  0FBF  0021               	movlb	1	; select bank1
 11606  0FC0  00D5               	movwf	printf@c^(0+128)
 11607  0FC1                     l3462:	
 11608                           ;doprnt.c: 1523: }
 11609                           
 11610                           ;doprnt.c: 1520: break;
 11611                           
 11612                           
 11613                           ;doprnt.c: 1524: (putch(c) );
 11614  0FC1  0855               	movf	printf@c^(0+128),w
 11615  0FC2                     L20:	
 11616  0FC2  319E  2618  318C   	fcall	_putch
 11617  0FC5                     l3464:	
 11618  0FC5  30FF               	movlw	255
 11619  0FC6  0021               	movlb	1	; select bank1
 11620  0FC7  07D1               	addwf	printf@prec^(0+128),f
 11621  0FC8  30FF               	movlw	255
 11622  0FC9  3DD2               	addwfc	(printf@prec+1)^(0+128),f
 11623  0FCA  0A51               	incf	printf@prec^(0+128),w
 11624  0FCB  1903               	btfsc	3,2
 11625  0FCC  0A52               	incf	(printf@prec+1)^(0+128),w
 11626  0FCD  1903               	btfsc	3,2
 11627  0FCE  2FE0               	goto	l506
 11628  0FCF  0021               	movlb	1	; select bank1
 11629  0FD0  0856               	movf	printf@flag^(0+128),w
 11630  0FD1  39C0               	andlw	192
 11631                           
 11632                           ; Switch size 1, requested type "space"
 11633                           ; Number of cases is 4, Range of values is 0 to 192
 11634                           ; switch strategies available:
 11635                           ; Name         Instructions Cycles
 11636                           ; simple_byte           13     7 (average)
 11637                           ; jumptable            260     6 (fixed)
 11638                           ;	Chosen strategy is simple_byte
 11639  0FD2  3A00               	xorlw	0	; case 0
 11640  0FD3  1903               	skipnz
 11641  0FD4  2F03               	goto	l3444
 11642  0FD5  3A40               	xorlw	64	; case 64
 11643  0FD6  1903               	skipnz
 11644  0FD7  2F91               	goto	l3456
 11645  0FD8  3AC0               	xorlw	192	; case 128
 11646  0FD9  1903               	skipnz
 11647  0FDA  2F44               	goto	l3446
 11648  0FDB  3A40               	xorlw	64	; case 192
 11649  0FDC  1903               	skipnz
 11650  0FDD  2F03               	goto	l3444
 11651  0FDE  2FC1               	goto	l3462
 11652  0FDF  2FC1               	goto	l3462
 11653  0FE0                     l506:	
 11654                           
 11655                           ;doprnt.c: 1525: }
 11656                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
 11657  0FE0  1DD6               	btfss	printf@flag^(0+128),3
 11658  0FE1  2FFE               	goto	L31
 11659  0FE2  0854               	movf	(printf@width+1)^(0+128),w
 11660  0FE3  3A80               	xorlw	128
 11661  0FE4  0020               	movlb	0	; select bank0
 11662  0FE5  00E7               	movwf	??_printf
 11663  0FE6  3080               	movlw	128
 11664  0FE7  0267               	subwf	??_printf,w
 11665  0FE8  1D03               	skipz
 11666  0FE9  2FED               	goto	u5035
 11667  0FEA  3001               	movlw	1
 11668  0FEB  0021               	movlb	1	; select bank1
 11669  0FEC  0253               	subwf	printf@width^(0+128),w
 11670  0FED                     u5035:	
 11671  0FED  1C03               	skipc
 11672  0FEE  2FFE               	goto	L31
 11673  0FEF                     l3468:	
 11674                           ;doprnt.c: 1529: do
 11675                           
 11676                           
 11677                           ;doprnt.c: 1530: (putch(' ') );
 11678  0FEF  3020               	movlw	32
 11679  0FF0  319E  2618  318C   	fcall	_putch
 11680                           
 11681                           ;doprnt.c: 1531: while(--width);
 11682  0FF3  30FF               	movlw	255
 11683  0FF4  0021               	movlb	1	; select bank1
 11684  0FF5  07D3               	addwf	printf@width^(0+128),f
 11685  0FF6  30FF               	movlw	255
 11686  0FF7  3DD4               	addwfc	(printf@width+1)^(0+128),f
 11687  0FF8  0853               	movf	printf@width^(0+128),w
 11688  0FF9  0454               	iorwf	(printf@width+1)^(0+128),w
 11689  0FFA  1903               	btfsc	3,2
 11690  0FFB  2FFE               	goto	L31
 11691  0FFC  2FEF               	goto	l3468
 11692  0FFD                     l511:	
 11693                           ;doprnt.c: 1540: return 0;
 11694                           ;	Return value of _printf is never used
 11695                           
 11696                           ;doprnt.c: 1533: }
 11697                           ;doprnt.c: 1535: alldone:
 11698                           
 11699  0FFD  0008               	return
 11700  0FFE                     L31:	
 11701  0FFE                     __end_of_printf:	
 11702  0FFE  3180  2899         	ljmp	L27


Data Sizes:
    Strings     144
    Constant    198
    Data        1
    BSS         77
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     60      78
    BANK2            80      0      60
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 

    memset@p	PTR unsigned char  size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 

    printf$801	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_8(CODE[17]), STR_7(CODE[17]), 

    printf@cp	PTR const unsigned char  size(1) Largest target is 1
		 -> printf@c(BANK1[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_6(CODE[22]), STR_5(CODE[19]), STR_4(CODE[19]), STR_3(CODE[22]), 
		 -> STR_2(CODE[33]), STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK1[2]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 

    sp__memset	PTR void  size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(1) Largest target is 26
		 -> output_buffer(BANK2[26]), input_buffer(BANK2[26]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->i1_UART_buff_get
    i1_UART_buff_get->i1_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i1_UART_buff_put
    i1_UART_buff_put->i1_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset
    _SR_FRSStart->_SetVOX
    _SR_FRSStart->_SetVolume
    _SetVolume->_printf
    _SetVOX->_printf
    _SetPowerSave->_printf
    _SetMIC->_printf
    _SetFrequency->_printf
    _SetCommandMode->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_Send_put
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _UART_buff_get->_UART_buff_modulo_inc
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _SR_FRSStart->_SetMIC
    _SetVolume->_printf
    _SetVOX->_printf
    _SetPowerSave->_printf
    _SetMIC->_printf
    _SetFrequency->_printf
    _SetCommandMode->_printf

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  251264
                     _RadioOperation
                        _SR_FRSStart
                              _Start
 ---------------------------------------------------------------------------------
 (1) _Start                                                0     0      0     305
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     305
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       1     1      0     305
                                              7 BANK0      1     1      0
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               7     3      4     229
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _SR_FRSStart                                          0     0      0  250959
                              _Delay
                     _SetCommandMode
                       _SetFrequency
                             _SetMIC
                       _SetPowerSave
                             _SetVOX
                          _SetVolume
 ---------------------------------------------------------------------------------
 (2) _SetVolume                                            3     3      0   41790
                                             77 BANK0      3     3      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _SetVOX                                               3     1      2   41843
                                             77 BANK0      3     1      2
                             _printf
 ---------------------------------------------------------------------------------
 (2) _SetPowerSave                                         0     0      0   41724
                             _printf
 ---------------------------------------------------------------------------------
 (2) _SetMIC                                               6     5      1   41843
                                             77 BANK0      2     1      1
                                             56 BANK1      4     4      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _SetFrequency                                         0     0      0   41724
                             _printf
 ---------------------------------------------------------------------------------
 (2) _SetCommandMode                                       0     0      0   41724
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              63    45     18   41724
                                             71 BANK0      6     6      0
                                              0 BANK1     56    38     18
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               12     9      3    8895
                                             38 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0    1751
                                             13 BANK0      1     1      0
                           _Send_put
 ---------------------------------------------------------------------------------
 (5) _Send_put                                             2     2      0    1729
                                             11 BANK0      2     2      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (6) _UART_buff_put                                        5     4      1     956
                                              6 BANK0      5     4      1
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (6) _UART_buff_get                                        5     5      0     751
                                              6 BANK0      5     5      0
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (7) _UART_buff_modulo_inc                                 6     2      4     514
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _fround                                              17    14      3    8697
                                             38 BANK0     14    11      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    2318
                                             16 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             16    10      6    3478
                                             22 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              7     3      4    1250
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              9     5      4    1360
                                              7 BANK0      9     5      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         16    10      6     409
                                              0 BANK0     16    10      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          20    14      6     552
                                              0 BANK0     20    14      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             6     2      4    1790
                                              8 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                             10     2      8     583
                                             14 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     692
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             14    10      4     411
                                             47 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    2893
                                             65 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             13     7      6    2720
                                             52 BANK0     13     7      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    1668
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3      98
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     560
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) _Delay                                                5     3      2     311
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _RadioOperation                                       1     1      0       0
                                              0 BANK0      1     1      0
                         _SR_FRSTalk
 ---------------------------------------------------------------------------------
 (2) _SR_FRSTalk                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           1     1      0    1185
                                             13 COMMON     1     1      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR2_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 1     1      0     530
                                             11 COMMON     1     1      0
                     _UART_buff_size
                    i1_UART_buff_get
 ---------------------------------------------------------------------------------
 (10) i1_UART_buff_get                                     5     5      0     454
                                              6 COMMON     5     5      0
             i1_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) _UART_buff_size                                      4     1      3      76
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  2     2      0     655
                                             11 COMMON     2     2      0
                    i1_UART_buff_put
 ---------------------------------------------------------------------------------
 (10) i1_UART_buff_put                                     5     4      1     632
                                              6 COMMON     5     4      1
             i1_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (11) i1_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _RadioOperation
     _SR_FRSTalk
   _SR_FRSStart
     _Delay
     _SetCommandMode
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _Send_put
             _UART_buff_get
               _UART_buff_modulo_inc
             _UART_buff_put
               _UART_buff_modulo_inc
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _SetFrequency
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _Send_put
             _UART_buff_get
               _UART_buff_modulo_inc
             _UART_buff_put
               _UART_buff_modulo_inc
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _SetMIC
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _Send_put
             _UART_buff_get
               _UART_buff_modulo_inc
             _UART_buff_put
               _UART_buff_modulo_inc
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _SetPowerSave
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _Send_put
             _UART_buff_get
               _UART_buff_modulo_inc
             _UART_buff_put
               _UART_buff_modulo_inc
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _SetVOX
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _Send_put
             _UART_buff_get
               _UART_buff_modulo_inc
             _UART_buff_put
               _UART_buff_modulo_inc
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _SetVolume
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _Send_put
             _UART_buff_get
               _UART_buff_modulo_inc
             _UART_buff_put
               _UART_buff_modulo_inc
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _Start
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _INTERRUPT_Initialize
     _TMR2_Initialize
       _TMR2_StartTimer

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     i1_UART_buff_put
       i1_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     _UART_buff_size
     i1_UART_buff_get
       i1_UART_buff_modulo_inc
   _TMR2_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     3C      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      3C       9       75.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      E8      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      E8      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Thu Aug 04 00:15:58 2016

           _eusart1TxBufferRemaining 00EA                                   l62 1F46  
                       ___awdiv@sign 002D                  ___wmul@multiplicand 0032  
               i1UART_buff_get@_this 007A                         ___ftadd@exp1 0060  
                       ___ftadd@exp2 005F                         ___ftadd@sign 005E  
                                l320 0861                                  l321 0863  
                                l323 087A                                  l340 0047  
                                l317 085D                                  l406 042C  
                                l342 0049                                  l511 0FFD  
                                l319 085F                                  l345 004B  
                                l506 0FE0                                  l346 004C  
                                l444 0D09                                  l348 005E  
                                l453 0DC6                                  l439 0CCF  
                                l391 03FA                                  l448 0D43  
                                l368 0224                                  l804 17A9  
                                l484 0EC9                                  l468 0E72  
                                l830 1685                                  l840 16FE  
                                l761 0A56                                  l595 1F14  
                                l780 13E0                                  l781 13E8  
                                l773 13CD                                  l881 146C  
                         _SR_FRSTalk 0003                                  _PR2 001B  
            __end_ofi1_UART_buff_get 12F7              __end_ofi1_UART_buff_put 1510  
                       ___awmod@sign 0026                      _TMR2_Initialize 1E60  
                                wreg 0009                                 l3100 00CA  
                               l3012 0880                                 l3004 0864  
                               l3102 00FA                                 l2400 1344  
                               l3032 08E1                                 l3016 088D  
                               l3024 08C7                                 l3008 0868  
                               l2410 13A3                                 l2402 1346  
                               l3210 03DB                                 l3108 010E  
                               l3052 090C                                 l2414 13AA  
                               l2502 1395                                 l3222 03FD  
                               l3206 03D3                                 l3142 0208  
                               l3134 01B6                                 l3118 0152  
                               l3046 090A                                 l3054 0042  
                               l2424 13D2                                 l2416 13B4  
                               l2600 17CD                                 l3304 0CA8  
                               l3160 02A9                                 l3072 0070  
                               l3080 008D                                 l2426 13DA  
                               l2418 13B9                                 l2610 17E8  
                               l2514 126F                                 l2450 1F0E  
                               l3234 0426                                 l3226 0406  
                               l3218 03E2                                 l3170 02EF  
                               l3074 0074                                 l3066 006B  
                               l3058 004E                                 l2540 12A5  
                               l2532 1294                                 l2620 15B7  
                               l3404 0E91                                 l3308 0CC0  
                               l3252 04AE                                 l3228 0413  
                               l3180 034A                                 l3156 0290  
                               l3148 0259                                 l3092 00BA  
                               l3084 009B                                 l3076 0080  
                               l3068 006D                                 l2550 1732  
                               l2470 1353                                 l2526 127C  
                               l2518 1276                                 l2374 1EBF  
                               l3422 0EBA                                 l3414 0EA8  
                               l3246 0433                                 l3174 0344  
                               l3086 009F                                 l2560 1748  
                               l2528 1288                                 l2536 129D  
                               l3440 0EFD                                 l3432 0EE3  
                               l3408 0E99                                 l3360 0DDD  
                               l3352 0DAA                                 l3280 05D9  
                               l3264 04E4                                 l3248 04A5  
                               l3192 03A8                                 l3096 00C5  
                               l3088 00AB                                 l2554 1739  
                               l2650 1624                                 l2642 1610  
                               l2626 15CD                                 l2386 155B  
                               l2714 0B6B                                 l3418 0EAD  
                               l3346 0D7D                                 l3266 04E8  
                               l3258 04CB                                 l3194 03AC  
                               l3186 0381                                 l2580 177F  
                               l2572 1762                                 l2812 0980  
                               l2476 135E                                 l2732 0C8B  
                               l2708 0B0C                                 l3452 0F79  
                               l3444 0F03                                 l3428 0ED0  
                               l3380 0E35                                 l3348 0D8C  
                               l3284 05E2                                 l3292 0603  
                               l2590 179B                                 l2582 1784  
                               l2830 0A13                                 l2822 09CB  
                               l2806 0963                                 l2494 1384  
                               l2486 1366                                 l2654 162C  
                               l2638 1608                                 l2726 0C2C  
                               l2718 0B88                                 l3446 0F44  
                               l3462 0FC1                                 l3382 0E38  
                               l3374 0E10                                 l3366 0DF6  
                               l3198 03BE                                 l2670 1F2D  
                               l3616 118D                                 l3608 1182  
                               l2592 17A5                                 l2584 1788  
                               l2840 0A32                                 l2488 1372  
                               l2744 1E86                                 l3456 0F91  
                               l3464 0FC5                                 l3368 0DF9  
                               l3288 05F5                                 l3472 0835  
                               l2578 1775                                 l2922 1463  
                               l2914 1448                                 l2850 0A59  
                               l2842 0A40                                 l2754 166D  
                               l2498 138D                                 l3386 0E5E  
                               l2596 17BB                                 l2924 146F  
                               l2916 1456                                 l2940 07C8  
                               l2692 077C                                 l2684 0704  
                               l3468 0FEF                                 l3396 0E77  
                               l3388 0E61                                 l2862 11D0  
                               l2928 147D                                 l2952 07F3  
                               l2848 0A4D                                 l2776 16C0  
                               l2768 16A6                                 l3648 1E45  
                               l2858 11BA                                 l2938 07BA  
                               l2962 122A                                 l2794 16F5  
                               l2786 16DA                                 l2948 07E8  
                               l2964 1238                                 l2972 125B  
                               l2980 080A                                 l2796 1701  
                               l2788 16E8                                 l2886 1F85  
                               l2982 081A                                 l2896 1418  
                               l2968 1250                                 l2996 0857  
                               STR_1 1148                                 STR_2 10C6  
                               STR_3 10FD                                 STR_4 1113  
                               STR_5 1113                                 STR_6 10E7  
                               STR_7 1126                                 STR_8 1137  
                               u3015 128E                                 u3025 1295  
                               u3205 1789                                 u4005 1246  
                               u4015 1251                                 u3145 1763  
                               u3305 15D9                                 u3235 179C  
                               u4035 080F                                 u3315 15E9  
                               u3175 1776                                 u3335 1611  
                               u3345 1617                                 u4305 0265  
                               u4145 0058                                 u2715 13AF  
                               u5035 0FED                                 u4155 0064  
                       printf@tmpval 00C4                                 u3525 16A7  
                               u2735 13C8                                 u3615 16F6  
                               u3535 16B7                                 u3375 162D  
                               u4335 028E                                 u4255 0167  
                               u3705 0A33                                 u3545 16C1  
                               u3385 1633                                 u2665 1EBB  
                               u5075 1F50                                 u2755 13D5  
                               u2915 1373                                 u2835 1F15  
                               u2675 1524                                 u2925 137D  
                               u2845 1F1A                                 u2685 130B  
                               u4525 04B9                                 u4365 0375  
                               u5175 1199                                 u3815 141F  
                               u3735 0A4E                                 u3655 09CC  
                               u2935 1385                                 u4535 04C7  
                               u4455 03EE                                 u4295 0230  
                               u3665 09F6                                 u3585 16DB  
                               u5267 1F55                                 u2795 13EF  
                               u3915 07BD                                 u4475 0411  
                               u3845 1449                                 u4725 0D74  
                               u3935 07C9                                 u2895 1369  
                               u3945 07DD                                 u4745 0DA0  
                               u4665 0D00                                 i1l75 0023  
                               u3875 1464                                 u3955 07E9  
                               u2995 127F                                 u4835 0E2D  
                               u4755 0DBE                                 u4595 05F3  
                               u4845 0E4D                                 u4695 0D3A  
                               u3985 122D                                 u4795 0DEE  
                               _TMR2 001A                          _SR_FRSStart 11DF  
                               _main 1E3F                         ___ftpack@arg 0020  
                       ___ftpack@exp 0023                                 fsr0h 0005  
                               fsr1h 0007                                 fsr0l 0004  
                               indf0 0000                                 indf1 0001  
                               fsr1l 0006                                 btemp 007E  
                               ltemp 007E                                 start 0028  
                               ttemp 007E                                 wtemp 007E  
                       ___ftmul@cntr 0044                         ___ftmul@sign 0045  
                       ___fttol@exp1 005C                         ___fttol@lval 0058  
                              ?_main 0070                      __end_of___awdiv 139A  
                    __end_of___ftadd 1800                      __end_of___awmod 12AA  
                    __end_of___ftneg 1E35                      __end_of___lldiv 07FC  
                    __end_of___ftmul 1654                      ___awdiv@divisor 0027  
                    __end_of___llmod 1264                      __end_of___ftsub 1F9B  
                    __end_of___fttol 1486                                _T2CON 001C  
                              i1l201 1F06                     ??_SetCommandMode 006D  
               i1UART_buff_put@_this 007A                      ___awdiv@counter 002C  
                              _RCREG 0199                                _RCSTA 019D  
                              _SPBRG 019B                                _TXREG 019A  
                              _TXSTA 019E                                _Delay 1F43  
                       ___lltoft@exp 002D                 _EUSART1_Transmit_ISR 1EF1  
            __size_of_RadioOperation 002A                     __end_of_TMR2_ISR 0805  
                              _Start 1FB9             ??i1_UART_buff_modulo_inc 0074  
                    __end_of_dpowers 1058                                _count 00E4  
                              _scale 0A62                      __end_of_isdigit 1E88  
                      ___ftpack@sign 0024                                _putch 1E18  
                              ltemp0 007E                                ltemp1 0082  
                              ltemp2 0086                                ltemp3 0080  
                              ttemp0 007E                                ttemp1 0081  
                              ttemp2 0084                                ttemp3 0087  
                              ttemp4 007F                                status 0003  
                              wtemp0 007E                                wtemp1 0080  
                              wtemp2 0082                                wtemp3 0084  
                              wtemp4 0086                                wtemp5 0088  
                              wtemp6 007F                      _TMR2_StartTimer 07FC  
                    __initialization 002A           __end_of_EUSART1_Initialize 1EDA  
                       __end_of_main 1E49                          SetMIC@scram 006D  
     i1UART_buff_modulo_inc@my_value 0074              __end_of_TMR2_Initialize 1E6C  
        ?_INTERRUPT_InterruptManager 0070                               ??_main 0070  
                      ___fttol@sign1 0057                          ?_SR_FRSTalk 0070  
                   __end_of_Send_put 1EF1                     ?i1_UART_buff_get 0070  
               __size_of__tdiv_to_l_ 00B6                     ?i1_UART_buff_put 0076  
                             ?_Delay 0020                ?_EUSART1_Transmit_ISR 0070  
                             ?_Start 0070                     ___llmod@dividend 0032  
                             ?_scale 0046                     ___awdiv@dividend 0029  
                             ?_putch 0070                     __end_of___ftpack 13FF  
                   __end_of___lltoft 082F                               i1l3480 1EA9  
                             i1l3560 14CE                               i1l3628 1E8D  
                             i1l3574 12F4                               i1l3662 001B  
                             i1l3576 12F5                               i1l3656 0012  
                             Delay@x 0023          UART_buff_modulo_inc@modulus 0022  
                             _INTCON 000B                               u513_25 1499  
                             u506_25 1EA5                               u514_25 12BD  
                             u519_25 1EFE                               _SetMIC 1156  
                             _SetVOX 1F9B                     __end_of__powers_ 10A6  
                             ___ftge 11A3                        _output_buffer 0142  
                             ___wmul 1F0B                            ??___awdiv 002B  
                          ??___ftadd 005A                            ??___awmod 0024  
                          ??___ftneg 0023                            ??___lldiv 0028  
                          ??___ftmul 003C                            ??___llmod 0036  
                          ??___ftsub 0067                            ??___fttol 0053  
                             _memset 1F27                               _fround 0643  
                 __size_of_SetVolume 001D                     ___awdiv@quotient 002E  
                    ___awmod@divisor 0020                      ___awmod@counter 0025  
                             _printf 082F                ___ftmul@f3_as_product 0041  
                          ??_isdigit 0020                        ?_SetFrequency 0070  
                      Send_put@_data 002C         __end_of_UART_buff_modulo_inc 1EC4  
            __end_of_TMR2_StartTimer 07FF      __size_ofi1_UART_buff_modulo_inc 0015  
                    _eusart1RxBuffer 0120        __size_of_INTERRUPT_Initialize 000A  
                    _eusart1TxBuffer 00DC              __end_of__initialization 003E  
                         ___ftadd@f1 0054                           ___ftadd@f2 0057  
                         ___ftge@ff1 0020                           ___ftge@ff2 0023  
                __size_of_SR_FRSTalk 0001                           ___ftneg@f1 0020  
                      __end_of_Delay 1F60                           ___ftmul@f1 0036  
                         ___ftmul@f2 0039                           ___ftsub@f1 0064  
                         ___ftsub@f2 0061                           ___fttol@f1 004F  
                     __pcstackCOMMON 0070                        __end_of_Start 1FDA  
                       __pidataBANK1 07FF                        ?_SetPowerSave 0070  
                          ?_TMR2_ISR 0070                           ___lltoft@c 0028  
                      __end_of_scale 0CA8                        __end_of_putch 1E1E  
                   ?_TMR2_Initialize 0070                      SetVolume@volume 006F  
                 UART_buff_get@_this 002A                __end_of_UART_buff_get 1348  
             ??_EUSART1_Transmit_ISR 007B                __end_of_UART_buff_put 15A0  
                     ??_SetFrequency 006D                           __div_to_l_ 0945  
                       SetMIC@volume 006E                              ??_Delay 0022  
                     _RadioOperation 1179          __end_of_EUSART1_Receive_ISR 1E99  
                            ??_Start 0028                      __div_to_l_@exp1 0033  
                    __div_to_l_@cntr 0032                              ??_scale 0049  
                    __div_to_l_@quot 002E                              ??_putch 002D  
                      _eusart1RxHead 00E8                        _eusart1TxHead 00EB  
                      _eusart1RxTail 00E9                           __pbssBANK1 00DC  
                         __pbssBANK2 0120                        _eusart1TxTail 00EC  
                       ?_SR_FRSStart 0070                    __end_of_SetVolume 1F7D  
            __size_of_UART_buff_init 000D              __size_of_UART_buff_size 000B  
                      __div_to_l_@f1 0020                        __div_to_l_@f2 0023  
                          ?_Send_put 0070                              ?_SetMIC 006D  
                            ?_SetVOX 006D                           __pmaintext 1E3F  
                     ??_SetPowerSave 006D               i1_UART_buff_modulo_inc 1E99  
                            ?___ftge 0020                              ?___wmul 0030  
                         ??_TMR2_ISR 0070                           __pintentry 0004  
                            ?_memset 0020                              ?_fround 0046  
                          ?___ftpack 0020                              ?_printf 00A0  
                          ?___lltoft 0028               __end_of_RadioOperation 11A3  
                 UART_buff_put@_this 002A         UART_buff_modulo_inc@my_value 0024  
                   ?_TMR2_StartTimer 0070                    __end_of__npowers_ 107F  
                         ??_Send_put 002B                           _scale$1252 004B  
                            _Talking 00E6                      __size_of_SetMIC 0023  
                    __size_of_SetVOX 001E                      __size_of___ftge 003C  
                            ___awdiv 1348                              ___ftadd 170A  
               _UART_buff_modulo_inc 1EAE                              ___awmod 1264  
                            ___ftneg 1E2C                              ___lldiv 07A9  
                    __size_of___wmul 001C                              ___ftmul 15A0  
                            ___llmod 1221                              ___ftsub 1F7D  
                            ___fttol 13FF                           ??___ftpack 0025  
                    __size_of_memset 001C                      __size_of_fround 0166  
                         ??___lltoft 002C                              __ptext1 1FB9  
                            __ptext2 1E60                              __ptext3 07FC  
                            __ptext4 1E35                              __ptext5 1EC4  
                            __ptext6 1E6C                              __ptext7 1F27  
                            __ptext8 11DF                              __ptext9 1F60  
                    __size_of_printf 07CF                         ??_SR_FRSTalk 0020  
                  __end_of_hexpowers 10C6                          ?__div_to_l_ 0020  
                    ?_RadioOperation 0070                              _dpowers 1030  
                          _T2CONbits 001C                              _isdigit 1E79  
                   ___awmod@dividend 0022                   _EUSART1_Initialize 1EC4  
                       SetVOX@volume 006D                              clrloop0 1E1F  
               end_of_initialization 003E                            Delay@wait 0020  
                  __end_of_octpowers 1030                  ?_EUSART1_Initialize 0070  
                            memset@c 0020                              memset@n 0022  
                            memset@p 0026                 __end_of_SetFrequency 2000  
                    ___lldiv@divisor 0020                      ___lldiv@counter 002D  
                 __end_of_SR_FRSTalk 0004                            _RCSTAbits 019D  
                            printf@c 00D5                              printf@f 00A0  
              ?_UART_buff_modulo_inc 0020                              psplit$0 1B003E  
                            psplit$1 3E003F                         __pstringtext 1000  
                     __tdiv_to_l_@f1 0020                       __tdiv_to_l_@f2 0023  
                         _printf$801 00BD                           _printf$792 00B5  
                         _printf$793 00B7                           _printf$794 00B9  
                         _printf$795 00BB                 ??_EUSART1_Initialize 0028  
                      ??__tdiv_to_l_ 0026                            _PORTAbits 000C  
                          _PORTCbits 000E                            _TRISAbits 008C  
                          _TRISCbits 008E                 __end_of_SetPowerSave 1E60  
           __size_ofi1_UART_buff_get 004D             __size_ofi1_UART_buff_put 008A  
            __size_of_SetCommandMode 0008                       _UART_buff_init 1E6C  
                        printf@width 00D3                 __size_of_SR_FRSStart 0042  
                     _UART_buff_size 1E49                  __size_of__div_to_l_ 011D  
                        ___ftmul@exp 0040                       __end_of_SetMIC 1179  
                     __end_of_SetVOX 1FB9         __end_of_INTERRUPT_Initialize 1E3F  
                     __end_of___ftge 11DF                       __end_of___wmul 1F27  
                  __size_of_TMR2_ISR 0003                       __end_of_memset 1F43  
                     __end_of_fround 07A9                       __end_of_printf 0FFE  
                start_initialization 002A                  __end_of__tdiv_to_l_ 170A  
      i1UART_buff_modulo_inc@modulus 0072                          putch@txData 002D  
             __end_of_UART_buff_init 1E79                       UART_buff_get@c 0029  
             __end_of_UART_buff_size 1E54                       UART_buff_put@c 0026  
                    ___llmod@divisor 002E                      ___llmod@counter 0037  
            ?i1_UART_buff_modulo_inc 0070                            _SetVolume 1F60  
                           ??_SetMIC 00D8                             ??_SetVOX 006F  
             ??_UART_buff_modulo_inc 0024                             ??___ftge 0026  
                  __size_of_Send_put 0017                             ??___wmul 0034  
                        __pdataBANK1 00ED                             ??_memset 0024  
                           ??_fround 0049                             ??_printf 0067  
                     _eusart1RxCount 00E7                           fround@prec 0053  
                  __size_of___ftpack 0065                    __size_of___lltoft 002A  
                          ___latbits 0002        __size_of_EUSART1_Transmit_ISR 001A  
                      __pcstackBANK0 0020                        __pcstackBANK1 00A0  
           __size_of_TMR2_Initialize 000C                  UART_buff_init@_this 0027  
              __size_of_SetFrequency 0026                      ?_UART_buff_init 0070  
                    ?_UART_buff_size 0070         __size_of_EUSART1_Receive_ISR 0011  
     __end_ofi1_UART_buff_modulo_inc 1EAE               __size_of_UART_buff_get 0051  
                         ?_SetVolume 0070               __size_of_UART_buff_put 0090  
                  ??i1_UART_buff_get 0076                    ??i1_UART_buff_put 0077  
                           ?___awdiv 0027                             ?___ftadd 0054  
                           ?___awmod 0020                             ?___ftneg 0020  
                           ?___lldiv 0020                             ?___ftmul 0036  
                           ?___llmod 002E                             ?___ftsub 0061  
                          __npowers_ 1058                             ?___fttol 004F  
                   ??_RadioOperation 0020         ??_INTERRUPT_InterruptManager 007D  
                        __tdiv_to_l_ 1654                         ??__div_to_l_ 0026  
              __size_of_SetPowerSave 000C                             ?_isdigit 0070  
                       _SetFrequency 1FDA                       __size_of_Delay 001D  
                     __size_of_Start 0021                            _hexpowers 10A6  
                         pnum$text15 001B                       __size_of_scale 0246  
                     __size_of_putch 0006                 _INTERRUPT_Initialize 1E35  
                     _SetCommandMode 1E24                       ___wmul@product 0034  
                UART_buff_size@_this 0073                            clear_ram0 1E1E  
                          _octpowers 1000                             _PIE1bits 0091  
           __size_of_TMR2_StartTimer 0003  __size_of_INTERRUPT_InterruptManager 0024  
                           _PIR1bits 0011                   __end_of__div_to_l_ 0A62  
                           _TMR2_ISR 0802                         _SetPowerSave 1E54  
                       _input_buffer 0128                           _ADCON0bits 009D  
                         _ADCON1bits 009E                    ___wmul@multiplier 0030  
                         printf@flag 00D6                           printf@fval 00CA  
                      _UART_buff_get 12F7                           printf@prec 00D1  
                      _UART_buff_put 1510               __end_of_SetCommandMode 1E2C  
              ?_INTERRUPT_Initialize 0070                    ??_TMR2_Initialize 0020  
                        ??_SetVolume 006D                             _Send_put 1EDA  
                   __size_of___awdiv 0052                     __size_of___ftadd 00F6  
                   __size_of___awmod 0046                     __size_of___ftneg 0009  
                   __size_of___lldiv 0053                     __size_of___ftmul 00B4  
                   __size_of___llmod 0043                     __size_of___ftsub 001E  
                   __size_of___fttol 0087          __size_of_EUSART1_Initialize 0016  
                           ___ftpack 139A                          _fround$1250 0050  
                        _fround$1251 004D                             ___lltoft 0805  
                        _isdigit$999 0020                           _ANSELAbits 018C  
                         _ANSELCbits 018E                       ?_UART_buff_get 0070  
                     ?_UART_buff_put 0026                     __size_of_isdigit 000F  
                           __ptext10 1F9B                             __ptext11 1E54  
                           __ptext20 12F7                             __ptext12 1156  
                           __ptext21 1EAE                             __ptext13 1FDA  
                           __ptext30 0805                             __ptext22 1E79  
                           __ptext14 1E24                             __ptext31 1221  
                           __ptext23 0643                             __ptext15 082F  
                           __ptext40 1179                             __ptext32 07A9  
                           __ptext24 1F0B                             __ptext16 0A62  
                           __ptext41 0003                             __ptext33 13FF  
                           __ptext25 15A0                             __ptext17 1E18  
                           __ptext34 1F7D                             __ptext26 1264  
                           __ptext18 1EDA                             __ptext43 0802  
                           __ptext35 170A                             __ptext27 1348  
                           __ptext19 1510                             __ptext44 1EF1  
                           __ptext36 139A                             __ptext28 1654  
                           __ptext45 12AA                             __ptext37 1E2C  
                           __ptext29 0945                             __ptext46 1E49  
                           __ptext38 11A3                             __ptext47 1E88  
                           __ptext39 1F43                             __ptext48 1486  
                           __ptext49 1E99                      ?_SetCommandMode 0070  
                           __powers_ 107F                        ??_SR_FRSStart 0070  
            EUSART1_Receive_ISR@data 007C                        __size_of_main 000A  
                     _Transmit_stall 00ED                             int$flags 007E  
                   i1UART_buff_get@c 0079                    ??_TMR2_StartTimer 0020  
 __end_of_INTERRUPT_InterruptManager 0028           _INTERRUPT_InterruptManager 0004  
                          printf@idx 00BF                            printf@len 00C1  
                          printf@exp 00C8                            printf@val 00CD  
                   i1UART_buff_put@c 0076                  _EUSART1_Receive_ISR 1E88  
                 pnum$text15_split_1 003E                   pnum$text15_split_2 003F  
                         _INTCONbits 000B            UART_buff_modulo_inc@value 0020  
                         _FVRCONbits 0117                     ??_UART_buff_init 0027  
                   ??_UART_buff_size 0073                             isdigit@c 0021  
             ??_INTERRUPT_Initialize 0020                             memset@p1 0025  
                           scale@scl 004E                      i1_UART_buff_get 12AA  
                    i1_UART_buff_put 1486                             intlevel1 0000  
                   __tdiv_to_l_@exp1 002F                     __tdiv_to_l_@cntr 002E  
                   __tdiv_to_l_@quot 002A                 ?_EUSART1_Receive_ISR 0070  
                   ___lldiv@dividend 0024         __end_of_EUSART1_Transmit_ISR 1F0B  
                __end_of_SR_FRSStart 1221                             printf@ap 00C3  
                           printf@cp 00C0        __size_of_UART_buff_modulo_inc 0016  
                    ??_UART_buff_get 0026                      ??_UART_buff_put 0027  
                       ?__tdiv_to_l_ 0020                          _printf$1253 00B2  
                   ___lldiv@quotient 0029                ??_EUSART1_Receive_ISR 007B  
        i1UART_buff_modulo_inc@value 0070  
