

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Thu Aug 11 15:48:36 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,delta=2
    58                           	psect	text43,local,class=CODE,merge=1,delta=2
    59                           	psect	text44,local,class=CODE,merge=1,delta=2
    60                           	psect	text45,local,class=CODE,merge=1,delta=2
    61                           	psect	intentry,global,class=CODE,delta=2
    62                           	psect	text47,local,class=CODE,merge=1,delta=2
    63                           	dabs	1,0x7E,2
    64  0000                     	;# 
    65  0001                     	;# 
    66  0002                     	;# 
    67  0003                     	;# 
    68  0004                     	;# 
    69  0005                     	;# 
    70  0006                     	;# 
    71  0007                     	;# 
    72  0008                     	;# 
    73  0009                     	;# 
    74  000A                     	;# 
    75  000B                     	;# 
    76  000C                     	;# 
    77  000D                     	;# 
    78  000E                     	;# 
    79  0011                     	;# 
    80  0012                     	;# 
    81  0013                     	;# 
    82  0014                     	;# 
    83  0015                     	;# 
    84  0016                     	;# 
    85  0016                     	;# 
    86  0017                     	;# 
    87  0018                     	;# 
    88  0019                     	;# 
    89  001A                     	;# 
    90  001B                     	;# 
    91  001C                     	;# 
    92  001E                     	;# 
    93  001F                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0094                     	;# 
   101  0095                     	;# 
   102  0096                     	;# 
   103  0097                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009A                     	;# 
   107  009B                     	;# 
   108  009B                     	;# 
   109  009C                     	;# 
   110  009D                     	;# 
   111  009E                     	;# 
   112  010C                     	;# 
   113  010D                     	;# 
   114  010E                     	;# 
   115  0111                     	;# 
   116  0112                     	;# 
   117  0113                     	;# 
   118  0114                     	;# 
   119  0115                     	;# 
   120  0116                     	;# 
   121  0117                     	;# 
   122  0118                     	;# 
   123  0119                     	;# 
   124  011A                     	;# 
   125  011B                     	;# 
   126  011D                     	;# 
   127  011E                     	;# 
   128  018C                     	;# 
   129  018D                     	;# 
   130  018E                     	;# 
   131  0191                     	;# 
   132  0191                     	;# 
   133  0192                     	;# 
   134  0193                     	;# 
   135  0193                     	;# 
   136  0193                     	;# 
   137  0194                     	;# 
   138  0195                     	;# 
   139  0196                     	;# 
   140  0199                     	;# 
   141  019A                     	;# 
   142  019B                     	;# 
   143  019B                     	;# 
   144  019C                     	;# 
   145  019D                     	;# 
   146  019E                     	;# 
   147  019F                     	;# 
   148  020C                     	;# 
   149  020D                     	;# 
   150  020E                     	;# 
   151  0211                     	;# 
   152  0211                     	;# 
   153  0212                     	;# 
   154  0212                     	;# 
   155  0213                     	;# 
   156  0213                     	;# 
   157  0214                     	;# 
   158  0214                     	;# 
   159  0215                     	;# 
   160  0215                     	;# 
   161  0215                     	;# 
   162  0216                     	;# 
   163  0216                     	;# 
   164  0217                     	;# 
   165  0217                     	;# 
   166  0219                     	;# 
   167  021A                     	;# 
   168  021B                     	;# 
   169  021C                     	;# 
   170  021D                     	;# 
   171  021E                     	;# 
   172  021F                     	;# 
   173  0291                     	;# 
   174  0291                     	;# 
   175  0292                     	;# 
   176  0293                     	;# 
   177  0294                     	;# 
   178  0295                     	;# 
   179  0295                     	;# 
   180  0296                     	;# 
   181  0298                     	;# 
   182  0298                     	;# 
   183  0299                     	;# 
   184  029A                     	;# 
   185  029B                     	;# 
   186  029C                     	;# 
   187  029D                     	;# 
   188  029E                     	;# 
   189  0311                     	;# 
   190  0311                     	;# 
   191  0312                     	;# 
   192  0313                     	;# 
   193  0318                     	;# 
   194  0318                     	;# 
   195  0319                     	;# 
   196  031A                     	;# 
   197  038C                     	;# 
   198  038D                     	;# 
   199  038E                     	;# 
   200  0391                     	;# 
   201  0392                     	;# 
   202  0393                     	;# 
   203  0394                     	;# 
   204  0395                     	;# 
   205  0396                     	;# 
   206  039A                     	;# 
   207  039C                     	;# 
   208  039D                     	;# 
   209  039E                     	;# 
   210  039F                     	;# 
   211  0415                     	;# 
   212  0416                     	;# 
   213  0417                     	;# 
   214  041C                     	;# 
   215  041D                     	;# 
   216  041E                     	;# 
   217  0FE4                     	;# 
   218  0FE5                     	;# 
   219  0FE6                     	;# 
   220  0FE7                     	;# 
   221  0FE8                     	;# 
   222  0FE9                     	;# 
   223  0FEA                     	;# 
   224  0FEB                     	;# 
   225  0FED                     	;# 
   226  0FEE                     	;# 
   227  0FEF                     	;# 
   228  0000                     	;# 
   229  0001                     	;# 
   230  0002                     	;# 
   231  0003                     	;# 
   232  0004                     	;# 
   233  0005                     	;# 
   234  0006                     	;# 
   235  0007                     	;# 
   236  0008                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000D                     	;# 
   242  000E                     	;# 
   243  0011                     	;# 
   244  0012                     	;# 
   245  0013                     	;# 
   246  0014                     	;# 
   247  0015                     	;# 
   248  0016                     	;# 
   249  0016                     	;# 
   250  0017                     	;# 
   251  0018                     	;# 
   252  0019                     	;# 
   253  001A                     	;# 
   254  001B                     	;# 
   255  001C                     	;# 
   256  001E                     	;# 
   257  001F                     	;# 
   258  008C                     	;# 
   259  008D                     	;# 
   260  008E                     	;# 
   261  0091                     	;# 
   262  0092                     	;# 
   263  0093                     	;# 
   264  0094                     	;# 
   265  0095                     	;# 
   266  0096                     	;# 
   267  0097                     	;# 
   268  0098                     	;# 
   269  0099                     	;# 
   270  009A                     	;# 
   271  009B                     	;# 
   272  009B                     	;# 
   273  009C                     	;# 
   274  009D                     	;# 
   275  009E                     	;# 
   276  010C                     	;# 
   277  010D                     	;# 
   278  010E                     	;# 
   279  0111                     	;# 
   280  0112                     	;# 
   281  0113                     	;# 
   282  0114                     	;# 
   283  0115                     	;# 
   284  0116                     	;# 
   285  0117                     	;# 
   286  0118                     	;# 
   287  0119                     	;# 
   288  011A                     	;# 
   289  011B                     	;# 
   290  011D                     	;# 
   291  011E                     	;# 
   292  018C                     	;# 
   293  018D                     	;# 
   294  018E                     	;# 
   295  0191                     	;# 
   296  0191                     	;# 
   297  0192                     	;# 
   298  0193                     	;# 
   299  0193                     	;# 
   300  0193                     	;# 
   301  0194                     	;# 
   302  0195                     	;# 
   303  0196                     	;# 
   304  0199                     	;# 
   305  019A                     	;# 
   306  019B                     	;# 
   307  019B                     	;# 
   308  019C                     	;# 
   309  019D                     	;# 
   310  019E                     	;# 
   311  019F                     	;# 
   312  020C                     	;# 
   313  020D                     	;# 
   314  020E                     	;# 
   315  0211                     	;# 
   316  0211                     	;# 
   317  0212                     	;# 
   318  0212                     	;# 
   319  0213                     	;# 
   320  0213                     	;# 
   321  0214                     	;# 
   322  0214                     	;# 
   323  0215                     	;# 
   324  0215                     	;# 
   325  0215                     	;# 
   326  0216                     	;# 
   327  0216                     	;# 
   328  0217                     	;# 
   329  0217                     	;# 
   330  0219                     	;# 
   331  021A                     	;# 
   332  021B                     	;# 
   333  021C                     	;# 
   334  021D                     	;# 
   335  021E                     	;# 
   336  021F                     	;# 
   337  0291                     	;# 
   338  0291                     	;# 
   339  0292                     	;# 
   340  0293                     	;# 
   341  0294                     	;# 
   342  0295                     	;# 
   343  0295                     	;# 
   344  0296                     	;# 
   345  0298                     	;# 
   346  0298                     	;# 
   347  0299                     	;# 
   348  029A                     	;# 
   349  029B                     	;# 
   350  029C                     	;# 
   351  029D                     	;# 
   352  029E                     	;# 
   353  0311                     	;# 
   354  0311                     	;# 
   355  0312                     	;# 
   356  0313                     	;# 
   357  0318                     	;# 
   358  0318                     	;# 
   359  0319                     	;# 
   360  031A                     	;# 
   361  038C                     	;# 
   362  038D                     	;# 
   363  038E                     	;# 
   364  0391                     	;# 
   365  0392                     	;# 
   366  0393                     	;# 
   367  0394                     	;# 
   368  0395                     	;# 
   369  0396                     	;# 
   370  039A                     	;# 
   371  039C                     	;# 
   372  039D                     	;# 
   373  039E                     	;# 
   374  039F                     	;# 
   375  0415                     	;# 
   376  0416                     	;# 
   377  0417                     	;# 
   378  041C                     	;# 
   379  041D                     	;# 
   380  041E                     	;# 
   381  0FE4                     	;# 
   382  0FE5                     	;# 
   383  0FE6                     	;# 
   384  0FE7                     	;# 
   385  0FE8                     	;# 
   386  0FE9                     	;# 
   387  0FEA                     	;# 
   388  0FEB                     	;# 
   389  0FED                     	;# 
   390  0FEE                     	;# 
   391  0FEF                     	;# 
   392  0000                     	;# 
   393  0001                     	;# 
   394  0002                     	;# 
   395  0003                     	;# 
   396  0004                     	;# 
   397  0005                     	;# 
   398  0006                     	;# 
   399  0007                     	;# 
   400  0008                     	;# 
   401  0009                     	;# 
   402  000A                     	;# 
   403  000B                     	;# 
   404  000C                     	;# 
   405  000D                     	;# 
   406  000E                     	;# 
   407  0011                     	;# 
   408  0012                     	;# 
   409  0013                     	;# 
   410  0014                     	;# 
   411  0015                     	;# 
   412  0016                     	;# 
   413  0016                     	;# 
   414  0017                     	;# 
   415  0018                     	;# 
   416  0019                     	;# 
   417  001A                     	;# 
   418  001B                     	;# 
   419  001C                     	;# 
   420  001E                     	;# 
   421  001F                     	;# 
   422  008C                     	;# 
   423  008D                     	;# 
   424  008E                     	;# 
   425  0091                     	;# 
   426  0092                     	;# 
   427  0093                     	;# 
   428  0094                     	;# 
   429  0095                     	;# 
   430  0096                     	;# 
   431  0097                     	;# 
   432  0098                     	;# 
   433  0099                     	;# 
   434  009A                     	;# 
   435  009B                     	;# 
   436  009B                     	;# 
   437  009C                     	;# 
   438  009D                     	;# 
   439  009E                     	;# 
   440  010C                     	;# 
   441  010D                     	;# 
   442  010E                     	;# 
   443  0111                     	;# 
   444  0112                     	;# 
   445  0113                     	;# 
   446  0114                     	;# 
   447  0115                     	;# 
   448  0116                     	;# 
   449  0117                     	;# 
   450  0118                     	;# 
   451  0119                     	;# 
   452  011A                     	;# 
   453  011B                     	;# 
   454  011D                     	;# 
   455  011E                     	;# 
   456  018C                     	;# 
   457  018D                     	;# 
   458  018E                     	;# 
   459  0191                     	;# 
   460  0191                     	;# 
   461  0192                     	;# 
   462  0193                     	;# 
   463  0193                     	;# 
   464  0193                     	;# 
   465  0194                     	;# 
   466  0195                     	;# 
   467  0196                     	;# 
   468  0199                     	;# 
   469  019A                     	;# 
   470  019B                     	;# 
   471  019B                     	;# 
   472  019C                     	;# 
   473  019D                     	;# 
   474  019E                     	;# 
   475  019F                     	;# 
   476  020C                     	;# 
   477  020D                     	;# 
   478  020E                     	;# 
   479  0211                     	;# 
   480  0211                     	;# 
   481  0212                     	;# 
   482  0212                     	;# 
   483  0213                     	;# 
   484  0213                     	;# 
   485  0214                     	;# 
   486  0214                     	;# 
   487  0215                     	;# 
   488  0215                     	;# 
   489  0215                     	;# 
   490  0216                     	;# 
   491  0216                     	;# 
   492  0217                     	;# 
   493  0217                     	;# 
   494  0219                     	;# 
   495  021A                     	;# 
   496  021B                     	;# 
   497  021C                     	;# 
   498  021D                     	;# 
   499  021E                     	;# 
   500  021F                     	;# 
   501  0291                     	;# 
   502  0291                     	;# 
   503  0292                     	;# 
   504  0293                     	;# 
   505  0294                     	;# 
   506  0295                     	;# 
   507  0295                     	;# 
   508  0296                     	;# 
   509  0298                     	;# 
   510  0298                     	;# 
   511  0299                     	;# 
   512  029A                     	;# 
   513  029B                     	;# 
   514  029C                     	;# 
   515  029D                     	;# 
   516  029E                     	;# 
   517  0311                     	;# 
   518  0311                     	;# 
   519  0312                     	;# 
   520  0313                     	;# 
   521  0318                     	;# 
   522  0318                     	;# 
   523  0319                     	;# 
   524  031A                     	;# 
   525  038C                     	;# 
   526  038D                     	;# 
   527  038E                     	;# 
   528  0391                     	;# 
   529  0392                     	;# 
   530  0393                     	;# 
   531  0394                     	;# 
   532  0395                     	;# 
   533  0396                     	;# 
   534  039A                     	;# 
   535  039C                     	;# 
   536  039D                     	;# 
   537  039E                     	;# 
   538  039F                     	;# 
   539  0415                     	;# 
   540  0416                     	;# 
   541  0417                     	;# 
   542  041C                     	;# 
   543  041D                     	;# 
   544  041E                     	;# 
   545  0FE4                     	;# 
   546  0FE5                     	;# 
   547  0FE6                     	;# 
   548  0FE7                     	;# 
   549  0FE8                     	;# 
   550  0FE9                     	;# 
   551  0FEA                     	;# 
   552  0FEB                     	;# 
   553  0FED                     	;# 
   554  0FEE                     	;# 
   555  0FEF                     	;# 
   556  0000                     	;# 
   557  0001                     	;# 
   558  0002                     	;# 
   559  0003                     	;# 
   560  0004                     	;# 
   561  0005                     	;# 
   562  0006                     	;# 
   563  0007                     	;# 
   564  0008                     	;# 
   565  0009                     	;# 
   566  000A                     	;# 
   567  000B                     	;# 
   568  000C                     	;# 
   569  000D                     	;# 
   570  000E                     	;# 
   571  0011                     	;# 
   572  0012                     	;# 
   573  0013                     	;# 
   574  0014                     	;# 
   575  0015                     	;# 
   576  0016                     	;# 
   577  0016                     	;# 
   578  0017                     	;# 
   579  0018                     	;# 
   580  0019                     	;# 
   581  001A                     	;# 
   582  001B                     	;# 
   583  001C                     	;# 
   584  001E                     	;# 
   585  001F                     	;# 
   586  008C                     	;# 
   587  008D                     	;# 
   588  008E                     	;# 
   589  0091                     	;# 
   590  0092                     	;# 
   591  0093                     	;# 
   592  0094                     	;# 
   593  0095                     	;# 
   594  0096                     	;# 
   595  0097                     	;# 
   596  0098                     	;# 
   597  0099                     	;# 
   598  009A                     	;# 
   599  009B                     	;# 
   600  009B                     	;# 
   601  009C                     	;# 
   602  009D                     	;# 
   603  009E                     	;# 
   604  010C                     	;# 
   605  010D                     	;# 
   606  010E                     	;# 
   607  0111                     	;# 
   608  0112                     	;# 
   609  0113                     	;# 
   610  0114                     	;# 
   611  0115                     	;# 
   612  0116                     	;# 
   613  0117                     	;# 
   614  0118                     	;# 
   615  0119                     	;# 
   616  011A                     	;# 
   617  011B                     	;# 
   618  011D                     	;# 
   619  011E                     	;# 
   620  018C                     	;# 
   621  018D                     	;# 
   622  018E                     	;# 
   623  0191                     	;# 
   624  0191                     	;# 
   625  0192                     	;# 
   626  0193                     	;# 
   627  0193                     	;# 
   628  0193                     	;# 
   629  0194                     	;# 
   630  0195                     	;# 
   631  0196                     	;# 
   632  0199                     	;# 
   633  019A                     	;# 
   634  019B                     	;# 
   635  019B                     	;# 
   636  019C                     	;# 
   637  019D                     	;# 
   638  019E                     	;# 
   639  019F                     	;# 
   640  020C                     	;# 
   641  020D                     	;# 
   642  020E                     	;# 
   643  0211                     	;# 
   644  0211                     	;# 
   645  0212                     	;# 
   646  0212                     	;# 
   647  0213                     	;# 
   648  0213                     	;# 
   649  0214                     	;# 
   650  0214                     	;# 
   651  0215                     	;# 
   652  0215                     	;# 
   653  0215                     	;# 
   654  0216                     	;# 
   655  0216                     	;# 
   656  0217                     	;# 
   657  0217                     	;# 
   658  0219                     	;# 
   659  021A                     	;# 
   660  021B                     	;# 
   661  021C                     	;# 
   662  021D                     	;# 
   663  021E                     	;# 
   664  021F                     	;# 
   665  0291                     	;# 
   666  0291                     	;# 
   667  0292                     	;# 
   668  0293                     	;# 
   669  0294                     	;# 
   670  0295                     	;# 
   671  0295                     	;# 
   672  0296                     	;# 
   673  0298                     	;# 
   674  0298                     	;# 
   675  0299                     	;# 
   676  029A                     	;# 
   677  029B                     	;# 
   678  029C                     	;# 
   679  029D                     	;# 
   680  029E                     	;# 
   681  0311                     	;# 
   682  0311                     	;# 
   683  0312                     	;# 
   684  0313                     	;# 
   685  0318                     	;# 
   686  0318                     	;# 
   687  0319                     	;# 
   688  031A                     	;# 
   689  038C                     	;# 
   690  038D                     	;# 
   691  038E                     	;# 
   692  0391                     	;# 
   693  0392                     	;# 
   694  0393                     	;# 
   695  0394                     	;# 
   696  0395                     	;# 
   697  0396                     	;# 
   698  039A                     	;# 
   699  039C                     	;# 
   700  039D                     	;# 
   701  039E                     	;# 
   702  039F                     	;# 
   703  0415                     	;# 
   704  0416                     	;# 
   705  0417                     	;# 
   706  041C                     	;# 
   707  041D                     	;# 
   708  041E                     	;# 
   709  0FE4                     	;# 
   710  0FE5                     	;# 
   711  0FE6                     	;# 
   712  0FE7                     	;# 
   713  0FE8                     	;# 
   714  0FE9                     	;# 
   715  0FEA                     	;# 
   716  0FEB                     	;# 
   717  0FED                     	;# 
   718  0FEE                     	;# 
   719  0FEF                     	;# 
   720  0000                     	;# 
   721  0001                     	;# 
   722  0002                     	;# 
   723  0003                     	;# 
   724  0004                     	;# 
   725  0005                     	;# 
   726  0006                     	;# 
   727  0007                     	;# 
   728  0008                     	;# 
   729  0009                     	;# 
   730  000A                     	;# 
   731  000B                     	;# 
   732  000C                     	;# 
   733  000D                     	;# 
   734  000E                     	;# 
   735  0011                     	;# 
   736  0012                     	;# 
   737  0013                     	;# 
   738  0014                     	;# 
   739  0015                     	;# 
   740  0016                     	;# 
   741  0016                     	;# 
   742  0017                     	;# 
   743  0018                     	;# 
   744  0019                     	;# 
   745  001A                     	;# 
   746  001B                     	;# 
   747  001C                     	;# 
   748  001E                     	;# 
   749  001F                     	;# 
   750  008C                     	;# 
   751  008D                     	;# 
   752  008E                     	;# 
   753  0091                     	;# 
   754  0092                     	;# 
   755  0093                     	;# 
   756  0094                     	;# 
   757  0095                     	;# 
   758  0096                     	;# 
   759  0097                     	;# 
   760  0098                     	;# 
   761  0099                     	;# 
   762  009A                     	;# 
   763  009B                     	;# 
   764  009B                     	;# 
   765  009C                     	;# 
   766  009D                     	;# 
   767  009E                     	;# 
   768  010C                     	;# 
   769  010D                     	;# 
   770  010E                     	;# 
   771  0111                     	;# 
   772  0112                     	;# 
   773  0113                     	;# 
   774  0114                     	;# 
   775  0115                     	;# 
   776  0116                     	;# 
   777  0117                     	;# 
   778  0118                     	;# 
   779  0119                     	;# 
   780  011A                     	;# 
   781  011B                     	;# 
   782  011D                     	;# 
   783  011E                     	;# 
   784  018C                     	;# 
   785  018D                     	;# 
   786  018E                     	;# 
   787  0191                     	;# 
   788  0191                     	;# 
   789  0192                     	;# 
   790  0193                     	;# 
   791  0193                     	;# 
   792  0193                     	;# 
   793  0194                     	;# 
   794  0195                     	;# 
   795  0196                     	;# 
   796  0199                     	;# 
   797  019A                     	;# 
   798  019B                     	;# 
   799  019B                     	;# 
   800  019C                     	;# 
   801  019D                     	;# 
   802  019E                     	;# 
   803  019F                     	;# 
   804  020C                     	;# 
   805  020D                     	;# 
   806  020E                     	;# 
   807  0211                     	;# 
   808  0211                     	;# 
   809  0212                     	;# 
   810  0212                     	;# 
   811  0213                     	;# 
   812  0213                     	;# 
   813  0214                     	;# 
   814  0214                     	;# 
   815  0215                     	;# 
   816  0215                     	;# 
   817  0215                     	;# 
   818  0216                     	;# 
   819  0216                     	;# 
   820  0217                     	;# 
   821  0217                     	;# 
   822  0219                     	;# 
   823  021A                     	;# 
   824  021B                     	;# 
   825  021C                     	;# 
   826  021D                     	;# 
   827  021E                     	;# 
   828  021F                     	;# 
   829  0291                     	;# 
   830  0291                     	;# 
   831  0292                     	;# 
   832  0293                     	;# 
   833  0294                     	;# 
   834  0295                     	;# 
   835  0295                     	;# 
   836  0296                     	;# 
   837  0298                     	;# 
   838  0298                     	;# 
   839  0299                     	;# 
   840  029A                     	;# 
   841  029B                     	;# 
   842  029C                     	;# 
   843  029D                     	;# 
   844  029E                     	;# 
   845  0311                     	;# 
   846  0311                     	;# 
   847  0312                     	;# 
   848  0313                     	;# 
   849  0318                     	;# 
   850  0318                     	;# 
   851  0319                     	;# 
   852  031A                     	;# 
   853  038C                     	;# 
   854  038D                     	;# 
   855  038E                     	;# 
   856  0391                     	;# 
   857  0392                     	;# 
   858  0393                     	;# 
   859  0394                     	;# 
   860  0395                     	;# 
   861  0396                     	;# 
   862  039A                     	;# 
   863  039C                     	;# 
   864  039D                     	;# 
   865  039E                     	;# 
   866  039F                     	;# 
   867  0415                     	;# 
   868  0416                     	;# 
   869  0417                     	;# 
   870  041C                     	;# 
   871  041D                     	;# 
   872  041E                     	;# 
   873  0FE4                     	;# 
   874  0FE5                     	;# 
   875  0FE6                     	;# 
   876  0FE7                     	;# 
   877  0FE8                     	;# 
   878  0FE9                     	;# 
   879  0FEA                     	;# 
   880  0FEB                     	;# 
   881  0FED                     	;# 
   882  0FEE                     	;# 
   883  0FEF                     	;# 
   884  0000                     	;# 
   885  0001                     	;# 
   886  0002                     	;# 
   887  0003                     	;# 
   888  0004                     	;# 
   889  0005                     	;# 
   890  0006                     	;# 
   891  0007                     	;# 
   892  0008                     	;# 
   893  0009                     	;# 
   894  000A                     	;# 
   895  000B                     	;# 
   896  000C                     	;# 
   897  000D                     	;# 
   898  000E                     	;# 
   899  0011                     	;# 
   900  0012                     	;# 
   901  0013                     	;# 
   902  0014                     	;# 
   903  0015                     	;# 
   904  0016                     	;# 
   905  0016                     	;# 
   906  0017                     	;# 
   907  0018                     	;# 
   908  0019                     	;# 
   909  001A                     	;# 
   910  001B                     	;# 
   911  001C                     	;# 
   912  001E                     	;# 
   913  001F                     	;# 
   914  008C                     	;# 
   915  008D                     	;# 
   916  008E                     	;# 
   917  0091                     	;# 
   918  0092                     	;# 
   919  0093                     	;# 
   920  0094                     	;# 
   921  0095                     	;# 
   922  0096                     	;# 
   923  0097                     	;# 
   924  0098                     	;# 
   925  0099                     	;# 
   926  009A                     	;# 
   927  009B                     	;# 
   928  009B                     	;# 
   929  009C                     	;# 
   930  009D                     	;# 
   931  009E                     	;# 
   932  010C                     	;# 
   933  010D                     	;# 
   934  010E                     	;# 
   935  0111                     	;# 
   936  0112                     	;# 
   937  0113                     	;# 
   938  0114                     	;# 
   939  0115                     	;# 
   940  0116                     	;# 
   941  0117                     	;# 
   942  0118                     	;# 
   943  0119                     	;# 
   944  011A                     	;# 
   945  011B                     	;# 
   946  011D                     	;# 
   947  011E                     	;# 
   948  018C                     	;# 
   949  018D                     	;# 
   950  018E                     	;# 
   951  0191                     	;# 
   952  0191                     	;# 
   953  0192                     	;# 
   954  0193                     	;# 
   955  0193                     	;# 
   956  0193                     	;# 
   957  0194                     	;# 
   958  0195                     	;# 
   959  0196                     	;# 
   960  0199                     	;# 
   961  019A                     	;# 
   962  019B                     	;# 
   963  019B                     	;# 
   964  019C                     	;# 
   965  019D                     	;# 
   966  019E                     	;# 
   967  019F                     	;# 
   968  020C                     	;# 
   969  020D                     	;# 
   970  020E                     	;# 
   971  0211                     	;# 
   972  0211                     	;# 
   973  0212                     	;# 
   974  0212                     	;# 
   975  0213                     	;# 
   976  0213                     	;# 
   977  0214                     	;# 
   978  0214                     	;# 
   979  0215                     	;# 
   980  0215                     	;# 
   981  0215                     	;# 
   982  0216                     	;# 
   983  0216                     	;# 
   984  0217                     	;# 
   985  0217                     	;# 
   986  0219                     	;# 
   987  021A                     	;# 
   988  021B                     	;# 
   989  021C                     	;# 
   990  021D                     	;# 
   991  021E                     	;# 
   992  021F                     	;# 
   993  0291                     	;# 
   994  0291                     	;# 
   995  0292                     	;# 
   996  0293                     	;# 
   997  0294                     	;# 
   998  0295                     	;# 
   999  0295                     	;# 
  1000  0296                     	;# 
  1001  0298                     	;# 
  1002  0298                     	;# 
  1003  0299                     	;# 
  1004  029A                     	;# 
  1005  029B                     	;# 
  1006  029C                     	;# 
  1007  029D                     	;# 
  1008  029E                     	;# 
  1009  0311                     	;# 
  1010  0311                     	;# 
  1011  0312                     	;# 
  1012  0313                     	;# 
  1013  0318                     	;# 
  1014  0318                     	;# 
  1015  0319                     	;# 
  1016  031A                     	;# 
  1017  038C                     	;# 
  1018  038D                     	;# 
  1019  038E                     	;# 
  1020  0391                     	;# 
  1021  0392                     	;# 
  1022  0393                     	;# 
  1023  0394                     	;# 
  1024  0395                     	;# 
  1025  0396                     	;# 
  1026  039A                     	;# 
  1027  039C                     	;# 
  1028  039D                     	;# 
  1029  039E                     	;# 
  1030  039F                     	;# 
  1031  0415                     	;# 
  1032  0416                     	;# 
  1033  0417                     	;# 
  1034  041C                     	;# 
  1035  041D                     	;# 
  1036  041E                     	;# 
  1037  0FE4                     	;# 
  1038  0FE5                     	;# 
  1039  0FE6                     	;# 
  1040  0FE7                     	;# 
  1041  0FE8                     	;# 
  1042  0FE9                     	;# 
  1043  0FEA                     	;# 
  1044  0FEB                     	;# 
  1045  0FED                     	;# 
  1046  0FEE                     	;# 
  1047  0FEF                     	;# 
  1048  0000                     	;# 
  1049  0001                     	;# 
  1050  0002                     	;# 
  1051  0003                     	;# 
  1052  0004                     	;# 
  1053  0005                     	;# 
  1054  0006                     	;# 
  1055  0007                     	;# 
  1056  0008                     	;# 
  1057  0009                     	;# 
  1058  000A                     	;# 
  1059  000B                     	;# 
  1060  000C                     	;# 
  1061  000D                     	;# 
  1062  000E                     	;# 
  1063  0011                     	;# 
  1064  0012                     	;# 
  1065  0013                     	;# 
  1066  0014                     	;# 
  1067  0015                     	;# 
  1068  0016                     	;# 
  1069  0016                     	;# 
  1070  0017                     	;# 
  1071  0018                     	;# 
  1072  0019                     	;# 
  1073  001A                     	;# 
  1074  001B                     	;# 
  1075  001C                     	;# 
  1076  001E                     	;# 
  1077  001F                     	;# 
  1078  008C                     	;# 
  1079  008D                     	;# 
  1080  008E                     	;# 
  1081  0091                     	;# 
  1082  0092                     	;# 
  1083  0093                     	;# 
  1084  0094                     	;# 
  1085  0095                     	;# 
  1086  0096                     	;# 
  1087  0097                     	;# 
  1088  0098                     	;# 
  1089  0099                     	;# 
  1090  009A                     	;# 
  1091  009B                     	;# 
  1092  009B                     	;# 
  1093  009C                     	;# 
  1094  009D                     	;# 
  1095  009E                     	;# 
  1096  010C                     	;# 
  1097  010D                     	;# 
  1098  010E                     	;# 
  1099  0111                     	;# 
  1100  0112                     	;# 
  1101  0113                     	;# 
  1102  0114                     	;# 
  1103  0115                     	;# 
  1104  0116                     	;# 
  1105  0117                     	;# 
  1106  0118                     	;# 
  1107  0119                     	;# 
  1108  011A                     	;# 
  1109  011B                     	;# 
  1110  011D                     	;# 
  1111  011E                     	;# 
  1112  018C                     	;# 
  1113  018D                     	;# 
  1114  018E                     	;# 
  1115  0191                     	;# 
  1116  0191                     	;# 
  1117  0192                     	;# 
  1118  0193                     	;# 
  1119  0193                     	;# 
  1120  0193                     	;# 
  1121  0194                     	;# 
  1122  0195                     	;# 
  1123  0196                     	;# 
  1124  0199                     	;# 
  1125  019A                     	;# 
  1126  019B                     	;# 
  1127  019B                     	;# 
  1128  019C                     	;# 
  1129  019D                     	;# 
  1130  019E                     	;# 
  1131  019F                     	;# 
  1132  020C                     	;# 
  1133  020D                     	;# 
  1134  020E                     	;# 
  1135  0211                     	;# 
  1136  0211                     	;# 
  1137  0212                     	;# 
  1138  0212                     	;# 
  1139  0213                     	;# 
  1140  0213                     	;# 
  1141  0214                     	;# 
  1142  0214                     	;# 
  1143  0215                     	;# 
  1144  0215                     	;# 
  1145  0215                     	;# 
  1146  0216                     	;# 
  1147  0216                     	;# 
  1148  0217                     	;# 
  1149  0217                     	;# 
  1150  0219                     	;# 
  1151  021A                     	;# 
  1152  021B                     	;# 
  1153  021C                     	;# 
  1154  021D                     	;# 
  1155  021E                     	;# 
  1156  021F                     	;# 
  1157  0291                     	;# 
  1158  0291                     	;# 
  1159  0292                     	;# 
  1160  0293                     	;# 
  1161  0294                     	;# 
  1162  0295                     	;# 
  1163  0295                     	;# 
  1164  0296                     	;# 
  1165  0298                     	;# 
  1166  0298                     	;# 
  1167  0299                     	;# 
  1168  029A                     	;# 
  1169  029B                     	;# 
  1170  029C                     	;# 
  1171  029D                     	;# 
  1172  029E                     	;# 
  1173  0311                     	;# 
  1174  0311                     	;# 
  1175  0312                     	;# 
  1176  0313                     	;# 
  1177  0318                     	;# 
  1178  0318                     	;# 
  1179  0319                     	;# 
  1180  031A                     	;# 
  1181  038C                     	;# 
  1182  038D                     	;# 
  1183  038E                     	;# 
  1184  0391                     	;# 
  1185  0392                     	;# 
  1186  0393                     	;# 
  1187  0394                     	;# 
  1188  0395                     	;# 
  1189  0396                     	;# 
  1190  039A                     	;# 
  1191  039C                     	;# 
  1192  039D                     	;# 
  1193  039E                     	;# 
  1194  039F                     	;# 
  1195  0415                     	;# 
  1196  0416                     	;# 
  1197  0417                     	;# 
  1198  041C                     	;# 
  1199  041D                     	;# 
  1200  041E                     	;# 
  1201  0FE4                     	;# 
  1202  0FE5                     	;# 
  1203  0FE6                     	;# 
  1204  0FE7                     	;# 
  1205  0FE8                     	;# 
  1206  0FE9                     	;# 
  1207  0FEA                     	;# 
  1208  0FEB                     	;# 
  1209  0FED                     	;# 
  1210  0FEE                     	;# 
  1211  0FEF                     	;# 
  1212                           
  1213                           	psect	idataBANK1
  1214  0003                     __pidataBANK1:	
  1215                           
  1216                           ;initializer for _Transmit_stall
  1217  0003  3401               	retlw	1
  1218                           
  1219                           	psect	stringtext
  1220  1000                     __pstringtext:	
  1221  1000                     _dpowers:	
  1222  1000  3401               	retlw	1
  1223  1001  3400               	retlw	0
  1224  1002  3400               	retlw	0
  1225  1003  3400               	retlw	0
  1226  1004  340A               	retlw	10
  1227  1005  3400               	retlw	0
  1228  1006  3400               	retlw	0
  1229  1007  3400               	retlw	0
  1230  1008  3464               	retlw	100
  1231  1009  3400               	retlw	0
  1232  100A  3400               	retlw	0
  1233  100B  3400               	retlw	0
  1234  100C  34E8               	retlw	232
  1235  100D  3403               	retlw	3
  1236  100E  3400               	retlw	0
  1237  100F  3400               	retlw	0
  1238  1010  3410               	retlw	16
  1239  1011  3427               	retlw	39
  1240  1012  3400               	retlw	0
  1241  1013  3400               	retlw	0
  1242  1014  34A0               	retlw	160
  1243  1015  3486               	retlw	134
  1244  1016  3401               	retlw	1
  1245  1017  3400               	retlw	0
  1246  1018  3440               	retlw	64
  1247  1019  3442               	retlw	66
  1248  101A  340F               	retlw	15
  1249  101B  3400               	retlw	0
  1250  101C  3480               	retlw	128
  1251  101D  3496               	retlw	150
  1252  101E  3498               	retlw	152
  1253  101F  3400               	retlw	0
  1254  1020  3400               	retlw	0
  1255  1021  34E1               	retlw	225
  1256  1022  34F5               	retlw	245
  1257  1023  3405               	retlw	5
  1258  1024  3400               	retlw	0
  1259  1025  34CA               	retlw	202
  1260  1026  349A               	retlw	154
  1261  1027  343B               	retlw	59
  1262  1028                     __end_of_dpowers:	
  1263  1028                     __npowers_:	
  1264  1028  3400               	retlw	0
  1265  1029  3480               	retlw	128
  1266  102A  343F               	retlw	63
  1267  102B  34CD               	retlw	205
  1268  102C  34CC               	retlw	204
  1269  102D  343D               	retlw	61
  1270  102E  34D7               	retlw	215
  1271  102F  3423               	retlw	35
  1272  1030  343C               	retlw	60
  1273  1031  3412               	retlw	18
  1274  1032  3483               	retlw	131
  1275  1033  343A               	retlw	58
  1276  1034  34B7               	retlw	183
  1277  1035  34D1               	retlw	209
  1278  1036  3438               	retlw	56
  1279  1037  34C6               	retlw	198
  1280  1038  3427               	retlw	39
  1281  1039  3437               	retlw	55
  1282  103A  3438               	retlw	56
  1283  103B  3486               	retlw	134
  1284  103C  3435               	retlw	53
  1285  103D  34C0               	retlw	192
  1286  103E  34D6               	retlw	214
  1287  103F  3433               	retlw	51
  1288  1040  34CC               	retlw	204
  1289  1041  342B               	retlw	43
  1290  1042  3432               	retlw	50
  1291  1043  3470               	retlw	112
  1292  1044  3489               	retlw	137
  1293  1045  3430               	retlw	48
  1294  1046  34E7               	retlw	231
  1295  1047  34DB               	retlw	219
  1296  1048  342E               	retlw	46
  1297  1049  34E5               	retlw	229
  1298  104A  343C               	retlw	60
  1299  104B  341E               	retlw	30
  1300  104C  3442               	retlw	66
  1301  104D  34A2               	retlw	162
  1302  104E  340D               	retlw	13
  1303  104F                     __end_of__npowers_:	
  1304  104F                     __powers_:	
  1305  104F  3400               	retlw	0
  1306  1050  3480               	retlw	128
  1307  1051  343F               	retlw	63
  1308  1052  3400               	retlw	0
  1309  1053  3420               	retlw	32
  1310  1054  3441               	retlw	65
  1311  1055  3400               	retlw	0
  1312  1056  34C8               	retlw	200
  1313  1057  3442               	retlw	66
  1314  1058  3400               	retlw	0
  1315  1059  347A               	retlw	122
  1316  105A  3444               	retlw	68
  1317  105B  3440               	retlw	64
  1318  105C  341C               	retlw	28
  1319  105D  3446               	retlw	70
  1320  105E  3450               	retlw	80
  1321  105F  34C3               	retlw	195
  1322  1060  3447               	retlw	71
  1323  1061  3424               	retlw	36
  1324  1062  3474               	retlw	116
  1325  1063  3449               	retlw	73
  1326  1064  3497               	retlw	151
  1327  1065  3418               	retlw	24
  1328  1066  344B               	retlw	75
  1329  1067  34BC               	retlw	188
  1330  1068  34BE               	retlw	190
  1331  1069  344C               	retlw	76
  1332  106A  346B               	retlw	107
  1333  106B  346E               	retlw	110
  1334  106C  344E               	retlw	78
  1335  106D  3403               	retlw	3
  1336  106E  3415               	retlw	21
  1337  106F  3450               	retlw	80
  1338  1070  3479               	retlw	121
  1339  1071  34AD               	retlw	173
  1340  1072  3460               	retlw	96
  1341  1073  34F3               	retlw	243
  1342  1074  3449               	retlw	73
  1343  1075  3471               	retlw	113
  1344  1076                     __end_of__powers_:	
  1345  000B                     _INTCON	set	11
  1346  000B                     _INTCONbits	set	11
  1347  0011                     _PIR1bits	set	17
  1348  000C                     _PORTAbits	set	12
  1349  000E                     _PORTCbits	set	14
  1350  001B                     _PR2	set	27
  1351  001C                     _T2CON	set	28
  1352  001C                     _T2CONbits	set	28
  1353  001A                     _TMR2	set	26
  1354  009D                     _ADCON0bits	set	157
  1355  009E                     _ADCON1bits	set	158
  1356  009B                     _ADRESL	set	155
  1357  0099                     _OSCCONbits	set	153
  1358  0091                     _PIE1bits	set	145
  1359  008C                     _TRISAbits	set	140
  1360  008E                     _TRISCbits	set	142
  1361  0117                     _FVRCONbits	set	279
  1362  018C                     _ANSELAbits	set	396
  1363  018E                     _ANSELCbits	set	398
  1364  019F                     _BAUDCON	set	415
  1365  0199                     _RCREG	set	409
  1366  019D                     _RCSTA	set	413
  1367  019D                     _RCSTAbits	set	413
  1368  019C                     _SPBRGH	set	412
  1369  019B                     _SPBRGL	set	411
  1370  019A                     _TXREG	set	410
  1371  019E                     _TXSTA	set	414
  1372  1076                     STR_2:	
  1373  1076  3441               	retlw	65	;'A'
  1374  1077  3454               	retlw	84	;'T'
  1375  1078  342B               	retlw	43	;'+'
  1376  1079  3444               	retlw	68	;'D'
  1377  107A  344D               	retlw	77	;'M'
  1378  107B  344F               	retlw	79	;'O'
  1379  107C  3453               	retlw	83	;'S'
  1380  107D  3445               	retlw	69	;'E'
  1381  107E  3454               	retlw	84	;'T'
  1382  107F  3447               	retlw	71	;'G'
  1383  1080  3452               	retlw	82	;'R'
  1384  1081  344F               	retlw	79	;'O'
  1385  1082  3455               	retlw	85	;'U'
  1386  1083  3450               	retlw	80	;'P'
  1387  1084  343D               	retlw	61	;'='
  1388  1085  3425               	retlw	37	;'%'
  1389  1086  3464               	retlw	100	;'d'
  1390  1087  342C               	retlw	44	;','
  1391  1088  3425               	retlw	37	;'%'
  1392  1089  3466               	retlw	102	;'f'
  1393  108A  342C               	retlw	44	;','
  1394  108B  3425               	retlw	37	;'%'
  1395  108C  3466               	retlw	102	;'f'
  1396  108D  342C               	retlw	44	;','
  1397  108E  3425               	retlw	37	;'%'
  1398  108F  3464               	retlw	100	;'d'
  1399  1090  342C               	retlw	44	;','
  1400  1091  3425               	retlw	37	;'%'
  1401  1092  3464               	retlw	100	;'d'
  1402  1093  342C               	retlw	44	;','
  1403  1094  3425               	retlw	37	;'%'
  1404  1095  3464               	retlw	100	;'d'
  1405  1096  342C               	retlw	44	;','
  1406  1097  3425               	retlw	37	;'%'
  1407  1098  3464               	retlw	100	;'d'
  1408  1099  3400               	retlw	0
  1409  109A                     STR_6:	
  1410  109A  3441               	retlw	65	;'A'
  1411  109B  3454               	retlw	84	;'T'
  1412  109C  342B               	retlw	43	;'+'
  1413  109D  3444               	retlw	68	;'D'
  1414  109E  344D               	retlw	77	;'M'
  1415  109F  344F               	retlw	79	;'O'
  1416  10A0  3453               	retlw	83	;'S'
  1417  10A1  3445               	retlw	69	;'E'
  1418  10A2  3454               	retlw	84	;'T'
  1419  10A3  344D               	retlw	77	;'M'
  1420  10A4  3449               	retlw	73	;'I'
  1421  10A5  3443               	retlw	67	;'C'
  1422  10A6  343D               	retlw	61	;'='
  1423  10A7  3425               	retlw	37	;'%'
  1424  10A8  3463               	retlw	99	;'c'
  1425  10A9  342C               	retlw	44	;','
  1426  10AA  3425               	retlw	37	;'%'
  1427  10AB  3463               	retlw	99	;'c'
  1428  10AC  342C               	retlw	44	;','
  1429  10AD  3425               	retlw	37	;'%'
  1430  10AE  3463               	retlw	99	;'c'
  1431  10AF  3400               	retlw	0
  1432  10B0                     STR_3:	
  1433  10B0  3441               	retlw	65	;'A'
  1434  10B1  3454               	retlw	84	;'T'
  1435  10B2  342B               	retlw	43	;'+'
  1436  10B3  3444               	retlw	68	;'D'
  1437  10B4  344D               	retlw	77	;'M'
  1438  10B5  344F               	retlw	79	;'O'
  1439  10B6  3441               	retlw	65	;'A'
  1440  10B7  3455               	retlw	85	;'U'
  1441  10B8  3454               	retlw	84	;'T'
  1442  10B9  344F               	retlw	79	;'O'
  1443  10BA  3450               	retlw	80	;'P'
  1444  10BB  344F               	retlw	79	;'O'
  1445  10BC  3457               	retlw	87	;'W'
  1446  10BD  3443               	retlw	67	;'C'
  1447  10BE  344F               	retlw	79	;'O'
  1448  10BF  344E               	retlw	78	;'N'
  1449  10C0  3454               	retlw	84	;'T'
  1450  10C1  3452               	retlw	82	;'R'
  1451  10C2  343D               	retlw	61	;'='
  1452  10C3  3425               	retlw	37	;'%'
  1453  10C4  3463               	retlw	99	;'c'
  1454  10C5  3400               	retlw	0
  1455  10C6                     STR_4:	
  1456  10C6  3441               	retlw	65	;'A'
  1457  10C7  3454               	retlw	84	;'T'
  1458  10C8  342B               	retlw	43	;'+'
  1459  10C9  3444               	retlw	68	;'D'
  1460  10CA  344D               	retlw	77	;'M'
  1461  10CB  344F               	retlw	79	;'O'
  1462  10CC  3453               	retlw	83	;'S'
  1463  10CD  3445               	retlw	69	;'E'
  1464  10CE  3454               	retlw	84	;'T'
  1465  10CF  3456               	retlw	86	;'V'
  1466  10D0  344F               	retlw	79	;'O'
  1467  10D1  344C               	retlw	76	;'L'
  1468  10D2  3455               	retlw	85	;'U'
  1469  10D3  344D               	retlw	77	;'M'
  1470  10D4  3445               	retlw	69	;'E'
  1471  10D5  343D               	retlw	61	;'='
  1472  10D6  3425               	retlw	37	;'%'
  1473  10D7  3463               	retlw	99	;'c'
  1474  10D8  3400               	retlw	0
  1475  10D9                     STR_1:	
  1476  10D9  3441               	retlw	65	;'A'
  1477  10DA  3454               	retlw	84	;'T'
  1478  10DB  342B               	retlw	43	;'+'
  1479  10DC  3444               	retlw	68	;'D'
  1480  10DD  344D               	retlw	77	;'M'
  1481  10DE  344F               	retlw	79	;'O'
  1482  10DF  3443               	retlw	67	;'C'
  1483  10E0  344F               	retlw	79	;'O'
  1484  10E1  344E               	retlw	78	;'N'
  1485  10E2  344E               	retlw	78	;'N'
  1486  10E3  3445               	retlw	69	;'E'
  1487  10E4  3443               	retlw	67	;'C'
  1488  10E5  3454               	retlw	84	;'T'
  1489  10E6  3400               	retlw	0
  1490  10C6                     
  1491                           ; #config settings
  1492  0000                     
  1493                           	psect	cinit
  1494  0018                     start_initialization:	
  1495  0018                     __initialization:	
  1496                           
  1497                           ; Clear objects allocated to COMMON
  1498  0018  01FC               	clrf	__pbssCOMMON& (0+127)
  1499                           
  1500                           ; Clear objects allocated to BANK1
  1501  0019  30A0               	movlw	low __pbssBANK1
  1502  001A  0084               	movwf	4
  1503  001B  3000               	movlw	high __pbssBANK1
  1504  001C  0085               	movwf	5
  1505  001D  3025               	movlw	37
  1506  001E  3195  2583  3180   	fcall	clear_ram0
  1507                           
  1508                           ; Clear objects allocated to BANK2
  1509  0021  3020               	movlw	low __pbssBANK2
  1510  0022  0084               	movwf	4
  1511  0023  3001               	movlw	high __pbssBANK2
  1512  0024  0085               	movwf	5
  1513  0025  301A               	movlw	26
  1514  0026  3195  2583  3180   	fcall	clear_ram0
  1515                           
  1516                           ; Initialize objects allocated to BANK1
  1517  0029  0021               	movlb	1	; select bank1
  1518  002A  3180  2003         	fcall	__pidataBANK1	;fetch initializer
  1519  002C  00E5               	movwf	__pdataBANK1& (0+127)
  1520  002D                     end_of_initialization:	
  1521                           ;End of C runtime variable initialization code
  1522                           
  1523  002D                     __end_of__initialization:	
  1524  002D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1525  002E  0020               	movlb	0
  1526  002F  3188  2805         	ljmp	_main	;jump to C main() function
  1527                           
  1528                           	psect	bssCOMMON
  1529  007C                     __pbssCOMMON:	
  1530  007C                     _Talking:	
  1531  007C                     	ds	1
  1532                           
  1533                           	psect	bssBANK1
  1534  00A0                     __pbssBANK1:	
  1535  00A0                     _input_buffer:	
  1536  00A0                     	ds	26
  1537  00BA                     _Battery:	
  1538  00BA                     	ds	3
  1539  00BD                     _count:	
  1540  00BD                     	ds	2
  1541  00BF                     _ticker:	
  1542  00BF                     	ds	2
  1543  00C1                     _time:	
  1544  00C1                     	ds	2
  1545  00C3                     _Mode:	
  1546  00C3                     	ds	1
  1547  00C4                     _Shutdown:	
  1548  00C4                     	ds	1
  1549                           
  1550                           	psect	dataBANK1
  1551  00E5                     __pdataBANK1:	
  1552  00E5                     _Transmit_stall:	
  1553  00E5                     	ds	1
  1554                           
  1555                           	psect	bssBANK2
  1556  0120                     __pbssBANK2:	
  1557  0120                     _output_buffer:	
  1558  0120                     	ds	26
  1559                           
  1560                           	psect	clrtext
  1561  1583                     clear_ram0:	
  1562                           ;	Called with FSR0 containing the base address, and
  1563                           ;	WREG with the size to clear
  1564                           
  1565  1583  0064               	clrwdt	;clear the watchdog before getting into this loop
  1566  1584                     clrloop0:	
  1567  1584  0180               	clrf	0	;clear RAM location pointed to by FSR
  1568  1585  3101               	addfsr 0,1
  1569  1586  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1570  1587  2D84               	goto	clrloop0	;have we reached the end yet?
  1571  1588  3400               	retlw	0	;all done for this memory range, return
  1572                           
  1573                           	psect	cstackBANK1
  1574  00C5                     __pcstackBANK1:	
  1575  00C5                     ??_printf:	
  1576                           
  1577                           ; 1 bytes @ 0x0
  1578  00C5                     	ds	6
  1579  00CB                     _printf$1240:	
  1580                           
  1581                           ; 3 bytes @ 0x6
  1582  00CB                     	ds	3
  1583  00CE                     printf@flag:	
  1584                           
  1585                           ; 2 bytes @ 0x9
  1586  00CE                     	ds	2
  1587  00D0                     printf@ap:	
  1588                           
  1589                           ; 1 bytes @ 0xB
  1590  00D0                     	ds	1
  1591  00D1                     printf@prec:	
  1592                           
  1593                           ; 2 bytes @ 0xC
  1594  00D1                     	ds	2
  1595  00D3                     printf@val:	
  1596                           
  1597                           ; 4 bytes @ 0xE
  1598  00D3                     	ds	4
  1599  00D7                     printf@exp:	
  1600                           
  1601                           ; 2 bytes @ 0x12
  1602  00D7                     	ds	2
  1603  00D9                     printf@tmpval:	
  1604                           
  1605                           ; 4 bytes @ 0x14
  1606  00D9                     	ds	4
  1607  00DD                     printf@fval:	
  1608                           
  1609                           ; 3 bytes @ 0x18
  1610  00DD                     	ds	3
  1611  00E0                     printf@c:	
  1612                           
  1613                           ; 1 bytes @ 0x1B
  1614  00E0                     	ds	1
  1615  00E1                     ??_SetVOX:	
  1616  00E1                     ??_SetMIC:	
  1617                           ; 1 bytes @ 0x1C
  1618                           
  1619  00E1                     SetVolume@volume:	
  1620                           ; 1 bytes @ 0x1C
  1621                           
  1622                           
  1623                           ; 1 bytes @ 0x1C
  1624  00E1                     	ds	4
  1625                           
  1626                           	psect	cstackCOMMON
  1627  0070                     __pcstackCOMMON:	
  1628  0070                     ?_Start:	
  1629  0070                     ?_RadioBegin:	
  1630                           ; 1 bytes @ 0x0
  1631                           
  1632  0070                     ?_LEDOff:	
  1633                           ; 1 bytes @ 0x0
  1634                           
  1635  0070                     ?_RadioOperation:	
  1636                           ; 1 bytes @ 0x0
  1637                           
  1638  0070                     ?_ADC_Initialize:	
  1639                           ; 1 bytes @ 0x0
  1640                           
  1641  0070                     ?_EUSART1_Initialize:	
  1642                           ; 1 bytes @ 0x0
  1643                           
  1644  0070                     ?_INTERRUPT_Initialize:	
  1645                           ; 1 bytes @ 0x0
  1646                           
  1647  0070                     ?_TMR2_Initialize:	
  1648                           ; 1 bytes @ 0x0
  1649                           
  1650  0070                     ?_TMR2_ISR:	
  1651                           ; 1 bytes @ 0x0
  1652                           
  1653  0070                     ??_TMR2_ISR:	
  1654                           ; 1 bytes @ 0x0
  1655                           
  1656  0070                     ?_SetCommandMode:	
  1657                           ; 1 bytes @ 0x0
  1658                           
  1659  0070                     ?_SetFrequency:	
  1660                           ; 1 bytes @ 0x0
  1661                           
  1662  0070                     ?_SetPowerSave:	
  1663                           ; 1 bytes @ 0x0
  1664                           
  1665  0070                     ?_SetVolume:	
  1666                           ; 1 bytes @ 0x0
  1667                           
  1668  0070                     ?_SetADCChannel:	
  1669                           ; 1 bytes @ 0x0
  1670                           
  1671  0070                     ?_INTERRUPT_InterruptManager:	
  1672                           ; 1 bytes @ 0x0
  1673                           
  1674  0070                     ??_INTERRUPT_InterruptManager:	
  1675                           ; 1 bytes @ 0x0
  1676                           
  1677  0070                     ?_ReadCharger:	
  1678                           ; 1 bytes @ 0x0
  1679                           
  1680  0070                     ?_ClearTicker:	
  1681                           ; 1 bytes @ 0x0
  1682                           
  1683  0070                     ?_EUSART_Write:	
  1684                           ; 1 bytes @ 0x0
  1685                           
  1686  0070                     ?_putch:	
  1687                           ; 1 bytes @ 0x0
  1688                           
  1689  0070                     ?_SR_FRSTalk:	
  1690                           ; 1 bytes @ 0x0
  1691                           
  1692  0070                     ?_SR_FRSPowerDown:	
  1693                           ; 1 bytes @ 0x0
  1694                           
  1695  0070                     ?_SR_FRSStart:	
  1696                           ; 1 bytes @ 0x0
  1697                           
  1698  0070                     ?_main:	
  1699                           ; 1 bytes @ 0x0
  1700                           
  1701  0070                     ?_GetTicker:	
  1702                           ; 2 bytes @ 0x0
  1703                           
  1704                           
  1705                           ; 2 bytes @ 0x0
  1706  0070                     	ds	1
  1707  0071                     ?___ftge:	
  1708  0071                     ??_Start:	
  1709                           ; 1 bit 
  1710                           
  1711  0071                     ??_LEDOff:	
  1712                           ; 1 bytes @ 0x1
  1713                           
  1714  0071                     ?_Delay:	
  1715                           ; 1 bytes @ 0x1
  1716                           
  1717  0071                     ??_ADC_Initialize:	
  1718                           ; 1 bytes @ 0x1
  1719                           
  1720  0071                     ??_EUSART1_Initialize:	
  1721                           ; 1 bytes @ 0x1
  1722                           
  1723  0071                     ??_INTERRUPT_Initialize:	
  1724                           ; 1 bytes @ 0x1
  1725                           
  1726  0071                     ??_TMR2_Initialize:	
  1727                           ; 1 bytes @ 0x1
  1728                           
  1729  0071                     ??_SetADCChannel:	
  1730                           ; 1 bytes @ 0x1
  1731                           
  1732  0071                     ??_ReadCharger:	
  1733                           ; 1 bytes @ 0x1
  1734                           
  1735  0071                     ??_ClearTicker:	
  1736                           ; 1 bytes @ 0x1
  1737                           
  1738  0071                     ??_GetTicker:	
  1739                           ; 1 bytes @ 0x1
  1740                           
  1741  0071                     ??_EUSART_Write:	
  1742                           ; 1 bytes @ 0x1
  1743                           
  1744  0071                     ??_SR_FRSTalk:	
  1745                           ; 1 bytes @ 0x1
  1746                           
  1747  0071                     ??_SR_FRSPowerDown:	
  1748                           ; 1 bytes @ 0x1
  1749                           
  1750  0071                     ?___awmod:	
  1751                           ; 1 bytes @ 0x1
  1752                           
  1753  0071                     ?___ftpack:	
  1754                           ; 2 bytes @ 0x1
  1755                           
  1756  0071                     ?___ftneg:	
  1757                           ; 3 bytes @ 0x1
  1758                           
  1759  0071                     ?__tdiv_to_l_:	
  1760                           ; 3 bytes @ 0x1
  1761                           
  1762  0071                     ?__div_to_l_:	
  1763                           ; 4 bytes @ 0x1
  1764                           
  1765  0071                     ?___lldiv:	
  1766                           ; 4 bytes @ 0x1
  1767                           
  1768  0071                     EUSART_Write@txData:	
  1769                           ; 4 bytes @ 0x1
  1770                           
  1771  0071                     SetADCChannel@ch:	
  1772                           ; 1 bytes @ 0x1
  1773                           
  1774  0071                     Delay@wait:	
  1775                           ; 1 bytes @ 0x1
  1776                           
  1777  0071                     ___awmod@divisor:	
  1778                           ; 2 bytes @ 0x1
  1779                           
  1780  0071                     __div_to_l_@f1:	
  1781                           ; 2 bytes @ 0x1
  1782                           
  1783  0071                     ___ftpack@arg:	
  1784                           ; 3 bytes @ 0x1
  1785                           
  1786  0071                     __tdiv_to_l_@f1:	
  1787                           ; 3 bytes @ 0x1
  1788                           
  1789  0071                     ___ftge@ff1:	
  1790                           ; 3 bytes @ 0x1
  1791                           
  1792  0071                     ___ftneg@f1:	
  1793                           ; 3 bytes @ 0x1
  1794                           
  1795  0071                     ___lldiv@divisor:	
  1796                           ; 3 bytes @ 0x1
  1797                           
  1798                           
  1799                           ; 4 bytes @ 0x1
  1800  0071                     	ds	1
  1801  0072                     ??_putch:	
  1802  0072                     ?_ReadVoltage:	
  1803                           ; 1 bytes @ 0x2
  1804                           
  1805  0072                     putch@txData:	
  1806                           ; 2 bytes @ 0x2
  1807                           
  1808                           
  1809                           ; 1 bytes @ 0x2
  1810  0072                     	ds	1
  1811  0073                     ??_Delay:	
  1812  0073                     ___awmod@dividend:	
  1813                           ; 1 bytes @ 0x3
  1814                           
  1815                           
  1816                           ; 2 bytes @ 0x3
  1817  0073                     	ds	1
  1818  0074                     ??___ftneg:	
  1819  0074                     ___ftpack@exp:	
  1820                           ; 1 bytes @ 0x4
  1821                           
  1822  0074                     Delay@x:	
  1823                           ; 1 bytes @ 0x4
  1824                           
  1825  0074                     __div_to_l_@f2:	
  1826                           ; 2 bytes @ 0x4
  1827                           
  1828  0074                     __tdiv_to_l_@f2:	
  1829                           ; 3 bytes @ 0x4
  1830                           
  1831  0074                     ___ftge@ff2:	
  1832                           ; 3 bytes @ 0x4
  1833                           
  1834                           
  1835                           ; 3 bytes @ 0x4
  1836  0074                     	ds	1
  1837  0075                     ??_ReadVoltage:	
  1838  0075                     ??___awmod:	
  1839                           ; 1 bytes @ 0x5
  1840                           
  1841  0075                     ReadVoltage@ch:	
  1842                           ; 1 bytes @ 0x5
  1843                           
  1844  0075                     ___ftpack@sign:	
  1845                           ; 1 bytes @ 0x5
  1846                           
  1847  0075                     ___lldiv@dividend:	
  1848                           ; 1 bytes @ 0x5
  1849                           
  1850                           
  1851                           ; 4 bytes @ 0x5
  1852  0075                     	ds	1
  1853  0076                     ??___ftpack:	
  1854  0076                     ___awmod@counter:	
  1855                           ; 1 bytes @ 0x6
  1856                           
  1857                           
  1858                           ; 1 bytes @ 0x6
  1859  0076                     	ds	1
  1860  0077                     ??__tdiv_to_l_:	
  1861  0077                     ??___ftge:	
  1862                           ; 1 bytes @ 0x7
  1863                           
  1864  0077                     ___awmod@sign:	
  1865                           ; 1 bytes @ 0x7
  1866                           
  1867                           
  1868                           ; 1 bytes @ 0x7
  1869  0077                     	ds	1
  1870  0078                     ?___awdiv:	
  1871  0078                     ___awdiv@divisor:	
  1872                           ; 2 bytes @ 0x8
  1873                           
  1874                           
  1875                           ; 2 bytes @ 0x8
  1876  0078                     	ds	1
  1877  0079                     ??___lldiv:	
  1878  0079                     ??___lltoft:	
  1879                           ; 1 bytes @ 0x9
  1880                           
  1881  0079                     ?___awtoft:	
  1882                           ; 1 bytes @ 0x9
  1883                           
  1884  0079                     ___awtoft@c:	
  1885                           ; 3 bytes @ 0x9
  1886                           
  1887                           
  1888                           ; 2 bytes @ 0x9
  1889  0079                     	ds	1
  1890  007A                     ??___llmod:	
  1891  007A                     ___lltoft@exp:	
  1892                           ; 1 bytes @ 0xA
  1893                           
  1894  007A                     ___awdiv@dividend:	
  1895                           ; 1 bytes @ 0xA
  1896                           
  1897                           
  1898                           ; 2 bytes @ 0xA
  1899  007A                     	ds	1
  1900  007B                     ___llmod@counter:	
  1901                           
  1902                           ; 1 bytes @ 0xB
  1903  007B                     	ds	1
  1904  007C                     ??_RadioBegin:	
  1905  007C                     ??_SetCommandMode:	
  1906                           ; 1 bytes @ 0xC
  1907                           
  1908  007C                     ??_SetFrequency:	
  1909                           ; 1 bytes @ 0xC
  1910                           
  1911  007C                     ??_SetPowerSave:	
  1912                           ; 1 bytes @ 0xC
  1913                           
  1914  007C                     ??_main:	
  1915                           ; 1 bytes @ 0xC
  1916                           
  1917  007C                     ??_SR_FRSStart:	
  1918                           ; 1 bytes @ 0xC
  1919                           
  1920  007C                     ??___wmul:	
  1921                           ; 1 bytes @ 0xC
  1922                           
  1923  007C                     ??___ftsub:	
  1924                           ; 1 bytes @ 0xC
  1925                           
  1926                           
  1927                           	psect	cstackBANK0
  1928  0020                     __pcstackBANK0:	
  1929                           ; 1 bytes @ 0xC
  1930                           
  1931  0020                     ??__div_to_l_:	
  1932  0020                     ??___awdiv:	
  1933                           ; 1 bytes @ 0x0
  1934                           
  1935  0020                     ??___awtoft:	
  1936                           ; 1 bytes @ 0x0
  1937                           
  1938  0020                     ?___lltoft:	
  1939                           ; 1 bytes @ 0x0
  1940                           
  1941  0020                     __tdiv_to_l_@quot:	
  1942                           ; 3 bytes @ 0x0
  1943                           
  1944  0020                     ___lldiv@quotient:	
  1945                           ; 4 bytes @ 0x0
  1946                           
  1947  0020                     ___lltoft@c:	
  1948                           ; 4 bytes @ 0x0
  1949                           
  1950                           
  1951                           ; 4 bytes @ 0x0
  1952  0020                     	ds	1
  1953  0021                     ___awdiv@counter:	
  1954                           
  1955                           ; 1 bytes @ 0x1
  1956  0021                     	ds	1
  1957  0022                     ___awdiv@sign:	
  1958  0022                     ___awtoft@sign:	
  1959                           ; 1 bytes @ 0x2
  1960                           
  1961                           
  1962                           ; 1 bytes @ 0x2
  1963  0022                     	ds	1
  1964  0023                     ___awdiv@quotient:	
  1965                           
  1966                           ; 2 bytes @ 0x3
  1967  0023                     	ds	1
  1968  0024                     __tdiv_to_l_@cntr:	
  1969  0024                     ___lldiv@counter:	
  1970                           ; 1 bytes @ 0x4
  1971                           
  1972                           
  1973                           ; 1 bytes @ 0x4
  1974  0024                     	ds	1
  1975  0025                     ?___wmul:	
  1976  0025                     ?___llmod:	
  1977                           ; 2 bytes @ 0x5
  1978                           
  1979  0025                     __tdiv_to_l_@exp1:	
  1980                           ; 4 bytes @ 0x5
  1981                           
  1982  0025                     ___wmul@multiplier:	
  1983                           ; 1 bytes @ 0x5
  1984                           
  1985  0025                     ___llmod@divisor:	
  1986                           ; 2 bytes @ 0x5
  1987                           
  1988                           
  1989                           ; 4 bytes @ 0x5
  1990  0025                     	ds	2
  1991  0027                     ___wmul@multiplicand:	
  1992                           
  1993                           ; 2 bytes @ 0x7
  1994  0027                     	ds	1
  1995  0028                     __div_to_l_@quot:	
  1996                           
  1997                           ; 4 bytes @ 0x8
  1998  0028                     	ds	1
  1999  0029                     ___wmul@product:	
  2000  0029                     ___llmod@dividend:	
  2001                           ; 2 bytes @ 0x9
  2002                           
  2003                           
  2004                           ; 4 bytes @ 0x9
  2005  0029                     	ds	2
  2006  002B                     ?___ftmul:	
  2007  002B                     ___ftmul@f1:	
  2008                           ; 3 bytes @ 0xB
  2009                           
  2010                           
  2011                           ; 3 bytes @ 0xB
  2012  002B                     	ds	1
  2013  002C                     __div_to_l_@cntr:	
  2014                           
  2015                           ; 1 bytes @ 0xC
  2016  002C                     	ds	1
  2017  002D                     __div_to_l_@exp1:	
  2018                           
  2019                           ; 1 bytes @ 0xD
  2020  002D                     	ds	1
  2021  002E                     ___ftmul@f2:	
  2022                           
  2023                           ; 3 bytes @ 0xE
  2024  002E                     	ds	3
  2025  0031                     ??___ftmul:	
  2026                           
  2027                           ; 1 bytes @ 0x11
  2028  0031                     	ds	4
  2029  0035                     ___ftmul@exp:	
  2030                           
  2031                           ; 1 bytes @ 0x15
  2032  0035                     	ds	1
  2033  0036                     ___ftmul@f3_as_product:	
  2034                           
  2035                           ; 3 bytes @ 0x16
  2036  0036                     	ds	3
  2037  0039                     ___ftmul@cntr:	
  2038                           
  2039                           ; 1 bytes @ 0x19
  2040  0039                     	ds	1
  2041  003A                     ___ftmul@sign:	
  2042                           
  2043                           ; 1 bytes @ 0x1A
  2044  003A                     	ds	1
  2045  003B                     ?_fround:	
  2046  003B                     ?_scale:	
  2047                           ; 3 bytes @ 0x1B
  2048                           
  2049  003B                     ?___ftdiv:	
  2050                           ; 3 bytes @ 0x1B
  2051                           
  2052  003B                     ___ftdiv@f2:	
  2053                           ; 3 bytes @ 0x1B
  2054                           
  2055                           
  2056                           ; 3 bytes @ 0x1B
  2057  003B                     	ds	3
  2058  003E                     ??_fround:	
  2059  003E                     ??_scale:	
  2060                           ; 1 bytes @ 0x1E
  2061                           
  2062  003E                     ___ftdiv@f1:	
  2063                           ; 1 bytes @ 0x1E
  2064                           
  2065                           
  2066                           ; 3 bytes @ 0x1E
  2067  003E                     	ds	2
  2068  0040                     _scale$1239:	
  2069                           
  2070                           ; 3 bytes @ 0x20
  2071  0040                     	ds	1
  2072  0041                     ??___ftdiv:	
  2073                           
  2074                           ; 1 bytes @ 0x21
  2075  0041                     	ds	1
  2076  0042                     _fround$1238:	
  2077                           
  2078                           ; 3 bytes @ 0x22
  2079  0042                     	ds	1
  2080  0043                     scale@scl:	
  2081                           
  2082                           ; 1 bytes @ 0x23
  2083  0043                     	ds	1
  2084  0044                     ?___fttol:	
  2085  0044                     ___fttol@f1:	
  2086                           ; 4 bytes @ 0x24
  2087                           
  2088                           
  2089                           ; 3 bytes @ 0x24
  2090  0044                     	ds	1
  2091  0045                     ___ftdiv@cntr:	
  2092  0045                     _fround$1237:	
  2093                           ; 1 bytes @ 0x25
  2094                           
  2095                           
  2096                           ; 3 bytes @ 0x25
  2097  0045                     	ds	1
  2098  0046                     ___ftdiv@f3:	
  2099                           
  2100                           ; 3 bytes @ 0x26
  2101  0046                     	ds	2
  2102  0048                     ??___fttol:	
  2103  0048                     fround@prec:	
  2104                           ; 1 bytes @ 0x28
  2105                           
  2106                           
  2107                           ; 1 bytes @ 0x28
  2108  0048                     	ds	1
  2109  0049                     ?___ftadd:	
  2110  0049                     ___ftdiv@exp:	
  2111                           ; 3 bytes @ 0x29
  2112                           
  2113  0049                     ___ftadd@f1:	
  2114                           ; 1 bytes @ 0x29
  2115                           
  2116                           
  2117                           ; 3 bytes @ 0x29
  2118  0049                     	ds	1
  2119  004A                     ___ftdiv@sign:	
  2120                           
  2121                           ; 1 bytes @ 0x2A
  2122  004A                     	ds	1
  2123  004B                     ??_RadioOperation:	
  2124                           
  2125                           ; 1 bytes @ 0x2B
  2126  004B                     	ds	1
  2127  004C                     ___fttol@sign1:	
  2128  004C                     ___ftadd@f2:	
  2129                           ; 1 bytes @ 0x2C
  2130                           
  2131                           
  2132                           ; 3 bytes @ 0x2C
  2133  004C                     	ds	1
  2134  004D                     ___fttol@lval:	
  2135                           
  2136                           ; 4 bytes @ 0x2D
  2137  004D                     	ds	2
  2138  004F                     ??___ftadd:	
  2139                           
  2140                           ; 1 bytes @ 0x2F
  2141  004F                     	ds	2
  2142  0051                     ___fttol@exp1:	
  2143                           
  2144                           ; 1 bytes @ 0x31
  2145  0051                     	ds	2
  2146  0053                     ___ftadd@sign:	
  2147                           
  2148                           ; 1 bytes @ 0x33
  2149  0053                     	ds	1
  2150  0054                     ___ftadd@exp2:	
  2151                           
  2152                           ; 1 bytes @ 0x34
  2153  0054                     	ds	1
  2154  0055                     ___ftadd@exp1:	
  2155                           
  2156                           ; 1 bytes @ 0x35
  2157  0055                     	ds	1
  2158  0056                     ?___ftsub:	
  2159  0056                     ___ftsub@f2:	
  2160                           ; 3 bytes @ 0x36
  2161                           
  2162                           
  2163                           ; 3 bytes @ 0x36
  2164  0056                     	ds	3
  2165  0059                     ___ftsub@f1:	
  2166                           
  2167                           ; 3 bytes @ 0x39
  2168  0059                     	ds	3
  2169  005C                     ?_printf:	
  2170  005C                     printf@f:	
  2171                           ; 2 bytes @ 0x3C
  2172                           
  2173                           
  2174                           ; 2 bytes @ 0x3C
  2175  005C                     	ds	18
  2176  006E                     ??_SetVolume:	
  2177  006E                     ?_SetVOX:	
  2178                           ; 1 bytes @ 0x4E
  2179                           
  2180  006E                     ?_SetMIC:	
  2181                           ; 1 bytes @ 0x4E
  2182                           
  2183  006E                     SetMIC@scram:	
  2184                           ; 1 bytes @ 0x4E
  2185                           
  2186  006E                     SetVOX@volume:	
  2187                           ; 1 bytes @ 0x4E
  2188                           
  2189                           
  2190                           ; 2 bytes @ 0x4E
  2191  006E                     	ds	1
  2192  006F                     SetMIC@volume:	
  2193                           
  2194                           ; 1 bytes @ 0x4F
  2195  006F                     	ds	1
  2196                           
  2197                           	psect	maintext
  2198  0805                     __pmaintext:	
  2199 ;;
  2200 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2201 ;;
  2202 ;; *************** function _main *****************
  2203 ;; Defined at:
  2204 ;;		line 16 in file "Main.c"
  2205 ;; Parameters:    Size  Location     Type
  2206 ;;		None
  2207 ;; Auto vars:     Size  Location     Type
  2208 ;;		None
  2209 ;; Return value:  Size  Location     Type
  2210 ;;                  2   12[None  ] int 
  2211 ;; Registers used:
  2212 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2213 ;; Tracked objects:
  2214 ;;		On entry : B1F/0
  2215 ;;		On exit  : 0/0
  2216 ;;		Unchanged: 0/0
  2217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2222 ;;Total ram usage:        0 bytes
  2223 ;; Hardware stack levels required when called:    9
  2224 ;; This function calls:
  2225 ;;		_Delay
  2226 ;;		_LEDOff
  2227 ;;		_RadioBegin
  2228 ;;		_RadioOperation
  2229 ;;		_Start
  2230 ;; This function is called by:
  2231 ;;		Startup code after reset
  2232 ;; This function uses a non-reentrant model
  2233 ;;
  2234                           
  2235                           
  2236                           ;psect for function _main
  2237  0805                     _main:	
  2238                           
  2239                           ;Main.c: 17: Start();
  2240                           
  2241                           ;incstack = 0
  2242                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2243  0805  3196  26E9  3188   	fcall	_Start
  2244                           
  2245                           ;Main.c: 18: RadioBegin();
  2246  0808  3187  27FD  3188   	fcall	_RadioBegin
  2247                           
  2248                           ;Main.c: 20: LEDOff();
  2249  080B  3195  257E  3188   	fcall	_LEDOff
  2250  080E                     l3850:	
  2251                           ;Main.c: 21: while(1){
  2252                           
  2253                           
  2254                           ;Main.c: 22: RadioOperation();
  2255  080E  318B  239B  3188   	fcall	_RadioOperation
  2256                           
  2257                           ;Main.c: 23: Delay(100);
  2258  0811  3064               	movlw	100
  2259  0812  00F1               	movwf	Delay@wait
  2260  0813  3000               	movlw	0
  2261  0814  00F2               	movwf	Delay@wait+1
  2262  0815  3196  261F  3188   	fcall	_Delay
  2263  0818  280E               	goto	l3850
  2264  0819                     __end_of_main:	
  2265                           ;Main.c: 24: }
  2266                           ;Main.c: 25: return 0;
  2267                           ;	Return value of _main is never used
  2268                           
  2269                           
  2270                           	psect	text1
  2271  16E9                     __ptext1:	
  2272 ;; *************** function _Start *****************
  2273 ;; Defined at:
  2274 ;;		line 28 in file "Function.c"
  2275 ;; Parameters:    Size  Location     Type
  2276 ;;		None
  2277 ;; Auto vars:     Size  Location     Type
  2278 ;;		None
  2279 ;; Return value:  Size  Location     Type
  2280 ;;                  1    wreg      void 
  2281 ;; Registers used:
  2282 ;;		wreg, status,2, status,0, pclath, cstack
  2283 ;; Tracked objects:
  2284 ;;		On entry : 0/0
  2285 ;;		On exit  : 0/0
  2286 ;;		Unchanged: 0/0
  2287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2292 ;;Total ram usage:        0 bytes
  2293 ;; Hardware stack levels used:    1
  2294 ;; Hardware stack levels required when called:    3
  2295 ;; This function calls:
  2296 ;;		_ADC_Initialize
  2297 ;;		_EUSART1_Initialize
  2298 ;;		_INTERRUPT_Initialize
  2299 ;;		_TMR2_Initialize
  2300 ;; This function is called by:
  2301 ;;		_main
  2302 ;; This function uses a non-reentrant model
  2303 ;;
  2304                           
  2305                           
  2306                           ;psect for function _Start
  2307  16E9                     _Start:	
  2308                           
  2309                           ;Function.c: 32: OSCCONbits.IRCF = 13;
  2310                           
  2311                           ;incstack = 0
  2312                           ; Regs used in _Start: [wreg+status,2+status,0+pclath+cstack]
  2313  16E9  0021               	movlb	1	; select bank1
  2314  16EA  0819               	movf	25,w	;volatile
  2315  16EB  3987               	andlw	-121
  2316  16EC  3868               	iorlw	104
  2317  16ED  0099               	movwf	25	;volatile
  2318                           
  2319                           ;Function.c: 33: OSCCONbits.SCS = 2;
  2320  16EE  0819               	movf	25,w	;volatile
  2321  16EF  39FC               	andlw	-4
  2322  16F0  3802               	iorlw	2
  2323  16F1  0099               	movwf	25	;volatile
  2324                           
  2325                           ;Function.c: 34: OSCCONbits.SPLLEN = 0;
  2326  16F2  1399               	bcf	25,7	;volatile
  2327                           
  2328                           ;Function.c: 38: TRISCbits.TRISC7 = 0;
  2329  16F3  138E               	bcf	14,7	;volatile
  2330                           
  2331                           ;Function.c: 39: TRISCbits.TRISC6 = 0;
  2332  16F4  130E               	bcf	14,6	;volatile
  2333                           
  2334                           ;Function.c: 40: TRISCbits.TRISC5 = 0;
  2335  16F5  128E               	bcf	14,5	;volatile
  2336                           
  2337                           ;Function.c: 41: TRISCbits.TRISC4 = 0;
  2338  16F6  120E               	bcf	14,4	;volatile
  2339                           
  2340                           ;Function.c: 42: TRISCbits.TRISC3 = 0;
  2341  16F7  118E               	bcf	14,3	;volatile
  2342                           
  2343                           ;Function.c: 43: TRISAbits.TRISA2 = 1;
  2344  16F8  150C               	bsf	12,2	;volatile
  2345                           
  2346                           ;Function.c: 44: TRISCbits.TRISC0 = 1;
  2347  16F9  140E               	bsf	14,0	;volatile
  2348                           
  2349                           ;Function.c: 45: TRISCbits.TRISC1 = 1;
  2350  16FA  148E               	bsf	14,1	;volatile
  2351                           
  2352                           ;Function.c: 49: ANSELCbits.ANSC0 = 0;
  2353  16FB  0023               	movlb	3	; select bank3
  2354  16FC  100E               	bcf	14,0	;volatile
  2355                           
  2356                           ;Function.c: 50: ANSELCbits.ANSC1 = 0;
  2357  16FD  108E               	bcf	14,1	;volatile
  2358                           
  2359                           ;Function.c: 51: ANSELAbits.ANSA2 = 0;
  2360  16FE  110C               	bcf	12,2	;volatile
  2361                           
  2362                           ;Function.c: 52: ANSELCbits.ANSC3 = 0;
  2363  16FF  118E               	bcf	14,3	;volatile
  2364                           
  2365                           ;Function.c: 53: ANSELCbits.ANSC6 = 0;
  2366  1700  130E               	bcf	14,6	;volatile
  2367                           
  2368                           ;Function.c: 54: ANSELCbits.ANSC7 = 0;
  2369  1701  138E               	bcf	14,7	;volatile
  2370                           
  2371                           ;Function.c: 58: ADC_Initialize();
  2372  1702  3195  25A9  3196   	fcall	_ADC_Initialize
  2373                           
  2374                           ;Function.c: 62: EUSART1_Initialize();
  2375  1705  3195  25C7  3196   	fcall	_EUSART1_Initialize
  2376                           
  2377                           ;Function.c: 66: INTERRUPT_Initialize();
  2378  1708  3195  25B3  3196   	fcall	_INTERRUPT_Initialize
  2379                           
  2380                           ;Function.c: 67: TMR2_Initialize();
  2381  170B  3195  25BD         	fcall	_TMR2_Initialize
  2382  170D  0008               	return
  2383  170E                     __end_of_Start:	
  2384                           
  2385                           	psect	text2
  2386  15BD                     __ptext2:	
  2387 ;; *************** function _TMR2_Initialize *****************
  2388 ;; Defined at:
  2389 ;;		line 9 in file "Timer.c"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;		None
  2392 ;; Auto vars:     Size  Location     Type
  2393 ;;		None
  2394 ;; Return value:  Size  Location     Type
  2395 ;;                  1    wreg      void 
  2396 ;; Registers used:
  2397 ;;		wreg, status,2
  2398 ;; Tracked objects:
  2399 ;;		On entry : 0/0
  2400 ;;		On exit  : 0/0
  2401 ;;		Unchanged: 0/0
  2402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2407 ;;Total ram usage:        0 bytes
  2408 ;; Hardware stack levels used:    1
  2409 ;; Hardware stack levels required when called:    2
  2410 ;; This function calls:
  2411 ;;		Nothing
  2412 ;; This function is called by:
  2413 ;;		_Start
  2414 ;; This function uses a non-reentrant model
  2415 ;;
  2416                           
  2417                           
  2418                           ;psect for function _TMR2_Initialize
  2419  15BD                     _TMR2_Initialize:	
  2420                           
  2421                           ;Timer.c: 14: T2CON = 0x00;
  2422                           
  2423                           ;incstack = 0
  2424                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  2425  15BD  0020               	movlb	0	; select bank0
  2426  15BE  019C               	clrf	28	;volatile
  2427                           
  2428                           ;Timer.c: 15: T2CONbits.TMR2ON = 0;
  2429  15BF  111C               	bcf	28,2	;volatile
  2430                           
  2431                           ;Timer.c: 18: PR2 = 18;
  2432  15C0  3012               	movlw	18
  2433  15C1  009B               	movwf	27	;volatile
  2434                           
  2435                           ;Timer.c: 21: TMR2 = 0;
  2436  15C2  019A               	clrf	26	;volatile
  2437                           
  2438                           ;Timer.c: 24: PIR1bits.TMR2IF = 0;
  2439  15C3  1091               	bcf	17,1	;volatile
  2440                           
  2441                           ;Timer.c: 27: PIE1bits.TMR2IE = 1;
  2442  15C4  0021               	movlb	1	; select bank1
  2443  15C5  1491               	bsf	17,1	;volatile
  2444  15C6  0008               	return
  2445  15C7                     __end_of_TMR2_Initialize:	
  2446                           
  2447                           	psect	text3
  2448  15B3                     __ptext3:	
  2449 ;; *************** function _INTERRUPT_Initialize *****************
  2450 ;; Defined at:
  2451 ;;		line 78 in file "Function.c"
  2452 ;; Parameters:    Size  Location     Type
  2453 ;;		None
  2454 ;; Auto vars:     Size  Location     Type
  2455 ;;		None
  2456 ;; Return value:  Size  Location     Type
  2457 ;;                  1    wreg      void 
  2458 ;; Registers used:
  2459 ;;		status,2
  2460 ;; Tracked objects:
  2461 ;;		On entry : 0/0
  2462 ;;		On exit  : 0/0
  2463 ;;		Unchanged: 0/0
  2464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2469 ;;Total ram usage:        0 bytes
  2470 ;; Hardware stack levels used:    1
  2471 ;; Hardware stack levels required when called:    2
  2472 ;; This function calls:
  2473 ;;		Nothing
  2474 ;; This function is called by:
  2475 ;;		_Start
  2476 ;; This function uses a non-reentrant model
  2477 ;;
  2478                           
  2479                           
  2480                           ;psect for function _INTERRUPT_Initialize
  2481  15B3                     _INTERRUPT_Initialize:	
  2482                           
  2483                           ;Function.c: 80: INTCON = 0;
  2484                           
  2485                           ;incstack = 0
  2486                           ; Regs used in _INTERRUPT_Initialize: [status,2]
  2487  15B3  018B               	clrf	11	;volatile
  2488                           
  2489                           ;Function.c: 81: INTCONbits.TMR0IE = 0;
  2490  15B4  128B               	bcf	11,5	;volatile
  2491                           
  2492                           ;Function.c: 82: PIR1bits.TMR2IF = 0;
  2493  15B5  0020               	movlb	0	; select bank0
  2494  15B6  1091               	bcf	17,1	;volatile
  2495                           
  2496                           ;Function.c: 83: PIE1bits.TMR2IE = 1;
  2497  15B7  0021               	movlb	1	; select bank1
  2498  15B8  1491               	bsf	17,1	;volatile
  2499                           
  2500                           ;Function.c: 84: INTCONbits.TMR0IF = 0;
  2501  15B9  110B               	bcf	11,2	;volatile
  2502                           
  2503                           ;Function.c: 85: INTCONbits.GIE = 1;
  2504  15BA  178B               	bsf	11,7	;volatile
  2505                           
  2506                           ;Function.c: 86: INTCONbits.PEIE = 1;
  2507  15BB  170B               	bsf	11,6	;volatile
  2508  15BC  0008               	return
  2509  15BD                     __end_of_INTERRUPT_Initialize:	
  2510                           
  2511                           	psect	text4
  2512  15C7                     __ptext4:	
  2513 ;; *************** function _EUSART1_Initialize *****************
  2514 ;; Defined at:
  2515 ;;		line 10 in file "UART.c"
  2516 ;; Parameters:    Size  Location     Type
  2517 ;;		None
  2518 ;; Auto vars:     Size  Location     Type
  2519 ;;		None
  2520 ;; Return value:  Size  Location     Type
  2521 ;;                  1    wreg      void 
  2522 ;; Registers used:
  2523 ;;		wreg, status,2
  2524 ;; Tracked objects:
  2525 ;;		On entry : 0/0
  2526 ;;		On exit  : 0/0
  2527 ;;		Unchanged: 0/0
  2528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2533 ;;Total ram usage:        0 bytes
  2534 ;; Hardware stack levels used:    1
  2535 ;; Hardware stack levels required when called:    2
  2536 ;; This function calls:
  2537 ;;		Nothing
  2538 ;; This function is called by:
  2539 ;;		_Start
  2540 ;; This function uses a non-reentrant model
  2541 ;;
  2542                           
  2543                           
  2544                           ;psect for function _EUSART1_Initialize
  2545  15C7                     _EUSART1_Initialize:	
  2546                           
  2547                           ;UART.c: 12: BAUDCON = 0x08;
  2548                           
  2549                           ;incstack = 0
  2550                           ; Regs used in _EUSART1_Initialize: [wreg+status,2]
  2551  15C7  3008               	movlw	8
  2552  15C8  0023               	movlb	3	; select bank3
  2553  15C9  009F               	movwf	31	;volatile
  2554                           
  2555                           ;UART.c: 15: RCSTA = 0x90;
  2556  15CA  3090               	movlw	144
  2557  15CB  009D               	movwf	29	;volatile
  2558                           
  2559                           ;UART.c: 18: TXSTA = 0x24;
  2560  15CC  3024               	movlw	36
  2561  15CD  009E               	movwf	30	;volatile
  2562                           
  2563                           ;UART.c: 21: SPBRGL = 0x67;
  2564  15CE  3067               	movlw	103
  2565  15CF  009B               	movwf	27	;volatile
  2566                           
  2567                           ;UART.c: 24: SPBRGH = 0x00;
  2568  15D0  019C               	clrf	28	;volatile
  2569  15D1  0008               	return
  2570  15D2                     __end_of_EUSART1_Initialize:	
  2571                           
  2572                           	psect	text5
  2573  15A9                     __ptext5:	
  2574 ;; *************** function _ADC_Initialize *****************
  2575 ;; Defined at:
  2576 ;;		line 4 in file "ADC.c"
  2577 ;; Parameters:    Size  Location     Type
  2578 ;;		None
  2579 ;; Auto vars:     Size  Location     Type
  2580 ;;		None
  2581 ;; Return value:  Size  Location     Type
  2582 ;;                  1    wreg      void 
  2583 ;; Registers used:
  2584 ;;		None
  2585 ;; Tracked objects:
  2586 ;;		On entry : 0/0
  2587 ;;		On exit  : 0/0
  2588 ;;		Unchanged: 0/0
  2589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2593 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2594 ;;Total ram usage:        0 bytes
  2595 ;; Hardware stack levels used:    1
  2596 ;; Hardware stack levels required when called:    2
  2597 ;; This function calls:
  2598 ;;		Nothing
  2599 ;; This function is called by:
  2600 ;;		_Start
  2601 ;; This function uses a non-reentrant model
  2602 ;;
  2603                           
  2604                           
  2605                           ;psect for function _ADC_Initialize
  2606  15A9                     _ADC_Initialize:	
  2607                           
  2608                           ;ADC.c: 5: FVRCONbits.ADFVR0 = 1;
  2609                           
  2610                           ;incstack = 0
  2611                           ; Regs used in _ADC_Initialize: []
  2612  15A9  0022               	movlb	2	; select bank2
  2613  15AA  1417               	bsf	23,0	;volatile
  2614                           
  2615                           ;ADC.c: 6: FVRCONbits.ADFVR1 = 1;
  2616  15AB  1497               	bsf	23,1	;volatile
  2617                           
  2618                           ;ADC.c: 7: ADCON1bits.ADFM = 1;
  2619  15AC  0021               	movlb	1	; select bank1
  2620  15AD  179E               	bsf	30,7	;volatile
  2621                           
  2622                           ;ADC.c: 8: ADCON1bits.ADCS0 = 0;
  2623  15AE  121E               	bcf	30,4	;volatile
  2624                           
  2625                           ;ADC.c: 9: ADCON1bits.ADCS1 = 0;
  2626  15AF  129E               	bcf	30,5	;volatile
  2627                           
  2628                           ;ADC.c: 10: ADCON1bits.ADCS2 = 1;
  2629  15B0  171E               	bsf	30,6	;volatile
  2630                           
  2631                           ;ADC.c: 11: ADCON0bits.ADON = 1;
  2632  15B1  141D               	bsf	29,0	;volatile
  2633  15B2  0008               	return
  2634  15B3                     __end_of_ADC_Initialize:	
  2635                           
  2636                           	psect	text6
  2637  0B9B                     __ptext6:	
  2638 ;; *************** function _RadioOperation *****************
  2639 ;; Defined at:
  2640 ;;		line 25 in file "Radio.c"
  2641 ;; Parameters:    Size  Location     Type
  2642 ;;		None
  2643 ;; Auto vars:     Size  Location     Type
  2644 ;;		None
  2645 ;; Return value:  Size  Location     Type
  2646 ;;                  1    wreg      void 
  2647 ;; Registers used:
  2648 ;;		wreg, status,2, status,0, pclath, cstack
  2649 ;; Tracked objects:
  2650 ;;		On entry : 0/0
  2651 ;;		On exit  : 0/0
  2652 ;;		Unchanged: 0/0
  2653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2656 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2657 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2658 ;;Total ram usage:        1 bytes
  2659 ;; Hardware stack levels used:    1
  2660 ;; Hardware stack levels required when called:    4
  2661 ;; This function calls:
  2662 ;;		_ClearTicker
  2663 ;;		_GetTicker
  2664 ;;		_ReadCharger
  2665 ;;		_ReadVoltage
  2666 ;;		_SR_FRSPowerDown
  2667 ;;		_SR_FRSTalk
  2668 ;;		___awtoft
  2669 ;;		___ftdiv
  2670 ;;		___ftge
  2671 ;;		___ftmul
  2672 ;; This function is called by:
  2673 ;;		_main
  2674 ;; This function uses a non-reentrant model
  2675 ;;
  2676                           
  2677                           
  2678                           ;psect for function _RadioOperation
  2679  0B9B                     _RadioOperation:	
  2680                           
  2681                           ;Radio.c: 26: if(!PORTAbits.RA2 && !Talking){
  2682                           
  2683                           ;incstack = 0
  2684                           ; Regs used in _RadioOperation: [wreg+status,2+status,0+pclath+cstack]
  2685  0B9B  0020               	movlb	0	; select bank0
  2686  0B9C  190C               	btfsc	12,2	;volatile
  2687  0B9D  2BA6               	goto	l243
  2688  0B9E  087C               	movf	_Talking,w
  2689  0B9F  1D03               	btfss	3,2
  2690  0BA0  2BA6               	goto	l243
  2691                           
  2692                           ;Radio.c: 27: count++;
  2693  0BA1  3001               	movlw	1
  2694  0BA2  0021               	movlb	1	; select bank1
  2695  0BA3  07BD               	addwf	_count^(0+128),f
  2696  0BA4  3000               	movlw	0
  2697  0BA5  3DBE               	addwfc	(_count+1)^(0+128),f
  2698  0BA6                     l243:	
  2699                           
  2700                           ;Radio.c: 28: }
  2701                           ;Radio.c: 29: if((count > 5) && !Talking){
  2702  0BA6  0021               	movlb	1	; select bank1
  2703  0BA7  083E               	movf	(_count+1)^(0+128),w
  2704  0BA8  3A80               	xorlw	128
  2705  0BA9  0020               	movlb	0	; select bank0
  2706  0BAA  00CB               	movwf	??_RadioOperation
  2707  0BAB  3080               	movlw	128
  2708  0BAC  024B               	subwf	??_RadioOperation,w
  2709  0BAD  1D03               	skipz
  2710  0BAE  2BB2               	goto	u5965
  2711  0BAF  3006               	movlw	6
  2712  0BB0  0021               	movlb	1	; select bank1
  2713  0BB1  023D               	subwf	_count^(0+128),w
  2714  0BB2                     u5965:	
  2715  0BB2  1C03               	skipc
  2716  0BB3  2BC1               	goto	l3790
  2717  0BB4  087C               	movf	_Talking,w
  2718  0BB5  1D03               	btfss	3,2
  2719  0BB6  2BC1               	goto	l3790
  2720                           
  2721                           ;Radio.c: 30: SR_FRSTalk();
  2722  0BB7  3195  25EC  318B   	fcall	_SR_FRSTalk
  2723                           
  2724                           ;Radio.c: 31: PORTCbits.RC3 = 1;
  2725  0BBA  0020               	movlb	0	; select bank0
  2726  0BBB  158E               	bsf	14,3	;volatile
  2727                           
  2728                           ;Radio.c: 32: Talking = 1;
  2729  0BBC  01FC               	clrf	_Talking
  2730  0BBD  0AFC               	incf	_Talking,f
  2731                           
  2732                           ;Radio.c: 34: ClearTicker();
  2733  0BBE  3195  257A  318B   	fcall	_ClearTicker
  2734  0BC1                     l3790:	
  2735                           
  2736                           ;Radio.c: 35: }
  2737                           ;Radio.c: 36: if(Talking && PORTAbits.RA2){
  2738  0BC1  087C               	movf	_Talking,w
  2739  0BC2  1903               	btfsc	3,2
  2740  0BC3  2BE2               	goto	l3804
  2741  0BC4  0020               	movlb	0	; select bank0
  2742  0BC5  1D0C               	btfss	12,2	;volatile
  2743  0BC6  2BE2               	goto	l3804
  2744                           
  2745                           ;Radio.c: 37: count--;
  2746  0BC7  30FF               	movlw	255
  2747  0BC8  0021               	movlb	1	; select bank1
  2748  0BC9  07BD               	addwf	_count^(0+128),f
  2749  0BCA  30FF               	movlw	255
  2750  0BCB  3DBE               	addwfc	(_count+1)^(0+128),f
  2751                           
  2752                           ;Radio.c: 38: if(count < 5){
  2753  0BCC  083E               	movf	(_count+1)^(0+128),w
  2754  0BCD  3A80               	xorlw	128
  2755  0BCE  0020               	movlb	0	; select bank0
  2756  0BCF  00CB               	movwf	??_RadioOperation
  2757  0BD0  3080               	movlw	128
  2758  0BD1  024B               	subwf	??_RadioOperation,w
  2759  0BD2  1D03               	skipz
  2760  0BD3  2BD7               	goto	u6005
  2761  0BD4  3005               	movlw	5
  2762  0BD5  0021               	movlb	1	; select bank1
  2763  0BD6  023D               	subwf	_count^(0+128),w
  2764  0BD7                     u6005:	
  2765  0BD7  1803               	skipnc
  2766  0BD8  2BE2               	goto	l3804
  2767                           
  2768                           ;Radio.c: 39: PORTCbits.RC3 = 0;
  2769  0BD9  0020               	movlb	0	; select bank0
  2770  0BDA  118E               	bcf	14,3	;volatile
  2771                           
  2772                           ;Radio.c: 40: SR_FRSTalk();
  2773  0BDB  3195  25EC  318B   	fcall	_SR_FRSTalk
  2774                           
  2775                           ;Radio.c: 42: count = 0;
  2776  0BDE  0021               	movlb	1	; select bank1
  2777  0BDF  01BD               	clrf	_count^(0+128)
  2778  0BE0  01BE               	clrf	(_count+1)^(0+128)
  2779                           
  2780                           ;Radio.c: 43: Talking = 0;
  2781  0BE1  01FC               	clrf	_Talking
  2782  0BE2                     l3804:	
  2783                           
  2784                           ;Radio.c: 44: }
  2785                           ;Radio.c: 45: }
  2786                           ;Radio.c: 46: if(Talking && !PORTAbits.RA2){
  2787  0BE2  087C               	movf	_Talking,w
  2788  0BE3  1903               	btfsc	3,2
  2789  0BE4  2BED               	goto	l3810
  2790  0BE5  0020               	movlb	0	; select bank0
  2791  0BE6  190C               	btfsc	12,2	;volatile
  2792  0BE7  2BED               	goto	l3810
  2793                           
  2794                           ;Radio.c: 47: count = 5;
  2795  0BE8  3005               	movlw	5
  2796  0BE9  0021               	movlb	1	; select bank1
  2797  0BEA  00BD               	movwf	_count^(0+128)
  2798  0BEB  3000               	movlw	0
  2799  0BEC  00BE               	movwf	(_count^(0+128)+1)
  2800  0BED                     l3810:	
  2801                           
  2802                           ;Radio.c: 48: }
  2803                           ;Radio.c: 49: if(GetTicker() > 100000){
  2804  0BED  3180  2002  318B   	fcall	_GetTicker
  2805                           
  2806                           ;Radio.c: 53: }
  2807                           ;Radio.c: 54: if(time > 15){
  2808                           
  2809                           ;Radio.c: 52: PORTCbits.RC4 = 1;
  2810                           
  2811                           ;Radio.c: 51: SR_FRSPowerDown();
  2812  0BF0  0021               	movlb	1	; select bank1
  2813  0BF1  0842               	movf	(_time+1)^(0+128),w
  2814  0BF2  3A80               	xorlw	128
  2815  0BF3  0020               	movlb	0	; select bank0
  2816  0BF4  00CB               	movwf	??_RadioOperation
  2817  0BF5  3080               	movlw	128
  2818  0BF6  024B               	subwf	??_RadioOperation,w
  2819  0BF7  1D03               	skipz
  2820  0BF8  2BFC               	goto	u6035
  2821  0BF9  3010               	movlw	16
  2822  0BFA  0021               	movlb	1	; select bank1
  2823  0BFB  0241               	subwf	_time^(0+128),w
  2824  0BFC                     u6035:	
  2825  0BFC  1C03               	skipc
  2826  0BFD  2C4E               	goto	l3826
  2827                           
  2828                           ;Radio.c: 55: PORTCbits.RC5 = 1;
  2829  0BFE  0020               	movlb	0	; select bank0
  2830  0BFF  168E               	bsf	14,5	;volatile
  2831                           
  2832                           ;Radio.c: 56: Battery = ReadVoltage(1);
  2833  0C00  3001               	movlw	1
  2834  0C01  3195  25DE  318B   	fcall	_ReadVoltage
  2835  0C04  0873               	movf	?_ReadVoltage+1,w
  2836  0C05  00FA               	movwf	___awtoft@c+1
  2837  0C06  0872               	movf	?_ReadVoltage,w
  2838  0C07  00F9               	movwf	___awtoft@c
  2839  0C08  3196  26C8  318B   	fcall	___awtoft
  2840  0C0B  0879               	movf	?___awtoft,w
  2841  0C0C  0021               	movlb	1	; select bank1
  2842  0C0D  00BA               	movwf	_Battery^(0+128)
  2843  0C0E  087A               	movf	?___awtoft+1,w
  2844  0C0F  00BB               	movwf	(_Battery+1)^(0+128)
  2845  0C10  087B               	movf	?___awtoft+2,w
  2846  0C11  00BC               	movwf	(_Battery+2)^(0+128)
  2847                           
  2848                           ;Radio.c: 57: Battery = (Battery*5.0)/1023.0;
  2849  0C12  30C0               	movlw	192
  2850  0C13  0020               	movlb	0	; select bank0
  2851  0C14  00BB               	movwf	___ftdiv@f2
  2852  0C15  307F               	movlw	127
  2853  0C16  00BC               	movwf	___ftdiv@f2+1
  2854  0C17  3044               	movlw	68
  2855  0C18  00BD               	movwf	___ftdiv@f2+2
  2856  0C19  3000               	movlw	0
  2857  0C1A  00AB               	movwf	___ftmul@f1
  2858  0C1B  30A0               	movlw	160
  2859  0C1C  00AC               	movwf	___ftmul@f1+1
  2860  0C1D  3040               	movlw	64
  2861  0C1E  00AD               	movwf	___ftmul@f1+2
  2862  0C1F  0021               	movlb	1	; select bank1
  2863  0C20  083A               	movf	_Battery^(0+128),w
  2864  0C21  0020               	movlb	0	; select bank0
  2865  0C22  00AE               	movwf	___ftmul@f2
  2866  0C23  0021               	movlb	1	; select bank1
  2867  0C24  083B               	movf	(_Battery+1)^(0+128),w
  2868  0C25  0020               	movlb	0	; select bank0
  2869  0C26  00AF               	movwf	___ftmul@f2+1
  2870  0C27  0021               	movlb	1	; select bank1
  2871  0C28  083C               	movf	(_Battery+2)^(0+128),w
  2872  0C29  0020               	movlb	0	; select bank0
  2873  0C2A  00B0               	movwf	___ftmul@f2+2
  2874  0C2B  318A  2231  318B   	fcall	___ftmul
  2875  0C2E  0020               	movlb	0	; select bank0
  2876  0C2F  082B               	movf	?___ftmul,w
  2877  0C30  00BE               	movwf	___ftdiv@f1
  2878  0C31  082C               	movf	?___ftmul+1,w
  2879  0C32  00BF               	movwf	___ftdiv@f1+1
  2880  0C33  082D               	movf	?___ftmul+2,w
  2881  0C34  00C0               	movwf	___ftdiv@f1+2
  2882  0C35  3187  2754  318B   	fcall	___ftdiv
  2883  0C38  0020               	movlb	0	; select bank0
  2884  0C39  083B               	movf	?___ftdiv,w
  2885  0C3A  0021               	movlb	1	; select bank1
  2886  0C3B  00BA               	movwf	_Battery^(0+128)
  2887  0C3C  0020               	movlb	0	; select bank0
  2888  0C3D  083C               	movf	?___ftdiv+1,w
  2889  0C3E  0021               	movlb	1	; select bank1
  2890  0C3F  00BB               	movwf	(_Battery+1)^(0+128)
  2891  0C40  0020               	movlb	0	; select bank0
  2892  0C41  083D               	movf	?___ftdiv+2,w
  2893  0C42  0021               	movlb	1	; select bank1
  2894  0C43  00BC               	movwf	(_Battery+2)^(0+128)
  2895                           
  2896                           ;Radio.c: 58: time = 0;
  2897  0C44  01C1               	clrf	_time^(0+128)
  2898  0C45  01C2               	clrf	(_time+1)^(0+128)
  2899                           
  2900                           ;Radio.c: 59: Mode = ReadCharger();
  2901  0C46  3195  25FB  318B   	fcall	_ReadCharger
  2902  0C49  0020               	movlb	0	; select bank0
  2903  0C4A  00CB               	movwf	??_RadioOperation
  2904  0C4B  084B               	movf	??_RadioOperation,w
  2905  0C4C  0021               	movlb	1	; select bank1
  2906  0C4D  00C3               	movwf	_Mode^(0+128)
  2907  0C4E                     l3826:	
  2908                           
  2909                           ;Radio.c: 60: }
  2910                           ;Radio.c: 61: if((time > 1) && (PORTCbits.RC5 == 1)){
  2911  0C4E  0021               	movlb	1	; select bank1
  2912  0C4F  0842               	movf	(_time+1)^(0+128),w
  2913  0C50  3A80               	xorlw	128
  2914  0C51  0020               	movlb	0	; select bank0
  2915  0C52  00CB               	movwf	??_RadioOperation
  2916  0C53  3080               	movlw	128
  2917  0C54  024B               	subwf	??_RadioOperation,w
  2918  0C55  1D03               	skipz
  2919  0C56  2C5A               	goto	u6045
  2920  0C57  3002               	movlw	2
  2921  0C58  0021               	movlb	1	; select bank1
  2922  0C59  0241               	subwf	_time^(0+128),w
  2923  0C5A                     u6045:	
  2924  0C5A  1C03               	skipc
  2925  0C5B  2C60               	goto	l3832
  2926  0C5C  0020               	movlb	0	; select bank0
  2927  0C5D  1E8E               	btfss	14,5	;volatile
  2928  0C5E  2C60               	goto	l3832
  2929                           
  2930                           ;Radio.c: 62: PORTCbits.RC5 = 0;
  2931  0C5F  128E               	bcf	14,5	;volatile
  2932  0C60                     l3832:	
  2933                           
  2934                           ;Radio.c: 63: }
  2935                           ;Radio.c: 64: if(Battery < 6.2){
  2936  0C60  0021               	movlb	1	; select bank1
  2937  0C61  083A               	movf	_Battery^(0+128),w
  2938  0C62  00F1               	movwf	___ftge@ff1
  2939  0C63  083B               	movf	(_Battery+1)^(0+128),w
  2940  0C64  00F2               	movwf	___ftge@ff1+1
  2941  0C65  083C               	movf	(_Battery+2)^(0+128),w
  2942  0C66  00F3               	movwf	___ftge@ff1+2
  2943  0C67  3066               	movlw	102
  2944  0C68  00F4               	movwf	___ftge@ff2
  2945  0C69  30C6               	movlw	198
  2946  0C6A  00F5               	movwf	___ftge@ff2+1
  2947  0C6B  3040               	movlw	64
  2948  0C6C  00F6               	movwf	___ftge@ff2+2
  2949  0C6D  3197  2788  318B   	fcall	___ftge
  2950                           
  2951                           ;Radio.c: 67: }
  2952                           ;Radio.c: 68: if(ReadCharger() == 1){
  2953  0C70  3195  25FB  318B   	fcall	_ReadCharger
  2954  0C73  3A01               	xorlw	1
  2955  0C74  1D03               	skipz
  2956  0C75  2C79               	goto	l3838
  2957                           
  2958                           ;Radio.c: 69: PORTCbits.RC5 = 1;
  2959  0C76  0020               	movlb	0	; select bank0
  2960  0C77  168E               	bsf	14,5	;volatile
  2961                           
  2962                           ;Radio.c: 70: PORTCbits.RC4 = 1;
  2963  0C78  160E               	bsf	14,4	;volatile
  2964  0C79                     l3838:	
  2965                           
  2966                           ;Radio.c: 71: }
  2967                           ;Radio.c: 72: if(ReadCharger() == 2){
  2968  0C79  3195  25FB  318B   	fcall	_ReadCharger
  2969  0C7C  3A02               	xorlw	2
  2970  0C7D  1D03               	skipz
  2971  0C7E  2C82               	goto	l3842
  2972                           
  2973                           ;Radio.c: 73: PORTCbits.RC4 = 0;
  2974  0C7F  0020               	movlb	0	; select bank0
  2975  0C80  120E               	bcf	14,4	;volatile
  2976                           
  2977                           ;Radio.c: 74: PORTCbits.RC5 = 1;
  2978  0C81  168E               	bsf	14,5	;volatile
  2979  0C82                     l3842:	
  2980                           
  2981                           ;Radio.c: 75: }
  2982                           ;Radio.c: 76: time++;
  2983  0C82  3001               	movlw	1
  2984  0C83  0021               	movlb	1	; select bank1
  2985  0C84  07C1               	addwf	_time^(0+128),f
  2986  0C85  3000               	movlw	0
  2987  0C86  3DC2               	addwfc	(_time+1)^(0+128),f
  2988  0C87  0008               	return
  2989  0C88                     __end_of_RadioOperation:	
  2990                           
  2991                           	psect	text7
  2992  0754                     __ptext7:	
  2993 ;; *************** function ___ftdiv *****************
  2994 ;; Defined at:
  2995 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
  2996 ;; Parameters:    Size  Location     Type
  2997 ;;  f2              3   27[BANK0 ] float 
  2998 ;;  f1              3   30[BANK0 ] float 
  2999 ;; Auto vars:     Size  Location     Type
  3000 ;;  f3              3   38[BANK0 ] float 
  3001 ;;  sign            1   42[BANK0 ] unsigned char 
  3002 ;;  exp             1   41[BANK0 ] unsigned char 
  3003 ;;  cntr            1   37[BANK0 ] unsigned char 
  3004 ;; Return value:  Size  Location     Type
  3005 ;;                  3   27[BANK0 ] float 
  3006 ;; Registers used:
  3007 ;;		wreg, status,2, status,0, pclath, cstack
  3008 ;; Tracked objects:
  3009 ;;		On entry : 0/0
  3010 ;;		On exit  : 0/0
  3011 ;;		Unchanged: 0/0
  3012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3013 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3014 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3015 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3016 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3017 ;;Total ram usage:       16 bytes
  3018 ;; Hardware stack levels used:    1
  3019 ;; Hardware stack levels required when called:    3
  3020 ;; This function calls:
  3021 ;;		___ftpack
  3022 ;; This function is called by:
  3023 ;;		_RadioOperation
  3024 ;; This function uses a non-reentrant model
  3025 ;;
  3026                           
  3027                           
  3028                           ;psect for function ___ftdiv
  3029  0754                     ___ftdiv:	
  3030                           
  3031                           ;incstack = 0
  3032                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  3033  0754  0020               	movlb	0	; select bank0
  3034  0755  083E               	movf	___ftdiv@f1,w
  3035  0756  00C1               	movwf	??___ftdiv
  3036  0757  083F               	movf	___ftdiv@f1+1,w
  3037  0758  00C2               	movwf	??___ftdiv+1
  3038  0759  0840               	movf	___ftdiv@f1+2,w
  3039  075A  00C3               	movwf	??___ftdiv+2
  3040  075B  1003               	clrc
  3041  075C  0D42               	rlf	??___ftdiv+1,w
  3042  075D  0D43               	rlf	??___ftdiv+2,w
  3043  075E  00C4               	movwf	??___ftdiv+3
  3044  075F  0844               	movf	??___ftdiv+3,w
  3045  0760  00C9               	movwf	___ftdiv@exp
  3046  0761  0849               	movf	___ftdiv@exp,w
  3047  0762  1D03               	btfss	3,2
  3048  0763  2F6B               	goto	l3736
  3049  0764  3000               	movlw	0
  3050  0765  00BB               	movwf	?___ftdiv
  3051  0766  3000               	movlw	0
  3052  0767  00BC               	movwf	?___ftdiv+1
  3053  0768  3000               	movlw	0
  3054  0769  00BD               	movwf	?___ftdiv+2
  3055  076A  0008               	return
  3056  076B                     l3736:	
  3057  076B  083B               	movf	___ftdiv@f2,w
  3058  076C  00C1               	movwf	??___ftdiv
  3059  076D  083C               	movf	___ftdiv@f2+1,w
  3060  076E  00C2               	movwf	??___ftdiv+1
  3061  076F  083D               	movf	___ftdiv@f2+2,w
  3062  0770  00C3               	movwf	??___ftdiv+2
  3063  0771  1003               	clrc
  3064  0772  0D42               	rlf	??___ftdiv+1,w
  3065  0773  0D43               	rlf	??___ftdiv+2,w
  3066  0774  00C4               	movwf	??___ftdiv+3
  3067  0775  0844               	movf	??___ftdiv+3,w
  3068  0776  00CA               	movwf	___ftdiv@sign
  3069  0777  084A               	movf	___ftdiv@sign,w
  3070  0778  1D03               	btfss	3,2
  3071  0779  2F81               	goto	l3742
  3072  077A  3000               	movlw	0
  3073  077B  00BB               	movwf	?___ftdiv
  3074  077C  3000               	movlw	0
  3075  077D  00BC               	movwf	?___ftdiv+1
  3076  077E  3000               	movlw	0
  3077  077F  00BD               	movwf	?___ftdiv+2
  3078  0780  0008               	return
  3079  0781                     l3742:	
  3080  0781  3000               	movlw	0
  3081  0782  00C6               	movwf	___ftdiv@f3
  3082  0783  3000               	movlw	0
  3083  0784  00C7               	movwf	___ftdiv@f3+1
  3084  0785  3000               	movlw	0
  3085  0786  00C8               	movwf	___ftdiv@f3+2
  3086  0787  3089               	movlw	137
  3087  0788  074A               	addwf	___ftdiv@sign,w
  3088  0789  00C1               	movwf	??___ftdiv
  3089  078A  0841               	movf	??___ftdiv,w
  3090  078B  02C9               	subwf	___ftdiv@exp,f
  3091  078C  083E               	movf	___ftdiv@f1,w
  3092  078D  00C1               	movwf	??___ftdiv
  3093  078E  083F               	movf	___ftdiv@f1+1,w
  3094  078F  00C2               	movwf	??___ftdiv+1
  3095  0790  0840               	movf	___ftdiv@f1+2,w
  3096  0791  00C3               	movwf	??___ftdiv+2
  3097  0792  3010               	movlw	16
  3098  0793                     u5885:	
  3099  0793  36C3               	lsrf	??___ftdiv+2,f
  3100  0794  0CC2               	rrf	??___ftdiv+1,f
  3101  0795  0CC1               	rrf	??___ftdiv,f
  3102  0796  0B89               	decfsz	9,f
  3103  0797  2F93               	goto	u5885
  3104  0798  0841               	movf	??___ftdiv,w
  3105  0799  00C4               	movwf	??___ftdiv+3
  3106  079A  0844               	movf	??___ftdiv+3,w
  3107  079B  00CA               	movwf	___ftdiv@sign
  3108  079C  083B               	movf	___ftdiv@f2,w
  3109  079D  00C1               	movwf	??___ftdiv
  3110  079E  083C               	movf	___ftdiv@f2+1,w
  3111  079F  00C2               	movwf	??___ftdiv+1
  3112  07A0  083D               	movf	___ftdiv@f2+2,w
  3113  07A1  00C3               	movwf	??___ftdiv+2
  3114  07A2  3010               	movlw	16
  3115  07A3                     u5895:	
  3116  07A3  36C3               	lsrf	??___ftdiv+2,f
  3117  07A4  0CC2               	rrf	??___ftdiv+1,f
  3118  07A5  0CC1               	rrf	??___ftdiv,f
  3119  07A6  0B89               	decfsz	9,f
  3120  07A7  2FA3               	goto	u5895
  3121  07A8  0841               	movf	??___ftdiv,w
  3122  07A9  00C4               	movwf	??___ftdiv+3
  3123  07AA  0844               	movf	??___ftdiv+3,w
  3124  07AB  06CA               	xorwf	___ftdiv@sign,f
  3125  07AC  3080               	movlw	128
  3126  07AD  00C1               	movwf	??___ftdiv
  3127  07AE  0841               	movf	??___ftdiv,w
  3128  07AF  05CA               	andwf	___ftdiv@sign,f
  3129  07B0  17BF               	bsf	___ftdiv@f1+1,7
  3130  07B1  30FF               	movlw	255
  3131  07B2  05BE               	andwf	___ftdiv@f1,f
  3132  07B3  30FF               	movlw	255
  3133  07B4  05BF               	andwf	___ftdiv@f1+1,f
  3134  07B5  3000               	movlw	0
  3135  07B6  05C0               	andwf	___ftdiv@f1+2,f
  3136  07B7  17BC               	bsf	___ftdiv@f2+1,7
  3137  07B8  30FF               	movlw	255
  3138  07B9  05BB               	andwf	___ftdiv@f2,f
  3139  07BA  30FF               	movlw	255
  3140  07BB  05BC               	andwf	___ftdiv@f2+1,f
  3141  07BC  3000               	movlw	0
  3142  07BD  05BD               	andwf	___ftdiv@f2+2,f
  3143  07BE  3018               	movlw	24
  3144  07BF  00C1               	movwf	??___ftdiv
  3145  07C0  0841               	movf	??___ftdiv,w
  3146  07C1  00C5               	movwf	___ftdiv@cntr
  3147  07C2                     l3756:	
  3148  07C2  3001               	movlw	1
  3149  07C3                     u5905:	
  3150  07C3  35C6               	lslf	___ftdiv@f3,f
  3151  07C4  0DC7               	rlf	___ftdiv@f3+1,f
  3152  07C5  0DC8               	rlf	___ftdiv@f3+2,f
  3153  07C6  0B89               	decfsz	9,f
  3154  07C7  2FC3               	goto	u5905
  3155  07C8  083D               	movf	___ftdiv@f2+2,w
  3156  07C9  0240               	subwf	___ftdiv@f1+2,w
  3157  07CA  1D03               	skipz
  3158  07CB  2FD2               	goto	u5915
  3159  07CC  083C               	movf	___ftdiv@f2+1,w
  3160  07CD  023F               	subwf	___ftdiv@f1+1,w
  3161  07CE  1D03               	skipz
  3162  07CF  2FD2               	goto	u5915
  3163  07D0  083B               	movf	___ftdiv@f2,w
  3164  07D1  023E               	subwf	___ftdiv@f1,w
  3165  07D2                     u5915:	
  3166  07D2  1C03               	skipc
  3167  07D3  2FDB               	goto	l3764
  3168  07D4  083B               	movf	___ftdiv@f2,w
  3169  07D5  02BE               	subwf	___ftdiv@f1,f
  3170  07D6  083C               	movf	___ftdiv@f2+1,w
  3171  07D7  3BBF               	subwfb	___ftdiv@f1+1,f
  3172  07D8  083D               	movf	___ftdiv@f2+2,w
  3173  07D9  3BC0               	subwfb	___ftdiv@f1+2,f
  3174  07DA  1446               	bsf	___ftdiv@f3,0
  3175  07DB                     l3764:	
  3176  07DB  3001               	movlw	1
  3177  07DC                     u5925:	
  3178  07DC  35BE               	lslf	___ftdiv@f1,f
  3179  07DD  0DBF               	rlf	___ftdiv@f1+1,f
  3180  07DE  0DC0               	rlf	___ftdiv@f1+2,f
  3181  07DF  0B89               	decfsz	9,f
  3182  07E0  2FDC               	goto	u5925
  3183  07E1  3001               	movlw	1
  3184  07E2  02C5               	subwf	___ftdiv@cntr,f
  3185  07E3  1D03               	btfss	3,2
  3186  07E4  2FC2               	goto	l3756
  3187  07E5  0846               	movf	___ftdiv@f3,w
  3188  07E6  00F1               	movwf	___ftpack@arg
  3189  07E7  0847               	movf	___ftdiv@f3+1,w
  3190  07E8  00F2               	movwf	___ftpack@arg+1
  3191  07E9  0848               	movf	___ftdiv@f3+2,w
  3192  07EA  00F3               	movwf	___ftpack@arg+2
  3193  07EB  0849               	movf	___ftdiv@exp,w
  3194  07EC  00C1               	movwf	??___ftdiv
  3195  07ED  0841               	movf	??___ftdiv,w
  3196  07EE  00F4               	movwf	___ftpack@exp
  3197  07EF  084A               	movf	___ftdiv@sign,w
  3198  07F0  00C2               	movwf	??___ftdiv+1
  3199  07F1  0842               	movf	??___ftdiv+1,w
  3200  07F2  00F5               	movwf	___ftpack@sign
  3201  07F3  3189  2146         	fcall	___ftpack
  3202  07F5  0871               	movf	?___ftpack,w
  3203  07F6  0020               	movlb	0	; select bank0
  3204  07F7  00BB               	movwf	?___ftdiv
  3205  07F8  0872               	movf	?___ftpack+1,w
  3206  07F9  00BC               	movwf	?___ftdiv+1
  3207  07FA  0873               	movf	?___ftpack+2,w
  3208  07FB  00BD               	movwf	?___ftdiv+2
  3209  07FC  0008               	return
  3210  07FD                     __end_of___ftdiv:	
  3211                           
  3212                           	psect	text8
  3213  16C8                     __ptext8:	
  3214 ;; *************** function ___awtoft *****************
  3215 ;; Defined at:
  3216 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
  3217 ;; Parameters:    Size  Location     Type
  3218 ;;  c               2    9[COMMON] int 
  3219 ;; Auto vars:     Size  Location     Type
  3220 ;;  sign            1    2[BANK0 ] unsigned char 
  3221 ;; Return value:  Size  Location     Type
  3222 ;;                  3    9[COMMON] float 
  3223 ;; Registers used:
  3224 ;;		wreg, status,2, status,0, pclath, cstack
  3225 ;; Tracked objects:
  3226 ;;		On entry : 0/0
  3227 ;;		On exit  : 0/0
  3228 ;;		Unchanged: 0/0
  3229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3230 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3231 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3232 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3233 ;;      Totals:         3       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3234 ;;Total ram usage:        6 bytes
  3235 ;; Hardware stack levels used:    1
  3236 ;; Hardware stack levels required when called:    3
  3237 ;; This function calls:
  3238 ;;		___ftpack
  3239 ;; This function is called by:
  3240 ;;		_RadioOperation
  3241 ;; This function uses a non-reentrant model
  3242 ;;
  3243                           
  3244                           
  3245                           ;psect for function ___awtoft
  3246  16C8                     ___awtoft:	
  3247                           
  3248                           ;incstack = 0
  3249                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  3250  16C8  0020               	movlb	0	; select bank0
  3251  16C9  01A2               	clrf	___awtoft@sign
  3252  16CA  1FFA               	btfss	___awtoft@c+1,7
  3253  16CB  2ED3               	goto	l3726
  3254  16CC  09F9               	comf	___awtoft@c,f
  3255  16CD  09FA               	comf	___awtoft@c+1,f
  3256  16CE  0AF9               	incf	___awtoft@c,f
  3257  16CF  1903               	skipnz
  3258  16D0  0AFA               	incf	___awtoft@c+1,f
  3259  16D1  01A2               	clrf	___awtoft@sign
  3260  16D2  0AA2               	incf	___awtoft@sign,f
  3261  16D3                     l3726:	
  3262  16D3  0879               	movf	___awtoft@c,w
  3263  16D4  00F1               	movwf	___ftpack@arg
  3264  16D5  087A               	movf	___awtoft@c+1,w
  3265  16D6  00F2               	movwf	___ftpack@arg+1
  3266  16D7  01F3               	clrf	___ftpack@arg+2
  3267  16D8  308E               	movlw	142
  3268  16D9  00A0               	movwf	??___awtoft
  3269  16DA  0820               	movf	??___awtoft,w
  3270  16DB  00F4               	movwf	___ftpack@exp
  3271  16DC  0822               	movf	___awtoft@sign,w
  3272  16DD  00A1               	movwf	??___awtoft+1
  3273  16DE  0821               	movf	??___awtoft+1,w
  3274  16DF  00F5               	movwf	___ftpack@sign
  3275  16E0  3189  2146         	fcall	___ftpack
  3276  16E2  0871               	movf	?___ftpack,w
  3277  16E3  00F9               	movwf	?___awtoft
  3278  16E4  0872               	movf	?___ftpack+1,w
  3279  16E5  00FA               	movwf	?___awtoft+1
  3280  16E6  0873               	movf	?___ftpack+2,w
  3281  16E7  00FB               	movwf	?___awtoft+2
  3282  16E8  0008               	return
  3283  16E9                     __end_of___awtoft:	
  3284                           
  3285                           	psect	text9
  3286  15EC                     __ptext9:	
  3287 ;; *************** function _SR_FRSTalk *****************
  3288 ;; Defined at:
  3289 ;;		line 7 in file "SR_FRS.c"
  3290 ;; Parameters:    Size  Location     Type
  3291 ;;		None
  3292 ;; Auto vars:     Size  Location     Type
  3293 ;;		None
  3294 ;; Return value:  Size  Location     Type
  3295 ;;                  1    wreg      void 
  3296 ;; Registers used:
  3297 ;;		wreg, status,2, status,0
  3298 ;; Tracked objects:
  3299 ;;		On entry : 0/0
  3300 ;;		On exit  : 0/0
  3301 ;;		Unchanged: 0/0
  3302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3305 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3306 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3307 ;;Total ram usage:        1 bytes
  3308 ;; Hardware stack levels used:    1
  3309 ;; Hardware stack levels required when called:    2
  3310 ;; This function calls:
  3311 ;;		Nothing
  3312 ;; This function is called by:
  3313 ;;		_RadioOperation
  3314 ;; This function uses a non-reentrant model
  3315 ;;
  3316                           
  3317                           
  3318                           ;psect for function _SR_FRSTalk
  3319  15EC                     _SR_FRSTalk:	
  3320                           
  3321                           ;SR_FRS.c: 8: PORTCbits.RC7 ^= 1;
  3322                           
  3323                           ;incstack = 0
  3324                           ; Regs used in _SR_FRSTalk: [wreg+status,2+status,0]
  3325  15EC  0020               	movlb	0	; select bank0
  3326  15ED  0D0E               	rlf	14,w	;volatile
  3327  15EE  0D0E               	rlf	14,w	;volatile
  3328  15EF  3901               	andlw	1
  3329  15F0  00F1               	movwf	??_SR_FRSTalk
  3330  15F1  3001               	movlw	1
  3331  15F2  06F1               	xorwf	??_SR_FRSTalk,f
  3332  15F3  0CF1               	rrf	??_SR_FRSTalk,f
  3333  15F4  0CF1               	rrf	??_SR_FRSTalk,f
  3334  15F5  080E               	movf	14,w	;volatile
  3335  15F6  0671               	xorwf	??_SR_FRSTalk,w
  3336  15F7  397F               	andlw	-129
  3337  15F8  0671               	xorwf	??_SR_FRSTalk,w
  3338  15F9  008E               	movwf	14	;volatile
  3339  15FA  0008               	return
  3340  15FB                     __end_of_SR_FRSTalk:	
  3341                           
  3342                           	psect	text10
  3343  160D                     __ptext10:	
  3344 ;; *************** function _SR_FRSPowerDown *****************
  3345 ;; Defined at:
  3346 ;;		line 11 in file "SR_FRS.c"
  3347 ;; Parameters:    Size  Location     Type
  3348 ;;		None
  3349 ;; Auto vars:     Size  Location     Type
  3350 ;;		None
  3351 ;; Return value:  Size  Location     Type
  3352 ;;                  1    wreg      void 
  3353 ;; Registers used:
  3354 ;;		wreg, status,2, status,0
  3355 ;; Tracked objects:
  3356 ;;		On entry : 0/0
  3357 ;;		On exit  : 0/0
  3358 ;;		Unchanged: 0/0
  3359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3362 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3363 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3364 ;;Total ram usage:        1 bytes
  3365 ;; Hardware stack levels used:    1
  3366 ;; Hardware stack levels required when called:    2
  3367 ;; This function calls:
  3368 ;;		Nothing
  3369 ;; This function is called by:
  3370 ;;		_RadioOperation
  3371 ;; This function uses a non-reentrant model
  3372 ;;
  3373                           
  3374                           
  3375                           ;psect for function _SR_FRSPowerDown
  3376  160D                     _SR_FRSPowerDown:	
  3377                           
  3378                           ;SR_FRS.c: 12: PORTCbits.RC6 ^= 1;
  3379                           
  3380                           ;incstack = 0
  3381                           ; Regs used in _SR_FRSPowerDown: [wreg+status,2+status,0]
  3382  160D  0020               	movlb	0	; select bank0
  3383  160E  0E0E               	swapf	14,w	;volatile
  3384  160F  00F1               	movwf	??_SR_FRSPowerDown
  3385  1610  0CF1               	rrf	??_SR_FRSPowerDown,f
  3386  1611  0C71               	rrf	??_SR_FRSPowerDown,w
  3387  1612  3901               	andlw	1
  3388  1613  00F1               	movwf	??_SR_FRSPowerDown
  3389  1614  3001               	movlw	1
  3390  1615  06F1               	xorwf	??_SR_FRSPowerDown,f
  3391  1616  0EF1               	swapf	??_SR_FRSPowerDown,f
  3392  1617  0DF1               	rlf	??_SR_FRSPowerDown,f
  3393  1618  0DF1               	rlf	??_SR_FRSPowerDown,f
  3394  1619  080E               	movf	14,w	;volatile
  3395  161A  0671               	xorwf	??_SR_FRSPowerDown,w
  3396  161B  39BF               	andlw	-65
  3397  161C  0671               	xorwf	??_SR_FRSPowerDown,w
  3398  161D  008E               	movwf	14	;volatile
  3399  161E  0008               	return
  3400  161F                     __end_of_SR_FRSPowerDown:	
  3401                           
  3402                           	psect	text11
  3403  15DE                     __ptext11:	
  3404 ;; *************** function _ReadVoltage *****************
  3405 ;; Defined at:
  3406 ;;		line 14 in file "ADC.c"
  3407 ;; Parameters:    Size  Location     Type
  3408 ;;  ch              1    wreg     unsigned char 
  3409 ;; Auto vars:     Size  Location     Type
  3410 ;;  ch              1    5[COMMON] unsigned char 
  3411 ;; Return value:  Size  Location     Type
  3412 ;;                  2    2[COMMON] int 
  3413 ;; Registers used:
  3414 ;;		wreg, status,2, status,0, pclath, cstack
  3415 ;; Tracked objects:
  3416 ;;		On entry : 0/0
  3417 ;;		On exit  : 0/0
  3418 ;;		Unchanged: 0/0
  3419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3420 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3421 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3423 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3424 ;;Total ram usage:        4 bytes
  3425 ;; Hardware stack levels used:    1
  3426 ;; Hardware stack levels required when called:    3
  3427 ;; This function calls:
  3428 ;;		_SetADCChannel
  3429 ;; This function is called by:
  3430 ;;		_RadioOperation
  3431 ;; This function uses a non-reentrant model
  3432 ;;
  3433                           
  3434                           
  3435                           ;psect for function _ReadVoltage
  3436  15DE                     _ReadVoltage:	
  3437                           
  3438                           ;incstack = 0
  3439                           ; Regs used in _ReadVoltage: [wreg+status,2+status,0+pclath+cstack]
  3440                           ;ReadVoltage@ch stored from wreg
  3441  15DE  00F5               	movwf	ReadVoltage@ch
  3442                           
  3443                           ;ADC.c: 15: SetADCChannel(ch);
  3444  15DF  0875               	movf	ReadVoltage@ch,w
  3445  15E0  3196  26AA  3195   	fcall	_SetADCChannel
  3446                           
  3447                           ;ADC.c: 16: ADCON0bits.GO_nDONE = 1;
  3448  15E3  0021               	movlb	1	; select bank1
  3449  15E4  149D               	bsf	29,1	;volatile
  3450  15E5                     l270:	
  3451                           ;ADC.c: 17: while(ADCON0bits.GO_nDONE);
  3452                           
  3453  15E5  189D               	btfsc	29,1	;volatile
  3454  15E6  2DE5               	goto	l270
  3455                           
  3456                           ;ADC.c: 18: return ((ADRESL << 8) + ADRESL);
  3457  15E7  081B               	movf	27,w	;volatile
  3458  15E8  00F3               	movwf	?_ReadVoltage+1
  3459  15E9  081B               	movf	27,w	;volatile
  3460  15EA  00F2               	movwf	?_ReadVoltage
  3461  15EB  0008               	return
  3462  15EC                     __end_of_ReadVoltage:	
  3463                           
  3464                           	psect	text12
  3465  16AA                     __ptext12:	
  3466 ;; *************** function _SetADCChannel *****************
  3467 ;; Defined at:
  3468 ;;		line 21 in file "ADC.c"
  3469 ;; Parameters:    Size  Location     Type
  3470 ;;  ch              1    wreg     unsigned char 
  3471 ;; Auto vars:     Size  Location     Type
  3472 ;;  ch              1    1[COMMON] unsigned char 
  3473 ;; Return value:  Size  Location     Type
  3474 ;;                  1    wreg      void 
  3475 ;; Registers used:
  3476 ;;		wreg, status,2, status,0
  3477 ;; Tracked objects:
  3478 ;;		On entry : 0/0
  3479 ;;		On exit  : 0/0
  3480 ;;		Unchanged: 0/0
  3481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3483 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3485 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3486 ;;Total ram usage:        1 bytes
  3487 ;; Hardware stack levels used:    1
  3488 ;; Hardware stack levels required when called:    2
  3489 ;; This function calls:
  3490 ;;		Nothing
  3491 ;; This function is called by:
  3492 ;;		_ReadVoltage
  3493 ;; This function uses a non-reentrant model
  3494 ;;
  3495                           
  3496                           
  3497                           ;psect for function _SetADCChannel
  3498  16AA                     _SetADCChannel:	
  3499                           
  3500                           ;incstack = 0
  3501                           ; Regs used in _SetADCChannel: [wreg+status,2+status,0]
  3502                           ;SetADCChannel@ch stored from wreg
  3503  16AA  00F1               	movwf	SetADCChannel@ch
  3504                           
  3505                           ;ADC.c: 22: if(ch == 1){
  3506  16AB  0371               	decf	SetADCChannel@ch,w
  3507  16AC  1D03               	btfss	3,2
  3508  16AD  2EB4               	goto	l2726
  3509                           
  3510                           ;ADC.c: 23: ADCON0bits.CHS = 6;
  3511  16AE  0021               	movlb	1	; select bank1
  3512  16AF  081D               	movf	29,w	;volatile
  3513  16B0  3983               	andlw	-125
  3514  16B1  3818               	iorlw	24
  3515  16B2  009D               	movwf	29	;volatile
  3516                           
  3517                           ;ADC.c: 24: }
  3518  16B3  0008               	return
  3519  16B4                     l2726:	
  3520                           
  3521                           ;ADC.c: 25: else if(ch == 2){
  3522  16B4  3002               	movlw	2
  3523  16B5  0671               	xorwf	SetADCChannel@ch,w
  3524  16B6  1D03               	btfss	3,2
  3525  16B7  2EBE               	goto	l2730
  3526                           
  3527                           ;ADC.c: 26: ADCON0bits.CHS = 29;
  3528  16B8  0021               	movlb	1	; select bank1
  3529  16B9  081D               	movf	29,w	;volatile
  3530  16BA  3983               	andlw	-125
  3531  16BB  3874               	iorlw	116
  3532  16BC  009D               	movwf	29	;volatile
  3533                           
  3534                           ;ADC.c: 27: }
  3535  16BD  0008               	return
  3536  16BE                     l2730:	
  3537                           
  3538                           ;ADC.c: 28: else if(ch == 3){
  3539  16BE  3003               	movlw	3
  3540  16BF  0671               	xorwf	SetADCChannel@ch,w
  3541  16C0  1D03               	btfss	3,2
  3542  16C1  0008               	return
  3543                           
  3544                           ;ADC.c: 29: ADCON0bits.CHS = 3;
  3545  16C2  0021               	movlb	1	; select bank1
  3546  16C3  081D               	movf	29,w	;volatile
  3547  16C4  3983               	andlw	-125
  3548  16C5  380C               	iorlw	12
  3549  16C6  009D               	movwf	29	;volatile
  3550  16C7  0008               	return
  3551  16C8                     __end_of_SetADCChannel:	
  3552                           
  3553                           	psect	text13
  3554  15FB                     __ptext13:	
  3555 ;; *************** function _ReadCharger *****************
  3556 ;; Defined at:
  3557 ;;		line 101 in file "Function.c"
  3558 ;; Parameters:    Size  Location     Type
  3559 ;;		None
  3560 ;; Auto vars:     Size  Location     Type
  3561 ;;		None
  3562 ;; Return value:  Size  Location     Type
  3563 ;;                  1    wreg      unsigned char 
  3564 ;; Registers used:
  3565 ;;		wreg
  3566 ;; Tracked objects:
  3567 ;;		On entry : 0/0
  3568 ;;		On exit  : 0/0
  3569 ;;		Unchanged: 0/0
  3570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3575 ;;Total ram usage:        0 bytes
  3576 ;; Hardware stack levels used:    1
  3577 ;; Hardware stack levels required when called:    2
  3578 ;; This function calls:
  3579 ;;		Nothing
  3580 ;; This function is called by:
  3581 ;;		_RadioOperation
  3582 ;; This function uses a non-reentrant model
  3583 ;;
  3584                           
  3585                           
  3586                           ;psect for function _ReadCharger
  3587  15FB                     _ReadCharger:	
  3588                           
  3589                           ;Function.c: 103: if(!PORTCbits.RC0 && PORTCbits.RC1){
  3590                           
  3591                           ;incstack = 0
  3592                           ; Regs used in _ReadCharger: [wreg]
  3593  15FB  0020               	movlb	0	; select bank0
  3594  15FC  1C0E               	btfss	14,0	;volatile
  3595  15FD  1C8E               	btfss	14,1	;volatile
  3596  15FE  2E01               	goto	l74
  3597                           
  3598                           ;Function.c: 104: return 1;
  3599  15FF  3001               	movlw	1
  3600  1600  0008               	return
  3601  1601                     l74:	
  3602                           
  3603                           ;Function.c: 105: }
  3604                           ;Function.c: 107: if(PORTCbits.RC0 && !PORTCbits.RC1){
  3605  1601  180E               	btfsc	14,0	;volatile
  3606  1602  188E               	btfsc	14,1	;volatile
  3607  1603  2E06               	goto	l76
  3608                           
  3609                           ;Function.c: 108: return 2;
  3610  1604  3002               	movlw	2
  3611  1605  0008               	return
  3612  1606                     l76:	
  3613                           
  3614                           ;Function.c: 109: }
  3615                           ;Function.c: 111: if(PORTCbits.RC0 && PORTCbits.RC1){
  3616  1606  180E               	btfsc	14,0	;volatile
  3617  1607  1C8E               	btfss	14,1	;volatile
  3618  1608  2E0B               	goto	l2756
  3619                           
  3620                           ;Function.c: 112: return 0;
  3621  1609  3000               	movlw	0
  3622                           
  3623                           ;Function.c: 113: }
  3624  160A  0008               	return
  3625  160B                     l2756:	
  3626                           
  3627                           ;Function.c: 114: else{
  3628                           ;Function.c: 115: return 255;
  3629  160B  30FF               	movlw	255
  3630  160C  0008               	return
  3631  160D                     __end_of_ReadCharger:	
  3632                           
  3633                           	psect	text14
  3634  0002                     __ptext14:	
  3635 ;; *************** function _GetTicker *****************
  3636 ;; Defined at:
  3637 ;;		line 61 in file "Timer.c"
  3638 ;; Parameters:    Size  Location     Type
  3639 ;;		None
  3640 ;; Auto vars:     Size  Location     Type
  3641 ;;		None
  3642 ;; Return value:  Size  Location     Type
  3643 ;;                  2  112[None  ] unsigned int 
  3644 ;; Registers used:
  3645 ;;		None
  3646 ;; Tracked objects:
  3647 ;;		On entry : 0/0
  3648 ;;		On exit  : 0/0
  3649 ;;		Unchanged: 0/0
  3650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3655 ;;Total ram usage:        0 bytes
  3656 ;; Hardware stack levels used:    1
  3657 ;; Hardware stack levels required when called:    2
  3658 ;; This function calls:
  3659 ;;		Nothing
  3660 ;; This function is called by:
  3661 ;;		_RadioOperation
  3662 ;; This function uses a non-reentrant model
  3663 ;;
  3664                           
  3665                           
  3666                           ;psect for function _GetTicker
  3667  0002                     _GetTicker:	
  3668                           
  3669                           ;Timer.c: 62: return ticker;
  3670                           ;	Return value of _GetTicker is never used
  3671                           
  3672                           ;incstack = 0
  3673                           ; Regs used in _GetTicker: []
  3674  0002  0008               	return
  3675  0003                     __end_of_GetTicker:	
  3676                           
  3677                           	psect	text15
  3678  157A                     __ptext15:	
  3679 ;; *************** function _ClearTicker *****************
  3680 ;; Defined at:
  3681 ;;		line 57 in file "Timer.c"
  3682 ;; Parameters:    Size  Location     Type
  3683 ;;		None
  3684 ;; Auto vars:     Size  Location     Type
  3685 ;;		None
  3686 ;; Return value:  Size  Location     Type
  3687 ;;                  1    wreg      void 
  3688 ;; Registers used:
  3689 ;;		status,2
  3690 ;; Tracked objects:
  3691 ;;		On entry : 0/0
  3692 ;;		On exit  : 0/0
  3693 ;;		Unchanged: 0/0
  3694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3699 ;;Total ram usage:        0 bytes
  3700 ;; Hardware stack levels used:    1
  3701 ;; Hardware stack levels required when called:    2
  3702 ;; This function calls:
  3703 ;;		Nothing
  3704 ;; This function is called by:
  3705 ;;		_RadioOperation
  3706 ;; This function uses a non-reentrant model
  3707 ;;
  3708                           
  3709                           
  3710                           ;psect for function _ClearTicker
  3711  157A                     _ClearTicker:	
  3712                           
  3713                           ;Timer.c: 58: ticker = 0;
  3714                           
  3715                           ;incstack = 0
  3716                           ; Regs used in _ClearTicker: [status,2]
  3717  157A  0021               	movlb	1	; select bank1
  3718  157B  01BF               	clrf	_ticker^(0+128)
  3719  157C  01C0               	clrf	(_ticker+1)^(0+128)
  3720  157D  0008               	return
  3721  157E                     __end_of_ClearTicker:	
  3722                           
  3723                           	psect	text16
  3724  07FD                     __ptext16:	
  3725 ;; *************** function _RadioBegin *****************
  3726 ;; Defined at:
  3727 ;;		line 21 in file "Radio.c"
  3728 ;; Parameters:    Size  Location     Type
  3729 ;;		None
  3730 ;; Auto vars:     Size  Location     Type
  3731 ;;		None
  3732 ;; Return value:  Size  Location     Type
  3733 ;;                  1    wreg      void 
  3734 ;; Registers used:
  3735 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3736 ;; Tracked objects:
  3737 ;;		On entry : 0/0
  3738 ;;		On exit  : 0/0
  3739 ;;		Unchanged: 0/0
  3740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3745 ;;Total ram usage:        0 bytes
  3746 ;; Hardware stack levels used:    1
  3747 ;; Hardware stack levels required when called:    8
  3748 ;; This function calls:
  3749 ;;		_SR_FRSStart
  3750 ;; This function is called by:
  3751 ;;		_main
  3752 ;; This function uses a non-reentrant model
  3753 ;;
  3754                           
  3755                           
  3756                           ;psect for function _RadioBegin
  3757  07FD                     _RadioBegin:	
  3758                           
  3759                           ;Radio.c: 22: SR_FRSStart();
  3760                           
  3761                           ;incstack = 0
  3762                           ; Regs used in _RadioBegin: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3763  07FD  3197  27C3         	fcall	_SR_FRSStart
  3764  07FF  0008               	return
  3765  0800                     __end_of_RadioBegin:	
  3766                           
  3767                           	psect	text17
  3768  17C3                     __ptext17:	
  3769 ;; *************** function _SR_FRSStart *****************
  3770 ;; Defined at:
  3771 ;;		line 15 in file "SR_FRS.c"
  3772 ;; Parameters:    Size  Location     Type
  3773 ;;		None
  3774 ;; Auto vars:     Size  Location     Type
  3775 ;;		None
  3776 ;; Return value:  Size  Location     Type
  3777 ;;                  1    wreg      void 
  3778 ;; Registers used:
  3779 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3780 ;; Tracked objects:
  3781 ;;		On entry : 0/0
  3782 ;;		On exit  : 0/0
  3783 ;;		Unchanged: 0/0
  3784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3789 ;;Total ram usage:        0 bytes
  3790 ;; Hardware stack levels used:    1
  3791 ;; Hardware stack levels required when called:    7
  3792 ;; This function calls:
  3793 ;;		_Delay
  3794 ;;		_SetCommandMode
  3795 ;;		_SetFrequency
  3796 ;;		_SetMIC
  3797 ;;		_SetPowerSave
  3798 ;;		_SetVOX
  3799 ;;		_SetVolume
  3800 ;; This function is called by:
  3801 ;;		_RadioBegin
  3802 ;; This function uses a non-reentrant model
  3803 ;;
  3804                           
  3805                           
  3806                           ;psect for function _SR_FRSStart
  3807  17C3                     _SR_FRSStart:	
  3808                           
  3809                           ;SR_FRS.c: 16: SetCommandMode();
  3810                           
  3811                           ;incstack = 0
  3812                           ; Regs used in _SR_FRSStart: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3813  17C3  3195  25A1  3197   	fcall	_SetCommandMode
  3814                           
  3815                           ;SR_FRS.c: 17: Delay(100);
  3816  17C6  3064               	movlw	100
  3817  17C7  00F1               	movwf	Delay@wait
  3818  17C8  3000               	movlw	0
  3819  17C9  00F2               	movwf	Delay@wait+1
  3820  17CA  3196  261F  3197   	fcall	_Delay
  3821                           
  3822                           ;SR_FRS.c: 19: SetFrequency();
  3823  17CD  3197  270E  3197   	fcall	_SetFrequency
  3824                           
  3825                           ;SR_FRS.c: 20: Delay(100);
  3826  17D0  3064               	movlw	100
  3827  17D1  00F1               	movwf	Delay@wait
  3828  17D2  3000               	movlw	0
  3829  17D3  00F2               	movwf	Delay@wait+1
  3830  17D4  3196  261F  3197   	fcall	_Delay
  3831                           
  3832                           ;SR_FRS.c: 22: SetPowerSave();
  3833  17D7  3195  25D2  3197   	fcall	_SetPowerSave
  3834                           
  3835                           ;SR_FRS.c: 23: Delay(100);
  3836  17DA  3064               	movlw	100
  3837  17DB  00F1               	movwf	Delay@wait
  3838  17DC  3000               	movlw	0
  3839  17DD  00F2               	movwf	Delay@wait+1
  3840  17DE  3196  261F  3197   	fcall	_Delay
  3841                           
  3842                           ;SR_FRS.c: 25: SetVolume(5);
  3843  17E1  3005               	movlw	5
  3844  17E2  3196  2639  3197   	fcall	_SetVolume
  3845                           
  3846                           ;SR_FRS.c: 26: Delay(100);
  3847  17E5  3064               	movlw	100
  3848  17E6  00F1               	movwf	Delay@wait
  3849  17E7  3000               	movlw	0
  3850  17E8  00F2               	movwf	Delay@wait+1
  3851  17E9  3196  261F  3197   	fcall	_Delay
  3852                           
  3853                           ;SR_FRS.c: 28: SetVOX(0);
  3854  17EC  3000               	movlw	0
  3855  17ED  0020               	movlb	0	; select bank0
  3856  17EE  00EE               	movwf	SetVOX@volume
  3857  17EF  00EF               	movwf	SetVOX@volume+1
  3858  17F0  3196  2670  3197   	fcall	_SetVOX
  3859                           
  3860                           ;SR_FRS.c: 29: Delay(100);
  3861  17F3  3064               	movlw	100
  3862  17F4  00F1               	movwf	Delay@wait
  3863  17F5  3000               	movlw	0
  3864  17F6  00F2               	movwf	Delay@wait+1
  3865  17F7  3196  261F  3197   	fcall	_Delay
  3866                           
  3867                           ;SR_FRS.c: 31: SetMIC(5,0);
  3868  17FA  0020               	movlb	0	; select bank0
  3869  17FB  01EE               	clrf	SetMIC@scram
  3870  17FC  3005               	movlw	5
  3871  17FD  3197  2734         	fcall	_SetMIC
  3872  17FF  0008               	return
  3873  1800                     __end_of_SR_FRSStart:	
  3874                           
  3875                           	psect	text18
  3876  1639                     __ptext18:	
  3877 ;; *************** function _SetVolume *****************
  3878 ;; Defined at:
  3879 ;;		line 47 in file "SR_FRS.c"
  3880 ;; Parameters:    Size  Location     Type
  3881 ;;  volume          1    wreg     unsigned char 
  3882 ;; Auto vars:     Size  Location     Type
  3883 ;;  volume          1   28[BANK1 ] unsigned char 
  3884 ;; Return value:  Size  Location     Type
  3885 ;;                  1    wreg      void 
  3886 ;; Registers used:
  3887 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3888 ;; Tracked objects:
  3889 ;;		On entry : 0/0
  3890 ;;		On exit  : 0/0
  3891 ;;		Unchanged: 0/0
  3892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3894 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3895 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3896 ;;      Totals:         0       2       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3897 ;;Total ram usage:        3 bytes
  3898 ;; Hardware stack levels used:    1
  3899 ;; Hardware stack levels required when called:    6
  3900 ;; This function calls:
  3901 ;;		_printf
  3902 ;; This function is called by:
  3903 ;;		_SR_FRSStart
  3904 ;; This function uses a non-reentrant model
  3905 ;;
  3906                           
  3907                           
  3908                           ;psect for function _SetVolume
  3909  1639                     _SetVolume:	
  3910                           
  3911                           ;incstack = 0
  3912                           ; Regs used in _SetVolume: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3913                           ;SetVolume@volume stored from wreg
  3914  1639  0021               	movlb	1	; select bank1
  3915  163A  00E1               	movwf	SetVolume@volume^(0+128)
  3916                           
  3917                           ;SR_FRS.c: 48: if((volume < 9) && (volume > 1)){
  3918  163B  3009               	movlw	9
  3919  163C  0261               	subwf	SetVolume@volume^(0+128),w
  3920  163D  1803               	skipnc
  3921  163E  0008               	return
  3922  163F  3002               	movlw	2
  3923  1640  0261               	subwf	SetVolume@volume^(0+128),w
  3924  1641  1C03               	skipc
  3925  1642  0008               	return
  3926                           
  3927                           ;SR_FRS.c: 49: printf("AT+DMOSETVOLUME=%c",volume);
  3928  1643  30C6               	movlw	low (STR_4| (0+32768))
  3929  1644  0020               	movlb	0	; select bank0
  3930  1645  00DC               	movwf	printf@f
  3931  1646  3090               	movlw	high (STR_4| (0+32768))
  3932  1647  00DD               	movwf	printf@f+1
  3933  1648  0021               	movlb	1	; select bank1
  3934  1649  0861               	movf	SetVolume@volume^(0+128),w
  3935  164A  0020               	movlb	0	; select bank0
  3936  164B  00EE               	movwf	??_SetVolume
  3937  164C  01EF               	clrf	??_SetVolume+1
  3938  164D  086E               	movf	??_SetVolume,w
  3939  164E  00DE               	movwf	?_printf+2
  3940  164F  086F               	movf	??_SetVolume+1,w
  3941  1650  00DF               	movwf	?_printf+3
  3942  1651  3180  2031         	fcall	_printf
  3943  1653  0008               	return
  3944  1654                     __end_of_SetVolume:	
  3945                           
  3946                           	psect	text19
  3947  1670                     __ptext19:	
  3948 ;; *************** function _SetVOX *****************
  3949 ;; Defined at:
  3950 ;;		line 53 in file "SR_FRS.c"
  3951 ;; Parameters:    Size  Location     Type
  3952 ;;  volume          2   78[BANK0 ] int 
  3953 ;; Auto vars:     Size  Location     Type
  3954 ;;		None
  3955 ;; Return value:  Size  Location     Type
  3956 ;;                  1    wreg      void 
  3957 ;; Registers used:
  3958 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3959 ;; Tracked objects:
  3960 ;;		On entry : 0/0
  3961 ;;		On exit  : 0/0
  3962 ;;		Unchanged: 0/0
  3963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3964 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3966 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3967 ;;      Totals:         0       2       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3968 ;;Total ram usage:        3 bytes
  3969 ;; Hardware stack levels used:    1
  3970 ;; Hardware stack levels required when called:    6
  3971 ;; This function calls:
  3972 ;;		_printf
  3973 ;; This function is called by:
  3974 ;;		_SR_FRSStart
  3975 ;; This function uses a non-reentrant model
  3976 ;;
  3977                           
  3978                           
  3979                           ;psect for function _SetVOX
  3980  1670                     _SetVOX:	
  3981                           
  3982                           ;SR_FRS.c: 54: if((volume < 8) && (volume >= 0)){
  3983                           
  3984                           ;incstack = 0
  3985                           ; Regs used in _SetVOX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3986  1670  0020               	movlb	0	; select bank0
  3987  1671  086F               	movf	SetVOX@volume+1,w
  3988  1672  3A80               	xorlw	128
  3989  1673  0021               	movlb	1	; select bank1
  3990  1674  00E1               	movwf	??_SetVOX^(0+128)
  3991  1675  3080               	movlw	128
  3992  1676  0261               	subwf	??_SetVOX^(0+128),w
  3993  1677  1D03               	skipz
  3994  1678  2E7C               	goto	u5815
  3995  1679  3008               	movlw	8
  3996  167A  0020               	movlb	0	; select bank0
  3997  167B  026E               	subwf	SetVOX@volume,w
  3998  167C                     u5815:	
  3999  167C  1803               	skipnc
  4000  167D  0008               	return
  4001  167E  0020               	movlb	0	; select bank0
  4002  167F  1BEF               	btfsc	SetVOX@volume+1,7
  4003  1680  0008               	return
  4004                           
  4005                           ;SR_FRS.c: 55: printf("AT+DMOSETVOLUME=%c",volume);
  4006  1681  30C6               	movlw	low (STR_4| (0+32768))
  4007  1682  00DC               	movwf	printf@f
  4008  1683  3090               	movlw	high (STR_4| (0+32768))
  4009  1684  00DD               	movwf	printf@f+1
  4010  1685  086F               	movf	SetVOX@volume+1,w
  4011  1686  00DF               	movwf	?_printf+3
  4012  1687  086E               	movf	SetVOX@volume,w
  4013  1688  00DE               	movwf	?_printf+2
  4014  1689  3180  2031         	fcall	_printf
  4015  168B  0008               	return
  4016  168C                     __end_of_SetVOX:	
  4017                           
  4018                           	psect	text20
  4019  15D2                     __ptext20:	
  4020 ;; *************** function _SetPowerSave *****************
  4021 ;; Defined at:
  4022 ;;		line 42 in file "SR_FRS.c"
  4023 ;; Parameters:    Size  Location     Type
  4024 ;;		None
  4025 ;; Auto vars:     Size  Location     Type
  4026 ;;		None
  4027 ;; Return value:  Size  Location     Type
  4028 ;;                  1    wreg      void 
  4029 ;; Registers used:
  4030 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4031 ;; Tracked objects:
  4032 ;;		On entry : 0/0
  4033 ;;		On exit  : 0/0
  4034 ;;		Unchanged: 0/0
  4035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4039 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4040 ;;Total ram usage:        0 bytes
  4041 ;; Hardware stack levels used:    1
  4042 ;; Hardware stack levels required when called:    6
  4043 ;; This function calls:
  4044 ;;		_printf
  4045 ;; This function is called by:
  4046 ;;		_SR_FRSStart
  4047 ;; This function uses a non-reentrant model
  4048 ;;
  4049                           
  4050                           
  4051                           ;psect for function _SetPowerSave
  4052  15D2                     _SetPowerSave:	
  4053                           
  4054                           ;SR_FRS.c: 44: printf("AT+DMOAUTOPOWCONTR=%c",1);
  4055                           
  4056                           ;incstack = 0
  4057                           ; Regs used in _SetPowerSave: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4058  15D2  30B0               	movlw	low (STR_3| (0+32768))
  4059  15D3  0020               	movlb	0	; select bank0
  4060  15D4  00DC               	movwf	printf@f
  4061  15D5  3090               	movlw	high (STR_3| (0+32768))
  4062  15D6  00DD               	movwf	printf@f+1
  4063  15D7  3001               	movlw	1
  4064  15D8  00DE               	movwf	?_printf+2
  4065  15D9  3000               	movlw	0
  4066  15DA  00DF               	movwf	?_printf+3
  4067  15DB  3180  2031         	fcall	_printf
  4068  15DD  0008               	return
  4069  15DE                     __end_of_SetPowerSave:	
  4070                           
  4071                           	psect	text21
  4072  1734                     __ptext21:	
  4073 ;; *************** function _SetMIC *****************
  4074 ;; Defined at:
  4075 ;;		line 59 in file "SR_FRS.c"
  4076 ;; Parameters:    Size  Location     Type
  4077 ;;  volume          1    wreg     unsigned char 
  4078 ;;  scram           1   78[BANK0 ] unsigned char 
  4079 ;; Auto vars:     Size  Location     Type
  4080 ;;  volume          1   79[BANK0 ] unsigned char 
  4081 ;; Return value:  Size  Location     Type
  4082 ;;                  1    wreg      void 
  4083 ;; Registers used:
  4084 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4085 ;; Tracked objects:
  4086 ;;		On entry : 0/0
  4087 ;;		On exit  : 0/0
  4088 ;;		Unchanged: 0/0
  4089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4090 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4091 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4092 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4093 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4094 ;;Total ram usage:        6 bytes
  4095 ;; Hardware stack levels used:    1
  4096 ;; Hardware stack levels required when called:    6
  4097 ;; This function calls:
  4098 ;;		_printf
  4099 ;; This function is called by:
  4100 ;;		_SR_FRSStart
  4101 ;; This function uses a non-reentrant model
  4102 ;;
  4103                           
  4104                           
  4105                           ;psect for function _SetMIC
  4106  1734                     _SetMIC:	
  4107                           
  4108                           ;incstack = 0
  4109                           ; Regs used in _SetMIC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4110                           ;SetMIC@volume stored from wreg
  4111  1734  0020               	movlb	0	; select bank0
  4112  1735  00EF               	movwf	SetMIC@volume
  4113                           
  4114                           ;SR_FRS.c: 60: if((volume < 8) && (volume > 0)){
  4115  1736  3008               	movlw	8
  4116  1737  026F               	subwf	SetMIC@volume,w
  4117  1738  1803               	skipnc
  4118  1739  0008               	return
  4119  173A  086F               	movf	SetMIC@volume,w
  4120  173B  1903               	btfsc	3,2
  4121  173C  0008               	return
  4122                           
  4123                           ;SR_FRS.c: 61: printf("AT+DMOSETMIC=%c,%c,%c",volume,scram,0);
  4124  173D  309A               	movlw	low (STR_6| (0+32768))
  4125  173E  00DC               	movwf	printf@f
  4126  173F  3090               	movlw	high (STR_6| (0+32768))
  4127  1740  00DD               	movwf	printf@f+1
  4128  1741  086F               	movf	SetMIC@volume,w
  4129  1742  0021               	movlb	1	; select bank1
  4130  1743  00E1               	movwf	??_SetMIC^(0+128)
  4131  1744  01E2               	clrf	(??_SetMIC^(0+128)+1)
  4132  1745  0861               	movf	??_SetMIC^(0+128),w
  4133  1746  0020               	movlb	0	; select bank0
  4134  1747  00DE               	movwf	?_printf+2
  4135  1748  0021               	movlb	1	; select bank1
  4136  1749  0862               	movf	(??_SetMIC+1)^(0+128),w
  4137  174A  0020               	movlb	0	; select bank0
  4138  174B  00DF               	movwf	?_printf+3
  4139  174C  086E               	movf	SetMIC@scram,w
  4140  174D  0021               	movlb	1	; select bank1
  4141  174E  00E3               	movwf	(??_SetMIC+2)^(0+128)
  4142  174F  01E4               	clrf	((??_SetMIC+2)^(0+128)+1)
  4143  1750  0863               	movf	(??_SetMIC+2)^(0+128),w
  4144  1751  0020               	movlb	0	; select bank0
  4145  1752  00E0               	movwf	?_printf+4
  4146  1753  0021               	movlb	1	; select bank1
  4147  1754  0864               	movf	(??_SetMIC+3)^(0+128),w
  4148  1755  0020               	movlb	0	; select bank0
  4149  1756  00E1               	movwf	?_printf+5
  4150  1757  3000               	movlw	0
  4151  1758  00E2               	movwf	?_printf+6
  4152  1759  00E3               	movwf	?_printf+7
  4153  175A  3180  2031         	fcall	_printf
  4154  175C  0008               	return
  4155  175D                     __end_of_SetMIC:	
  4156                           
  4157                           	psect	text22
  4158  170E                     __ptext22:	
  4159 ;; *************** function _SetFrequency *****************
  4160 ;; Defined at:
  4161 ;;		line 38 in file "SR_FRS.c"
  4162 ;; Parameters:    Size  Location     Type
  4163 ;;		None
  4164 ;; Auto vars:     Size  Location     Type
  4165 ;;		None
  4166 ;; Return value:  Size  Location     Type
  4167 ;;                  1    wreg      void 
  4168 ;; Registers used:
  4169 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4170 ;; Tracked objects:
  4171 ;;		On entry : 0/0
  4172 ;;		On exit  : 0/0
  4173 ;;		Unchanged: 0/0
  4174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4179 ;;Total ram usage:        0 bytes
  4180 ;; Hardware stack levels used:    1
  4181 ;; Hardware stack levels required when called:    6
  4182 ;; This function calls:
  4183 ;;		_printf
  4184 ;; This function is called by:
  4185 ;;		_SR_FRSStart
  4186 ;; This function uses a non-reentrant model
  4187 ;;
  4188                           
  4189                           
  4190                           ;psect for function _SetFrequency
  4191  170E                     _SetFrequency:	
  4192                           
  4193                           ;SR_FRS.c: 39: printf("AT+DMOSETGROUP=%d,%f,%f,%d,%d,%d,%d",0,136.0250,136.0250,83,2,83,
      +                          0);
  4194                           
  4195                           ;incstack = 0
  4196                           ; Regs used in _SetFrequency: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4197  170E  3076               	movlw	low (STR_2| (0+32768))
  4198  170F  0020               	movlb	0	; select bank0
  4199  1710  00DC               	movwf	printf@f
  4200  1711  3090               	movlw	high (STR_2| (0+32768))
  4201  1712  00DD               	movwf	printf@f+1
  4202  1713  3000               	movlw	0
  4203  1714  00DE               	movwf	?_printf+2
  4204  1715  00DF               	movwf	?_printf+3
  4205  1716  3006               	movlw	6
  4206  1717  00E0               	movwf	?_printf+4
  4207  1718  3008               	movlw	8
  4208  1719  00E1               	movwf	?_printf+5
  4209  171A  3043               	movlw	67
  4210  171B  00E2               	movwf	?_printf+6
  4211  171C  3006               	movlw	6
  4212  171D  00E3               	movwf	?_printf+7
  4213  171E  3008               	movlw	8
  4214  171F  00E4               	movwf	?_printf+8
  4215  1720  3043               	movlw	67
  4216  1721  00E5               	movwf	?_printf+9
  4217  1722  3053               	movlw	83
  4218  1723  00E6               	movwf	?_printf+10
  4219  1724  3000               	movlw	0
  4220  1725  00E7               	movwf	?_printf+11
  4221  1726  3002               	movlw	2
  4222  1727  00E8               	movwf	?_printf+12
  4223  1728  3000               	movlw	0
  4224  1729  00E9               	movwf	?_printf+13
  4225  172A  3053               	movlw	83
  4226  172B  00EA               	movwf	?_printf+14
  4227  172C  3000               	movlw	0
  4228  172D  00EB               	movwf	?_printf+15
  4229  172E  3000               	movlw	0
  4230  172F  00EC               	movwf	?_printf+16
  4231  1730  00ED               	movwf	?_printf+17
  4232  1731  3180  2031         	fcall	_printf
  4233  1733  0008               	return
  4234  1734                     __end_of_SetFrequency:	
  4235                           
  4236                           	psect	text23
  4237  15A1                     __ptext23:	
  4238 ;; *************** function _SetCommandMode *****************
  4239 ;; Defined at:
  4240 ;;		line 34 in file "SR_FRS.c"
  4241 ;; Parameters:    Size  Location     Type
  4242 ;;		None
  4243 ;; Auto vars:     Size  Location     Type
  4244 ;;		None
  4245 ;; Return value:  Size  Location     Type
  4246 ;;                  1    wreg      void 
  4247 ;; Registers used:
  4248 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4249 ;; Tracked objects:
  4250 ;;		On entry : 0/0
  4251 ;;		On exit  : 0/0
  4252 ;;		Unchanged: 0/0
  4253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4258 ;;Total ram usage:        0 bytes
  4259 ;; Hardware stack levels used:    1
  4260 ;; Hardware stack levels required when called:    6
  4261 ;; This function calls:
  4262 ;;		_printf
  4263 ;; This function is called by:
  4264 ;;		_SR_FRSStart
  4265 ;; This function uses a non-reentrant model
  4266 ;;
  4267                           
  4268                           
  4269                           ;psect for function _SetCommandMode
  4270  15A1                     _SetCommandMode:	
  4271                           
  4272                           ;SR_FRS.c: 35: printf("AT+DMOCONNECT");
  4273                           
  4274                           ;incstack = 0
  4275                           ; Regs used in _SetCommandMode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4276  15A1  30D9               	movlw	low (STR_1| (0+32768))
  4277  15A2  0020               	movlb	0	; select bank0
  4278  15A3  00DC               	movwf	printf@f
  4279  15A4  3090               	movlw	high (STR_1| (0+32768))
  4280  15A5  00DD               	movwf	printf@f+1
  4281  15A6  3180  2031         	fcall	_printf
  4282  15A8  0008               	return
  4283  15A9                     __end_of_SetCommandMode:	
  4284                           
  4285                           	psect	text24
  4286  0031                     __ptext24:	
  4287 ;; *************** function _printf *****************
  4288 ;; Defined at:
  4289 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  4290 ;; Parameters:    Size  Location     Type
  4291 ;;  f               2   60[BANK0 ] PTR const unsigned char 
  4292 ;;		 -> STR_6(22), STR_5(19), STR_4(19), STR_3(22), 
  4293 ;;		 -> STR_2(36), STR_1(14), 
  4294 ;; Auto vars:     Size  Location     Type
  4295 ;;  tmpval          4   20[BANK1 ] struct .
  4296 ;;  val             4   14[BANK1 ] unsigned long 
  4297 ;;  fval            3   24[BANK1 ] unsigned long 
  4298 ;;  exp             2   18[BANK1 ] int 
  4299 ;;  prec            2   12[BANK1 ] int 
  4300 ;;  flag            2    9[BANK1 ] unsigned short 
  4301 ;;  cp              2    0        PTR const unsigned char 
  4302 ;;  len             2    0        unsigned int 
  4303 ;;  width           2    0        int 
  4304 ;;  c               1   27[BANK1 ] char 
  4305 ;;  ap              1   11[BANK1 ] PTR void [1]
  4306 ;;		 -> ?_printf(2), 
  4307 ;;  d               1    0        unsigned char 
  4308 ;; Return value:  Size  Location     Type
  4309 ;;                  2   60[BANK0 ] int 
  4310 ;; Registers used:
  4311 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4312 ;; Tracked objects:
  4313 ;;		On entry : 0/0
  4314 ;;		On exit  : 0/0
  4315 ;;		Unchanged: 0/0
  4316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4317 ;;      Params:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4318 ;;      Locals:         0       0      22       0       0       0       0       0       0       0       0       0       
      +0       0
  4319 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  4320 ;;      Totals:         0      18      28       0       0       0       0       0       0       0       0       0       
      +0       0
  4321 ;;Total ram usage:       46 bytes
  4322 ;; Hardware stack levels used:    1
  4323 ;; Hardware stack levels required when called:    5
  4324 ;; This function calls:
  4325 ;;		___awdiv
  4326 ;;		___ftadd
  4327 ;;		___ftge
  4328 ;;		___ftmul
  4329 ;;		___ftneg
  4330 ;;		___ftsub
  4331 ;;		___fttol
  4332 ;;		___lldiv
  4333 ;;		___llmod
  4334 ;;		___lltoft
  4335 ;;		___wmul
  4336 ;;		__div_to_l_
  4337 ;;		__tdiv_to_l_
  4338 ;;		_fround
  4339 ;;		_putch
  4340 ;;		_scale
  4341 ;; This function is called by:
  4342 ;;		_SetCommandMode
  4343 ;;		_SetFrequency
  4344 ;;		_SetPowerSave
  4345 ;;		_SetVolume
  4346 ;;		_SetVOX
  4347 ;;		_SetMIC
  4348 ;; This function uses a non-reentrant model
  4349 ;;
  4350                           
  4351                           
  4352                           ;psect for function _printf
  4353  0031                     _printf:	
  4354                           
  4355                           ;doprnt.c: 466: va_list ap;
  4356                           ;doprnt.c: 499: signed char c;
  4357                           ;doprnt.c: 501: int width;
  4358                           ;doprnt.c: 504: int prec;
  4359                           ;doprnt.c: 508: unsigned short flag;
  4360                           ;doprnt.c: 515: char d;
  4361                           ;doprnt.c: 516: double fval;
  4362                           ;doprnt.c: 517: int exp;
  4363                           ;doprnt.c: 523: union {
  4364                           ;doprnt.c: 524: unsigned long vd;
  4365                           ;doprnt.c: 525: double integ;
  4366                           ;doprnt.c: 526: } tmpval;
  4367                           ;doprnt.c: 528: unsigned long val;
  4368                           ;doprnt.c: 529: unsigned len;
  4369                           ;doprnt.c: 530: const char * cp;
  4370                           ;doprnt.c: 533: *ap = __va_start();
  4371                           
  4372                           ;incstack = 0
  4373                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4374  0031  305E               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4375  0032  0021               	movlb	1	; select bank1
  4376  0033  00C5               	movwf	??_printf^(0+128)
  4377  0034  0845               	movf	??_printf^(0+128),w
  4378  0035  00D0               	movwf	printf@ap^(0+128)
  4379  0036                     l3676:	
  4380                           ;doprnt.c: 536: while(c = *f++) {
  4381                           
  4382  0036  0020               	movlb	0	; select bank0
  4383  0037  085D               	movf	printf@f+1,w
  4384  0038  0021               	movlb	1	; select bank1
  4385  0039  00C6               	movwf	(??_printf^(0+128)+1)
  4386  003A  0020               	movlb	0	; select bank0
  4387  003B  085C               	movf	printf@f,w
  4388  003C  0021               	movlb	1	; select bank1
  4389  003D  00C5               	movwf	??_printf^(0+128)
  4390  003E  0020               	movlb	0	; select bank0
  4391  003F  0ADC               	incf	printf@f,f
  4392  0040  1903               	skipnz
  4393  0041  0ADD               	incf	printf@f+1,f
  4394  0042  0021               	movlb	1	; select bank1
  4395  0043  0845               	movf	??_printf^(0+128),w
  4396  0044  0084               	movwf	4
  4397  0045  0846               	movf	(??_printf+1)^(0+128),w
  4398  0046  0085               	movwf	5
  4399  0047  0800               	movf	0,w	;code access
  4400  0048  00C7               	movwf	(??_printf+2)^(0+128)
  4401  0049  0847               	movf	(??_printf+2)^(0+128),w
  4402  004A  00E0               	movwf	printf@c^(0+128)
  4403  004B  0860               	movf	printf@c^(0+128),w
  4404  004C  1903               	btfsc	3,2
  4405  004D  0008               	return
  4406                           
  4407                           ;doprnt.c: 538: if(c != '%')
  4408  004E  3025               	movlw	37
  4409  004F  0660               	xorwf	printf@c^(0+128),w
  4410  0050  1903               	btfsc	3,2
  4411  0051  2857               	goto	l3502
  4412                           
  4413                           ;doprnt.c: 540: {
  4414                           ;doprnt.c: 541: (putch(c) );
  4415  0052  0860               	movf	printf@c^(0+128),w
  4416  0053  3188  2000  3180   	fcall	_putch
  4417                           
  4418                           ;doprnt.c: 542: continue;
  4419  0056  2836               	goto	l3676
  4420  0057                     l3502:	
  4421                           
  4422                           ;doprnt.c: 543: }
  4423                           ;doprnt.c: 548: flag = 0;
  4424  0057  0021               	movlb	1	; select bank1
  4425  0058  01CE               	clrf	printf@flag^(0+128)
  4426  0059  01CF               	clrf	(printf@flag+1)^(0+128)
  4427                           
  4428                           ;doprnt.c: 635: switch(c = *f++) {
  4429  005A  286D               	goto	l3512
  4430  005B                     l322:	
  4431                           ;doprnt.c: 662: case 'f':
  4432                           
  4433                           ;doprnt.c: 638: goto alldone;
  4434                           
  4435                           ;doprnt.c: 637: case 0:
  4436                           
  4437                           
  4438                           ;doprnt.c: 663: flag |= 0x400;
  4439  005B  154F               	bsf	(printf@flag^(0+128)+1),2
  4440                           
  4441                           ;doprnt.c: 698: case 'i':
  4442                           ;doprnt.c: 699: break;
  4443                           
  4444                           ;doprnt.c: 697: case 'd':
  4445                           
  4446                           ;doprnt.c: 664: break;
  4447  005C  2890               	goto	l3514
  4448  005D                     l3504:	
  4449                           ;doprnt.c: 784: case 'c':
  4450                           
  4451                           
  4452                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4453  005D  0850               	movf	printf@ap^(0+128),w
  4454  005E  0086               	movwf	6
  4455  005F  0187               	clrf	7
  4456  0060  0801               	movf	1,w
  4457  0061  00C5               	movwf	??_printf^(0+128)
  4458  0062  0845               	movf	??_printf^(0+128),w
  4459  0063  00E0               	movwf	printf@c^(0+128)
  4460  0064  3002               	movlw	2
  4461  0065  00C5               	movwf	??_printf^(0+128)
  4462  0066  0845               	movf	??_printf^(0+128),w
  4463  0067  07D0               	addwf	printf@ap^(0+128),f
  4464  0068                     l3508:	
  4465                           ;doprnt.c: 802: default:
  4466                           
  4467                           
  4468                           ;doprnt.c: 809: (putch(c) );
  4469  0068  0860               	movf	printf@c^(0+128),w
  4470  0069  3188  2000  3180   	fcall	_putch
  4471                           
  4472                           ;doprnt.c: 810: continue;
  4473  006C  2836               	goto	l3676
  4474  006D                     l3512:	
  4475                           ;doprnt.c: 822: }
  4476                           
  4477  006D  0020               	movlb	0	; select bank0
  4478  006E  085D               	movf	printf@f+1,w
  4479  006F  0021               	movlb	1	; select bank1
  4480  0070  00C6               	movwf	(??_printf^(0+128)+1)
  4481  0071  0020               	movlb	0	; select bank0
  4482  0072  085C               	movf	printf@f,w
  4483  0073  0021               	movlb	1	; select bank1
  4484  0074  00C5               	movwf	??_printf^(0+128)
  4485  0075  0020               	movlb	0	; select bank0
  4486  0076  0ADC               	incf	printf@f,f
  4487  0077  1903               	skipnz
  4488  0078  0ADD               	incf	printf@f+1,f
  4489  0079  0021               	movlb	1	; select bank1
  4490  007A  0845               	movf	??_printf^(0+128),w
  4491  007B  0084               	movwf	4
  4492  007C  0846               	movf	(??_printf+1)^(0+128),w
  4493  007D  0085               	movwf	5
  4494  007E  0800               	movf	0,w	;code access
  4495  007F  00E0               	movwf	printf@c^(0+128)
  4496                           
  4497                           ; Switch size 1, requested type "space"
  4498                           ; Number of cases is 5, Range of values is 0 to 105
  4499                           ; switch strategies available:
  4500                           ; Name         Instructions Cycles
  4501                           ; simple_byte           16     9 (average)
  4502                           ; direct_byte          218     6 (fixed)
  4503                           ; jumptable            260     6 (fixed)
  4504                           ;	Chosen strategy is simple_byte
  4505  0080  3A00               	xorlw	0	; case 0
  4506  0081  1903               	skipnz
  4507  0082  2D0F               	goto	l374
  4508  0083  3A63               	xorlw	99	; case 99
  4509  0084  1903               	skipnz
  4510  0085  285D               	goto	l3504
  4511  0086  3A07               	xorlw	7	; case 100
  4512  0087  1903               	skipnz
  4513  0088  2890               	goto	l3514
  4514  0089  3A02               	xorlw	2	; case 102
  4515  008A  1903               	skipnz
  4516  008B  285B               	goto	l322
  4517  008C  3A0F               	xorlw	15	; case 105
  4518  008D  1903               	skipnz
  4519  008E  2890               	goto	l3514
  4520  008F  2868               	goto	l3508
  4521  0090                     l3514:	
  4522                           
  4523                           ;doprnt.c: 825: if(flag & (0x700)) {
  4524  0090  3000               	movlw	0
  4525  0091  0021               	movlb	1	; select bank1
  4526  0092  054E               	andwf	printf@flag^(0+128),w
  4527  0093  00C5               	movwf	??_printf^(0+128)
  4528  0094  3007               	movlw	7
  4529  0095  054F               	andwf	(printf@flag+1)^(0+128),w
  4530  0096  00C6               	movwf	(??_printf+1)^(0+128)
  4531  0097  0845               	movf	??_printf^(0+128),w
  4532  0098  0446               	iorwf	(??_printf^(0+128)+1),w
  4533  0099  1903               	btfsc	3,2
  4534  009A  2C58               	goto	l3642
  4535                           
  4536                           ;doprnt.c: 829: prec = 6;
  4537  009B  3006               	movlw	6
  4538  009C  00D1               	movwf	printf@prec^(0+128)
  4539  009D  3000               	movlw	0
  4540  009E  00D2               	movwf	(printf@prec^(0+128)+1)
  4541                           
  4542                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  4543  009F  0850               	movf	printf@ap^(0+128),w
  4544  00A0  0086               	movwf	6
  4545  00A1  0187               	clrf	7
  4546  00A2  3F40               	moviw [0]fsr1
  4547  00A3  00DD               	movwf	printf@fval^(0+128)
  4548  00A4  3F41               	moviw [1]fsr1
  4549  00A5  00DE               	movwf	(printf@fval+1)^(0+128)
  4550  00A6  3F42               	moviw [2]fsr1
  4551  00A7  00DF               	movwf	(printf@fval+2)^(0+128)
  4552  00A8  3003               	movlw	3
  4553  00A9  00C5               	movwf	??_printf^(0+128)
  4554  00AA  0845               	movf	??_printf^(0+128),w
  4555  00AB  07D0               	addwf	printf@ap^(0+128),f
  4556                           
  4557                           ;doprnt.c: 831: if(fval < 0.0) {
  4558  00AC  085D               	movf	printf@fval^(0+128),w
  4559  00AD  00F1               	movwf	___ftge@ff1
  4560  00AE  085E               	movf	(printf@fval+1)^(0+128),w
  4561  00AF  00F2               	movwf	___ftge@ff1+1
  4562  00B0  085F               	movf	(printf@fval+2)^(0+128),w
  4563  00B1  00F3               	movwf	___ftge@ff1+2
  4564  00B2  3000               	movlw	0
  4565  00B3  00F4               	movwf	___ftge@ff2
  4566  00B4  3000               	movlw	0
  4567  00B5  00F5               	movwf	___ftge@ff2+1
  4568  00B6  3000               	movlw	0
  4569  00B7  00F6               	movwf	___ftge@ff2+2
  4570  00B8  3197  2788  3180   	fcall	___ftge
  4571  00BB  1803               	btfsc	3,0
  4572  00BC  28D2               	goto	l3528
  4573                           
  4574                           ;doprnt.c: 832: fval = -fval;
  4575  00BD  0021               	movlb	1	; select bank1
  4576  00BE  085D               	movf	printf@fval^(0+128),w
  4577  00BF  00F1               	movwf	___ftneg@f1
  4578  00C0  085E               	movf	(printf@fval+1)^(0+128),w
  4579  00C1  00F2               	movwf	___ftneg@f1+1
  4580  00C2  085F               	movf	(printf@fval+2)^(0+128),w
  4581  00C3  00F3               	movwf	___ftneg@f1+2
  4582  00C4  3195  2591  3180   	fcall	___ftneg
  4583  00C7  0871               	movf	?___ftneg,w
  4584  00C8  0021               	movlb	1	; select bank1
  4585  00C9  00DD               	movwf	printf@fval^(0+128)
  4586  00CA  0872               	movf	?___ftneg+1,w
  4587  00CB  00DE               	movwf	(printf@fval+1)^(0+128)
  4588  00CC  0873               	movf	?___ftneg+2,w
  4589  00CD  00DF               	movwf	(printf@fval+2)^(0+128)
  4590                           
  4591                           ;doprnt.c: 833: flag |= 0x03;
  4592  00CE  3003               	movlw	3
  4593  00CF  04CE               	iorwf	printf@flag^(0+128),f
  4594  00D0  3000               	movlw	0
  4595  00D1  04CF               	iorwf	(printf@flag+1)^(0+128),f
  4596  00D2                     l3528:	
  4597                           
  4598                           ;doprnt.c: 834: }
  4599                           ;doprnt.c: 835: exp = 0;
  4600  00D2  0021               	movlb	1	; select bank1
  4601  00D3  01D7               	clrf	printf@exp^(0+128)
  4602  00D4  01D8               	clrf	(printf@exp+1)^(0+128)
  4603                           
  4604                           ;doprnt.c: 836: if( fval!=0) {
  4605  00D5  085F               	movf	(printf@fval+2)^(0+128),w
  4606  00D6  045E               	iorwf	(printf@fval+1)^(0+128),w
  4607  00D7  045D               	iorwf	printf@fval^(0+128),w
  4608  00D8  1903               	skipnz
  4609  00D9  298E               	goto	l330
  4610                           
  4611                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4612  00DA  30DD               	movlw	low (printf@fval| 0)
  4613  00DB  0086               	movwf	6
  4614  00DC  0187               	clrf	7
  4615  00DD  3F40               	moviw [0]fsr1
  4616  00DE  00C5               	movwf	??_printf^(0+128)
  4617  00DF  3F41               	moviw [1]fsr1
  4618  00E0  00C6               	movwf	(??_printf^(0+128)+1)
  4619  00E1  3F42               	moviw [2]fsr1
  4620  00E2  00C7               	movwf	(??_printf^(0+128)+2)
  4621  00E3  3F43               	moviw [3]fsr1
  4622  00E4  00C8               	movwf	(??_printf^(0+128)+3)
  4623  00E5  300F               	movlw	15
  4624  00E6                     u5525:	
  4625  00E6  36C8               	lsrf	(??_printf^(0+128)+3),f
  4626  00E7  0CC7               	rrf	(??_printf^(0+128)+2),f
  4627  00E8  0CC6               	rrf	(??_printf^(0+128)+1),f
  4628  00E9  0CC5               	rrf	??_printf^(0+128),f
  4629  00EA  0B89               	decfsz	9,f
  4630  00EB  28E6               	goto	u5525
  4631  00EC  30FF               	movlw	255
  4632  00ED  0545               	andwf	??_printf^(0+128),w
  4633  00EE  00C9               	movwf	(??_printf+4)^(0+128)
  4634  00EF  3000               	movlw	0
  4635  00F0  0546               	andwf	(??_printf+1)^(0+128),w
  4636  00F1  00CA               	movwf	(??_printf+5)^(0+128)
  4637  00F2  0849               	movf	(??_printf+4)^(0+128),w
  4638  00F3  3E82               	addlw	130
  4639  00F4  00D7               	movwf	printf@exp^(0+128)
  4640  00F5  30FF               	movlw	255
  4641  00F6  3D4A               	addwfc	(??_printf+5)^(0+128),w
  4642  00F7  00D8               	movwf	(printf@exp+1)^(0+128)
  4643                           
  4644                           ;doprnt.c: 838: exp--;
  4645  00F8  30FF               	movlw	255
  4646  00F9  07D7               	addwf	printf@exp^(0+128),f
  4647  00FA  30FF               	movlw	255
  4648  00FB  3DD8               	addwfc	(printf@exp+1)^(0+128),f
  4649                           
  4650                           ;doprnt.c: 839: exp *= 3;
  4651  00FC  3003               	movlw	3
  4652  00FD  0020               	movlb	0	; select bank0
  4653  00FE  00A5               	movwf	___wmul@multiplier
  4654  00FF  3000               	movlw	0
  4655  0100  00A6               	movwf	___wmul@multiplier+1
  4656  0101  0021               	movlb	1	; select bank1
  4657  0102  0858               	movf	(printf@exp+1)^(0+128),w
  4658  0103  0020               	movlb	0	; select bank0
  4659  0104  00A8               	movwf	___wmul@multiplicand+1
  4660  0105  0021               	movlb	1	; select bank1
  4661  0106  0857               	movf	printf@exp^(0+128),w
  4662  0107  0020               	movlb	0	; select bank0
  4663  0108  00A7               	movwf	___wmul@multiplicand
  4664  0109  3196  2654  3180   	fcall	___wmul
  4665  010C  0020               	movlb	0	; select bank0
  4666  010D  0826               	movf	?___wmul+1,w
  4667  010E  0021               	movlb	1	; select bank1
  4668  010F  00D8               	movwf	(printf@exp+1)^(0+128)
  4669  0110  0020               	movlb	0	; select bank0
  4670  0111  0825               	movf	?___wmul,w
  4671  0112  0021               	movlb	1	; select bank1
  4672  0113  00D7               	movwf	printf@exp^(0+128)
  4673                           
  4674                           ;doprnt.c: 840: exp /= 10;
  4675  0114  300A               	movlw	10
  4676  0115  00F8               	movwf	___awdiv@divisor
  4677  0116  3000               	movlw	0
  4678  0117  00F9               	movwf	___awdiv@divisor+1
  4679  0118  0858               	movf	(printf@exp+1)^(0+128),w
  4680  0119  00FB               	movwf	___awdiv@dividend+1
  4681  011A  0857               	movf	printf@exp^(0+128),w
  4682  011B  00FA               	movwf	___awdiv@dividend
  4683  011C  3188  20A1  3180   	fcall	___awdiv
  4684  011F  0879               	movf	?___awdiv+1,w
  4685  0120  0021               	movlb	1	; select bank1
  4686  0121  00D8               	movwf	(printf@exp+1)^(0+128)
  4687  0122  0878               	movf	?___awdiv,w
  4688  0123  00D7               	movwf	printf@exp^(0+128)
  4689                           
  4690                           ;doprnt.c: 841: if(exp < 0)
  4691  0124  1FD8               	btfss	(printf@exp+1)^(0+128),7
  4692  0125  292A               	goto	l3544
  4693                           
  4694                           ;doprnt.c: 842: exp--;
  4695  0126  30FF               	movlw	255
  4696  0127  07D7               	addwf	printf@exp^(0+128),f
  4697  0128  30FF               	movlw	255
  4698  0129  3DD8               	addwfc	(printf@exp+1)^(0+128),f
  4699  012A                     l3544:	
  4700                           
  4701                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  4702  012A  0357               	decf	printf@exp^(0+128),w
  4703  012B  3AFF               	xorlw	255
  4704  012C  3185  2510  3180   	fcall	_scale
  4705  012F  0020               	movlb	0	; select bank0
  4706  0130  083B               	movf	?_scale,w
  4707  0131  0021               	movlb	1	; select bank1
  4708  0132  00D9               	movwf	printf@tmpval^(0+128)
  4709  0133  0020               	movlb	0	; select bank0
  4710  0134  083C               	movf	?_scale+1,w
  4711  0135  0021               	movlb	1	; select bank1
  4712  0136  00DA               	movwf	(printf@tmpval+1)^(0+128)
  4713  0137  0020               	movlb	0	; select bank0
  4714  0138  083D               	movf	?_scale+2,w
  4715  0139  0021               	movlb	1	; select bank1
  4716  013A  00DB               	movwf	(printf@tmpval+2)^(0+128)
  4717                           
  4718                           ;doprnt.c: 847: tmpval.integ *= fval;
  4719  013B  085D               	movf	printf@fval^(0+128),w
  4720  013C  0020               	movlb	0	; select bank0
  4721  013D  00AB               	movwf	___ftmul@f1
  4722  013E  0021               	movlb	1	; select bank1
  4723  013F  085E               	movf	(printf@fval+1)^(0+128),w
  4724  0140  0020               	movlb	0	; select bank0
  4725  0141  00AC               	movwf	___ftmul@f1+1
  4726  0142  0021               	movlb	1	; select bank1
  4727  0143  085F               	movf	(printf@fval+2)^(0+128),w
  4728  0144  0020               	movlb	0	; select bank0
  4729  0145  00AD               	movwf	___ftmul@f1+2
  4730  0146  0021               	movlb	1	; select bank1
  4731  0147  0859               	movf	printf@tmpval^(0+128),w
  4732  0148  0020               	movlb	0	; select bank0
  4733  0149  00AE               	movwf	___ftmul@f2
  4734  014A  0021               	movlb	1	; select bank1
  4735  014B  085A               	movf	(printf@tmpval+1)^(0+128),w
  4736  014C  0020               	movlb	0	; select bank0
  4737  014D  00AF               	movwf	___ftmul@f2+1
  4738  014E  0021               	movlb	1	; select bank1
  4739  014F  085B               	movf	(printf@tmpval+2)^(0+128),w
  4740  0150  0020               	movlb	0	; select bank0
  4741  0151  00B0               	movwf	___ftmul@f2+2
  4742  0152  318A  2231  3180   	fcall	___ftmul
  4743  0155  0020               	movlb	0	; select bank0
  4744  0156  082B               	movf	?___ftmul,w
  4745  0157  0021               	movlb	1	; select bank1
  4746  0158  00D9               	movwf	printf@tmpval^(0+128)
  4747  0159  0020               	movlb	0	; select bank0
  4748  015A  082C               	movf	?___ftmul+1,w
  4749  015B  0021               	movlb	1	; select bank1
  4750  015C  00DA               	movwf	(printf@tmpval+1)^(0+128)
  4751  015D  0020               	movlb	0	; select bank0
  4752  015E  082D               	movf	?___ftmul+2,w
  4753  015F  0021               	movlb	1	; select bank1
  4754  0160  00DB               	movwf	(printf@tmpval+2)^(0+128)
  4755                           
  4756                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  4757  0161  0859               	movf	printf@tmpval^(0+128),w
  4758  0162  00F1               	movwf	___ftge@ff1
  4759  0163  085A               	movf	(printf@tmpval+1)^(0+128),w
  4760  0164  00F2               	movwf	___ftge@ff1+1
  4761  0165  085B               	movf	(printf@tmpval+2)^(0+128),w
  4762  0166  00F3               	movwf	___ftge@ff1+2
  4763  0167  3000               	movlw	0
  4764  0168  00F4               	movwf	___ftge@ff2
  4765  0169  3080               	movlw	128
  4766  016A  00F5               	movwf	___ftge@ff2+1
  4767  016B  303F               	movlw	63
  4768  016C  00F6               	movwf	___ftge@ff2+2
  4769  016D  3197  2788  3180   	fcall	___ftge
  4770  0170  1803               	btfsc	3,0
  4771  0171  2977               	goto	l3552
  4772                           
  4773                           ;doprnt.c: 849: exp--;
  4774  0172  30FF               	movlw	255
  4775  0173  0021               	movlb	1	; select bank1
  4776  0174  07D7               	addwf	printf@exp^(0+128),f
  4777  0175  30FF               	movlw	255
  4778  0176  298D               	goto	L1
  4779  0177                     l3552:	
  4780                           
  4781                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  4782  0177  0021               	movlb	1	; select bank1
  4783  0178  0859               	movf	printf@tmpval^(0+128),w
  4784  0179  00F1               	movwf	___ftge@ff1
  4785  017A  085A               	movf	(printf@tmpval+1)^(0+128),w
  4786  017B  00F2               	movwf	___ftge@ff1+1
  4787  017C  085B               	movf	(printf@tmpval+2)^(0+128),w
  4788  017D  00F3               	movwf	___ftge@ff1+2
  4789  017E  3000               	movlw	0
  4790  017F  00F4               	movwf	___ftge@ff2
  4791  0180  3020               	movlw	32
  4792  0181  00F5               	movwf	___ftge@ff2+1
  4793  0182  3041               	movlw	65
  4794  0183  00F6               	movwf	___ftge@ff2+2
  4795  0184  3197  2788  3180   	fcall	___ftge
  4796  0187  1C03               	btfss	3,0
  4797  0188  298E               	goto	l330
  4798                           
  4799                           ;doprnt.c: 851: exp++;
  4800  0189  3001               	movlw	1
  4801  018A  0021               	movlb	1	; select bank1
  4802  018B  07D7               	addwf	printf@exp^(0+128),f
  4803  018C  3000               	movlw	0
  4804  018D                     L1:	
  4805  018D  3DD8               	addwfc	(printf@exp+1)^(0+128),f
  4806  018E                     l330:	
  4807                           
  4808                           ;doprnt.c: 852: }
  4809                           ;doprnt.c: 1112: if(prec <= 12)
  4810  018E  0021               	movlb	1	; select bank1
  4811  018F  0852               	movf	(printf@prec+1)^(0+128),w
  4812  0190  3A80               	xorlw	128
  4813  0191  00C5               	movwf	??_printf^(0+128)
  4814  0192  3080               	movlw	128
  4815  0193  0245               	subwf	??_printf^(0+128),w
  4816  0194  1D03               	skipz
  4817  0195  2998               	goto	u5565
  4818  0196  300D               	movlw	13
  4819  0197  0251               	subwf	printf@prec^(0+128),w
  4820  0198                     u5565:	
  4821  0198  1803               	skipnc
  4822  0199  29C1               	goto	l3558
  4823                           
  4824                           ;doprnt.c: 1113: fval += fround(prec);
  4825  019A  0021               	movlb	1	; select bank1
  4826  019B  0851               	movf	printf@prec^(0+128),w
  4827  019C  318E  269B  3180   	fcall	_fround
  4828  019F  0020               	movlb	0	; select bank0
  4829  01A0  083B               	movf	?_fround,w
  4830  01A1  00C9               	movwf	___ftadd@f1
  4831  01A2  083C               	movf	?_fround+1,w
  4832  01A3  00CA               	movwf	___ftadd@f1+1
  4833  01A4  083D               	movf	?_fround+2,w
  4834  01A5  00CB               	movwf	___ftadd@f1+2
  4835  01A6  0021               	movlb	1	; select bank1
  4836  01A7  085D               	movf	printf@fval^(0+128),w
  4837  01A8  0020               	movlb	0	; select bank0
  4838  01A9  00CC               	movwf	___ftadd@f2
  4839  01AA  0021               	movlb	1	; select bank1
  4840  01AB  085E               	movf	(printf@fval+1)^(0+128),w
  4841  01AC  0020               	movlb	0	; select bank0
  4842  01AD  00CD               	movwf	___ftadd@f2+1
  4843  01AE  0021               	movlb	1	; select bank1
  4844  01AF  085F               	movf	(printf@fval+2)^(0+128),w
  4845  01B0  0020               	movlb	0	; select bank0
  4846  01B1  00CE               	movwf	___ftadd@f2+2
  4847  01B2  318C  2488  3180   	fcall	___ftadd
  4848  01B5  0020               	movlb	0	; select bank0
  4849  01B6  0849               	movf	?___ftadd,w
  4850  01B7  0021               	movlb	1	; select bank1
  4851  01B8  00DD               	movwf	printf@fval^(0+128)
  4852  01B9  0020               	movlb	0	; select bank0
  4853  01BA  084A               	movf	?___ftadd+1,w
  4854  01BB  0021               	movlb	1	; select bank1
  4855  01BC  00DE               	movwf	(printf@fval+1)^(0+128)
  4856  01BD  0020               	movlb	0	; select bank0
  4857  01BE  084B               	movf	?___ftadd+2,w
  4858  01BF  0021               	movlb	1	; select bank1
  4859  01C0  00DF               	movwf	(printf@fval+2)^(0+128)
  4860  01C1                     l3558:	
  4861                           
  4862                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  4863  01C1  0021               	movlb	1	; select bank1
  4864  01C2  0858               	movf	(printf@exp+1)^(0+128),w
  4865  01C3  3A80               	xorlw	128
  4866  01C4  00C5               	movwf	??_printf^(0+128)
  4867  01C5  3080               	movlw	128
  4868  01C6  0245               	subwf	??_printf^(0+128),w
  4869  01C7  1D03               	skipz
  4870  01C8  29CB               	goto	u5575
  4871  01C9  300A               	movlw	10
  4872  01CA  0257               	subwf	printf@exp^(0+128),w
  4873  01CB                     u5575:	
  4874  01CB  1803               	skipnc
  4875  01CC  29F4               	goto	l3566
  4876  01CD  0021               	movlb	1	; select bank1
  4877  01CE  085F               	movf	(printf@fval+2)^(0+128),w
  4878  01CF  045E               	iorwf	(printf@fval+1)^(0+128),w
  4879  01D0  045D               	iorwf	printf@fval^(0+128),w
  4880  01D1  1903               	skipnz
  4881  01D2  2A3C               	goto	l3580
  4882  01D3  085D               	movf	printf@fval^(0+128),w
  4883  01D4  0020               	movlb	0	; select bank0
  4884  01D5  00C4               	movwf	___fttol@f1
  4885  01D6  0021               	movlb	1	; select bank1
  4886  01D7  085E               	movf	(printf@fval+1)^(0+128),w
  4887  01D8  0020               	movlb	0	; select bank0
  4888  01D9  00C5               	movwf	___fttol@f1+1
  4889  01DA  0021               	movlb	1	; select bank1
  4890  01DB  085F               	movf	(printf@fval+2)^(0+128),w
  4891  01DC  0020               	movlb	0	; select bank0
  4892  01DD  00C6               	movwf	___fttol@f1+2
  4893  01DE  3189  21AA  3180   	fcall	___fttol
  4894  01E1  0020               	movlb	0	; select bank0
  4895  01E2  0847               	movf	?___fttol+3,w
  4896  01E3  0446               	iorwf	?___fttol+2,w
  4897  01E4  0445               	iorwf	?___fttol+1,w
  4898  01E5  0444               	iorwf	?___fttol,w
  4899  01E6  1D03               	skipz
  4900  01E7  2A3C               	goto	l3580
  4901  01E8  0021               	movlb	1	; select bank1
  4902  01E9  0858               	movf	(printf@exp+1)^(0+128),w
  4903  01EA  3A80               	xorlw	128
  4904  01EB  00C5               	movwf	??_printf^(0+128)
  4905  01EC  3080               	movlw	128
  4906  01ED  0245               	subwf	??_printf^(0+128),w
  4907  01EE  1D03               	skipz
  4908  01EF  29F2               	goto	u5605
  4909  01F0  3002               	movlw	2
  4910  01F1  0257               	subwf	printf@exp^(0+128),w
  4911  01F2                     u5605:	
  4912  01F2  1C03               	skipc
  4913  01F3  2A3C               	goto	l3580
  4914  01F4                     l3566:	
  4915                           
  4916                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  4917  01F4  0021               	movlb	1	; select bank1
  4918  01F5  0859               	movf	printf@tmpval^(0+128),w
  4919  01F6  00F1               	movwf	___ftge@ff1
  4920  01F7  085A               	movf	(printf@tmpval+1)^(0+128),w
  4921  01F8  00F2               	movwf	___ftge@ff1+1
  4922  01F9  085B               	movf	(printf@tmpval+2)^(0+128),w
  4923  01FA  00F3               	movwf	___ftge@ff1+2
  4924  01FB  3070               	movlw	112
  4925  01FC  00F4               	movwf	___ftge@ff2
  4926  01FD  3089               	movlw	137
  4927  01FE  00F5               	movwf	___ftge@ff2+1
  4928  01FF  3040               	movlw	64
  4929  0200  00F6               	movwf	___ftge@ff2+2
  4930  0201  3197  2788  3180   	fcall	___ftge
  4931  0204  1803               	btfsc	3,0
  4932  0205  2A08               	goto	l3570
  4933                           
  4934                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  4935  0206  30F7               	movlw	247
  4936  0207  2A09               	goto	L2
  4937  0208                     l3570:	
  4938                           ;doprnt.c: 1122: }else{
  4939                           
  4940                           
  4941                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  4942  0208  30F8               	movlw	248
  4943  0209                     L2:	
  4944  0209  0021               	movlb	1	; select bank1
  4945  020A  07D7               	addwf	printf@exp^(0+128),f
  4946  020B  30FF               	movlw	255
  4947  020C  3DD8               	addwfc	(printf@exp+1)^(0+128),f
  4948                           
  4949                           ;doprnt.c: 1124: }
  4950                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  4951  020D  0857               	movf	printf@exp^(0+128),w
  4952  020E  3185  2510  3180   	fcall	_scale
  4953  0211  0020               	movlb	0	; select bank0
  4954  0212  083B               	movf	?_scale,w
  4955  0213  0021               	movlb	1	; select bank1
  4956  0214  00D9               	movwf	printf@tmpval^(0+128)
  4957  0215  0020               	movlb	0	; select bank0
  4958  0216  083C               	movf	?_scale+1,w
  4959  0217  0021               	movlb	1	; select bank1
  4960  0218  00DA               	movwf	(printf@tmpval+1)^(0+128)
  4961  0219  0020               	movlb	0	; select bank0
  4962  021A  083D               	movf	?_scale+2,w
  4963  021B  0021               	movlb	1	; select bank1
  4964  021C  00DB               	movwf	(printf@tmpval+2)^(0+128)
  4965                           
  4966                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  4967  021D  085D               	movf	printf@fval^(0+128),w
  4968  021E  00F1               	movwf	__tdiv_to_l_@f1
  4969  021F  085E               	movf	(printf@fval+1)^(0+128),w
  4970  0220  00F2               	movwf	__tdiv_to_l_@f1+1
  4971  0221  085F               	movf	(printf@fval+2)^(0+128),w
  4972  0222  00F3               	movwf	__tdiv_to_l_@f1+2
  4973  0223  0859               	movf	printf@tmpval^(0+128),w
  4974  0224  00F4               	movwf	__tdiv_to_l_@f2
  4975  0225  085A               	movf	(printf@tmpval+1)^(0+128),w
  4976  0226  00F5               	movwf	__tdiv_to_l_@f2+1
  4977  0227  085B               	movf	(printf@tmpval+2)^(0+128),w
  4978  0228  00F6               	movwf	__tdiv_to_l_@f2+2
  4979  0229  318A  22E5  3180   	fcall	__tdiv_to_l_
  4980  022C  0874               	movf	?__tdiv_to_l_+3,w
  4981  022D  0021               	movlb	1	; select bank1
  4982  022E  00D6               	movwf	(printf@val+3)^(0+128)
  4983  022F  0873               	movf	?__tdiv_to_l_+2,w
  4984  0230  00D5               	movwf	(printf@val+2)^(0+128)
  4985  0231  0872               	movf	?__tdiv_to_l_+1,w
  4986  0232  00D4               	movwf	(printf@val+1)^(0+128)
  4987  0233  0871               	movf	?__tdiv_to_l_,w
  4988  0234  00D3               	movwf	printf@val^(0+128)
  4989                           
  4990                           ;doprnt.c: 1129: fval = 0.0;
  4991  0235  3000               	movlw	0
  4992  0236  00DD               	movwf	printf@fval^(0+128)
  4993  0237  3000               	movlw	0
  4994  0238  00DE               	movwf	(printf@fval+1)^(0+128)
  4995  0239  3000               	movlw	0
  4996  023A  00DF               	movwf	(printf@fval+2)^(0+128)
  4997                           
  4998                           ;doprnt.c: 1130: } else {
  4999  023B  2A91               	goto	l3584
  5000  023C                     l3580:	
  5001                           
  5002                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5003  023C  0021               	movlb	1	; select bank1
  5004  023D  085D               	movf	printf@fval^(0+128),w
  5005  023E  0020               	movlb	0	; select bank0
  5006  023F  00C4               	movwf	___fttol@f1
  5007  0240  0021               	movlb	1	; select bank1
  5008  0241  085E               	movf	(printf@fval+1)^(0+128),w
  5009  0242  0020               	movlb	0	; select bank0
  5010  0243  00C5               	movwf	___fttol@f1+1
  5011  0244  0021               	movlb	1	; select bank1
  5012  0245  085F               	movf	(printf@fval+2)^(0+128),w
  5013  0246  0020               	movlb	0	; select bank0
  5014  0247  00C6               	movwf	___fttol@f1+2
  5015  0248  3189  21AA  3180   	fcall	___fttol
  5016  024B  0020               	movlb	0	; select bank0
  5017  024C  0847               	movf	?___fttol+3,w
  5018  024D  0021               	movlb	1	; select bank1
  5019  024E  00D6               	movwf	(printf@val+3)^(0+128)
  5020  024F  0020               	movlb	0	; select bank0
  5021  0250  0846               	movf	?___fttol+2,w
  5022  0251  0021               	movlb	1	; select bank1
  5023  0252  00D5               	movwf	(printf@val+2)^(0+128)
  5024  0253  0020               	movlb	0	; select bank0
  5025  0254  0845               	movf	?___fttol+1,w
  5026  0255  0021               	movlb	1	; select bank1
  5027  0256  00D4               	movwf	(printf@val+1)^(0+128)
  5028  0257  0020               	movlb	0	; select bank0
  5029  0258  0844               	movf	?___fttol,w
  5030  0259  0021               	movlb	1	; select bank1
  5031  025A  00D3               	movwf	printf@val^(0+128)
  5032                           
  5033                           ;doprnt.c: 1132: fval -= (double)val;
  5034  025B  0856               	movf	(printf@val+3)^(0+128),w
  5035  025C  0020               	movlb	0	; select bank0
  5036  025D  00A3               	movwf	___lltoft@c+3
  5037  025E  0021               	movlb	1	; select bank1
  5038  025F  0855               	movf	(printf@val+2)^(0+128),w
  5039  0260  0020               	movlb	0	; select bank0
  5040  0261  00A2               	movwf	___lltoft@c+2
  5041  0262  0021               	movlb	1	; select bank1
  5042  0263  0854               	movf	(printf@val+1)^(0+128),w
  5043  0264  0020               	movlb	0	; select bank0
  5044  0265  00A1               	movwf	___lltoft@c+1
  5045  0266  0021               	movlb	1	; select bank1
  5046  0267  0853               	movf	printf@val^(0+128),w
  5047  0268  0020               	movlb	0	; select bank0
  5048  0269  00A0               	movwf	___lltoft@c
  5049  026A  3197  275D  3180   	fcall	___lltoft
  5050  026D  0020               	movlb	0	; select bank0
  5051  026E  0820               	movf	?___lltoft,w
  5052  026F  00D6               	movwf	___ftsub@f2
  5053  0270  0821               	movf	?___lltoft+1,w
  5054  0271  00D7               	movwf	___ftsub@f2+1
  5055  0272  0822               	movf	?___lltoft+2,w
  5056  0273  00D8               	movwf	___ftsub@f2+2
  5057  0274  0021               	movlb	1	; select bank1
  5058  0275  085D               	movf	printf@fval^(0+128),w
  5059  0276  0020               	movlb	0	; select bank0
  5060  0277  00D9               	movwf	___ftsub@f1
  5061  0278  0021               	movlb	1	; select bank1
  5062  0279  085E               	movf	(printf@fval+1)^(0+128),w
  5063  027A  0020               	movlb	0	; select bank0
  5064  027B  00DA               	movwf	___ftsub@f1+1
  5065  027C  0021               	movlb	1	; select bank1
  5066  027D  085F               	movf	(printf@fval+2)^(0+128),w
  5067  027E  0020               	movlb	0	; select bank0
  5068  027F  00DB               	movwf	___ftsub@f1+2
  5069  0280  3196  268C  3180   	fcall	___ftsub
  5070  0283  0020               	movlb	0	; select bank0
  5071  0284  0856               	movf	?___ftsub,w
  5072  0285  0021               	movlb	1	; select bank1
  5073  0286  00DD               	movwf	printf@fval^(0+128)
  5074  0287  0020               	movlb	0	; select bank0
  5075  0288  0857               	movf	?___ftsub+1,w
  5076  0289  0021               	movlb	1	; select bank1
  5077  028A  00DE               	movwf	(printf@fval+1)^(0+128)
  5078  028B  0020               	movlb	0	; select bank0
  5079  028C  0858               	movf	?___ftsub+2,w
  5080  028D  0021               	movlb	1	; select bank1
  5081  028E  00DF               	movwf	(printf@fval+2)^(0+128)
  5082                           
  5083                           ;doprnt.c: 1133: exp = 0;
  5084  028F  01D7               	clrf	printf@exp^(0+128)
  5085  0290  01D8               	clrf	(printf@exp+1)^(0+128)
  5086  0291                     l3584:	
  5087                           
  5088                           ;doprnt.c: 1134: }
  5089                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5090  0291  01E0               	clrf	printf@c^(0+128)
  5091  0292  0AE0               	incf	printf@c^(0+128),f
  5092  0293  300A               	movlw	10
  5093  0294  0660               	xorwf	printf@c^(0+128),w
  5094  0295  1903               	btfsc	3,2
  5095  0296  2AC4               	goto	l3596
  5096  0297                     l3590:	
  5097                           
  5098                           ;doprnt.c: 1137: if(val < dpowers[c])
  5099  0297  0860               	movf	printf@c^(0+128),w
  5100  0298  00C5               	movwf	??_printf^(0+128)
  5101  0299  01C6               	clrf	(??_printf^(0+128)+1)
  5102  029A  35C5               	lslf	??_printf^(0+128),f
  5103  029B  0DC6               	rlf	(??_printf^(0+128)+1),f
  5104  029C  35C5               	lslf	??_printf^(0+128),f
  5105  029D  0DC6               	rlf	(??_printf^(0+128)+1),f
  5106  029E  3000               	movlw	low (_dpowers| (0+32768))
  5107  029F  0745               	addwf	??_printf^(0+128),w
  5108  02A0  0084               	movwf	4
  5109  02A1  3090               	movlw	high (_dpowers| (0+32768))
  5110  02A2  3D46               	addwfc	(??_printf+1)^(0+128),w
  5111  02A3  0085               	movwf	5
  5112  02A4  3F00               	moviw [0]fsr0
  5113  02A5  00C7               	movwf	(??_printf+2)^(0+128)
  5114  02A6  3F01               	moviw [1]fsr0
  5115  02A7  00C8               	movwf	((??_printf+2)^(0+128)+1)
  5116  02A8  3F02               	moviw [2]fsr0
  5117  02A9  00C9               	movwf	((??_printf+2)^(0+128)+2)
  5118  02AA  3F03               	moviw [3]fsr0
  5119  02AB  00CA               	movwf	((??_printf+2)^(0+128)+3)
  5120  02AC  084A               	movf	(??_printf+5)^(0+128),w
  5121  02AD  0256               	subwf	(printf@val+3)^(0+128),w
  5122  02AE  1D03               	skipz
  5123  02AF  2ABA               	goto	u5635
  5124  02B0  0849               	movf	(??_printf+4)^(0+128),w
  5125  02B1  0255               	subwf	(printf@val+2)^(0+128),w
  5126  02B2  1D03               	skipz
  5127  02B3  2ABA               	goto	u5635
  5128  02B4  0848               	movf	(??_printf+3)^(0+128),w
  5129  02B5  0254               	subwf	(printf@val+1)^(0+128),w
  5130  02B6  1D03               	skipz
  5131  02B7  2ABA               	goto	u5635
  5132  02B8  0847               	movf	(??_printf+2)^(0+128),w
  5133  02B9  0253               	subwf	printf@val^(0+128),w
  5134  02BA                     u5635:	
  5135  02BA  1C03               	btfss	3,0
  5136  02BB  2AC4               	goto	l3596
  5137                           
  5138                           ;doprnt.c: 1138: break;
  5139  02BC  3001               	movlw	1
  5140  02BD  00C5               	movwf	??_printf^(0+128)
  5141  02BE  0845               	movf	??_printf^(0+128),w
  5142  02BF  07E0               	addwf	printf@c^(0+128),f
  5143  02C0  300A               	movlw	10
  5144  02C1  0660               	xorwf	printf@c^(0+128),w
  5145  02C2  1D03               	btfss	3,2
  5146  02C3  2A97               	goto	l3590
  5147  02C4                     l3596:	
  5148                           
  5149                           ;doprnt.c: 1175: {
  5150                           ;doprnt.c: 1188: if(flag & 0x03)
  5151  02C4  3003               	movlw	3
  5152  02C5  054E               	andwf	printf@flag^(0+128),w
  5153  02C6  00C5               	movwf	??_printf^(0+128)
  5154  02C7  3000               	movlw	0
  5155  02C8  054F               	andwf	(printf@flag+1)^(0+128),w
  5156  02C9  00C6               	movwf	(??_printf+1)^(0+128)
  5157  02CA  0845               	movf	??_printf^(0+128),w
  5158  02CB  0446               	iorwf	(??_printf^(0+128)+1),w
  5159  02CC  1903               	btfsc	3,2
  5160  02CD  2AD2               	goto	l3606
  5161                           
  5162                           ;doprnt.c: 1190: (putch('-') );
  5163  02CE  302D               	movlw	45
  5164  02CF                     L5:	
  5165  02CF  3188  2000  3180   	fcall	_putch
  5166  02D2                     l3606:	
  5167                           ;doprnt.c: 1195: }
  5168                           ;doprnt.c: 1196: while(c--) {
  5169                           
  5170  02D2  30FF               	movlw	255
  5171  02D3  0021               	movlb	1	; select bank1
  5172  02D4  00C5               	movwf	??_printf^(0+128)
  5173  02D5  0845               	movf	??_printf^(0+128),w
  5174  02D6  07E0               	addwf	printf@c^(0+128),f
  5175  02D7  0A60               	incf	printf@c^(0+128),w
  5176  02D8  1903               	btfsc	3,2
  5177  02D9  2B3C               	goto	l3612
  5178                           
  5179                           ;doprnt.c: 1200: {
  5180                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  5181  02DA  0021               	movlb	1	; select bank1
  5182  02DB  0860               	movf	printf@c^(0+128),w
  5183  02DC  00C5               	movwf	??_printf^(0+128)
  5184  02DD  01C6               	clrf	(??_printf^(0+128)+1)
  5185  02DE  35C5               	lslf	??_printf^(0+128),f
  5186  02DF  0DC6               	rlf	(??_printf^(0+128)+1),f
  5187  02E0  35C5               	lslf	??_printf^(0+128),f
  5188  02E1  0DC6               	rlf	(??_printf^(0+128)+1),f
  5189  02E2  3000               	movlw	low (_dpowers| (0+32768))
  5190  02E3  0745               	addwf	??_printf^(0+128),w
  5191  02E4  0084               	movwf	4
  5192  02E5  3090               	movlw	high (_dpowers| (0+32768))
  5193  02E6  3D46               	addwfc	(??_printf+1)^(0+128),w
  5194  02E7  0085               	movwf	5
  5195  02E8  3F00               	moviw [0]fsr0
  5196  02E9  00F1               	movwf	___lldiv@divisor
  5197  02EA  3F01               	moviw [1]fsr0
  5198  02EB  00F2               	movwf	___lldiv@divisor+1
  5199  02EC  3F02               	moviw [2]fsr0
  5200  02ED  00F3               	movwf	___lldiv@divisor+2
  5201  02EE  3F03               	moviw [3]fsr0
  5202  02EF  00F4               	movwf	___lldiv@divisor+3
  5203  02F0  0856               	movf	(printf@val+3)^(0+128),w
  5204  02F1  00F8               	movwf	___lldiv@dividend+3
  5205  02F2  0855               	movf	(printf@val+2)^(0+128),w
  5206  02F3  00F7               	movwf	___lldiv@dividend+2
  5207  02F4  0854               	movf	(printf@val+1)^(0+128),w
  5208  02F5  00F6               	movwf	___lldiv@dividend+1
  5209  02F6  0853               	movf	printf@val^(0+128),w
  5210  02F7  00F5               	movwf	___lldiv@dividend
  5211  02F8  3188  20F3  3180   	fcall	___lldiv
  5212  02FB  0874               	movf	?___lldiv+3,w
  5213  02FC  0021               	movlb	1	; select bank1
  5214  02FD  00DC               	movwf	(printf@tmpval+3)^(0+128)
  5215  02FE  0873               	movf	?___lldiv+2,w
  5216  02FF  00DB               	movwf	(printf@tmpval+2)^(0+128)
  5217  0300  0872               	movf	?___lldiv+1,w
  5218  0301  00DA               	movwf	(printf@tmpval+1)^(0+128)
  5219  0302  0871               	movf	?___lldiv,w
  5220  0303  00D9               	movwf	printf@tmpval^(0+128)
  5221                           
  5222                           ;doprnt.c: 1202: tmpval.vd %= 10;
  5223  0304  3000               	movlw	0
  5224  0305  0020               	movlb	0	; select bank0
  5225  0306  00A8               	movwf	___llmod@divisor+3
  5226  0307  3000               	movlw	0
  5227  0308  00A7               	movwf	___llmod@divisor+2
  5228  0309  3000               	movlw	0
  5229  030A  00A6               	movwf	___llmod@divisor+1
  5230  030B  300A               	movlw	10
  5231  030C  00A5               	movwf	___llmod@divisor
  5232  030D  0021               	movlb	1	; select bank1
  5233  030E  085C               	movf	(printf@tmpval+3)^(0+128),w
  5234  030F  0020               	movlb	0	; select bank0
  5235  0310  00AC               	movwf	___llmod@dividend+3
  5236  0311  0021               	movlb	1	; select bank1
  5237  0312  085B               	movf	(printf@tmpval+2)^(0+128),w
  5238  0313  0020               	movlb	0	; select bank0
  5239  0314  00AB               	movwf	___llmod@dividend+2
  5240  0315  0021               	movlb	1	; select bank1
  5241  0316  085A               	movf	(printf@tmpval+1)^(0+128),w
  5242  0317  0020               	movlb	0	; select bank0
  5243  0318  00AA               	movwf	___llmod@dividend+1
  5244  0319  0021               	movlb	1	; select bank1
  5245  031A  0859               	movf	printf@tmpval^(0+128),w
  5246  031B  0020               	movlb	0	; select bank0
  5247  031C  00A9               	movwf	___llmod@dividend
  5248  031D  3188  2019  3180   	fcall	___llmod
  5249  0320  0020               	movlb	0	; select bank0
  5250  0321  0828               	movf	?___llmod+3,w
  5251  0322  0021               	movlb	1	; select bank1
  5252  0323  00DC               	movwf	(printf@tmpval+3)^(0+128)
  5253  0324  0020               	movlb	0	; select bank0
  5254  0325  0827               	movf	?___llmod+2,w
  5255  0326  0021               	movlb	1	; select bank1
  5256  0327  00DB               	movwf	(printf@tmpval+2)^(0+128)
  5257  0328  0020               	movlb	0	; select bank0
  5258  0329  0826               	movf	?___llmod+1,w
  5259  032A  0021               	movlb	1	; select bank1
  5260  032B  00DA               	movwf	(printf@tmpval+1)^(0+128)
  5261  032C  0020               	movlb	0	; select bank0
  5262  032D  0825               	movf	?___llmod,w
  5263  032E  0021               	movlb	1	; select bank1
  5264  032F  00D9               	movwf	printf@tmpval^(0+128)
  5265                           
  5266                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  5267  0330  0859               	movf	printf@tmpval^(0+128),w
  5268  0331  3E30               	addlw	48
  5269  0332  2ACF               	goto	L5
  5270  0333                     l3608:	
  5271                           ;doprnt.c: 1204: }
  5272                           ;doprnt.c: 1206: }
  5273                           ;doprnt.c: 1207: while(exp > 0) {
  5274                           
  5275                           
  5276                           ;doprnt.c: 1208: (putch('0') );
  5277  0333  3030               	movlw	48
  5278  0334  3188  2000  3180   	fcall	_putch
  5279                           
  5280                           ;doprnt.c: 1209: exp--;
  5281  0337  30FF               	movlw	255
  5282  0338  0021               	movlb	1	; select bank1
  5283  0339  07D7               	addwf	printf@exp^(0+128),f
  5284  033A  30FF               	movlw	255
  5285  033B  3DD8               	addwfc	(printf@exp+1)^(0+128),f
  5286  033C                     l3612:	
  5287  033C  0858               	movf	(printf@exp+1)^(0+128),w
  5288  033D  3A80               	xorlw	128
  5289  033E  00C5               	movwf	??_printf^(0+128)
  5290  033F  3080               	movlw	128
  5291  0340  0245               	subwf	??_printf^(0+128),w
  5292  0341  1D03               	skipz
  5293  0342  2B45               	goto	u5675
  5294  0343  3001               	movlw	1
  5295  0344  0257               	subwf	printf@exp^(0+128),w
  5296  0345                     u5675:	
  5297  0345  1803               	skipnc
  5298  0346  2B33               	goto	l3608
  5299                           
  5300                           ;doprnt.c: 1210: }
  5301                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5302  0347  0021               	movlb	1	; select bank1
  5303  0348  0852               	movf	(printf@prec+1)^(0+128),w
  5304  0349  3A80               	xorlw	128
  5305  034A  00C5               	movwf	??_printf^(0+128)
  5306  034B  3080               	movlw	128
  5307  034C  0245               	subwf	??_printf^(0+128),w
  5308  034D  1D03               	skipz
  5309  034E  2B51               	goto	u5685
  5310  034F  3009               	movlw	9
  5311  0350  0251               	subwf	printf@prec^(0+128),w
  5312  0351                     u5685:	
  5313  0351  1C03               	skipc
  5314  0352  2B56               	goto	l3618
  5315                           
  5316                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5317  0353  3008               	movlw	8
  5318  0354  0021               	movlb	1	; select bank1
  5319  0355  2B58               	goto	L3
  5320  0356                     l3618:	
  5321                           
  5322                           ;doprnt.c: 1213: else
  5323                           ;doprnt.c: 1214: c = prec;
  5324  0356  0021               	movlb	1	; select bank1
  5325  0357  0851               	movf	printf@prec^(0+128),w
  5326  0358                     L3:	
  5327  0358  00C5               	movwf	??_printf^(0+128)
  5328  0359  0845               	movf	??_printf^(0+128),w
  5329  035A  00E0               	movwf	printf@c^(0+128)
  5330                           
  5331                           ;doprnt.c: 1215: prec -= c;
  5332  035B  0860               	movf	printf@c^(0+128),w
  5333  035C  00C5               	movwf	??_printf^(0+128)
  5334  035D  01C6               	clrf	(??_printf^(0+128)+1)
  5335  035E  1BC5               	btfsc	??_printf^(0+128),7
  5336  035F  03C6               	decf	(??_printf^(0+128)+1),f
  5337  0360  0845               	movf	??_printf^(0+128),w
  5338  0361  02D1               	subwf	printf@prec^(0+128),f
  5339  0362  0846               	movf	(??_printf+1)^(0+128),w
  5340  0363  3BD2               	subwfb	(printf@prec+1)^(0+128),f
  5341                           
  5342                           ;doprnt.c: 1219: if(c)
  5343  0364  0860               	movf	printf@c^(0+128),w
  5344  0365  1903               	btfsc	3,2
  5345  0366  2B6B               	goto	l3624
  5346                           
  5347                           ;doprnt.c: 1221: (putch('.') );
  5348  0367  302E               	movlw	46
  5349  0368  3188  2000  3180   	fcall	_putch
  5350  036B                     l3624:	
  5351                           
  5352                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5353  036B  0021               	movlb	1	; select bank1
  5354  036C  0860               	movf	printf@c^(0+128),w
  5355  036D  3185  2510  3180   	fcall	_scale
  5356  0370  0020               	movlb	0	; select bank0
  5357  0371  083B               	movf	?_scale,w
  5358  0372  0021               	movlb	1	; select bank1
  5359  0373  00CB               	movwf	_printf$1240^(0+128)
  5360  0374  0020               	movlb	0	; select bank0
  5361  0375  083C               	movf	?_scale+1,w
  5362  0376  0021               	movlb	1	; select bank1
  5363  0377  00CC               	movwf	(_printf$1240+1)^(0+128)
  5364  0378  0020               	movlb	0	; select bank0
  5365  0379  083D               	movf	?_scale+2,w
  5366  037A  0021               	movlb	1	; select bank1
  5367  037B  00CD               	movwf	(_printf$1240+2)^(0+128)
  5368                           
  5369                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5370  037C  084B               	movf	_printf$1240^(0+128),w
  5371  037D  0020               	movlb	0	; select bank0
  5372  037E  00AE               	movwf	___ftmul@f2
  5373  037F  0021               	movlb	1	; select bank1
  5374  0380  084C               	movf	(_printf$1240+1)^(0+128),w
  5375  0381  0020               	movlb	0	; select bank0
  5376  0382  00AF               	movwf	___ftmul@f2+1
  5377  0383  0021               	movlb	1	; select bank1
  5378  0384  084D               	movf	(_printf$1240+2)^(0+128),w
  5379  0385  0020               	movlb	0	; select bank0
  5380  0386  00B0               	movwf	___ftmul@f2+2
  5381  0387  0021               	movlb	1	; select bank1
  5382  0388  085D               	movf	printf@fval^(0+128),w
  5383  0389  0020               	movlb	0	; select bank0
  5384  038A  00AB               	movwf	___ftmul@f1
  5385  038B  0021               	movlb	1	; select bank1
  5386  038C  085E               	movf	(printf@fval+1)^(0+128),w
  5387  038D  0020               	movlb	0	; select bank0
  5388  038E  00AC               	movwf	___ftmul@f1+1
  5389  038F  0021               	movlb	1	; select bank1
  5390  0390  085F               	movf	(printf@fval+2)^(0+128),w
  5391  0391  0020               	movlb	0	; select bank0
  5392  0392  00AD               	movwf	___ftmul@f1+2
  5393  0393  318A  2231  3180   	fcall	___ftmul
  5394  0396  0020               	movlb	0	; select bank0
  5395  0397  082B               	movf	?___ftmul,w
  5396  0398  00C4               	movwf	___fttol@f1
  5397  0399  082C               	movf	?___ftmul+1,w
  5398  039A  00C5               	movwf	___fttol@f1+1
  5399  039B  082D               	movf	?___ftmul+2,w
  5400  039C  00C6               	movwf	___fttol@f1+2
  5401  039D  3189  21AA  3180   	fcall	___fttol
  5402  03A0  0020               	movlb	0	; select bank0
  5403  03A1  0847               	movf	?___fttol+3,w
  5404  03A2  0021               	movlb	1	; select bank1
  5405  03A3  00D6               	movwf	(printf@val+3)^(0+128)
  5406  03A4  0020               	movlb	0	; select bank0
  5407  03A5  0846               	movf	?___fttol+2,w
  5408  03A6  0021               	movlb	1	; select bank1
  5409  03A7  00D5               	movwf	(printf@val+2)^(0+128)
  5410  03A8  0020               	movlb	0	; select bank0
  5411  03A9  0845               	movf	?___fttol+1,w
  5412  03AA  0021               	movlb	1	; select bank1
  5413  03AB  00D4               	movwf	(printf@val+1)^(0+128)
  5414  03AC  0020               	movlb	0	; select bank0
  5415  03AD  0844               	movf	?___fttol,w
  5416  03AE                     L4:	
  5417  03AE  0021               	movlb	1	; select bank1
  5418  03AF  00D3               	movwf	printf@val^(0+128)
  5419  03B0  30FF               	movlw	255
  5420  03B1  00C5               	movwf	??_printf^(0+128)
  5421  03B2  0845               	movf	??_printf^(0+128),w
  5422  03B3  07E0               	addwf	printf@c^(0+128),f
  5423  03B4  0A60               	incf	printf@c^(0+128),w
  5424  03B5  1903               	btfsc	3,2
  5425  03B6  2C53               	goto	l3640
  5426                           
  5427                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  5428                           
  5429                           ;doprnt.c: 1228: while(c--) {
  5430  03B7  0860               	movf	printf@c^(0+128),w
  5431  03B8  00C5               	movwf	??_printf^(0+128)
  5432  03B9  01C6               	clrf	(??_printf^(0+128)+1)
  5433  03BA  35C5               	lslf	??_printf^(0+128),f
  5434  03BB  0DC6               	rlf	(??_printf^(0+128)+1),f
  5435  03BC  35C5               	lslf	??_printf^(0+128),f
  5436  03BD  0DC6               	rlf	(??_printf^(0+128)+1),f
  5437  03BE  3000               	movlw	low (_dpowers| (0+32768))
  5438  03BF  0745               	addwf	??_printf^(0+128),w
  5439  03C0  0084               	movwf	4
  5440  03C1  3090               	movlw	high (_dpowers| (0+32768))
  5441  03C2  3D46               	addwfc	(??_printf+1)^(0+128),w
  5442  03C3  0085               	movwf	5
  5443  03C4  3F00               	moviw [0]fsr0
  5444  03C5  00F1               	movwf	___lldiv@divisor
  5445  03C6  3F01               	moviw [1]fsr0
  5446  03C7  00F2               	movwf	___lldiv@divisor+1
  5447  03C8  3F02               	moviw [2]fsr0
  5448  03C9  00F3               	movwf	___lldiv@divisor+2
  5449  03CA  3F03               	moviw [3]fsr0
  5450  03CB  00F4               	movwf	___lldiv@divisor+3
  5451  03CC  0856               	movf	(printf@val+3)^(0+128),w
  5452  03CD  00F8               	movwf	___lldiv@dividend+3
  5453  03CE  0855               	movf	(printf@val+2)^(0+128),w
  5454  03CF  00F7               	movwf	___lldiv@dividend+2
  5455  03D0  0854               	movf	(printf@val+1)^(0+128),w
  5456  03D1  00F6               	movwf	___lldiv@dividend+1
  5457  03D2  0853               	movf	printf@val^(0+128),w
  5458  03D3  00F5               	movwf	___lldiv@dividend
  5459  03D4  3188  20F3  3180   	fcall	___lldiv
  5460  03D7  0874               	movf	?___lldiv+3,w
  5461  03D8  0021               	movlb	1	; select bank1
  5462  03D9  00DC               	movwf	(printf@tmpval+3)^(0+128)
  5463  03DA  0873               	movf	?___lldiv+2,w
  5464  03DB  00DB               	movwf	(printf@tmpval+2)^(0+128)
  5465  03DC  0872               	movf	?___lldiv+1,w
  5466  03DD  00DA               	movwf	(printf@tmpval+1)^(0+128)
  5467  03DE  0871               	movf	?___lldiv,w
  5468  03DF  00D9               	movwf	printf@tmpval^(0+128)
  5469                           
  5470                           ;doprnt.c: 1230: tmpval.vd %= 10;
  5471  03E0  3000               	movlw	0
  5472  03E1  0020               	movlb	0	; select bank0
  5473  03E2  00A8               	movwf	___llmod@divisor+3
  5474  03E3  3000               	movlw	0
  5475  03E4  00A7               	movwf	___llmod@divisor+2
  5476  03E5  3000               	movlw	0
  5477  03E6  00A6               	movwf	___llmod@divisor+1
  5478  03E7  300A               	movlw	10
  5479  03E8  00A5               	movwf	___llmod@divisor
  5480  03E9  0021               	movlb	1	; select bank1
  5481  03EA  085C               	movf	(printf@tmpval+3)^(0+128),w
  5482  03EB  0020               	movlb	0	; select bank0
  5483  03EC  00AC               	movwf	___llmod@dividend+3
  5484  03ED  0021               	movlb	1	; select bank1
  5485  03EE  085B               	movf	(printf@tmpval+2)^(0+128),w
  5486  03EF  0020               	movlb	0	; select bank0
  5487  03F0  00AB               	movwf	___llmod@dividend+2
  5488  03F1  0021               	movlb	1	; select bank1
  5489  03F2  085A               	movf	(printf@tmpval+1)^(0+128),w
  5490  03F3  0020               	movlb	0	; select bank0
  5491  03F4  00AA               	movwf	___llmod@dividend+1
  5492  03F5  0021               	movlb	1	; select bank1
  5493  03F6  0859               	movf	printf@tmpval^(0+128),w
  5494  03F7  0020               	movlb	0	; select bank0
  5495  03F8  00A9               	movwf	___llmod@dividend
  5496  03F9  3188  2019  3180   	fcall	___llmod
  5497  03FC  0020               	movlb	0	; select bank0
  5498  03FD  0828               	movf	?___llmod+3,w
  5499  03FE  0021               	movlb	1	; select bank1
  5500  03FF  00DC               	movwf	(printf@tmpval+3)^(0+128)
  5501  0400  0020               	movlb	0	; select bank0
  5502  0401  0827               	movf	?___llmod+2,w
  5503  0402  0021               	movlb	1	; select bank1
  5504  0403  00DB               	movwf	(printf@tmpval+2)^(0+128)
  5505  0404  0020               	movlb	0	; select bank0
  5506  0405  0826               	movf	?___llmod+1,w
  5507  0406  0021               	movlb	1	; select bank1
  5508  0407  00DA               	movwf	(printf@tmpval+1)^(0+128)
  5509  0408  0020               	movlb	0	; select bank0
  5510  0409  0825               	movf	?___llmod,w
  5511  040A  0021               	movlb	1	; select bank1
  5512  040B  00D9               	movwf	printf@tmpval^(0+128)
  5513                           
  5514                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  5515  040C  0859               	movf	printf@tmpval^(0+128),w
  5516  040D  3E30               	addlw	48
  5517  040E  3188  2000  3180   	fcall	_putch
  5518                           
  5519                           ;doprnt.c: 1232: val %= dpowers[c];
  5520  0411  0021               	movlb	1	; select bank1
  5521  0412  0860               	movf	printf@c^(0+128),w
  5522  0413  00C5               	movwf	??_printf^(0+128)
  5523  0414  01C6               	clrf	(??_printf^(0+128)+1)
  5524  0415  35C5               	lslf	??_printf^(0+128),f
  5525  0416  0DC6               	rlf	(??_printf^(0+128)+1),f
  5526  0417  35C5               	lslf	??_printf^(0+128),f
  5527  0418  0DC6               	rlf	(??_printf^(0+128)+1),f
  5528  0419  3000               	movlw	low (_dpowers| (0+32768))
  5529  041A  0745               	addwf	??_printf^(0+128),w
  5530  041B  0084               	movwf	4
  5531  041C  3090               	movlw	high (_dpowers| (0+32768))
  5532  041D  3D46               	addwfc	(??_printf+1)^(0+128),w
  5533  041E  0085               	movwf	5
  5534  041F  3F00               	moviw [0]fsr0
  5535  0420  0020               	movlb	0	; select bank0
  5536  0421  00A5               	movwf	___llmod@divisor
  5537  0422  3F01               	moviw [1]fsr0
  5538  0423  00A6               	movwf	___llmod@divisor+1
  5539  0424  3F02               	moviw [2]fsr0
  5540  0425  00A7               	movwf	___llmod@divisor+2
  5541  0426  3F03               	moviw [3]fsr0
  5542  0427  00A8               	movwf	___llmod@divisor+3
  5543  0428  0021               	movlb	1	; select bank1
  5544  0429  0856               	movf	(printf@val+3)^(0+128),w
  5545  042A  0020               	movlb	0	; select bank0
  5546  042B  00AC               	movwf	___llmod@dividend+3
  5547  042C  0021               	movlb	1	; select bank1
  5548  042D  0855               	movf	(printf@val+2)^(0+128),w
  5549  042E  0020               	movlb	0	; select bank0
  5550  042F  00AB               	movwf	___llmod@dividend+2
  5551  0430  0021               	movlb	1	; select bank1
  5552  0431  0854               	movf	(printf@val+1)^(0+128),w
  5553  0432  0020               	movlb	0	; select bank0
  5554  0433  00AA               	movwf	___llmod@dividend+1
  5555  0434  0021               	movlb	1	; select bank1
  5556  0435  0853               	movf	printf@val^(0+128),w
  5557  0436  0020               	movlb	0	; select bank0
  5558  0437  00A9               	movwf	___llmod@dividend
  5559  0438  3188  2019  3180   	fcall	___llmod
  5560  043B  0020               	movlb	0	; select bank0
  5561  043C  0828               	movf	?___llmod+3,w
  5562  043D  0021               	movlb	1	; select bank1
  5563  043E  00D6               	movwf	(printf@val+3)^(0+128)
  5564  043F  0020               	movlb	0	; select bank0
  5565  0440  0827               	movf	?___llmod+2,w
  5566  0441  0021               	movlb	1	; select bank1
  5567  0442  00D5               	movwf	(printf@val+2)^(0+128)
  5568  0443  0020               	movlb	0	; select bank0
  5569  0444  0826               	movf	?___llmod+1,w
  5570  0445  0021               	movlb	1	; select bank1
  5571  0446  00D4               	movwf	(printf@val+1)^(0+128)
  5572  0447  0020               	movlb	0	; select bank0
  5573  0448  0825               	movf	?___llmod,w
  5574  0449  2BAE               	goto	L4
  5575  044A                     l3636:	
  5576                           ;doprnt.c: 1233: }
  5577                           ;doprnt.c: 1235: while(prec) {
  5578                           
  5579                           
  5580                           ;doprnt.c: 1236: (putch('0') );
  5581  044A  3030               	movlw	48
  5582  044B  3188  2000  3180   	fcall	_putch
  5583                           
  5584                           ;doprnt.c: 1237: prec--;
  5585  044E  30FF               	movlw	255
  5586  044F  0021               	movlb	1	; select bank1
  5587  0450  07D1               	addwf	printf@prec^(0+128),f
  5588  0451  30FF               	movlw	255
  5589  0452  3DD2               	addwfc	(printf@prec+1)^(0+128),f
  5590  0453                     l3640:	
  5591  0453  0851               	movf	printf@prec^(0+128),w
  5592  0454  0452               	iorwf	(printf@prec+1)^(0+128),w
  5593  0455  1903               	btfsc	3,2
  5594  0456  2836               	goto	l3676
  5595  0457  2C4A               	goto	l3636
  5596  0458                     l3642:	
  5597                           ;doprnt.c: 1238: }
  5598                           ;doprnt.c: 1245: continue;
  5599                           
  5600                           
  5601                           ;doprnt.c: 1246: }
  5602                           ;doprnt.c: 1253: {
  5603                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5604  0458  0850               	movf	printf@ap^(0+128),w
  5605  0459  0086               	movwf	6
  5606  045A  0187               	clrf	7
  5607  045B  3F40               	moviw [0]fsr1
  5608  045C  00C5               	movwf	??_printf^(0+128)
  5609  045D  3F41               	moviw [1]fsr1
  5610  045E  00C6               	movwf	(??_printf^(0+128)+1)
  5611  045F  0845               	movf	??_printf^(0+128),w
  5612  0460  00D3               	movwf	printf@val^(0+128)
  5613  0461  0846               	movf	(??_printf+1)^(0+128),w
  5614  0462  00D4               	movwf	(printf@val+1)^(0+128)
  5615  0463  0D89               	rlf	9,f
  5616  0464  3B89               	subwfb	9,f
  5617  0465  0989               	comf	9,f
  5618  0466  00D5               	movwf	(printf@val+2)^(0+128)
  5619  0467  00D6               	movwf	(printf@val+3)^(0+128)
  5620  0468  3002               	movlw	2
  5621  0469  00C5               	movwf	??_printf^(0+128)
  5622  046A  0845               	movf	??_printf^(0+128),w
  5623  046B  07D0               	addwf	printf@ap^(0+128),f
  5624                           
  5625                           ;doprnt.c: 1261: if((long)val < 0) {
  5626  046C  1FD6               	btfss	(printf@val+3)^(0+128),7
  5627  046D  2C7D               	goto	l3652
  5628                           
  5629                           ;doprnt.c: 1262: flag |= 0x03;
  5630  046E  3003               	movlw	3
  5631  046F  04CE               	iorwf	printf@flag^(0+128),f
  5632  0470  3000               	movlw	0
  5633  0471  04CF               	iorwf	(printf@flag+1)^(0+128),f
  5634                           
  5635                           ;doprnt.c: 1263: val = -val;
  5636  0472  09D3               	comf	printf@val^(0+128),f
  5637  0473  09D4               	comf	(printf@val+1)^(0+128),f
  5638  0474  09D5               	comf	(printf@val+2)^(0+128),f
  5639  0475  09D6               	comf	(printf@val+3)^(0+128),f
  5640  0476  0AD3               	incf	printf@val^(0+128),f
  5641  0477  1903               	skipnz
  5642  0478  0AD4               	incf	(printf@val+1)^(0+128),f
  5643  0479  1903               	skipnz
  5644  047A  0AD5               	incf	(printf@val+2)^(0+128),f
  5645  047B  1903               	skipnz
  5646  047C  0AD6               	incf	(printf@val+3)^(0+128),f
  5647  047D                     l3652:	
  5648                           
  5649                           ;doprnt.c: 1264: }
  5650                           ;doprnt.c: 1266: }
  5651                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5652  047D  01E0               	clrf	printf@c^(0+128)
  5653  047E  0AE0               	incf	printf@c^(0+128),f
  5654  047F  300A               	movlw	10
  5655  0480  0660               	xorwf	printf@c^(0+128),w
  5656  0481  1903               	btfsc	3,2
  5657  0482  2CB0               	goto	l3664
  5658  0483                     l3658:	
  5659                           
  5660                           ;doprnt.c: 1306: if(val < dpowers[c])
  5661  0483  0860               	movf	printf@c^(0+128),w
  5662  0484  00C5               	movwf	??_printf^(0+128)
  5663  0485  01C6               	clrf	(??_printf^(0+128)+1)
  5664  0486  35C5               	lslf	??_printf^(0+128),f
  5665  0487  0DC6               	rlf	(??_printf^(0+128)+1),f
  5666  0488  35C5               	lslf	??_printf^(0+128),f
  5667  0489  0DC6               	rlf	(??_printf^(0+128)+1),f
  5668  048A  3000               	movlw	low (_dpowers| (0+32768))
  5669  048B  0745               	addwf	??_printf^(0+128),w
  5670  048C  0084               	movwf	4
  5671  048D  3090               	movlw	high (_dpowers| (0+32768))
  5672  048E  3D46               	addwfc	(??_printf+1)^(0+128),w
  5673  048F  0085               	movwf	5
  5674  0490  3F00               	moviw [0]fsr0
  5675  0491  00C7               	movwf	(??_printf+2)^(0+128)
  5676  0492  3F01               	moviw [1]fsr0
  5677  0493  00C8               	movwf	((??_printf+2)^(0+128)+1)
  5678  0494  3F02               	moviw [2]fsr0
  5679  0495  00C9               	movwf	((??_printf+2)^(0+128)+2)
  5680  0496  3F03               	moviw [3]fsr0
  5681  0497  00CA               	movwf	((??_printf+2)^(0+128)+3)
  5682  0498  084A               	movf	(??_printf+5)^(0+128),w
  5683  0499  0256               	subwf	(printf@val+3)^(0+128),w
  5684  049A  1D03               	skipz
  5685  049B  2CA6               	goto	u5745
  5686  049C  0849               	movf	(??_printf+4)^(0+128),w
  5687  049D  0255               	subwf	(printf@val+2)^(0+128),w
  5688  049E  1D03               	skipz
  5689  049F  2CA6               	goto	u5745
  5690  04A0  0848               	movf	(??_printf+3)^(0+128),w
  5691  04A1  0254               	subwf	(printf@val+1)^(0+128),w
  5692  04A2  1D03               	skipz
  5693  04A3  2CA6               	goto	u5745
  5694  04A4  0847               	movf	(??_printf+2)^(0+128),w
  5695  04A5  0253               	subwf	printf@val^(0+128),w
  5696  04A6                     u5745:	
  5697  04A6  1C03               	btfss	3,0
  5698  04A7  2CB0               	goto	l3664
  5699                           
  5700                           ;doprnt.c: 1307: break;
  5701  04A8  3001               	movlw	1
  5702  04A9  00C5               	movwf	??_printf^(0+128)
  5703  04AA  0845               	movf	??_printf^(0+128),w
  5704  04AB  07E0               	addwf	printf@c^(0+128),f
  5705  04AC  300A               	movlw	10
  5706  04AD  0660               	xorwf	printf@c^(0+128),w
  5707  04AE  1D03               	btfss	3,2
  5708  04AF  2C83               	goto	l3658
  5709  04B0                     l3664:	
  5710                           
  5711                           ;doprnt.c: 1422: {
  5712                           ;doprnt.c: 1438: if(flag & 0x03)
  5713  04B0  3003               	movlw	3
  5714  04B1  054E               	andwf	printf@flag^(0+128),w
  5715  04B2  00C5               	movwf	??_printf^(0+128)
  5716  04B3  3000               	movlw	0
  5717  04B4  054F               	andwf	(printf@flag+1)^(0+128),w
  5718  04B5  00C6               	movwf	(??_printf+1)^(0+128)
  5719  04B6  0845               	movf	??_printf^(0+128),w
  5720  04B7  0446               	iorwf	(??_printf^(0+128)+1),w
  5721  04B8  1903               	btfsc	3,2
  5722  04B9  2CBE               	goto	l3668
  5723                           
  5724                           ;doprnt.c: 1439: (putch('-') );
  5725  04BA  302D               	movlw	45
  5726  04BB  3188  2000  3180   	fcall	_putch
  5727  04BE                     l3668:	
  5728                           
  5729                           ;doprnt.c: 1469: }
  5730                           ;doprnt.c: 1472: prec = c;
  5731  04BE  0021               	movlb	1	; select bank1
  5732  04BF  0860               	movf	printf@c^(0+128),w
  5733  04C0  00D1               	movwf	printf@prec^(0+128)
  5734  04C1  01D2               	clrf	(printf@prec+1)^(0+128)
  5735  04C2  1BD1               	btfsc	printf@prec^(0+128),7
  5736  04C3  03D2               	decf	(printf@prec+1)^(0+128),f
  5737  04C4                     l3674:	
  5738                           ;doprnt.c: 1474: while(prec--) {
  5739                           
  5740  04C4  30FF               	movlw	255
  5741  04C5  0021               	movlb	1	; select bank1
  5742  04C6  07D1               	addwf	printf@prec^(0+128),f
  5743  04C7  30FF               	movlw	255
  5744  04C8  3DD2               	addwfc	(printf@prec+1)^(0+128),f
  5745  04C9  0A51               	incf	printf@prec^(0+128),w
  5746  04CA  1903               	btfsc	3,2
  5747  04CB  0A52               	incf	(printf@prec+1)^(0+128),w
  5748  04CC  1903               	btfsc	3,2
  5749  04CD  2836               	goto	l3676
  5750                           
  5751                           ;doprnt.c: 1478: {
  5752                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5753  04CE  3000               	movlw	0
  5754  04CF  0020               	movlb	0	; select bank0
  5755  04D0  00A8               	movwf	___llmod@divisor+3
  5756  04D1  3000               	movlw	0
  5757  04D2  00A7               	movwf	___llmod@divisor+2
  5758  04D3  3000               	movlw	0
  5759  04D4  00A6               	movwf	___llmod@divisor+1
  5760  04D5  300A               	movlw	10
  5761  04D6  00A5               	movwf	___llmod@divisor
  5762  04D7  0021               	movlb	1	; select bank1
  5763  04D8  0852               	movf	(printf@prec+1)^(0+128),w
  5764  04D9  0085               	movwf	5
  5765  04DA  0851               	movf	printf@prec^(0+128),w
  5766  04DB  0084               	movwf	4
  5767  04DC  3584               	lslf	4,f
  5768  04DD  0D85               	rlf	5,f
  5769  04DE  3584               	lslf	4,f
  5770  04DF  0D85               	rlf	5,f
  5771  04E0  3000               	movlw	low (_dpowers| (0+32768))
  5772  04E1  0784               	addwf	4,f
  5773  04E2  3090               	movlw	high (_dpowers| (0+32768))
  5774  04E3  3D85               	addwfc	5,f
  5775  04E4  3F00               	moviw [0]fsr0
  5776  04E5  00F1               	movwf	___lldiv@divisor
  5777  04E6  3F01               	moviw [1]fsr0
  5778  04E7  00F2               	movwf	___lldiv@divisor+1
  5779  04E8  3F02               	moviw [2]fsr0
  5780  04E9  00F3               	movwf	___lldiv@divisor+2
  5781  04EA  3F03               	moviw [3]fsr0
  5782  04EB  00F4               	movwf	___lldiv@divisor+3
  5783  04EC  0856               	movf	(printf@val+3)^(0+128),w
  5784  04ED  00F8               	movwf	___lldiv@dividend+3
  5785  04EE  0855               	movf	(printf@val+2)^(0+128),w
  5786  04EF  00F7               	movwf	___lldiv@dividend+2
  5787  04F0  0854               	movf	(printf@val+1)^(0+128),w
  5788  04F1  00F6               	movwf	___lldiv@dividend+1
  5789  04F2  0853               	movf	printf@val^(0+128),w
  5790  04F3  00F5               	movwf	___lldiv@dividend
  5791  04F4  3188  20F3  3180   	fcall	___lldiv
  5792  04F7  0874               	movf	?___lldiv+3,w
  5793  04F8  0020               	movlb	0	; select bank0
  5794  04F9  00AC               	movwf	___llmod@dividend+3
  5795  04FA  0873               	movf	?___lldiv+2,w
  5796  04FB  00AB               	movwf	___llmod@dividend+2
  5797  04FC  0872               	movf	?___lldiv+1,w
  5798  04FD  00AA               	movwf	___llmod@dividend+1
  5799  04FE  0871               	movf	?___lldiv,w
  5800  04FF  00A9               	movwf	___llmod@dividend
  5801  0500  3188  2019  3180   	fcall	___llmod
  5802  0503  0020               	movlb	0	; select bank0
  5803  0504  0825               	movf	?___llmod,w
  5804  0505  3E30               	addlw	48
  5805  0506  0021               	movlb	1	; select bank1
  5806  0507  00C5               	movwf	??_printf^(0+128)
  5807  0508  0845               	movf	??_printf^(0+128),w
  5808  0509  00E0               	movwf	printf@c^(0+128)
  5809                           
  5810                           ;doprnt.c: 1523: }
  5811                           ;doprnt.c: 1524: (putch(c) );
  5812  050A  0860               	movf	printf@c^(0+128),w
  5813  050B  3188  2000  3180   	fcall	_putch
  5814  050E  2CC4               	goto	l3674
  5815  050F                     l374:	
  5816                           ;doprnt.c: 1540: return 0;
  5817                           ;	Return value of _printf is never used
  5818                           
  5819                           ;doprnt.c: 1525: }
  5820                           ;doprnt.c: 1533: }
  5821                           ;doprnt.c: 1535: alldone:
  5822                           
  5823  050F  0008               	return
  5824  0510                     __end_of_printf:	
  5825                           
  5826                           	psect	text25
  5827  0510                     __ptext25:	
  5828 ;; *************** function _scale *****************
  5829 ;; Defined at:
  5830 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  5831 ;; Parameters:    Size  Location     Type
  5832 ;;  scl             1    wreg     char 
  5833 ;; Auto vars:     Size  Location     Type
  5834 ;;  scl             1   35[BANK0 ] char 
  5835 ;; Return value:  Size  Location     Type
  5836 ;;                  3   27[BANK0 ] char 
  5837 ;; Registers used:
  5838 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5839 ;; Tracked objects:
  5840 ;;		On entry : 0/0
  5841 ;;		On exit  : 0/0
  5842 ;;		Unchanged: 0/0
  5843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5844 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5845 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5846 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5847 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5848 ;;Total ram usage:        9 bytes
  5849 ;; Hardware stack levels used:    1
  5850 ;; Hardware stack levels required when called:    4
  5851 ;; This function calls:
  5852 ;;		___awdiv
  5853 ;;		___awmod
  5854 ;;		___ftmul
  5855 ;;		___wmul
  5856 ;; This function is called by:
  5857 ;;		_printf
  5858 ;; This function uses a non-reentrant model
  5859 ;;
  5860                           
  5861                           
  5862                           ;psect for function _scale
  5863  0510                     _scale:	
  5864                           
  5865                           ;incstack = 0
  5866                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5867                           ;scale@scl stored from wreg
  5868  0510  0020               	movlb	0	; select bank0
  5869  0511  00C3               	movwf	scale@scl
  5870                           
  5871                           ;doprnt.c: 428: if(scl < 0) {
  5872  0512  1FC3               	btfss	scale@scl,7
  5873  0513  2E35               	goto	l3240
  5874                           
  5875                           ;doprnt.c: 429: scl = -scl;
  5876  0514  09C3               	comf	scale@scl,f
  5877  0515  0AC3               	incf	scale@scl,f
  5878                           
  5879                           ;doprnt.c: 430: if(scl>=110)
  5880  0516  0843               	movf	scale@scl,w
  5881  0517  3A80               	xorlw	128
  5882  0518  3E12               	addlw	-238
  5883  0519  1C03               	skipc
  5884  051A  2DB9               	goto	l3230
  5885                           
  5886                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5887  051B  300A               	movlw	10
  5888  051C  00F8               	movwf	___awdiv@divisor
  5889  051D  3000               	movlw	0
  5890  051E  00F9               	movwf	___awdiv@divisor+1
  5891  051F  0843               	movf	scale@scl,w
  5892  0520  00F3               	movwf	___awmod@dividend
  5893  0521  01F4               	clrf	___awmod@dividend+1
  5894  0522  1BF3               	btfsc	___awmod@dividend,7
  5895  0523  03F4               	decf	___awmod@dividend+1,f
  5896  0524  3064               	movlw	100
  5897  0525  00F1               	movwf	___awmod@divisor
  5898  0526  3000               	movlw	0
  5899  0527  00F2               	movwf	___awmod@divisor+1
  5900  0528  3188  205C  3185   	fcall	___awmod
  5901  052B  0872               	movf	?___awmod+1,w
  5902  052C  00FB               	movwf	___awdiv@dividend+1
  5903  052D  0871               	movf	?___awmod,w
  5904  052E  00FA               	movwf	___awdiv@dividend
  5905  052F  3188  20A1  3185   	fcall	___awdiv
  5906  0532  0878               	movf	?___awdiv,w
  5907  0533  3E09               	addlw	9
  5908  0534  0020               	movlb	0	; select bank0
  5909  0535  00A5               	movwf	___wmul@multiplier
  5910  0536  3000               	movlw	0
  5911  0537  3D79               	addwfc	?___awdiv+1,w
  5912  0538  00A6               	movwf	___wmul@multiplier+1
  5913  0539  3003               	movlw	3
  5914  053A  00A7               	movwf	___wmul@multiplicand
  5915  053B  3000               	movlw	0
  5916  053C  00A8               	movwf	___wmul@multiplicand+1
  5917  053D  3196  2654  3185   	fcall	___wmul
  5918  0540  0020               	movlb	0	; select bank0
  5919  0541  0826               	movf	?___wmul+1,w
  5920  0542  0085               	movwf	5
  5921  0543  0825               	movf	?___wmul,w
  5922  0544  0084               	movwf	4
  5923  0545  3028               	movlw	low (__npowers_| (0+32768))
  5924  0546  0784               	addwf	4,f
  5925  0547  3090               	movlw	high (__npowers_| (0+32768))
  5926  0548  3D85               	addwfc	5,f
  5927  0549  3F00               	moviw [0]fsr0
  5928  054A  00AB               	movwf	___ftmul@f1
  5929  054B  3F01               	moviw [1]fsr0
  5930  054C  00AC               	movwf	___ftmul@f1+1
  5931  054D  3F02               	moviw [2]fsr0
  5932  054E  00AD               	movwf	___ftmul@f1+2
  5933  054F  3064               	movlw	100
  5934  0550  00F8               	movwf	___awdiv@divisor
  5935  0551  3000               	movlw	0
  5936  0552  00F9               	movwf	___awdiv@divisor+1
  5937  0553  0843               	movf	scale@scl,w
  5938  0554  00FA               	movwf	___awdiv@dividend
  5939  0555  01FB               	clrf	___awdiv@dividend+1
  5940  0556  1BFA               	btfsc	___awdiv@dividend,7
  5941  0557  03FB               	decf	___awdiv@dividend+1,f
  5942  0558  3188  20A1  3185   	fcall	___awdiv
  5943  055B  0878               	movf	?___awdiv,w
  5944  055C  3E12               	addlw	18
  5945  055D  0020               	movlb	0	; select bank0
  5946  055E  00A5               	movwf	___wmul@multiplier
  5947  055F  3000               	movlw	0
  5948  0560  3D79               	addwfc	?___awdiv+1,w
  5949  0561  00A6               	movwf	___wmul@multiplier+1
  5950  0562  3003               	movlw	3
  5951  0563  00A7               	movwf	___wmul@multiplicand
  5952  0564  3000               	movlw	0
  5953  0565  00A8               	movwf	___wmul@multiplicand+1
  5954  0566  3196  2654  3185   	fcall	___wmul
  5955  0569  0020               	movlb	0	; select bank0
  5956  056A  0826               	movf	?___wmul+1,w
  5957  056B  0085               	movwf	5
  5958  056C  0825               	movf	?___wmul,w
  5959  056D  0084               	movwf	4
  5960  056E  3028               	movlw	low (__npowers_| (0+32768))
  5961  056F  0784               	addwf	4,f
  5962  0570  3090               	movlw	high (__npowers_| (0+32768))
  5963  0571  3D85               	addwfc	5,f
  5964  0572  3F00               	moviw [0]fsr0
  5965  0573  00AE               	movwf	___ftmul@f2
  5966  0574  3F01               	moviw [1]fsr0
  5967  0575  00AF               	movwf	___ftmul@f2+1
  5968  0576  3F02               	moviw [2]fsr0
  5969  0577  00B0               	movwf	___ftmul@f2+2
  5970  0578  318A  2231  3185   	fcall	___ftmul
  5971  057B  0020               	movlb	0	; select bank0
  5972  057C  082B               	movf	?___ftmul,w
  5973  057D  00C0               	movwf	_scale$1239
  5974  057E  082C               	movf	?___ftmul+1,w
  5975  057F  00C1               	movwf	_scale$1239+1
  5976  0580  082D               	movf	?___ftmul+2,w
  5977  0581  00C2               	movwf	_scale$1239+2
  5978                           
  5979                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5980  0582  0843               	movf	scale@scl,w
  5981  0583  00F3               	movwf	___awmod@dividend
  5982  0584  01F4               	clrf	___awmod@dividend+1
  5983  0585  1BF3               	btfsc	___awmod@dividend,7
  5984  0586  03F4               	decf	___awmod@dividend+1,f
  5985  0587  300A               	movlw	10
  5986  0588  00F1               	movwf	___awmod@divisor
  5987  0589  3000               	movlw	0
  5988  058A  00F2               	movwf	___awmod@divisor+1
  5989  058B  3188  205C  3185   	fcall	___awmod
  5990  058E  0872               	movf	?___awmod+1,w
  5991  058F  0020               	movlb	0	; select bank0
  5992  0590  00A6               	movwf	___wmul@multiplier+1
  5993  0591  0871               	movf	?___awmod,w
  5994  0592  00A5               	movwf	___wmul@multiplier
  5995  0593  3003               	movlw	3
  5996  0594  00A7               	movwf	___wmul@multiplicand
  5997  0595  3000               	movlw	0
  5998  0596  00A8               	movwf	___wmul@multiplicand+1
  5999  0597  3196  2654  3185   	fcall	___wmul
  6000  059A  0020               	movlb	0	; select bank0
  6001  059B  0826               	movf	?___wmul+1,w
  6002  059C  0085               	movwf	5
  6003  059D  0825               	movf	?___wmul,w
  6004  059E  0084               	movwf	4
  6005  059F  3028               	movlw	low (__npowers_| (0+32768))
  6006  05A0  0784               	addwf	4,f
  6007  05A1  3090               	movlw	high (__npowers_| (0+32768))
  6008  05A2  3D85               	addwfc	5,f
  6009  05A3  3F00               	moviw [0]fsr0
  6010  05A4  00AB               	movwf	___ftmul@f1
  6011  05A5  3F01               	moviw [1]fsr0
  6012  05A6  00AC               	movwf	___ftmul@f1+1
  6013  05A7  3F02               	moviw [2]fsr0
  6014  05A8  00AD               	movwf	___ftmul@f1+2
  6015  05A9  0840               	movf	_scale$1239,w
  6016  05AA  00AE               	movwf	___ftmul@f2
  6017  05AB  0841               	movf	_scale$1239+1,w
  6018  05AC  00AF               	movwf	___ftmul@f2+1
  6019  05AD  0842               	movf	_scale$1239+2,w
  6020  05AE  00B0               	movwf	___ftmul@f2+2
  6021  05AF  318A  2231         	fcall	___ftmul
  6022  05B1  0020               	movlb	0	; select bank0
  6023  05B2  082B               	movf	?___ftmul,w
  6024  05B3  00BB               	movwf	?_scale
  6025  05B4  082C               	movf	?___ftmul+1,w
  6026  05B5  00BC               	movwf	?_scale+1
  6027  05B6  082D               	movf	?___ftmul+2,w
  6028  05B7  00BD               	movwf	?_scale+2
  6029  05B8  0008               	return
  6030  05B9                     l3230:	
  6031                           
  6032                           ;doprnt.c: 432: else if(scl > 10)
  6033  05B9  0843               	movf	scale@scl,w
  6034  05BA  3A80               	xorlw	128
  6035  05BB  3E75               	addlw	-139
  6036  05BC  1C03               	skipc
  6037  05BD  2E18               	goto	l3236
  6038                           
  6039                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6040  05BE  0843               	movf	scale@scl,w
  6041  05BF  00F3               	movwf	___awmod@dividend
  6042  05C0  01F4               	clrf	___awmod@dividend+1
  6043  05C1  1BF3               	btfsc	___awmod@dividend,7
  6044  05C2  03F4               	decf	___awmod@dividend+1,f
  6045  05C3  300A               	movlw	10
  6046  05C4  00F1               	movwf	___awmod@divisor
  6047  05C5  3000               	movlw	0
  6048  05C6  00F2               	movwf	___awmod@divisor+1
  6049  05C7  3188  205C  3185   	fcall	___awmod
  6050  05CA  0872               	movf	?___awmod+1,w
  6051  05CB  0020               	movlb	0	; select bank0
  6052  05CC  00A6               	movwf	___wmul@multiplier+1
  6053  05CD  0871               	movf	?___awmod,w
  6054  05CE  00A5               	movwf	___wmul@multiplier
  6055  05CF  3003               	movlw	3
  6056  05D0  00A7               	movwf	___wmul@multiplicand
  6057  05D1  3000               	movlw	0
  6058  05D2  00A8               	movwf	___wmul@multiplicand+1
  6059  05D3  3196  2654  3185   	fcall	___wmul
  6060  05D6  0020               	movlb	0	; select bank0
  6061  05D7  0826               	movf	?___wmul+1,w
  6062  05D8  0085               	movwf	5
  6063  05D9  0825               	movf	?___wmul,w
  6064  05DA  0084               	movwf	4
  6065  05DB  3028               	movlw	low (__npowers_| (0+32768))
  6066  05DC  0784               	addwf	4,f
  6067  05DD  3090               	movlw	high (__npowers_| (0+32768))
  6068  05DE  3D85               	addwfc	5,f
  6069  05DF  3F00               	moviw [0]fsr0
  6070  05E0  00AB               	movwf	___ftmul@f1
  6071  05E1  3F01               	moviw [1]fsr0
  6072  05E2  00AC               	movwf	___ftmul@f1+1
  6073  05E3  3F02               	moviw [2]fsr0
  6074  05E4  00AD               	movwf	___ftmul@f1+2
  6075  05E5  300A               	movlw	10
  6076  05E6  00F8               	movwf	___awdiv@divisor
  6077  05E7  3000               	movlw	0
  6078  05E8  00F9               	movwf	___awdiv@divisor+1
  6079  05E9  0843               	movf	scale@scl,w
  6080  05EA  00FA               	movwf	___awdiv@dividend
  6081  05EB  01FB               	clrf	___awdiv@dividend+1
  6082  05EC  1BFA               	btfsc	___awdiv@dividend,7
  6083  05ED  03FB               	decf	___awdiv@dividend+1,f
  6084  05EE  3188  20A1  3185   	fcall	___awdiv
  6085  05F1  0878               	movf	?___awdiv,w
  6086  05F2  3E09               	addlw	9
  6087  05F3  0020               	movlb	0	; select bank0
  6088  05F4  00A5               	movwf	___wmul@multiplier
  6089  05F5  3000               	movlw	0
  6090  05F6  3D79               	addwfc	?___awdiv+1,w
  6091  05F7  00A6               	movwf	___wmul@multiplier+1
  6092  05F8  3003               	movlw	3
  6093  05F9  00A7               	movwf	___wmul@multiplicand
  6094  05FA  3000               	movlw	0
  6095  05FB  00A8               	movwf	___wmul@multiplicand+1
  6096  05FC  3196  2654  3185   	fcall	___wmul
  6097  05FF  0020               	movlb	0	; select bank0
  6098  0600  0826               	movf	?___wmul+1,w
  6099  0601  0085               	movwf	5
  6100  0602  0825               	movf	?___wmul,w
  6101  0603  0084               	movwf	4
  6102  0604  3028               	movlw	low (__npowers_| (0+32768))
  6103  0605  0784               	addwf	4,f
  6104  0606  3090               	movlw	high (__npowers_| (0+32768))
  6105  0607  3D85               	addwfc	5,f
  6106  0608  3F00               	moviw [0]fsr0
  6107  0609  00AE               	movwf	___ftmul@f2
  6108  060A  3F01               	moviw [1]fsr0
  6109  060B  00AF               	movwf	___ftmul@f2+1
  6110  060C  3F02               	moviw [2]fsr0
  6111  060D  00B0               	movwf	___ftmul@f2+2
  6112  060E  318A  2231         	fcall	___ftmul
  6113  0610  0020               	movlb	0	; select bank0
  6114  0611  082B               	movf	?___ftmul,w
  6115  0612  00BB               	movwf	?_scale
  6116  0613  082C               	movf	?___ftmul+1,w
  6117  0614  00BC               	movwf	?_scale+1
  6118  0615  082D               	movf	?___ftmul+2,w
  6119  0616  00BD               	movwf	?_scale+2
  6120  0617  0008               	return
  6121  0618                     l3236:	
  6122                           
  6123                           ;doprnt.c: 434: return _npowers_[scl];
  6124  0618  0843               	movf	scale@scl,w
  6125  0619  00BE               	movwf	??_scale
  6126  061A  01BF               	clrf	??_scale+1
  6127  061B  083E               	movf	??_scale,w
  6128  061C  00A5               	movwf	___wmul@multiplier
  6129  061D  083F               	movf	??_scale+1,w
  6130  061E  00A6               	movwf	___wmul@multiplier+1
  6131  061F  3003               	movlw	3
  6132  0620  00A7               	movwf	___wmul@multiplicand
  6133  0621  3000               	movlw	0
  6134  0622  00A8               	movwf	___wmul@multiplicand+1
  6135  0623  3196  2654         	fcall	___wmul
  6136  0625  0020               	movlb	0	; select bank0
  6137  0626  0826               	movf	?___wmul+1,w
  6138  0627  0085               	movwf	5
  6139  0628  0825               	movf	?___wmul,w
  6140  0629  0084               	movwf	4
  6141  062A  3028               	movlw	low (__npowers_| (0+32768))
  6142  062B  0784               	addwf	4,f
  6143  062C  3090               	movlw	high (__npowers_| (0+32768))
  6144  062D  3D85               	addwfc	5,f
  6145  062E  3F00               	moviw [0]fsr0
  6146  062F  00BB               	movwf	?_scale
  6147  0630  3F01               	moviw [1]fsr0
  6148  0631  00BC               	movwf	?_scale+1
  6149  0632  3F02               	moviw [2]fsr0
  6150  0633  00BD               	movwf	?_scale+2
  6151  0634  0008               	return
  6152  0635                     l3240:	
  6153                           
  6154                           ;doprnt.c: 435: }
  6155                           ;doprnt.c: 436: if(scl>=110)
  6156  0635  0843               	movf	scale@scl,w
  6157  0636  3A80               	xorlw	128
  6158  0637  3E12               	addlw	-238
  6159  0638  1C03               	skipc
  6160  0639  2ED8               	goto	l3248
  6161                           
  6162                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6163  063A  300A               	movlw	10
  6164  063B  00F8               	movwf	___awdiv@divisor
  6165  063C  3000               	movlw	0
  6166  063D  00F9               	movwf	___awdiv@divisor+1
  6167  063E  0843               	movf	scale@scl,w
  6168  063F  00F3               	movwf	___awmod@dividend
  6169  0640  01F4               	clrf	___awmod@dividend+1
  6170  0641  1BF3               	btfsc	___awmod@dividend,7
  6171  0642  03F4               	decf	___awmod@dividend+1,f
  6172  0643  3064               	movlw	100
  6173  0644  00F1               	movwf	___awmod@divisor
  6174  0645  3000               	movlw	0
  6175  0646  00F2               	movwf	___awmod@divisor+1
  6176  0647  3188  205C  3185   	fcall	___awmod
  6177  064A  0872               	movf	?___awmod+1,w
  6178  064B  00FB               	movwf	___awdiv@dividend+1
  6179  064C  0871               	movf	?___awmod,w
  6180  064D  00FA               	movwf	___awdiv@dividend
  6181  064E  3188  20A1  3185   	fcall	___awdiv
  6182  0651  0878               	movf	?___awdiv,w
  6183  0652  3E09               	addlw	9
  6184  0653  0020               	movlb	0	; select bank0
  6185  0654  00A5               	movwf	___wmul@multiplier
  6186  0655  3000               	movlw	0
  6187  0656  3D79               	addwfc	?___awdiv+1,w
  6188  0657  00A6               	movwf	___wmul@multiplier+1
  6189  0658  3003               	movlw	3
  6190  0659  00A7               	movwf	___wmul@multiplicand
  6191  065A  3000               	movlw	0
  6192  065B  00A8               	movwf	___wmul@multiplicand+1
  6193  065C  3196  2654  3185   	fcall	___wmul
  6194  065F  0020               	movlb	0	; select bank0
  6195  0660  0826               	movf	?___wmul+1,w
  6196  0661  0085               	movwf	5
  6197  0662  0825               	movf	?___wmul,w
  6198  0663  0084               	movwf	4
  6199  0664  304F               	movlw	low (__powers_| (0+32768))
  6200  0665  0784               	addwf	4,f
  6201  0666  3090               	movlw	high (__powers_| (0+32768))
  6202  0667  3D85               	addwfc	5,f
  6203  0668  3F00               	moviw [0]fsr0
  6204  0669  00AB               	movwf	___ftmul@f1
  6205  066A  3F01               	moviw [1]fsr0
  6206  066B  00AC               	movwf	___ftmul@f1+1
  6207  066C  3F02               	moviw [2]fsr0
  6208  066D  00AD               	movwf	___ftmul@f1+2
  6209  066E  3064               	movlw	100
  6210  066F  00F8               	movwf	___awdiv@divisor
  6211  0670  3000               	movlw	0
  6212  0671  00F9               	movwf	___awdiv@divisor+1
  6213  0672  0843               	movf	scale@scl,w
  6214  0673  00FA               	movwf	___awdiv@dividend
  6215  0674  01FB               	clrf	___awdiv@dividend+1
  6216  0675  1BFA               	btfsc	___awdiv@dividend,7
  6217  0676  03FB               	decf	___awdiv@dividend+1,f
  6218  0677  3188  20A1  3185   	fcall	___awdiv
  6219  067A  0878               	movf	?___awdiv,w
  6220  067B  3E12               	addlw	18
  6221  067C  0020               	movlb	0	; select bank0
  6222  067D  00A5               	movwf	___wmul@multiplier
  6223  067E  3000               	movlw	0
  6224  067F  3D79               	addwfc	?___awdiv+1,w
  6225  0680  00A6               	movwf	___wmul@multiplier+1
  6226  0681  3003               	movlw	3
  6227  0682  00A7               	movwf	___wmul@multiplicand
  6228  0683  3000               	movlw	0
  6229  0684  00A8               	movwf	___wmul@multiplicand+1
  6230  0685  3196  2654  3185   	fcall	___wmul
  6231  0688  0020               	movlb	0	; select bank0
  6232  0689  0826               	movf	?___wmul+1,w
  6233  068A  0085               	movwf	5
  6234  068B  0825               	movf	?___wmul,w
  6235  068C  0084               	movwf	4
  6236  068D  304F               	movlw	low (__powers_| (0+32768))
  6237  068E  0784               	addwf	4,f
  6238  068F  3090               	movlw	high (__powers_| (0+32768))
  6239  0690  3D85               	addwfc	5,f
  6240  0691  3F00               	moviw [0]fsr0
  6241  0692  00AE               	movwf	___ftmul@f2
  6242  0693  3F01               	moviw [1]fsr0
  6243  0694  00AF               	movwf	___ftmul@f2+1
  6244  0695  3F02               	moviw [2]fsr0
  6245  0696  00B0               	movwf	___ftmul@f2+2
  6246  0697  318A  2231  3185   	fcall	___ftmul
  6247  069A  0020               	movlb	0	; select bank0
  6248  069B  082B               	movf	?___ftmul,w
  6249  069C  00C0               	movwf	_scale$1239
  6250  069D  082C               	movf	?___ftmul+1,w
  6251  069E  00C1               	movwf	_scale$1239+1
  6252  069F  082D               	movf	?___ftmul+2,w
  6253  06A0  00C2               	movwf	_scale$1239+2
  6254                           
  6255                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6256  06A1  0843               	movf	scale@scl,w
  6257  06A2  00F3               	movwf	___awmod@dividend
  6258  06A3  01F4               	clrf	___awmod@dividend+1
  6259  06A4  1BF3               	btfsc	___awmod@dividend,7
  6260  06A5  03F4               	decf	___awmod@dividend+1,f
  6261  06A6  300A               	movlw	10
  6262  06A7  00F1               	movwf	___awmod@divisor
  6263  06A8  3000               	movlw	0
  6264  06A9  00F2               	movwf	___awmod@divisor+1
  6265  06AA  3188  205C  3185   	fcall	___awmod
  6266  06AD  0872               	movf	?___awmod+1,w
  6267  06AE  0020               	movlb	0	; select bank0
  6268  06AF  00A6               	movwf	___wmul@multiplier+1
  6269  06B0  0871               	movf	?___awmod,w
  6270  06B1  00A5               	movwf	___wmul@multiplier
  6271  06B2  3003               	movlw	3
  6272  06B3  00A7               	movwf	___wmul@multiplicand
  6273  06B4  3000               	movlw	0
  6274  06B5  00A8               	movwf	___wmul@multiplicand+1
  6275  06B6  3196  2654  3185   	fcall	___wmul
  6276  06B9  0020               	movlb	0	; select bank0
  6277  06BA  0826               	movf	?___wmul+1,w
  6278  06BB  0085               	movwf	5
  6279  06BC  0825               	movf	?___wmul,w
  6280  06BD  0084               	movwf	4
  6281  06BE  304F               	movlw	low (__powers_| (0+32768))
  6282  06BF  0784               	addwf	4,f
  6283  06C0  3090               	movlw	high (__powers_| (0+32768))
  6284  06C1  3D85               	addwfc	5,f
  6285  06C2  3F00               	moviw [0]fsr0
  6286  06C3  00AB               	movwf	___ftmul@f1
  6287  06C4  3F01               	moviw [1]fsr0
  6288  06C5  00AC               	movwf	___ftmul@f1+1
  6289  06C6  3F02               	moviw [2]fsr0
  6290  06C7  00AD               	movwf	___ftmul@f1+2
  6291  06C8  0840               	movf	_scale$1239,w
  6292  06C9  00AE               	movwf	___ftmul@f2
  6293  06CA  0841               	movf	_scale$1239+1,w
  6294  06CB  00AF               	movwf	___ftmul@f2+1
  6295  06CC  0842               	movf	_scale$1239+2,w
  6296  06CD  00B0               	movwf	___ftmul@f2+2
  6297  06CE  318A  2231         	fcall	___ftmul
  6298  06D0  0020               	movlb	0	; select bank0
  6299  06D1  082B               	movf	?___ftmul,w
  6300  06D2  00BB               	movwf	?_scale
  6301  06D3  082C               	movf	?___ftmul+1,w
  6302  06D4  00BC               	movwf	?_scale+1
  6303  06D5  082D               	movf	?___ftmul+2,w
  6304  06D6  00BD               	movwf	?_scale+2
  6305  06D7  0008               	return
  6306  06D8                     l3248:	
  6307                           
  6308                           ;doprnt.c: 438: else if(scl > 10)
  6309  06D8  0843               	movf	scale@scl,w
  6310  06D9  3A80               	xorlw	128
  6311  06DA  3E75               	addlw	-139
  6312  06DB  1C03               	skipc
  6313  06DC  2F37               	goto	l3254
  6314                           
  6315                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6316  06DD  0843               	movf	scale@scl,w
  6317  06DE  00F3               	movwf	___awmod@dividend
  6318  06DF  01F4               	clrf	___awmod@dividend+1
  6319  06E0  1BF3               	btfsc	___awmod@dividend,7
  6320  06E1  03F4               	decf	___awmod@dividend+1,f
  6321  06E2  300A               	movlw	10
  6322  06E3  00F1               	movwf	___awmod@divisor
  6323  06E4  3000               	movlw	0
  6324  06E5  00F2               	movwf	___awmod@divisor+1
  6325  06E6  3188  205C  3185   	fcall	___awmod
  6326  06E9  0872               	movf	?___awmod+1,w
  6327  06EA  0020               	movlb	0	; select bank0
  6328  06EB  00A6               	movwf	___wmul@multiplier+1
  6329  06EC  0871               	movf	?___awmod,w
  6330  06ED  00A5               	movwf	___wmul@multiplier
  6331  06EE  3003               	movlw	3
  6332  06EF  00A7               	movwf	___wmul@multiplicand
  6333  06F0  3000               	movlw	0
  6334  06F1  00A8               	movwf	___wmul@multiplicand+1
  6335  06F2  3196  2654  3185   	fcall	___wmul
  6336  06F5  0020               	movlb	0	; select bank0
  6337  06F6  0826               	movf	?___wmul+1,w
  6338  06F7  0085               	movwf	5
  6339  06F8  0825               	movf	?___wmul,w
  6340  06F9  0084               	movwf	4
  6341  06FA  304F               	movlw	low (__powers_| (0+32768))
  6342  06FB  0784               	addwf	4,f
  6343  06FC  3090               	movlw	high (__powers_| (0+32768))
  6344  06FD  3D85               	addwfc	5,f
  6345  06FE  3F00               	moviw [0]fsr0
  6346  06FF  00AB               	movwf	___ftmul@f1
  6347  0700  3F01               	moviw [1]fsr0
  6348  0701  00AC               	movwf	___ftmul@f1+1
  6349  0702  3F02               	moviw [2]fsr0
  6350  0703  00AD               	movwf	___ftmul@f1+2
  6351  0704  300A               	movlw	10
  6352  0705  00F8               	movwf	___awdiv@divisor
  6353  0706  3000               	movlw	0
  6354  0707  00F9               	movwf	___awdiv@divisor+1
  6355  0708  0843               	movf	scale@scl,w
  6356  0709  00FA               	movwf	___awdiv@dividend
  6357  070A  01FB               	clrf	___awdiv@dividend+1
  6358  070B  1BFA               	btfsc	___awdiv@dividend,7
  6359  070C  03FB               	decf	___awdiv@dividend+1,f
  6360  070D  3188  20A1  3185   	fcall	___awdiv
  6361  0710  0878               	movf	?___awdiv,w
  6362  0711  3E09               	addlw	9
  6363  0712  0020               	movlb	0	; select bank0
  6364  0713  00A5               	movwf	___wmul@multiplier
  6365  0714  3000               	movlw	0
  6366  0715  3D79               	addwfc	?___awdiv+1,w
  6367  0716  00A6               	movwf	___wmul@multiplier+1
  6368  0717  3003               	movlw	3
  6369  0718  00A7               	movwf	___wmul@multiplicand
  6370  0719  3000               	movlw	0
  6371  071A  00A8               	movwf	___wmul@multiplicand+1
  6372  071B  3196  2654  3185   	fcall	___wmul
  6373  071E  0020               	movlb	0	; select bank0
  6374  071F  0826               	movf	?___wmul+1,w
  6375  0720  0085               	movwf	5
  6376  0721  0825               	movf	?___wmul,w
  6377  0722  0084               	movwf	4
  6378  0723  304F               	movlw	low (__powers_| (0+32768))
  6379  0724  0784               	addwf	4,f
  6380  0725  3090               	movlw	high (__powers_| (0+32768))
  6381  0726  3D85               	addwfc	5,f
  6382  0727  3F00               	moviw [0]fsr0
  6383  0728  00AE               	movwf	___ftmul@f2
  6384  0729  3F01               	moviw [1]fsr0
  6385  072A  00AF               	movwf	___ftmul@f2+1
  6386  072B  3F02               	moviw [2]fsr0
  6387  072C  00B0               	movwf	___ftmul@f2+2
  6388  072D  318A  2231         	fcall	___ftmul
  6389  072F  0020               	movlb	0	; select bank0
  6390  0730  082B               	movf	?___ftmul,w
  6391  0731  00BB               	movwf	?_scale
  6392  0732  082C               	movf	?___ftmul+1,w
  6393  0733  00BC               	movwf	?_scale+1
  6394  0734  082D               	movf	?___ftmul+2,w
  6395  0735  00BD               	movwf	?_scale+2
  6396  0736  0008               	return
  6397  0737                     l3254:	
  6398                           
  6399                           ;doprnt.c: 440: return _powers_[scl];
  6400  0737  0843               	movf	scale@scl,w
  6401  0738  00BE               	movwf	??_scale
  6402  0739  01BF               	clrf	??_scale+1
  6403  073A  083E               	movf	??_scale,w
  6404  073B  00A5               	movwf	___wmul@multiplier
  6405  073C  083F               	movf	??_scale+1,w
  6406  073D  00A6               	movwf	___wmul@multiplier+1
  6407  073E  3003               	movlw	3
  6408  073F  00A7               	movwf	___wmul@multiplicand
  6409  0740  3000               	movlw	0
  6410  0741  00A8               	movwf	___wmul@multiplicand+1
  6411  0742  3196  2654         	fcall	___wmul
  6412  0744  0020               	movlb	0	; select bank0
  6413  0745  0826               	movf	?___wmul+1,w
  6414  0746  0085               	movwf	5
  6415  0747  0825               	movf	?___wmul,w
  6416  0748  0084               	movwf	4
  6417  0749  304F               	movlw	low (__powers_| (0+32768))
  6418  074A  0784               	addwf	4,f
  6419  074B  3090               	movlw	high (__powers_| (0+32768))
  6420  074C  3D85               	addwfc	5,f
  6421  074D  3F00               	moviw [0]fsr0
  6422  074E  00BB               	movwf	?_scale
  6423  074F  3F01               	moviw [1]fsr0
  6424  0750  00BC               	movwf	?_scale+1
  6425  0751  3F02               	moviw [2]fsr0
  6426  0752  00BD               	movwf	?_scale+2
  6427  0753  0008               	return
  6428  0754                     __end_of_scale:	
  6429                           
  6430                           	psect	text26
  6431  0800                     __ptext26:	
  6432 ;; *************** function _putch *****************
  6433 ;; Defined at:
  6434 ;;		line 59 in file "UART.c"
  6435 ;; Parameters:    Size  Location     Type
  6436 ;;  txData          1    wreg     unsigned char 
  6437 ;; Auto vars:     Size  Location     Type
  6438 ;;  txData          1    2[COMMON] unsigned char 
  6439 ;; Return value:  Size  Location     Type
  6440 ;;                  1    wreg      void 
  6441 ;; Registers used:
  6442 ;;		wreg, status,2, status,0, pclath, cstack
  6443 ;; Tracked objects:
  6444 ;;		On entry : 0/0
  6445 ;;		On exit  : 0/0
  6446 ;;		Unchanged: 0/0
  6447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6449 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6451 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6452 ;;Total ram usage:        1 bytes
  6453 ;; Hardware stack levels used:    1
  6454 ;; Hardware stack levels required when called:    3
  6455 ;; This function calls:
  6456 ;;		_EUSART_Write
  6457 ;; This function is called by:
  6458 ;;		_printf
  6459 ;; This function uses a non-reentrant model
  6460 ;;
  6461                           
  6462                           
  6463                           ;psect for function _putch
  6464  0800                     _putch:	
  6465                           
  6466                           ;incstack = 0
  6467                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  6468                           ;putch@txData stored from wreg
  6469  0800  00F2               	movwf	putch@txData
  6470                           
  6471                           ;UART.c: 61: EUSART_Write(txData);
  6472  0801  0872               	movf	putch@txData,w
  6473  0802  3195  2599         	fcall	_EUSART_Write
  6474  0804  0008               	return
  6475  0805                     __end_of_putch:	
  6476                           
  6477                           	psect	text27
  6478  1599                     __ptext27:	
  6479 ;; *************** function _EUSART_Write *****************
  6480 ;; Defined at:
  6481 ;;		line 45 in file "UART.c"
  6482 ;; Parameters:    Size  Location     Type
  6483 ;;  txData          1    wreg     unsigned char 
  6484 ;; Auto vars:     Size  Location     Type
  6485 ;;  txData          1    1[COMMON] unsigned char 
  6486 ;; Return value:  Size  Location     Type
  6487 ;;                  1    wreg      void 
  6488 ;; Registers used:
  6489 ;;		wreg
  6490 ;; Tracked objects:
  6491 ;;		On entry : 0/0
  6492 ;;		On exit  : 0/0
  6493 ;;		Unchanged: 0/0
  6494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6496 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6498 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6499 ;;Total ram usage:        1 bytes
  6500 ;; Hardware stack levels used:    1
  6501 ;; Hardware stack levels required when called:    2
  6502 ;; This function calls:
  6503 ;;		Nothing
  6504 ;; This function is called by:
  6505 ;;		_putch
  6506 ;; This function uses a non-reentrant model
  6507 ;;
  6508                           
  6509                           
  6510                           ;psect for function _EUSART_Write
  6511  1599                     _EUSART_Write:	
  6512                           
  6513                           ;incstack = 0
  6514                           ; Regs used in _EUSART_Write: [wreg]
  6515                           ;EUSART_Write@txData stored from wreg
  6516  1599  00F1               	movwf	EUSART_Write@txData
  6517  159A                     l150:	
  6518                           ;UART.c: 48: {
  6519                           
  6520                           ;UART.c: 47: while(0 == PIR1bits.TXIF)
  6521                           
  6522  159A  0020               	movlb	0	; select bank0
  6523  159B  1E11               	btfss	17,4	;volatile
  6524  159C  2D9A               	goto	l150
  6525                           
  6526                           ;UART.c: 49: }
  6527                           ;UART.c: 51: TXREG = txData;
  6528  159D  0871               	movf	EUSART_Write@txData,w
  6529  159E  0023               	movlb	3	; select bank3
  6530  159F  009A               	movwf	26	;volatile
  6531  15A0  0008               	return
  6532  15A1                     __end_of_EUSART_Write:	
  6533                           
  6534                           	psect	text28
  6535  0E9B                     __ptext28:	
  6536 ;; *************** function _fround *****************
  6537 ;; Defined at:
  6538 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  6539 ;; Parameters:    Size  Location     Type
  6540 ;;  prec            1    wreg     unsigned char 
  6541 ;; Auto vars:     Size  Location     Type
  6542 ;;  prec            1   40[BANK0 ] unsigned char 
  6543 ;; Return value:  Size  Location     Type
  6544 ;;                  3   27[BANK0 ] unsigned char 
  6545 ;; Registers used:
  6546 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6547 ;; Tracked objects:
  6548 ;;		On entry : 0/0
  6549 ;;		On exit  : 0/0
  6550 ;;		Unchanged: 0/0
  6551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6552 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6553 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6554 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6555 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6556 ;;Total ram usage:       14 bytes
  6557 ;; Hardware stack levels used:    1
  6558 ;; Hardware stack levels required when called:    4
  6559 ;; This function calls:
  6560 ;;		___awdiv
  6561 ;;		___awmod
  6562 ;;		___ftmul
  6563 ;;		___wmul
  6564 ;; This function is called by:
  6565 ;;		_printf
  6566 ;; This function uses a non-reentrant model
  6567 ;;
  6568                           
  6569                           
  6570                           ;psect for function _fround
  6571  0E9B                     _fround:	
  6572                           
  6573                           ;incstack = 0
  6574                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6575                           ;fround@prec stored from wreg
  6576  0E9B  0020               	movlb	0	; select bank0
  6577  0E9C  00C8               	movwf	fround@prec
  6578                           
  6579                           ;doprnt.c: 413: if(prec>=110)
  6580  0E9D  306E               	movlw	110
  6581  0E9E  0248               	subwf	fround@prec,w
  6582  0E9F  1C03               	skipc
  6583  0EA0  2F5B               	goto	l3206
  6584                           
  6585                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6586  0EA1  300A               	movlw	10
  6587  0EA2  00F8               	movwf	___awdiv@divisor
  6588  0EA3  3000               	movlw	0
  6589  0EA4  00F9               	movwf	___awdiv@divisor+1
  6590  0EA5  0848               	movf	fround@prec,w
  6591  0EA6  00BE               	movwf	??_fround
  6592  0EA7  01BF               	clrf	??_fround+1
  6593  0EA8  083E               	movf	??_fround,w
  6594  0EA9  00F3               	movwf	___awmod@dividend
  6595  0EAA  083F               	movf	??_fround+1,w
  6596  0EAB  00F4               	movwf	___awmod@dividend+1
  6597  0EAC  3064               	movlw	100
  6598  0EAD  00F1               	movwf	___awmod@divisor
  6599  0EAE  3000               	movlw	0
  6600  0EAF  00F2               	movwf	___awmod@divisor+1
  6601  0EB0  3188  205C  318E   	fcall	___awmod
  6602  0EB3  0872               	movf	?___awmod+1,w
  6603  0EB4  00FB               	movwf	___awdiv@dividend+1
  6604  0EB5  0871               	movf	?___awmod,w
  6605  0EB6  00FA               	movwf	___awdiv@dividend
  6606  0EB7  3188  20A1  318E   	fcall	___awdiv
  6607  0EBA  0878               	movf	?___awdiv,w
  6608  0EBB  3E09               	addlw	9
  6609  0EBC  0020               	movlb	0	; select bank0
  6610  0EBD  00A5               	movwf	___wmul@multiplier
  6611  0EBE  3000               	movlw	0
  6612  0EBF  3D79               	addwfc	?___awdiv+1,w
  6613  0EC0  00A6               	movwf	___wmul@multiplier+1
  6614  0EC1  3003               	movlw	3
  6615  0EC2  00A7               	movwf	___wmul@multiplicand
  6616  0EC3  3000               	movlw	0
  6617  0EC4  00A8               	movwf	___wmul@multiplicand+1
  6618  0EC5  3196  2654  318E   	fcall	___wmul
  6619  0EC8  0020               	movlb	0	; select bank0
  6620  0EC9  0826               	movf	?___wmul+1,w
  6621  0ECA  0085               	movwf	5
  6622  0ECB  0825               	movf	?___wmul,w
  6623  0ECC  0084               	movwf	4
  6624  0ECD  3028               	movlw	low (__npowers_| (0+32768))
  6625  0ECE  0784               	addwf	4,f
  6626  0ECF  3090               	movlw	high (__npowers_| (0+32768))
  6627  0ED0  3D85               	addwfc	5,f
  6628  0ED1  3F00               	moviw [0]fsr0
  6629  0ED2  00AB               	movwf	___ftmul@f1
  6630  0ED3  3F01               	moviw [1]fsr0
  6631  0ED4  00AC               	movwf	___ftmul@f1+1
  6632  0ED5  3F02               	moviw [2]fsr0
  6633  0ED6  00AD               	movwf	___ftmul@f1+2
  6634  0ED7  3064               	movlw	100
  6635  0ED8  00F8               	movwf	___awdiv@divisor
  6636  0ED9  3000               	movlw	0
  6637  0EDA  00F9               	movwf	___awdiv@divisor+1
  6638  0EDB  0848               	movf	fround@prec,w
  6639  0EDC  00C0               	movwf	??_fround+2
  6640  0EDD  01C1               	clrf	??_fround+3
  6641  0EDE  0840               	movf	??_fround+2,w
  6642  0EDF  00FA               	movwf	___awdiv@dividend
  6643  0EE0  0841               	movf	??_fround+3,w
  6644  0EE1  00FB               	movwf	___awdiv@dividend+1
  6645  0EE2  3188  20A1  318E   	fcall	___awdiv
  6646  0EE5  0878               	movf	?___awdiv,w
  6647  0EE6  3E12               	addlw	18
  6648  0EE7  0020               	movlb	0	; select bank0
  6649  0EE8  00A5               	movwf	___wmul@multiplier
  6650  0EE9  3000               	movlw	0
  6651  0EEA  3D79               	addwfc	?___awdiv+1,w
  6652  0EEB  00A6               	movwf	___wmul@multiplier+1
  6653  0EEC  3003               	movlw	3
  6654  0EED  00A7               	movwf	___wmul@multiplicand
  6655  0EEE  3000               	movlw	0
  6656  0EEF  00A8               	movwf	___wmul@multiplicand+1
  6657  0EF0  3196  2654  318E   	fcall	___wmul
  6658  0EF3  0020               	movlb	0	; select bank0
  6659  0EF4  0826               	movf	?___wmul+1,w
  6660  0EF5  0085               	movwf	5
  6661  0EF6  0825               	movf	?___wmul,w
  6662  0EF7  0084               	movwf	4
  6663  0EF8  3028               	movlw	low (__npowers_| (0+32768))
  6664  0EF9  0784               	addwf	4,f
  6665  0EFA  3090               	movlw	high (__npowers_| (0+32768))
  6666  0EFB  3D85               	addwfc	5,f
  6667  0EFC  3F00               	moviw [0]fsr0
  6668  0EFD  00AE               	movwf	___ftmul@f2
  6669  0EFE  3F01               	moviw [1]fsr0
  6670  0EFF  00AF               	movwf	___ftmul@f2+1
  6671  0F00  3F02               	moviw [2]fsr0
  6672  0F01  00B0               	movwf	___ftmul@f2+2
  6673  0F02  318A  2231  318E   	fcall	___ftmul
  6674  0F05  0020               	movlb	0	; select bank0
  6675  0F06  082B               	movf	?___ftmul,w
  6676  0F07  00C5               	movwf	_fround$1237
  6677  0F08  082C               	movf	?___ftmul+1,w
  6678  0F09  00C6               	movwf	_fround$1237+1
  6679  0F0A  082D               	movf	?___ftmul+2,w
  6680  0F0B  00C7               	movwf	_fround$1237+2
  6681                           
  6682                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6683  0F0C  0848               	movf	fround@prec,w
  6684  0F0D  00BE               	movwf	??_fround
  6685  0F0E  01BF               	clrf	??_fround+1
  6686  0F0F  083E               	movf	??_fround,w
  6687  0F10  00F3               	movwf	___awmod@dividend
  6688  0F11  083F               	movf	??_fround+1,w
  6689  0F12  00F4               	movwf	___awmod@dividend+1
  6690  0F13  300A               	movlw	10
  6691  0F14  00F1               	movwf	___awmod@divisor
  6692  0F15  3000               	movlw	0
  6693  0F16  00F2               	movwf	___awmod@divisor+1
  6694  0F17  3188  205C  318E   	fcall	___awmod
  6695  0F1A  0872               	movf	?___awmod+1,w
  6696  0F1B  0020               	movlb	0	; select bank0
  6697  0F1C  00A6               	movwf	___wmul@multiplier+1
  6698  0F1D  0871               	movf	?___awmod,w
  6699  0F1E  00A5               	movwf	___wmul@multiplier
  6700  0F1F  3003               	movlw	3
  6701  0F20  00A7               	movwf	___wmul@multiplicand
  6702  0F21  3000               	movlw	0
  6703  0F22  00A8               	movwf	___wmul@multiplicand+1
  6704  0F23  3196  2654  318E   	fcall	___wmul
  6705  0F26  0020               	movlb	0	; select bank0
  6706  0F27  0826               	movf	?___wmul+1,w
  6707  0F28  0085               	movwf	5
  6708  0F29  0825               	movf	?___wmul,w
  6709  0F2A  0084               	movwf	4
  6710  0F2B  3028               	movlw	low (__npowers_| (0+32768))
  6711  0F2C  0784               	addwf	4,f
  6712  0F2D  3090               	movlw	high (__npowers_| (0+32768))
  6713  0F2E  3D85               	addwfc	5,f
  6714  0F2F  3F00               	moviw [0]fsr0
  6715  0F30  00AB               	movwf	___ftmul@f1
  6716  0F31  3F01               	moviw [1]fsr0
  6717  0F32  00AC               	movwf	___ftmul@f1+1
  6718  0F33  3F02               	moviw [2]fsr0
  6719  0F34  00AD               	movwf	___ftmul@f1+2
  6720  0F35  0845               	movf	_fround$1237,w
  6721  0F36  00AE               	movwf	___ftmul@f2
  6722  0F37  0846               	movf	_fround$1237+1,w
  6723  0F38  00AF               	movwf	___ftmul@f2+1
  6724  0F39  0847               	movf	_fround$1237+2,w
  6725  0F3A  00B0               	movwf	___ftmul@f2+2
  6726  0F3B  318A  2231  318E   	fcall	___ftmul
  6727  0F3E  0020               	movlb	0	; select bank0
  6728  0F3F  082B               	movf	?___ftmul,w
  6729  0F40  00C2               	movwf	_fround$1238
  6730  0F41  082C               	movf	?___ftmul+1,w
  6731  0F42  00C3               	movwf	_fround$1238+1
  6732  0F43  082D               	movf	?___ftmul+2,w
  6733  0F44  00C4               	movwf	_fround$1238+2
  6734                           
  6735                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6736  0F45  3000               	movlw	0
  6737  0F46  00AB               	movwf	___ftmul@f1
  6738  0F47  3000               	movlw	0
  6739  0F48  00AC               	movwf	___ftmul@f1+1
  6740  0F49  303F               	movlw	63
  6741  0F4A  00AD               	movwf	___ftmul@f1+2
  6742  0F4B  0842               	movf	_fround$1238,w
  6743  0F4C  00AE               	movwf	___ftmul@f2
  6744  0F4D  0843               	movf	_fround$1238+1,w
  6745  0F4E  00AF               	movwf	___ftmul@f2+1
  6746  0F4F  0844               	movf	_fround$1238+2,w
  6747  0F50  00B0               	movwf	___ftmul@f2+2
  6748  0F51  318A  2231         	fcall	___ftmul
  6749  0F53  0020               	movlb	0	; select bank0
  6750  0F54  082B               	movf	?___ftmul,w
  6751  0F55  00BB               	movwf	?_fround
  6752  0F56  082C               	movf	?___ftmul+1,w
  6753  0F57  00BC               	movwf	?_fround+1
  6754  0F58  082D               	movf	?___ftmul+2,w
  6755  0F59  00BD               	movwf	?_fround+2
  6756  0F5A  0008               	return
  6757  0F5B                     l3206:	
  6758                           
  6759                           ;doprnt.c: 415: else if(prec > 10)
  6760  0F5B  300B               	movlw	11
  6761  0F5C  0248               	subwf	fround@prec,w
  6762  0F5D  1C03               	skipc
  6763  0F5E  2FD3               	goto	l3214
  6764                           
  6765                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6766  0F5F  0848               	movf	fround@prec,w
  6767  0F60  00BE               	movwf	??_fround
  6768  0F61  01BF               	clrf	??_fround+1
  6769  0F62  083E               	movf	??_fround,w
  6770  0F63  00F3               	movwf	___awmod@dividend
  6771  0F64  083F               	movf	??_fround+1,w
  6772  0F65  00F4               	movwf	___awmod@dividend+1
  6773  0F66  300A               	movlw	10
  6774  0F67  00F1               	movwf	___awmod@divisor
  6775  0F68  3000               	movlw	0
  6776  0F69  00F2               	movwf	___awmod@divisor+1
  6777  0F6A  3188  205C  318E   	fcall	___awmod
  6778  0F6D  0872               	movf	?___awmod+1,w
  6779  0F6E  0020               	movlb	0	; select bank0
  6780  0F6F  00A6               	movwf	___wmul@multiplier+1
  6781  0F70  0871               	movf	?___awmod,w
  6782  0F71  00A5               	movwf	___wmul@multiplier
  6783  0F72  3003               	movlw	3
  6784  0F73  00A7               	movwf	___wmul@multiplicand
  6785  0F74  3000               	movlw	0
  6786  0F75  00A8               	movwf	___wmul@multiplicand+1
  6787  0F76  3196  2654  318E   	fcall	___wmul
  6788  0F79  0020               	movlb	0	; select bank0
  6789  0F7A  0826               	movf	?___wmul+1,w
  6790  0F7B  0085               	movwf	5
  6791  0F7C  0825               	movf	?___wmul,w
  6792  0F7D  0084               	movwf	4
  6793  0F7E  3028               	movlw	low (__npowers_| (0+32768))
  6794  0F7F  0784               	addwf	4,f
  6795  0F80  3090               	movlw	high (__npowers_| (0+32768))
  6796  0F81  3D85               	addwfc	5,f
  6797  0F82  3F00               	moviw [0]fsr0
  6798  0F83  00AB               	movwf	___ftmul@f1
  6799  0F84  3F01               	moviw [1]fsr0
  6800  0F85  00AC               	movwf	___ftmul@f1+1
  6801  0F86  3F02               	moviw [2]fsr0
  6802  0F87  00AD               	movwf	___ftmul@f1+2
  6803  0F88  300A               	movlw	10
  6804  0F89  00F8               	movwf	___awdiv@divisor
  6805  0F8A  3000               	movlw	0
  6806  0F8B  00F9               	movwf	___awdiv@divisor+1
  6807  0F8C  0848               	movf	fround@prec,w
  6808  0F8D  00C0               	movwf	??_fround+2
  6809  0F8E  01C1               	clrf	??_fround+3
  6810  0F8F  0840               	movf	??_fround+2,w
  6811  0F90  00FA               	movwf	___awdiv@dividend
  6812  0F91  0841               	movf	??_fround+3,w
  6813  0F92  00FB               	movwf	___awdiv@dividend+1
  6814  0F93  3188  20A1  318E   	fcall	___awdiv
  6815  0F96  0878               	movf	?___awdiv,w
  6816  0F97  3E09               	addlw	9
  6817  0F98  0020               	movlb	0	; select bank0
  6818  0F99  00A5               	movwf	___wmul@multiplier
  6819  0F9A  3000               	movlw	0
  6820  0F9B  3D79               	addwfc	?___awdiv+1,w
  6821  0F9C  00A6               	movwf	___wmul@multiplier+1
  6822  0F9D  3003               	movlw	3
  6823  0F9E  00A7               	movwf	___wmul@multiplicand
  6824  0F9F  3000               	movlw	0
  6825  0FA0  00A8               	movwf	___wmul@multiplicand+1
  6826  0FA1  3196  2654  318E   	fcall	___wmul
  6827  0FA4  0020               	movlb	0	; select bank0
  6828  0FA5  0826               	movf	?___wmul+1,w
  6829  0FA6  0085               	movwf	5
  6830  0FA7  0825               	movf	?___wmul,w
  6831  0FA8  0084               	movwf	4
  6832  0FA9  3028               	movlw	low (__npowers_| (0+32768))
  6833  0FAA  0784               	addwf	4,f
  6834  0FAB  3090               	movlw	high (__npowers_| (0+32768))
  6835  0FAC  3D85               	addwfc	5,f
  6836  0FAD  3F00               	moviw [0]fsr0
  6837  0FAE  00AE               	movwf	___ftmul@f2
  6838  0FAF  3F01               	moviw [1]fsr0
  6839  0FB0  00AF               	movwf	___ftmul@f2+1
  6840  0FB1  3F02               	moviw [2]fsr0
  6841  0FB2  00B0               	movwf	___ftmul@f2+2
  6842  0FB3  318A  2231  318E   	fcall	___ftmul
  6843  0FB6  0020               	movlb	0	; select bank0
  6844  0FB7  082B               	movf	?___ftmul,w
  6845  0FB8  00C5               	movwf	_fround$1237
  6846  0FB9  082C               	movf	?___ftmul+1,w
  6847  0FBA  00C6               	movwf	_fround$1237+1
  6848  0FBB  082D               	movf	?___ftmul+2,w
  6849  0FBC  00C7               	movwf	_fround$1237+2
  6850                           
  6851                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6852  0FBD  3000               	movlw	0
  6853  0FBE  00AB               	movwf	___ftmul@f1
  6854  0FBF  3000               	movlw	0
  6855  0FC0  00AC               	movwf	___ftmul@f1+1
  6856  0FC1  303F               	movlw	63
  6857  0FC2  00AD               	movwf	___ftmul@f1+2
  6858  0FC3  0845               	movf	_fround$1237,w
  6859  0FC4  00AE               	movwf	___ftmul@f2
  6860  0FC5  0846               	movf	_fround$1237+1,w
  6861  0FC6  00AF               	movwf	___ftmul@f2+1
  6862  0FC7  0847               	movf	_fround$1237+2,w
  6863  0FC8  00B0               	movwf	___ftmul@f2+2
  6864  0FC9  318A  2231         	fcall	___ftmul
  6865  0FCB  0020               	movlb	0	; select bank0
  6866  0FCC  082B               	movf	?___ftmul,w
  6867  0FCD  00BB               	movwf	?_fround
  6868  0FCE  082C               	movf	?___ftmul+1,w
  6869  0FCF  00BC               	movwf	?_fround+1
  6870  0FD0  082D               	movf	?___ftmul+2,w
  6871  0FD1  00BD               	movwf	?_fround+2
  6872  0FD2  0008               	return
  6873  0FD3                     l3214:	
  6874                           
  6875                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  6876  0FD3  3000               	movlw	0
  6877  0FD4  00AB               	movwf	___ftmul@f1
  6878  0FD5  3000               	movlw	0
  6879  0FD6  00AC               	movwf	___ftmul@f1+1
  6880  0FD7  303F               	movlw	63
  6881  0FD8  00AD               	movwf	___ftmul@f1+2
  6882  0FD9  0848               	movf	fround@prec,w
  6883  0FDA  00BE               	movwf	??_fround
  6884  0FDB  01BF               	clrf	??_fround+1
  6885  0FDC  083E               	movf	??_fround,w
  6886  0FDD  00A5               	movwf	___wmul@multiplier
  6887  0FDE  083F               	movf	??_fround+1,w
  6888  0FDF  00A6               	movwf	___wmul@multiplier+1
  6889  0FE0  3003               	movlw	3
  6890  0FE1  00A7               	movwf	___wmul@multiplicand
  6891  0FE2  3000               	movlw	0
  6892  0FE3  00A8               	movwf	___wmul@multiplicand+1
  6893  0FE4  3196  2654  318E   	fcall	___wmul
  6894  0FE7  0020               	movlb	0	; select bank0
  6895  0FE8  0826               	movf	?___wmul+1,w
  6896  0FE9  0085               	movwf	5
  6897  0FEA  0825               	movf	?___wmul,w
  6898  0FEB  0084               	movwf	4
  6899  0FEC  3028               	movlw	low (__npowers_| (0+32768))
  6900  0FED  0784               	addwf	4,f
  6901  0FEE  3090               	movlw	high (__npowers_| (0+32768))
  6902  0FEF  3D85               	addwfc	5,f
  6903  0FF0  3F00               	moviw [0]fsr0
  6904  0FF1  00AE               	movwf	___ftmul@f2
  6905  0FF2  3F01               	moviw [1]fsr0
  6906  0FF3  00AF               	movwf	___ftmul@f2+1
  6907  0FF4  3F02               	moviw [2]fsr0
  6908  0FF5  00B0               	movwf	___ftmul@f2+2
  6909  0FF6  318A  2231         	fcall	___ftmul
  6910  0FF8  0020               	movlb	0	; select bank0
  6911  0FF9  082B               	movf	?___ftmul,w
  6912  0FFA  00BB               	movwf	?_fround
  6913  0FFB  082C               	movf	?___ftmul+1,w
  6914  0FFC  00BC               	movwf	?_fround+1
  6915  0FFD  082D               	movf	?___ftmul+2,w
  6916  0FFE  00BD               	movwf	?_fround+2
  6917  0FFF  0008               	return
  6918  1000                     __end_of_fround:	
  6919                           
  6920                           	psect	text29
  6921  1654                     __ptext29:	
  6922 ;; *************** function ___wmul *****************
  6923 ;; Defined at:
  6924 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  6925 ;; Parameters:    Size  Location     Type
  6926 ;;  multiplier      2    5[BANK0 ] unsigned int 
  6927 ;;  multiplicand    2    7[BANK0 ] unsigned int 
  6928 ;; Auto vars:     Size  Location     Type
  6929 ;;  product         2    9[BANK0 ] unsigned int 
  6930 ;; Return value:  Size  Location     Type
  6931 ;;                  2    5[BANK0 ] unsigned int 
  6932 ;; Registers used:
  6933 ;;		wreg, status,2, status,0
  6934 ;; Tracked objects:
  6935 ;;		On entry : 0/0
  6936 ;;		On exit  : 0/0
  6937 ;;		Unchanged: 0/0
  6938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6939 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6940 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6942 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6943 ;;Total ram usage:        6 bytes
  6944 ;; Hardware stack levels used:    1
  6945 ;; Hardware stack levels required when called:    2
  6946 ;; This function calls:
  6947 ;;		Nothing
  6948 ;; This function is called by:
  6949 ;;		_fround
  6950 ;;		_scale
  6951 ;;		_printf
  6952 ;; This function uses a non-reentrant model
  6953 ;;
  6954                           
  6955                           
  6956                           ;psect for function ___wmul
  6957  1654                     ___wmul:	
  6958                           
  6959                           ;incstack = 0
  6960                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6961  1654  0020               	movlb	0	; select bank0
  6962  1655  01A9               	clrf	___wmul@product
  6963  1656  01AA               	clrf	___wmul@product+1
  6964  1657                     l2980:	
  6965  1657  1C25               	btfss	___wmul@multiplier,0
  6966  1658  2E5D               	goto	l458
  6967  1659  0827               	movf	___wmul@multiplicand,w
  6968  165A  07A9               	addwf	___wmul@product,f
  6969  165B  0828               	movf	___wmul@multiplicand+1,w
  6970  165C  3DAA               	addwfc	___wmul@product+1,f
  6971  165D                     l458:	
  6972  165D  3001               	movlw	1
  6973  165E                     u4295:	
  6974  165E  35A7               	lslf	___wmul@multiplicand,f
  6975  165F  0DA8               	rlf	___wmul@multiplicand+1,f
  6976  1660  0B89               	decfsz	9,f
  6977  1661  2E5E               	goto	u4295
  6978  1662  3001               	movlw	1
  6979  1663                     u4305:	
  6980  1663  36A6               	lsrf	___wmul@multiplier+1,f
  6981  1664  0CA5               	rrf	___wmul@multiplier,f
  6982  1665  0B89               	decfsz	9,f
  6983  1666  2E63               	goto	u4305
  6984  1667  0825               	movf	___wmul@multiplier,w
  6985  1668  0426               	iorwf	___wmul@multiplier+1,w
  6986  1669  1D03               	btfss	3,2
  6987  166A  2E57               	goto	l2980
  6988  166B  082A               	movf	___wmul@product+1,w
  6989  166C  00A6               	movwf	?___wmul+1
  6990  166D  0829               	movf	___wmul@product,w
  6991  166E  00A5               	movwf	?___wmul
  6992  166F  0008               	return
  6993  1670                     __end_of___wmul:	
  6994                           
  6995                           	psect	text30
  6996  0A31                     __ptext30:	
  6997 ;; *************** function ___ftmul *****************
  6998 ;; Defined at:
  6999 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
  7000 ;; Parameters:    Size  Location     Type
  7001 ;;  f1              3   11[BANK0 ] float 
  7002 ;;  f2              3   14[BANK0 ] float 
  7003 ;; Auto vars:     Size  Location     Type
  7004 ;;  f3_as_produc    3   22[BANK0 ] unsigned um
  7005 ;;  sign            1   26[BANK0 ] unsigned char 
  7006 ;;  cntr            1   25[BANK0 ] unsigned char 
  7007 ;;  exp             1   21[BANK0 ] unsigned char 
  7008 ;; Return value:  Size  Location     Type
  7009 ;;                  3   11[BANK0 ] float 
  7010 ;; Registers used:
  7011 ;;		wreg, status,2, status,0, pclath, cstack
  7012 ;; Tracked objects:
  7013 ;;		On entry : 0/0
  7014 ;;		On exit  : 0/0
  7015 ;;		Unchanged: 0/0
  7016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7017 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7018 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7019 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7020 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7021 ;;Total ram usage:       16 bytes
  7022 ;; Hardware stack levels used:    1
  7023 ;; Hardware stack levels required when called:    3
  7024 ;; This function calls:
  7025 ;;		___ftpack
  7026 ;; This function is called by:
  7027 ;;		_RadioOperation
  7028 ;;		_fround
  7029 ;;		_scale
  7030 ;;		_printf
  7031 ;; This function uses a non-reentrant model
  7032 ;;
  7033                           
  7034                           
  7035                           ;psect for function ___ftmul
  7036  0A31                     ___ftmul:	
  7037                           
  7038                           ;incstack = 0
  7039                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7040  0A31  0020               	movlb	0	; select bank0
  7041  0A32  082B               	movf	___ftmul@f1,w
  7042  0A33  00B1               	movwf	??___ftmul
  7043  0A34  082C               	movf	___ftmul@f1+1,w
  7044  0A35  00B2               	movwf	??___ftmul+1
  7045  0A36  082D               	movf	___ftmul@f1+2,w
  7046  0A37  00B3               	movwf	??___ftmul+2
  7047  0A38  1003               	clrc
  7048  0A39  0D32               	rlf	??___ftmul+1,w
  7049  0A3A  0D33               	rlf	??___ftmul+2,w
  7050  0A3B  00B4               	movwf	??___ftmul+3
  7051  0A3C  0834               	movf	??___ftmul+3,w
  7052  0A3D  00B5               	movwf	___ftmul@exp
  7053  0A3E  0835               	movf	___ftmul@exp,w
  7054  0A3F  1D03               	btfss	3,2
  7055  0A40  2A48               	goto	l3150
  7056  0A41  3000               	movlw	0
  7057  0A42  00AB               	movwf	?___ftmul
  7058  0A43  3000               	movlw	0
  7059  0A44  00AC               	movwf	?___ftmul+1
  7060  0A45  3000               	movlw	0
  7061  0A46  00AD               	movwf	?___ftmul+2
  7062  0A47  0008               	return
  7063  0A48                     l3150:	
  7064  0A48  082E               	movf	___ftmul@f2,w
  7065  0A49  00B1               	movwf	??___ftmul
  7066  0A4A  082F               	movf	___ftmul@f2+1,w
  7067  0A4B  00B2               	movwf	??___ftmul+1
  7068  0A4C  0830               	movf	___ftmul@f2+2,w
  7069  0A4D  00B3               	movwf	??___ftmul+2
  7070  0A4E  1003               	clrc
  7071  0A4F  0D32               	rlf	??___ftmul+1,w
  7072  0A50  0D33               	rlf	??___ftmul+2,w
  7073  0A51  00B4               	movwf	??___ftmul+3
  7074  0A52  0834               	movf	??___ftmul+3,w
  7075  0A53  00BA               	movwf	___ftmul@sign
  7076  0A54  083A               	movf	___ftmul@sign,w
  7077  0A55  1D03               	btfss	3,2
  7078  0A56  2A5E               	goto	l3156
  7079  0A57  3000               	movlw	0
  7080  0A58  00AB               	movwf	?___ftmul
  7081  0A59  3000               	movlw	0
  7082  0A5A  00AC               	movwf	?___ftmul+1
  7083  0A5B  3000               	movlw	0
  7084  0A5C  00AD               	movwf	?___ftmul+2
  7085  0A5D  0008               	return
  7086  0A5E                     l3156:	
  7087  0A5E  083A               	movf	___ftmul@sign,w
  7088  0A5F  3E7B               	addlw	123
  7089  0A60  00B1               	movwf	??___ftmul
  7090  0A61  0831               	movf	??___ftmul,w
  7091  0A62  07B5               	addwf	___ftmul@exp,f
  7092  0A63  082B               	movf	___ftmul@f1,w
  7093  0A64  00B1               	movwf	??___ftmul
  7094  0A65  082C               	movf	___ftmul@f1+1,w
  7095  0A66  00B2               	movwf	??___ftmul+1
  7096  0A67  082D               	movf	___ftmul@f1+2,w
  7097  0A68  00B3               	movwf	??___ftmul+2
  7098  0A69  3010               	movlw	16
  7099  0A6A                     u4765:	
  7100  0A6A  36B3               	lsrf	??___ftmul+2,f
  7101  0A6B  0CB2               	rrf	??___ftmul+1,f
  7102  0A6C  0CB1               	rrf	??___ftmul,f
  7103  0A6D  0B89               	decfsz	9,f
  7104  0A6E  2A6A               	goto	u4765
  7105  0A6F  0831               	movf	??___ftmul,w
  7106  0A70  00B4               	movwf	??___ftmul+3
  7107  0A71  0834               	movf	??___ftmul+3,w
  7108  0A72  00BA               	movwf	___ftmul@sign
  7109  0A73  082E               	movf	___ftmul@f2,w
  7110  0A74  00B1               	movwf	??___ftmul
  7111  0A75  082F               	movf	___ftmul@f2+1,w
  7112  0A76  00B2               	movwf	??___ftmul+1
  7113  0A77  0830               	movf	___ftmul@f2+2,w
  7114  0A78  00B3               	movwf	??___ftmul+2
  7115  0A79  3010               	movlw	16
  7116  0A7A                     u4775:	
  7117  0A7A  36B3               	lsrf	??___ftmul+2,f
  7118  0A7B  0CB2               	rrf	??___ftmul+1,f
  7119  0A7C  0CB1               	rrf	??___ftmul,f
  7120  0A7D  0B89               	decfsz	9,f
  7121  0A7E  2A7A               	goto	u4775
  7122  0A7F  0831               	movf	??___ftmul,w
  7123  0A80  00B4               	movwf	??___ftmul+3
  7124  0A81  0834               	movf	??___ftmul+3,w
  7125  0A82  06BA               	xorwf	___ftmul@sign,f
  7126  0A83  3080               	movlw	128
  7127  0A84  00B1               	movwf	??___ftmul
  7128  0A85  0831               	movf	??___ftmul,w
  7129  0A86  05BA               	andwf	___ftmul@sign,f
  7130  0A87  17AC               	bsf	___ftmul@f1+1,7
  7131  0A88  17AF               	bsf	___ftmul@f2+1,7
  7132  0A89  30FF               	movlw	255
  7133  0A8A  05AE               	andwf	___ftmul@f2,f
  7134  0A8B  30FF               	movlw	255
  7135  0A8C  05AF               	andwf	___ftmul@f2+1,f
  7136  0A8D  3000               	movlw	0
  7137  0A8E  05B0               	andwf	___ftmul@f2+2,f
  7138  0A8F  3000               	movlw	0
  7139  0A90  00B6               	movwf	___ftmul@f3_as_product
  7140  0A91  3000               	movlw	0
  7141  0A92  00B7               	movwf	___ftmul@f3_as_product+1
  7142  0A93  3000               	movlw	0
  7143  0A94  00B8               	movwf	___ftmul@f3_as_product+2
  7144  0A95  3007               	movlw	7
  7145  0A96  00B1               	movwf	??___ftmul
  7146  0A97  0831               	movf	??___ftmul,w
  7147  0A98  00B9               	movwf	___ftmul@cntr
  7148  0A99                     l3168:	
  7149  0A99  1C2B               	btfss	___ftmul@f1,0
  7150  0A9A  2AA1               	goto	l3172
  7151  0A9B  082E               	movf	___ftmul@f2,w
  7152  0A9C  07B6               	addwf	___ftmul@f3_as_product,f
  7153  0A9D  082F               	movf	___ftmul@f2+1,w
  7154  0A9E  3DB7               	addwfc	___ftmul@f3_as_product+1,f
  7155  0A9F  0830               	movf	___ftmul@f2+2,w
  7156  0AA0  3DB8               	addwfc	___ftmul@f3_as_product+2,f
  7157  0AA1                     l3172:	
  7158  0AA1  3001               	movlw	1
  7159  0AA2                     u4795:	
  7160  0AA2  36AD               	lsrf	___ftmul@f1+2,f
  7161  0AA3  0CAC               	rrf	___ftmul@f1+1,f
  7162  0AA4  0CAB               	rrf	___ftmul@f1,f
  7163  0AA5  0B89               	decfsz	9,f
  7164  0AA6  2AA2               	goto	u4795
  7165  0AA7  3001               	movlw	1
  7166  0AA8                     u4805:	
  7167  0AA8  35AE               	lslf	___ftmul@f2,f
  7168  0AA9  0DAF               	rlf	___ftmul@f2+1,f
  7169  0AAA  0DB0               	rlf	___ftmul@f2+2,f
  7170  0AAB  0B89               	decfsz	9,f
  7171  0AAC  2AA8               	goto	u4805
  7172  0AAD  3001               	movlw	1
  7173  0AAE  02B9               	subwf	___ftmul@cntr,f
  7174  0AAF  1D03               	btfss	3,2
  7175  0AB0  2A99               	goto	l3168
  7176  0AB1  3009               	movlw	9
  7177  0AB2  00B1               	movwf	??___ftmul
  7178  0AB3  0831               	movf	??___ftmul,w
  7179  0AB4  00B9               	movwf	___ftmul@cntr
  7180  0AB5                     l3180:	
  7181  0AB5  1C2B               	btfss	___ftmul@f1,0
  7182  0AB6  2ABD               	goto	l3184
  7183  0AB7  082E               	movf	___ftmul@f2,w
  7184  0AB8  07B6               	addwf	___ftmul@f3_as_product,f
  7185  0AB9  082F               	movf	___ftmul@f2+1,w
  7186  0ABA  3DB7               	addwfc	___ftmul@f3_as_product+1,f
  7187  0ABB  0830               	movf	___ftmul@f2+2,w
  7188  0ABC  3DB8               	addwfc	___ftmul@f3_as_product+2,f
  7189  0ABD                     l3184:	
  7190  0ABD  3001               	movlw	1
  7191  0ABE                     u4835:	
  7192  0ABE  36AD               	lsrf	___ftmul@f1+2,f
  7193  0ABF  0CAC               	rrf	___ftmul@f1+1,f
  7194  0AC0  0CAB               	rrf	___ftmul@f1,f
  7195  0AC1  0B89               	decfsz	9,f
  7196  0AC2  2ABE               	goto	u4835
  7197  0AC3  3001               	movlw	1
  7198  0AC4                     u4845:	
  7199  0AC4  36B8               	lsrf	___ftmul@f3_as_product+2,f
  7200  0AC5  0CB7               	rrf	___ftmul@f3_as_product+1,f
  7201  0AC6  0CB6               	rrf	___ftmul@f3_as_product,f
  7202  0AC7  0B89               	decfsz	9,f
  7203  0AC8  2AC4               	goto	u4845
  7204  0AC9  3001               	movlw	1
  7205  0ACA  02B9               	subwf	___ftmul@cntr,f
  7206  0ACB  1D03               	btfss	3,2
  7207  0ACC  2AB5               	goto	l3180
  7208  0ACD  0836               	movf	___ftmul@f3_as_product,w
  7209  0ACE  00F1               	movwf	___ftpack@arg
  7210  0ACF  0837               	movf	___ftmul@f3_as_product+1,w
  7211  0AD0  00F2               	movwf	___ftpack@arg+1
  7212  0AD1  0838               	movf	___ftmul@f3_as_product+2,w
  7213  0AD2  00F3               	movwf	___ftpack@arg+2
  7214  0AD3  0835               	movf	___ftmul@exp,w
  7215  0AD4  00B1               	movwf	??___ftmul
  7216  0AD5  0831               	movf	??___ftmul,w
  7217  0AD6  00F4               	movwf	___ftpack@exp
  7218  0AD7  083A               	movf	___ftmul@sign,w
  7219  0AD8  00B2               	movwf	??___ftmul+1
  7220  0AD9  0832               	movf	??___ftmul+1,w
  7221  0ADA  00F5               	movwf	___ftpack@sign
  7222  0ADB  3189  2146         	fcall	___ftpack
  7223  0ADD  0871               	movf	?___ftpack,w
  7224  0ADE  0020               	movlb	0	; select bank0
  7225  0ADF  00AB               	movwf	?___ftmul
  7226  0AE0  0872               	movf	?___ftpack+1,w
  7227  0AE1  00AC               	movwf	?___ftmul+1
  7228  0AE2  0873               	movf	?___ftpack+2,w
  7229  0AE3  00AD               	movwf	?___ftmul+2
  7230  0AE4  0008               	return
  7231  0AE5                     __end_of___ftmul:	
  7232                           
  7233                           	psect	text31
  7234  085C                     __ptext31:	
  7235 ;; *************** function ___awmod *****************
  7236 ;; Defined at:
  7237 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  7238 ;; Parameters:    Size  Location     Type
  7239 ;;  divisor         2    1[COMMON] int 
  7240 ;;  dividend        2    3[COMMON] int 
  7241 ;; Auto vars:     Size  Location     Type
  7242 ;;  sign            1    7[COMMON] unsigned char 
  7243 ;;  counter         1    6[COMMON] unsigned char 
  7244 ;; Return value:  Size  Location     Type
  7245 ;;                  2    1[COMMON] int 
  7246 ;; Registers used:
  7247 ;;		wreg, status,2, status,0
  7248 ;; Tracked objects:
  7249 ;;		On entry : 0/0
  7250 ;;		On exit  : 0/0
  7251 ;;		Unchanged: 0/0
  7252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7253 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7254 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7255 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7256 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7257 ;;Total ram usage:        7 bytes
  7258 ;; Hardware stack levels used:    1
  7259 ;; Hardware stack levels required when called:    2
  7260 ;; This function calls:
  7261 ;;		Nothing
  7262 ;; This function is called by:
  7263 ;;		_fround
  7264 ;;		_scale
  7265 ;; This function uses a non-reentrant model
  7266 ;;
  7267                           
  7268                           
  7269                           ;psect for function ___awmod
  7270  085C                     ___awmod:	
  7271                           
  7272                           ;incstack = 0
  7273                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  7274  085C  01F7               	clrf	___awmod@sign
  7275  085D  1FF4               	btfss	___awmod@dividend+1,7
  7276  085E  2866               	goto	l3044
  7277  085F  09F3               	comf	___awmod@dividend,f
  7278  0860  09F4               	comf	___awmod@dividend+1,f
  7279  0861  0AF3               	incf	___awmod@dividend,f
  7280  0862  1903               	skipnz
  7281  0863  0AF4               	incf	___awmod@dividend+1,f
  7282  0864  01F7               	clrf	___awmod@sign
  7283  0865  0AF7               	incf	___awmod@sign,f
  7284  0866                     l3044:	
  7285  0866  1FF2               	btfss	___awmod@divisor+1,7
  7286  0867  286D               	goto	l3048
  7287  0868  09F1               	comf	___awmod@divisor,f
  7288  0869  09F2               	comf	___awmod@divisor+1,f
  7289  086A  0AF1               	incf	___awmod@divisor,f
  7290  086B  1903               	skipnz
  7291  086C  0AF2               	incf	___awmod@divisor+1,f
  7292  086D                     l3048:	
  7293  086D  0871               	movf	___awmod@divisor,w
  7294  086E  0472               	iorwf	___awmod@divisor+1,w
  7295  086F  1903               	btfsc	3,2
  7296  0870  2894               	goto	l3066
  7297  0871  01F6               	clrf	___awmod@counter
  7298  0872  0AF6               	incf	___awmod@counter,f
  7299  0873                     l3056:	
  7300  0873  1BF2               	btfsc	___awmod@divisor+1,7
  7301  0874  287F               	goto	l3058
  7302  0875  3001               	movlw	1
  7303  0876                     u4455:	
  7304  0876  35F1               	lslf	___awmod@divisor,f
  7305  0877  0DF2               	rlf	___awmod@divisor+1,f
  7306  0878  0B89               	decfsz	9,f
  7307  0879  2876               	goto	u4455
  7308  087A  3001               	movlw	1
  7309  087B  00F5               	movwf	??___awmod
  7310  087C  0875               	movf	??___awmod,w
  7311  087D  07F6               	addwf	___awmod@counter,f
  7312  087E  2873               	goto	l3056
  7313  087F                     l3058:	
  7314  087F  0872               	movf	___awmod@divisor+1,w
  7315  0880  0274               	subwf	___awmod@dividend+1,w
  7316  0881  1D03               	skipz
  7317  0882  2885               	goto	u4475
  7318  0883  0871               	movf	___awmod@divisor,w
  7319  0884  0273               	subwf	___awmod@dividend,w
  7320  0885                     u4475:	
  7321  0885  1C03               	skipc
  7322  0886  288B               	goto	l3062
  7323  0887  0871               	movf	___awmod@divisor,w
  7324  0888  02F3               	subwf	___awmod@dividend,f
  7325  0889  0872               	movf	___awmod@divisor+1,w
  7326  088A  3BF4               	subwfb	___awmod@dividend+1,f
  7327  088B                     l3062:	
  7328  088B  3001               	movlw	1
  7329  088C                     u4485:	
  7330  088C  36F2               	lsrf	___awmod@divisor+1,f
  7331  088D  0CF1               	rrf	___awmod@divisor,f
  7332  088E  0B89               	decfsz	9,f
  7333  088F  288C               	goto	u4485
  7334  0890  3001               	movlw	1
  7335  0891  02F6               	subwf	___awmod@counter,f
  7336  0892  1D03               	btfss	3,2
  7337  0893  287F               	goto	l3058
  7338  0894                     l3066:	
  7339  0894  0877               	movf	___awmod@sign,w
  7340  0895  1903               	btfsc	3,2
  7341  0896  289C               	goto	l3070
  7342  0897  09F3               	comf	___awmod@dividend,f
  7343  0898  09F4               	comf	___awmod@dividend+1,f
  7344  0899  0AF3               	incf	___awmod@dividend,f
  7345  089A  1903               	skipnz
  7346  089B  0AF4               	incf	___awmod@dividend+1,f
  7347  089C                     l3070:	
  7348  089C  0874               	movf	___awmod@dividend+1,w
  7349  089D  00F2               	movwf	?___awmod+1
  7350  089E  0873               	movf	___awmod@dividend,w
  7351  089F  00F1               	movwf	?___awmod
  7352  08A0  0008               	return
  7353  08A1                     __end_of___awmod:	
  7354                           
  7355                           	psect	text32
  7356  08A1                     __ptext32:	
  7357 ;; *************** function ___awdiv *****************
  7358 ;; Defined at:
  7359 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  7360 ;; Parameters:    Size  Location     Type
  7361 ;;  divisor         2    8[COMMON] int 
  7362 ;;  dividend        2   10[COMMON] int 
  7363 ;; Auto vars:     Size  Location     Type
  7364 ;;  quotient        2    3[BANK0 ] int 
  7365 ;;  sign            1    2[BANK0 ] unsigned char 
  7366 ;;  counter         1    1[BANK0 ] unsigned char 
  7367 ;; Return value:  Size  Location     Type
  7368 ;;                  2    8[COMMON] int 
  7369 ;; Registers used:
  7370 ;;		wreg, status,2, status,0
  7371 ;; Tracked objects:
  7372 ;;		On entry : 0/0
  7373 ;;		On exit  : 0/0
  7374 ;;		Unchanged: 0/0
  7375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7376 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7377 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7378 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7379 ;;      Totals:         4       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7380 ;;Total ram usage:        9 bytes
  7381 ;; Hardware stack levels used:    1
  7382 ;; Hardware stack levels required when called:    2
  7383 ;; This function calls:
  7384 ;;		Nothing
  7385 ;; This function is called by:
  7386 ;;		_fround
  7387 ;;		_scale
  7388 ;;		_printf
  7389 ;; This function uses a non-reentrant model
  7390 ;;
  7391                           
  7392                           
  7393                           ;psect for function ___awdiv
  7394  08A1                     ___awdiv:	
  7395                           
  7396                           ;incstack = 0
  7397                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7398  08A1  0020               	movlb	0	; select bank0
  7399  08A2  01A2               	clrf	___awdiv@sign
  7400  08A3  1FF9               	btfss	___awdiv@divisor+1,7
  7401  08A4  28AC               	goto	l3000
  7402  08A5  09F8               	comf	___awdiv@divisor,f
  7403  08A6  09F9               	comf	___awdiv@divisor+1,f
  7404  08A7  0AF8               	incf	___awdiv@divisor,f
  7405  08A8  1903               	skipnz
  7406  08A9  0AF9               	incf	___awdiv@divisor+1,f
  7407  08AA  01A2               	clrf	___awdiv@sign
  7408  08AB  0AA2               	incf	___awdiv@sign,f
  7409  08AC                     l3000:	
  7410  08AC  1FFB               	btfss	___awdiv@dividend+1,7
  7411  08AD  28B7               	goto	l3006
  7412  08AE  09FA               	comf	___awdiv@dividend,f
  7413  08AF  09FB               	comf	___awdiv@dividend+1,f
  7414  08B0  0AFA               	incf	___awdiv@dividend,f
  7415  08B1  1903               	skipnz
  7416  08B2  0AFB               	incf	___awdiv@dividend+1,f
  7417  08B3  3001               	movlw	1
  7418  08B4  00A0               	movwf	??___awdiv
  7419  08B5  0820               	movf	??___awdiv,w
  7420  08B6  06A2               	xorwf	___awdiv@sign,f
  7421  08B7                     l3006:	
  7422  08B7  01A3               	clrf	___awdiv@quotient
  7423  08B8  01A4               	clrf	___awdiv@quotient+1
  7424  08B9  0878               	movf	___awdiv@divisor,w
  7425  08BA  0479               	iorwf	___awdiv@divisor+1,w
  7426  08BB  1903               	btfsc	3,2
  7427  08BC  28E6               	goto	l3028
  7428  08BD  01A1               	clrf	___awdiv@counter
  7429  08BE  0AA1               	incf	___awdiv@counter,f
  7430  08BF                     l3016:	
  7431  08BF  1BF9               	btfsc	___awdiv@divisor+1,7
  7432  08C0  28CB               	goto	l3018
  7433  08C1  3001               	movlw	1
  7434  08C2                     u4355:	
  7435  08C2  35F8               	lslf	___awdiv@divisor,f
  7436  08C3  0DF9               	rlf	___awdiv@divisor+1,f
  7437  08C4  0B89               	decfsz	9,f
  7438  08C5  28C2               	goto	u4355
  7439  08C6  3001               	movlw	1
  7440  08C7  00A0               	movwf	??___awdiv
  7441  08C8  0820               	movf	??___awdiv,w
  7442  08C9  07A1               	addwf	___awdiv@counter,f
  7443  08CA  28BF               	goto	l3016
  7444  08CB                     l3018:	
  7445  08CB  3001               	movlw	1
  7446  08CC                     u4375:	
  7447  08CC  35A3               	lslf	___awdiv@quotient,f
  7448  08CD  0DA4               	rlf	___awdiv@quotient+1,f
  7449  08CE  0B89               	decfsz	9,f
  7450  08CF  28CC               	goto	u4375
  7451  08D0  0879               	movf	___awdiv@divisor+1,w
  7452  08D1  027B               	subwf	___awdiv@dividend+1,w
  7453  08D2  1D03               	skipz
  7454  08D3  28D6               	goto	u4385
  7455  08D4  0878               	movf	___awdiv@divisor,w
  7456  08D5  027A               	subwf	___awdiv@dividend,w
  7457  08D6                     u4385:	
  7458  08D6  1C03               	skipc
  7459  08D7  28DD               	goto	l3024
  7460  08D8  0878               	movf	___awdiv@divisor,w
  7461  08D9  02FA               	subwf	___awdiv@dividend,f
  7462  08DA  0879               	movf	___awdiv@divisor+1,w
  7463  08DB  3BFB               	subwfb	___awdiv@dividend+1,f
  7464  08DC  1423               	bsf	___awdiv@quotient,0
  7465  08DD                     l3024:	
  7466  08DD  3001               	movlw	1
  7467  08DE                     u4395:	
  7468  08DE  36F9               	lsrf	___awdiv@divisor+1,f
  7469  08DF  0CF8               	rrf	___awdiv@divisor,f
  7470  08E0  0B89               	decfsz	9,f
  7471  08E1  28DE               	goto	u4395
  7472  08E2  3001               	movlw	1
  7473  08E3  02A1               	subwf	___awdiv@counter,f
  7474  08E4  1D03               	btfss	3,2
  7475  08E5  28CB               	goto	l3018
  7476  08E6                     l3028:	
  7477  08E6  0822               	movf	___awdiv@sign,w
  7478  08E7  1903               	btfsc	3,2
  7479  08E8  28EE               	goto	l3032
  7480  08E9  09A3               	comf	___awdiv@quotient,f
  7481  08EA  09A4               	comf	___awdiv@quotient+1,f
  7482  08EB  0AA3               	incf	___awdiv@quotient,f
  7483  08EC  1903               	skipnz
  7484  08ED  0AA4               	incf	___awdiv@quotient+1,f
  7485  08EE                     l3032:	
  7486  08EE  0824               	movf	___awdiv@quotient+1,w
  7487  08EF  00F9               	movwf	?___awdiv+1
  7488  08F0  0823               	movf	___awdiv@quotient,w
  7489  08F1  00F8               	movwf	?___awdiv
  7490  08F2  0008               	return
  7491  08F3                     __end_of___awdiv:	
  7492                           
  7493                           	psect	text33
  7494  0AE5                     __ptext33:	
  7495 ;; *************** function __tdiv_to_l_ *****************
  7496 ;; Defined at:
  7497 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdivl.c"
  7498 ;; Parameters:    Size  Location     Type
  7499 ;;  f1              3    1[COMMON] float 
  7500 ;;  f2              3    4[COMMON] float 
  7501 ;; Auto vars:     Size  Location     Type
  7502 ;;  quot            4    0[BANK0 ] unsigned long 
  7503 ;;  exp1            1    5[BANK0 ] unsigned char 
  7504 ;;  cntr            1    4[BANK0 ] unsigned char 
  7505 ;; Return value:  Size  Location     Type
  7506 ;;                  4    1[COMMON] unsigned long 
  7507 ;; Registers used:
  7508 ;;		wreg, status,2, status,0
  7509 ;; Tracked objects:
  7510 ;;		On entry : 0/0
  7511 ;;		On exit  : 0/0
  7512 ;;		Unchanged: 0/0
  7513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7514 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7515 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7516 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7517 ;;      Totals:        10       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7518 ;;Total ram usage:       16 bytes
  7519 ;; Hardware stack levels used:    1
  7520 ;; Hardware stack levels required when called:    2
  7521 ;; This function calls:
  7522 ;;		Nothing
  7523 ;; This function is called by:
  7524 ;;		_printf
  7525 ;; This function uses a non-reentrant model
  7526 ;;
  7527                           
  7528                           
  7529                           ;psect for function __tdiv_to_l_
  7530  0AE5                     __tdiv_to_l_:	
  7531                           
  7532                           ;incstack = 0
  7533                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  7534  0AE5  0871               	movf	__tdiv_to_l_@f1,w
  7535  0AE6  00F7               	movwf	??__tdiv_to_l_
  7536  0AE7  0872               	movf	__tdiv_to_l_@f1+1,w
  7537  0AE8  00F8               	movwf	??__tdiv_to_l_+1
  7538  0AE9  0873               	movf	__tdiv_to_l_@f1+2,w
  7539  0AEA  00F9               	movwf	??__tdiv_to_l_+2
  7540  0AEB  1003               	clrc
  7541  0AEC  0D78               	rlf	??__tdiv_to_l_+1,w
  7542  0AED  0D79               	rlf	??__tdiv_to_l_+2,w
  7543  0AEE  00FA               	movwf	??__tdiv_to_l_+3
  7544  0AEF  087A               	movf	??__tdiv_to_l_+3,w
  7545  0AF0  0020               	movlb	0	; select bank0
  7546  0AF1  00A5               	movwf	__tdiv_to_l_@exp1
  7547  0AF2  0825               	movf	__tdiv_to_l_@exp1,w
  7548  0AF3  1D03               	btfss	3,2
  7549  0AF4  2AFE               	goto	l3264
  7550  0AF5  3000               	movlw	0
  7551  0AF6  00F4               	movwf	?__tdiv_to_l_+3
  7552  0AF7  3000               	movlw	0
  7553  0AF8  00F3               	movwf	?__tdiv_to_l_+2
  7554  0AF9  3000               	movlw	0
  7555  0AFA  00F2               	movwf	?__tdiv_to_l_+1
  7556  0AFB  3000               	movlw	0
  7557  0AFC  00F1               	movwf	?__tdiv_to_l_
  7558  0AFD  0008               	return
  7559  0AFE                     l3264:	
  7560  0AFE  0874               	movf	__tdiv_to_l_@f2,w
  7561  0AFF  00F7               	movwf	??__tdiv_to_l_
  7562  0B00  0875               	movf	__tdiv_to_l_@f2+1,w
  7563  0B01  00F8               	movwf	??__tdiv_to_l_+1
  7564  0B02  0876               	movf	__tdiv_to_l_@f2+2,w
  7565  0B03  00F9               	movwf	??__tdiv_to_l_+2
  7566  0B04  1003               	clrc
  7567  0B05  0D78               	rlf	??__tdiv_to_l_+1,w
  7568  0B06  0D79               	rlf	??__tdiv_to_l_+2,w
  7569  0B07  00FA               	movwf	??__tdiv_to_l_+3
  7570  0B08  087A               	movf	??__tdiv_to_l_+3,w
  7571  0B09  00A4               	movwf	__tdiv_to_l_@cntr
  7572  0B0A  0824               	movf	__tdiv_to_l_@cntr,w
  7573  0B0B  1D03               	btfss	3,2
  7574  0B0C  2B16               	goto	l693
  7575  0B0D  3000               	movlw	0
  7576  0B0E  00F4               	movwf	?__tdiv_to_l_+3
  7577  0B0F  3000               	movlw	0
  7578  0B10  00F3               	movwf	?__tdiv_to_l_+2
  7579  0B11  3000               	movlw	0
  7580  0B12  00F2               	movwf	?__tdiv_to_l_+1
  7581  0B13  3000               	movlw	0
  7582  0B14  00F1               	movwf	?__tdiv_to_l_
  7583  0B15  0008               	return
  7584  0B16                     l693:	
  7585  0B16  17F2               	bsf	__tdiv_to_l_@f1+1,7
  7586  0B17  30FF               	movlw	255
  7587  0B18  05F1               	andwf	__tdiv_to_l_@f1,f
  7588  0B19  30FF               	movlw	255
  7589  0B1A  05F2               	andwf	__tdiv_to_l_@f1+1,f
  7590  0B1B  3000               	movlw	0
  7591  0B1C  05F3               	andwf	__tdiv_to_l_@f1+2,f
  7592  0B1D  17F5               	bsf	__tdiv_to_l_@f2+1,7
  7593  0B1E  30FF               	movlw	255
  7594  0B1F  05F4               	andwf	__tdiv_to_l_@f2,f
  7595  0B20  30FF               	movlw	255
  7596  0B21  05F5               	andwf	__tdiv_to_l_@f2+1,f
  7597  0B22  3000               	movlw	0
  7598  0B23  05F6               	andwf	__tdiv_to_l_@f2+2,f
  7599  0B24  3000               	movlw	0
  7600  0B25  00A3               	movwf	__tdiv_to_l_@quot+3
  7601  0B26  3000               	movlw	0
  7602  0B27  00A2               	movwf	__tdiv_to_l_@quot+2
  7603  0B28  3000               	movlw	0
  7604  0B29  00A1               	movwf	__tdiv_to_l_@quot+1
  7605  0B2A  3000               	movlw	0
  7606  0B2B  00A0               	movwf	__tdiv_to_l_@quot
  7607  0B2C  307F               	movlw	127
  7608  0B2D  02A5               	subwf	__tdiv_to_l_@exp1,f
  7609  0B2E  3098               	movlw	152
  7610  0B2F  0724               	addwf	__tdiv_to_l_@cntr,w
  7611  0B30  00F7               	movwf	??__tdiv_to_l_
  7612  0B31  0877               	movf	??__tdiv_to_l_,w
  7613  0B32  02A5               	subwf	__tdiv_to_l_@exp1,f
  7614  0B33  3018               	movlw	24
  7615  0B34  00F7               	movwf	??__tdiv_to_l_
  7616  0B35  0877               	movf	??__tdiv_to_l_,w
  7617  0B36  00A4               	movwf	__tdiv_to_l_@cntr
  7618  0B37                     l3278:	
  7619  0B37  3001               	movlw	1
  7620  0B38                     u4955:	
  7621  0B38  35A0               	lslf	__tdiv_to_l_@quot,f
  7622  0B39  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  7623  0B3A  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  7624  0B3B  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  7625  0B3C  0B89               	decfsz	9,f
  7626  0B3D  2B38               	goto	u4955
  7627  0B3E  0876               	movf	__tdiv_to_l_@f2+2,w
  7628  0B3F  0273               	subwf	__tdiv_to_l_@f1+2,w
  7629  0B40  1D03               	skipz
  7630  0B41  2B48               	goto	u4965
  7631  0B42  0875               	movf	__tdiv_to_l_@f2+1,w
  7632  0B43  0272               	subwf	__tdiv_to_l_@f1+1,w
  7633  0B44  1D03               	skipz
  7634  0B45  2B48               	goto	u4965
  7635  0B46  0874               	movf	__tdiv_to_l_@f2,w
  7636  0B47  0271               	subwf	__tdiv_to_l_@f1,w
  7637  0B48                     u4965:	
  7638  0B48  1C03               	skipc
  7639  0B49  2B51               	goto	l3286
  7640  0B4A  0874               	movf	__tdiv_to_l_@f2,w
  7641  0B4B  02F1               	subwf	__tdiv_to_l_@f1,f
  7642  0B4C  0875               	movf	__tdiv_to_l_@f2+1,w
  7643  0B4D  3BF2               	subwfb	__tdiv_to_l_@f1+1,f
  7644  0B4E  0876               	movf	__tdiv_to_l_@f2+2,w
  7645  0B4F  3BF3               	subwfb	__tdiv_to_l_@f1+2,f
  7646  0B50  1420               	bsf	__tdiv_to_l_@quot,0
  7647  0B51                     l3286:	
  7648  0B51  3001               	movlw	1
  7649  0B52                     u4975:	
  7650  0B52  35F1               	lslf	__tdiv_to_l_@f1,f
  7651  0B53  0DF2               	rlf	__tdiv_to_l_@f1+1,f
  7652  0B54  0DF3               	rlf	__tdiv_to_l_@f1+2,f
  7653  0B55  0B89               	decfsz	9,f
  7654  0B56  2B52               	goto	u4975
  7655  0B57  3001               	movlw	1
  7656  0B58  02A4               	subwf	__tdiv_to_l_@cntr,f
  7657  0B59  1D03               	btfss	3,2
  7658  0B5A  2B37               	goto	l3278
  7659  0B5B  1FA5               	btfss	__tdiv_to_l_@exp1,7
  7660  0B5C  2B79               	goto	l3298
  7661  0B5D  0825               	movf	__tdiv_to_l_@exp1,w
  7662  0B5E  3A80               	xorlw	128
  7663  0B5F  3E97               	addlw	151
  7664  0B60  1803               	skipnc
  7665  0B61  2B6B               	goto	l3296
  7666  0B62  3000               	movlw	0
  7667  0B63  00F4               	movwf	?__tdiv_to_l_+3
  7668  0B64  3000               	movlw	0
  7669  0B65  00F3               	movwf	?__tdiv_to_l_+2
  7670  0B66  3000               	movlw	0
  7671  0B67  00F2               	movwf	?__tdiv_to_l_+1
  7672  0B68  3000               	movlw	0
  7673  0B69  00F1               	movwf	?__tdiv_to_l_
  7674  0B6A  0008               	return
  7675  0B6B                     l3296:	
  7676  0B6B  3001               	movlw	1
  7677  0B6C                     u5015:	
  7678  0B6C  36A3               	lsrf	__tdiv_to_l_@quot+3,f
  7679  0B6D  0CA2               	rrf	__tdiv_to_l_@quot+2,f
  7680  0B6E  0CA1               	rrf	__tdiv_to_l_@quot+1,f
  7681  0B6F  0CA0               	rrf	__tdiv_to_l_@quot,f
  7682  0B70  0B89               	decfsz	9,f
  7683  0B71  2B6C               	goto	u5015
  7684  0B72  3001               	movlw	1
  7685  0B73  00F7               	movwf	??__tdiv_to_l_
  7686  0B74  0877               	movf	??__tdiv_to_l_,w
  7687  0B75  07A5               	addwf	__tdiv_to_l_@exp1,f
  7688  0B76  1903               	btfsc	3,2
  7689  0B77  2B92               	goto	l3306
  7690  0B78  2B6B               	goto	l3296
  7691  0B79                     l3298:	
  7692  0B79  3018               	movlw	24
  7693  0B7A  0225               	subwf	__tdiv_to_l_@exp1,w
  7694  0B7B  1C03               	skipc
  7695  0B7C  2B8F               	goto	l703
  7696  0B7D  3000               	movlw	0
  7697  0B7E  00F4               	movwf	?__tdiv_to_l_+3
  7698  0B7F  3000               	movlw	0
  7699  0B80  00F3               	movwf	?__tdiv_to_l_+2
  7700  0B81  3000               	movlw	0
  7701  0B82  00F2               	movwf	?__tdiv_to_l_+1
  7702  0B83  3000               	movlw	0
  7703  0B84  00F1               	movwf	?__tdiv_to_l_
  7704  0B85  0008               	return
  7705  0B86                     l3304:	
  7706  0B86  3001               	movlw	1
  7707  0B87                     u5045:	
  7708  0B87  35A0               	lslf	__tdiv_to_l_@quot,f
  7709  0B88  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  7710  0B89  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  7711  0B8A  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  7712  0B8B  0B89               	decfsz	9,f
  7713  0B8C  2B87               	goto	u5045
  7714  0B8D  3001               	movlw	1
  7715  0B8E  02A5               	subwf	__tdiv_to_l_@exp1,f
  7716  0B8F                     l703:	
  7717  0B8F  0825               	movf	__tdiv_to_l_@exp1,w
  7718  0B90  1D03               	btfss	3,2
  7719  0B91  2B86               	goto	l3304
  7720  0B92                     l3306:	
  7721  0B92  0823               	movf	__tdiv_to_l_@quot+3,w
  7722  0B93  00F4               	movwf	?__tdiv_to_l_+3
  7723  0B94  0822               	movf	__tdiv_to_l_@quot+2,w
  7724  0B95  00F3               	movwf	?__tdiv_to_l_+2
  7725  0B96  0821               	movf	__tdiv_to_l_@quot+1,w
  7726  0B97  00F2               	movwf	?__tdiv_to_l_+1
  7727  0B98  0820               	movf	__tdiv_to_l_@quot,w
  7728  0B99  00F1               	movwf	?__tdiv_to_l_
  7729  0B9A  0008               	return
  7730  0B9B                     __end_of__tdiv_to_l_:	
  7731                           
  7732                           	psect	text34
  7733  0D7E                     __ptext34:	
  7734 ;; *************** function __div_to_l_ *****************
  7735 ;; Defined at:
  7736 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fldivl.c"
  7737 ;; Parameters:    Size  Location     Type
  7738 ;;  f1              3    1[COMMON] unsigned long 
  7739 ;;  f2              3    4[COMMON] unsigned long 
  7740 ;; Auto vars:     Size  Location     Type
  7741 ;;  quot            4    8[BANK0 ] unsigned long 
  7742 ;;  exp1            1   13[BANK0 ] unsigned char 
  7743 ;;  cntr            1   12[BANK0 ] unsigned char 
  7744 ;; Return value:  Size  Location     Type
  7745 ;;                  4    1[COMMON] unsigned long 
  7746 ;; Registers used:
  7747 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7748 ;; Tracked objects:
  7749 ;;		On entry : 0/0
  7750 ;;		On exit  : 0/0
  7751 ;;		Unchanged: 0/0
  7752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7753 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7754 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7755 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7756 ;;      Totals:         6      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7757 ;;Total ram usage:       20 bytes
  7758 ;; Hardware stack levels used:    1
  7759 ;; Hardware stack levels required when called:    2
  7760 ;; This function calls:
  7761 ;;		Nothing
  7762 ;; This function is called by:
  7763 ;;		_printf
  7764 ;; This function uses a non-reentrant model
  7765 ;;
  7766                           
  7767                           
  7768                           ;psect for function __div_to_l_
  7769  0D7E                     __div_to_l_:	
  7770                           
  7771                           ;incstack = 0
  7772                           ; Regs used in __div_to_l_: [wreg+fsr1l+fsr1h+status,2+status,0]
  7773  0D7E  3071               	movlw	low (__div_to_l_@f1| 0)
  7774  0D7F  0086               	movwf	6
  7775  0D80  0187               	clrf	7
  7776  0D81  3F40               	moviw [0]fsr1
  7777  0D82  0020               	movlb	0	; select bank0
  7778  0D83  00A0               	movwf	??__div_to_l_
  7779  0D84  3F41               	moviw [1]fsr1
  7780  0D85  00A1               	movwf	??__div_to_l_+1
  7781  0D86  3F42               	moviw [2]fsr1
  7782  0D87  00A2               	movwf	??__div_to_l_+2
  7783  0D88  3F43               	moviw [3]fsr1
  7784  0D89  00A3               	movwf	??__div_to_l_+3
  7785  0D8A  1003               	clrc
  7786  0D8B  0D22               	rlf	??__div_to_l_+2,w
  7787  0D8C  0D23               	rlf	??__div_to_l_+3,w
  7788  0D8D  00A4               	movwf	??__div_to_l_+4
  7789  0D8E  0824               	movf	??__div_to_l_+4,w
  7790  0D8F  00AD               	movwf	__div_to_l_@exp1
  7791  0D90  082D               	movf	__div_to_l_@exp1,w
  7792  0D91  1D03               	btfss	3,2
  7793  0D92  2D9C               	goto	l3316
  7794  0D93  3000               	movlw	0
  7795  0D94  00F4               	movwf	?__div_to_l_+3
  7796  0D95  3000               	movlw	0
  7797  0D96  00F3               	movwf	?__div_to_l_+2
  7798  0D97  3000               	movlw	0
  7799  0D98  00F2               	movwf	?__div_to_l_+1
  7800  0D99  3000               	movlw	0
  7801  0D9A  00F1               	movwf	?__div_to_l_
  7802  0D9B  0008               	return
  7803  0D9C                     l3316:	
  7804  0D9C  3074               	movlw	low (__div_to_l_@f2| 0)
  7805  0D9D  0086               	movwf	6
  7806  0D9E  0187               	clrf	7
  7807  0D9F  3F40               	moviw [0]fsr1
  7808  0DA0  00A0               	movwf	??__div_to_l_
  7809  0DA1  3F41               	moviw [1]fsr1
  7810  0DA2  00A1               	movwf	??__div_to_l_+1
  7811  0DA3  3F42               	moviw [2]fsr1
  7812  0DA4  00A2               	movwf	??__div_to_l_+2
  7813  0DA5  3F43               	moviw [3]fsr1
  7814  0DA6  00A3               	movwf	??__div_to_l_+3
  7815  0DA7  1003               	clrc
  7816  0DA8  0D22               	rlf	??__div_to_l_+2,w
  7817  0DA9  0D23               	rlf	??__div_to_l_+3,w
  7818  0DAA  00A4               	movwf	??__div_to_l_+4
  7819  0DAB  0824               	movf	??__div_to_l_+4,w
  7820  0DAC  00AC               	movwf	__div_to_l_@cntr
  7821  0DAD  082C               	movf	__div_to_l_@cntr,w
  7822  0DAE  1D03               	btfss	3,2
  7823  0DAF  2DB9               	goto	l3322
  7824  0DB0  3000               	movlw	0
  7825  0DB1  00F4               	movwf	?__div_to_l_+3
  7826  0DB2  3000               	movlw	0
  7827  0DB3  00F3               	movwf	?__div_to_l_+2
  7828  0DB4  3000               	movlw	0
  7829  0DB5  00F2               	movwf	?__div_to_l_+1
  7830  0DB6  3000               	movlw	0
  7831  0DB7  00F1               	movwf	?__div_to_l_
  7832  0DB8  0008               	return
  7833  0DB9                     l3322:	
  7834  0DB9  3071               	movlw	low (__div_to_l_@f1| 0)
  7835  0DBA  0086               	movwf	6
  7836  0DBB  0187               	clrf	7
  7837  0DBC  3000               	movlw	0
  7838  0DBD  0481               	iorwf	1,f
  7839  0DBE  3141               	addfsr 1,1
  7840  0DBF  3000               	movlw	0
  7841  0DC0  0481               	iorwf	1,f
  7842  0DC1  3141               	addfsr 1,1
  7843  0DC2  3080               	movlw	128
  7844  0DC3  0481               	iorwf	1,f
  7845  0DC4  3141               	addfsr 1,1
  7846  0DC5  3000               	movlw	0
  7847  0DC6  0481               	iorwf	1,f
  7848  0DC7  3071               	movlw	low (__div_to_l_@f1| 0)
  7849  0DC8  0086               	movwf	6
  7850  0DC9  0187               	clrf	7
  7851  0DCA  30FF               	movlw	255
  7852  0DCB  0581               	andwf	1,f
  7853  0DCC  3141               	addfsr 1,1
  7854  0DCD  30FF               	movlw	255
  7855  0DCE  0581               	andwf	1,f
  7856  0DCF  3141               	addfsr 1,1
  7857  0DD0  30FF               	movlw	255
  7858  0DD1  0581               	andwf	1,f
  7859  0DD2  3141               	addfsr 1,1
  7860  0DD3  3000               	movlw	0
  7861  0DD4  0581               	andwf	1,f
  7862  0DD5  3074               	movlw	low (__div_to_l_@f2| 0)
  7863  0DD6  0086               	movwf	6
  7864  0DD7  0187               	clrf	7
  7865  0DD8  3000               	movlw	0
  7866  0DD9  0481               	iorwf	1,f
  7867  0DDA  3141               	addfsr 1,1
  7868  0DDB  3000               	movlw	0
  7869  0DDC  0481               	iorwf	1,f
  7870  0DDD  3141               	addfsr 1,1
  7871  0DDE  3080               	movlw	128
  7872  0DDF  0481               	iorwf	1,f
  7873  0DE0  3141               	addfsr 1,1
  7874  0DE1  3000               	movlw	0
  7875  0DE2  0481               	iorwf	1,f
  7876  0DE3  3074               	movlw	low (__div_to_l_@f2| 0)
  7877  0DE4  0086               	movwf	6
  7878  0DE5  0187               	clrf	7
  7879  0DE6  30FF               	movlw	255
  7880  0DE7  0581               	andwf	1,f
  7881  0DE8  3141               	addfsr 1,1
  7882  0DE9  30FF               	movlw	255
  7883  0DEA  0581               	andwf	1,f
  7884  0DEB  3141               	addfsr 1,1
  7885  0DEC  30FF               	movlw	255
  7886  0DED  0581               	andwf	1,f
  7887  0DEE  3141               	addfsr 1,1
  7888  0DEF  3000               	movlw	0
  7889  0DF0  0581               	andwf	1,f
  7890  0DF1  3000               	movlw	0
  7891  0DF2  00AB               	movwf	__div_to_l_@quot+3
  7892  0DF3  3000               	movlw	0
  7893  0DF4  00AA               	movwf	__div_to_l_@quot+2
  7894  0DF5  3000               	movlw	0
  7895  0DF6  00A9               	movwf	__div_to_l_@quot+1
  7896  0DF7  3000               	movlw	0
  7897  0DF8  00A8               	movwf	__div_to_l_@quot
  7898  0DF9  307F               	movlw	127
  7899  0DFA  02AD               	subwf	__div_to_l_@exp1,f
  7900  0DFB  30A0               	movlw	160
  7901  0DFC  072C               	addwf	__div_to_l_@cntr,w
  7902  0DFD  00A0               	movwf	??__div_to_l_
  7903  0DFE  0820               	movf	??__div_to_l_,w
  7904  0DFF  02AD               	subwf	__div_to_l_@exp1,f
  7905  0E00  3020               	movlw	32
  7906  0E01  00A0               	movwf	??__div_to_l_
  7907  0E02  0820               	movf	??__div_to_l_,w
  7908  0E03  00AC               	movwf	__div_to_l_@cntr
  7909  0E04                     l3332:	
  7910  0E04  3001               	movlw	1
  7911  0E05                     u5085:	
  7912  0E05  35A8               	lslf	__div_to_l_@quot,f
  7913  0E06  0DA9               	rlf	__div_to_l_@quot+1,f
  7914  0E07  0DAA               	rlf	__div_to_l_@quot+2,f
  7915  0E08  0DAB               	rlf	__div_to_l_@quot+3,f
  7916  0E09  0B89               	decfsz	9,f
  7917  0E0A  2E05               	goto	u5085
  7918  0E0B  3074               	movlw	low (__div_to_l_@f2| 0)
  7919  0E0C  0086               	movwf	6
  7920  0E0D  0187               	clrf	7
  7921  0E0E  3F40               	moviw [0]fsr1
  7922  0E0F  00A0               	movwf	??__div_to_l_
  7923  0E10  3F41               	moviw [1]fsr1
  7924  0E11  00A1               	movwf	??__div_to_l_+1
  7925  0E12  3F42               	moviw [2]fsr1
  7926  0E13  00A2               	movwf	??__div_to_l_+2
  7927  0E14  3F43               	moviw [3]fsr1
  7928  0E15  00A3               	movwf	??__div_to_l_+3
  7929  0E16  3071               	movlw	low (__div_to_l_@f1| 0)
  7930  0E17  0086               	movwf	6
  7931  0E18  0187               	clrf	7
  7932  0E19  3F40               	moviw [0]fsr1
  7933  0E1A  00A4               	movwf	??__div_to_l_+4
  7934  0E1B  3F41               	moviw [1]fsr1
  7935  0E1C  00A5               	movwf	??__div_to_l_+5
  7936  0E1D  3F42               	moviw [2]fsr1
  7937  0E1E  00A6               	movwf	??__div_to_l_+6
  7938  0E1F  3F43               	moviw [3]fsr1
  7939  0E20  00A7               	movwf	??__div_to_l_+7
  7940  0E21  0823               	movf	??__div_to_l_+3,w
  7941  0E22  0227               	subwf	??__div_to_l_+7,w
  7942  0E23  1D03               	skipz
  7943  0E24  2E2F               	goto	u5095
  7944  0E25  0822               	movf	??__div_to_l_+2,w
  7945  0E26  0226               	subwf	??__div_to_l_+6,w
  7946  0E27  1D03               	skipz
  7947  0E28  2E2F               	goto	u5095
  7948  0E29  0821               	movf	??__div_to_l_+1,w
  7949  0E2A  0225               	subwf	??__div_to_l_+5,w
  7950  0E2B  1D03               	skipz
  7951  0E2C  2E2F               	goto	u5095
  7952  0E2D  0820               	movf	??__div_to_l_,w
  7953  0E2E  0224               	subwf	??__div_to_l_+4,w
  7954  0E2F                     u5095:	
  7955  0E2F  1C03               	skipc
  7956  0E30  2E4C               	goto	l3340
  7957  0E31  3074               	movlw	low (__div_to_l_@f2| 0)
  7958  0E32  0086               	movwf	6
  7959  0E33  0187               	clrf	7
  7960  0E34  3F40               	moviw [0]fsr1
  7961  0E35  00A0               	movwf	??__div_to_l_
  7962  0E36  3F41               	moviw [1]fsr1
  7963  0E37  00A1               	movwf	??__div_to_l_+1
  7964  0E38  3F42               	moviw [2]fsr1
  7965  0E39  00A2               	movwf	??__div_to_l_+2
  7966  0E3A  3F43               	moviw [3]fsr1
  7967  0E3B  00A3               	movwf	??__div_to_l_+3
  7968  0E3C  3071               	movlw	low (__div_to_l_@f1| 0)
  7969  0E3D  0086               	movwf	6
  7970  0E3E  0187               	clrf	7
  7971  0E3F  0820               	movf	??__div_to_l_,w
  7972  0E40  0281               	subwf	1,f
  7973  0E41  3141               	addfsr 1,1
  7974  0E42  0821               	movf	??__div_to_l_+1,w
  7975  0E43  3B81               	subwfb	1,f
  7976  0E44  3141               	addfsr 1,1
  7977  0E45  0822               	movf	??__div_to_l_+2,w
  7978  0E46  3B81               	subwfb	1,f
  7979  0E47  3141               	addfsr 1,1
  7980  0E48  0823               	movf	??__div_to_l_+3,w
  7981  0E49  3B81               	subwfb	1,f
  7982  0E4A  317D               	addfsr 1,-3
  7983  0E4B  1428               	bsf	__div_to_l_@quot,0
  7984  0E4C                     l3340:	
  7985  0E4C  3071               	movlw	low (__div_to_l_@f1| 0)
  7986  0E4D  0086               	movwf	6
  7987  0E4E  0187               	clrf	7
  7988  0E4F  3581               	lslf	1,f
  7989  0E50  3141               	addfsr 1,1
  7990  0E51  0D81               	rlf	1,f
  7991  0E52  3141               	addfsr 1,1
  7992  0E53  0D81               	rlf	1,f
  7993  0E54  3141               	addfsr 1,1
  7994  0E55  0D81               	rlf	1,f
  7995  0E56  317D               	addfsr 1,-3
  7996  0E57  3001               	movlw	1
  7997  0E58  02AC               	subwf	__div_to_l_@cntr,f
  7998  0E59  1D03               	btfss	3,2
  7999  0E5A  2E04               	goto	l3332
  8000  0E5B  1FAD               	btfss	__div_to_l_@exp1,7
  8001  0E5C  2E79               	goto	l3352
  8002  0E5D  082D               	movf	__div_to_l_@exp1,w
  8003  0E5E  3A80               	xorlw	128
  8004  0E5F  3E9F               	addlw	159
  8005  0E60  1803               	skipnc
  8006  0E61  2E6B               	goto	l3350
  8007  0E62  3000               	movlw	0
  8008  0E63  00F4               	movwf	?__div_to_l_+3
  8009  0E64  3000               	movlw	0
  8010  0E65  00F3               	movwf	?__div_to_l_+2
  8011  0E66  3000               	movlw	0
  8012  0E67  00F2               	movwf	?__div_to_l_+1
  8013  0E68  3000               	movlw	0
  8014  0E69  00F1               	movwf	?__div_to_l_
  8015  0E6A  0008               	return
  8016  0E6B                     l3350:	
  8017  0E6B  3001               	movlw	1
  8018  0E6C                     u5135:	
  8019  0E6C  36AB               	lsrf	__div_to_l_@quot+3,f
  8020  0E6D  0CAA               	rrf	__div_to_l_@quot+2,f
  8021  0E6E  0CA9               	rrf	__div_to_l_@quot+1,f
  8022  0E6F  0CA8               	rrf	__div_to_l_@quot,f
  8023  0E70  0B89               	decfsz	9,f
  8024  0E71  2E6C               	goto	u5135
  8025  0E72  3001               	movlw	1
  8026  0E73  00A0               	movwf	??__div_to_l_
  8027  0E74  0820               	movf	??__div_to_l_,w
  8028  0E75  07AD               	addwf	__div_to_l_@exp1,f
  8029  0E76  1903               	btfsc	3,2
  8030  0E77  2E92               	goto	l3360
  8031  0E78  2E6B               	goto	l3350
  8032  0E79                     l3352:	
  8033  0E79  3020               	movlw	32
  8034  0E7A  022D               	subwf	__div_to_l_@exp1,w
  8035  0E7B  1C03               	skipc
  8036  0E7C  2E8F               	goto	l624
  8037  0E7D  3000               	movlw	0
  8038  0E7E  00F4               	movwf	?__div_to_l_+3
  8039  0E7F  3000               	movlw	0
  8040  0E80  00F3               	movwf	?__div_to_l_+2
  8041  0E81  3000               	movlw	0
  8042  0E82  00F2               	movwf	?__div_to_l_+1
  8043  0E83  3000               	movlw	0
  8044  0E84  00F1               	movwf	?__div_to_l_
  8045  0E85  0008               	return
  8046  0E86                     l3358:	
  8047  0E86  3001               	movlw	1
  8048  0E87                     u5165:	
  8049  0E87  35A8               	lslf	__div_to_l_@quot,f
  8050  0E88  0DA9               	rlf	__div_to_l_@quot+1,f
  8051  0E89  0DAA               	rlf	__div_to_l_@quot+2,f
  8052  0E8A  0DAB               	rlf	__div_to_l_@quot+3,f
  8053  0E8B  0B89               	decfsz	9,f
  8054  0E8C  2E87               	goto	u5165
  8055  0E8D  3001               	movlw	1
  8056  0E8E  02AD               	subwf	__div_to_l_@exp1,f
  8057  0E8F                     l624:	
  8058  0E8F  082D               	movf	__div_to_l_@exp1,w
  8059  0E90  1D03               	btfss	3,2
  8060  0E91  2E86               	goto	l3358
  8061  0E92                     l3360:	
  8062  0E92  082B               	movf	__div_to_l_@quot+3,w
  8063  0E93  00F4               	movwf	?__div_to_l_+3
  8064  0E94  082A               	movf	__div_to_l_@quot+2,w
  8065  0E95  00F3               	movwf	?__div_to_l_+2
  8066  0E96  0829               	movf	__div_to_l_@quot+1,w
  8067  0E97  00F2               	movwf	?__div_to_l_+1
  8068  0E98  0828               	movf	__div_to_l_@quot,w
  8069  0E99  00F1               	movwf	?__div_to_l_
  8070  0E9A  0008               	return
  8071  0E9B                     __end_of__div_to_l_:	
  8072                           
  8073                           	psect	text35
  8074  175D                     __ptext35:	
  8075 ;; *************** function ___lltoft *****************
  8076 ;; Defined at:
  8077 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
  8078 ;; Parameters:    Size  Location     Type
  8079 ;;  c               4    0[BANK0 ] unsigned long 
  8080 ;; Auto vars:     Size  Location     Type
  8081 ;;  exp             1   10[COMMON] unsigned char 
  8082 ;; Return value:  Size  Location     Type
  8083 ;;                  3    0[BANK0 ] float 
  8084 ;; Registers used:
  8085 ;;		wreg, status,2, status,0, pclath, cstack
  8086 ;; Tracked objects:
  8087 ;;		On entry : 0/0
  8088 ;;		On exit  : 0/0
  8089 ;;		Unchanged: 0/0
  8090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8091 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8092 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8093 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8094 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8095 ;;Total ram usage:        6 bytes
  8096 ;; Hardware stack levels used:    1
  8097 ;; Hardware stack levels required when called:    3
  8098 ;; This function calls:
  8099 ;;		___ftpack
  8100 ;; This function is called by:
  8101 ;;		_printf
  8102 ;; This function uses a non-reentrant model
  8103 ;;
  8104                           
  8105                           
  8106                           ;psect for function ___lltoft
  8107  175D                     ___lltoft:	
  8108                           
  8109                           ;incstack = 0
  8110                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  8111  175D  308E               	movlw	142
  8112  175E  00F9               	movwf	??___lltoft
  8113  175F  0879               	movf	??___lltoft,w
  8114  1760  00FA               	movwf	___lltoft@exp
  8115  1761                     l3490:	
  8116  1761  30FF               	movlw	255
  8117  1762  0020               	movlb	0	; select bank0
  8118  1763  0523               	andwf	___lltoft@c+3,w
  8119  1764  1903               	btfsc	3,2
  8120  1765  2F73               	goto	l3492
  8121  1766  3001               	movlw	1
  8122  1767                     u5465:	
  8123  1767  0020               	movlb	0	; select bank0
  8124  1768  36A3               	lsrf	___lltoft@c+3,f
  8125  1769  0CA2               	rrf	___lltoft@c+2,f
  8126  176A  0CA1               	rrf	___lltoft@c+1,f
  8127  176B  0CA0               	rrf	___lltoft@c,f
  8128  176C  0B89               	decfsz	9,f
  8129  176D  2F67               	goto	u5465
  8130  176E  3001               	movlw	1
  8131  176F  00F9               	movwf	??___lltoft
  8132  1770  0879               	movf	??___lltoft,w
  8133  1771  07FA               	addwf	___lltoft@exp,f
  8134  1772  2F61               	goto	l3490
  8135  1773                     l3492:	
  8136  1773  0820               	movf	___lltoft@c,w
  8137  1774  00F1               	movwf	___ftpack@arg
  8138  1775  0821               	movf	___lltoft@c+1,w
  8139  1776  00F2               	movwf	___ftpack@arg+1
  8140  1777  0822               	movf	___lltoft@c+2,w
  8141  1778  00F3               	movwf	___ftpack@arg+2
  8142  1779  087A               	movf	___lltoft@exp,w
  8143  177A  00F9               	movwf	??___lltoft
  8144  177B  0879               	movf	??___lltoft,w
  8145  177C  00F4               	movwf	___ftpack@exp
  8146  177D  01F5               	clrf	___ftpack@sign
  8147  177E  3189  2146         	fcall	___ftpack
  8148  1780  0871               	movf	?___ftpack,w
  8149  1781  0020               	movlb	0	; select bank0
  8150  1782  00A0               	movwf	?___lltoft
  8151  1783  0872               	movf	?___ftpack+1,w
  8152  1784  00A1               	movwf	?___lltoft+1
  8153  1785  0873               	movf	?___ftpack+2,w
  8154  1786  00A2               	movwf	?___lltoft+2
  8155  1787  0008               	return
  8156  1788                     __end_of___lltoft:	
  8157                           
  8158                           	psect	text36
  8159  0819                     __ptext36:	
  8160 ;; *************** function ___llmod *****************
  8161 ;; Defined at:
  8162 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\llmod.c"
  8163 ;; Parameters:    Size  Location     Type
  8164 ;;  divisor         4    5[BANK0 ] unsigned long 
  8165 ;;  dividend        4    9[BANK0 ] unsigned long 
  8166 ;; Auto vars:     Size  Location     Type
  8167 ;;  counter         1   11[COMMON] unsigned char 
  8168 ;; Return value:  Size  Location     Type
  8169 ;;                  4    5[BANK0 ] unsigned long 
  8170 ;; Registers used:
  8171 ;;		wreg, status,2, status,0
  8172 ;; Tracked objects:
  8173 ;;		On entry : 0/0
  8174 ;;		On exit  : 0/0
  8175 ;;		Unchanged: 0/0
  8176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8177 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8178 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8179 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8180 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8181 ;;Total ram usage:       10 bytes
  8182 ;; Hardware stack levels used:    1
  8183 ;; Hardware stack levels required when called:    2
  8184 ;; This function calls:
  8185 ;;		Nothing
  8186 ;; This function is called by:
  8187 ;;		_printf
  8188 ;; This function uses a non-reentrant model
  8189 ;;
  8190                           
  8191                           
  8192                           ;psect for function ___llmod
  8193  0819                     ___llmod:	
  8194                           
  8195                           ;incstack = 0
  8196                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  8197  0819  0020               	movlb	0	; select bank0
  8198  081A  0828               	movf	___llmod@divisor+3,w
  8199  081B  0427               	iorwf	___llmod@divisor+2,w
  8200  081C  0426               	iorwf	___llmod@divisor+1,w
  8201  081D  0425               	iorwf	___llmod@divisor,w
  8202  081E  1903               	skipnz
  8203  081F  2853               	goto	l3482
  8204  0820  01FB               	clrf	___llmod@counter
  8205  0821  0AFB               	incf	___llmod@counter,f
  8206  0822                     l3472:	
  8207  0822  1BA8               	btfsc	___llmod@divisor+3,7
  8208  0823  2830               	goto	l3474
  8209  0824  3001               	movlw	1
  8210  0825                     u5415:	
  8211  0825  35A5               	lslf	___llmod@divisor,f
  8212  0826  0DA6               	rlf	___llmod@divisor+1,f
  8213  0827  0DA7               	rlf	___llmod@divisor+2,f
  8214  0828  0DA8               	rlf	___llmod@divisor+3,f
  8215  0829  0B89               	decfsz	9,f
  8216  082A  2825               	goto	u5415
  8217  082B  3001               	movlw	1
  8218  082C  00FA               	movwf	??___llmod
  8219  082D  087A               	movf	??___llmod,w
  8220  082E  07FB               	addwf	___llmod@counter,f
  8221  082F  2822               	goto	l3472
  8222  0830                     l3474:	
  8223  0830  0828               	movf	___llmod@divisor+3,w
  8224  0831  022C               	subwf	___llmod@dividend+3,w
  8225  0832  1D03               	skipz
  8226  0833  283E               	goto	u5435
  8227  0834  0827               	movf	___llmod@divisor+2,w
  8228  0835  022B               	subwf	___llmod@dividend+2,w
  8229  0836  1D03               	skipz
  8230  0837  283E               	goto	u5435
  8231  0838  0826               	movf	___llmod@divisor+1,w
  8232  0839  022A               	subwf	___llmod@dividend+1,w
  8233  083A  1D03               	skipz
  8234  083B  283E               	goto	u5435
  8235  083C  0825               	movf	___llmod@divisor,w
  8236  083D  0229               	subwf	___llmod@dividend,w
  8237  083E                     u5435:	
  8238  083E  1C03               	skipc
  8239  083F  2848               	goto	l3478
  8240  0840  0825               	movf	___llmod@divisor,w
  8241  0841  02A9               	subwf	___llmod@dividend,f
  8242  0842  0826               	movf	___llmod@divisor+1,w
  8243  0843  3BAA               	subwfb	___llmod@dividend+1,f
  8244  0844  0827               	movf	___llmod@divisor+2,w
  8245  0845  3BAB               	subwfb	___llmod@dividend+2,f
  8246  0846  0828               	movf	___llmod@divisor+3,w
  8247  0847  3BAC               	subwfb	___llmod@dividend+3,f
  8248  0848                     l3478:	
  8249  0848  3001               	movlw	1
  8250  0849                     u5445:	
  8251  0849  36A8               	lsrf	___llmod@divisor+3,f
  8252  084A  0CA7               	rrf	___llmod@divisor+2,f
  8253  084B  0CA6               	rrf	___llmod@divisor+1,f
  8254  084C  0CA5               	rrf	___llmod@divisor,f
  8255  084D  0B89               	decfsz	9,f
  8256  084E  2849               	goto	u5445
  8257  084F  3001               	movlw	1
  8258  0850  02FB               	subwf	___llmod@counter,f
  8259  0851  1D03               	btfss	3,2
  8260  0852  2830               	goto	l3474
  8261  0853                     l3482:	
  8262  0853  082C               	movf	___llmod@dividend+3,w
  8263  0854  00A8               	movwf	?___llmod+3
  8264  0855  082B               	movf	___llmod@dividend+2,w
  8265  0856  00A7               	movwf	?___llmod+2
  8266  0857  082A               	movf	___llmod@dividend+1,w
  8267  0858  00A6               	movwf	?___llmod+1
  8268  0859  0829               	movf	___llmod@dividend,w
  8269  085A  00A5               	movwf	?___llmod
  8270  085B  0008               	return
  8271  085C                     __end_of___llmod:	
  8272                           
  8273                           	psect	text37
  8274  08F3                     __ptext37:	
  8275 ;; *************** function ___lldiv *****************
  8276 ;; Defined at:
  8277 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lldiv.c"
  8278 ;; Parameters:    Size  Location     Type
  8279 ;;  divisor         4    1[COMMON] unsigned long 
  8280 ;;  dividend        4    5[COMMON] unsigned long 
  8281 ;; Auto vars:     Size  Location     Type
  8282 ;;  quotient        4    0[BANK0 ] unsigned long 
  8283 ;;  counter         1    4[BANK0 ] unsigned char 
  8284 ;; Return value:  Size  Location     Type
  8285 ;;                  4    1[COMMON] unsigned long 
  8286 ;; Registers used:
  8287 ;;		wreg, status,2, status,0
  8288 ;; Tracked objects:
  8289 ;;		On entry : 0/0
  8290 ;;		On exit  : 0/0
  8291 ;;		Unchanged: 0/0
  8292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8293 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8294 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8295 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8296 ;;      Totals:         9       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8297 ;;Total ram usage:       14 bytes
  8298 ;; Hardware stack levels used:    1
  8299 ;; Hardware stack levels required when called:    2
  8300 ;; This function calls:
  8301 ;;		Nothing
  8302 ;; This function is called by:
  8303 ;;		_printf
  8304 ;; This function uses a non-reentrant model
  8305 ;;
  8306                           
  8307                           
  8308                           ;psect for function ___lldiv
  8309  08F3                     ___lldiv:	
  8310                           
  8311                           ;incstack = 0
  8312                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  8313  08F3  3000               	movlw	0
  8314  08F4  0020               	movlb	0	; select bank0
  8315  08F5  00A3               	movwf	___lldiv@quotient+3
  8316  08F6  3000               	movlw	0
  8317  08F7  00A2               	movwf	___lldiv@quotient+2
  8318  08F8  3000               	movlw	0
  8319  08F9  00A1               	movwf	___lldiv@quotient+1
  8320  08FA  3000               	movlw	0
  8321  08FB  00A0               	movwf	___lldiv@quotient
  8322  08FC  0874               	movf	___lldiv@divisor+3,w
  8323  08FD  0473               	iorwf	___lldiv@divisor+2,w
  8324  08FE  0472               	iorwf	___lldiv@divisor+1,w
  8325  08FF  0471               	iorwf	___lldiv@divisor,w
  8326  0900  1903               	skipnz
  8327  0901  293D               	goto	l3462
  8328  0902  01A4               	clrf	___lldiv@counter
  8329  0903  0AA4               	incf	___lldiv@counter,f
  8330  0904                     l3448:	
  8331  0904  1BF4               	btfsc	___lldiv@divisor+3,7
  8332  0905  2912               	goto	l3450
  8333  0906  3001               	movlw	1
  8334  0907                     u5345:	
  8335  0907  35F1               	lslf	___lldiv@divisor,f
  8336  0908  0DF2               	rlf	___lldiv@divisor+1,f
  8337  0909  0DF3               	rlf	___lldiv@divisor+2,f
  8338  090A  0DF4               	rlf	___lldiv@divisor+3,f
  8339  090B  0B89               	decfsz	9,f
  8340  090C  2907               	goto	u5345
  8341  090D  3001               	movlw	1
  8342  090E  00F9               	movwf	??___lldiv
  8343  090F  0879               	movf	??___lldiv,w
  8344  0910  07A4               	addwf	___lldiv@counter,f
  8345  0911  2904               	goto	l3448
  8346  0912                     l3450:	
  8347  0912  3001               	movlw	1
  8348  0913                     u5365:	
  8349  0913  35A0               	lslf	___lldiv@quotient,f
  8350  0914  0DA1               	rlf	___lldiv@quotient+1,f
  8351  0915  0DA2               	rlf	___lldiv@quotient+2,f
  8352  0916  0DA3               	rlf	___lldiv@quotient+3,f
  8353  0917  0B89               	decfsz	9,f
  8354  0918  2913               	goto	u5365
  8355  0919  0874               	movf	___lldiv@divisor+3,w
  8356  091A  0278               	subwf	___lldiv@dividend+3,w
  8357  091B  1D03               	skipz
  8358  091C  2927               	goto	u5375
  8359  091D  0873               	movf	___lldiv@divisor+2,w
  8360  091E  0277               	subwf	___lldiv@dividend+2,w
  8361  091F  1D03               	skipz
  8362  0920  2927               	goto	u5375
  8363  0921  0872               	movf	___lldiv@divisor+1,w
  8364  0922  0276               	subwf	___lldiv@dividend+1,w
  8365  0923  1D03               	skipz
  8366  0924  2927               	goto	u5375
  8367  0925  0871               	movf	___lldiv@divisor,w
  8368  0926  0275               	subwf	___lldiv@dividend,w
  8369  0927                     u5375:	
  8370  0927  1C03               	skipc
  8371  0928  2932               	goto	l3458
  8372  0929  0871               	movf	___lldiv@divisor,w
  8373  092A  02F5               	subwf	___lldiv@dividend,f
  8374  092B  0872               	movf	___lldiv@divisor+1,w
  8375  092C  3BF6               	subwfb	___lldiv@dividend+1,f
  8376  092D  0873               	movf	___lldiv@divisor+2,w
  8377  092E  3BF7               	subwfb	___lldiv@dividend+2,f
  8378  092F  0874               	movf	___lldiv@divisor+3,w
  8379  0930  3BF8               	subwfb	___lldiv@dividend+3,f
  8380  0931  1420               	bsf	___lldiv@quotient,0
  8381  0932                     l3458:	
  8382  0932  3001               	movlw	1
  8383  0933                     u5385:	
  8384  0933  36F4               	lsrf	___lldiv@divisor+3,f
  8385  0934  0CF3               	rrf	___lldiv@divisor+2,f
  8386  0935  0CF2               	rrf	___lldiv@divisor+1,f
  8387  0936  0CF1               	rrf	___lldiv@divisor,f
  8388  0937  0B89               	decfsz	9,f
  8389  0938  2933               	goto	u5385
  8390  0939  3001               	movlw	1
  8391  093A  02A4               	subwf	___lldiv@counter,f
  8392  093B  1D03               	btfss	3,2
  8393  093C  2912               	goto	l3450
  8394  093D                     l3462:	
  8395  093D  0823               	movf	___lldiv@quotient+3,w
  8396  093E  00F4               	movwf	?___lldiv+3
  8397  093F  0822               	movf	___lldiv@quotient+2,w
  8398  0940  00F3               	movwf	?___lldiv+2
  8399  0941  0821               	movf	___lldiv@quotient+1,w
  8400  0942  00F2               	movwf	?___lldiv+1
  8401  0943  0820               	movf	___lldiv@quotient,w
  8402  0944  00F1               	movwf	?___lldiv
  8403  0945  0008               	return
  8404  0946                     __end_of___lldiv:	
  8405                           
  8406                           	psect	text38
  8407  09AA                     __ptext38:	
  8408 ;; *************** function ___fttol *****************
  8409 ;; Defined at:
  8410 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  8411 ;; Parameters:    Size  Location     Type
  8412 ;;  f1              3   36[BANK0 ] float 
  8413 ;; Auto vars:     Size  Location     Type
  8414 ;;  lval            4   45[BANK0 ] unsigned long 
  8415 ;;  exp1            1   49[BANK0 ] unsigned char 
  8416 ;;  sign1           1   44[BANK0 ] unsigned char 
  8417 ;; Return value:  Size  Location     Type
  8418 ;;                  4   36[BANK0 ] long 
  8419 ;; Registers used:
  8420 ;;		wreg, status,2, status,0
  8421 ;; Tracked objects:
  8422 ;;		On entry : 0/0
  8423 ;;		On exit  : 0/0
  8424 ;;		Unchanged: 0/0
  8425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8426 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8427 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8428 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8429 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8430 ;;Total ram usage:       14 bytes
  8431 ;; Hardware stack levels used:    1
  8432 ;; Hardware stack levels required when called:    2
  8433 ;; This function calls:
  8434 ;;		Nothing
  8435 ;; This function is called by:
  8436 ;;		_printf
  8437 ;; This function uses a non-reentrant model
  8438 ;;
  8439                           
  8440                           
  8441                           ;psect for function ___fttol
  8442  09AA                     ___fttol:	
  8443                           
  8444                           ;incstack = 0
  8445                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  8446  09AA  0020               	movlb	0	; select bank0
  8447  09AB  0844               	movf	___fttol@f1,w
  8448  09AC  00C8               	movwf	??___fttol
  8449  09AD  0845               	movf	___fttol@f1+1,w
  8450  09AE  00C9               	movwf	??___fttol+1
  8451  09AF  0846               	movf	___fttol@f1+2,w
  8452  09B0  00CA               	movwf	??___fttol+2
  8453  09B1  1003               	clrc
  8454  09B2  0D49               	rlf	??___fttol+1,w
  8455  09B3  0D4A               	rlf	??___fttol+2,w
  8456  09B4  00CB               	movwf	??___fttol+3
  8457  09B5  084B               	movf	??___fttol+3,w
  8458  09B6  00D1               	movwf	___fttol@exp1
  8459  09B7  0851               	movf	___fttol@exp1,w
  8460  09B8  1D03               	btfss	3,2
  8461  09B9  29C3               	goto	l3406
  8462  09BA  3000               	movlw	0
  8463  09BB  00C7               	movwf	?___fttol+3
  8464  09BC  3000               	movlw	0
  8465  09BD  00C6               	movwf	?___fttol+2
  8466  09BE  3000               	movlw	0
  8467  09BF  00C5               	movwf	?___fttol+1
  8468  09C0  3000               	movlw	0
  8469  09C1  00C4               	movwf	?___fttol
  8470  09C2  0008               	return
  8471  09C3                     l3406:	
  8472  09C3  0844               	movf	___fttol@f1,w
  8473  09C4  00C8               	movwf	??___fttol
  8474  09C5  0845               	movf	___fttol@f1+1,w
  8475  09C6  00C9               	movwf	??___fttol+1
  8476  09C7  0846               	movf	___fttol@f1+2,w
  8477  09C8  00CA               	movwf	??___fttol+2
  8478  09C9  3017               	movlw	23
  8479  09CA                     u5245:	
  8480  09CA  36CA               	lsrf	??___fttol+2,f
  8481  09CB  0CC9               	rrf	??___fttol+1,f
  8482  09CC  0CC8               	rrf	??___fttol,f
  8483  09CD  0B89               	decfsz	9,f
  8484  09CE  29CA               	goto	u5245
  8485  09CF  0848               	movf	??___fttol,w
  8486  09D0  00CB               	movwf	??___fttol+3
  8487  09D1  084B               	movf	??___fttol+3,w
  8488  09D2  00CC               	movwf	___fttol@sign1
  8489  09D3  17C5               	bsf	___fttol@f1+1,7
  8490  09D4  30FF               	movlw	255
  8491  09D5  05C4               	andwf	___fttol@f1,f
  8492  09D6  30FF               	movlw	255
  8493  09D7  05C5               	andwf	___fttol@f1+1,f
  8494  09D8  3000               	movlw	0
  8495  09D9  05C6               	andwf	___fttol@f1+2,f
  8496  09DA  0844               	movf	___fttol@f1,w
  8497  09DB  00CD               	movwf	___fttol@lval
  8498  09DC  0845               	movf	___fttol@f1+1,w
  8499  09DD  00CE               	movwf	___fttol@lval+1
  8500  09DE  0846               	movf	___fttol@f1+2,w
  8501  09DF  00CF               	movwf	___fttol@lval+2
  8502  09E0  01D0               	clrf	___fttol@lval+3
  8503  09E1  308E               	movlw	142
  8504  09E2  02D1               	subwf	___fttol@exp1,f
  8505  09E3  1FD1               	btfss	___fttol@exp1,7
  8506  09E4  2A01               	goto	l3426
  8507  09E5  0851               	movf	___fttol@exp1,w
  8508  09E6  3A80               	xorlw	128
  8509  09E7  3E8F               	addlw	143
  8510  09E8  1803               	skipnc
  8511  09E9  29F3               	goto	l3424
  8512  09EA  3000               	movlw	0
  8513  09EB  00C7               	movwf	?___fttol+3
  8514  09EC  3000               	movlw	0
  8515  09ED  00C6               	movwf	?___fttol+2
  8516  09EE  3000               	movlw	0
  8517  09EF  00C5               	movwf	?___fttol+1
  8518  09F0  3000               	movlw	0
  8519  09F1  00C4               	movwf	?___fttol
  8520  09F2  0008               	return
  8521  09F3                     l3424:	
  8522  09F3  3001               	movlw	1
  8523  09F4                     u5275:	
  8524  09F4  36D0               	lsrf	___fttol@lval+3,f
  8525  09F5  0CCF               	rrf	___fttol@lval+2,f
  8526  09F6  0CCE               	rrf	___fttol@lval+1,f
  8527  09F7  0CCD               	rrf	___fttol@lval,f
  8528  09F8  0B89               	decfsz	9,f
  8529  09F9  29F4               	goto	u5275
  8530  09FA  3001               	movlw	1
  8531  09FB  00C8               	movwf	??___fttol
  8532  09FC  0848               	movf	??___fttol,w
  8533  09FD  07D1               	addwf	___fttol@exp1,f
  8534  09FE  1903               	btfsc	3,2
  8535  09FF  2A1A               	goto	l3434
  8536  0A00  29F3               	goto	l3424
  8537  0A01                     l3426:	
  8538  0A01  3018               	movlw	24
  8539  0A02  0251               	subwf	___fttol@exp1,w
  8540  0A03  1C03               	skipc
  8541  0A04  2A17               	goto	l744
  8542  0A05  3000               	movlw	0
  8543  0A06  00C7               	movwf	?___fttol+3
  8544  0A07  3000               	movlw	0
  8545  0A08  00C6               	movwf	?___fttol+2
  8546  0A09  3000               	movlw	0
  8547  0A0A  00C5               	movwf	?___fttol+1
  8548  0A0B  3000               	movlw	0
  8549  0A0C  00C4               	movwf	?___fttol
  8550  0A0D  0008               	return
  8551  0A0E                     l3432:	
  8552  0A0E  3001               	movlw	1
  8553  0A0F                     u5305:	
  8554  0A0F  35CD               	lslf	___fttol@lval,f
  8555  0A10  0DCE               	rlf	___fttol@lval+1,f
  8556  0A11  0DCF               	rlf	___fttol@lval+2,f
  8557  0A12  0DD0               	rlf	___fttol@lval+3,f
  8558  0A13  0B89               	decfsz	9,f
  8559  0A14  2A0F               	goto	u5305
  8560  0A15  3001               	movlw	1
  8561  0A16  02D1               	subwf	___fttol@exp1,f
  8562  0A17                     l744:	
  8563  0A17  0851               	movf	___fttol@exp1,w
  8564  0A18  1D03               	btfss	3,2
  8565  0A19  2A0E               	goto	l3432
  8566  0A1A                     l3434:	
  8567  0A1A  084C               	movf	___fttol@sign1,w
  8568  0A1B  1903               	btfsc	3,2
  8569  0A1C  2A28               	goto	l3438
  8570  0A1D  09CD               	comf	___fttol@lval,f
  8571  0A1E  09CE               	comf	___fttol@lval+1,f
  8572  0A1F  09CF               	comf	___fttol@lval+2,f
  8573  0A20  09D0               	comf	___fttol@lval+3,f
  8574  0A21  0ACD               	incf	___fttol@lval,f
  8575  0A22  1903               	skipnz
  8576  0A23  0ACE               	incf	___fttol@lval+1,f
  8577  0A24  1903               	skipnz
  8578  0A25  0ACF               	incf	___fttol@lval+2,f
  8579  0A26  1903               	skipnz
  8580  0A27  0AD0               	incf	___fttol@lval+3,f
  8581  0A28                     l3438:	
  8582  0A28  0850               	movf	___fttol@lval+3,w
  8583  0A29  00C7               	movwf	?___fttol+3
  8584  0A2A  084F               	movf	___fttol@lval+2,w
  8585  0A2B  00C6               	movwf	?___fttol+2
  8586  0A2C  084E               	movf	___fttol@lval+1,w
  8587  0A2D  00C5               	movwf	?___fttol+1
  8588  0A2E  084D               	movf	___fttol@lval,w
  8589  0A2F  00C4               	movwf	?___fttol
  8590  0A30  0008               	return
  8591  0A31                     __end_of___fttol:	
  8592                           
  8593                           	psect	text39
  8594  168C                     __ptext39:	
  8595 ;; *************** function ___ftsub *****************
  8596 ;; Defined at:
  8597 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
  8598 ;; Parameters:    Size  Location     Type
  8599 ;;  f2              3   54[BANK0 ] float 
  8600 ;;  f1              3   57[BANK0 ] float 
  8601 ;; Auto vars:     Size  Location     Type
  8602 ;;		None
  8603 ;; Return value:  Size  Location     Type
  8604 ;;                  3   54[BANK0 ] float 
  8605 ;; Registers used:
  8606 ;;		wreg, status,2, status,0, pclath, cstack
  8607 ;; Tracked objects:
  8608 ;;		On entry : 0/0
  8609 ;;		On exit  : 0/0
  8610 ;;		Unchanged: 0/0
  8611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8612 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8615 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8616 ;;Total ram usage:        6 bytes
  8617 ;; Hardware stack levels used:    1
  8618 ;; Hardware stack levels required when called:    4
  8619 ;; This function calls:
  8620 ;;		___ftadd
  8621 ;; This function is called by:
  8622 ;;		_printf
  8623 ;; This function uses a non-reentrant model
  8624 ;;
  8625                           
  8626                           
  8627                           ;psect for function ___ftsub
  8628  168C                     ___ftsub:	
  8629                           
  8630                           ;incstack = 0
  8631                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  8632  168C  0020               	movlb	0	; select bank0
  8633  168D  0858               	movf	___ftsub@f2+2,w
  8634  168E  0457               	iorwf	___ftsub@f2+1,w
  8635  168F  0456               	iorwf	___ftsub@f2,w
  8636  1690  1903               	skipnz
  8637  1691  2E94               	goto	l3396
  8638  1692  3080               	movlw	128
  8639  1693  06D8               	xorwf	___ftsub@f2+2,f
  8640  1694                     l3396:	
  8641  1694  0859               	movf	___ftsub@f1,w
  8642  1695  00C9               	movwf	___ftadd@f1
  8643  1696  085A               	movf	___ftsub@f1+1,w
  8644  1697  00CA               	movwf	___ftadd@f1+1
  8645  1698  085B               	movf	___ftsub@f1+2,w
  8646  1699  00CB               	movwf	___ftadd@f1+2
  8647  169A  0856               	movf	___ftsub@f2,w
  8648  169B  00CC               	movwf	___ftadd@f2
  8649  169C  0857               	movf	___ftsub@f2+1,w
  8650  169D  00CD               	movwf	___ftadd@f2+1
  8651  169E  0858               	movf	___ftsub@f2+2,w
  8652  169F  00CE               	movwf	___ftadd@f2+2
  8653  16A0  318C  2488         	fcall	___ftadd
  8654  16A2  0020               	movlb	0	; select bank0
  8655  16A3  0849               	movf	?___ftadd,w
  8656  16A4  00D6               	movwf	?___ftsub
  8657  16A5  084A               	movf	?___ftadd+1,w
  8658  16A6  00D7               	movwf	?___ftsub+1
  8659  16A7  084B               	movf	?___ftadd+2,w
  8660  16A8  00D8               	movwf	?___ftsub+2
  8661  16A9  0008               	return
  8662  16AA                     __end_of___ftsub:	
  8663                           
  8664                           	psect	text40
  8665  0C88                     __ptext40:	
  8666 ;; *************** function ___ftadd *****************
  8667 ;; Defined at:
  8668 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
  8669 ;; Parameters:    Size  Location     Type
  8670 ;;  f1              3   41[BANK0 ] float 
  8671 ;;  f2              3   44[BANK0 ] float 
  8672 ;; Auto vars:     Size  Location     Type
  8673 ;;  exp1            1   53[BANK0 ] unsigned char 
  8674 ;;  exp2            1   52[BANK0 ] unsigned char 
  8675 ;;  sign            1   51[BANK0 ] unsigned char 
  8676 ;; Return value:  Size  Location     Type
  8677 ;;                  3   41[BANK0 ] float 
  8678 ;; Registers used:
  8679 ;;		wreg, status,2, status,0, pclath, cstack
  8680 ;; Tracked objects:
  8681 ;;		On entry : 0/0
  8682 ;;		On exit  : 0/0
  8683 ;;		Unchanged: 0/0
  8684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8685 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8686 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8687 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8688 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8689 ;;Total ram usage:       13 bytes
  8690 ;; Hardware stack levels used:    1
  8691 ;; Hardware stack levels required when called:    3
  8692 ;; This function calls:
  8693 ;;		___ftpack
  8694 ;; This function is called by:
  8695 ;;		_printf
  8696 ;;		___ftsub
  8697 ;; This function uses a non-reentrant model
  8698 ;;
  8699                           
  8700                           
  8701                           ;psect for function ___ftadd
  8702  0C88                     ___ftadd:	
  8703                           
  8704                           ;incstack = 0
  8705                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8706  0C88  0020               	movlb	0	; select bank0
  8707  0C89  0849               	movf	___ftadd@f1,w
  8708  0C8A  00CF               	movwf	??___ftadd
  8709  0C8B  084A               	movf	___ftadd@f1+1,w
  8710  0C8C  00D0               	movwf	??___ftadd+1
  8711  0C8D  084B               	movf	___ftadd@f1+2,w
  8712  0C8E  00D1               	movwf	??___ftadd+2
  8713  0C8F  1003               	clrc
  8714  0C90  0D50               	rlf	??___ftadd+1,w
  8715  0C91  0D51               	rlf	??___ftadd+2,w
  8716  0C92  00D2               	movwf	??___ftadd+3
  8717  0C93  0852               	movf	??___ftadd+3,w
  8718  0C94  00D5               	movwf	___ftadd@exp1
  8719  0C95  084C               	movf	___ftadd@f2,w
  8720  0C96  00CF               	movwf	??___ftadd
  8721  0C97  084D               	movf	___ftadd@f2+1,w
  8722  0C98  00D0               	movwf	??___ftadd+1
  8723  0C99  084E               	movf	___ftadd@f2+2,w
  8724  0C9A  00D1               	movwf	??___ftadd+2
  8725  0C9B  1003               	clrc
  8726  0C9C  0D50               	rlf	??___ftadd+1,w
  8727  0C9D  0D51               	rlf	??___ftadd+2,w
  8728  0C9E  00D2               	movwf	??___ftadd+3
  8729  0C9F  0852               	movf	??___ftadd+3,w
  8730  0CA0  00D4               	movwf	___ftadd@exp2
  8731  0CA1  0855               	movf	___ftadd@exp1,w
  8732  0CA2  1903               	btfsc	3,2
  8733  0CA3  2CB0               	goto	l3080
  8734  0CA4  0854               	movf	___ftadd@exp2,w
  8735  0CA5  0255               	subwf	___ftadd@exp1,w
  8736  0CA6  1803               	skipnc
  8737  0CA7  2CB7               	goto	l3084
  8738  0CA8  0355               	decf	___ftadd@exp1,w
  8739  0CA9  3AFF               	xorlw	255
  8740  0CAA  0754               	addwf	___ftadd@exp2,w
  8741  0CAB  00CF               	movwf	??___ftadd
  8742  0CAC  3019               	movlw	25
  8743  0CAD  024F               	subwf	??___ftadd,w
  8744  0CAE  1C03               	skipc
  8745  0CAF  2CB7               	goto	l3084
  8746  0CB0                     l3080:	
  8747  0CB0  084C               	movf	___ftadd@f2,w
  8748  0CB1  00C9               	movwf	?___ftadd
  8749  0CB2  084D               	movf	___ftadd@f2+1,w
  8750  0CB3  00CA               	movwf	?___ftadd+1
  8751  0CB4  084E               	movf	___ftadd@f2+2,w
  8752  0CB5  00CB               	movwf	?___ftadd+2
  8753  0CB6  0008               	return
  8754  0CB7                     l3084:	
  8755  0CB7  0854               	movf	___ftadd@exp2,w
  8756  0CB8  1903               	btfsc	3,2
  8757  0CB9  0008               	return
  8758  0CBA  0855               	movf	___ftadd@exp1,w
  8759  0CBB  0254               	subwf	___ftadd@exp2,w
  8760  0CBC  1803               	skipnc
  8761  0CBD  2CC6               	goto	l3090
  8762  0CBE  0354               	decf	___ftadd@exp2,w
  8763  0CBF  3AFF               	xorlw	255
  8764  0CC0  0755               	addwf	___ftadd@exp1,w
  8765  0CC1  00CF               	movwf	??___ftadd
  8766  0CC2  3019               	movlw	25
  8767  0CC3  024F               	subwf	??___ftadd,w
  8768  0CC4  1803               	btfsc	3,0
  8769  0CC5  0008               	return
  8770  0CC6                     l3090:	
  8771  0CC6  3006               	movlw	6
  8772  0CC7  00CF               	movwf	??___ftadd
  8773  0CC8  084F               	movf	??___ftadd,w
  8774  0CC9  00D3               	movwf	___ftadd@sign
  8775  0CCA  1BCB               	btfsc	___ftadd@f1+2,7
  8776  0CCB  17D3               	bsf	___ftadd@sign,7
  8777  0CCC  1BCE               	btfsc	___ftadd@f2+2,7
  8778  0CCD  1753               	bsf	___ftadd@sign,6
  8779  0CCE  17CA               	bsf	___ftadd@f1+1,7
  8780  0CCF  30FF               	movlw	255
  8781  0CD0  05C9               	andwf	___ftadd@f1,f
  8782  0CD1  30FF               	movlw	255
  8783  0CD2  05CA               	andwf	___ftadd@f1+1,f
  8784  0CD3  3000               	movlw	0
  8785  0CD4  05CB               	andwf	___ftadd@f1+2,f
  8786  0CD5  17CD               	bsf	___ftadd@f2+1,7
  8787  0CD6  30FF               	movlw	255
  8788  0CD7  05CC               	andwf	___ftadd@f2,f
  8789  0CD8  30FF               	movlw	255
  8790  0CD9  05CD               	andwf	___ftadd@f2+1,f
  8791  0CDA  3000               	movlw	0
  8792  0CDB  05CE               	andwf	___ftadd@f2+2,f
  8793  0CDC  0854               	movf	___ftadd@exp2,w
  8794  0CDD  0255               	subwf	___ftadd@exp1,w
  8795  0CDE  1803               	skipnc
  8796  0CDF  2D02               	goto	l3112
  8797  0CE0                     l3102:	
  8798  0CE0  3001               	movlw	1
  8799  0CE1                     u4605:	
  8800  0CE1  35CC               	lslf	___ftadd@f2,f
  8801  0CE2  0DCD               	rlf	___ftadd@f2+1,f
  8802  0CE3  0DCE               	rlf	___ftadd@f2+2,f
  8803  0CE4  0B89               	decfsz	9,f
  8804  0CE5  2CE1               	goto	u4605
  8805  0CE6  3001               	movlw	1
  8806  0CE7  02D4               	subwf	___ftadd@exp2,f
  8807  0CE8  0854               	movf	___ftadd@exp2,w
  8808  0CE9  0655               	xorwf	___ftadd@exp1,w
  8809  0CEA  1903               	skipnz
  8810  0CEB  2CFD               	goto	l3110
  8811  0CEC  3001               	movlw	1
  8812  0CED  02D3               	subwf	___ftadd@sign,f
  8813  0CEE  0853               	movf	___ftadd@sign,w
  8814  0CEF  3907               	andlw	7
  8815  0CF0  1903               	btfsc	3,2
  8816  0CF1  2CFD               	goto	l3110
  8817  0CF2  2CE0               	goto	l3102
  8818  0CF3                     l3108:	
  8819  0CF3  3001               	movlw	1
  8820  0CF4                     u4635:	
  8821  0CF4  36CB               	lsrf	___ftadd@f1+2,f
  8822  0CF5  0CCA               	rrf	___ftadd@f1+1,f
  8823  0CF6  0CC9               	rrf	___ftadd@f1,f
  8824  0CF7  0B89               	decfsz	9,f
  8825  0CF8  2CF4               	goto	u4635
  8826  0CF9  3001               	movlw	1
  8827  0CFA  00CF               	movwf	??___ftadd
  8828  0CFB  084F               	movf	??___ftadd,w
  8829  0CFC  07D5               	addwf	___ftadd@exp1,f
  8830  0CFD                     l3110:	
  8831  0CFD  0855               	movf	___ftadd@exp1,w
  8832  0CFE  0654               	xorwf	___ftadd@exp2,w
  8833  0CFF  1903               	btfsc	3,2
  8834  0D00  2D27               	goto	l667
  8835  0D01  2CF3               	goto	l3108
  8836  0D02                     l3112:	
  8837  0D02  0855               	movf	___ftadd@exp1,w
  8838  0D03  0254               	subwf	___ftadd@exp2,w
  8839  0D04  1803               	skipnc
  8840  0D05  2D27               	goto	l667
  8841  0D06                     l3114:	
  8842  0D06  3001               	movlw	1
  8843  0D07                     u4665:	
  8844  0D07  35C9               	lslf	___ftadd@f1,f
  8845  0D08  0DCA               	rlf	___ftadd@f1+1,f
  8846  0D09  0DCB               	rlf	___ftadd@f1+2,f
  8847  0D0A  0B89               	decfsz	9,f
  8848  0D0B  2D07               	goto	u4665
  8849  0D0C  3001               	movlw	1
  8850  0D0D  02D5               	subwf	___ftadd@exp1,f
  8851  0D0E  0854               	movf	___ftadd@exp2,w
  8852  0D0F  0655               	xorwf	___ftadd@exp1,w
  8853  0D10  1903               	skipnz
  8854  0D11  2D23               	goto	l3122
  8855  0D12  3001               	movlw	1
  8856  0D13  02D3               	subwf	___ftadd@sign,f
  8857  0D14  0853               	movf	___ftadd@sign,w
  8858  0D15  3907               	andlw	7
  8859  0D16  1903               	btfsc	3,2
  8860  0D17  2D23               	goto	l3122
  8861  0D18  2D06               	goto	l3114
  8862  0D19                     l3120:	
  8863  0D19  3001               	movlw	1
  8864  0D1A                     u4695:	
  8865  0D1A  36CE               	lsrf	___ftadd@f2+2,f
  8866  0D1B  0CCD               	rrf	___ftadd@f2+1,f
  8867  0D1C  0CCC               	rrf	___ftadd@f2,f
  8868  0D1D  0B89               	decfsz	9,f
  8869  0D1E  2D1A               	goto	u4695
  8870  0D1F  3001               	movlw	1
  8871  0D20  00CF               	movwf	??___ftadd
  8872  0D21  084F               	movf	??___ftadd,w
  8873  0D22  07D4               	addwf	___ftadd@exp2,f
  8874  0D23                     l3122:	
  8875  0D23  0855               	movf	___ftadd@exp1,w
  8876  0D24  0654               	xorwf	___ftadd@exp2,w
  8877  0D25  1D03               	skipz
  8878  0D26  2D19               	goto	l3120
  8879  0D27                     l667:	
  8880  0D27  1FD3               	btfss	___ftadd@sign,7
  8881  0D28  2D39               	goto	l3126
  8882  0D29  30FF               	movlw	255
  8883  0D2A  06C9               	xorwf	___ftadd@f1,f
  8884  0D2B  30FF               	movlw	255
  8885  0D2C  06CA               	xorwf	___ftadd@f1+1,f
  8886  0D2D  30FF               	movlw	255
  8887  0D2E  06CB               	xorwf	___ftadd@f1+2,f
  8888  0D2F  3001               	movlw	1
  8889  0D30  07C9               	addwf	___ftadd@f1,f
  8890  0D31  3000               	movlw	0
  8891  0D32  1803               	skipnc
  8892  0D33  3001               	movlw	1
  8893  0D34  07CA               	addwf	___ftadd@f1+1,f
  8894  0D35  3000               	movlw	0
  8895  0D36  1803               	skipnc
  8896  0D37  3001               	movlw	1
  8897  0D38  07CB               	addwf	___ftadd@f1+2,f
  8898  0D39                     l3126:	
  8899  0D39  1F53               	btfss	___ftadd@sign,6
  8900  0D3A  2D4B               	goto	l3130
  8901  0D3B  30FF               	movlw	255
  8902  0D3C  06CC               	xorwf	___ftadd@f2,f
  8903  0D3D  30FF               	movlw	255
  8904  0D3E  06CD               	xorwf	___ftadd@f2+1,f
  8905  0D3F  30FF               	movlw	255
  8906  0D40  06CE               	xorwf	___ftadd@f2+2,f
  8907  0D41  3001               	movlw	1
  8908  0D42  07CC               	addwf	___ftadd@f2,f
  8909  0D43  3000               	movlw	0
  8910  0D44  1803               	skipnc
  8911  0D45  3001               	movlw	1
  8912  0D46  07CD               	addwf	___ftadd@f2+1,f
  8913  0D47  3000               	movlw	0
  8914  0D48  1803               	skipnc
  8915  0D49  3001               	movlw	1
  8916  0D4A  07CE               	addwf	___ftadd@f2+2,f
  8917  0D4B                     l3130:	
  8918  0D4B  01D3               	clrf	___ftadd@sign
  8919  0D4C  0849               	movf	___ftadd@f1,w
  8920  0D4D  07CC               	addwf	___ftadd@f2,f
  8921  0D4E  084A               	movf	___ftadd@f1+1,w
  8922  0D4F  3DCD               	addwfc	___ftadd@f2+1,f
  8923  0D50  084B               	movf	___ftadd@f1+2,w
  8924  0D51  3DCE               	addwfc	___ftadd@f2+2,f
  8925  0D52  1FCE               	btfss	___ftadd@f2+2,7
  8926  0D53  2D66               	goto	l3140
  8927  0D54  30FF               	movlw	255
  8928  0D55  06CC               	xorwf	___ftadd@f2,f
  8929  0D56  30FF               	movlw	255
  8930  0D57  06CD               	xorwf	___ftadd@f2+1,f
  8931  0D58  30FF               	movlw	255
  8932  0D59  06CE               	xorwf	___ftadd@f2+2,f
  8933  0D5A  3001               	movlw	1
  8934  0D5B  07CC               	addwf	___ftadd@f2,f
  8935  0D5C  3000               	movlw	0
  8936  0D5D  1803               	skipnc
  8937  0D5E  3001               	movlw	1
  8938  0D5F  07CD               	addwf	___ftadd@f2+1,f
  8939  0D60  3000               	movlw	0
  8940  0D61  1803               	skipnc
  8941  0D62  3001               	movlw	1
  8942  0D63  07CE               	addwf	___ftadd@f2+2,f
  8943  0D64  01D3               	clrf	___ftadd@sign
  8944  0D65  0AD3               	incf	___ftadd@sign,f
  8945  0D66                     l3140:	
  8946  0D66  084C               	movf	___ftadd@f2,w
  8947  0D67  00F1               	movwf	___ftpack@arg
  8948  0D68  084D               	movf	___ftadd@f2+1,w
  8949  0D69  00F2               	movwf	___ftpack@arg+1
  8950  0D6A  084E               	movf	___ftadd@f2+2,w
  8951  0D6B  00F3               	movwf	___ftpack@arg+2
  8952  0D6C  0855               	movf	___ftadd@exp1,w
  8953  0D6D  00CF               	movwf	??___ftadd
  8954  0D6E  084F               	movf	??___ftadd,w
  8955  0D6F  00F4               	movwf	___ftpack@exp
  8956  0D70  0853               	movf	___ftadd@sign,w
  8957  0D71  00D0               	movwf	??___ftadd+1
  8958  0D72  0850               	movf	??___ftadd+1,w
  8959  0D73  00F5               	movwf	___ftpack@sign
  8960  0D74  3189  2146         	fcall	___ftpack
  8961  0D76  0871               	movf	?___ftpack,w
  8962  0D77  0020               	movlb	0	; select bank0
  8963  0D78  00C9               	movwf	?___ftadd
  8964  0D79  0872               	movf	?___ftpack+1,w
  8965  0D7A  00CA               	movwf	?___ftadd+1
  8966  0D7B  0873               	movf	?___ftpack+2,w
  8967  0D7C  00CB               	movwf	?___ftadd+2
  8968  0D7D  0008               	return
  8969  0D7E                     __end_of___ftadd:	
  8970                           
  8971                           	psect	text41
  8972  0946                     __ptext41:	
  8973 ;; *************** function ___ftpack *****************
  8974 ;; Defined at:
  8975 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
  8976 ;; Parameters:    Size  Location     Type
  8977 ;;  arg             3    1[COMMON] unsigned um
  8978 ;;  exp             1    4[COMMON] unsigned char 
  8979 ;;  sign            1    5[COMMON] unsigned char 
  8980 ;; Auto vars:     Size  Location     Type
  8981 ;;		None
  8982 ;; Return value:  Size  Location     Type
  8983 ;;                  3    1[COMMON] float 
  8984 ;; Registers used:
  8985 ;;		wreg, status,2, status,0
  8986 ;; Tracked objects:
  8987 ;;		On entry : 0/0
  8988 ;;		On exit  : 0/0
  8989 ;;		Unchanged: 0/0
  8990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8991 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8993 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8994 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8995 ;;Total ram usage:        8 bytes
  8996 ;; Hardware stack levels used:    1
  8997 ;; Hardware stack levels required when called:    2
  8998 ;; This function calls:
  8999 ;;		Nothing
  9000 ;; This function is called by:
  9001 ;;		___awtoft
  9002 ;;		___ftadd
  9003 ;;		___ftdiv
  9004 ;;		___ftmul
  9005 ;;		___lltoft
  9006 ;; This function uses a non-reentrant model
  9007 ;;
  9008                           
  9009                           
  9010                           ;psect for function ___ftpack
  9011  0946                     ___ftpack:	
  9012                           
  9013                           ;incstack = 0
  9014                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  9015  0946  0874               	movf	___ftpack@exp,w
  9016  0947  1903               	btfsc	3,2
  9017  0948  294E               	goto	l2946
  9018  0949  0873               	movf	___ftpack@arg+2,w
  9019  094A  0472               	iorwf	___ftpack@arg+1,w
  9020  094B  0471               	iorwf	___ftpack@arg,w
  9021  094C  1D03               	skipz
  9022  094D  295F               	goto	l2952
  9023  094E                     l2946:	
  9024  094E  3000               	movlw	0
  9025  094F  00F1               	movwf	?___ftpack
  9026  0950  3000               	movlw	0
  9027  0951  00F2               	movwf	?___ftpack+1
  9028  0952  3000               	movlw	0
  9029  0953  00F3               	movwf	?___ftpack+2
  9030  0954  0008               	return
  9031  0955                     l2950:	
  9032  0955  3001               	movlw	1
  9033  0956  00F6               	movwf	??___ftpack
  9034  0957  0876               	movf	??___ftpack,w
  9035  0958  07F4               	addwf	___ftpack@exp,f
  9036  0959  3001               	movlw	1
  9037  095A                     u4175:	
  9038  095A  36F3               	lsrf	___ftpack@arg+2,f
  9039  095B  0CF2               	rrf	___ftpack@arg+1,f
  9040  095C  0CF1               	rrf	___ftpack@arg,f
  9041  095D  0B89               	decfsz	9,f
  9042  095E  295A               	goto	u4175
  9043  095F                     l2952:	
  9044  095F  30FE               	movlw	254
  9045  0960  0573               	andwf	___ftpack@arg+2,w
  9046  0961  1903               	btfsc	3,2
  9047  0962  2978               	goto	l636
  9048  0963  2955               	goto	l2950
  9049  0964                     l2954:	
  9050  0964  3001               	movlw	1
  9051  0965  00F6               	movwf	??___ftpack
  9052  0966  0876               	movf	??___ftpack,w
  9053  0967  07F4               	addwf	___ftpack@exp,f
  9054  0968  3001               	movlw	1
  9055  0969  07F1               	addwf	___ftpack@arg,f
  9056  096A  3000               	movlw	0
  9057  096B  1803               	skipnc
  9058  096C  3001               	movlw	1
  9059  096D  07F2               	addwf	___ftpack@arg+1,f
  9060  096E  3000               	movlw	0
  9061  096F  1803               	skipnc
  9062  0970  3001               	movlw	1
  9063  0971  07F3               	addwf	___ftpack@arg+2,f
  9064  0972  3001               	movlw	1
  9065  0973                     u4195:	
  9066  0973  36F3               	lsrf	___ftpack@arg+2,f
  9067  0974  0CF2               	rrf	___ftpack@arg+1,f
  9068  0975  0CF1               	rrf	___ftpack@arg,f
  9069  0976  0B89               	decfsz	9,f
  9070  0977  2973               	goto	u4195
  9071  0978                     l636:	
  9072  0978  30FF               	movlw	255
  9073  0979  0573               	andwf	___ftpack@arg+2,w
  9074  097A  1903               	btfsc	3,2
  9075  097B  2985               	goto	l2962
  9076  097C  2964               	goto	l2954
  9077  097D                     l2960:	
  9078  097D  3001               	movlw	1
  9079  097E  02F4               	subwf	___ftpack@exp,f
  9080  097F  3001               	movlw	1
  9081  0980                     u4215:	
  9082  0980  35F1               	lslf	___ftpack@arg,f
  9083  0981  0DF2               	rlf	___ftpack@arg+1,f
  9084  0982  0DF3               	rlf	___ftpack@arg+2,f
  9085  0983  0B89               	decfsz	9,f
  9086  0984  2980               	goto	u4215
  9087  0985                     l2962:	
  9088  0985  1BF2               	btfsc	___ftpack@arg+1,7
  9089  0986  298B               	goto	l643
  9090  0987  3002               	movlw	2
  9091  0988  0274               	subwf	___ftpack@exp,w
  9092  0989  1803               	skipnc
  9093  098A  297D               	goto	l2960
  9094  098B                     l643:	
  9095  098B  1874               	btfsc	___ftpack@exp,0
  9096  098C  2993               	goto	l644
  9097  098D  30FF               	movlw	255
  9098  098E  05F1               	andwf	___ftpack@arg,f
  9099  098F  307F               	movlw	127
  9100  0990  05F2               	andwf	___ftpack@arg+1,f
  9101  0991  30FF               	movlw	255
  9102  0992  05F3               	andwf	___ftpack@arg+2,f
  9103  0993                     l644:	
  9104  0993  1003               	clrc
  9105  0994  0CF4               	rrf	___ftpack@exp,f
  9106  0995  0874               	movf	___ftpack@exp,w
  9107  0996  00F6               	movwf	??___ftpack
  9108  0997  01F7               	clrf	??___ftpack+1
  9109  0998  01F8               	clrf	??___ftpack+2
  9110  0999  3010               	movlw	16
  9111  099A                     u4255:	
  9112  099A  35F6               	lslf	??___ftpack,f
  9113  099B  0DF7               	rlf	??___ftpack+1,f
  9114  099C  0DF8               	rlf	??___ftpack+2,f
  9115  099D  0B89               	decfsz	9,f
  9116  099E  299A               	goto	u4255
  9117  099F  0876               	movf	??___ftpack,w
  9118  09A0  04F1               	iorwf	___ftpack@arg,f
  9119  09A1  0877               	movf	??___ftpack+1,w
  9120  09A2  04F2               	iorwf	___ftpack@arg+1,f
  9121  09A3  0878               	movf	??___ftpack+2,w
  9122  09A4  04F3               	iorwf	___ftpack@arg+2,f
  9123  09A5  0875               	movf	___ftpack@sign,w
  9124  09A6  1903               	btfsc	3,2
  9125  09A7  0008               	return
  9126  09A8  17F3               	bsf	___ftpack@arg+2,7
  9127  09A9  0008               	return
  9128  09AA                     __end_of___ftpack:	
  9129                           
  9130                           	psect	text42
  9131  1591                     __ptext42:	
  9132 ;; *************** function ___ftneg *****************
  9133 ;; Defined at:
  9134 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
  9135 ;; Parameters:    Size  Location     Type
  9136 ;;  f1              3    1[COMMON] float 
  9137 ;; Auto vars:     Size  Location     Type
  9138 ;;		None
  9139 ;; Return value:  Size  Location     Type
  9140 ;;                  3    1[COMMON] float 
  9141 ;; Registers used:
  9142 ;;		wreg
  9143 ;; Tracked objects:
  9144 ;;		On entry : 0/0
  9145 ;;		On exit  : 0/0
  9146 ;;		Unchanged: 0/0
  9147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9148 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9151 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9152 ;;Total ram usage:        3 bytes
  9153 ;; Hardware stack levels used:    1
  9154 ;; Hardware stack levels required when called:    2
  9155 ;; This function calls:
  9156 ;;		Nothing
  9157 ;; This function is called by:
  9158 ;;		_printf
  9159 ;; This function uses a non-reentrant model
  9160 ;;
  9161                           
  9162                           
  9163                           ;psect for function ___ftneg
  9164  1591                     ___ftneg:	
  9165                           
  9166                           ;incstack = 0
  9167                           ; Regs used in ___ftneg: [wreg]
  9168  1591  0873               	movf	___ftneg@f1+2,w
  9169  1592  0472               	iorwf	___ftneg@f1+1,w
  9170  1593  0471               	iorwf	___ftneg@f1,w
  9171  1594  1903               	skipnz
  9172  1595  0008               	return
  9173  1596  3080               	movlw	128
  9174  1597  06F3               	xorwf	___ftneg@f1+2,f
  9175  1598  0008               	return
  9176  1599                     __end_of___ftneg:	
  9177                           
  9178                           	psect	text43
  9179  1788                     __ptext43:	
  9180 ;; *************** function ___ftge *****************
  9181 ;; Defined at:
  9182 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
  9183 ;; Parameters:    Size  Location     Type
  9184 ;;  ff1             3    1[COMMON] float 
  9185 ;;  ff2             3    4[COMMON] float 
  9186 ;; Auto vars:     Size  Location     Type
  9187 ;;		None
  9188 ;; Return value:  Size  Location     Type
  9189 ;;		None               void
  9190 ;; Registers used:
  9191 ;;		wreg, status,2, status,0
  9192 ;; Tracked objects:
  9193 ;;		On entry : 0/0
  9194 ;;		On exit  : 0/0
  9195 ;;		Unchanged: 0/0
  9196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9197 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9199 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9200 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9201 ;;Total ram usage:        9 bytes
  9202 ;; Hardware stack levels used:    1
  9203 ;; Hardware stack levels required when called:    2
  9204 ;; This function calls:
  9205 ;;		Nothing
  9206 ;; This function is called by:
  9207 ;;		_RadioOperation
  9208 ;;		_printf
  9209 ;; This function uses a non-reentrant model
  9210 ;;
  9211                           
  9212                           
  9213                           ;psect for function ___ftge
  9214  1788                     ___ftge:	
  9215                           
  9216                           ;incstack = 0
  9217                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  9218  1788  1FF3               	btfss	___ftge@ff1+2,7
  9219  1789  2F9E               	goto	l3368
  9220  178A  0971               	comf	___ftge@ff1,w
  9221  178B  00F7               	movwf	??___ftge
  9222  178C  0972               	comf	___ftge@ff1+1,w
  9223  178D  00F8               	movwf	??___ftge+1
  9224  178E  0973               	comf	___ftge@ff1+2,w
  9225  178F  00F9               	movwf	??___ftge+2
  9226  1790  0AF7               	incf	??___ftge,f
  9227  1791  1903               	skipnz
  9228  1792  0AF8               	incf	??___ftge+1,f
  9229  1793  1903               	skipnz
  9230  1794  0AF9               	incf	??___ftge+2,f
  9231  1795  3000               	movlw	0
  9232  1796  0777               	addwf	??___ftge,w
  9233  1797  00F1               	movwf	___ftge@ff1
  9234  1798  3000               	movlw	0
  9235  1799  3D78               	addwfc	??___ftge+1,w
  9236  179A  00F2               	movwf	___ftge@ff1+1
  9237  179B  3080               	movlw	128
  9238  179C  3D79               	addwfc	??___ftge+2,w
  9239  179D  00F3               	movwf	___ftge@ff1+2
  9240  179E                     l3368:	
  9241  179E  1FF6               	btfss	___ftge@ff2+2,7
  9242  179F  2FB4               	goto	l3372
  9243  17A0  0974               	comf	___ftge@ff2,w
  9244  17A1  00F7               	movwf	??___ftge
  9245  17A2  0975               	comf	___ftge@ff2+1,w
  9246  17A3  00F8               	movwf	??___ftge+1
  9247  17A4  0976               	comf	___ftge@ff2+2,w
  9248  17A5  00F9               	movwf	??___ftge+2
  9249  17A6  0AF7               	incf	??___ftge,f
  9250  17A7  1903               	skipnz
  9251  17A8  0AF8               	incf	??___ftge+1,f
  9252  17A9  1903               	skipnz
  9253  17AA  0AF9               	incf	??___ftge+2,f
  9254  17AB  3000               	movlw	0
  9255  17AC  0777               	addwf	??___ftge,w
  9256  17AD  00F4               	movwf	___ftge@ff2
  9257  17AE  3000               	movlw	0
  9258  17AF  3D78               	addwfc	??___ftge+1,w
  9259  17B0  00F5               	movwf	___ftge@ff2+1
  9260  17B1  3080               	movlw	128
  9261  17B2  3D79               	addwfc	??___ftge+2,w
  9262  17B3  00F6               	movwf	___ftge@ff2+2
  9263  17B4                     l3372:	
  9264  17B4  3080               	movlw	128
  9265  17B5  06F3               	xorwf	___ftge@ff1+2,f
  9266  17B6  3080               	movlw	128
  9267  17B7  06F6               	xorwf	___ftge@ff2+2,f
  9268  17B8  0876               	movf	___ftge@ff2+2,w
  9269  17B9  0273               	subwf	___ftge@ff1+2,w
  9270  17BA  1D03               	skipz
  9271  17BB  0008               	return
  9272  17BC  0875               	movf	___ftge@ff2+1,w
  9273  17BD  0272               	subwf	___ftge@ff1+1,w
  9274  17BE  1D03               	skipz
  9275  17BF  0008               	return
  9276  17C0  0874               	movf	___ftge@ff2,w
  9277  17C1  0271               	subwf	___ftge@ff1,w
  9278  17C2  0008               	return
  9279  17C3                     __end_of___ftge:	
  9280                           
  9281                           	psect	text44
  9282  161F                     __ptext44:	
  9283 ;; *************** function _Delay *****************
  9284 ;; Defined at:
  9285 ;;		line 71 in file "Function.c"
  9286 ;; Parameters:    Size  Location     Type
  9287 ;;  wait            2    1[COMMON] int 
  9288 ;; Auto vars:     Size  Location     Type
  9289 ;;  x               2    4[COMMON] int 
  9290 ;; Return value:  Size  Location     Type
  9291 ;;                  1    wreg      void 
  9292 ;; Registers used:
  9293 ;;		wreg, status,2
  9294 ;; Tracked objects:
  9295 ;;		On entry : 0/0
  9296 ;;		On exit  : 0/0
  9297 ;;		Unchanged: 0/0
  9298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9299 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9300 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9301 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9302 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9303 ;;Total ram usage:        5 bytes
  9304 ;; Hardware stack levels used:    1
  9305 ;; Hardware stack levels required when called:    2
  9306 ;; This function calls:
  9307 ;;		Nothing
  9308 ;; This function is called by:
  9309 ;;		_main
  9310 ;;		_SR_FRSStart
  9311 ;; This function uses a non-reentrant model
  9312 ;;
  9313                           
  9314                           
  9315                           ;psect for function _Delay
  9316  161F                     _Delay:	
  9317                           
  9318                           ;Function.c: 72: int x;
  9319                           ;Function.c: 73: for (x = 0; x < wait; x++) {
  9320                           
  9321                           ;incstack = 0
  9322                           ; Regs used in _Delay: [wreg+status,2]
  9323  161F  01F4               	clrf	Delay@x
  9324  1620  01F5               	clrf	Delay@x+1
  9325  1621                     l60:	
  9326  1621  0875               	movf	Delay@x+1,w
  9327  1622  3A80               	xorlw	128
  9328  1623  00F3               	movwf	??_Delay
  9329  1624  0872               	movf	Delay@wait+1,w
  9330  1625  3A80               	xorlw	128
  9331  1626  0273               	subwf	??_Delay,w
  9332  1627  1D03               	skipz
  9333  1628  2E2B               	goto	u3735
  9334  1629  0871               	movf	Delay@wait,w
  9335  162A  0274               	subwf	Delay@x,w
  9336  162B                     u3735:	
  9337  162B  1803               	btfsc	3,0
  9338  162C  0008               	return
  9339                           
  9340                           ;Function.c: 74: _delay((unsigned long)((1)*(4000000/4000.0)));
  9341  162D  30F9               	movlw	249
  9342  162E  00F3               	movwf	??_Delay
  9343  162F                     u6087:	
  9344  162F  0000               	nop
  9345  1630  0BF3               	decfsz	??_Delay,f
  9346  1631  2E2F               	goto	u6087
  9347  1632  3200               	nop2	;nop
  9348  1633  0000               	nop
  9349  1634  3001               	movlw	1
  9350  1635  07F4               	addwf	Delay@x,f
  9351  1636  3000               	movlw	0
  9352  1637  3DF5               	addwfc	Delay@x+1,f
  9353  1638  2E21               	goto	l60
  9354  1639                     __end_of_Delay:	
  9355                           
  9356                           	psect	text45
  9357  157E                     __ptext45:	
  9358 ;; *************** function _LEDOff *****************
  9359 ;; Defined at:
  9360 ;;		line 119 in file "Function.c"
  9361 ;; Parameters:    Size  Location     Type
  9362 ;;		None
  9363 ;; Auto vars:     Size  Location     Type
  9364 ;;		None
  9365 ;; Return value:  Size  Location     Type
  9366 ;;                  1    wreg      void 
  9367 ;; Registers used:
  9368 ;;		None
  9369 ;; Tracked objects:
  9370 ;;		On entry : 0/0
  9371 ;;		On exit  : 0/0
  9372 ;;		Unchanged: 0/0
  9373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9377 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9378 ;;Total ram usage:        0 bytes
  9379 ;; Hardware stack levels used:    1
  9380 ;; Hardware stack levels required when called:    2
  9381 ;; This function calls:
  9382 ;;		Nothing
  9383 ;; This function is called by:
  9384 ;;		_main
  9385 ;; This function uses a non-reentrant model
  9386 ;;
  9387                           
  9388                           
  9389                           ;psect for function _LEDOff
  9390  157E                     _LEDOff:	
  9391                           
  9392                           ;Function.c: 120: PORTCbits.RC3 = 0;
  9393                           
  9394                           ;incstack = 0
  9395                           ; Regs used in _LEDOff: []
  9396  157E  0020               	movlb	0	; select bank0
  9397  157F  118E               	bcf	14,3	;volatile
  9398                           
  9399                           ;Function.c: 121: PORTCbits.RC5 = 0;
  9400  1580  128E               	bcf	14,5	;volatile
  9401                           
  9402                           ;Function.c: 122: PORTCbits.RC4 = 0;
  9403  1581  120E               	bcf	14,4	;volatile
  9404  1582  0008               	return
  9405  1583                     __end_of_LEDOff:	
  9406                           
  9407                           	psect	intentry
  9408  0004                     __pintentry:	
  9409 ;; *************** function _INTERRUPT_InterruptManager *****************
  9410 ;; Defined at:
  9411 ;;		line 89 in file "Function.c"
  9412 ;; Parameters:    Size  Location     Type
  9413 ;;		None
  9414 ;; Auto vars:     Size  Location     Type
  9415 ;;		None
  9416 ;; Return value:  Size  Location     Type
  9417 ;;                  1    wreg      void 
  9418 ;; Registers used:
  9419 ;;		wreg, status,2, status,0, pclath, cstack
  9420 ;; Tracked objects:
  9421 ;;		On entry : 0/0
  9422 ;;		On exit  : 0/0
  9423 ;;		Unchanged: 0/0
  9424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9427 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9428 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9429 ;;Total ram usage:        1 bytes
  9430 ;; Hardware stack levels used:    1
  9431 ;; Hardware stack levels required when called:    1
  9432 ;; This function calls:
  9433 ;;		_TMR2_ISR
  9434 ;; This function is called by:
  9435 ;;		Interrupt level 1
  9436 ;; This function uses a non-reentrant model
  9437 ;;
  9438                           
  9439  0004                     _INTERRUPT_InterruptManager:	
  9440                           
  9441                           ;incstack = 0
  9442                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
  9443  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9444  0005  3180               	pagesel	$
  9445  0006  0020               	movlb	0	; select bank0
  9446  0007  087F               	movf	127,w
  9447  0008  00F0               	movwf	??_INTERRUPT_InterruptManager
  9448                           
  9449                           ;Function.c: 91: if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
  9450  0009  0021               	movlb	1	; select bank1
  9451  000A  1C91               	btfss	17,1	;volatile
  9452  000B  2811               	goto	i1l71
  9453  000C  0020               	movlb	0	; select bank0
  9454  000D  1C91               	btfss	17,1	;volatile
  9455  000E  2811               	goto	i1l71
  9456                           
  9457                           ;Function.c: 92: {
  9458                           ;Function.c: 93: TMR2_ISR();
  9459  000F  3195  2589         	fcall	_TMR2_ISR
  9460  0011                     i1l71:	
  9461                           ;Function.c: 95: else
  9462                           ;Function.c: 96: {
  9463                           
  9464                           ;Function.c: 94: }
  9465                           
  9466  0011  0870               	movf	??_INTERRUPT_InterruptManager,w
  9467  0012  0020               	movlb	0	; select bank0
  9468  0013  00FF               	movwf	127
  9469  0014  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9470  0015  0009               	retfie
  9471  0016                     __end_of_INTERRUPT_InterruptManager:	
  9472                           
  9473                           	psect	text47
  9474  1589                     __ptext47:	
  9475 ;; *************** function _TMR2_ISR *****************
  9476 ;; Defined at:
  9477 ;;		line 48 in file "Timer.c"
  9478 ;; Parameters:    Size  Location     Type
  9479 ;;		None
  9480 ;; Auto vars:     Size  Location     Type
  9481 ;;		None
  9482 ;; Return value:  Size  Location     Type
  9483 ;;                  1    wreg      void 
  9484 ;; Registers used:
  9485 ;;		wreg
  9486 ;; Tracked objects:
  9487 ;;		On entry : 0/0
  9488 ;;		On exit  : 0/0
  9489 ;;		Unchanged: 0/0
  9490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9494 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9495 ;;Total ram usage:        0 bytes
  9496 ;; Hardware stack levels used:    1
  9497 ;; This function calls:
  9498 ;;		Nothing
  9499 ;; This function is called by:
  9500 ;;		_INTERRUPT_InterruptManager
  9501 ;; This function uses a non-reentrant model
  9502 ;;
  9503                           
  9504                           
  9505                           ;psect for function _TMR2_ISR
  9506  1589                     _TMR2_ISR:	
  9507                           
  9508                           ;Timer.c: 51: ticker++;
  9509                           
  9510                           ;incstack = 0
  9511                           ; Regs used in _TMR2_ISR: [wreg]
  9512  1589  3001               	movlw	1
  9513  158A  0021               	movlb	1	; select bank1
  9514  158B  07BF               	addwf	_ticker^(0+128),f
  9515  158C  3000               	movlw	0
  9516  158D  3DC0               	addwfc	(_ticker+1)^(0+128),f
  9517                           
  9518                           ;Timer.c: 53: PIR1bits.TMR2IF = 0;
  9519  158E  0020               	movlb	0	; select bank0
  9520  158F  1091               	bcf	17,1	;volatile
  9521  1590  0008               	return
  9522  1591                     __end_of_TMR2_ISR:	
  9523  007E                     btemp	set	126	;btemp
  9524  007E                     int$flags	set	126
  9525  007E                     wtemp	set	126
  9526  007E                     wtemp0	set	126
  9527  0080                     wtemp1	set	128
  9528  0082                     wtemp2	set	130
  9529  0084                     wtemp3	set	132
  9530  0086                     wtemp4	set	134
  9531  0088                     wtemp5	set	136
  9532  007F                     wtemp6	set	127
  9533  007E                     ttemp	set	126
  9534  007E                     ttemp0	set	126
  9535  0081                     ttemp1	set	129
  9536  0084                     ttemp2	set	132
  9537  0087                     ttemp3	set	135
  9538  007F                     ttemp4	set	127
  9539  007E                     ltemp	set	126
  9540  007E                     ltemp0	set	126
  9541  0082                     ltemp1	set	130
  9542  0086                     ltemp2	set	134
  9543  0080                     ltemp3	set	128


Data Sizes:
    Strings     113
    Constant    118
    Data        1
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     80      80
    BANK1            80     32      70
    BANK2            80      0      26
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 36
		 -> STR_6(CODE[22]), STR_5(CODE[19]), STR_4(CODE[19]), STR_3(CODE[22]), 
		 -> STR_2(CODE[36]), STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 


Critical Paths under _main in COMMON

    _RadioOperation->___awtoft
    ___awtoft->___ftpack
    _ReadVoltage->_SetADCChannel
    _printf->___awdiv
    _printf->___llmod
    _scale->___awdiv
    _putch->_EUSART_Write
    _fround->___awdiv
    ___wmul->___awdiv
    ___ftmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    _RadioOperation->___ftdiv
    ___ftdiv->___ftmul
    _SR_FRSStart->_SetMIC
    _SR_FRSStart->_SetVOX
    _SR_FRSStart->_SetVolume
    _SetVolume->_printf
    _SetVOX->_printf
    _SetPowerSave->_printf
    _SetMIC->_printf
    _SetFrequency->_printf
    _SetCommandMode->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _SR_FRSStart->_SetMIC
    _SetVolume->_printf
    _SetVOX->_printf
    _SetPowerSave->_printf
    _SetMIC->_printf
    _SetFrequency->_printf
    _SetCommandMode->_printf

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  300124
                              _Delay
                             _LEDOff
                         _RadioBegin
                     _RadioOperation
                              _Start
 ---------------------------------------------------------------------------------
 (1) _Start                                                0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RadioOperation                                       1     1      0   10506
                                             43 BANK0      1     1      0
                        _ClearTicker
                          _GetTicker
                        _ReadCharger
                        _ReadVoltage
                    _SR_FRSPowerDown
                         _SR_FRSTalk
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2678
                                             27 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    2326
                                              9 COMMON     3     0      3
                                              0 BANK0      3     3      0
                        _ReadVoltage (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _SR_FRSTalk                                           1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SR_FRSPowerDown                                      1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ReadVoltage                                          4     1      3      88
                                              2 COMMON     4     1      3
                      _SetADCChannel
 ---------------------------------------------------------------------------------
 (3) _SetADCChannel                                        1     1      0      66
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ReadCharger                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetTicker                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ClearTicker                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RadioBegin                                           0     0      0  289254
                        _SR_FRSStart
 ---------------------------------------------------------------------------------
 (2) _SR_FRSStart                                          0     0      0  289254
                              _Delay
                     _SetCommandMode
                       _SetFrequency
                             _SetMIC
                       _SetPowerSave
                             _SetVOX
                          _SetVolume
 ---------------------------------------------------------------------------------
 (3) _SetVolume                                            3     3      0   48168
                                             78 BANK0      2     2      0
                                             28 BANK1      1     1      0
                             _printf
 ---------------------------------------------------------------------------------
 (3) _SetVOX                                               3     1      2   48233
                                             78 BANK0      2     0      2
                                             28 BANK1      1     1      0
                             _printf
 ---------------------------------------------------------------------------------
 (3) _SetPowerSave                                         0     0      0   48075
                             _printf
 ---------------------------------------------------------------------------------
 (3) _SetMIC                                               6     5      1   48264
                                             78 BANK0      2     1      1
                                             28 BANK1      4     4      0
                             _printf
 ---------------------------------------------------------------------------------
 (3) _SetFrequency                                         0     0      0   48075
                             _printf
 ---------------------------------------------------------------------------------
 (3) _SetCommandMode                                       0     0      0   48075
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              53    35     18   48075
                                             60 BANK0     18     0     18
                                              0 BANK1     28    28      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (5) _scale                                               12     9      3   11217
                                             27 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0      62
                                              2 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART_Write                                         1     1      0      31
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _fround                                              17    14      3   10938
                                             27 BANK0     14    11      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    2606
                                              5 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    4566
                                             11 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              7     3      4    1603
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              9     5      4    1745
                                              8 COMMON     4     0      4
                                              0 BANK0      5     5      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) __tdiv_to_l_                                         16    10      6     584
                                              1 COMMON    10     4      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (5) __div_to_l_                                          20    14      6     803
                                              1 COMMON     6     0      6
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (5) ___lltoft                                             6     2      4    2295
                                              9 COMMON     2     2      0
                                              0 BANK0      4     0      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___llmod                                             10     2      8     752
                                             10 COMMON     2     2      0
                                              5 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             14     6      8     631
                                              1 COMMON     9     1      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             14    10      4     566
                                             36 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftsub                                              6     0      6    3839
                                             54 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftadd                                             13     7      6    3613
                                             41 BANK0     13     7      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2128
                                              1 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3     130
                                              1 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     848
                                              1 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (3) _Delay                                                5     3      2     364
                                              1 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _LEDOff                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           1     1      0       0
                                              0 COMMON     1     1      0
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR2_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay
   _LEDOff
   _RadioBegin
     _SR_FRSStart
       _Delay
       _SetCommandMode
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _EUSART_Write
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _SetFrequency
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _EUSART_Write
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _SetMIC
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _EUSART_Write
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _SetPowerSave
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _EUSART_Write
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _SetVOX
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _EUSART_Write
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _SetVolume
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
             _EUSART_Write
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _RadioOperation
     _ClearTicker
     _GetTicker
     _ReadCharger
     _ReadVoltage
       _SetADCChannel
     _SR_FRSPowerDown
     _SR_FRSTalk
     ___awtoft
       _ReadVoltage (ARG)
         _SetADCChannel
       ___ftpack (ARG)
     ___ftdiv
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _Start
     _ADC_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _TMR2_Initialize

 _INTERRUPT_InterruptManager (ROOT)
   _TMR2_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     20      46       7       87.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      1A       9       32.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      BD      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      BD      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Thu Aug 11 15:48:36 2016

                         __CFG_CP$ON 0000                                   l60 1621  
                                 l74 1601                                   l76 1606  
                        __CFG_CPD$ON 0000                         ___awdiv@sign 0022  
                ___wmul@multiplicand 0027                         ___ftadd@exp1 0055  
                       ___ftadd@exp2 0054                          __CFG_LVP$ON 0000  
                       ___ftadd@sign 0053                                  l150 159A  
                                l330 018E                                  l322 005B  
                                l243 0BA6                                  l270 15E5  
                                l374 050F                                  l703 0B8F  
                                l624 0E8F                                  l458 165D  
                                l643 098B                                  l644 0993  
                                l636 0978                                  l744 0A17  
                                l667 0D27                                  l693 0B16  
                         _SR_FRSTalk 15EC                                  _PR2 001B  
                      _SetADCChannel 16AA                         ___awmod@sign 0077  
                    _TMR2_Initialize 15BD                         __CFG_BORV$LO 0000  
                                wreg 0009                         ___ftdiv@cntr 0045  
                       ___ftdiv@sign 004A                                 l3000 08AC  
                               l3110 0CFD                                 l3102 0CE0  
                               l3006 08B7                                 l3120 0D19  
                               l3112 0D02                                 l3032 08EE  
                               l3024 08DD                                 l3016 08BF  
                               l3130 0D4B                                 l3122 0D23  
                               l3114 0D06                                 l3018 08CB  
                               l3140 0D66                                 l3108 0CF3  
                               l3028 08E6                                 l3044 0866  
                               l3126 0D39                                 l3070 089C  
                               l3062 088B                                 l3150 0A48  
                               l3214 0FD3                                 l3206 0F5B  
                               l3230 05B9                                 l3080 0CB0  
                               l3304 0B86                                 l3056 0873  
                               l3048 086D                                 l3240 0635  
                               l3090 0CC6                                 l3322 0DB9  
                               l3306 0B92                                 l3058 087F  
                               l3066 0894                                 l3084 0CB7  
                               l3340 0E4C                                 l3332 0E04  
                               l3316 0D9C                                 l3180 0AB5  
                               l3172 0AA1                                 l3156 0A5E  
                               l3236 0618                                 l3406 09C3  
                               l3350 0E6B                                 l3254 0737  
                               l3502 0057                                 l3432 0A0E  
                               l3424 09F3                                 l3360 0E92  
                               l3352 0E79                                 l3264 0AFE  
                               l3184 0ABD                                 l3168 0A99  
                               l3248 06D8                                 l3504 005D  
                               l3512 006D                                 l3434 0A1A  
                               l3426 0A01                                 l3450 0912  
                               l3514 0090                                 l2730 16BE  
                               l3372 17B4                                 l3612 033C  
                               l3508 0068                                 l3438 0A28  
                               l3462 093D                                 l3358 0E86  
                               l3286 0B51                                 l3278 0B37  
                               l3606 02D2                                 l2726 16B4  
                               l3368 179E                                 l3448 0904  
                               l3472 0822                                 l3296 0B6B  
                               l3640 0453                                 l3624 036B  
                               l3608 0333                                 l3552 0177  
                               l3544 012A                                 l3528 00D2  
                               l3458 0932                                 l3474 0830  
                               l3482 0853                                 l3490 1761  
                               l3298 0B79                                 l3618 0356  
                               l3570 0208                                 l3642 0458  
                               l3810 0BED                                 l3396 1694  
                               l3492 1773                                 l3652 047D  
                               l3636 044A                                 l3580 023C  
                               l2756 160B                                 l3804 0BE2  
                               l2950 0955                                 l3478 0848  
                               l3590 0297                                 l3566 01F4  
                               l3558 01C1                                 l3726 16D3  
                               l3742 0781                                 l2960 097D  
                               l2952 095F                                 l3664 04B0  
                               l3584 0291                                 l3736 076B  
                               l3832 0C60                                 l2962 0985  
                               l2954 0964                                 l2946 094E  
                               l3674 04C4                                 l3658 0483  
                               l3842 0C82                                 l3826 0C4E  
                               l3850 080E                                 l2980 1657  
                               l3668 04BE                                 l3596 02C4  
                               l3676 0036                                 l3764 07DB  
                               l3756 07C2                                 l3838 0C79  
                               l3790 0BC1                                 STR_1 10D9  
                               STR_2 1076                                 STR_3 10B0  
                               STR_4 10C6                                 STR_5 10C6  
                               STR_6 109A                                 u4215 0980  
                               u5015 0B6C                                 u4305 1663  
                       printf@tmpval 00D9                                 u5045 0B87  
                               u6005 0BD7                                 u4255 099A  
                               u4175 095A                                 u5135 0E6C  
                               u5305 0A0F                                 u4195 0973  
                               u4355 08C2                                 u6035 0BFC  
                               u4605 0CE1                                 u5245 09CA  
                               u5165 0E87                                 u5085 0E05  
                               u6045 0C5A                                 u3735 162B  
                               u5415 0825                                 u5095 0E2F  
                               u4375 08CC                                 u4455 0876  
                               u4295 165E                                 u5345 0907  
                               u4385 08D6                                 u4635 0CF4  
                               u5275 09F4                                 u5435 083E  
                               u4395 08DE                                 u4475 0885  
                               u5365 0913                                 u5445 0849  
                               u4485 088C                                 u4805 0AA8  
                               u5605 01F2                                 u5525 00E6  
                               i1l71 0011                                 u6087 162F  
                               u5375 0927                                 u4665 0D07  
                               u5385 0933                                 u5465 1767  
                               u4835 0ABE                                 u5635 02BA  
                               u4845 0AC4                                 u4765 0A6A  
                               u5565 0198                                 u4695 0D1A  
                               u4775 0A7A                                 u5575 01CB  
                               u5815 167C                                 u5745 04A6  
                               u5905 07C3                                 u4955 0B38  
                               u4795 0AA2                                 u5675 0345  
                               u5915 07D2                                 u4965 0B48  
                               u5685 0351                                 u5925 07DC  
                               u4975 0B52                                 u5885 0793  
                               u5965 0BB2                                 u5895 07A3  
                               _TMR2 001A                          _SR_FRSStart 17C3  
                       __CFG_WRT$ALL 0000                                 _Mode 00C3  
                               _main 0805                         ___ftpack@arg 0071  
                       ___ftpack@exp 0074                                 _time 00C1  
                               fsr0h 0005                                 fsr1h 0007  
                               fsr0l 0004                                 indf0 0000  
                               indf1 0001                                 fsr1l 0006  
                               btemp 007E                        __CFG_BOREN$ON 0000  
                               ltemp 007E                        ??_ReadCharger 0071  
                               start 0016                                 ttemp 007E  
                               wtemp 007E                        __CFG_IESO$OFF 0000  
                      __CFG_MCLRE$ON 0000                         ___ftmul@cntr 0039  
                       ___ftmul@sign 003A                         ___fttol@exp1 0051  
                       ___fttol@lval 004D                        ?_EUSART_Write 0070  
                      ??_ReadVoltage 0075                                ?_main 0070  
                    __end_of___awdiv 08F3                      __end_of___ftadd 0D7E  
                      __CFG_WDTE$OFF 0000                      __end_of___awmod 08A1  
                    __end_of___ftdiv 07FD                      __end_of___ftneg 1599  
                    __end_of___lldiv 0946                      __end_of___ftmul 0AE5  
                    ___awdiv@divisor 0078                      __end_of___llmod 085C  
                    __end_of___ftsub 16AA                      __end_of___fttol 0A31  
                              _T2CON 001C                     ??_SetCommandMode 007C  
                     ?_SetADCChannel 0070                      ___awdiv@counter 0021  
                              _RCREG 0199                                _RCSTA 019D  
                              _TXREG 019A                                _TXSTA 019E  
                              _Delay 161F                        __CFG_PWRTE$ON 0000  
                       ___lltoft@exp 007A                       __CFG_FCMEN$OFF 0000  
            __size_of_RadioOperation 00ED                     __end_of_TMR2_ISR 1591  
                              _Start 16E9                        ___awtoft@sign 0022  
                    __end_of_dpowers 1028                                _count 00BD  
                              _scale 0510                        ___ftpack@sign 0075  
                              _putch 0800                                ltemp0 007E  
                              ltemp1 0082                                ltemp2 0086  
                              ltemp3 0080                          _ClearTicker 157A  
                              ttemp0 007E                                ttemp1 0081  
                              ttemp2 0084                                ttemp3 0087  
                              ttemp4 007F                                status 0003  
                              wtemp0 007E                                wtemp1 0080  
                              wtemp2 0082                                wtemp3 0084  
                              wtemp4 0086                                wtemp5 0088  
                              wtemp6 007F                      __initialization 0018  
         __end_of_EUSART1_Initialize 15D2                         __end_of_main 0819  
                         _RadioBegin 07FD                  __end_of_ReadCharger 160D  
                     ??_EUSART_Write 0071                          SetMIC@scram 006E  
            __end_of_TMR2_Initialize 15C7          ?_INTERRUPT_InterruptManager 0070  
                             ??_main 007C                        ___fttol@sign1 004C  
                        ?_SR_FRSTalk 0070                   __size_of_GetTicker 0001  
                     __CFG_PLLEN$OFF 0000                 __size_of__tdiv_to_l_ 00B6  
                             ?_Delay 0071                               ?_Start 0070  
                __end_of_ReadVoltage 15EC                     ___llmod@dividend 0029  
                             ?_scale 003B                               _ADRESL 009B  
                   ___awdiv@dividend 007A                     __end_of___awtoft 16E9  
                             ?_putch 0070                     __end_of___ftpack 09AA  
                   __end_of___lltoft 1788                               _LEDOff 157E  
                             Delay@x 0074                               _INTCON 000B  
                             _SPBRGH 019C                               _SPBRGL 019B  
                             _SetMIC 1734                               _SetVOX 1670  
                   __end_of__powers_ 1076                               ___ftge 1788  
                      _output_buffer 0120                               ___wmul 1654  
                          ??___awdiv 0020                            ??___ftadd 004F  
                     __CFG_STVREN$ON 0000                            ??___awmod 0075  
                          ??___ftdiv 0041                            ??___ftneg 0074  
                          ??___lldiv 0079                            ??___ftmul 0031  
                          ??___llmod 007A                            ??___ftsub 007C  
                          ??___fttol 0048                               _fround 0E9B  
                 __size_of_SetVolume 001B                     ___awdiv@quotient 0023  
                    ___awmod@divisor 0071                               _ticker 00BF  
                    ??_SetADCChannel 0071                      ___awmod@counter 0076  
                             _printf 0031                ___ftmul@f3_as_product 0036  
                      ?_SetFrequency 0070        __size_of_INTERRUPT_Initialize 000A  
            __end_of__initialization 002D                           ___ftadd@f1 0049  
                         ___ftadd@f2 004C                           ___ftge@ff1 0071  
                         ___ftge@ff2 0074                           ___ftdiv@f1 003E  
                         ___ftdiv@f2 003B                           ___ftdiv@f3 0046  
                __size_of_SR_FRSTalk 000F                    __end_of_GetTicker 0003  
                         ___ftneg@f1 0071                          _ReadCharger 15FB  
                         ___awtoft@c 0079                        __end_of_Delay 1639  
                         ___ftmul@f1 002B                           ___ftmul@f2 002E  
                         ___ftsub@f1 0059                           ___ftsub@f2 0056  
                         ___fttol@f1 0044                       __pcstackCOMMON 0070  
                      __end_of_Start 170E                          ?_RadioBegin 0070  
                       __pidataBANK1 0003                        ?_SetPowerSave 0070  
                          ?_TMR2_ISR 0070                           ___lltoft@c 0020  
                      __end_of_scale 0754                        __end_of_putch 0805  
                   ?_TMR2_Initialize 0070                      SetVolume@volume 00E1  
                        _ReadVoltage 15DE                       ??_SetFrequency 007C  
                         __div_to_l_ 0D7E                         SetMIC@volume 006F  
                            ??_Delay 0073                       _RadioOperation 0B9B  
                    SetADCChannel@ch 0071                              ??_Start 0071  
                    __div_to_l_@exp1 002D                      __div_to_l_@cntr 002C  
                            ??_scale 003E                      __div_to_l_@quot 0028  
                            ??_putch 0072                           __pbssBANK1 00A0  
                         __pbssBANK2 0120                         ?_SR_FRSStart 0070  
                            ?_LEDOff 0070                 __end_of_EUSART_Write 15A1  
                  __end_of_SetVolume 1654                        __div_to_l_@f1 0071  
                      __div_to_l_@f2 0074                              ?_SetMIC 006E  
                            ?_SetVOX 006E                           __pmaintext 0805  
                     ??_SetPowerSave 007C                              ?___ftge 0071  
                            ?___wmul 0025                           ??_TMR2_ISR 0070  
                         __pintentry 0004                              _BAUDCON 019F  
                            ?_fround 003B             __size_of_SR_FRSPowerDown 0012  
                          ?___awtoft 0079                            ?___ftpack 0071  
                            ?_printf 005C                            ?___lltoft 0020  
            __size_of_ADC_Initialize 000A               __end_of_RadioOperation 0C88  
                __size_of_RadioBegin 0003                      __size_of_LEDOff 0005  
                            _Battery 00BA                         ?_ClearTicker 0070  
                  __end_of__npowers_ 104F                           _scale$1239 0040  
                            _Talking 007C                      __size_of_SetMIC 0029  
                    __size_of_SetVOX 001C                      __size_of___ftge 003B  
                            ___awdiv 08A1                              ___ftadd 0C88  
                            ___awmod 085C                              ___ftdiv 0754  
                            ___ftneg 1591                              ___lldiv 08F3  
                    __size_of___wmul 001C                              ___ftmul 0A31  
                            ___llmod 0819                              ___ftsub 168C  
                            ___fttol 09AA                           ??___awtoft 0020  
                         ??___ftpack 0076                      __size_of_fround 0165  
                         ??___lltoft 0079                              __ptext1 16E9  
                            __ptext2 15BD                              __ptext3 15B3  
                            __ptext4 15C7                              __ptext5 15A9  
                            __ptext6 0B9B                              __ptext7 0754  
                            __ptext8 16C8                              __ptext9 15EC  
                    __size_of_printf 04DF                         ??_SR_FRSTalk 0071  
                        ?__div_to_l_ 0071                      ?_RadioOperation 0070  
                            _dpowers 1000                            _T2CONbits 001C  
                   ___awmod@dividend 0073                   _EUSART1_Initialize 15C7  
                       SetVOX@volume 006E                              clrloop0 1584  
               end_of_initialization 002D                            Delay@wait 0071  
                ?_EUSART1_Initialize 0070                 __end_of_SetFrequency 1734  
                    ___lldiv@divisor 0071                     __CFG_CLKOUTEN$ON 0000  
                    ___lldiv@counter 0024                   __end_of_SR_FRSTalk 15FB  
                          _RCSTAbits 019D                              printf@c 00E0  
                            printf@f 005C                         __pstringtext 1000  
                     __tdiv_to_l_@f1 0071                       __tdiv_to_l_@f2 0074  
               ??_EUSART1_Initialize 0071                        ??__tdiv_to_l_ 0077  
                          _PORTAbits 000C                            _PORTCbits 000E  
                   __CFG_FOSC$INTOSC 0000                            _TRISAbits 008C  
                          _TRISCbits 008E                    ??_SR_FRSPowerDown 0071  
              __size_of_EUSART_Write 0008                 __end_of_SetPowerSave 15DE  
            __size_of_SetCommandMode 0008                       __end_of_LEDOff 1583  
                        ___ftdiv@exp 0049                 __size_of_SR_FRSStart 003D  
                       ?_ReadCharger 0070                  __size_of__div_to_l_ 011D  
                        ___ftmul@exp 0035                       __end_of_SetMIC 175D  
                       ??_RadioBegin 007C                       __end_of_SetVOX 168C  
                          _GetTicker 0002         __end_of_INTERRUPT_Initialize 15BD  
                     __end_of___ftge 17C3                       __end_of___wmul 1670  
                       _EUSART_Write 1599                    __size_of_TMR2_ISR 0008  
                     _ADC_Initialize 15A9                         ?_ReadVoltage 0072  
                     __end_of_fround 1000                __end_of_SetADCChannel 16C8  
                     __end_of_printf 0510                  start_initialization 0018  
                __end_of__tdiv_to_l_ 0B9B                        ReadVoltage@ch 0075  
                        putch@txData 0072                   __end_of_RadioBegin 0800  
                           ??_LEDOff 0071                      ___llmod@divisor 0025  
                    ___llmod@counter 007B                 __size_of_ClearTicker 0004  
                          _SetVolume 1639                             ??_SetMIC 00E1  
                           ??_SetVOX 00E1                             ??___ftge 0077  
                           ??___wmul 007C                           ?_GetTicker 0070  
             __end_of_ADC_Initialize 15B3                          __pdataBANK1 00E5  
                           ??_fround 003E                             ??_printf 00C5  
                         fround@prec 0048                    __size_of___awtoft 0021  
                  __size_of___ftpack 0064                    __size_of___lltoft 002B  
                        __pbssCOMMON 007C                            ___latbits 0002  
                      __pcstackBANK0 0020                        __pcstackBANK1 00C5  
           __size_of_TMR2_Initialize 000A                __size_of_SetFrequency 0026  
                         ?_SetVolume 0070                             ?___awdiv 0078  
                           ?___ftadd 0049                             ?___awmod 0071  
                           ?___ftdiv 003B                             ?___ftneg 0071  
                           ?___lldiv 0071                             ?___ftmul 002B  
                           ?___llmod 0025                             ?___ftsub 0056  
                          __npowers_ 1028                             ?___fttol 0044  
                   ??_RadioOperation 004B                      ?_ADC_Initialize 0070  
       ??_INTERRUPT_InterruptManager 0070                          __tdiv_to_l_ 0AE5  
                       ??__div_to_l_ 0020                __size_of_SetPowerSave 000C  
                       _SetFrequency 170E                       __size_of_Delay 001A  
                     __size_of_Start 0025                       __size_of_scale 0244  
                     __size_of_putch 0005                 _INTERRUPT_Initialize 15B3  
                     _SetCommandMode 15A1                       ___wmul@product 0029  
                          clear_ram0 1583                             _PIE1bits 0091  
__size_of_INTERRUPT_InterruptManager 0012                             _PIR1bits 0011  
                 __end_of__div_to_l_ 0E9B                 __size_of_ReadCharger 0012  
                        ??_GetTicker 0071                             _TMR2_ISR 1589  
                       _SetPowerSave 15D2                      _SR_FRSPowerDown 160D  
                       _input_buffer 00A0                           _ADCON0bits 009D  
                         _ADCON1bits 009E                    ___wmul@multiplier 0025  
                         printf@flag 00CE                           printf@fval 00DD  
                         printf@prec 00D1                 __size_of_ReadVoltage 000E  
             __end_of_SetCommandMode 15A9                ?_INTERRUPT_Initialize 0070  
                  ??_TMR2_Initialize 0071                          ??_SetVolume 006E  
                           _Shutdown 00C4                     __size_of___awdiv 0052  
                   __size_of___ftadd 00F6                     __size_of___awmod 0045  
                   __size_of___ftdiv 00A9                     __size_of___ftneg 0008  
                   __size_of___lldiv 0053                     __size_of___ftmul 00B4  
                   __size_of___llmod 0043                     __size_of___ftsub 001E  
                   __size_of___fttol 0087          __size_of_EUSART1_Initialize 000B  
                           ___awtoft 16C8                             ___ftpack 0946  
                        _fround$1237 0045                          _fround$1238 0042  
                           ___lltoft 175D                           _ANSELAbits 018C  
                         _ANSELCbits 018E                             __ptext10 160D  
                           __ptext11 15DE                             __ptext20 15D2  
                           __ptext12 16AA                             __ptext21 1734  
                           __ptext13 15FB                             __ptext30 0A31  
                           __ptext22 170E                             __ptext14 0002  
                           __ptext31 085C                             __ptext23 15A1  
                           __ptext15 157A                             __ptext40 0C88  
                           __ptext32 08A1                             __ptext24 0031  
                           __ptext16 07FD                             __ptext41 0946  
                           __ptext33 0AE5                             __ptext25 0510  
                           __ptext17 17C3                             __ptext42 1591  
                           __ptext34 0D7E                             __ptext26 0800  
                           __ptext18 1639                             __ptext43 1788  
                           __ptext35 175D                             __ptext27 1599  
                           __ptext19 1670                             __ptext44 161F  
                           __ptext36 0819                             __ptext28 0E9B  
                           __ptext45 157E                             __ptext37 08F3  
                           __ptext29 1654                             __ptext38 09AA  
                           __ptext47 1589                             __ptext39 168C  
                    ?_SetCommandMode 0070                             __powers_ 104F  
                      ??_SR_FRSStart 007C                        __size_of_main 0014  
                     _Transmit_stall 00E5              __end_of_SR_FRSPowerDown 161F  
                           int$flags 007E   __end_of_INTERRUPT_InterruptManager 0016  
         _INTERRUPT_InterruptManager 0004                            printf@exp 00D7  
                          printf@val 00D3                           _INTCONbits 000B  
                         _FVRCONbits 0117               ??_INTERRUPT_Initialize 0071  
                           scale@scl 0043                             intlevel1 0000  
                   __tdiv_to_l_@exp1 0025                     __tdiv_to_l_@cntr 0024  
                      ??_ClearTicker 0071                     __tdiv_to_l_@quot 0020  
                   ___lldiv@dividend 0075                     ??_ADC_Initialize 0071  
             __size_of_SetADCChannel 001E                  __end_of_SR_FRSStart 1800  
                         _OSCCONbits 0099                             printf@ap 00D0  
                       ?__tdiv_to_l_ 0071                          _printf$1240 00CB  
                   ___lldiv@quotient 0020                   EUSART_Write@txData 0071  
                   ?_SR_FRSPowerDown 0070                  __end_of_ClearTicker 157E  
