

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Aug 12 05:35:28 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    42                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           	psect	idataCOMRAM
    45  000CC8                     __pidataCOMRAM:
    46                           	opt stack 0
    47                           
    48                           ;initializer for _Transmit_stall
    49  000CC8  01                 	db	1
    50  0000                     _BAUD1CON	set	4024
    51  0000                     _INTCON2bits	set	4081
    52  0000                     _INTCONbits	set	4082
    53  0000                     _IPR1bits	set	3999
    54  0000                     _IPR2bits	set	4002
    55  0000                     _LATDbits	set	3980
    56  0000                     _PIE1bits	set	3997
    57  0000                     _PIR1bits	set	3998
    58  0000                     _RC1STA	set	4011
    59  0000                     _RC1STAbits	set	4011
    60  0000                     _RCONbits	set	4048
    61  0000                     _RCREG1	set	4014
    62  0000                     _SPBRG1	set	4015
    63  0000                     _SPBRGH1	set	4016
    64  0000                     _T0CON	set	4053
    65  0000                     _T0CONbits	set	4053
    66  0000                     _TMR0H	set	4055
    67  0000                     _TMR0L	set	4054
    68  0000                     _TX1STA	set	4012
    69  0000                     _TXREG1	set	4013
    70                           
    71                           ; #config settings
    72                           
    73                           	psect	cinit
    74  000A82                     __pcinit:
    75                           	opt stack 0
    76  000A82                     start_initialization:
    77                           	opt stack 0
    78  000A82                     __initialization:
    79                           	opt stack 0
    80                           
    81                           ; Clear objects allocated to BANK4 (200 bytes)
    82  000A82  EE04  F000         	lfsr	0,__pbssBANK4
    83  000A86  0EC8               	movlw	200
    84  000A88                     clear_0:
    85  000A88  6AEE               	clrf	postinc0,c
    86  000A8A  06E8               	decf	wreg,f,c
    87  000A8C  E1FD               	bnz	clear_0
    88                           
    89                           ; Clear objects allocated to BANK3 (206 bytes)
    90  000A8E  EE03  F000         	lfsr	0,__pbssBANK3
    91  000A92  0ECE               	movlw	206
    92  000A94                     clear_1:
    93  000A94  6AEE               	clrf	postinc0,c
    94  000A96  06E8               	decf	wreg,f,c
    95  000A98  E1FD               	bnz	clear_1
    96                           
    97                           ; Clear objects allocated to BANK2 (206 bytes)
    98  000A9A  EE02  F000         	lfsr	0,__pbssBANK2
    99  000A9E  0ECE               	movlw	206
   100  000AA0                     clear_2:
   101  000AA0  6AEE               	clrf	postinc0,c
   102  000AA2  06E8               	decf	wreg,f,c
   103  000AA4  E1FD               	bnz	clear_2
   104                           
   105                           ; Clear objects allocated to BANK1 (206 bytes)
   106  000AA6  EE01  F000         	lfsr	0,__pbssBANK1
   107  000AAA  0ECE               	movlw	206
   108  000AAC                     clear_3:
   109  000AAC  6AEE               	clrf	postinc0,c
   110  000AAE  06E8               	decf	wreg,f,c
   111  000AB0  E1FD               	bnz	clear_3
   112                           
   113                           ; Clear objects allocated to BANK0 (63 bytes)
   114  000AB2  EE00  F060         	lfsr	0,__pbssBANK0
   115  000AB6  0E3F               	movlw	63
   116  000AB8                     clear_4:
   117  000AB8  6AEE               	clrf	postinc0,c
   118  000ABA  06E8               	decf	wreg,f,c
   119  000ABC  E1FD               	bnz	clear_4
   120                           
   121                           ; Clear objects allocated to COMRAM (30 bytes)
   122  000ABE  EE00  F026         	lfsr	0,__pbssCOMRAM
   123  000AC2  0E1E               	movlw	30
   124  000AC4                     clear_5:
   125  000AC4  6AEE               	clrf	postinc0,c
   126  000AC6  06E8               	decf	wreg,f,c
   127  000AC8  E1FD               	bnz	clear_5
   128                           
   129                           ; Initialize objects allocated to COMRAM (1 bytes)
   130                           ; load TBLPTR registers with __pidataCOMRAM
   131  000ACA  0EC8               	movlw	low __pidataCOMRAM
   132  000ACC  6EF6               	movwf	tblptrl,c
   133  000ACE  0E0C               	movlw	high __pidataCOMRAM
   134  000AD0  6EF7               	movwf	tblptrh,c
   135  000AD2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   136  000AD4  6EF8               	movwf	tblptru,c
   137  000AD6  0009               	tblrd		*+	;fetch initializer
   138  000AD8  CFF5 F044          	movff	tablat,__pdataCOMRAM
   139  000ADC                     end_of_initialization:
   140                           	opt stack 0
   141  000ADC                     __end_of__initialization:
   142                           	opt stack 0
   143  000ADC  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   144  000ADE  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   145  000AE0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   146  000AE2  6EF8               	movwf	tblptru,c
   147  000AE4  0100               	movlb	0
   148  000AE6  EF61  F006         	goto	_main	;jump to C main() function
   149                           tblptru	equ	0xFF8
   150                           tblptrh	equ	0xFF7
   151                           tblptrl	equ	0xFF6
   152                           tablat	equ	0xFF5
   153                           postinc0	equ	0xFEE
   154                           wreg	equ	0xFE8
   155                           
   156                           	psect	bssCOMRAM
   157  000026                     __pbssCOMRAM:
   158                           	opt stack 0
   159  000026                     _addressErrorCounter:
   160                           	opt stack 0
   161  000026                     	ds	2
   162  000028                     _alignErrorCounter:
   163                           	opt stack 0
   164  000028                     	ds	2
   165  00002A                     _crcErrorCounter:
   166                           	opt stack 0
   167  00002A                     	ds	2
   168  00002C                     _group:
   169                           	opt stack 0
   170  00002C                     	ds	2
   171  00002E                     _receiveArrayAddress:
   172                           	opt stack 0
   173  00002E                     	ds	2
   174  000030                     _sendStructAddress:
   175                           	opt stack 0
   176  000030                     	ds	2
   177  000032                     _serial_available:
   178                           	opt stack 0
   179  000032                     	ds	2
   180  000034                     _serial_peek:
   181                           	opt stack 0
   182  000034                     	ds	2
   183  000036                     _serial_read:
   184                           	opt stack 0
   185  000036                     	ds	2
   186  000038                     _serial_write:
   187                           	opt stack 0
   188  000038                     	ds	2
   189  00003A                     _timer0ReloadVal16bit:
   190                           	opt stack 0
   191  00003A                     	ds	2
   192  00003C                     _AKNAKsend:
   193                           	opt stack 0
   194  00003C                     	ds	1
   195  00003D                     _calc_CS:
   196                           	opt stack 0
   197  00003D                     	ds	1
   198  00003E                     _maxDataAddress:
   199                           	opt stack 0
   200  00003E                     	ds	1
   201  00003F                     _moduleAddress:
   202                           	opt stack 0
   203  00003F                     	ds	1
   204  000040                     _returnAddress:
   205                           	opt stack 0
   206  000040                     	ds	1
   207  000041                     _rx_address:
   208                           	opt stack 0
   209  000041                     	ds	1
   210  000042                     _rx_array_inx:
   211                           	opt stack 0
   212  000042                     	ds	1
   213  000043                     _rx_len:
   214                           	opt stack 0
   215  000043                     	ds	1
   216                           tblptru	equ	0xFF8
   217                           tblptrh	equ	0xFF7
   218                           tblptrl	equ	0xFF6
   219                           tablat	equ	0xFF5
   220                           postinc0	equ	0xFEE
   221                           wreg	equ	0xFE8
   222                           
   223                           	psect	dataCOMRAM
   224  000044                     __pdataCOMRAM:
   225                           	opt stack 0
   226  000044                     _Transmit_stall:
   227                           	opt stack 0
   228  000044                     	ds	1
   229                           tblptru	equ	0xFF8
   230                           tblptrh	equ	0xFF7
   231                           tblptrl	equ	0xFF6
   232                           tablat	equ	0xFF5
   233                           postinc0	equ	0xFEE
   234                           wreg	equ	0xFE8
   235                           
   236                           	psect	bssBANK0
   237  000060                     __pbssBANK0:
   238                           	opt stack 0
   239  000060                     _receiveArray:
   240                           	opt stack 0
   241  000060                     	ds	40
   242  000088                     TMR0_ISR@CountCallBack:
   243                           	opt stack 0
   244  000088                     	ds	2
   245  00008A                     _dataAdressErrorCounter:
   246                           	opt stack 0
   247  00008A                     	ds	2
   248  00008C                     _time:
   249                           	opt stack 0
   250  00008C                     	ds	2
   251  00008E                     _crc_buffer:
   252                           	opt stack 0
   253  00008E                     	ds	17
   254                           tblptru	equ	0xFF8
   255                           tblptrh	equ	0xFF7
   256                           tblptrl	equ	0xFF6
   257                           tablat	equ	0xFF5
   258                           postinc0	equ	0xFEE
   259                           wreg	equ	0xFE8
   260                           
   261                           	psect	bssBANK1
   262  000100                     __pbssBANK1:
   263                           	opt stack 0
   264  000100                     _ring_buffer:
   265                           	opt stack 0
   266  000100                     	ds	206
   267                           tblptru	equ	0xFF8
   268                           tblptrh	equ	0xFF7
   269                           tblptrl	equ	0xFF6
   270                           tablat	equ	0xFF5
   271                           postinc0	equ	0xFEE
   272                           wreg	equ	0xFE8
   273                           
   274                           	psect	bssBANK2
   275  000200                     __pbssBANK2:
   276                           	opt stack 0
   277  000200                     _input_buffer:
   278                           	opt stack 0
   279  000200                     	ds	206
   280                           tblptru	equ	0xFF8
   281                           tblptrh	equ	0xFF7
   282                           tblptrl	equ	0xFF6
   283                           tablat	equ	0xFF5
   284                           postinc0	equ	0xFEE
   285                           wreg	equ	0xFE8
   286                           
   287                           	psect	bssBANK3
   288  000300                     __pbssBANK3:
   289                           	opt stack 0
   290  000300                     _output_buffer:
   291                           	opt stack 0
   292  000300                     	ds	206
   293                           tblptru	equ	0xFF8
   294                           tblptrh	equ	0xFF7
   295                           tblptrl	equ	0xFF6
   296                           tablat	equ	0xFF5
   297                           postinc0	equ	0xFEE
   298                           wreg	equ	0xFE8
   299                           
   300                           	psect	bssBANK4
   301  000400                     __pbssBANK4:
   302                           	opt stack 0
   303  000400                     _rx_buffer:
   304                           	opt stack 0
   305  000400                     	ds	200
   306                           tblptru	equ	0xFF8
   307                           tblptrh	equ	0xFF7
   308                           tblptrl	equ	0xFF6
   309                           tablat	equ	0xFF5
   310                           postinc0	equ	0xFEE
   311                           wreg	equ	0xFE8
   312                           
   313                           	psect	cstackBANK0
   314  00009F                     __pcstackBANK0:
   315                           	opt stack 0
   316  00009F                     ??_FastTransfer_buffer_put:
   317  00009F                     FastTransfer_buffer_flush@_this:
   318                           	opt stack 0
   319  00009F                     crcBufS_get@wantedTime:
   320                           	opt stack 0
   321                           
   322                           ; 2 bytes @ 0x0
   323  00009F                     	ds	2
   324  0000A1                     CRCcheck@SentCRC:
   325                           	opt stack 0
   326  0000A1                     ToSend@what:
   327                           	opt stack 0
   328  0000A1                     FastTransfer_buffer_flush@clearBuffer:
   329                           	opt stack 0
   330                           
   331                           ; 2 bytes @ 0x2
   332  0000A1                     	ds	1
   333  0000A2                     CRCcheck@calculatedCRC:
   334                           	opt stack 0
   335                           
   336                           ; 1 bytes @ 0x3
   337  0000A2                     	ds	1
   338  0000A3                     sendData@whereToSend:
   339                           	opt stack 0
   340  0000A3                     ToSend@where:
   341                           	opt stack 0
   342  0000A3                     CRCcheck@arrayHolder:
   343                           	opt stack 0
   344                           
   345                           ; 3 bytes @ 0x4
   346  0000A3                     	ds	1
   347  0000A4                     sendData@CS:
   348                           	opt stack 0
   349                           
   350                           ; 1 bytes @ 0x5
   351  0000A4                     	ds	1
   352  0000A5                     sendData@i:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x6
   356  0000A5                     	ds	1
   357  0000A6                     CRCcheck@rt:
   358                           	opt stack 0
   359                           
   360                           ; 2 bytes @ 0x7
   361  0000A6                     	ds	2
   362  0000A8                     ??_receiveData:
   363                           
   364                           ; 1 bytes @ 0x9
   365  0000A8                     	ds	6
   366  0000AE                     receiveData@crcHolder:
   367                           	opt stack 0
   368                           
   369                           ; 1 bytes @ 0xF
   370  0000AE                     	ds	1
   371  0000AF                     receiveData@crcHolder_322:
   372                           	opt stack 0
   373                           
   374                           ; 1 bytes @ 0x10
   375  0000AF                     	ds	1
   376  0000B0                     receiveData@holder:
   377                           	opt stack 0
   378                           
   379                           ; 3 bytes @ 0x11
   380  0000B0                     	ds	3
   381  0000B3                     receiveData@holder_321:
   382                           	opt stack 0
   383                           
   384                           ; 3 bytes @ 0x14
   385  0000B3                     	ds	3
   386  0000B6                     receiveData@u:
   387                           	opt stack 0
   388                           
   389                           ; 2 bytes @ 0x17
   390  0000B6                     	ds	2
   391  0000B8                     receiveData@r:
   392                           	opt stack 0
   393                           
   394                           ; 2 bytes @ 0x19
   395  0000B8                     	ds	2
   396                           tblptru	equ	0xFF8
   397                           tblptrh	equ	0xFF7
   398                           tblptrl	equ	0xFF6
   399                           tablat	equ	0xFF5
   400                           postinc0	equ	0xFEE
   401                           wreg	equ	0xFE8
   402                           
   403                           	psect	cstackCOMRAM
   404  000001                     __pcstackCOMRAM:
   405                           	opt stack 0
   406  000001                     ?_UART_buff_modulo_inc:
   407                           	opt stack 0
   408  000001                     ?_UART_buff_size:
   409                           	opt stack 0
   410  000001                     UART_buff_size@_this:
   411                           	opt stack 0
   412  000001                     UART_buff_modulo_inc@value:
   413                           	opt stack 0
   414                           
   415                           ; 2 bytes @ 0x0
   416  000001                     	ds	2
   417  000003                     UART_buff_modulo_inc@modulus:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x2
   421  000003                     	ds	2
   422  000005                     UART_buff_modulo_inc@my_value:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0x4
   426  000005                     	ds	2
   427  000007                     UART_buff_put@_this:
   428                           	opt stack 0
   429  000007                     UART_buff_get@_this:
   430                           	opt stack 0
   431                           
   432                           ; 2 bytes @ 0x6
   433  000007                     	ds	2
   434  000009                     ??_UART_buff_get:
   435  000009                     UART_buff_put@c:
   436                           	opt stack 0
   437                           
   438                           ; 1 bytes @ 0x8
   439  000009                     	ds	1
   440  00000A                     ??_UART_buff_put:
   441                           
   442                           ; 1 bytes @ 0x9
   443  00000A                     	ds	1
   444  00000B                     UART_buff_get@c:
   445                           	opt stack 0
   446                           
   447                           ; 1 bytes @ 0xA
   448  00000B                     	ds	1
   449  00000C                     EUSART1_Receive_ISR@data:
   450                           	opt stack 0
   451                           
   452                           ; 1 bytes @ 0xB
   453  00000C                     	ds	1
   454  00000D                     ??_INTERRUPT_InterruptManager:
   455                           
   456                           ; 1 bytes @ 0xC
   457  00000D                     	ds	14
   458  00001B                     ?_FastTransfer_buffer_modulo_inc:
   459                           	opt stack 0
   460  00001B                     Delay@wait:
   461                           	opt stack 0
   462  00001B                     CRC8@data:
   463                           	opt stack 0
   464  00001B                     FastTransfer_buffer_modulo_inc@value:
   465                           	opt stack 0
   466  00001B                     crcBufS_put@_this:
   467                           	opt stack 0
   468  00001B                     crcBufS_status_put@_this:
   469                           	opt stack 0
   470  00001B                     crcBufS_get@_this:
   471                           	opt stack 0
   472  00001B                     memset@p1:
   473                           	opt stack 0
   474                           
   475                           ; 2 bytes @ 0x1A
   476  00001B                     	ds	2
   477  00001D                     ??_Delay:
   478  00001D                     CRC8@len:
   479                           	opt stack 0
   480  00001D                     crcBufS_put@address:
   481                           	opt stack 0
   482  00001D                     crcBufS_status_put@time:
   483                           	opt stack 0
   484  00001D                     crcBufS_get@time:
   485                           	opt stack 0
   486  00001D                     FastTransfer_buffer_modulo_inc@modulus:
   487                           	opt stack 0
   488  00001D                     memset@c:
   489                           	opt stack 0
   490                           
   491                           ; 2 bytes @ 0x1C
   492  00001D                     	ds	1
   493  00001E                     CRC8@sum:
   494                           	opt stack 0
   495  00001E                     crcBufS_put@oldCRC:
   496                           	opt stack 0
   497  00001E                     crcBufS_status_put@status:
   498                           	opt stack 0
   499  00001E                     crcBufS_get@space:
   500                           	opt stack 0
   501  00001E                     Delay@x:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x1D
   505  00001E                     	ds	1
   506  00001F                     ??_crcBufS_get:
   507  00001F                     ??_crcBufS_status_put:
   508  00001F                     CRC8@extract:
   509                           	opt stack 0
   510  00001F                     crcBufS_put@status:
   511                           	opt stack 0
   512  00001F                     FastTransfer_buffer_modulo_inc@my_value:
   513                           	opt stack 0
   514  00001F                     memset@n:
   515                           	opt stack 0
   516                           
   517                           ; 2 bytes @ 0x1E
   518  00001F                     	ds	1
   519  000020                     ??_crcBufS_put:
   520  000020                     CRC8@tempI:
   521                           	opt stack 0
   522                           
   523                           ; 1 bytes @ 0x1F
   524  000020                     	ds	1
   525  000021                     CRC8@crc:
   526                           	opt stack 0
   527  000021                     FastTransfer_buffer_put@_this:
   528                           	opt stack 0
   529  000021                     memset@p:
   530                           	opt stack 0
   531                           
   532                           ; 2 bytes @ 0x20
   533  000021                     	ds	2
   534  000023                     ??_sendData:
   535  000023                     FastTransfer_buffer_put@towhere:
   536                           	opt stack 0
   537  000023                     crcBufS_status_put@wantedTime:
   538                           	opt stack 0
   539                           
   540                           ; 2 bytes @ 0x22
   541  000023                     	ds	1
   542  000024                     FastTransfer_buffer_put@towhat:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x23
   546  000024                     	ds	1
   547  000025                     
   548                           ; 1 bytes @ 0x24
   549  000025                     	ds	1
   550  000026                     tblptru	equ	0xFF8
   551                           tblptrh	equ	0xFF7
   552                           tblptrl	equ	0xFF6
   553                           tablat	equ	0xFF5
   554                           postinc0	equ	0xFEE
   555                           wreg	equ	0xFE8
   556                           
   557                           ; 1 bytes @ 0x25
   558 ;;
   559 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   560 ;;
   561 ;; *************** function _main *****************
   562 ;; Defined at:
   563 ;;		line 25 in file "Main.c"
   564 ;; Parameters:    Size  Location     Type
   565 ;;		None
   566 ;; Auto vars:     Size  Location     Type
   567 ;;		None
   568 ;; Return value:  Size  Location     Type
   569 ;;                  1    wreg      void 
   570 ;; Registers used:
   571 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   572 ;; Tracked objects:
   573 ;;		On entry : 0/0
   574 ;;		On exit  : 0/0
   575 ;;		Unchanged: 0/0
   576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   577 ;;      Params:         0       0       0       0       0       0       0
   578 ;;      Locals:         0       0       0       0       0       0       0
   579 ;;      Temps:          0       0       0       0       0       0       0
   580 ;;      Totals:         0       0       0       0       0       0       0
   581 ;;Total ram usage:        0 bytes
   582 ;; Hardware stack levels required when called:    9
   583 ;; This function calls:
   584 ;;		_updateComms
   585 ;; This function is called by:
   586 ;;		Startup code after reset
   587 ;; This function uses a non-reentrant model
   588 ;;
   589                           
   590                           	psect	text0
   591  000CC2                     __ptext0:
   592                           	opt stack 0
   593  000CC2                     _main:
   594                           	opt stack 22
   595  000CC2                     
   596                           ;Main.c: 28: updateComms();
   597  000CC2  EC59  F006         	call	_updateComms	;wreg free
   598  000CC6  D7FD               	goto	l2276
   599  000CC8                     __end_of_main:
   600                           	opt stack 0
   601                           tblptru	equ	0xFF8
   602                           tblptrh	equ	0xFF7
   603                           tblptrl	equ	0xFF6
   604                           tablat	equ	0xFF5
   605                           postinc0	equ	0xFEE
   606                           wreg	equ	0xFE8
   607                           
   608 ;; *************** function _updateComms *****************
   609 ;; Defined at:
   610 ;;		line 8 in file "Communications.c"
   611 ;; Parameters:    Size  Location     Type
   612 ;;		None
   613 ;; Auto vars:     Size  Location     Type
   614 ;;		None
   615 ;; Return value:  Size  Location     Type
   616 ;;                  1    wreg      void 
   617 ;; Registers used:
   618 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   619 ;; Tracked objects:
   620 ;;		On entry : 0/0
   621 ;;		On exit  : 0/0
   622 ;;		Unchanged: 0/0
   623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   624 ;;      Params:         0       0       0       0       0       0       0
   625 ;;      Locals:         0       0       0       0       0       0       0
   626 ;;      Temps:          0       0       0       0       0       0       0
   627 ;;      Totals:         0       0       0       0       0       0       0
   628 ;;Total ram usage:        0 bytes
   629 ;; Hardware stack levels used:    1
   630 ;; Hardware stack levels required when called:    8
   631 ;; This function calls:
   632 ;;		_receiveData
   633 ;;		_respondECU
   634 ;; This function is called by:
   635 ;;		_main
   636 ;; This function uses a non-reentrant model
   637 ;;
   638                           
   639                           	psect	text1
   640  000CB2                     __ptext1:
   641                           	opt stack 0
   642  000CB2                     _updateComms:
   643                           	opt stack 22
   644                           
   645                           ;Communications.c: 9: if (receiveData()) {
   646                           
   647                           ;incstack = 0
   648  000CB2  EC52  F000         	call	_receiveData	;wreg free
   649  000CB6  0900               	iorlw	0
   650  000CB8  B4D8               	btfsc	status,2,c
   651  000CBA  0012               	return	
   652                           
   653                           ;Communications.c: 10: respondECU();
   654  000CBC  EC9A  F005         	call	_respondECU	;wreg free
   655  000CC0  0012               	return	
   656  000CC2                     __end_of_updateComms:
   657                           	opt stack 0
   658                           tblptru	equ	0xFF8
   659                           tblptrh	equ	0xFF7
   660                           tblptrl	equ	0xFF6
   661                           tablat	equ	0xFF5
   662                           postinc0	equ	0xFEE
   663                           wreg	equ	0xFE8
   664                           status	equ	0xFD8
   665                           
   666 ;; *************** function _respondECU *****************
   667 ;; Defined at:
   668 ;;		line 14 in file "Communications.c"
   669 ;; Parameters:    Size  Location     Type
   670 ;;		None
   671 ;; Auto vars:     Size  Location     Type
   672 ;;		None
   673 ;; Return value:  Size  Location     Type
   674 ;;                  1    wreg      void 
   675 ;; Registers used:
   676 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   677 ;; Tracked objects:
   678 ;;		On entry : 0/0
   679 ;;		On exit  : 0/0
   680 ;;		Unchanged: 0/0
   681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   682 ;;      Params:         0       0       0       0       0       0       0
   683 ;;      Locals:         0       0       0       0       0       0       0
   684 ;;      Temps:          0       0       0       0       0       0       0
   685 ;;      Totals:         0       0       0       0       0       0       0
   686 ;;Total ram usage:        0 bytes
   687 ;; Hardware stack levels used:    1
   688 ;; Hardware stack levels required when called:    7
   689 ;; This function calls:
   690 ;;		_Delay
   691 ;;		_ToSend
   692 ;;		_sendData
   693 ;; This function is called by:
   694 ;;		_updateComms
   695 ;; This function uses a non-reentrant model
   696 ;;
   697                           
   698                           	psect	text2
   699  000B34                     __ptext2:
   700                           	opt stack 0
   701  000B34                     _respondECU:
   702                           	opt stack 22
   703                           
   704                           ;Communications.c: 15: LATDbits.LATD4 = 1;
   705                           
   706                           ;incstack = 0
   707  000B34  888C               	bsf	3980,4,c	;volatile
   708                           
   709                           ;Communications.c: 16: ToSend(1,0);
   710  000B36  0E00               	movlw	0
   711  000B38  0100               	movlb	0	; () banked
   712  000B3A  6FA2               	movwf	(ToSend@what+1)& (0+255),b
   713  000B3C  0E00               	movlw	0
   714  000B3E  6FA1               	movwf	ToSend@what& (0+255),b
   715  000B40  0E01               	movlw	1
   716  000B42  EC27  F006         	call	_ToSend
   717                           
   718                           ;Communications.c: 17: Delay(9);
   719  000B46  0E00               	movlw	0
   720  000B48  6E1C               	movwf	Delay@wait+1,c
   721  000B4A  0E09               	movlw	9
   722  000B4C  6E1B               	movwf	Delay@wait,c
   723  000B4E  ECB4  F005         	call	_Delay	;wreg free
   724                           
   725                           ;Communications.c: 18: sendData(1);
   726  000B52  0E01               	movlw	1
   727  000B54  ECCE  F004         	call	_sendData
   728                           
   729                           ;Communications.c: 19: Delay(3);
   730  000B58  0E00               	movlw	0
   731  000B5A  6E1C               	movwf	Delay@wait+1,c
   732  000B5C  0E03               	movlw	3
   733  000B5E  6E1B               	movwf	Delay@wait,c
   734  000B60  ECB4  F005         	call	_Delay	;wreg free
   735                           
   736                           ;Communications.c: 20: LATDbits.LATD4 = 0;
   737  000B64  988C               	bcf	3980,4,c	;volatile
   738  000B66  0012               	return		;funcret
   739  000B68                     __end_of_respondECU:
   740                           	opt stack 0
   741                           tblptru	equ	0xFF8
   742                           tblptrh	equ	0xFF7
   743                           tblptrl	equ	0xFF6
   744                           tablat	equ	0xFF5
   745                           postinc0	equ	0xFEE
   746                           wreg	equ	0xFE8
   747                           status	equ	0xFD8
   748                           
   749 ;; *************** function _sendData *****************
   750 ;; Defined at:
   751 ;;		line 50 in file "FastTransfer.c"
   752 ;; Parameters:    Size  Location     Type
   753 ;;  whereToSend     1    wreg     unsigned char 
   754 ;; Auto vars:     Size  Location     Type
   755 ;;  whereToSend     1    4[BANK0 ] unsigned char 
   756 ;;  i               2    6[BANK0 ] int 
   757 ;;  CS              1    5[BANK0 ] unsigned char 
   758 ;; Return value:  Size  Location     Type
   759 ;;                  1    wreg      void 
   760 ;; Registers used:
   761 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   762 ;; Tracked objects:
   763 ;;		On entry : 0/0
   764 ;;		On exit  : 0/0
   765 ;;		Unchanged: 0/0
   766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   767 ;;      Params:         0       0       0       0       0       0       0
   768 ;;      Locals:         0       4       0       0       0       0       0
   769 ;;      Temps:          1       0       0       0       0       0       0
   770 ;;      Totals:         1       4       0       0       0       0       0
   771 ;;Total ram usage:        5 bytes
   772 ;; Hardware stack levels used:    1
   773 ;; Hardware stack levels required when called:    6
   774 ;; This function calls:
   775 ;;		_CRC8
   776 ;;		_FastTransfer_buffer_flush
   777 ;;		_crcBufS_put
   778 ;; This function is called by:
   779 ;;		_respondECU
   780 ;; This function uses a non-reentrant model
   781 ;;
   782                           
   783                           	psect	text3
   784  00099C                     __ptext3:
   785                           	opt stack 0
   786  00099C                     _sendData:
   787                           	opt stack 22
   788                           
   789                           ;incstack = 0
   790                           ;sendData@whereToSend stored from wreg
   791  00099C  0100               	movlb	0	; () banked
   792  00099E  6FA3               	movwf	sendData@whereToSend& (0+255),b
   793                           
   794                           ;FastTransfer.c: 59: serial_write(ring_buffer.count);
   795  0009A0  C030  F01B         	movff	_sendStructAddress,CRC8@data
   796  0009A4  C031  F01C         	movff	_sendStructAddress+1,CRC8@data+1
   797  0009A8  C1CC  F01D         	movff	_ring_buffer+204,CRC8@len
   798  0009AC  EC75  F005         	call	_CRC8	;wreg free
   799  0009B0  0100               	movlb	0	; () banked
   800  0009B2  6FA4               	movwf	sendData@CS& (0+255),b
   801                           
   802                           ; BSR set to: 0
   803                           ;FastTransfer.c: 63: int i;
   804                           ;FastTransfer.c: 64: for (i = 0; i < ring_buffer.count; i++) {
   805  0009B4  0E00               	movlw	0
   806  0009B6  0100               	movlb	0	; () banked
   807  0009B8  6FA6               	movwf	(sendData@i+1)& (0+255),b
   808  0009BA  0E00               	movlw	0
   809  0009BC  6FA5               	movwf	sendData@i& (0+255),b
   810  0009BE  D003               	goto	l2082
   811  0009C0                     l2080:
   812  0009C0  0100               	movlb	0	; () banked
   813  0009C2  4BA5               	infsnz	sendData@i& (0+255),f,b
   814  0009C4  2BA6               	incf	(sendData@i+1)& (0+255),f,b
   815  0009C6                     l2082:
   816                           
   817                           ; BSR set to: 0
   818  0009C6  0101               	movlb	1	; () banked
   819  0009C8  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
   820  0009CA  0100               	movlb	0	; () banked
   821  0009CC  5DA5               	subwf	sendData@i& (0+255),w,b
   822  0009CE  0100               	movlb	0	; () banked
   823  0009D0  51A6               	movf	(sendData@i+1)& (0+255),w,b
   824  0009D2  0A80               	xorlw	128
   825  0009D4  6E23               	movwf	??_sendData& (0+255),c
   826  0009D6  0101               	movlb	1	; () banked
   827  0009D8  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
   828  0009DA  0A80               	xorlw	128
   829  0009DC  5823               	subwfb	??_sendData& (0+255),w,c
   830  0009DE  A0D8               	btfss	status,0,c
   831  0009E0  D7EF               	goto	l2080
   832                           
   833                           ; BSR set to: 1
   834                           ;FastTransfer.c: 72: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
   835                           
   836                           ; BSR set to: 1
   837                           
   838                           ;FastTransfer.c: 66: }
   839                           ;FastTransfer.c: 69: serial_write(CS);
   840  0009E2  0E8E               	movlw	low _crc_buffer
   841  0009E4  6E1B               	movwf	crcBufS_put@_this,c
   842  0009E6  0E00               	movlw	high _crc_buffer
   843  0009E8  6E1C               	movwf	crcBufS_put@_this+1,c
   844  0009EA  C0A3  F01D         	movff	sendData@whereToSend,crcBufS_put@address
   845  0009EE  C0A4  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
   846  0009F2  0E00               	movlw	0
   847  0009F4  6E1F               	movwf	crcBufS_put@status,c
   848  0009F6  EC63  F003         	call	_crcBufS_put	;wreg free
   849                           
   850                           ;FastTransfer.c: 75: FastTransfer_buffer_flush(&ring_buffer, 1);
   851  0009FA  0E00               	movlw	low _ring_buffer
   852  0009FC  0100               	movlb	0	; () banked
   853  0009FE  6F9F               	movwf	FastTransfer_buffer_flush@_this& (0+255),b
   854  000A00  0E01               	movlw	high _ring_buffer
   855  000A02  0100               	movlb	0	; () banked
   856  000A04  6FA0               	movwf	(FastTransfer_buffer_flush@_this+1)& (0+255),b
   857  000A06  0E00               	movlw	0
   858  000A08  0100               	movlb	0	; () banked
   859  000A0A  6FA2               	movwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),b
   860  000A0C  0E01               	movlw	1
   861  000A0E  6FA1               	movwf	FastTransfer_buffer_flush@clearBuffer& (0+255),b
   862  000A10  EC0B  F005         	call	_FastTransfer_buffer_flush	;wreg free
   863  000A14  0012               	return		;funcret
   864  000A16                     __end_of_sendData:
   865                           	opt stack 0
   866                           tblptru	equ	0xFF8
   867                           tblptrh	equ	0xFF7
   868                           tblptrl	equ	0xFF6
   869                           tablat	equ	0xFF5
   870                           postinc0	equ	0xFEE
   871                           wreg	equ	0xFE8
   872                           status	equ	0xFD8
   873                           
   874 ;; *************** function _crcBufS_put *****************
   875 ;; Defined at:
   876 ;;		line 319 in file "FastTransfer.c"
   877 ;; Parameters:    Size  Location     Type
   878 ;;  _this           2   26[COMRAM] PTR struct crcBufS
   879 ;;		 -> crc_buffer(17), 
   880 ;;  address         1   28[COMRAM] unsigned char 
   881 ;;  oldCRC          1   29[COMRAM] unsigned char 
   882 ;;  status          1   30[COMRAM] unsigned char 
   883 ;; Auto vars:     Size  Location     Type
   884 ;;		None
   885 ;; Return value:  Size  Location     Type
   886 ;;                  1    wreg      void 
   887 ;; Registers used:
   888 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   889 ;; Tracked objects:
   890 ;;		On entry : 0/0
   891 ;;		On exit  : 0/0
   892 ;;		Unchanged: 0/0
   893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   894 ;;      Params:         5       0       0       0       0       0       0
   895 ;;      Locals:         0       0       0       0       0       0       0
   896 ;;      Temps:          2       0       0       0       0       0       0
   897 ;;      Totals:         7       0       0       0       0       0       0
   898 ;;Total ram usage:        7 bytes
   899 ;; Hardware stack levels used:    1
   900 ;; Hardware stack levels required when called:    4
   901 ;; This function calls:
   902 ;;		Nothing
   903 ;; This function is called by:
   904 ;;		_sendData
   905 ;; This function uses a non-reentrant model
   906 ;;
   907                           
   908                           	psect	text4
   909  0006C6                     __ptext4:
   910                           	opt stack 0
   911  0006C6                     _crcBufS_put:
   912                           	opt stack 23
   913                           
   914                           ;FastTransfer.c: 320: _this->buf[_this->head] = address;
   915                           
   916                           ;incstack = 0
   917  0006C6  EE20 F00F          	lfsr	2,15
   918  0006CA  501B               	movf	crcBufS_put@_this,w,c
   919  0006CC  26D9               	addwf	fsr2l,f,c
   920  0006CE  501C               	movf	crcBufS_put@_this+1,w,c
   921  0006D0  22DA               	addwfc	fsr2h,f,c
   922  0006D2  CFDE F020          	movff	postinc2,??_crcBufS_put
   923  0006D6  CFDD F021          	movff	postdec2,??_crcBufS_put+1
   924  0006DA  5020               	movf	??_crcBufS_put,w,c
   925  0006DC  241B               	addwf	crcBufS_put@_this,w,c
   926  0006DE  6ED9               	movwf	fsr2l,c
   927  0006E0  5021               	movf	??_crcBufS_put+1,w,c
   928  0006E2  201C               	addwfc	crcBufS_put@_this+1,w,c
   929  0006E4  6EDA               	movwf	fsr2h,c
   930  0006E6  C01D  FFDF         	movff	crcBufS_put@address,indf2
   931                           
   932                           ;FastTransfer.c: 321: _this->head++;
   933  0006EA  EE20 F00F          	lfsr	2,15
   934  0006EE  501B               	movf	crcBufS_put@_this,w,c
   935  0006F0  26D9               	addwf	fsr2l,f,c
   936  0006F2  501C               	movf	crcBufS_put@_this+1,w,c
   937  0006F4  22DA               	addwfc	fsr2h,f,c
   938  0006F6  2ADE               	incf	postinc2,f,c
   939  0006F8  0E00               	movlw	0
   940  0006FA  22DD               	addwfc	postdec2,f,c
   941                           
   942                           ;FastTransfer.c: 322: _this->buf[_this->head] = oldCRC;
   943  0006FC  EE20 F00F          	lfsr	2,15
   944  000700  501B               	movf	crcBufS_put@_this,w,c
   945  000702  26D9               	addwf	fsr2l,f,c
   946  000704  501C               	movf	crcBufS_put@_this+1,w,c
   947  000706  22DA               	addwfc	fsr2h,f,c
   948  000708  CFDE F020          	movff	postinc2,??_crcBufS_put
   949  00070C  CFDD F021          	movff	postdec2,??_crcBufS_put+1
   950  000710  5020               	movf	??_crcBufS_put,w,c
   951  000712  241B               	addwf	crcBufS_put@_this,w,c
   952  000714  6ED9               	movwf	fsr2l,c
   953  000716  5021               	movf	??_crcBufS_put+1,w,c
   954  000718  201C               	addwfc	crcBufS_put@_this+1,w,c
   955  00071A  6EDA               	movwf	fsr2h,c
   956  00071C  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
   957                           
   958                           ;FastTransfer.c: 323: _this->head++;
   959  000720  EE20 F00F          	lfsr	2,15
   960  000724  501B               	movf	crcBufS_put@_this,w,c
   961  000726  26D9               	addwf	fsr2l,f,c
   962  000728  501C               	movf	crcBufS_put@_this+1,w,c
   963  00072A  22DA               	addwfc	fsr2h,f,c
   964  00072C  2ADE               	incf	postinc2,f,c
   965  00072E  0E00               	movlw	0
   966  000730  22DD               	addwfc	postdec2,f,c
   967                           
   968                           ;FastTransfer.c: 324: _this->buf[_this->head] = status;
   969  000732  EE20 F00F          	lfsr	2,15
   970  000736  501B               	movf	crcBufS_put@_this,w,c
   971  000738  26D9               	addwf	fsr2l,f,c
   972  00073A  501C               	movf	crcBufS_put@_this+1,w,c
   973  00073C  22DA               	addwfc	fsr2h,f,c
   974  00073E  CFDE F020          	movff	postinc2,??_crcBufS_put
   975  000742  CFDD F021          	movff	postdec2,??_crcBufS_put+1
   976  000746  5020               	movf	??_crcBufS_put,w,c
   977  000748  241B               	addwf	crcBufS_put@_this,w,c
   978  00074A  6ED9               	movwf	fsr2l,c
   979  00074C  5021               	movf	??_crcBufS_put+1,w,c
   980  00074E  201C               	addwfc	crcBufS_put@_this+1,w,c
   981  000750  6EDA               	movwf	fsr2h,c
   982  000752  C01F  FFDF         	movff	crcBufS_put@status,indf2
   983                           
   984                           ;FastTransfer.c: 325: _this->head++;
   985  000756  EE20 F00F          	lfsr	2,15
   986  00075A  501B               	movf	crcBufS_put@_this,w,c
   987  00075C  26D9               	addwf	fsr2l,f,c
   988  00075E  501C               	movf	crcBufS_put@_this+1,w,c
   989  000760  22DA               	addwfc	fsr2h,f,c
   990  000762  2ADE               	incf	postinc2,f,c
   991  000764  0E00               	movlw	0
   992  000766  22DD               	addwfc	postdec2,f,c
   993                           
   994                           ;FastTransfer.c: 326: if (_this->head >= (5 * 3)) {
   995  000768  EE20 F00F          	lfsr	2,15
   996  00076C  501B               	movf	crcBufS_put@_this,w,c
   997  00076E  26D9               	addwf	fsr2l,f,c
   998  000770  501C               	movf	crcBufS_put@_this+1,w,c
   999  000772  22DA               	addwfc	fsr2h,f,c
  1000  000774  0E01               	movlw	1
  1001  000776  BEDB               	btfsc	plusw2,7,c
  1002  000778  0012               	return	
  1003  00077A  0E01               	movlw	1
  1004  00077C  50DB               	movf	plusw2,w,c
  1005  00077E  E104               	bnz	u1080
  1006  000780  0E0F               	movlw	15
  1007  000782  5CDE               	subwf	postinc2,w,c
  1008  000784  A0D8               	btfss	status,0,c
  1009  000786  0012               	return	
  1010  000788                     u1080:
  1011                           
  1012                           ;FastTransfer.c: 327: _this->head = 0;
  1013  000788  EE20 F00F          	lfsr	2,15
  1014  00078C  501B               	movf	crcBufS_put@_this,w,c
  1015  00078E  26D9               	addwf	fsr2l,f,c
  1016  000790  501C               	movf	crcBufS_put@_this+1,w,c
  1017  000792  22DA               	addwfc	fsr2h,f,c
  1018  000794  0E00               	movlw	0
  1019  000796  6EDE               	movwf	postinc2,c
  1020  000798  0E00               	movlw	0
  1021  00079A  6EDD               	movwf	postdec2,c
  1022  00079C  0012               	return	
  1023  00079E                     __end_of_crcBufS_put:
  1024                           	opt stack 0
  1025                           tblptru	equ	0xFF8
  1026                           tblptrh	equ	0xFF7
  1027                           tblptrl	equ	0xFF6
  1028                           tablat	equ	0xFF5
  1029                           postinc0	equ	0xFEE
  1030                           wreg	equ	0xFE8
  1031                           indf2	equ	0xFDF
  1032                           postinc2	equ	0xFDE
  1033                           postdec2	equ	0xFDD
  1034                           plusw2	equ	0xFDB
  1035                           fsr2h	equ	0xFDA
  1036                           fsr2l	equ	0xFD9
  1037                           status	equ	0xFD8
  1038                           
  1039 ;; *************** function _FastTransfer_buffer_flush *****************
  1040 ;; Defined at:
  1041 ;;		line 259 in file "FastTransfer.c"
  1042 ;; Parameters:    Size  Location     Type
  1043 ;;  _this           2    0[BANK0 ] PTR struct ringBufS
  1044 ;;		 -> ring_buffer(206), 
  1045 ;;  clearBuffer     2    2[BANK0 ] const int 
  1046 ;; Auto vars:     Size  Location     Type
  1047 ;;		None
  1048 ;; Return value:  Size  Location     Type
  1049 ;;                  1    wreg      void 
  1050 ;; Registers used:
  1051 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1052 ;; Tracked objects:
  1053 ;;		On entry : 0/0
  1054 ;;		On exit  : 0/0
  1055 ;;		Unchanged: 0/0
  1056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1057 ;;      Params:         0       4       0       0       0       0       0
  1058 ;;      Locals:         0       0       0       0       0       0       0
  1059 ;;      Temps:          0       0       0       0       0       0       0
  1060 ;;      Totals:         0       4       0       0       0       0       0
  1061 ;;Total ram usage:        4 bytes
  1062 ;; Hardware stack levels used:    1
  1063 ;; Hardware stack levels required when called:    5
  1064 ;; This function calls:
  1065 ;;		_memset
  1066 ;; This function is called by:
  1067 ;;		_sendData
  1068 ;; This function uses a non-reentrant model
  1069 ;;
  1070                           
  1071                           	psect	text5
  1072  000A16                     __ptext5:
  1073                           	opt stack 0
  1074  000A16                     _FastTransfer_buffer_flush:
  1075                           	opt stack 22
  1076                           
  1077                           ;FastTransfer.c: 260: _this->count = 0;
  1078                           
  1079                           ;incstack = 0
  1080  000A16  0100               	movlb	0	; () banked
  1081  000A18  EE20 F0CC          	lfsr	2,204
  1082  000A1C  519F               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1083  000A1E  26D9               	addwf	fsr2l,f,c
  1084  000A20  51A0               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1085  000A22  22DA               	addwfc	fsr2h,f,c
  1086  000A24  0E00               	movlw	0
  1087  000A26  6EDE               	movwf	postinc2,c
  1088  000A28  0E00               	movlw	0
  1089  000A2A  6EDD               	movwf	postdec2,c
  1090                           
  1091                           ;FastTransfer.c: 261: _this->head = 0;
  1092  000A2C  0100               	movlb	0	; () banked
  1093  000A2E  EE20 F0C8          	lfsr	2,200
  1094  000A32  519F               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1095  000A34  26D9               	addwf	fsr2l,f,c
  1096  000A36  51A0               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1097  000A38  22DA               	addwfc	fsr2h,f,c
  1098  000A3A  0E00               	movlw	0
  1099  000A3C  6EDE               	movwf	postinc2,c
  1100  000A3E  0E00               	movlw	0
  1101  000A40  6EDD               	movwf	postdec2,c
  1102                           
  1103                           ;FastTransfer.c: 262: _this->tail = 0;
  1104  000A42  0100               	movlb	0	; () banked
  1105  000A44  EE20 F0CA          	lfsr	2,202
  1106  000A48  519F               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1107  000A4A  26D9               	addwf	fsr2l,f,c
  1108  000A4C  51A0               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1109  000A4E  22DA               	addwfc	fsr2h,f,c
  1110  000A50  0E00               	movlw	0
  1111  000A52  6EDE               	movwf	postinc2,c
  1112  000A54  0E00               	movlw	0
  1113  000A56  6EDD               	movwf	postdec2,c
  1114                           
  1115                           ; BSR set to: 0
  1116                           ;FastTransfer.c: 263: if (clearBuffer) {
  1117  000A58  0100               	movlb	0	; () banked
  1118  000A5A  51A1               	movf	FastTransfer_buffer_flush@clearBuffer& (0+255),w,b
  1119  000A5C  0100               	movlb	0	; () banked
  1120  000A5E  11A2               	iorwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),w,b
  1121  000A60  B4D8               	btfsc	status,2,c
  1122  000A62  0012               	return	
  1123                           
  1124                           ; BSR set to: 0
  1125                           ;FastTransfer.c: 264: memset(_this->buf, 0, sizeof (_this->buf));
  1126  000A64  C09F  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  1127  000A68  C0A0  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  1128  000A6C  0E00               	movlw	0
  1129  000A6E  6E1E               	movwf	memset@c+1,c
  1130  000A70  0E00               	movlw	0
  1131  000A72  6E1D               	movwf	memset@c,c
  1132  000A74  0E00               	movlw	0
  1133  000A76  6E20               	movwf	memset@n+1,c
  1134  000A78  0EC8               	movlw	200
  1135  000A7A  6E1F               	movwf	memset@n,c
  1136  000A7C  ECE7  F005         	call	_memset	;wreg free
  1137  000A80  0012               	return	
  1138  000A82                     __end_of_FastTransfer_buffer_flush:
  1139                           	opt stack 0
  1140                           tblptru	equ	0xFF8
  1141                           tblptrh	equ	0xFF7
  1142                           tblptrl	equ	0xFF6
  1143                           tablat	equ	0xFF5
  1144                           postinc0	equ	0xFEE
  1145                           wreg	equ	0xFE8
  1146                           indf2	equ	0xFDF
  1147                           postinc2	equ	0xFDE
  1148                           postdec2	equ	0xFDD
  1149                           plusw2	equ	0xFDB
  1150                           fsr2h	equ	0xFDA
  1151                           fsr2l	equ	0xFD9
  1152                           status	equ	0xFD8
  1153                           
  1154 ;; *************** function _memset *****************
  1155 ;; Defined at:
  1156 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  1157 ;; Parameters:    Size  Location     Type
  1158 ;;  p1              2   26[COMRAM] PTR void 
  1159 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  1160 ;;  c               2   28[COMRAM] int 
  1161 ;;  n               2   30[COMRAM] unsigned int 
  1162 ;; Auto vars:     Size  Location     Type
  1163 ;;  p               2   32[COMRAM] PTR unsigned char 
  1164 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  1165 ;; Return value:  Size  Location     Type
  1166 ;;                  2   26[COMRAM] PTR void 
  1167 ;; Registers used:
  1168 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1169 ;; Tracked objects:
  1170 ;;		On entry : 0/0
  1171 ;;		On exit  : 0/0
  1172 ;;		Unchanged: 0/0
  1173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1174 ;;      Params:         6       0       0       0       0       0       0
  1175 ;;      Locals:         2       0       0       0       0       0       0
  1176 ;;      Temps:          0       0       0       0       0       0       0
  1177 ;;      Totals:         8       0       0       0       0       0       0
  1178 ;;Total ram usage:        8 bytes
  1179 ;; Hardware stack levels used:    1
  1180 ;; Hardware stack levels required when called:    4
  1181 ;; This function calls:
  1182 ;;		Nothing
  1183 ;; This function is called by:
  1184 ;;		_FastTransfer_buffer_flush
  1185 ;;		_UART_buff_init
  1186 ;;		_UART_buff_flush
  1187 ;; This function uses a non-reentrant model
  1188 ;;
  1189                           
  1190                           	psect	text6
  1191  000BCE                     __ptext6:
  1192                           	opt stack 0
  1193  000BCE                     _memset:
  1194                           	opt stack 22
  1195                           
  1196                           ;incstack = 0
  1197  000BCE  C01B  F021         	movff	memset@p1,memset@p
  1198  000BD2  C01C  F022         	movff	memset@p1+1,memset@p+1
  1199  000BD6  D008               	goto	l1982
  1200  000BD8                     l1978:
  1201  000BD8  C021  FFD9         	movff	memset@p,fsr2l
  1202  000BDC  C022  FFDA         	movff	memset@p+1,fsr2h
  1203  000BE0  C01D  FFDF         	movff	memset@c,indf2
  1204  000BE4  4A21               	infsnz	memset@p,f,c
  1205  000BE6  2A22               	incf	memset@p+1,f,c
  1206  000BE8                     l1982:
  1207  000BE8  061F               	decf	memset@n,f,c
  1208  000BEA  A0D8               	btfss	status,0,c
  1209  000BEC  0620               	decf	memset@n+1,f,c
  1210  000BEE  281F               	incf	memset@n,w,c
  1211  000BF0  E1F3               	bnz	l1978
  1212  000BF2  2820               	incf	memset@n+1,w,c
  1213  000BF4  B4D8               	btfsc	status,2,c
  1214  000BF6  0012               	return	
  1215  000BF8  D7EF               	goto	l1978
  1216  000BFA                     __end_of_memset:
  1217                           	opt stack 0
  1218                           tblptru	equ	0xFF8
  1219                           tblptrh	equ	0xFF7
  1220                           tblptrl	equ	0xFF6
  1221                           tablat	equ	0xFF5
  1222                           postinc0	equ	0xFEE
  1223                           wreg	equ	0xFE8
  1224                           indf2	equ	0xFDF
  1225                           postinc2	equ	0xFDE
  1226                           postdec2	equ	0xFDD
  1227                           plusw2	equ	0xFDB
  1228                           fsr2h	equ	0xFDA
  1229                           fsr2l	equ	0xFD9
  1230                           status	equ	0xFD8
  1231                           
  1232 ;; *************** function _ToSend *****************
  1233 ;; Defined at:
  1234 ;;		line 214 in file "FastTransfer.c"
  1235 ;; Parameters:    Size  Location     Type
  1236 ;;  where           1    wreg     unsigned char 
  1237 ;;  what            2    2[BANK0 ] unsigned int 
  1238 ;; Auto vars:     Size  Location     Type
  1239 ;;  where           1    4[BANK0 ] unsigned char 
  1240 ;; Return value:  Size  Location     Type
  1241 ;;                  1    wreg      void 
  1242 ;; Registers used:
  1243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1244 ;; Tracked objects:
  1245 ;;		On entry : 0/0
  1246 ;;		On exit  : 0/0
  1247 ;;		Unchanged: 0/0
  1248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1249 ;;      Params:         0       2       0       0       0       0       0
  1250 ;;      Locals:         0       1       0       0       0       0       0
  1251 ;;      Temps:          0       0       0       0       0       0       0
  1252 ;;      Totals:         0       3       0       0       0       0       0
  1253 ;;Total ram usage:        3 bytes
  1254 ;; Hardware stack levels used:    1
  1255 ;; Hardware stack levels required when called:    6
  1256 ;; This function calls:
  1257 ;;		_FastTransfer_buffer_put
  1258 ;; This function is called by:
  1259 ;;		_respondECU
  1260 ;; This function uses a non-reentrant model
  1261 ;;
  1262                           
  1263                           	psect	text7
  1264  000C4E                     __ptext7:
  1265                           	opt stack 0
  1266  000C4E                     _ToSend:
  1267                           	opt stack 22
  1268                           
  1269                           ;incstack = 0
  1270                           ;ToSend@where stored from wreg
  1271  000C4E  0100               	movlb	0	; () banked
  1272  000C50  6FA3               	movwf	ToSend@where& (0+255),b
  1273                           
  1274                           ;FastTransfer.c: 215: FastTransfer_buffer_put(&ring_buffer, where, what);
  1275  000C52  0E00               	movlw	low _ring_buffer
  1276  000C54  6E21               	movwf	FastTransfer_buffer_put@_this,c
  1277  000C56  0E01               	movlw	high _ring_buffer
  1278  000C58  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  1279  000C5A  C0A3  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  1280  000C5E  C0A1  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  1281  000C62  C0A2  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  1282  000C66  ECA3  F001         	call	_FastTransfer_buffer_put	;wreg free
  1283  000C6A  0012               	return		;funcret
  1284  000C6C                     __end_of_ToSend:
  1285                           	opt stack 0
  1286                           tblptru	equ	0xFF8
  1287                           tblptrh	equ	0xFF7
  1288                           tblptrl	equ	0xFF6
  1289                           tablat	equ	0xFF5
  1290                           postinc0	equ	0xFEE
  1291                           wreg	equ	0xFE8
  1292                           indf2	equ	0xFDF
  1293                           postinc2	equ	0xFDE
  1294                           postdec2	equ	0xFDD
  1295                           plusw2	equ	0xFDB
  1296                           fsr2h	equ	0xFDA
  1297                           fsr2l	equ	0xFD9
  1298                           status	equ	0xFD8
  1299                           
  1300 ;; *************** function _FastTransfer_buffer_put *****************
  1301 ;; Defined at:
  1302 ;;		line 221 in file "FastTransfer.c"
  1303 ;; Parameters:    Size  Location     Type
  1304 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  1305 ;;		 -> ring_buffer(206), 
  1306 ;;  towhere         1   34[COMRAM] unsigned char 
  1307 ;;  towhat          2   35[COMRAM] unsigned int 
  1308 ;; Auto vars:     Size  Location     Type
  1309 ;;		None
  1310 ;; Return value:  Size  Location     Type
  1311 ;;                  1    wreg      void 
  1312 ;; Registers used:
  1313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1314 ;; Tracked objects:
  1315 ;;		On entry : 0/0
  1316 ;;		On exit  : 0/0
  1317 ;;		Unchanged: 0/0
  1318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1319 ;;      Params:         5       0       0       0       0       0       0
  1320 ;;      Locals:         0       0       0       0       0       0       0
  1321 ;;      Temps:          0       2       0       0       0       0       0
  1322 ;;      Totals:         5       2       0       0       0       0       0
  1323 ;;Total ram usage:        7 bytes
  1324 ;; Hardware stack levels used:    1
  1325 ;; Hardware stack levels required when called:    5
  1326 ;; This function calls:
  1327 ;;		_FastTransfer_buffer_modulo_inc
  1328 ;; This function is called by:
  1329 ;;		_ToSend
  1330 ;; This function uses a non-reentrant model
  1331 ;;
  1332                           
  1333                           	psect	text8
  1334  000346                     __ptext8:
  1335                           	opt stack 0
  1336  000346                     _FastTransfer_buffer_put:
  1337                           	opt stack 22
  1338                           
  1339                           ;FastTransfer.c: 223: group.integer = towhat;
  1340                           
  1341                           ;incstack = 0
  1342  000346  C024  F02C         	movff	FastTransfer_buffer_put@towhat,_group
  1343  00034A  C025  F02D         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  1344                           
  1345                           ;FastTransfer.c: 225: if (_this->count < (200 - 3)) {
  1346  00034E  EE20 F0CC          	lfsr	2,204
  1347  000352  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1348  000354  26D9               	addwf	fsr2l,f,c
  1349  000356  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1350  000358  22DA               	addwfc	fsr2h,f,c
  1351  00035A  0E01               	movlw	1
  1352  00035C  BEDB               	btfsc	plusw2,7,c
  1353  00035E  D007               	goto	l2022
  1354  000360  0E01               	movlw	1
  1355  000362  50DB               	movf	plusw2,w,c
  1356  000364  E103               	bnz	u1101
  1357  000366  0EC5               	movlw	197
  1358  000368  5CDE               	subwf	postinc2,w,c
  1359  00036A  B0D8               	btfsc	status,0,c
  1360  00036C                     u1101:
  1361  00036C  0012               	return	
  1362  00036E                     l2022:
  1363                           
  1364                           ;FastTransfer.c: 226: _this->buf[_this->head] = towhere;
  1365  00036E  EE20 F0C8          	lfsr	2,200
  1366  000372  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1367  000374  26D9               	addwf	fsr2l,f,c
  1368  000376  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1369  000378  22DA               	addwfc	fsr2h,f,c
  1370  00037A  CFDE F09F          	movff	postinc2,??_FastTransfer_buffer_put
  1371  00037E  CFDD F0A0          	movff	postdec2,??_FastTransfer_buffer_put+1
  1372  000382  0100               	movlb	0	; () banked
  1373  000384  519F               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1374  000386  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1375  000388  6ED9               	movwf	fsr2l,c
  1376  00038A  0100               	movlb	0	; () banked
  1377  00038C  51A0               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1378  00038E  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1379  000390  6EDA               	movwf	fsr2h,c
  1380  000392  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  1381                           
  1382                           ; BSR set to: 0
  1383                           ;FastTransfer.c: 227: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1384  000396  EE20 F0C8          	lfsr	2,200
  1385  00039A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1386  00039C  26D9               	addwf	fsr2l,f,c
  1387  00039E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1388  0003A0  22DA               	addwfc	fsr2h,f,c
  1389  0003A2  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1390  0003A6  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1391  0003AA  0E00               	movlw	0
  1392  0003AC  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1393  0003AE  0EC8               	movlw	200
  1394  0003B0  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1395  0003B2  ECFD  F005         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1396  0003B6  EE20 F0C8          	lfsr	2,200
  1397  0003BA  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1398  0003BC  26D9               	addwf	fsr2l,f,c
  1399  0003BE  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1400  0003C0  22DA               	addwfc	fsr2h,f,c
  1401  0003C2  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1402  0003C6  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1403                           
  1404                           ;FastTransfer.c: 228: ++_this->count;
  1405  0003CA  EE20 F0CC          	lfsr	2,204
  1406  0003CE  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1407  0003D0  26D9               	addwf	fsr2l,f,c
  1408  0003D2  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1409  0003D4  22DA               	addwfc	fsr2h,f,c
  1410  0003D6  2ADE               	incf	postinc2,f,c
  1411  0003D8  0E00               	movlw	0
  1412  0003DA  22DD               	addwfc	postdec2,f,c
  1413                           
  1414                           ;FastTransfer.c: 229: _this->buf[_this->head] = group.parts[0];
  1415  0003DC  EE20 F0C8          	lfsr	2,200
  1416  0003E0  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1417  0003E2  26D9               	addwf	fsr2l,f,c
  1418  0003E4  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1419  0003E6  22DA               	addwfc	fsr2h,f,c
  1420  0003E8  CFDE F09F          	movff	postinc2,??_FastTransfer_buffer_put
  1421  0003EC  CFDD F0A0          	movff	postdec2,??_FastTransfer_buffer_put+1
  1422  0003F0  0100               	movlb	0	; () banked
  1423  0003F2  519F               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1424  0003F4  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1425  0003F6  6ED9               	movwf	fsr2l,c
  1426  0003F8  0100               	movlb	0	; () banked
  1427  0003FA  51A0               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1428  0003FC  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1429  0003FE  6EDA               	movwf	fsr2h,c
  1430  000400  C02C  FFDF         	movff	_group,indf2
  1431                           
  1432                           ; BSR set to: 0
  1433                           ;FastTransfer.c: 230: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1434  000404  EE20 F0C8          	lfsr	2,200
  1435  000408  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1436  00040A  26D9               	addwf	fsr2l,f,c
  1437  00040C  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1438  00040E  22DA               	addwfc	fsr2h,f,c
  1439  000410  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1440  000414  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1441  000418  0E00               	movlw	0
  1442  00041A  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1443  00041C  0EC8               	movlw	200
  1444  00041E  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1445  000420  ECFD  F005         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1446  000424  EE20 F0C8          	lfsr	2,200
  1447  000428  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1448  00042A  26D9               	addwf	fsr2l,f,c
  1449  00042C  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1450  00042E  22DA               	addwfc	fsr2h,f,c
  1451  000430  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1452  000434  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1453                           
  1454                           ;FastTransfer.c: 231: ++_this->count;
  1455  000438  EE20 F0CC          	lfsr	2,204
  1456  00043C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1457  00043E  26D9               	addwf	fsr2l,f,c
  1458  000440  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1459  000442  22DA               	addwfc	fsr2h,f,c
  1460  000444  2ADE               	incf	postinc2,f,c
  1461  000446  0E00               	movlw	0
  1462  000448  22DD               	addwfc	postdec2,f,c
  1463                           
  1464                           ;FastTransfer.c: 232: _this->buf[_this->head] = group.parts[1];
  1465  00044A  EE20 F0C8          	lfsr	2,200
  1466  00044E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1467  000450  26D9               	addwf	fsr2l,f,c
  1468  000452  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1469  000454  22DA               	addwfc	fsr2h,f,c
  1470  000456  CFDE F09F          	movff	postinc2,??_FastTransfer_buffer_put
  1471  00045A  CFDD F0A0          	movff	postdec2,??_FastTransfer_buffer_put+1
  1472  00045E  0100               	movlb	0	; () banked
  1473  000460  519F               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1474  000462  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1475  000464  6ED9               	movwf	fsr2l,c
  1476  000466  0100               	movlb	0	; () banked
  1477  000468  51A0               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1478  00046A  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1479  00046C  6EDA               	movwf	fsr2h,c
  1480  00046E  C02D  FFDF         	movff	_group+1,indf2
  1481                           
  1482                           ; BSR set to: 0
  1483                           ;FastTransfer.c: 233: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1484  000472  EE20 F0C8          	lfsr	2,200
  1485  000476  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1486  000478  26D9               	addwf	fsr2l,f,c
  1487  00047A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1488  00047C  22DA               	addwfc	fsr2h,f,c
  1489  00047E  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1490  000482  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1491  000486  0E00               	movlw	0
  1492  000488  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1493  00048A  0EC8               	movlw	200
  1494  00048C  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1495  00048E  ECFD  F005         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1496  000492  EE20 F0C8          	lfsr	2,200
  1497  000496  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1498  000498  26D9               	addwf	fsr2l,f,c
  1499  00049A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1500  00049C  22DA               	addwfc	fsr2h,f,c
  1501  00049E  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1502  0004A2  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1503                           
  1504                           ;FastTransfer.c: 234: ++_this->count;
  1505  0004A6  EE20 F0CC          	lfsr	2,204
  1506  0004AA  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1507  0004AC  26D9               	addwf	fsr2l,f,c
  1508  0004AE  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1509  0004B0  22DA               	addwfc	fsr2h,f,c
  1510  0004B2  2ADE               	incf	postinc2,f,c
  1511  0004B4  0E00               	movlw	0
  1512  0004B6  22DD               	addwfc	postdec2,f,c
  1513  0004B8  0012               	return	
  1514  0004BA                     __end_of_FastTransfer_buffer_put:
  1515                           	opt stack 0
  1516                           tblptru	equ	0xFF8
  1517                           tblptrh	equ	0xFF7
  1518                           tblptrl	equ	0xFF6
  1519                           tablat	equ	0xFF5
  1520                           postinc0	equ	0xFEE
  1521                           wreg	equ	0xFE8
  1522                           indf2	equ	0xFDF
  1523                           postinc2	equ	0xFDE
  1524                           postdec2	equ	0xFDD
  1525                           plusw2	equ	0xFDB
  1526                           fsr2h	equ	0xFDA
  1527                           fsr2l	equ	0xFD9
  1528                           status	equ	0xFD8
  1529                           
  1530 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  1531 ;; Defined at:
  1532 ;;		line 271 in file "FastTransfer.c"
  1533 ;; Parameters:    Size  Location     Type
  1534 ;;  value           2   26[COMRAM] const unsigned int 
  1535 ;;  modulus         2   28[COMRAM] const unsigned int 
  1536 ;; Auto vars:     Size  Location     Type
  1537 ;;  my_value        2   30[COMRAM] unsigned int 
  1538 ;; Return value:  Size  Location     Type
  1539 ;;                  2   26[COMRAM] unsigned int 
  1540 ;; Registers used:
  1541 ;;		wreg, status,2, status,0
  1542 ;; Tracked objects:
  1543 ;;		On entry : 0/0
  1544 ;;		On exit  : 0/0
  1545 ;;		Unchanged: 0/0
  1546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1547 ;;      Params:         4       0       0       0       0       0       0
  1548 ;;      Locals:         2       0       0       0       0       0       0
  1549 ;;      Temps:          0       0       0       0       0       0       0
  1550 ;;      Totals:         6       0       0       0       0       0       0
  1551 ;;Total ram usage:        6 bytes
  1552 ;; Hardware stack levels used:    1
  1553 ;; Hardware stack levels required when called:    4
  1554 ;; This function calls:
  1555 ;;		Nothing
  1556 ;; This function is called by:
  1557 ;;		_FastTransfer_buffer_put
  1558 ;;		_FastTransfer_buffer_get
  1559 ;; This function uses a non-reentrant model
  1560 ;;
  1561                           
  1562                           	psect	text9
  1563  000BFA                     __ptext9:
  1564                           	opt stack 0
  1565  000BFA                     _FastTransfer_buffer_modulo_inc:
  1566                           	opt stack 22
  1567                           
  1568                           ;FastTransfer.c: 272: unsigned int my_value = value + 1;
  1569                           
  1570                           ;incstack = 0
  1571  000BFA  0E01               	movlw	1
  1572  000BFC  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  1573  000BFE  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  1574  000C00  0E00               	movlw	0
  1575  000C02  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  1576  000C04  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  1577                           
  1578                           ;FastTransfer.c: 273: if (my_value >= modulus) {
  1579  000C06  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  1580  000C08  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  1581  000C0A  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  1582  000C0C  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  1583  000C0E  A0D8               	btfss	status,0,c
  1584  000C10  D004               	goto	l1972
  1585                           
  1586                           ;FastTransfer.c: 274: my_value = 0;
  1587  000C12  0E00               	movlw	0
  1588  000C14  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  1589  000C16  0E00               	movlw	0
  1590  000C18  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  1591  000C1A                     l1972:
  1592                           
  1593                           ;FastTransfer.c: 275: }
  1594                           ;FastTransfer.c: 276: return (my_value);
  1595  000C1A  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  1596  000C1E  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  1597  000C22  0012               	return	
  1598  000C24                     __end_of_FastTransfer_buffer_modulo_inc:
  1599                           	opt stack 0
  1600                           tblptru	equ	0xFF8
  1601                           tblptrh	equ	0xFF7
  1602                           tblptrl	equ	0xFF6
  1603                           tablat	equ	0xFF5
  1604                           postinc0	equ	0xFEE
  1605                           wreg	equ	0xFE8
  1606                           indf2	equ	0xFDF
  1607                           postinc2	equ	0xFDE
  1608                           postdec2	equ	0xFDD
  1609                           plusw2	equ	0xFDB
  1610                           fsr2h	equ	0xFDA
  1611                           fsr2l	equ	0xFD9
  1612                           status	equ	0xFD8
  1613                           
  1614 ;; *************** function _Delay *****************
  1615 ;; Defined at:
  1616 ;;		line 23 in file "Communications.c"
  1617 ;; Parameters:    Size  Location     Type
  1618 ;;  wait            2   26[COMRAM] int 
  1619 ;; Auto vars:     Size  Location     Type
  1620 ;;  x               2   29[COMRAM] int 
  1621 ;; Return value:  Size  Location     Type
  1622 ;;                  1    wreg      void 
  1623 ;; Registers used:
  1624 ;;		wreg, status,2, status,0
  1625 ;; Tracked objects:
  1626 ;;		On entry : 0/0
  1627 ;;		On exit  : 0/0
  1628 ;;		Unchanged: 0/0
  1629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1630 ;;      Params:         2       0       0       0       0       0       0
  1631 ;;      Locals:         2       0       0       0       0       0       0
  1632 ;;      Temps:          1       0       0       0       0       0       0
  1633 ;;      Totals:         5       0       0       0       0       0       0
  1634 ;;Total ram usage:        5 bytes
  1635 ;; Hardware stack levels used:    1
  1636 ;; Hardware stack levels required when called:    4
  1637 ;; This function calls:
  1638 ;;		Nothing
  1639 ;; This function is called by:
  1640 ;;		_respondECU
  1641 ;; This function uses a non-reentrant model
  1642 ;;
  1643                           
  1644                           	psect	text10
  1645  000B68                     __ptext10:
  1646                           	opt stack 0
  1647  000B68                     _Delay:
  1648                           	opt stack 24
  1649                           
  1650                           ;Communications.c: 24: int x;
  1651                           ;Communications.c: 25: for (x = 0; x < wait; x++) {
  1652                           
  1653                           ;incstack = 0
  1654  000B68  0E00               	movlw	0
  1655  000B6A  6E1F               	movwf	Delay@x+1,c
  1656  000B6C  0E00               	movlw	0
  1657  000B6E  6E1E               	movwf	Delay@x,c
  1658  000B70  D00A               	goto	l70
  1659  000B72                     l1640:
  1660                           
  1661                           ;Communications.c: 26: _delay((unsigned long)((1)*(16000000/4000.0)));
  1662  000B72  0E06               	movlw	6
  1663  000B74  6E1D               	movwf	??_Delay& (0+255),c
  1664  000B76  0E30               	movlw	48
  1665  000B78                     u1417:
  1666  000B78  2EE8               	decfsz	wreg,f,c
  1667  000B7A  D7FE               	goto	u1417
  1668  000B7C  2E1D               	decfsz	??_Delay& (0+255),f,c
  1669  000B7E  D7FC               	goto	u1417
  1670  000B80  D000               	nop2	
  1671  000B82  4A1E               	infsnz	Delay@x,f,c
  1672  000B84  2A1F               	incf	Delay@x+1,f,c
  1673  000B86                     l70:
  1674  000B86  501B               	movf	Delay@wait,w,c
  1675  000B88  5C1E               	subwf	Delay@x,w,c
  1676  000B8A  501F               	movf	Delay@x+1,w,c
  1677  000B8C  0A80               	xorlw	128
  1678  000B8E  6E1D               	movwf	??_Delay& (0+255),c
  1679  000B90  501C               	movf	Delay@wait+1,w,c
  1680  000B92  0A80               	xorlw	128
  1681  000B94  581D               	subwfb	??_Delay& (0+255),w,c
  1682  000B96  B0D8               	btfsc	status,0,c
  1683  000B98  0012               	return	
  1684  000B9A  D7EB               	goto	l1640
  1685  000B9C                     __end_of_Delay:
  1686                           	opt stack 0
  1687                           tblptru	equ	0xFF8
  1688                           tblptrh	equ	0xFF7
  1689                           tblptrl	equ	0xFF6
  1690                           tablat	equ	0xFF5
  1691                           postinc0	equ	0xFEE
  1692                           wreg	equ	0xFE8
  1693                           indf2	equ	0xFDF
  1694                           postinc2	equ	0xFDE
  1695                           postdec2	equ	0xFDD
  1696                           plusw2	equ	0xFDB
  1697                           fsr2h	equ	0xFDA
  1698                           fsr2l	equ	0xFD9
  1699                           status	equ	0xFD8
  1700                           
  1701 ;; *************** function _receiveData *****************
  1702 ;; Defined at:
  1703 ;;		line 79 in file "FastTransfer.c"
  1704 ;; Parameters:    Size  Location     Type
  1705 ;;		None
  1706 ;; Auto vars:     Size  Location     Type
  1707 ;;  holder          3   20[BANK0 ] unsigned char [3]
  1708 ;;  crcHolder       1   16[BANK0 ] unsigned char 
  1709 ;;  holder          3   17[BANK0 ] unsigned char [3]
  1710 ;;  crcHolder       1   15[BANK0 ] unsigned char 
  1711 ;;  u               2   23[BANK0 ] int 
  1712 ;;  r               2   25[BANK0 ] int 
  1713 ;; Return value:  Size  Location     Type
  1714 ;;                  1    wreg      unsigned char 
  1715 ;; Registers used:
  1716 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1717 ;; Tracked objects:
  1718 ;;		On entry : 0/0
  1719 ;;		On exit  : 0/0
  1720 ;;		Unchanged: 0/0
  1721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1722 ;;      Params:         0       0       0       0       0       0       0
  1723 ;;      Locals:         0      12       0       0       0       0       0
  1724 ;;      Temps:          0       6       0       0       0       0       0
  1725 ;;      Totals:         0      18       0       0       0       0       0
  1726 ;;Total ram usage:       18 bytes
  1727 ;; Hardware stack levels used:    1
  1728 ;; Hardware stack levels required when called:    6
  1729 ;; This function calls:
  1730 ;;		_CRC8
  1731 ;;		_CRCcheck
  1732 ;; This function is called by:
  1733 ;;		_updateComms
  1734 ;; This function uses a non-reentrant model
  1735 ;;
  1736                           
  1737                           	psect	text11
  1738  0000A4                     __ptext11:
  1739                           	opt stack 0
  1740  0000A4                     _receiveData:
  1741                           	opt stack 23
  1742                           
  1743                           ;FastTransfer.c: 84: if (serial_available() > 4) {
  1744                           
  1745                           ;incstack = 0
  1746  0000A4  D020               	goto	l2150
  1747  0000A6                     l2140:
  1748                           
  1749                           ; BSR set to: 0
  1750  0000A6  0100               	movlb	0	; () banked
  1751  0000A8  4BB6               	infsnz	receiveData@u& (0+255),f,b
  1752  0000AA  2BB7               	incf	(receiveData@u+1)& (0+255),f,b
  1753                           
  1754                           ; BSR set to: 0
  1755                           
  1756                           ; BSR set to: 0
  1757  0000AC  5043               	movf	_rx_len,w,c
  1758  0000AE  0100               	movlb	0	; () banked
  1759  0000B0  6FA8               	movwf	??_receiveData& (0+255),b
  1760  0000B2  6BA9               	clrf	(??_receiveData+1)& (0+255),b
  1761  0000B4  0E01               	movlw	1
  1762  0000B6  0100               	movlb	0	; () banked
  1763  0000B8  27A8               	addwf	??_receiveData& (0+255),f,b
  1764  0000BA  0E00               	movlw	0
  1765  0000BC  23A9               	addwfc	(??_receiveData+1)& (0+255),f,b
  1766  0000BE  0100               	movlb	0	; () banked
  1767  0000C0  51B6               	movf	receiveData@u& (0+255),w,b
  1768  0000C2  0100               	movlb	0	; () banked
  1769  0000C4  5DA8               	subwf	??_receiveData& (0+255),w,b
  1770  0000C6  0100               	movlb	0	; () banked
  1771  0000C8  51A9               	movf	(??_receiveData+1)& (0+255),w,b
  1772  0000CA  0A80               	xorlw	128
  1773  0000CC  0100               	movlb	0	; () banked
  1774  0000CE  6FAA               	movwf	(??_receiveData+2)& (0+255),b
  1775  0000D0  0100               	movlb	0	; () banked
  1776  0000D2  51B7               	movf	(receiveData@u+1)& (0+255),w,b
  1777  0000D4  0A80               	xorlw	128
  1778  0000D6  0100               	movlb	0	; () banked
  1779  0000D8  59AA               	subwfb	(??_receiveData+2)& (0+255),w,b
  1780  0000DA  B0D8               	btfsc	status,0,c
  1781  0000DC  D7E4               	goto	l2140
  1782                           
  1783                           ; BSR set to: 0
  1784                           ;FastTransfer.c: 107: }
  1785                           ;FastTransfer.c: 108: rx_len = 0;
  1786                           
  1787                           ; BSR set to: 0
  1788  0000DE  0E00               	movlw	0
  1789  0000E0  6E43               	movwf	_rx_len,c
  1790                           
  1791                           ; BSR set to: 0
  1792                           ;FastTransfer.c: 109: return 0;
  1793  0000E2  0E00               	movlw	0
  1794                           
  1795                           ; BSR set to: 0
  1796  0000E4  0012               	return	
  1797  0000E6                     l2150:
  1798                           
  1799                           ;FastTransfer.c: 110: }
  1800                           ;FastTransfer.c: 112: }
  1801                           ;FastTransfer.c: 113: }
  1802                           ;FastTransfer.c: 114: }
  1803                           ;FastTransfer.c: 117: if (rx_len != 0) {
  1804  0000E6  5043               	movf	_rx_len,w,c
  1805  0000E8  B4D8               	btfsc	status,2,c
  1806  0000EA  D12B               	goto	l2232
  1807                           
  1808                           ;FastTransfer.c: 120: if (rx_array_inx == 0) {
  1809  0000EC  5042               	movf	_rx_array_inx,w,c
  1810  0000EE  B4D8               	btfsc	status,2,c
  1811  0000F0                     l170:
  1812  0000F0  D7FF               	goto	l170
  1813                           
  1814                           ;FastTransfer.c: 133: }
  1815                           ;FastTransfer.c: 135: if (rx_len == (rx_array_inx - 1)) {
  1816                           
  1817                           ;FastTransfer.c: 132: rx_buffer[rx_array_inx++] = serial_read();
  1818                           
  1819                           ;FastTransfer.c: 127: }
  1820                           ;FastTransfer.c: 128: }
  1821                           ;FastTransfer.c: 131: while (serial_available() && rx_array_inx <= rx_len) {
  1822                           
  1823                           ;FastTransfer.c: 126: return 0;
  1824                           
  1825                           ;FastTransfer.c: 125: rx_array_inx = 0;
  1826                           
  1827                           ;FastTransfer.c: 124: rx_len = 0;
  1828                           
  1829                           ;FastTransfer.c: 123: CRCcheck();
  1830                           
  1831                           ;FastTransfer.c: 122: if (255 == serial_peek()) {
  1832  0000F2  5043               	movf	_rx_len,w,c
  1833  0000F4  0100               	movlb	0	; () banked
  1834  0000F6  6FA8               	movwf	??_receiveData& (0+255),b
  1835  0000F8  6BA9               	clrf	(??_receiveData+1)& (0+255),b
  1836  0000FA  0EFF               	movlw	255
  1837  0000FC  0100               	movlb	0	; () banked
  1838  0000FE  6FAA               	movwf	(??_receiveData+2)& (0+255),b
  1839  000100  0EFF               	movlw	255
  1840  000102  0100               	movlb	0	; () banked
  1841  000104  6FAB               	movwf	(??_receiveData+3)& (0+255),b
  1842  000106  5042               	movf	_rx_array_inx,w,c
  1843  000108  0100               	movlb	0	; () banked
  1844  00010A  6FAC               	movwf	(??_receiveData+4)& (0+255),b
  1845  00010C  6BAD               	clrf	(??_receiveData+5)& (0+255),b
  1846  00010E  0100               	movlb	0	; () banked
  1847  000110  51AA               	movf	(??_receiveData+2)& (0+255),w,b
  1848  000112  0100               	movlb	0	; () banked
  1849  000114  27AC               	addwf	(??_receiveData+4)& (0+255),f,b
  1850  000116  0100               	movlb	0	; () banked
  1851  000118  51AB               	movf	(??_receiveData+3)& (0+255),w,b
  1852  00011A  0100               	movlb	0	; () banked
  1853  00011C  23AD               	addwfc	(??_receiveData+5)& (0+255),f,b
  1854  00011E  0100               	movlb	0	; () banked
  1855  000120  51A8               	movf	??_receiveData& (0+255),w,b
  1856  000122  0100               	movlb	0	; () banked
  1857  000124  19AC               	xorwf	(??_receiveData+4)& (0+255),w,b
  1858  000126  E105               	bnz	u1291
  1859  000128  0100               	movlb	0	; () banked
  1860  00012A  51A9               	movf	(??_receiveData+1)& (0+255),w,b
  1861  00012C  0100               	movlb	0	; () banked
  1862  00012E  19AD               	xorwf	(??_receiveData+5)& (0+255),w,b
  1863  000130  A4D8               	btfss	status,2,c
  1864  000132                     u1291:
  1865  000132  D107               	goto	l2232
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;FastTransfer.c: 138: calc_CS = CRC8(rx_buffer, rx_len);
  1869  000134  0E00               	movlw	low _rx_buffer
  1870  000136  6E1B               	movwf	CRC8@data,c
  1871  000138  0E04               	movlw	high _rx_buffer
  1872  00013A  6E1C               	movwf	CRC8@data+1,c
  1873  00013C  C043  F01D         	movff	_rx_len,CRC8@len
  1874  000140  EC75  F005         	call	_CRC8	;wreg free
  1875  000144  6E3D               	movwf	_calc_CS,c
  1876                           
  1877                           ;FastTransfer.c: 142: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  1878  000146  0EFF               	movlw	255
  1879  000148  0100               	movlb	0	; () banked
  1880  00014A  6FA8               	movwf	??_receiveData& (0+255),b
  1881  00014C  0EFF               	movlw	255
  1882  00014E  0100               	movlb	0	; () banked
  1883  000150  6FA9               	movwf	(??_receiveData+1)& (0+255),b
  1884  000152  5042               	movf	_rx_array_inx,w,c
  1885  000154  0100               	movlb	0	; () banked
  1886  000156  6FAA               	movwf	(??_receiveData+2)& (0+255),b
  1887  000158  6BAB               	clrf	(??_receiveData+3)& (0+255),b
  1888  00015A  0100               	movlb	0	; () banked
  1889  00015C  51A8               	movf	??_receiveData& (0+255),w,b
  1890  00015E  0100               	movlb	0	; () banked
  1891  000160  27AA               	addwf	(??_receiveData+2)& (0+255),f,b
  1892  000162  0100               	movlb	0	; () banked
  1893  000164  51A9               	movf	(??_receiveData+1)& (0+255),w,b
  1894  000166  0100               	movlb	0	; () banked
  1895  000168  23AB               	addwfc	(??_receiveData+3)& (0+255),f,b
  1896  00016A  0E00               	movlw	low _rx_buffer
  1897  00016C  0100               	movlb	0	; () banked
  1898  00016E  25AA               	addwf	(??_receiveData+2)& (0+255),w,b
  1899  000170  6ED9               	movwf	fsr2l,c
  1900  000172  0E04               	movlw	high _rx_buffer
  1901  000174  0100               	movlb	0	; () banked
  1902  000176  21AB               	addwfc	(??_receiveData+3)& (0+255),w,b
  1903  000178  6EDA               	movwf	fsr2h,c
  1904  00017A  503D               	movf	_calc_CS,w,c
  1905  00017C  18DE               	xorwf	postinc2,w,c
  1906  00017E  A4D8               	btfss	status,2,c
  1907  000180  D0A9               	goto	l2212
  1908                           
  1909                           ; BSR set to: 0
  1910                           ;FastTransfer.c: 145: int r;
  1911                           ;FastTransfer.c: 146: for (r = 0; r < rx_len; r = r + 3) {
  1912  000182  0E00               	movlw	0
  1913  000184  0100               	movlb	0	; () banked
  1914  000186  6FB9               	movwf	(receiveData@r+1)& (0+255),b
  1915  000188  0E00               	movlw	0
  1916  00018A  6FB8               	movwf	receiveData@r& (0+255),b
  1917  00018C  D05A               	goto	l2190
  1918  00018E                     l2180:
  1919                           
  1920                           ; BSR set to: 0
  1921                           ;FastTransfer.c: 147: if (rx_buffer[r] < maxDataAddress) {
  1922  00018E  0E00               	movlw	low _rx_buffer
  1923  000190  0100               	movlb	0	; () banked
  1924  000192  25B8               	addwf	receiveData@r& (0+255),w,b
  1925  000194  6ED9               	movwf	fsr2l,c
  1926  000196  0E04               	movlw	high _rx_buffer
  1927  000198  0100               	movlb	0	; () banked
  1928  00019A  21B9               	addwfc	(receiveData@r+1)& (0+255),w,b
  1929  00019C  6EDA               	movwf	fsr2h,c
  1930  00019E  503E               	movf	_maxDataAddress,w,c
  1931  0001A0  5CDE               	subwf	postinc2,w,c
  1932  0001A2  B0D8               	btfsc	status,0,c
  1933  0001A4  D041               	goto	l2186
  1934                           
  1935                           ; BSR set to: 0
  1936                           ;FastTransfer.c: 148: group.parts[0] = rx_buffer[r + 1];
  1937  0001A6  0E01               	movlw	1
  1938  0001A8  0100               	movlb	0	; () banked
  1939  0001AA  25B8               	addwf	receiveData@r& (0+255),w,b
  1940  0001AC  0100               	movlb	0	; () banked
  1941  0001AE  6FA8               	movwf	??_receiveData& (0+255),b
  1942  0001B0  0E00               	movlw	0
  1943  0001B2  0100               	movlb	0	; () banked
  1944  0001B4  21B9               	addwfc	(receiveData@r+1)& (0+255),w,b
  1945  0001B6  0100               	movlb	0	; () banked
  1946  0001B8  6FA9               	movwf	(??_receiveData+1)& (0+255),b
  1947  0001BA  0E00               	movlw	low _rx_buffer
  1948  0001BC  0100               	movlb	0	; () banked
  1949  0001BE  25A8               	addwf	??_receiveData& (0+255),w,b
  1950  0001C0  6ED9               	movwf	fsr2l,c
  1951  0001C2  0E04               	movlw	high _rx_buffer
  1952  0001C4  0100               	movlb	0	; () banked
  1953  0001C6  21A9               	addwfc	(??_receiveData+1)& (0+255),w,b
  1954  0001C8  6EDA               	movwf	fsr2h,c
  1955  0001CA  50DF               	movf	indf2,w,c
  1956  0001CC  6E2C               	movwf	_group,c
  1957                           
  1958                           ;FastTransfer.c: 149: group.parts[1] = rx_buffer[r + 2];
  1959  0001CE  0E02               	movlw	2
  1960  0001D0  0100               	movlb	0	; () banked
  1961  0001D2  25B8               	addwf	receiveData@r& (0+255),w,b
  1962  0001D4  0100               	movlb	0	; () banked
  1963  0001D6  6FA8               	movwf	??_receiveData& (0+255),b
  1964  0001D8  0E00               	movlw	0
  1965  0001DA  0100               	movlb	0	; () banked
  1966  0001DC  21B9               	addwfc	(receiveData@r+1)& (0+255),w,b
  1967  0001DE  0100               	movlb	0	; () banked
  1968  0001E0  6FA9               	movwf	(??_receiveData+1)& (0+255),b
  1969  0001E2  0E00               	movlw	low _rx_buffer
  1970  0001E4  0100               	movlb	0	; () banked
  1971  0001E6  25A8               	addwf	??_receiveData& (0+255),w,b
  1972  0001E8  6ED9               	movwf	fsr2l,c
  1973  0001EA  0E04               	movlw	high _rx_buffer
  1974  0001EC  0100               	movlb	0	; () banked
  1975  0001EE  21A9               	addwfc	(??_receiveData+1)& (0+255),w,b
  1976  0001F0  6EDA               	movwf	fsr2h,c
  1977  0001F2  50DF               	movf	indf2,w,c
  1978  0001F4  6E2D               	movwf	_group+1,c
  1979                           
  1980                           ; BSR set to: 0
  1981                           ;FastTransfer.c: 150: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  1982  0001F6  0E00               	movlw	low _rx_buffer
  1983  0001F8  0100               	movlb	0	; () banked
  1984  0001FA  25B8               	addwf	receiveData@r& (0+255),w,b
  1985  0001FC  6ED9               	movwf	fsr2l,c
  1986  0001FE  0E04               	movlw	high _rx_buffer
  1987  000200  0100               	movlb	0	; () banked
  1988  000202  21B9               	addwfc	(receiveData@r+1)& (0+255),w,b
  1989  000204  6EDA               	movwf	fsr2h,c
  1990  000206  50DF               	movf	indf2,w,c
  1991  000208  0100               	movlb	0	; () banked
  1992  00020A  6FA8               	movwf	??_receiveData& (0+255),b
  1993  00020C  0100               	movlb	0	; () banked
  1994  00020E  51A8               	movf	??_receiveData& (0+255),w,b
  1995  000210  0D02               	mullw	2
  1996  000212  50F3               	movf	prodl,w,c
  1997  000214  242E               	addwf	_receiveArrayAddress,w,c
  1998  000216  6ED9               	movwf	fsr2l,c
  1999  000218  50F4               	movf	prodh,w,c
  2000  00021A  202F               	addwfc	_receiveArrayAddress+1,w,c
  2001  00021C  6EDA               	movwf	fsr2h,c
  2002  00021E  C02C  FFDE         	movff	_group,postinc2
  2003  000222  C02D  FFDD         	movff	_group+1,postdec2
  2004                           
  2005                           ;FastTransfer.c: 151: } else {
  2006  000226  D003               	goto	l2188
  2007  000228                     l2186:
  2008                           
  2009                           ; BSR set to: 0
  2010                           ;FastTransfer.c: 152: dataAdressErrorCounter++;
  2011  000228  0100               	movlb	0	; () banked
  2012  00022A  4B8A               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  2013  00022C  2B8B               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  2014  00022E                     l2188:
  2015                           
  2016                           ; BSR set to: 0
  2017  00022E  0E03               	movlw	3
  2018  000230  0100               	movlb	0	; () banked
  2019  000232  25B8               	addwf	receiveData@r& (0+255),w,b
  2020  000234  0100               	movlb	0	; () banked
  2021  000236  6FB8               	movwf	receiveData@r& (0+255),b
  2022  000238  0E00               	movlw	0
  2023  00023A  0100               	movlb	0	; () banked
  2024  00023C  21B9               	addwfc	(receiveData@r+1)& (0+255),w,b
  2025  00023E  0100               	movlb	0	; () banked
  2026  000240  6FB9               	movwf	(receiveData@r+1)& (0+255),b
  2027  000242                     l2190:
  2028                           
  2029                           ; BSR set to: 0
  2030  000242  5043               	movf	_rx_len,w,c
  2031  000244  0100               	movlb	0	; () banked
  2032  000246  6FA8               	movwf	??_receiveData& (0+255),b
  2033  000248  6BA9               	clrf	(??_receiveData+1)& (0+255),b
  2034  00024A  0100               	movlb	0	; () banked
  2035  00024C  51A8               	movf	??_receiveData& (0+255),w,b
  2036  00024E  0100               	movlb	0	; () banked
  2037  000250  5DB8               	subwf	receiveData@r& (0+255),w,b
  2038  000252  0100               	movlb	0	; () banked
  2039  000254  51B9               	movf	(receiveData@r+1)& (0+255),w,b
  2040  000256  0A80               	xorlw	128
  2041  000258  0100               	movlb	0	; () banked
  2042  00025A  6FAA               	movwf	(??_receiveData+2)& (0+255),b
  2043  00025C  0100               	movlb	0	; () banked
  2044  00025E  51A9               	movf	(??_receiveData+1)& (0+255),w,b
  2045  000260  0A80               	xorlw	128
  2046  000262  0100               	movlb	0	; () banked
  2047  000264  59AA               	subwfb	(??_receiveData+2)& (0+255),w,b
  2048  000266  A0D8               	btfss	status,0,c
  2049  000268  D792               	goto	l2180
  2050                           
  2051                           ; BSR set to: 0
  2052                           ;FastTransfer.c: 153: }
  2053                           ;FastTransfer.c: 154: }
  2054                           ;FastTransfer.c: 157: if (AKNAKsend) {
  2055                           
  2056                           ; BSR set to: 0
  2057  00026A  503C               	movf	_AKNAKsend,w,c
  2058  00026C  B4D8               	btfsc	status,2,c
  2059  00026E  D02C               	goto	l2202
  2060                           
  2061                           ; BSR set to: 0
  2062                           ;FastTransfer.c: 158: unsigned char holder[3];
  2063                           ;FastTransfer.c: 159: holder[0] = 255;
  2064  000270  0100               	movlb	0	; () banked
  2065  000272  69B0               	setf	receiveData@holder& (0+255),b
  2066                           
  2067                           ; BSR set to: 0
  2068                           ;FastTransfer.c: 160: holder[1] = 1;
  2069  000274  0E01               	movlw	1
  2070  000276  0100               	movlb	0	; () banked
  2071  000278  6FB1               	movwf	(receiveData@holder+1)& (0+255),b
  2072                           
  2073                           ; BSR set to: 0
  2074                           ;FastTransfer.c: 161: holder[2] = rx_buffer[rx_array_inx - 1];
  2075  00027A  0EFF               	movlw	255
  2076  00027C  0100               	movlb	0	; () banked
  2077  00027E  6FA8               	movwf	??_receiveData& (0+255),b
  2078  000280  0EFF               	movlw	255
  2079  000282  0100               	movlb	0	; () banked
  2080  000284  6FA9               	movwf	(??_receiveData+1)& (0+255),b
  2081  000286  5042               	movf	_rx_array_inx,w,c
  2082  000288  0100               	movlb	0	; () banked
  2083  00028A  6FAA               	movwf	(??_receiveData+2)& (0+255),b
  2084  00028C  6BAB               	clrf	(??_receiveData+3)& (0+255),b
  2085  00028E  0100               	movlb	0	; () banked
  2086  000290  51A8               	movf	??_receiveData& (0+255),w,b
  2087  000292  0100               	movlb	0	; () banked
  2088  000294  27AA               	addwf	(??_receiveData+2)& (0+255),f,b
  2089  000296  0100               	movlb	0	; () banked
  2090  000298  51A9               	movf	(??_receiveData+1)& (0+255),w,b
  2091  00029A  0100               	movlb	0	; () banked
  2092  00029C  23AB               	addwfc	(??_receiveData+3)& (0+255),f,b
  2093  00029E  0E00               	movlw	low _rx_buffer
  2094  0002A0  0100               	movlb	0	; () banked
  2095  0002A2  25AA               	addwf	(??_receiveData+2)& (0+255),w,b
  2096  0002A4  6ED9               	movwf	fsr2l,c
  2097  0002A6  0E04               	movlw	high _rx_buffer
  2098  0002A8  0100               	movlb	0	; () banked
  2099  0002AA  21AB               	addwfc	(??_receiveData+3)& (0+255),w,b
  2100  0002AC  6EDA               	movwf	fsr2h,c
  2101  0002AE  50DF               	movf	indf2,w,c
  2102  0002B0  0100               	movlb	0	; () banked
  2103  0002B2  6FB2               	movwf	(receiveData@holder+2)& (0+255),b
  2104                           
  2105                           ; BSR set to: 0
  2106                           ;FastTransfer.c: 171: serial_write(crcHolder);
  2107  0002B4  0EB0               	movlw	low receiveData@holder
  2108  0002B6  6E1B               	movwf	CRC8@data,c
  2109  0002B8  0E00               	movlw	high receiveData@holder
  2110  0002BA  6E1C               	movwf	CRC8@data+1,c
  2111  0002BC  0E03               	movlw	3
  2112  0002BE  6E1D               	movwf	CRC8@len,c
  2113  0002C0  EC75  F005         	call	_CRC8	;wreg free
  2114  0002C4  0100               	movlb	0	; () banked
  2115  0002C6  6FAE               	movwf	receiveData@crcHolder& (0+255),b
  2116  0002C8                     l2202:
  2117                           
  2118                           ; BSR set to: 0
  2119                           ;FastTransfer.c: 172: }
  2120                           ;FastTransfer.c: 176: rx_len = 0;
  2121  0002C8  0E00               	movlw	0
  2122  0002CA  6E43               	movwf	_rx_len,c
  2123                           
  2124                           ; BSR set to: 0
  2125                           ;FastTransfer.c: 177: rx_array_inx = 0;
  2126  0002CC  0E00               	movlw	0
  2127  0002CE  6E42               	movwf	_rx_array_inx,c
  2128                           
  2129                           ; BSR set to: 0
  2130                           ;FastTransfer.c: 178: return 1;
  2131  0002D0  0E01               	movlw	1
  2132                           
  2133                           ; BSR set to: 0
  2134  0002D2  0012               	return	
  2135  0002D4                     l2212:
  2136                           
  2137                           ; BSR set to: 0
  2138                           ;FastTransfer.c: 180: crcErrorCounter++;
  2139  0002D4  4A2A               	infsnz	_crcErrorCounter,f,c
  2140  0002D6  2A2B               	incf	_crcErrorCounter+1,f,c
  2141                           
  2142                           ; BSR set to: 0
  2143                           ;FastTransfer.c: 182: if (AKNAKsend) {
  2144  0002D8  503C               	movf	_AKNAKsend,w,c
  2145  0002DA  B4D8               	btfsc	status,2,c
  2146  0002DC  D02C               	goto	l2224
  2147                           
  2148                           ; BSR set to: 0
  2149                           ;FastTransfer.c: 183: unsigned char holder[3];
  2150                           ;FastTransfer.c: 184: holder[0] = 255;
  2151  0002DE  0100               	movlb	0	; () banked
  2152  0002E0  69B3               	setf	receiveData@holder_321& (0+255),b
  2153                           
  2154                           ; BSR set to: 0
  2155                           ;FastTransfer.c: 185: holder[1] = 2;
  2156  0002E2  0E02               	movlw	2
  2157  0002E4  0100               	movlb	0	; () banked
  2158  0002E6  6FB4               	movwf	(receiveData@holder_321+1)& (0+255),b
  2159                           
  2160                           ; BSR set to: 0
  2161                           ;FastTransfer.c: 186: holder[2] = rx_buffer[rx_array_inx - 1];
  2162  0002E8  0EFF               	movlw	255
  2163  0002EA  0100               	movlb	0	; () banked
  2164  0002EC  6FA8               	movwf	??_receiveData& (0+255),b
  2165  0002EE  0EFF               	movlw	255
  2166  0002F0  0100               	movlb	0	; () banked
  2167  0002F2  6FA9               	movwf	(??_receiveData+1)& (0+255),b
  2168  0002F4  5042               	movf	_rx_array_inx,w,c
  2169  0002F6  0100               	movlb	0	; () banked
  2170  0002F8  6FAA               	movwf	(??_receiveData+2)& (0+255),b
  2171  0002FA  6BAB               	clrf	(??_receiveData+3)& (0+255),b
  2172  0002FC  0100               	movlb	0	; () banked
  2173  0002FE  51A8               	movf	??_receiveData& (0+255),w,b
  2174  000300  0100               	movlb	0	; () banked
  2175  000302  27AA               	addwf	(??_receiveData+2)& (0+255),f,b
  2176  000304  0100               	movlb	0	; () banked
  2177  000306  51A9               	movf	(??_receiveData+1)& (0+255),w,b
  2178  000308  0100               	movlb	0	; () banked
  2179  00030A  23AB               	addwfc	(??_receiveData+3)& (0+255),f,b
  2180  00030C  0E00               	movlw	low _rx_buffer
  2181  00030E  0100               	movlb	0	; () banked
  2182  000310  25AA               	addwf	(??_receiveData+2)& (0+255),w,b
  2183  000312  6ED9               	movwf	fsr2l,c
  2184  000314  0E04               	movlw	high _rx_buffer
  2185  000316  0100               	movlb	0	; () banked
  2186  000318  21AB               	addwfc	(??_receiveData+3)& (0+255),w,b
  2187  00031A  6EDA               	movwf	fsr2h,c
  2188  00031C  50DF               	movf	indf2,w,c
  2189  00031E  0100               	movlb	0	; () banked
  2190  000320  6FB5               	movwf	(receiveData@holder_321+2)& (0+255),b
  2191                           
  2192                           ; BSR set to: 0
  2193                           ;FastTransfer.c: 196: serial_write(crcHolder);
  2194  000322  0EB3               	movlw	low receiveData@holder_321
  2195  000324  6E1B               	movwf	CRC8@data,c
  2196  000326  0E00               	movlw	high receiveData@holder_321
  2197  000328  6E1C               	movwf	CRC8@data+1,c
  2198  00032A  0E03               	movlw	3
  2199  00032C  6E1D               	movwf	CRC8@len,c
  2200  00032E  EC75  F005         	call	_CRC8	;wreg free
  2201  000332  0100               	movlb	0	; () banked
  2202  000334  6FAF               	movwf	receiveData@crcHolder_322& (0+255),b
  2203  000336                     l2224:
  2204                           
  2205                           ; BSR set to: 0
  2206                           ;FastTransfer.c: 197: }
  2207                           ;FastTransfer.c: 200: rx_len = 0;
  2208  000336  0E00               	movlw	0
  2209  000338  6E43               	movwf	_rx_len,c
  2210                           
  2211                           ; BSR set to: 0
  2212                           ;FastTransfer.c: 201: rx_array_inx = 0;
  2213  00033A  0E00               	movlw	0
  2214  00033C  6E42               	movwf	_rx_array_inx,c
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;FastTransfer.c: 202: return 0;
  2218  00033E  0E00               	movlw	0
  2219                           
  2220                           ; BSR set to: 0
  2221  000340  0012               	return	
  2222  000342                     l2232:
  2223                           
  2224                           ;FastTransfer.c: 203: }
  2225                           ;FastTransfer.c: 204: }
  2226                           ;FastTransfer.c: 205: }
  2227                           ;FastTransfer.c: 208: return 0;
  2228  000342  0E00               	movlw	0
  2229  000344  0012               	return	
  2230  000346                     __end_of_receiveData:
  2231                           	opt stack 0
  2232                           tblptru	equ	0xFF8
  2233                           tblptrh	equ	0xFF7
  2234                           tblptrl	equ	0xFF6
  2235                           tablat	equ	0xFF5
  2236                           prodh	equ	0xFF4
  2237                           prodl	equ	0xFF3
  2238                           postinc0	equ	0xFEE
  2239                           wreg	equ	0xFE8
  2240                           indf2	equ	0xFDF
  2241                           postinc2	equ	0xFDE
  2242                           postdec2	equ	0xFDD
  2243                           plusw2	equ	0xFDB
  2244                           fsr2h	equ	0xFDA
  2245                           fsr2l	equ	0xFD9
  2246                           status	equ	0xFD8
  2247                           
  2248 ;; *************** function _CRCcheck *****************
  2249 ;; Defined at:
  2250 ;;		line 371 in file "FastTransfer.c"
  2251 ;; Parameters:    Size  Location     Type
  2252 ;;		None
  2253 ;; Auto vars:     Size  Location     Type
  2254 ;;  rt              2    7[BANK0 ] int 
  2255 ;;  arrayHolder     3    4[BANK0 ] unsigned char [3]
  2256 ;;  calculatedCR    1    3[BANK0 ] unsigned char 
  2257 ;;  SentCRC         1    2[BANK0 ] unsigned char 
  2258 ;; Return value:  Size  Location     Type
  2259 ;;                  1    wreg      void 
  2260 ;; Registers used:
  2261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2262 ;; Tracked objects:
  2263 ;;		On entry : 0/0
  2264 ;;		On exit  : 0/0
  2265 ;;		Unchanged: 0/0
  2266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2267 ;;      Params:         0       0       0       0       0       0       0
  2268 ;;      Locals:         0       7       0       0       0       0       0
  2269 ;;      Temps:          0       0       0       0       0       0       0
  2270 ;;      Totals:         0       7       0       0       0       0       0
  2271 ;;Total ram usage:        7 bytes
  2272 ;; Hardware stack levels used:    1
  2273 ;; Hardware stack levels required when called:    5
  2274 ;; This function calls:
  2275 ;;		_CRC8
  2276 ;;		_crcBufS_get
  2277 ;;		_crcBufS_status_put
  2278 ;; This function is called by:
  2279 ;;		_receiveData
  2280 ;; This function uses a non-reentrant model
  2281 ;;
  2282                           
  2283                           	psect	text12
  2284  000874                     __ptext12:
  2285                           	opt stack 0
  2286  000874                     _CRCcheck:
  2287                           	opt stack 23
  2288  000874                     l246:
  2289  000874  D7FF               	goto	l246
  2290  000876                     l2096:
  2291                           
  2292                           ; BSR set to: 0
  2293  000876  0100               	movlb	0	; () banked
  2294  000878  BFA7               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  2295  00087A  D008               	goto	l2100
  2296  00087C  0100               	movlb	0	; () banked
  2297  00087E  51A7               	movf	(CRCcheck@rt+1)& (0+255),w,b
  2298  000880  E143               	bnz	l257
  2299  000882  0E05               	movlw	5
  2300  000884  0100               	movlb	0	; () banked
  2301  000886  5DA6               	subwf	CRCcheck@rt& (0+255),w,b
  2302  000888  B0D8               	btfsc	status,0,c
  2303  00088A  0012               	return	
  2304  00088C                     l2100:
  2305                           
  2306                           ; BSR set to: 0
  2307                           ;FastTransfer.c: 387: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  2308  00088C  0E8E               	movlw	low _crc_buffer
  2309  00088E  6E1B               	movwf	crcBufS_get@_this,c
  2310  000890  0E00               	movlw	high _crc_buffer
  2311  000892  6E1C               	movwf	crcBufS_get@_this+1,c
  2312  000894  C0A6  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  2313  000898  0E00               	movlw	0
  2314  00089A  6E1E               	movwf	crcBufS_get@space,c
  2315  00089C  ECEA  F002         	call	_crcBufS_get	;wreg free
  2316  0008A0  1840               	xorwf	_returnAddress,w,c
  2317  0008A2  A4D8               	btfss	status,2,c
  2318  0008A4  D02D               	goto	l2114
  2319                           
  2320                           ;FastTransfer.c: 388: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  2321  0008A6  0E8E               	movlw	low _crc_buffer
  2322  0008A8  6E1B               	movwf	crcBufS_get@_this,c
  2323  0008AA  0E00               	movlw	high _crc_buffer
  2324  0008AC  6E1C               	movwf	crcBufS_get@_this+1,c
  2325  0008AE  C0A6  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  2326  0008B2  0E01               	movlw	1
  2327  0008B4  6E1E               	movwf	crcBufS_get@space,c
  2328  0008B6  ECEA  F002         	call	_crcBufS_get	;wreg free
  2329  0008BA  0100               	movlb	0	; () banked
  2330  0008BC  19A5               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  2331  0008BE  A4D8               	btfss	status,2,c
  2332  0008C0  D01F               	goto	l2114
  2333                           
  2334                           ; BSR set to: 0
  2335                           ;FastTransfer.c: 389: if (arrayHolder[1] == 1) {
  2336  0008C2  0100               	movlb	0	; () banked
  2337  0008C4  05A4               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  2338  0008C6  A4D8               	btfss	status,2,c
  2339  0008C8  D00B               	goto	l2110
  2340                           
  2341                           ; BSR set to: 0
  2342                           ;FastTransfer.c: 390: crcBufS_status_put(&crc_buffer, rt, 1);
  2343  0008CA  0E8E               	movlw	low _crc_buffer
  2344  0008CC  6E1B               	movwf	crcBufS_status_put@_this,c
  2345  0008CE  0E00               	movlw	high _crc_buffer
  2346  0008D0  6E1C               	movwf	crcBufS_status_put@_this+1,c
  2347  0008D2  C0A6  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  2348  0008D6  0E01               	movlw	1
  2349  0008D8  6E1E               	movwf	crcBufS_status_put@status,c
  2350  0008DA  ECCF  F003         	call	_crcBufS_status_put	;wreg free
  2351                           
  2352                           ;FastTransfer.c: 391: break;
  2353  0008DE  0012               	return	
  2354  0008E0                     l2110:
  2355  0008E0  0E02               	movlw	2
  2356  0008E2  0100               	movlb	0	; () banked
  2357  0008E4  19A4               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  2358  0008E6  A4D8               	btfss	status,2,c
  2359  0008E8  D00B               	goto	l2114
  2360                           
  2361                           ; BSR set to: 0
  2362                           ;FastTransfer.c: 393: crcBufS_status_put(&crc_buffer, rt, 2);
  2363  0008EA  0E8E               	movlw	low _crc_buffer
  2364  0008EC  6E1B               	movwf	crcBufS_status_put@_this,c
  2365  0008EE  0E00               	movlw	high _crc_buffer
  2366  0008F0  6E1C               	movwf	crcBufS_status_put@_this+1,c
  2367  0008F2  C0A6  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  2368  0008F6  0E02               	movlw	2
  2369  0008F8  6E1E               	movwf	crcBufS_status_put@status,c
  2370  0008FA  ECCF  F003         	call	_crcBufS_status_put	;wreg free
  2371                           
  2372                           ;FastTransfer.c: 394: break;
  2373  0008FE  0012               	return	
  2374  000900                     l2114:
  2375  000900  0100               	movlb	0	; () banked
  2376  000902  4BA6               	infsnz	CRCcheck@rt& (0+255),f,b
  2377  000904  2BA7               	incf	(CRCcheck@rt+1)& (0+255),f,b
  2378  000906  D7B7               	goto	l2096
  2379  000908                     l257:
  2380  000908  0012               	return		;funcret
  2381  00090A                     __end_of_CRCcheck:
  2382                           	opt stack 0
  2383                           tblptru	equ	0xFF8
  2384                           tblptrh	equ	0xFF7
  2385                           tblptrl	equ	0xFF6
  2386                           tablat	equ	0xFF5
  2387                           prodh	equ	0xFF4
  2388                           prodl	equ	0xFF3
  2389                           postinc0	equ	0xFEE
  2390                           wreg	equ	0xFE8
  2391                           indf2	equ	0xFDF
  2392                           postinc2	equ	0xFDE
  2393                           postdec2	equ	0xFDD
  2394                           plusw2	equ	0xFDB
  2395                           fsr2h	equ	0xFDA
  2396                           fsr2l	equ	0xFD9
  2397                           status	equ	0xFD8
  2398                           
  2399 ;; *************** function _crcBufS_status_put *****************
  2400 ;; Defined at:
  2401 ;;		line 334 in file "FastTransfer.c"
  2402 ;; Parameters:    Size  Location     Type
  2403 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  2404 ;;		 -> crc_buffer(17), 
  2405 ;;  time            1   28[COMRAM] unsigned char 
  2406 ;;  status          1   29[COMRAM] unsigned char 
  2407 ;; Auto vars:     Size  Location     Type
  2408 ;;  wantedTime      2   34[COMRAM] int 
  2409 ;; Return value:  Size  Location     Type
  2410 ;;                  1    wreg      void 
  2411 ;; Registers used:
  2412 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2413 ;; Tracked objects:
  2414 ;;		On entry : 0/0
  2415 ;;		On exit  : 0/0
  2416 ;;		Unchanged: 0/0
  2417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2418 ;;      Params:         4       0       0       0       0       0       0
  2419 ;;      Locals:         2       0       0       0       0       0       0
  2420 ;;      Temps:          4       0       0       0       0       0       0
  2421 ;;      Totals:        10       0       0       0       0       0       0
  2422 ;;Total ram usage:       10 bytes
  2423 ;; Hardware stack levels used:    1
  2424 ;; Hardware stack levels required when called:    4
  2425 ;; This function calls:
  2426 ;;		Nothing
  2427 ;; This function is called by:
  2428 ;;		_CRCcheck
  2429 ;; This function uses a non-reentrant model
  2430 ;;
  2431                           
  2432                           	psect	text13
  2433  00079E                     __ptext13:
  2434                           	opt stack 0
  2435  00079E                     _crcBufS_status_put:
  2436                           	opt stack 23
  2437                           
  2438                           ;FastTransfer.c: 335: if (time >= 5) {
  2439                           
  2440                           ;incstack = 0
  2441  00079E  0E04               	movlw	4
  2442  0007A0  641D               	cpfsgt	crcBufS_status_put@time,c
  2443  0007A2  D002               	goto	l2064
  2444                           
  2445                           ;FastTransfer.c: 336: time = 5 - 1;
  2446  0007A4  0E04               	movlw	4
  2447  0007A6  6E1D               	movwf	crcBufS_status_put@time,c
  2448  0007A8                     l2064:
  2449                           
  2450                           ;FastTransfer.c: 337: }
  2451                           ;FastTransfer.c: 338: time = time + 1;
  2452  0007A8  281D               	incf	crcBufS_status_put@time,w,c
  2453  0007AA  6E1D               	movwf	crcBufS_status_put@time,c
  2454                           
  2455                           ;FastTransfer.c: 339: int wantedTime = time * 3;
  2456  0007AC  501D               	movf	crcBufS_status_put@time,w,c
  2457  0007AE  0D03               	mullw	3
  2458  0007B0  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  2459  0007B4  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  2460                           
  2461                           ;FastTransfer.c: 340: if (wantedTime > _this->head) {
  2462  0007B8  EE20 F00F          	lfsr	2,15
  2463  0007BC  501B               	movf	crcBufS_status_put@_this,w,c
  2464  0007BE  26D9               	addwf	fsr2l,f,c
  2465  0007C0  501C               	movf	crcBufS_status_put@_this+1,w,c
  2466  0007C2  22DA               	addwfc	fsr2h,f,c
  2467  0007C4  5023               	movf	crcBufS_status_put@wantedTime,w,c
  2468  0007C6  5CDE               	subwf	postinc2,w,c
  2469  0007C8  50DE               	movf	postinc2,w,c
  2470  0007CA  0A80               	xorlw	128
  2471  0007CC  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  2472  0007CE  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  2473  0007D0  0A80               	xorlw	128
  2474  0007D2  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  2475  0007D4  B0D8               	btfsc	status,0,c
  2476  0007D6  D02B               	goto	l2072
  2477                           
  2478                           ;FastTransfer.c: 341: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  2479  0007D8  EE20 F00F          	lfsr	2,15
  2480  0007DC  501B               	movf	crcBufS_status_put@_this,w,c
  2481  0007DE  26D9               	addwf	fsr2l,f,c
  2482  0007E0  501C               	movf	crcBufS_status_put@_this+1,w,c
  2483  0007E2  22DA               	addwfc	fsr2h,f,c
  2484  0007E4  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  2485  0007E8  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  2486  0007EC  1E1F               	comf	??_crcBufS_status_put,f,c
  2487  0007EE  1E20               	comf	??_crcBufS_status_put+1,f,c
  2488  0007F0  4A1F               	infsnz	??_crcBufS_status_put,f,c
  2489  0007F2  2A20               	incf	??_crcBufS_status_put+1,f,c
  2490  0007F4  5023               	movf	crcBufS_status_put@wantedTime,w,c
  2491  0007F6  261F               	addwf	??_crcBufS_status_put,f,c
  2492  0007F8  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  2493  0007FA  2220               	addwfc	??_crcBufS_status_put+1,f,c
  2494  0007FC  1E1F               	comf	??_crcBufS_status_put,f,c
  2495  0007FE  1E20               	comf	??_crcBufS_status_put+1,f,c
  2496  000800  4A1F               	infsnz	??_crcBufS_status_put,f,c
  2497  000802  2A20               	incf	??_crcBufS_status_put+1,f,c
  2498  000804  0E0F               	movlw	15
  2499  000806  241F               	addwf	??_crcBufS_status_put,w,c
  2500  000808  6E23               	movwf	crcBufS_status_put@wantedTime,c
  2501  00080A  0E00               	movlw	0
  2502  00080C  2020               	addwfc	??_crcBufS_status_put+1,w,c
  2503  00080E  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  2504                           
  2505                           ;FastTransfer.c: 342: _this->buf[(wantedTime + 2)] = status;
  2506  000810  0E02               	movlw	2
  2507  000812  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  2508  000814  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  2509  000816  0E00               	movlw	0
  2510  000818  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  2511  00081A  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  2512  00081C  501F               	movf	??_crcBufS_status_put,w,c
  2513  00081E  241B               	addwf	crcBufS_status_put@_this,w,c
  2514  000820  6ED9               	movwf	fsr2l,c
  2515  000822  5020               	movf	??_crcBufS_status_put+1,w,c
  2516  000824  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  2517  000826  6EDA               	movwf	fsr2h,c
  2518  000828  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  2519                           
  2520                           ;FastTransfer.c: 343: } else {
  2521  00082C  0012               	return	
  2522  00082E                     l2072:
  2523                           
  2524                           ;FastTransfer.c: 344: _this->buf[(_this->head - wantedTime) + 2] = status;
  2525  00082E  EE20 F00F          	lfsr	2,15
  2526  000832  501B               	movf	crcBufS_status_put@_this,w,c
  2527  000834  26D9               	addwf	fsr2l,f,c
  2528  000836  501C               	movf	crcBufS_status_put@_this+1,w,c
  2529  000838  22DA               	addwfc	fsr2h,f,c
  2530  00083A  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  2531  00083E  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  2532  000842  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  2533  000846  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  2534  00084A  1E21               	comf	??_crcBufS_status_put+2,f,c
  2535  00084C  1E22               	comf	??_crcBufS_status_put+3,f,c
  2536  00084E  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  2537  000850  2A22               	incf	??_crcBufS_status_put+3,f,c
  2538  000852  501F               	movf	??_crcBufS_status_put,w,c
  2539  000854  2621               	addwf	??_crcBufS_status_put+2,f,c
  2540  000856  5020               	movf	??_crcBufS_status_put+1,w,c
  2541  000858  2222               	addwfc	??_crcBufS_status_put+3,f,c
  2542  00085A  0E02               	movlw	2
  2543  00085C  2621               	addwf	??_crcBufS_status_put+2,f,c
  2544  00085E  0E00               	movlw	0
  2545  000860  2222               	addwfc	??_crcBufS_status_put+3,f,c
  2546  000862  5021               	movf	??_crcBufS_status_put+2,w,c
  2547  000864  241B               	addwf	crcBufS_status_put@_this,w,c
  2548  000866  6ED9               	movwf	fsr2l,c
  2549  000868  5022               	movf	??_crcBufS_status_put+3,w,c
  2550  00086A  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  2551  00086C  6EDA               	movwf	fsr2h,c
  2552  00086E  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  2553  000872  0012               	return	
  2554  000874                     __end_of_crcBufS_status_put:
  2555                           	opt stack 0
  2556                           tblptru	equ	0xFF8
  2557                           tblptrh	equ	0xFF7
  2558                           tblptrl	equ	0xFF6
  2559                           tablat	equ	0xFF5
  2560                           prodh	equ	0xFF4
  2561                           prodl	equ	0xFF3
  2562                           postinc0	equ	0xFEE
  2563                           wreg	equ	0xFE8
  2564                           indf2	equ	0xFDF
  2565                           postinc2	equ	0xFDE
  2566                           postdec2	equ	0xFDD
  2567                           plusw2	equ	0xFDB
  2568                           fsr2h	equ	0xFDA
  2569                           fsr2l	equ	0xFD9
  2570                           status	equ	0xFD8
  2571                           
  2572 ;; *************** function _crcBufS_get *****************
  2573 ;; Defined at:
  2574 ;;		line 351 in file "FastTransfer.c"
  2575 ;; Parameters:    Size  Location     Type
  2576 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  2577 ;;		 -> crc_buffer(17), 
  2578 ;;  time            1   28[COMRAM] unsigned char 
  2579 ;;  space           1   29[COMRAM] unsigned char 
  2580 ;; Auto vars:     Size  Location     Type
  2581 ;;  wantedTime      2    0[BANK0 ] int 
  2582 ;; Return value:  Size  Location     Type
  2583 ;;                  1    wreg      unsigned char 
  2584 ;; Registers used:
  2585 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2586 ;; Tracked objects:
  2587 ;;		On entry : 0/0
  2588 ;;		On exit  : 0/0
  2589 ;;		Unchanged: 0/0
  2590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2591 ;;      Params:         4       0       0       0       0       0       0
  2592 ;;      Locals:         0       2       0       0       0       0       0
  2593 ;;      Temps:          6       0       0       0       0       0       0
  2594 ;;      Totals:        10       2       0       0       0       0       0
  2595 ;;Total ram usage:       12 bytes
  2596 ;; Hardware stack levels used:    1
  2597 ;; Hardware stack levels required when called:    4
  2598 ;; This function calls:
  2599 ;;		Nothing
  2600 ;; This function is called by:
  2601 ;;		_CRCcheck
  2602 ;;		_AKNAK
  2603 ;; This function uses a non-reentrant model
  2604 ;;
  2605                           
  2606                           	psect	text14
  2607  0005D4                     __ptext14:
  2608                           	opt stack 0
  2609  0005D4                     _crcBufS_get:
  2610                           	opt stack 23
  2611                           
  2612                           ;FastTransfer.c: 352: if (time >= 5) {
  2613                           
  2614                           ;incstack = 0
  2615  0005D4  0E04               	movlw	4
  2616  0005D6  641D               	cpfsgt	crcBufS_get@time,c
  2617  0005D8  D002               	goto	l2040
  2618                           
  2619                           ;FastTransfer.c: 353: time = 5 - 1;
  2620  0005DA  0E04               	movlw	4
  2621  0005DC  6E1D               	movwf	crcBufS_get@time,c
  2622  0005DE                     l2040:
  2623                           
  2624                           ;FastTransfer.c: 354: }
  2625                           ;FastTransfer.c: 355: if (space >= 3) {
  2626  0005DE  0E02               	movlw	2
  2627  0005E0  641E               	cpfsgt	crcBufS_get@space,c
  2628  0005E2  D002               	goto	l2044
  2629                           
  2630                           ;FastTransfer.c: 356: space = 3 - 1;
  2631  0005E4  0E02               	movlw	2
  2632  0005E6  6E1E               	movwf	crcBufS_get@space,c
  2633  0005E8                     l2044:
  2634                           
  2635                           ;FastTransfer.c: 357: }
  2636                           ;FastTransfer.c: 358: time = time + 1;
  2637  0005E8  281D               	incf	crcBufS_get@time,w,c
  2638  0005EA  6E1D               	movwf	crcBufS_get@time,c
  2639                           
  2640                           ;FastTransfer.c: 359: int wantedTime = time * 3;
  2641  0005EC  501D               	movf	crcBufS_get@time,w,c
  2642  0005EE  0D03               	mullw	3
  2643  0005F0  CFF3 F09F          	movff	prodl,crcBufS_get@wantedTime
  2644  0005F4  CFF4 F0A0          	movff	prodh,crcBufS_get@wantedTime+1
  2645                           
  2646                           ;FastTransfer.c: 360: if (wantedTime > _this->head) {
  2647  0005F8  EE20 F00F          	lfsr	2,15
  2648  0005FC  501B               	movf	crcBufS_get@_this,w,c
  2649  0005FE  26D9               	addwf	fsr2l,f,c
  2650  000600  501C               	movf	crcBufS_get@_this+1,w,c
  2651  000602  22DA               	addwfc	fsr2h,f,c
  2652  000604  0100               	movlb	0	; () banked
  2653  000606  519F               	movf	crcBufS_get@wantedTime& (0+255),w,b
  2654  000608  5CDE               	subwf	postinc2,w,c
  2655  00060A  50DE               	movf	postinc2,w,c
  2656  00060C  0A80               	xorlw	128
  2657  00060E  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  2658  000610  0100               	movlb	0	; () banked
  2659  000612  51A0               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  2660  000614  0A80               	xorlw	128
  2661  000616  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  2662  000618  B0D8               	btfsc	status,0,c
  2663  00061A  D030               	goto	l2056
  2664                           
  2665                           ; BSR set to: 0
  2666                           ;FastTransfer.c: 361: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  2667  00061C  EE20 F00F          	lfsr	2,15
  2668  000620  501B               	movf	crcBufS_get@_this,w,c
  2669  000622  26D9               	addwf	fsr2l,f,c
  2670  000624  501C               	movf	crcBufS_get@_this+1,w,c
  2671  000626  22DA               	addwfc	fsr2h,f,c
  2672  000628  CFDE F01F          	movff	postinc2,??_crcBufS_get
  2673  00062C  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  2674  000630  1E1F               	comf	??_crcBufS_get,f,c
  2675  000632  1E20               	comf	??_crcBufS_get+1,f,c
  2676  000634  4A1F               	infsnz	??_crcBufS_get,f,c
  2677  000636  2A20               	incf	??_crcBufS_get+1,f,c
  2678  000638  0100               	movlb	0	; () banked
  2679  00063A  519F               	movf	crcBufS_get@wantedTime& (0+255),w,b
  2680  00063C  261F               	addwf	??_crcBufS_get,f,c
  2681  00063E  0100               	movlb	0	; () banked
  2682  000640  51A0               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  2683  000642  2220               	addwfc	??_crcBufS_get+1,f,c
  2684  000644  1E1F               	comf	??_crcBufS_get,f,c
  2685  000646  1E20               	comf	??_crcBufS_get+1,f,c
  2686  000648  4A1F               	infsnz	??_crcBufS_get,f,c
  2687  00064A  2A20               	incf	??_crcBufS_get+1,f,c
  2688  00064C  0E0F               	movlw	15
  2689  00064E  241F               	addwf	??_crcBufS_get,w,c
  2690  000650  0100               	movlb	0	; () banked
  2691  000652  6F9F               	movwf	crcBufS_get@wantedTime& (0+255),b
  2692  000654  0E00               	movlw	0
  2693  000656  2020               	addwfc	??_crcBufS_get+1,w,c
  2694  000658  0100               	movlb	0	; () banked
  2695  00065A  6FA0               	movwf	(crcBufS_get@wantedTime+1)& (0+255),b
  2696                           
  2697                           ;FastTransfer.c: 362: return (_this->buf[(wantedTime + space)]);
  2698  00065C  501E               	movf	crcBufS_get@space,w,c
  2699  00065E  0100               	movlb	0	; () banked
  2700  000660  259F               	addwf	crcBufS_get@wantedTime& (0+255),w,b
  2701  000662  6E1F               	movwf	??_crcBufS_get& (0+255),c
  2702  000664  0E00               	movlw	0
  2703  000666  0100               	movlb	0	; () banked
  2704  000668  21A0               	addwfc	(crcBufS_get@wantedTime+1)& (0+255),w,b
  2705  00066A  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  2706  00066C  501F               	movf	??_crcBufS_get,w,c
  2707  00066E  241B               	addwf	crcBufS_get@_this,w,c
  2708  000670  6ED9               	movwf	fsr2l,c
  2709  000672  5020               	movf	??_crcBufS_get+1,w,c
  2710  000674  201C               	addwfc	crcBufS_get@_this+1,w,c
  2711  000676  6EDA               	movwf	fsr2h,c
  2712  000678  50DF               	movf	indf2,w,c
  2713                           
  2714                           ; BSR set to: 0
  2715                           ;FastTransfer.c: 363: } else {
  2716                           
  2717                           ; BSR set to: 0
  2718  00067A  0012               	return	
  2719  00067C                     l2056:
  2720                           
  2721                           ; BSR set to: 0
  2722                           ;FastTransfer.c: 364: return (_this->buf[(_this->head - wantedTime) + space]);
  2723  00067C  EE20 F00F          	lfsr	2,15
  2724  000680  501B               	movf	crcBufS_get@_this,w,c
  2725  000682  26D9               	addwf	fsr2l,f,c
  2726  000684  501C               	movf	crcBufS_get@_this+1,w,c
  2727  000686  22DA               	addwfc	fsr2h,f,c
  2728  000688  CFDE F01F          	movff	postinc2,??_crcBufS_get
  2729  00068C  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  2730  000690  C09F  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  2731  000694  C0A0  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  2732  000698  1E21               	comf	??_crcBufS_get+2,f,c
  2733  00069A  1E22               	comf	??_crcBufS_get+3,f,c
  2734  00069C  4A21               	infsnz	??_crcBufS_get+2,f,c
  2735  00069E  2A22               	incf	??_crcBufS_get+3,f,c
  2736  0006A0  501E               	movf	crcBufS_get@space,w,c
  2737  0006A2  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  2738  0006A4  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  2739  0006A6  5021               	movf	??_crcBufS_get+2,w,c
  2740  0006A8  2623               	addwf	??_crcBufS_get+4,f,c
  2741  0006AA  5022               	movf	??_crcBufS_get+3,w,c
  2742  0006AC  2224               	addwfc	??_crcBufS_get+5,f,c
  2743  0006AE  501F               	movf	??_crcBufS_get,w,c
  2744  0006B0  2623               	addwf	??_crcBufS_get+4,f,c
  2745  0006B2  5020               	movf	??_crcBufS_get+1,w,c
  2746  0006B4  2224               	addwfc	??_crcBufS_get+5,f,c
  2747  0006B6  5023               	movf	??_crcBufS_get+4,w,c
  2748  0006B8  241B               	addwf	crcBufS_get@_this,w,c
  2749  0006BA  6ED9               	movwf	fsr2l,c
  2750  0006BC  5024               	movf	??_crcBufS_get+5,w,c
  2751  0006BE  201C               	addwfc	crcBufS_get@_this+1,w,c
  2752  0006C0  6EDA               	movwf	fsr2h,c
  2753  0006C2  50DF               	movf	indf2,w,c
  2754                           
  2755                           ; BSR set to: 0
  2756  0006C4  0012               	return	
  2757  0006C6                     __end_of_crcBufS_get:
  2758                           	opt stack 0
  2759                           tblptru	equ	0xFF8
  2760                           tblptrh	equ	0xFF7
  2761                           tblptrl	equ	0xFF6
  2762                           tablat	equ	0xFF5
  2763                           prodh	equ	0xFF4
  2764                           prodl	equ	0xFF3
  2765                           postinc0	equ	0xFEE
  2766                           wreg	equ	0xFE8
  2767                           indf2	equ	0xFDF
  2768                           postinc2	equ	0xFDE
  2769                           postdec2	equ	0xFDD
  2770                           plusw2	equ	0xFDB
  2771                           fsr2h	equ	0xFDA
  2772                           fsr2l	equ	0xFD9
  2773                           status	equ	0xFD8
  2774                           
  2775 ;; *************** function _CRC8 *****************
  2776 ;; Defined at:
  2777 ;;		line 31 in file "FastTransfer.c"
  2778 ;; Parameters:    Size  Location     Type
  2779 ;;  data            2   26[COMRAM] PTR const unsigned char 
  2780 ;;		 -> NULL(0), CRCcheck@arrayHolder(3), receiveData@holder_321(3), receiveData@holder(3), 
  2781 ;;		 -> rx_buffer(200), ring_buffer(206), 
  2782 ;;  len             1   28[COMRAM] unsigned char 
  2783 ;; Auto vars:     Size  Location     Type
  2784 ;;  sum             1   29[COMRAM] unsigned char 
  2785 ;;  tempI           1   31[COMRAM] unsigned char 
  2786 ;;  extract         1   30[COMRAM] unsigned char 
  2787 ;;  crc             1   32[COMRAM] unsigned char 
  2788 ;; Return value:  Size  Location     Type
  2789 ;;                  1    wreg      unsigned char 
  2790 ;; Registers used:
  2791 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2792 ;; Tracked objects:
  2793 ;;		On entry : 0/0
  2794 ;;		On exit  : 0/0
  2795 ;;		Unchanged: 0/0
  2796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2797 ;;      Params:         3       0       0       0       0       0       0
  2798 ;;      Locals:         4       0       0       0       0       0       0
  2799 ;;      Temps:          0       0       0       0       0       0       0
  2800 ;;      Totals:         7       0       0       0       0       0       0
  2801 ;;Total ram usage:        7 bytes
  2802 ;; Hardware stack levels used:    1
  2803 ;; Hardware stack levels required when called:    4
  2804 ;; This function calls:
  2805 ;;		Nothing
  2806 ;; This function is called by:
  2807 ;;		_sendData
  2808 ;;		_receiveData
  2809 ;;		_CRCcheck
  2810 ;; This function uses a non-reentrant model
  2811 ;;
  2812                           
  2813                           	psect	text15
  2814  000AEA                     __ptext15:
  2815                           	opt stack 0
  2816  000AEA                     _CRC8:
  2817                           	opt stack 23
  2818                           
  2819                           ;FastTransfer.c: 32: unsigned char crc = 0x00;
  2820                           
  2821                           ; BSR set to: 0
  2822                           ;incstack = 0
  2823  000AEA  0E00               	movlw	0
  2824  000AEC  6E21               	movwf	CRC8@crc,c
  2825                           
  2826                           ;FastTransfer.c: 33: while (len--) {
  2827  000AEE  D01C               	goto	l2002
  2828  000AF0                     l1986:
  2829                           
  2830                           ;FastTransfer.c: 34: unsigned char extract = *data++;
  2831  000AF0  C01B  FFD9         	movff	CRC8@data,fsr2l
  2832  000AF4  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  2833  000AF8  50DF               	movf	indf2,w,c
  2834  000AFA  6E1F               	movwf	CRC8@extract,c
  2835  000AFC  4A1B               	infsnz	CRC8@data,f,c
  2836  000AFE  2A1C               	incf	CRC8@data+1,f,c
  2837                           
  2838                           ;FastTransfer.c: 35: unsigned char tempI;
  2839                           ;FastTransfer.c: 36: for (tempI = 8; tempI; tempI--) {
  2840  000B00  0E08               	movlw	8
  2841  000B02  6E20               	movwf	CRC8@tempI,c
  2842  000B04  D00E               	goto	l2000
  2843  000B06                     l1992:
  2844                           
  2845                           ;FastTransfer.c: 37: unsigned char sum = (crc ^ extract) & 0x01;
  2846  000B06  5021               	movf	CRC8@crc,w,c
  2847  000B08  181F               	xorwf	CRC8@extract,w,c
  2848  000B0A  0B01               	andlw	1
  2849  000B0C  6E1E               	movwf	CRC8@sum,c
  2850                           
  2851                           ;FastTransfer.c: 38: crc >>= 1;
  2852  000B0E  90D8               	bcf	status,0,c
  2853  000B10  3221               	rrcf	CRC8@crc,f,c
  2854                           
  2855                           ;FastTransfer.c: 39: if (sum) {
  2856  000B12  501E               	movf	CRC8@sum,w,c
  2857  000B14  B4D8               	btfsc	status,2,c
  2858  000B16  D002               	goto	l143
  2859                           
  2860                           ;FastTransfer.c: 40: crc ^= 0x8C;
  2861  000B18  0E8C               	movlw	140
  2862  000B1A  1A21               	xorwf	CRC8@crc,f,c
  2863  000B1C                     l143:
  2864                           
  2865                           ;FastTransfer.c: 41: }
  2866                           ;FastTransfer.c: 42: extract >>= 1;
  2867  000B1C  90D8               	bcf	status,0,c
  2868  000B1E  321F               	rrcf	CRC8@extract,f,c
  2869  000B20  0620               	decf	CRC8@tempI,f,c
  2870  000B22                     l2000:
  2871  000B22  5020               	movf	CRC8@tempI,w,c
  2872  000B24  A4D8               	btfss	status,2,c
  2873  000B26  D7EF               	goto	l1992
  2874  000B28                     l2002:
  2875  000B28  061D               	decf	CRC8@len,f,c
  2876  000B2A  281D               	incf	CRC8@len,w,c
  2877  000B2C  A4D8               	btfss	status,2,c
  2878  000B2E  D7E0               	goto	l1986
  2879                           
  2880                           ;FastTransfer.c: 43: }
  2881                           ;FastTransfer.c: 44: }
  2882                           ;FastTransfer.c: 45: return crc;
  2883  000B30  5021               	movf	CRC8@crc,w,c
  2884  000B32  0012               	return	
  2885  000B34                     __end_of_CRC8:
  2886                           	opt stack 0
  2887                           tblptru	equ	0xFF8
  2888                           tblptrh	equ	0xFF7
  2889                           tblptrl	equ	0xFF6
  2890                           tablat	equ	0xFF5
  2891                           prodh	equ	0xFF4
  2892                           prodl	equ	0xFF3
  2893                           postinc0	equ	0xFEE
  2894                           wreg	equ	0xFE8
  2895                           indf2	equ	0xFDF
  2896                           postinc2	equ	0xFDE
  2897                           postdec2	equ	0xFDD
  2898                           plusw2	equ	0xFDB
  2899                           fsr2h	equ	0xFDA
  2900                           fsr2l	equ	0xFD9
  2901                           status	equ	0xFD8
  2902                           
  2903 ;; *************** function _INTERRUPT_InterruptManager *****************
  2904 ;; Defined at:
  2905 ;;		line 26 in file "IntHandler.c"
  2906 ;; Parameters:    Size  Location     Type
  2907 ;;		None
  2908 ;; Auto vars:     Size  Location     Type
  2909 ;;		None
  2910 ;; Return value:  Size  Location     Type
  2911 ;;                  1    wreg      void 
  2912 ;; Registers used:
  2913 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2914 ;; Tracked objects:
  2915 ;;		On entry : 0/0
  2916 ;;		On exit  : 0/0
  2917 ;;		Unchanged: 0/0
  2918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2919 ;;      Params:         0       0       0       0       0       0       0
  2920 ;;      Locals:         0       0       0       0       0       0       0
  2921 ;;      Temps:         14       0       0       0       0       0       0
  2922 ;;      Totals:        14       0       0       0       0       0       0
  2923 ;;Total ram usage:       14 bytes
  2924 ;; Hardware stack levels used:    1
  2925 ;; Hardware stack levels required when called:    3
  2926 ;; This function calls:
  2927 ;;		_EUSART1_Receive_ISR
  2928 ;;		_EUSART1_Transmit_ISR
  2929 ;;		_TMR0_ISR
  2930 ;; This function is called by:
  2931 ;;		Interrupt level 2
  2932 ;; This function uses a non-reentrant model
  2933 ;;
  2934                           
  2935                           	psect	intcode
  2936  000008                     __pintcode:
  2937                           	opt stack 0
  2938  000008                     _INTERRUPT_InterruptManager:
  2939                           	opt stack 22
  2940                           
  2941                           ;incstack = 0
  2942  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2943  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  2944  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  2945  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  2946  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  2947  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  2948  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  2949  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  2950  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  2951  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  2952  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  2953  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  2954  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  2955  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  2956  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  2957                           
  2958                           ;IntHandler.c: 29: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  2959  000042  BA9D               	btfsc	3997,5,c	;volatile
  2960  000044  AA9E               	btfss	3998,5,c	;volatile
  2961  000046  D003               	goto	i2l418
  2962                           
  2963                           ;IntHandler.c: 30: {
  2964                           ;IntHandler.c: 31: EUSART1_Receive_ISR();
  2965  000048  EC36  F006         	call	_EUSART1_Receive_ISR	;wreg free
  2966                           
  2967                           ;IntHandler.c: 32: }
  2968  00004C  D00B               	goto	i2l424
  2969  00004E                     i2l418:
  2970                           
  2971                           ;IntHandler.c: 33: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  2972  00004E  B89D               	btfsc	3997,4,c	;volatile
  2973  000050  A89E               	btfss	3998,4,c	;volatile
  2974  000052  D003               	goto	i2l420
  2975                           
  2976                           ;IntHandler.c: 34: {
  2977                           ;IntHandler.c: 35: EUSART1_Transmit_ISR();
  2978  000054  ECCE  F005         	call	_EUSART1_Transmit_ISR	;wreg free
  2979                           
  2980                           ;IntHandler.c: 36: }
  2981  000058  D005               	goto	i2l424
  2982  00005A                     i2l420:
  2983                           
  2984                           ;IntHandler.c: 37: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  2985  00005A  BAF2               	btfsc	intcon,5,c	;volatile
  2986  00005C  A4F2               	btfss	intcon,2,c	;volatile
  2987  00005E  D002               	goto	i2l424
  2988                           
  2989                           ;IntHandler.c: 38: {
  2990                           ;IntHandler.c: 39: TMR0_ISR();
  2991  000060  EC50  F006         	call	_TMR0_ISR	;wreg free
  2992  000064                     i2l424:
  2993  000064  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  2994  000068  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  2995  00006C  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  2996  000070  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  2997  000074  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  2998  000078  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  2999  00007C  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  3000  000080  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  3001  000084  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  3002  000088  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  3003  00008C  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  3004  000090  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  3005  000094  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  3006  000098  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  3007  00009C  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3008  00009E  0011               	retfie		f
  3009  0000A0                     __end_of_INTERRUPT_InterruptManager:
  3010                           	opt stack 0
  3011                           pclatu	equ	0xFFB
  3012                           pclath	equ	0xFFA
  3013                           tblptru	equ	0xFF8
  3014                           tblptrh	equ	0xFF7
  3015                           tblptrl	equ	0xFF6
  3016                           tablat	equ	0xFF5
  3017                           prodh	equ	0xFF4
  3018                           prodl	equ	0xFF3
  3019                           intcon	equ	0xFF2
  3020                           postinc0	equ	0xFEE
  3021                           fsr0h	equ	0xFEA
  3022                           fsr0l	equ	0xFE9
  3023                           wreg	equ	0xFE8
  3024                           fsr1h	equ	0xFE2
  3025                           fsr1l	equ	0xFE1
  3026                           indf2	equ	0xFDF
  3027                           postinc2	equ	0xFDE
  3028                           postdec2	equ	0xFDD
  3029                           plusw2	equ	0xFDB
  3030                           fsr2h	equ	0xFDA
  3031                           fsr2l	equ	0xFD9
  3032                           status	equ	0xFD8
  3033                           
  3034 ;; *************** function _TMR0_ISR *****************
  3035 ;; Defined at:
  3036 ;;		line 79 in file "tmr0.c"
  3037 ;; Parameters:    Size  Location     Type
  3038 ;;		None
  3039 ;; Auto vars:     Size  Location     Type
  3040 ;;		None
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  1    wreg      void 
  3043 ;; Registers used:
  3044 ;;		wreg, status,2, status,0
  3045 ;; Tracked objects:
  3046 ;;		On entry : 0/0
  3047 ;;		On exit  : 0/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3050 ;;      Params:         0       0       0       0       0       0       0
  3051 ;;      Locals:         0       0       0       0       0       0       0
  3052 ;;      Temps:          0       0       0       0       0       0       0
  3053 ;;      Totals:         0       0       0       0       0       0       0
  3054 ;;Total ram usage:        0 bytes
  3055 ;; Hardware stack levels used:    1
  3056 ;; This function calls:
  3057 ;;		Nothing
  3058 ;; This function is called by:
  3059 ;;		_INTERRUPT_InterruptManager
  3060 ;; This function uses a non-reentrant model
  3061 ;;
  3062                           
  3063                           	psect	text17
  3064  000CA0                     __ptext17:
  3065                           	opt stack 0
  3066  000CA0                     _TMR0_ISR:
  3067                           	opt stack 24
  3068                           
  3069                           ;tmr0.c: 80: static volatile uint16_t CountCallBack = 0;
  3070                           ;tmr0.c: 83: TMR0H = timer0ReloadVal16bit >> 8;
  3071                           
  3072                           ;incstack = 0
  3073  000CA0  503B               	movf	_timer0ReloadVal16bit+1,w,c	;volatile
  3074  000CA2  6ED7               	movwf	4055,c	;volatile
  3075                           
  3076                           ;tmr0.c: 84: TMR0L = (uint8_t) timer0ReloadVal16bit;
  3077  000CA4  C03A  FFD6         	movff	_timer0ReloadVal16bit,4054	;volatile
  3078                           
  3079                           ;tmr0.c: 86: time++;
  3080  000CA8  0100               	movlb	0	; () banked
  3081  000CAA  4B8C               	infsnz	_time& (0+255),f,b	;volatile
  3082  000CAC  2B8D               	incf	(_time+1)& (0+255),f,b	;volatile
  3083                           
  3084                           ; BSR set to: 0
  3085                           ;tmr0.c: 88: INTCONbits.TMR0IF = 0;
  3086  000CAE  94F2               	bcf	intcon,2,c	;volatile
  3087                           
  3088                           ; BSR set to: 0
  3089  000CB0  0012               	return		;funcret
  3090  000CB2                     __end_of_TMR0_ISR:
  3091                           	opt stack 0
  3092                           pclatu	equ	0xFFB
  3093                           pclath	equ	0xFFA
  3094                           tblptru	equ	0xFF8
  3095                           tblptrh	equ	0xFF7
  3096                           tblptrl	equ	0xFF6
  3097                           tablat	equ	0xFF5
  3098                           prodh	equ	0xFF4
  3099                           prodl	equ	0xFF3
  3100                           intcon	equ	0xFF2
  3101                           postinc0	equ	0xFEE
  3102                           fsr0h	equ	0xFEA
  3103                           fsr0l	equ	0xFE9
  3104                           wreg	equ	0xFE8
  3105                           fsr1h	equ	0xFE2
  3106                           fsr1l	equ	0xFE1
  3107                           indf2	equ	0xFDF
  3108                           postinc2	equ	0xFDE
  3109                           postdec2	equ	0xFDD
  3110                           plusw2	equ	0xFDB
  3111                           fsr2h	equ	0xFDA
  3112                           fsr2l	equ	0xFD9
  3113                           status	equ	0xFD8
  3114                           
  3115 ;; *************** function _EUSART1_Transmit_ISR *****************
  3116 ;; Defined at:
  3117 ;;		line 150 in file "UART.c"
  3118 ;; Parameters:    Size  Location     Type
  3119 ;;		None
  3120 ;; Auto vars:     Size  Location     Type
  3121 ;;		None
  3122 ;; Return value:  Size  Location     Type
  3123 ;;                  1    wreg      void 
  3124 ;; Registers used:
  3125 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3126 ;; Tracked objects:
  3127 ;;		On entry : 0/0
  3128 ;;		On exit  : 0/0
  3129 ;;		Unchanged: 0/0
  3130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3131 ;;      Params:         0       0       0       0       0       0       0
  3132 ;;      Locals:         0       0       0       0       0       0       0
  3133 ;;      Temps:          0       0       0       0       0       0       0
  3134 ;;      Totals:         0       0       0       0       0       0       0
  3135 ;;Total ram usage:        0 bytes
  3136 ;; Hardware stack levels used:    1
  3137 ;; Hardware stack levels required when called:    2
  3138 ;; This function calls:
  3139 ;;		_UART_buff_get
  3140 ;;		_UART_buff_size
  3141 ;; This function is called by:
  3142 ;;		_INTERRUPT_InterruptManager
  3143 ;; This function uses a non-reentrant model
  3144 ;;
  3145                           
  3146                           	psect	text18
  3147  000B9C                     __ptext18:
  3148                           	opt stack 0
  3149  000B9C                     _EUSART1_Transmit_ISR:
  3150                           	opt stack 22
  3151                           
  3152                           ;UART.c: 152: if (UART_buff_size(&output_buffer) > 0) {
  3153                           
  3154                           ; BSR set to: 0
  3155                           ;incstack = 0
  3156  000B9C  0E00               	movlw	low _output_buffer
  3157  000B9E  6E01               	movwf	UART_buff_size@_this,c
  3158  000BA0  0E03               	movlw	high _output_buffer
  3159  000BA2  6E02               	movwf	UART_buff_size@_this+1,c
  3160  000BA4  EC45  F006         	call	_UART_buff_size	;wreg free
  3161  000BA8  BE02               	btfsc	?_UART_buff_size+1,7,c
  3162  000BAA  D00D               	goto	i2l1884
  3163  000BAC  5002               	movf	?_UART_buff_size+1,w,c
  3164  000BAE  E103               	bnz	i2u91_40
  3165  000BB0  0401               	decf	?_UART_buff_size,w,c
  3166  000BB2  A0D8               	btfss	status,0,c
  3167  000BB4  D008               	goto	i2l1884
  3168  000BB6                     i2u91_40:
  3169                           
  3170                           ;UART.c: 153: TXREG1 = UART_buff_get(&output_buffer);
  3171  000BB6  0E00               	movlw	low _output_buffer
  3172  000BB8  6E07               	movwf	UART_buff_get@_this,c
  3173  000BBA  0E03               	movlw	high _output_buffer
  3174  000BBC  6E08               	movwf	UART_buff_get@_this+1,c
  3175  000BBE  EC85  F004         	call	_UART_buff_get	;wreg free
  3176  000BC2  6EAD               	movwf	4013,c	;volatile
  3177                           
  3178                           ;UART.c: 154: } else {
  3179  000BC4  0012               	return	
  3180  000BC6                     i2l1884:
  3181                           
  3182                           ;UART.c: 155: Transmit_stall = 1;
  3183  000BC6  0E01               	movlw	1
  3184  000BC8  6E44               	movwf	_Transmit_stall,c
  3185                           
  3186                           ;UART.c: 156: PIE1bits.TX1IE = 0;
  3187  000BCA  989D               	bcf	3997,4,c	;volatile
  3188  000BCC  0012               	return	
  3189  000BCE                     __end_of_EUSART1_Transmit_ISR:
  3190                           	opt stack 0
  3191                           pclatu	equ	0xFFB
  3192                           pclath	equ	0xFFA
  3193                           tblptru	equ	0xFF8
  3194                           tblptrh	equ	0xFF7
  3195                           tblptrl	equ	0xFF6
  3196                           tablat	equ	0xFF5
  3197                           prodh	equ	0xFF4
  3198                           prodl	equ	0xFF3
  3199                           intcon	equ	0xFF2
  3200                           postinc0	equ	0xFEE
  3201                           fsr0h	equ	0xFEA
  3202                           fsr0l	equ	0xFE9
  3203                           wreg	equ	0xFE8
  3204                           fsr1h	equ	0xFE2
  3205                           fsr1l	equ	0xFE1
  3206                           indf2	equ	0xFDF
  3207                           postinc2	equ	0xFDE
  3208                           postdec2	equ	0xFDD
  3209                           plusw2	equ	0xFDB
  3210                           fsr2h	equ	0xFDA
  3211                           fsr2l	equ	0xFD9
  3212                           status	equ	0xFD8
  3213                           
  3214 ;; *************** function _UART_buff_size *****************
  3215 ;; Defined at:
  3216 ;;		line 102 in file "UART.c"
  3217 ;; Parameters:    Size  Location     Type
  3218 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  3219 ;;		 -> output_buffer(206), input_buffer(206), 
  3220 ;; Auto vars:     Size  Location     Type
  3221 ;;		None
  3222 ;; Return value:  Size  Location     Type
  3223 ;;                  2    0[COMRAM] int 
  3224 ;; Registers used:
  3225 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3226 ;; Tracked objects:
  3227 ;;		On entry : 0/0
  3228 ;;		On exit  : 0/0
  3229 ;;		Unchanged: 0/0
  3230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3231 ;;      Params:         2       0       0       0       0       0       0
  3232 ;;      Locals:         0       0       0       0       0       0       0
  3233 ;;      Temps:          0       0       0       0       0       0       0
  3234 ;;      Totals:         2       0       0       0       0       0       0
  3235 ;;Total ram usage:        2 bytes
  3236 ;; Hardware stack levels used:    1
  3237 ;; This function calls:
  3238 ;;		Nothing
  3239 ;; This function is called by:
  3240 ;;		_EUSART1_Transmit_ISR
  3241 ;;		_Receive_available
  3242 ;; This function uses a non-reentrant model
  3243 ;;
  3244                           
  3245                           	psect	text19
  3246  000C8A                     __ptext19:
  3247                           	opt stack 0
  3248  000C8A                     _UART_buff_size:
  3249                           	opt stack 23
  3250                           
  3251                           ;UART.c: 103: return (_this->count);
  3252                           
  3253                           ;incstack = 0
  3254  000C8A  EE20 F0CC          	lfsr	2,204
  3255  000C8E  5001               	movf	UART_buff_size@_this,w,c
  3256  000C90  26D9               	addwf	fsr2l,f,c
  3257  000C92  5002               	movf	UART_buff_size@_this+1,w,c
  3258  000C94  22DA               	addwfc	fsr2h,f,c
  3259  000C96  CFDE F001          	movff	postinc2,?_UART_buff_size
  3260  000C9A  CFDD F002          	movff	postdec2,?_UART_buff_size+1
  3261  000C9E  0012               	return	
  3262  000CA0                     __end_of_UART_buff_size:
  3263                           	opt stack 0
  3264                           pclatu	equ	0xFFB
  3265                           pclath	equ	0xFFA
  3266                           tblptru	equ	0xFF8
  3267                           tblptrh	equ	0xFF7
  3268                           tblptrl	equ	0xFF6
  3269                           tablat	equ	0xFF5
  3270                           prodh	equ	0xFF4
  3271                           prodl	equ	0xFF3
  3272                           intcon	equ	0xFF2
  3273                           postinc0	equ	0xFEE
  3274                           fsr0h	equ	0xFEA
  3275                           fsr0l	equ	0xFE9
  3276                           wreg	equ	0xFE8
  3277                           fsr1h	equ	0xFE2
  3278                           fsr1l	equ	0xFE1
  3279                           indf2	equ	0xFDF
  3280                           postinc2	equ	0xFDE
  3281                           postdec2	equ	0xFDD
  3282                           plusw2	equ	0xFDB
  3283                           fsr2h	equ	0xFDA
  3284                           fsr2l	equ	0xFD9
  3285                           status	equ	0xFD8
  3286                           
  3287 ;; *************** function _UART_buff_get *****************
  3288 ;; Defined at:
  3289 ;;		line 81 in file "UART.c"
  3290 ;; Parameters:    Size  Location     Type
  3291 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  3292 ;;		 -> output_buffer(206), input_buffer(206), 
  3293 ;; Auto vars:     Size  Location     Type
  3294 ;;  c               1   10[COMRAM] unsigned char 
  3295 ;; Return value:  Size  Location     Type
  3296 ;;                  1    wreg      unsigned char 
  3297 ;; Registers used:
  3298 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3299 ;; Tracked objects:
  3300 ;;		On entry : 0/0
  3301 ;;		On exit  : 0/0
  3302 ;;		Unchanged: 0/0
  3303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3304 ;;      Params:         2       0       0       0       0       0       0
  3305 ;;      Locals:         1       0       0       0       0       0       0
  3306 ;;      Temps:          2       0       0       0       0       0       0
  3307 ;;      Totals:         5       0       0       0       0       0       0
  3308 ;;Total ram usage:        5 bytes
  3309 ;; Hardware stack levels used:    1
  3310 ;; Hardware stack levels required when called:    1
  3311 ;; This function calls:
  3312 ;;		_UART_buff_modulo_inc
  3313 ;; This function is called by:
  3314 ;;		_EUSART1_Transmit_ISR
  3315 ;;		_Receive_get
  3316 ;;		_Send_put
  3317 ;; This function uses a non-reentrant model
  3318 ;;
  3319                           
  3320                           	psect	text20
  3321  00090A                     __ptext20:
  3322                           	opt stack 0
  3323  00090A                     _UART_buff_get:
  3324                           	opt stack 22
  3325                           
  3326                           ;UART.c: 82: unsigned char c;
  3327                           ;UART.c: 83: if (_this->count > 0) {
  3328                           
  3329                           ;incstack = 0
  3330  00090A  EE20 F0CC          	lfsr	2,204
  3331  00090E  5007               	movf	UART_buff_get@_this,w,c
  3332  000910  26D9               	addwf	fsr2l,f,c
  3333  000912  5008               	movf	UART_buff_get@_this+1,w,c
  3334  000914  22DA               	addwfc	fsr2h,f,c
  3335  000916  0E01               	movlw	1
  3336  000918  BEDB               	btfsc	plusw2,7,c
  3337  00091A  D03C               	goto	i2l1844
  3338  00091C  0E01               	movlw	1
  3339  00091E  50DB               	movf	plusw2,w,c
  3340  000920  E103               	bnz	i2u87_40
  3341  000922  04DE               	decf	postinc2,w,c
  3342  000924  A0D8               	btfss	status,0,c
  3343  000926  D036               	goto	i2l1844
  3344  000928                     i2u87_40:
  3345                           
  3346                           ;UART.c: 84: c = _this->buf[_this->tail];
  3347  000928  EE20 F0CA          	lfsr	2,202
  3348  00092C  5007               	movf	UART_buff_get@_this,w,c
  3349  00092E  26D9               	addwf	fsr2l,f,c
  3350  000930  5008               	movf	UART_buff_get@_this+1,w,c
  3351  000932  22DA               	addwfc	fsr2h,f,c
  3352  000934  CFDE F009          	movff	postinc2,??_UART_buff_get
  3353  000938  CFDD F00A          	movff	postdec2,??_UART_buff_get+1
  3354  00093C  5009               	movf	??_UART_buff_get,w,c
  3355  00093E  2407               	addwf	UART_buff_get@_this,w,c
  3356  000940  6ED9               	movwf	fsr2l,c
  3357  000942  500A               	movf	??_UART_buff_get+1,w,c
  3358  000944  2008               	addwfc	UART_buff_get@_this+1,w,c
  3359  000946  6EDA               	movwf	fsr2h,c
  3360  000948  50DF               	movf	indf2,w,c
  3361  00094A  6E0B               	movwf	UART_buff_get@c,c
  3362                           
  3363                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  3364  00094C  EE20 F0CA          	lfsr	2,202
  3365  000950  5007               	movf	UART_buff_get@_this,w,c
  3366  000952  26D9               	addwf	fsr2l,f,c
  3367  000954  5008               	movf	UART_buff_get@_this+1,w,c
  3368  000956  22DA               	addwfc	fsr2h,f,c
  3369  000958  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  3370  00095C  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  3371  000960  0E00               	movlw	0
  3372  000962  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  3373  000964  0EC8               	movlw	200
  3374  000966  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  3375  000968  EC12  F006         	call	_UART_buff_modulo_inc	;wreg free
  3376  00096C  EE20 F0CA          	lfsr	2,202
  3377  000970  5007               	movf	UART_buff_get@_this,w,c
  3378  000972  26D9               	addwf	fsr2l,f,c
  3379  000974  5008               	movf	UART_buff_get@_this+1,w,c
  3380  000976  22DA               	addwfc	fsr2h,f,c
  3381  000978  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3382  00097C  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3383                           
  3384                           ;UART.c: 86: --_this->count;
  3385  000980  EE20 F0CC          	lfsr	2,204
  3386  000984  5007               	movf	UART_buff_get@_this,w,c
  3387  000986  26D9               	addwf	fsr2l,f,c
  3388  000988  5008               	movf	UART_buff_get@_this+1,w,c
  3389  00098A  22DA               	addwfc	fsr2h,f,c
  3390  00098C  06DE               	decf	postinc2,f,c
  3391  00098E  0E00               	movlw	0
  3392  000990  5ADD               	subwfb	postdec2,f,c
  3393                           
  3394                           ;UART.c: 87: } else {
  3395  000992  D002               	goto	i2l310
  3396  000994                     i2l1844:
  3397                           
  3398                           ;UART.c: 88: c = 0;
  3399  000994  0E00               	movlw	0
  3400  000996  6E0B               	movwf	UART_buff_get@c,c
  3401  000998                     i2l310:
  3402                           
  3403                           ;UART.c: 89: }
  3404                           ;UART.c: 90: return (c);
  3405  000998  500B               	movf	UART_buff_get@c,w,c
  3406  00099A  0012               	return	
  3407  00099C                     __end_of_UART_buff_get:
  3408                           	opt stack 0
  3409                           pclatu	equ	0xFFB
  3410                           pclath	equ	0xFFA
  3411                           tblptru	equ	0xFF8
  3412                           tblptrh	equ	0xFF7
  3413                           tblptrl	equ	0xFF6
  3414                           tablat	equ	0xFF5
  3415                           prodh	equ	0xFF4
  3416                           prodl	equ	0xFF3
  3417                           intcon	equ	0xFF2
  3418                           postinc0	equ	0xFEE
  3419                           fsr0h	equ	0xFEA
  3420                           fsr0l	equ	0xFE9
  3421                           wreg	equ	0xFE8
  3422                           fsr1h	equ	0xFE2
  3423                           fsr1l	equ	0xFE1
  3424                           indf2	equ	0xFDF
  3425                           postinc2	equ	0xFDE
  3426                           postdec2	equ	0xFDD
  3427                           plusw2	equ	0xFDB
  3428                           fsr2h	equ	0xFDA
  3429                           fsr2l	equ	0xFD9
  3430                           status	equ	0xFD8
  3431                           
  3432 ;; *************** function _EUSART1_Receive_ISR *****************
  3433 ;; Defined at:
  3434 ;;		line 139 in file "UART.c"
  3435 ;; Parameters:    Size  Location     Type
  3436 ;;		None
  3437 ;; Auto vars:     Size  Location     Type
  3438 ;;  data            1   11[COMRAM] unsigned char 
  3439 ;; Return value:  Size  Location     Type
  3440 ;;                  1    wreg      void 
  3441 ;; Registers used:
  3442 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3443 ;; Tracked objects:
  3444 ;;		On entry : 0/0
  3445 ;;		On exit  : 0/0
  3446 ;;		Unchanged: 0/0
  3447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3448 ;;      Params:         0       0       0       0       0       0       0
  3449 ;;      Locals:         1       0       0       0       0       0       0
  3450 ;;      Temps:          0       0       0       0       0       0       0
  3451 ;;      Totals:         1       0       0       0       0       0       0
  3452 ;;Total ram usage:        1 bytes
  3453 ;; Hardware stack levels used:    1
  3454 ;; Hardware stack levels required when called:    2
  3455 ;; This function calls:
  3456 ;;		_UART_buff_put
  3457 ;; This function is called by:
  3458 ;;		_INTERRUPT_InterruptManager
  3459 ;; This function uses a non-reentrant model
  3460 ;;
  3461                           
  3462                           	psect	text21
  3463  000C6C                     __ptext21:
  3464                           	opt stack 0
  3465  000C6C                     _EUSART1_Receive_ISR:
  3466                           	opt stack 22
  3467                           
  3468                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
  3469                           
  3470                           ;incstack = 0
  3471  000C6C  A2AB               	btfss	4011,1,c	;volatile
  3472  000C6E  D002               	goto	i2l341
  3473                           
  3474                           ;UART.c: 143: RC1STAbits.CREN = 0;
  3475  000C70  98AB               	bcf	4011,4,c	;volatile
  3476                           
  3477                           ;UART.c: 144: RC1STAbits.CREN = 1;
  3478  000C72  88AB               	bsf	4011,4,c	;volatile
  3479  000C74                     i2l341:
  3480                           
  3481                           ;UART.c: 145: }
  3482                           ;UART.c: 146: unsigned char data = RCREG1;
  3483  000C74  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  3484                           
  3485                           ;UART.c: 147: UART_buff_put(&input_buffer, data);
  3486  000C78  0E00               	movlw	low _input_buffer
  3487  000C7A  6E07               	movwf	UART_buff_put@_this,c
  3488  000C7C  0E02               	movlw	high _input_buffer
  3489  000C7E  6E08               	movwf	UART_buff_put@_this+1,c
  3490  000C80  C00C  F009         	movff	EUSART1_Receive_ISR@data,UART_buff_put@c
  3491  000C84  EC5D  F002         	call	_UART_buff_put	;wreg free
  3492  000C88  0012               	return		;funcret
  3493  000C8A                     __end_of_EUSART1_Receive_ISR:
  3494                           	opt stack 0
  3495                           pclatu	equ	0xFFB
  3496                           pclath	equ	0xFFA
  3497                           tblptru	equ	0xFF8
  3498                           tblptrh	equ	0xFF7
  3499                           tblptrl	equ	0xFF6
  3500                           tablat	equ	0xFF5
  3501                           prodh	equ	0xFF4
  3502                           prodl	equ	0xFF3
  3503                           intcon	equ	0xFF2
  3504                           postinc0	equ	0xFEE
  3505                           fsr0h	equ	0xFEA
  3506                           fsr0l	equ	0xFE9
  3507                           wreg	equ	0xFE8
  3508                           fsr1h	equ	0xFE2
  3509                           fsr1l	equ	0xFE1
  3510                           indf2	equ	0xFDF
  3511                           postinc2	equ	0xFDE
  3512                           postdec2	equ	0xFDD
  3513                           plusw2	equ	0xFDB
  3514                           fsr2h	equ	0xFDA
  3515                           fsr2l	equ	0xFD9
  3516                           status	equ	0xFD8
  3517                           
  3518 ;; *************** function _UART_buff_put *****************
  3519 ;; Defined at:
  3520 ;;		line 68 in file "UART.c"
  3521 ;; Parameters:    Size  Location     Type
  3522 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  3523 ;;		 -> output_buffer(206), input_buffer(206), 
  3524 ;;  c               1    8[COMRAM] const unsigned char 
  3525 ;; Auto vars:     Size  Location     Type
  3526 ;;		None
  3527 ;; Return value:  Size  Location     Type
  3528 ;;                  1    wreg      void 
  3529 ;; Registers used:
  3530 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3531 ;; Tracked objects:
  3532 ;;		On entry : 0/0
  3533 ;;		On exit  : 0/0
  3534 ;;		Unchanged: 0/0
  3535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3536 ;;      Params:         3       0       0       0       0       0       0
  3537 ;;      Locals:         0       0       0       0       0       0       0
  3538 ;;      Temps:          2       0       0       0       0       0       0
  3539 ;;      Totals:         5       0       0       0       0       0       0
  3540 ;;Total ram usage:        5 bytes
  3541 ;; Hardware stack levels used:    1
  3542 ;; Hardware stack levels required when called:    1
  3543 ;; This function calls:
  3544 ;;		_UART_buff_modulo_inc
  3545 ;; This function is called by:
  3546 ;;		_EUSART1_Receive_ISR
  3547 ;;		_Send_put
  3548 ;; This function uses a non-reentrant model
  3549 ;;
  3550                           
  3551                           	psect	text22
  3552  0004BA                     __ptext22:
  3553                           	opt stack 0
  3554  0004BA                     _UART_buff_put:
  3555                           	opt stack 22
  3556                           
  3557                           ;UART.c: 69: if (_this->count < 200) {
  3558                           
  3559                           ;incstack = 0
  3560  0004BA  EE20 F0CC          	lfsr	2,204
  3561  0004BE  5007               	movf	UART_buff_put@_this,w,c
  3562  0004C0  26D9               	addwf	fsr2l,f,c
  3563  0004C2  5008               	movf	UART_buff_put@_this+1,w,c
  3564  0004C4  22DA               	addwfc	fsr2h,f,c
  3565  0004C6  0E01               	movlw	1
  3566  0004C8  BEDB               	btfsc	plusw2,7,c
  3567  0004CA  D007               	goto	i2l1824
  3568  0004CC  0E01               	movlw	1
  3569  0004CE  50DB               	movf	plusw2,w,c
  3570  0004D0  E13A               	bnz	i2l1830
  3571  0004D2  0EC8               	movlw	200
  3572  0004D4  5CDE               	subwf	postinc2,w,c
  3573  0004D6  B0D8               	btfsc	status,0,c
  3574  0004D8  D036               	goto	i2l1830
  3575  0004DA                     i2l1824:
  3576                           
  3577                           ;UART.c: 70: _this->buf[_this->head] = c;
  3578  0004DA  EE20 F0C8          	lfsr	2,200
  3579  0004DE  5007               	movf	UART_buff_put@_this,w,c
  3580  0004E0  26D9               	addwf	fsr2l,f,c
  3581  0004E2  5008               	movf	UART_buff_put@_this+1,w,c
  3582  0004E4  22DA               	addwfc	fsr2h,f,c
  3583  0004E6  CFDE F00A          	movff	postinc2,??_UART_buff_put
  3584  0004EA  CFDD F00B          	movff	postdec2,??_UART_buff_put+1
  3585  0004EE  500A               	movf	??_UART_buff_put,w,c
  3586  0004F0  2407               	addwf	UART_buff_put@_this,w,c
  3587  0004F2  6ED9               	movwf	fsr2l,c
  3588  0004F4  500B               	movf	??_UART_buff_put+1,w,c
  3589  0004F6  2008               	addwfc	UART_buff_put@_this+1,w,c
  3590  0004F8  6EDA               	movwf	fsr2h,c
  3591  0004FA  C009  FFDF         	movff	UART_buff_put@c,indf2
  3592                           
  3593                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3594  0004FE  EE20 F0C8          	lfsr	2,200
  3595  000502  5007               	movf	UART_buff_put@_this,w,c
  3596  000504  26D9               	addwf	fsr2l,f,c
  3597  000506  5008               	movf	UART_buff_put@_this+1,w,c
  3598  000508  22DA               	addwfc	fsr2h,f,c
  3599  00050A  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  3600  00050E  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  3601  000512  0E00               	movlw	0
  3602  000514  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  3603  000516  0EC8               	movlw	200
  3604  000518  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  3605  00051A  EC12  F006         	call	_UART_buff_modulo_inc	;wreg free
  3606  00051E  EE20 F0C8          	lfsr	2,200
  3607  000522  5007               	movf	UART_buff_put@_this,w,c
  3608  000524  26D9               	addwf	fsr2l,f,c
  3609  000526  5008               	movf	UART_buff_put@_this+1,w,c
  3610  000528  22DA               	addwfc	fsr2h,f,c
  3611  00052A  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3612  00052E  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3613                           
  3614                           ;UART.c: 72: ++_this->count;
  3615  000532  EE20 F0CC          	lfsr	2,204
  3616  000536  5007               	movf	UART_buff_put@_this,w,c
  3617  000538  26D9               	addwf	fsr2l,f,c
  3618  00053A  5008               	movf	UART_buff_put@_this+1,w,c
  3619  00053C  22DA               	addwfc	fsr2h,f,c
  3620  00053E  2ADE               	incf	postinc2,f,c
  3621  000540  0E00               	movlw	0
  3622  000542  22DD               	addwfc	postdec2,f,c
  3623                           
  3624                           ;UART.c: 73: } else {
  3625  000544  0012               	return	
  3626  000546                     i2l1830:
  3627                           
  3628                           ;UART.c: 74: _this->buf[_this->head] = c;
  3629  000546  EE20 F0C8          	lfsr	2,200
  3630  00054A  5007               	movf	UART_buff_put@_this,w,c
  3631  00054C  26D9               	addwf	fsr2l,f,c
  3632  00054E  5008               	movf	UART_buff_put@_this+1,w,c
  3633  000550  22DA               	addwfc	fsr2h,f,c
  3634  000552  CFDE F00A          	movff	postinc2,??_UART_buff_put
  3635  000556  CFDD F00B          	movff	postdec2,??_UART_buff_put+1
  3636  00055A  500A               	movf	??_UART_buff_put,w,c
  3637  00055C  2407               	addwf	UART_buff_put@_this,w,c
  3638  00055E  6ED9               	movwf	fsr2l,c
  3639  000560  500B               	movf	??_UART_buff_put+1,w,c
  3640  000562  2008               	addwfc	UART_buff_put@_this+1,w,c
  3641  000564  6EDA               	movwf	fsr2h,c
  3642  000566  C009  FFDF         	movff	UART_buff_put@c,indf2
  3643                           
  3644                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3645  00056A  EE20 F0C8          	lfsr	2,200
  3646  00056E  5007               	movf	UART_buff_put@_this,w,c
  3647  000570  26D9               	addwf	fsr2l,f,c
  3648  000572  5008               	movf	UART_buff_put@_this+1,w,c
  3649  000574  22DA               	addwfc	fsr2h,f,c
  3650  000576  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  3651  00057A  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  3652  00057E  0E00               	movlw	0
  3653  000580  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  3654  000582  0EC8               	movlw	200
  3655  000584  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  3656  000586  EC12  F006         	call	_UART_buff_modulo_inc	;wreg free
  3657  00058A  EE20 F0C8          	lfsr	2,200
  3658  00058E  5007               	movf	UART_buff_put@_this,w,c
  3659  000590  26D9               	addwf	fsr2l,f,c
  3660  000592  5008               	movf	UART_buff_put@_this+1,w,c
  3661  000594  22DA               	addwfc	fsr2h,f,c
  3662  000596  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3663  00059A  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3664                           
  3665                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  3666  00059E  EE20 F0CA          	lfsr	2,202
  3667  0005A2  5007               	movf	UART_buff_put@_this,w,c
  3668  0005A4  26D9               	addwf	fsr2l,f,c
  3669  0005A6  5008               	movf	UART_buff_put@_this+1,w,c
  3670  0005A8  22DA               	addwfc	fsr2h,f,c
  3671  0005AA  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  3672  0005AE  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  3673  0005B2  0E00               	movlw	0
  3674  0005B4  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  3675  0005B6  0EC8               	movlw	200
  3676  0005B8  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  3677  0005BA  EC12  F006         	call	_UART_buff_modulo_inc	;wreg free
  3678  0005BE  EE20 F0CA          	lfsr	2,202
  3679  0005C2  5007               	movf	UART_buff_put@_this,w,c
  3680  0005C4  26D9               	addwf	fsr2l,f,c
  3681  0005C6  5008               	movf	UART_buff_put@_this+1,w,c
  3682  0005C8  22DA               	addwfc	fsr2h,f,c
  3683  0005CA  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3684  0005CE  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3685  0005D2  0012               	return	
  3686  0005D4                     __end_of_UART_buff_put:
  3687                           	opt stack 0
  3688                           pclatu	equ	0xFFB
  3689                           pclath	equ	0xFFA
  3690                           tblptru	equ	0xFF8
  3691                           tblptrh	equ	0xFF7
  3692                           tblptrl	equ	0xFF6
  3693                           tablat	equ	0xFF5
  3694                           prodh	equ	0xFF4
  3695                           prodl	equ	0xFF3
  3696                           intcon	equ	0xFF2
  3697                           postinc0	equ	0xFEE
  3698                           fsr0h	equ	0xFEA
  3699                           fsr0l	equ	0xFE9
  3700                           wreg	equ	0xFE8
  3701                           fsr1h	equ	0xFE2
  3702                           fsr1l	equ	0xFE1
  3703                           indf2	equ	0xFDF
  3704                           postinc2	equ	0xFDE
  3705                           postdec2	equ	0xFDD
  3706                           plusw2	equ	0xFDB
  3707                           fsr2h	equ	0xFDA
  3708                           fsr2l	equ	0xFD9
  3709                           status	equ	0xFD8
  3710                           
  3711 ;; *************** function _UART_buff_modulo_inc *****************
  3712 ;; Defined at:
  3713 ;;		line 106 in file "UART.c"
  3714 ;; Parameters:    Size  Location     Type
  3715 ;;  value           2    0[COMRAM] const unsigned int 
  3716 ;;  modulus         2    2[COMRAM] const unsigned int 
  3717 ;; Auto vars:     Size  Location     Type
  3718 ;;  my_value        2    4[COMRAM] unsigned int 
  3719 ;; Return value:  Size  Location     Type
  3720 ;;                  2    0[COMRAM] unsigned int 
  3721 ;; Registers used:
  3722 ;;		wreg, status,2, status,0
  3723 ;; Tracked objects:
  3724 ;;		On entry : 0/0
  3725 ;;		On exit  : 0/0
  3726 ;;		Unchanged: 0/0
  3727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3728 ;;      Params:         4       0       0       0       0       0       0
  3729 ;;      Locals:         2       0       0       0       0       0       0
  3730 ;;      Temps:          0       0       0       0       0       0       0
  3731 ;;      Totals:         6       0       0       0       0       0       0
  3732 ;;Total ram usage:        6 bytes
  3733 ;; Hardware stack levels used:    1
  3734 ;; This function calls:
  3735 ;;		Nothing
  3736 ;; This function is called by:
  3737 ;;		_UART_buff_put
  3738 ;;		_UART_buff_get
  3739 ;; This function uses a non-reentrant model
  3740 ;;
  3741                           
  3742                           	psect	text23
  3743  000C24                     __ptext23:
  3744                           	opt stack 0
  3745  000C24                     _UART_buff_modulo_inc:
  3746                           	opt stack 22
  3747                           
  3748                           ;UART.c: 107: unsigned int my_value = value + 1;
  3749                           
  3750                           ;incstack = 0
  3751  000C24  0E01               	movlw	1
  3752  000C26  2401               	addwf	UART_buff_modulo_inc@value,w,c
  3753  000C28  6E05               	movwf	UART_buff_modulo_inc@my_value,c
  3754  000C2A  0E00               	movlw	0
  3755  000C2C  2002               	addwfc	UART_buff_modulo_inc@value+1,w,c
  3756  000C2E  6E06               	movwf	UART_buff_modulo_inc@my_value+1,c
  3757                           
  3758                           ;UART.c: 108: if (my_value >= modulus) {
  3759  000C30  5003               	movf	UART_buff_modulo_inc@modulus,w,c
  3760  000C32  5C05               	subwf	UART_buff_modulo_inc@my_value,w,c
  3761  000C34  5004               	movf	UART_buff_modulo_inc@modulus+1,w,c
  3762  000C36  5806               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  3763  000C38  A0D8               	btfss	status,0,c
  3764  000C3A  D004               	goto	i2l1692
  3765                           
  3766                           ;UART.c: 109: my_value = 0;
  3767  000C3C  0E00               	movlw	0
  3768  000C3E  6E06               	movwf	UART_buff_modulo_inc@my_value+1,c
  3769  000C40  0E00               	movlw	0
  3770  000C42  6E05               	movwf	UART_buff_modulo_inc@my_value,c
  3771  000C44                     i2l1692:
  3772                           
  3773                           ;UART.c: 110: }
  3774                           ;UART.c: 111: return (my_value);
  3775  000C44  C005  F001         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  3776  000C48  C006  F002         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  3777  000C4C  0012               	return	
  3778  000C4E                     __end_of_UART_buff_modulo_inc:
  3779                           	opt stack 0
  3780  0000                     pclatu	equ	0xFFB
  3781                           pclath	equ	0xFFA
  3782                           tblptru	equ	0xFF8
  3783                           tblptrh	equ	0xFF7
  3784                           tblptrl	equ	0xFF6
  3785                           tablat	equ	0xFF5
  3786                           prodh	equ	0xFF4
  3787                           prodl	equ	0xFF3
  3788                           intcon	equ	0xFF2
  3789                           postinc0	equ	0xFEE
  3790                           fsr0h	equ	0xFEA
  3791                           fsr0l	equ	0xFE9
  3792                           wreg	equ	0xFE8
  3793                           fsr1h	equ	0xFE2
  3794                           fsr1l	equ	0xFE1
  3795                           indf2	equ	0xFDF
  3796                           postinc2	equ	0xFDE
  3797                           postdec2	equ	0xFDD
  3798                           plusw2	equ	0xFDB
  3799                           fsr2h	equ	0xFDA
  3800                           fsr2l	equ	0xFD9
  3801                           status	equ	0xFD8
  3802                           pclatu	equ	0xFFB
  3803                           pclath	equ	0xFFA
  3804                           tblptru	equ	0xFF8
  3805                           tblptrh	equ	0xFF7
  3806                           tblptrl	equ	0xFF6
  3807                           tablat	equ	0xFF5
  3808                           prodh	equ	0xFF4
  3809                           prodl	equ	0xFF3
  3810                           intcon	equ	0xFF2
  3811                           postinc0	equ	0xFEE
  3812                           fsr0h	equ	0xFEA
  3813                           fsr0l	equ	0xFE9
  3814                           wreg	equ	0xFE8
  3815                           fsr1h	equ	0xFE2
  3816                           fsr1l	equ	0xFE1
  3817                           indf2	equ	0xFDF
  3818                           postinc2	equ	0xFDE
  3819                           postdec2	equ	0xFDD
  3820                           plusw2	equ	0xFDB
  3821                           fsr2h	equ	0xFDA
  3822                           fsr2l	equ	0xFD9
  3823                           status	equ	0xFD8
  3824                           
  3825                           	psect	rparam
  3826  0000                     pclatu	equ	0xFFB
  3827                           pclath	equ	0xFFA
  3828                           tblptru	equ	0xFF8
  3829                           tblptrh	equ	0xFF7
  3830                           tblptrl	equ	0xFF6
  3831                           tablat	equ	0xFF5
  3832                           prodh	equ	0xFF4
  3833                           prodl	equ	0xFF3
  3834                           intcon	equ	0xFF2
  3835                           postinc0	equ	0xFEE
  3836                           fsr0h	equ	0xFEA
  3837                           fsr0l	equ	0xFE9
  3838                           wreg	equ	0xFE8
  3839                           fsr1h	equ	0xFE2
  3840                           fsr1l	equ	0xFE1
  3841                           indf2	equ	0xFDF
  3842                           postinc2	equ	0xFDE
  3843                           postdec2	equ	0xFDD
  3844                           plusw2	equ	0xFDB
  3845                           fsr2h	equ	0xFDA
  3846                           fsr2l	equ	0xFD9
  3847                           status	equ	0xFD8
  3848                           
  3849                           	psect	temp
  3850  000045                     btemp:
  3851                           	opt stack 0
  3852  000045                     	ds	1
  3853  0000                     int$flags	set	btemp
  3854                           pclatu	equ	0xFFB
  3855                           pclath	equ	0xFFA
  3856                           tblptru	equ	0xFF8
  3857                           tblptrh	equ	0xFF7
  3858                           tblptrl	equ	0xFF6
  3859                           tablat	equ	0xFF5
  3860                           prodh	equ	0xFF4
  3861                           prodl	equ	0xFF3
  3862                           intcon	equ	0xFF2
  3863                           postinc0	equ	0xFEE
  3864                           fsr0h	equ	0xFEA
  3865                           fsr0l	equ	0xFE9
  3866                           wreg	equ	0xFE8
  3867                           fsr1h	equ	0xFE2
  3868                           fsr1l	equ	0xFE1
  3869                           indf2	equ	0xFDF
  3870                           postinc2	equ	0xFDE
  3871                           postdec2	equ	0xFDD
  3872                           plusw2	equ	0xFDB
  3873                           fsr2h	equ	0xFDA
  3874                           fsr2l	equ	0xFD9
  3875                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         911
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      68
    BANK0           160     27      90
    BANK1           256      0     206
    BANK2           256      0     206
    BANK3           256      0     206
    BANK4           256      0     200
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_321(BANK0[3]), receiveData@holder(BANK0[3]), 
		 -> rx_buffer(BANK4[200]), ring_buffer(BANK1[206]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), ring_buffer(BANK1[206]), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), 

    serial_available	PTR FTN()int  size(2) Largest target is 1
		 -> Absolute function(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _FastTransfer_buffer_flush->_memset
    _ToSend->_FastTransfer_buffer_put
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _CRCcheck->_crcBufS_get
    _CRCcheck->_crcBufS_status_put

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondECU->_sendData
    _sendData->_FastTransfer_buffer_flush
    _ToSend->_FastTransfer_buffer_put
    _receiveData->_CRCcheck
    _CRCcheck->_crcBufS_get

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   10115
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   10115
                        _receiveData
                         _respondECU
 ---------------------------------------------------------------------------------
 (2) _respondECU                                           0     0      0    4845
                              _Delay
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    2997
                                             34 COMRAM     1     1      0
                                              4 BANK0      4     4      0
                               _CRC8
          _FastTransfer_buffer_flush
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                              0 BANK0      4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1674
                                              2 BANK0      3     1      2
            _FastTransfer_buffer_put
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1535
                                             32 COMRAM     5     0      5
                                              0 BANK0      2     2      0
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Delay                                                5     3      2     174
                                             26 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0    5270
                                              9 BANK0     18    18      0
                               _CRC8
                           _CRCcheck
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    3799
                                              2 BANK0      7     7      0
                               _CRC8
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    10     6      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          14    14      0    2289
                                             12 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0    1100
                      _UART_buff_get
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (8) _UART_buff_size                                       2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _UART_buff_get                                        5     3      2     950
                                              6 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  1     1      0    1189
                                             11 COMRAM     1     1      0
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (8) _UART_buff_put                                        5     2      3    1166
                                              6 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (9) _UART_buff_modulo_inc                                 6     2      4     602
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _updateComms
     _receiveData
       _CRC8
       _CRCcheck
         _CRC8
         _crcBufS_get
         _crcBufS_status_put
     _respondECU
       _Delay
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
       _sendData
         _CRC8
         _FastTransfer_buffer_flush
           _memset
         _crcBufS_put

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     _UART_buff_put
       _UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     _UART_buff_get
       _UART_buff_modulo_inc
     _UART_buff_size
   _TMR0_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      C8      13       78.1%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      CE       8       80.5%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      CE       6       80.5%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     1B      5A       4       56.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3D0       9        0.0%
DATA                 0      0     3D0      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Aug 12 05:35:28 2016

      __end_of_FastTransfer_buffer_flush 0A82                             _rx_array_inx 0042  
                                     l70 0B86                                      l143 0B1C  
                                    l170 00F0                                      l246 0874  
                                    l257 0908     FastTransfer_buffer_flush@clearBuffer 00A1  
                                    prod 000FF3                                      wreg 000FE8  
                                   l2000 0B22                                     l2002 0B28  
                                   l2100 088C                                     l2110 08E0  
                                   l2022 036E                                     l2040 05DE  
                                   l2114 0900                                     l2202 02C8  
                                   l2044 05E8                                     l2212 02D4  
                                   l2140 00A6                                     l2150 00E6  
                                   l2056 067C                                     l2072 082E  
                                   l2064 07A8                                     l2224 0336  
                                   l2232 0342                                     l2080 09C0  
                                   l2082 09C6                                     l2180 018E  
                                   l2190 0242                                     l2096 0876  
                                   l1640 0B72                                     l2186 0228  
                                   l2188 022E                                     l2276 0CC2  
                                   l1972 0C1A                                     l1982 0BE8  
                                   l1992 0B06                                     l1986 0AF0  
                                   l1978 0BD8                     receiveData@crcHolder 00AE  
                                   _CRC8 0AEA                                     u1101 036C  
                                   u1080 0788                                     u1417 0B78  
                                   u1291 0132                                     _main 0CC2  
                                   _time 008C                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     fsr0l 000FE9  
                                   fsr2h 000FDA                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   btemp 0045                                     pclat 000FFA  
                                   prodh 000FF4                                     prodl 000FF3  
        __end_of_FastTransfer_buffer_put 04BA                                     start 00A0  
                           ___param_bank 000010                                    ?_CRC8 001B  
                       __end_of_CRCcheck 090A                       crcBufS_put@address 001D  
                                  ?_main 0001                                    _T0CON 000FD5  
                                  i2l310 0998                                    i2l420 005A  
                                  i2l341 0C74                                    i2l424 0064  
                                  i2l418 004E                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6                                    _Delay 0B68  
                   _EUSART1_Transmit_ISR 0B9C                         __end_of_TMR0_ISR 0CB2  
                                  _group 002C                                    tablat 000FF5  
                   __size_of_crcBufS_get 00F2                                    plusw2 000FDB  
                   __size_of_crcBufS_put 00D8                                    status 000FD8  
                           ?_receiveData 0001                             __end_of_CRC8 0B34  
                        CRCcheck@SentCRC 00A1                          __initialization 0A82  
                           __end_of_main 0CC8                               ToSend@what 00A1  
                                 ??_CRC8 001E              ?_INTERRUPT_InterruptManager 0001  
                                 ??_main 0026                    receiveData@holder_321 00B3  
                          __activetblptr 000002                                   ?_Delay 001B  
                  ?_EUSART1_Transmit_ISR 0001            FastTransfer_buffer_put@towhat 0024  
                                 _RC1STA 000FAB                                   i2l1830 0546  
                                 i2l1824 04DA                                   i2l1692 0C44  
                                 i2l1844 0994                                   Delay@x 001E  
            UART_buff_modulo_inc@modulus 0003                                   i2l1884 0BC6  
                                 _RCREG1 000FAE                                   _SPBRG1 000FAF  
                                 _TX1STA 000FAC                                   _TXREG1 000FAD  
                                 _ToSend 0C4E                         crcBufS_get@_this 001B  
            ??_FastTransfer_buffer_flush 0023                            _output_buffer 0300  
                       crcBufS_get@space 001E                                CRC8@tempI 0020  
                                 _memset 0BCE                                   clear_0 0A88  
                                 clear_1 0A94                                   clear_2 0AA0  
                                 clear_3 0AAC                                   clear_4 0AB8  
                                 clear_5 0AC4                                   _rx_len 0043  
                       __end_of_sendData 0A16                             __pdataCOMRAM 0044  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8         __size_of_FastTransfer_buffer_put 0174  
           __end_of_UART_buff_modulo_inc 0C4E                               __accesstop 0060  
                __end_of__initialization 0ADC                                ?_CRCcheck 0001  
                          ___rparam_used 000001                             ?_updateComms 0001  
                          __end_of_Delay 0B9C                           __pcstackCOMRAM 0001  
                     _crcBufS_status_put 079E                         crcBufS_put@_this 001B  
                              ?_TMR0_ISR 0001   __end_of_FastTransfer_buffer_modulo_inc 0C24  
__size_of_FastTransfer_buffer_modulo_inc 002A           _FastTransfer_buffer_modulo_inc 0BFA  
           FastTransfer_buffer_put@_this 0021                              ToSend@where 00A3  
                     UART_buff_get@_this 0007                      ?_crcBufS_status_put 001B  
                  __end_of_UART_buff_get 099C                   ??_EUSART1_Transmit_ISR 000C  
                  __end_of_UART_buff_put 05D4                    TMR0_ISR@CountCallBack 0088  
                                ??_Delay 001D              __end_of_EUSART1_Receive_ISR 0C8A  
              _FastTransfer_buffer_flush 0A16                                  CRC8@crc 0021  
                                CRC8@len 001D                                  CRC8@sum 001E  
                    _addressErrorCounter 0026                               __pbssBANK0 0060  
                             __pbssBANK1 0100                               __pbssBANK2 0200  
                             __pbssBANK3 0300                               __pbssBANK4 0400  
                             ??_CRCcheck 0025                     ??_crcBufS_status_put 001F  
                __size_of_UART_buff_size 0016                     __size_of_receiveData 02A2  
                                ?_ToSend 00A1                               ??_TMR0_ISR 0001  
    FastTransfer_buffer_modulo_inc@value 001B                                  ?_memset 001B  
                             _crc_buffer 008E                       UART_buff_put@_this 0007  
           UART_buff_modulo_inc@my_value 0005                                  i2u91_40 0BB6  
                                _SPBRGH1 000FB0                                  i2u87_40 0928  
                    sendData@whereToSend 00A3                      _receiveArrayAddress 002E  
                              ?_sendData 0001                        _alignErrorCounter 0028  
                                __Hparam 0000                                  __Lparam 0000  
                        __size_of_ToSend 001E                                _AKNAKsend 003C  
                   _UART_buff_modulo_inc 0C24                                  _calc_CS 003D  
                                __pcinit 0A82                          __size_of_memset 002C  
                                __ramtop 0600                                  __ptext0 0CC2  
                                __ptext1 0CB2                                  __ptext2 0B34  
                                __ptext3 099C                                  __ptext4 06C6  
                                __ptext5 0A16                                  __ptext6 0BCE  
                                __ptext7 0C4E                                  __ptext8 0346  
                                __ptext9 0BFA                                _T0CONbits 000FD5  
                _FastTransfer_buffer_put 0346                    CRCcheck@calculatedCRC 00A2  
           crcBufS_status_put@wantedTime 0023                            ??_crcBufS_get 001F  
                          ??_crcBufS_put 0020                     end_of_initialization 0ADC  
                              Delay@wait 001B                                  memset@c 001D  
                                memset@n 001F                                  memset@p 0021  
                          __Lmediumconst 0000                               ??_sendData 0023  
                  ?_UART_buff_modulo_inc 0001                     __size_of_updateComms 0010  
                                postdec2 000FDD                                  postinc0 000FEE  
                                postinc2 000FDE                               _respondECU 0B34  
                    CRCcheck@arrayHolder 00A3                   _dataAdressErrorCounter 008A  
                             _rx_address 0041       __size_of_FastTransfer_buffer_flush 006C  
                         _UART_buff_size 0C8A                      __end_of_crcBufS_get 06C6  
                    __end_of_crcBufS_put 079E                        __size_of_CRCcheck 0096  
                          _moduleAddress 003F                     _timer0ReloadVal16bit 003A  
                             CRCcheck@rt 00A6                           __end_of_ToSend 0C6C  
                        _crcErrorCounter 002A                        crcBufS_put@oldCRC 001E  
                          __pidataCOMRAM 0CC8                        __size_of_TMR0_ISR 0012  
              ??_FastTransfer_buffer_put 009F                           __end_of_memset 0BFA  
                      crcBufS_put@status 001F                             receiveData@r 00B8  
                           receiveData@u 00B6                      start_initialization 0A82  
                  crcBufS_get@wantedTime 009F                           UART_buff_get@c 000B  
                 __end_of_UART_buff_size 0CA0                           UART_buff_put@c 0009  
                               ??_ToSend 0026                   ??_UART_buff_modulo_inc 0005  
                               CRC8@data 001B                          crcBufS_get@time 001D  
                            ?_respondECU 0001                                 ??_memset 0021  
                            __pbssCOMRAM 0026            __size_of_EUSART1_Transmit_ISR 0032  
                          __pcstackBANK0 009F                              _crcBufS_get 05D4  
                            _crcBufS_put 06C6                          ?_UART_buff_size 0001  
           __size_of_EUSART1_Receive_ISR 001E                            ??_receiveData 00A8  
            __size_of_crcBufS_status_put 00D6                               sendData@CS 00A4  
                 __size_of_UART_buff_get 0092                   __size_of_UART_buff_put 011A  
                      __size_of_sendData 007A                                __pintcode 0008  
           ??_INTERRUPT_InterruptManager 000D                 receiveData@crcHolder_322 00AF  
                               _BAUD1CON 000FB8                           __size_of_Delay 0034  
                    __size_of_respondECU 0034                             _receiveArray 0060  
                               _CRCcheck 0874                                 _LATDbits 000F8C  
                    UART_buff_size@_this 0001                                 _IPR1bits 000F9F  
                               _IPR2bits 000FA2                                 _PIE1bits 000F9D  
    __size_of_INTERRUPT_InterruptManager 0098                                 _PIR1bits 000F9E  
                               _RCONbits 000FD0                      __end_of_receiveData 0346  
                               _TMR0_ISR 0CA0           FastTransfer_buffer_flush@_this 009F  
                           _input_buffer 0200                                _rx_buffer 0400  
                          _UART_buff_get 090A                            _UART_buff_put 04BA  
                            _INTCON2bits 000FF1                        _sendStructAddress 0030  
                          ??_updateComms 0026                                 __Hrparam 0000  
                               __Lrparam 0000                           ?_UART_buff_get 0007  
                         ?_UART_buff_put 0007                              CRC8@extract 001F  
                              sendData@i 00A5                 crcBufS_status_put@status 001E  
                               __ptext10 0B68                                 __ptext11 00A4  
                               __ptext20 090A                                 __ptext12 0874  
                               __ptext21 0C6C                                 __ptext13 079E  
                               __ptext22 04BA                                 __ptext14 05D4  
                               __ptext23 0C24                                 __ptext15 0AEA  
                               __ptext17 0CA0                                 __ptext18 0B9C  
                               __ptext19 0C8A                            __size_of_CRC8 004A  
                EUSART1_Receive_ISR@data 000C                            _returnAddress 0040  
                          __size_of_main 0006                              _receiveData 00A4  
                         _Transmit_stall 0044                                 _sendData 099C  
                             _RC1STAbits 000FAB                             ??_respondECU 0026  
                               int$flags 0045                             _serial_write 0038  
                    __end_of_updateComms 0CC2       __end_of_INTERRUPT_InterruptManager 00A0  
             _INTERRUPT_InterruptManager 0008                      _EUSART1_Receive_ISR 0C6C  
                      receiveData@holder 00B0                               _INTCONbits 000FF2  
              UART_buff_modulo_inc@value 0001                         ??_UART_buff_size 0003  
                               memset@p1 001B                         _serial_available 0032  
                           ?_crcBufS_get 001B                             ?_crcBufS_put 001B  
                               intlevel2 0000                  crcBufS_status_put@_this 001B  
                     __end_of_respondECU 0B68                     ?_EUSART1_Receive_ISR 0001  
 FastTransfer_buffer_modulo_inc@my_value 001F           FastTransfer_buffer_put@towhere 0023  
           __end_of_EUSART1_Transmit_ISR 0BCE                              _ring_buffer 0100  
             ?_FastTransfer_buffer_flush 009F                              _serial_peek 0034  
                            _serial_read 0036                 ?_FastTransfer_buffer_put 0021  
          __size_of_UART_buff_modulo_inc 002A                          ??_UART_buff_get 0009  
                        ??_UART_buff_put 000A    FastTransfer_buffer_modulo_inc@modulus 001D  
                 crcBufS_status_put@time 001D                           _maxDataAddress 003E  
             __end_of_crcBufS_status_put 0874                    ??_EUSART1_Receive_ISR 000C  
       ??_FastTransfer_buffer_modulo_inc 001F          ?_FastTransfer_buffer_modulo_inc 001B  
                            _updateComms 0CB2  
