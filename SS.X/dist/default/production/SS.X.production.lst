

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Aug 12 22:04:42 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    65                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    66  0000                     
    67                           	psect	idataCOMRAM
    68  001848                     __pidataCOMRAM:
    69                           	opt stack 0
    70                           
    71                           ;initializer for _Transmit_stall
    72  001848  01                 	db	1
    73  0000                     _ANSELA	set	3896
    74  0000                     _ANSELC	set	3898
    75  0000                     _ANSELD	set	3899
    76  0000                     _BAUD1CON	set	4024
    77  0000                     _INTCON2bits	set	4081
    78  0000                     _INTCONbits	set	4082
    79  0000                     _IPR1bits	set	3999
    80  0000                     _IPR2bits	set	4002
    81  0000                     _LATAbits	set	3977
    82  0000                     _LATCbits	set	3979
    83  0000                     _LATDbits	set	3980
    84  0000                     _OSCCON	set	4051
    85  0000                     _OSCCON2	set	4050
    86  0000                     _OSCTUNE	set	3995
    87  0000                     _PIE1bits	set	3997
    88  0000                     _PIR1bits	set	3998
    89  0000                     _RC1STA	set	4011
    90  0000                     _RC1STAbits	set	4011
    91  0000                     _RCONbits	set	4048
    92  0000                     _RCREG1	set	4014
    93  0000                     _SPBRG1	set	4015
    94  0000                     _SPBRGH1	set	4016
    95  0000                     _T0CON	set	4053
    96  0000                     _T0CONbits	set	4053
    97  0000                     _TMR0H	set	4055
    98  0000                     _TMR0L	set	4054
    99  0000                     _TRISAbits	set	3986
   100  0000                     _TRISCbits	set	3988
   101  0000                     _TRISDbits	set	3989
   102  0000                     _TX1STA	set	4012
   103  0000                     _TXREG1	set	4013
   104                           
   105                           ; #config settings
   106  0000                     
   107                           	psect	cinit
   108  001328                     __pcinit:
   109                           	opt stack 0
   110  001328                     start_initialization:
   111                           	opt stack 0
   112  001328                     __initialization:
   113                           	opt stack 0
   114                           
   115                           ; Clear objects allocated to BANK4 (206 bytes)
   116  001328  EE04  F000         	lfsr	0,__pbssBANK4
   117  00132C  0ECE               	movlw	206
   118  00132E                     clear_0:
   119  00132E  6AEE               	clrf	postinc0,c
   120  001330  06E8               	decf	wreg,f,c
   121  001332  E1FD               	bnz	clear_0
   122                           
   123                           ; Clear objects allocated to BANK3 (206 bytes)
   124  001334  EE03  F000         	lfsr	0,__pbssBANK3
   125  001338  0ECE               	movlw	206
   126  00133A                     clear_1:
   127  00133A  6AEE               	clrf	postinc0,c
   128  00133C  06E8               	decf	wreg,f,c
   129  00133E  E1FD               	bnz	clear_1
   130                           
   131                           ; Clear objects allocated to BANK2 (200 bytes)
   132  001340  EE02  F000         	lfsr	0,__pbssBANK2
   133  001344  0EC8               	movlw	200
   134  001346                     clear_2:
   135  001346  6AEE               	clrf	postinc0,c
   136  001348  06E8               	decf	wreg,f,c
   137  00134A  E1FD               	bnz	clear_2
   138                           
   139                           ; Clear objects allocated to BANK1 (206 bytes)
   140  00134C  EE01  F000         	lfsr	0,__pbssBANK1
   141  001350  0ECE               	movlw	206
   142  001352                     clear_3:
   143  001352  6AEE               	clrf	postinc0,c
   144  001354  06E8               	decf	wreg,f,c
   145  001356  E1FD               	bnz	clear_3
   146                           
   147                           ; Clear objects allocated to BANK0 (37 bytes)
   148  001358  EE00  F060         	lfsr	0,__pbssBANK0
   149  00135C  0E25               	movlw	37
   150  00135E                     clear_4:
   151  00135E  6AEE               	clrf	postinc0,c
   152  001360  06E8               	decf	wreg,f,c
   153  001362  E1FD               	bnz	clear_4
   154                           
   155                           ; Clear objects allocated to COMRAM (30 bytes)
   156  001364  EE00  F026         	lfsr	0,__pbssCOMRAM
   157  001368  0E1E               	movlw	30
   158  00136A                     clear_5:
   159  00136A  6AEE               	clrf	postinc0,c
   160  00136C  06E8               	decf	wreg,f,c
   161  00136E  E1FD               	bnz	clear_5
   162                           
   163                           ; Initialize objects allocated to COMRAM (1 bytes)
   164                           ; load TBLPTR registers with __pidataCOMRAM
   165  001370  0E48               	movlw	low __pidataCOMRAM
   166  001372  6EF6               	movwf	tblptrl,c
   167  001374  0E18               	movlw	high __pidataCOMRAM
   168  001376  6EF7               	movwf	tblptrh,c
   169  001378  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   170  00137A  6EF8               	movwf	tblptru,c
   171  00137C  0009               	tblrd		*+	;fetch initializer
   172  00137E  CFF5 F044          	movff	tablat,__pdataCOMRAM
   173  001382                     end_of_initialization:
   174                           	opt stack 0
   175  001382                     __end_of__initialization:
   176                           	opt stack 0
   177  001382  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   178  001384  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   179  001386  0E00               	movlw	low (__Lmediumconst shr (0+16))
   180  001388  6EF8               	movwf	tblptru,c
   181  00138A  0100               	movlb	0
   182  00138C  EFFD  F00A         	goto	_main	;jump to C main() function
   183                           tblptru	equ	0xFF8
   184                           tblptrh	equ	0xFF7
   185                           tblptrl	equ	0xFF6
   186                           tablat	equ	0xFF5
   187                           postinc0	equ	0xFEE
   188                           wreg	equ	0xFE8
   189                           
   190                           	psect	bssCOMRAM
   191  000026                     __pbssCOMRAM:
   192                           	opt stack 0
   193  000026                     _alignErrorCounter:
   194                           	opt stack 0
   195  000026                     	ds	2
   196  000028                     _crcErrorCounter:
   197                           	opt stack 0
   198  000028                     	ds	2
   199  00002A                     _group:
   200                           	opt stack 0
   201  00002A                     	ds	2
   202  00002C                     _receiveArrayAddress:
   203                           	opt stack 0
   204  00002C                     	ds	2
   205  00002E                     _sendStructAddress:
   206                           	opt stack 0
   207  00002E                     	ds	2
   208  000030                     _serial_available:
   209                           	opt stack 0
   210  000030                     	ds	2
   211  000032                     _serial_peek:
   212                           	opt stack 0
   213  000032                     	ds	2
   214  000034                     _serial_read:
   215                           	opt stack 0
   216  000034                     	ds	2
   217  000036                     _serial_write:
   218                           	opt stack 0
   219  000036                     	ds	2
   220  000038                     _timer0ReloadVal16bit:
   221                           	opt stack 0
   222  000038                     	ds	2
   223  00003A                     _AKNAKsend:
   224                           	opt stack 0
   225  00003A                     	ds	1
   226  00003B                     _ByteHigh:
   227                           	opt stack 0
   228  00003B                     	ds	1
   229  00003C                     _ByteLow:
   230                           	opt stack 0
   231  00003C                     	ds	1
   232  00003D                     _calc_CS:
   233                           	opt stack 0
   234  00003D                     	ds	1
   235  00003E                     _maxDataAddress:
   236                           	opt stack 0
   237  00003E                     	ds	1
   238  00003F                     _moduleAddress:
   239                           	opt stack 0
   240  00003F                     	ds	1
   241  000040                     _returnAddress:
   242                           	opt stack 0
   243  000040                     	ds	1
   244  000041                     _rx_address:
   245                           	opt stack 0
   246  000041                     	ds	1
   247  000042                     _rx_array_inx:
   248                           	opt stack 0
   249  000042                     	ds	1
   250  000043                     _rx_len:
   251                           	opt stack 0
   252  000043                     	ds	1
   253                           tblptru	equ	0xFF8
   254                           tblptrh	equ	0xFF7
   255                           tblptrl	equ	0xFF6
   256                           tablat	equ	0xFF5
   257                           postinc0	equ	0xFEE
   258                           wreg	equ	0xFE8
   259                           
   260                           	psect	dataCOMRAM
   261  000044                     __pdataCOMRAM:
   262                           	opt stack 0
   263  000044                     _Transmit_stall:
   264                           	opt stack 0
   265  000044                     	ds	1
   266                           tblptru	equ	0xFF8
   267                           tblptrh	equ	0xFF7
   268                           tblptrl	equ	0xFF6
   269                           tablat	equ	0xFF5
   270                           postinc0	equ	0xFEE
   271                           wreg	equ	0xFE8
   272                           
   273                           	psect	bssBANK0
   274  000060                     __pbssBANK0:
   275                           	opt stack 0
   276  000060                     _time:
   277                           	opt stack 0
   278  000060                     	ds	4
   279  000064                     TMR0_ISR@CountCallBack:
   280                           	opt stack 0
   281  000064                     	ds	2
   282  000066                     _addressErrorCounter:
   283                           	opt stack 0
   284  000066                     	ds	2
   285  000068                     _dataAdressErrorCounter:
   286                           	opt stack 0
   287  000068                     	ds	2
   288  00006A                     _crc_buffer:
   289                           	opt stack 0
   290  00006A                     	ds	17
   291  00007B                     _receiveArray:
   292                           	opt stack 0
   293  00007B                     	ds	10
   294                           tblptru	equ	0xFF8
   295                           tblptrh	equ	0xFF7
   296                           tblptrl	equ	0xFF6
   297                           tablat	equ	0xFF5
   298                           postinc0	equ	0xFEE
   299                           wreg	equ	0xFE8
   300                           
   301                           	psect	bssBANK1
   302  000100                     __pbssBANK1:
   303                           	opt stack 0
   304  000100                     _ring_buffer:
   305                           	opt stack 0
   306  000100                     	ds	206
   307                           tblptru	equ	0xFF8
   308                           tblptrh	equ	0xFF7
   309                           tblptrl	equ	0xFF6
   310                           tablat	equ	0xFF5
   311                           postinc0	equ	0xFEE
   312                           wreg	equ	0xFE8
   313                           
   314                           	psect	bssBANK2
   315  000200                     __pbssBANK2:
   316                           	opt stack 0
   317  000200                     _rx_buffer:
   318                           	opt stack 0
   319  000200                     	ds	200
   320                           tblptru	equ	0xFF8
   321                           tblptrh	equ	0xFF7
   322                           tblptrl	equ	0xFF6
   323                           tablat	equ	0xFF5
   324                           postinc0	equ	0xFEE
   325                           wreg	equ	0xFE8
   326                           
   327                           	psect	bssBANK3
   328  000300                     __pbssBANK3:
   329                           	opt stack 0
   330  000300                     _input_buffer:
   331                           	opt stack 0
   332  000300                     	ds	206
   333                           tblptru	equ	0xFF8
   334                           tblptrh	equ	0xFF7
   335                           tblptrl	equ	0xFF6
   336                           tablat	equ	0xFF5
   337                           postinc0	equ	0xFEE
   338                           wreg	equ	0xFE8
   339                           
   340                           	psect	bssBANK4
   341  000400                     __pbssBANK4:
   342                           	opt stack 0
   343  000400                     _output_buffer:
   344                           	opt stack 0
   345  000400                     	ds	206
   346                           tblptru	equ	0xFF8
   347                           tblptrh	equ	0xFF7
   348                           tblptrl	equ	0xFF6
   349                           tablat	equ	0xFF5
   350                           postinc0	equ	0xFEE
   351                           wreg	equ	0xFE8
   352                           
   353                           	psect	cstackBANK0
   354  000085                     __pcstackBANK0:
   355                           	opt stack 0
   356  000085                     ??_FastTransfer_buffer_put:
   357  000085                     Send_put@_data:
   358                           	opt stack 0
   359  000085                     begin@ptr:
   360                           	opt stack 0
   361  000085                     FastTransfer_buffer_flush@_this:
   362                           	opt stack 0
   363  000085                     crcBufS_get@wantedTime:
   364                           	opt stack 0
   365                           
   366                           ; 2 bytes @ 0x0
   367  000085                     	ds	2
   368  000087                     begin@maxSize:
   369                           	opt stack 0
   370  000087                     CRCcheck@SentCRC:
   371                           	opt stack 0
   372  000087                     ToSend@what:
   373                           	opt stack 0
   374  000087                     FastTransfer_buffer_flush@clearBuffer:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x2
   378  000087                     	ds	1
   379  000088                     begin@givenAddress:
   380                           	opt stack 0
   381  000088                     CRCcheck@calculatedCRC:
   382                           	opt stack 0
   383                           
   384                           ; 1 bytes @ 0x3
   385  000088                     	ds	1
   386  000089                     ??_sendData:
   387  000089                     begin@error:
   388                           	opt stack 0
   389  000089                     ToSend@where:
   390                           	opt stack 0
   391  000089                     CRCcheck@arrayHolder:
   392                           	opt stack 0
   393                           
   394                           ; 3 bytes @ 0x4
   395  000089                     	ds	1
   396  00008A                     sendData@whereToSend:
   397                           	opt stack 0
   398  00008A                     begin@stufftosend:
   399                           	opt stack 0
   400                           
   401                           ; 2 bytes @ 0x5
   402  00008A                     	ds	1
   403  00008B                     sendData@CS:
   404                           	opt stack 0
   405                           
   406                           ; 1 bytes @ 0x6
   407  00008B                     	ds	1
   408  00008C                     begin@stufftoreceive:
   409                           	opt stack 0
   410  00008C                     sendData@i:
   411                           	opt stack 0
   412  00008C                     CRCcheck@rt:
   413                           	opt stack 0
   414                           
   415                           ; 2 bytes @ 0x7
   416  00008C                     	ds	2
   417  00008E                     ??_receiveData:
   418  00008E                     ??_respondECU:
   419  00008E                     begin@stuffavailable:
   420                           	opt stack 0
   421                           
   422                           ; 2 bytes @ 0x9
   423  00008E                     	ds	2
   424  000090                     begin@stuffpeek:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0xB
   428  000090                     	ds	4
   429  000094                     receiveData@holder:
   430                           	opt stack 0
   431                           
   432                           ; 3 bytes @ 0xF
   433  000094                     	ds	3
   434  000097                     receiveData@holder_329:
   435                           	opt stack 0
   436                           
   437                           ; 3 bytes @ 0x12
   438  000097                     	ds	3
   439  00009A                     receiveData@crcHolder:
   440                           	opt stack 0
   441                           
   442                           ; 1 bytes @ 0x15
   443  00009A                     	ds	1
   444  00009B                     receiveData@crcHolder_330:
   445                           	opt stack 0
   446                           
   447                           ; 1 bytes @ 0x16
   448  00009B                     	ds	1
   449  00009C                     receiveData@u:
   450                           	opt stack 0
   451                           
   452                           ; 2 bytes @ 0x17
   453  00009C                     	ds	2
   454  00009E                     receiveData@r:
   455                           	opt stack 0
   456                           
   457                           ; 2 bytes @ 0x19
   458  00009E                     	ds	2
   459                           tblptru	equ	0xFF8
   460                           tblptrh	equ	0xFF7
   461                           tblptrl	equ	0xFF6
   462                           tablat	equ	0xFF5
   463                           postinc0	equ	0xFEE
   464                           wreg	equ	0xFE8
   465                           
   466                           	psect	cstackCOMRAM
   467  000001                     __pcstackCOMRAM:
   468                           	opt stack 0
   469  000001                     ?i2_UART_buff_size:
   470                           	opt stack 0
   471  000001                     ?i2_UART_buff_modulo_inc:
   472                           	opt stack 0
   473  000001                     i2UART_buff_size@_this:
   474                           	opt stack 0
   475  000001                     i2UART_buff_modulo_inc@value:
   476                           	opt stack 0
   477                           
   478                           ; 2 bytes @ 0x0
   479  000001                     	ds	2
   480  000003                     i2UART_buff_modulo_inc@modulus:
   481                           	opt stack 0
   482                           
   483                           ; 2 bytes @ 0x2
   484  000003                     	ds	2
   485  000005                     i2UART_buff_modulo_inc@my_value:
   486                           	opt stack 0
   487                           
   488                           ; 2 bytes @ 0x4
   489  000005                     	ds	2
   490  000007                     i2UART_buff_put@_this:
   491                           	opt stack 0
   492  000007                     i2UART_buff_get@_this:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x6
   496  000007                     	ds	2
   497  000009                     ??i2_UART_buff_get:
   498  000009                     i2UART_buff_put@c:
   499                           	opt stack 0
   500                           
   501                           ; 1 bytes @ 0x8
   502  000009                     	ds	1
   503  00000A                     ??i2_UART_buff_put:
   504                           
   505                           ; 1 bytes @ 0x9
   506  00000A                     	ds	1
   507  00000B                     i2UART_buff_get@c:
   508                           	opt stack 0
   509                           
   510                           ; 1 bytes @ 0xA
   511  00000B                     	ds	1
   512  00000C                     EUSART1_Receive_ISR@data:
   513                           	opt stack 0
   514                           
   515                           ; 1 bytes @ 0xB
   516  00000C                     	ds	1
   517  00000D                     ??_INTERRUPT_InterruptManager:
   518                           
   519                           ; 1 bytes @ 0xC
   520  00000D                     	ds	14
   521  00001B                     ??_ReadFaults:
   522  00001B                     ?_FastTransfer_buffer_modulo_inc:
   523                           	opt stack 0
   524  00001B                     ?_UART_buff_modulo_inc:
   525                           	opt stack 0
   526  00001B                     ?_UART_buff_size:
   527                           	opt stack 0
   528  00001B                     ?___awdiv:
   529                           	opt stack 0
   530  00001B                     ?_GetTime:
   531                           	opt stack 0
   532  00001B                     GetFaults@num:
   533                           	opt stack 0
   534  00001B                     CRC8@data:
   535                           	opt stack 0
   536  00001B                     FastTransfer_buffer_modulo_inc@value:
   537                           	opt stack 0
   538  00001B                     crcBufS_put@_this:
   539                           	opt stack 0
   540  00001B                     crcBufS_status_put@_this:
   541                           	opt stack 0
   542  00001B                     crcBufS_get@_this:
   543                           	opt stack 0
   544  00001B                     UART_buff_size@_this:
   545                           	opt stack 0
   546  00001B                     UART_buff_modulo_inc@value:
   547                           	opt stack 0
   548  00001B                     UART_buff_peek@_this:
   549                           	opt stack 0
   550  00001B                     Delay@wait:
   551                           	opt stack 0
   552  00001B                     ___awdiv@dividend:
   553                           	opt stack 0
   554  00001B                     memset@p1:
   555                           	opt stack 0
   556                           
   557                           ; 2 bytes @ 0x1A
   558  00001B                     	ds	2
   559  00001D                     ??_Delay:
   560  00001D                     ??_UART_buff_peek:
   561  00001D                     ?_Receive_available:
   562                           	opt stack 0
   563  00001D                     CRC8@len:
   564                           	opt stack 0
   565  00001D                     crcBufS_put@address:
   566                           	opt stack 0
   567  00001D                     crcBufS_status_put@time:
   568                           	opt stack 0
   569  00001D                     crcBufS_get@time:
   570                           	opt stack 0
   571  00001D                     FastTransfer_buffer_modulo_inc@modulus:
   572                           	opt stack 0
   573  00001D                     UART_buff_modulo_inc@modulus:
   574                           	opt stack 0
   575  00001D                     ___awdiv@divisor:
   576                           	opt stack 0
   577  00001D                     memset@c:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x1C
   581  00001D                     	ds	1
   582  00001E                     CRC8@sum:
   583                           	opt stack 0
   584  00001E                     crcBufS_put@oldCRC:
   585                           	opt stack 0
   586  00001E                     crcBufS_status_put@status:
   587                           	opt stack 0
   588  00001E                     crcBufS_get@space:
   589                           	opt stack 0
   590  00001E                     Delay@x:
   591                           	opt stack 0
   592                           
   593                           ; 2 bytes @ 0x1D
   594  00001E                     	ds	1
   595  00001F                     ??_crcBufS_get:
   596  00001F                     ??_crcBufS_status_put:
   597  00001F                     CRC8@extract:
   598                           	opt stack 0
   599  00001F                     crcBufS_put@status:
   600                           	opt stack 0
   601  00001F                     ___awdiv@counter:
   602                           	opt stack 0
   603  00001F                     FastTransfer_buffer_modulo_inc@my_value:
   604                           	opt stack 0
   605  00001F                     UART_buff_modulo_inc@my_value:
   606                           	opt stack 0
   607  00001F                     memset@n:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0x1E
   611  00001F                     	ds	1
   612  000020                     ??_crcBufS_put:
   613  000020                     CRC8@tempI:
   614                           	opt stack 0
   615  000020                     ___awdiv@sign:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0x1F
   619  000020                     	ds	1
   620  000021                     CRC8@crc:
   621                           	opt stack 0
   622  000021                     FastTransfer_buffer_put@_this:
   623                           	opt stack 0
   624  000021                     UART_buff_put@_this:
   625                           	opt stack 0
   626  000021                     UART_buff_get@_this:
   627                           	opt stack 0
   628  000021                     ___awdiv@quotient:
   629                           	opt stack 0
   630  000021                     memset@p:
   631                           	opt stack 0
   632                           
   633                           ; 2 bytes @ 0x20
   634  000021                     	ds	2
   635  000023                     ??_UART_buff_get:
   636  000023                     FastTransfer_buffer_put@towhere:
   637                           	opt stack 0
   638  000023                     UART_buff_put@c:
   639                           	opt stack 0
   640  000023                     crcBufS_status_put@wantedTime:
   641                           	opt stack 0
   642  000023                     UART_buff_init@_this:
   643                           	opt stack 0
   644                           
   645                           ; 2 bytes @ 0x22
   646  000023                     	ds	1
   647  000024                     ??_UART_buff_put:
   648  000024                     FastTransfer_buffer_put@towhat:
   649                           	opt stack 0
   650                           
   651                           ; 2 bytes @ 0x23
   652  000024                     	ds	1
   653  000025                     UART_buff_get@c:
   654                           	opt stack 0
   655                           
   656                           ; 1 bytes @ 0x24
   657  000025                     	ds	1
   658  000026                     tblptru	equ	0xFF8
   659                           tblptrh	equ	0xFF7
   660                           tblptrl	equ	0xFF6
   661                           tablat	equ	0xFF5
   662                           postinc0	equ	0xFEE
   663                           wreg	equ	0xFE8
   664                           
   665                           ; 1 bytes @ 0x25
   666 ;;
   667 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   668 ;;
   669 ;; *************** function _main *****************
   670 ;; Defined at:
   671 ;;		line 23 in file "Main.c"
   672 ;; Parameters:    Size  Location     Type
   673 ;;		None
   674 ;; Auto vars:     Size  Location     Type
   675 ;;		None
   676 ;; Return value:  Size  Location     Type
   677 ;;                  1    wreg      void 
   678 ;; Registers used:
   679 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   680 ;; Tracked objects:
   681 ;;		On entry : 0/0
   682 ;;		On exit  : 0/0
   683 ;;		Unchanged: 0/0
   684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   685 ;;      Params:         0       0       0       0       0       0       0
   686 ;;      Locals:         0       0       0       0       0       0       0
   687 ;;      Temps:          0       0       0       0       0       0       0
   688 ;;      Totals:         0       0       0       0       0       0       0
   689 ;;Total ram usage:        0 bytes
   690 ;; Hardware stack levels required when called:   10
   691 ;; This function calls:
   692 ;;		_GetTime
   693 ;;		_ReadFaults
   694 ;;		_SetTime
   695 ;;		_Start
   696 ;;		_updateComms
   697 ;; This function is called by:
   698 ;;		Startup code after reset
   699 ;; This function uses a non-reentrant model
   700 ;;
   701                           
   702                           	psect	text0
   703  0015FA                     __ptext0:
   704                           	opt stack 0
   705  0015FA                     _main:
   706                           	opt stack 21
   707                           
   708                           ;Main.c: 24: Start();
   709                           
   710                           ;incstack = 0
   711  0015FA  EC71  F00A         	call	_Start	;wreg free
   712  0015FE                     l2877:
   713                           
   714                           ;Main.c: 26: updateComms();
   715  0015FE  EC0C  F00C         	call	_updateComms	;wreg free
   716                           
   717                           ;Main.c: 27: if(GetTime() > 1000){
   718  001602  EC03  F00C         	call	_GetTime	;wreg free
   719  001606  BE1E               	btfsc	?_GetTime+3,7,c
   720  001608  D7FA               	goto	l2877
   721  00160A  501E               	movf	?_GetTime+3,w,c
   722  00160C  101D               	iorwf	?_GetTime+2,w,c
   723  00160E  E106               	bnz	u3330
   724  001610  0EE9               	movlw	233
   725  001612  5C1B               	subwf	?_GetTime,w,c
   726  001614  0E03               	movlw	3
   727  001616  581C               	subwfb	?_GetTime+1,w,c
   728  001618  A0D8               	btfss	status,0,c
   729  00161A  D7F1               	goto	l2877
   730  00161C                     u3330:
   731                           
   732                           ;Main.c: 28: LATAbits.LATA3 ^= 1;
   733  00161C  7689               	btg	3977,3,c	;volatile
   734                           
   735                           ;Main.c: 29: SetTime();
   736  00161E  ECF0  F00B         	call	_SetTime	;wreg free
   737                           
   738                           ;Main.c: 30: ReadFaults();
   739  001622  ECB3  F007         	call	_ReadFaults	;wreg free
   740  001626  D7EB               	goto	l2877
   741  001628                     __end_of_main:
   742                           	opt stack 0
   743                           tblptru	equ	0xFF8
   744                           tblptrh	equ	0xFF7
   745                           tblptrl	equ	0xFF6
   746                           tablat	equ	0xFF5
   747                           postinc0	equ	0xFEE
   748                           wreg	equ	0xFE8
   749                           status	equ	0xFD8
   750                           
   751 ;; *************** function _updateComms *****************
   752 ;; Defined at:
   753 ;;		line 17 in file "Communications.c"
   754 ;; Parameters:    Size  Location     Type
   755 ;;		None
   756 ;; Auto vars:     Size  Location     Type
   757 ;;		None
   758 ;; Return value:  Size  Location     Type
   759 ;;                  1    wreg      void 
   760 ;; Registers used:
   761 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   762 ;; Tracked objects:
   763 ;;		On entry : 0/0
   764 ;;		On exit  : 0/0
   765 ;;		Unchanged: 0/0
   766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   767 ;;      Params:         0       0       0       0       0       0       0
   768 ;;      Locals:         0       0       0       0       0       0       0
   769 ;;      Temps:          0       0       0       0       0       0       0
   770 ;;      Totals:         0       0       0       0       0       0       0
   771 ;;Total ram usage:        0 bytes
   772 ;; Hardware stack levels used:    1
   773 ;; Hardware stack levels required when called:    9
   774 ;; This function calls:
   775 ;;		_receiveData
   776 ;;		_respondECU
   777 ;; This function is called by:
   778 ;;		_main
   779 ;; This function uses a non-reentrant model
   780 ;;
   781                           
   782                           	psect	text1
   783  001818                     __ptext1:
   784                           	opt stack 0
   785  001818                     _updateComms:
   786                           	opt stack 21
   787                           
   788                           ;Communications.c: 18: if (receiveData()) {
   789                           
   790                           ;incstack = 0
   791  001818  EC52  F000         	call	_receiveData	;wreg free
   792  00181C  0900               	iorlw	0
   793  00181E  B4D8               	btfsc	status,2,c
   794  001820  0012               	return	
   795                           
   796                           ;Communications.c: 19: respondECU();
   797  001822  ECC8  F009         	call	_respondECU	;wreg free
   798  001826  0012               	return	
   799  001828                     __end_of_updateComms:
   800                           	opt stack 0
   801                           tblptru	equ	0xFF8
   802                           tblptrh	equ	0xFF7
   803                           tblptrl	equ	0xFF6
   804                           tablat	equ	0xFF5
   805                           postinc0	equ	0xFEE
   806                           wreg	equ	0xFE8
   807                           status	equ	0xFD8
   808                           
   809 ;; *************** function _respondECU *****************
   810 ;; Defined at:
   811 ;;		line 23 in file "Communications.c"
   812 ;; Parameters:    Size  Location     Type
   813 ;;		None
   814 ;; Auto vars:     Size  Location     Type
   815 ;;		None
   816 ;; Return value:  Size  Location     Type
   817 ;;                  1    wreg      void 
   818 ;; Registers used:
   819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
   820 ;; Tracked objects:
   821 ;;		On entry : 0/0
   822 ;;		On exit  : 0/0
   823 ;;		Unchanged: 0/0
   824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   825 ;;      Params:         0       0       0       0       0       0       0
   826 ;;      Locals:         0       0       0       0       0       0       0
   827 ;;      Temps:          0       1       0       0       0       0       0
   828 ;;      Totals:         0       1       0       0       0       0       0
   829 ;;Total ram usage:        1 bytes
   830 ;; Hardware stack levels used:    1
   831 ;; Hardware stack levels required when called:    8
   832 ;; This function calls:
   833 ;;		_Delay
   834 ;;		_GetFaults
   835 ;;		_ToSend
   836 ;;		_sendData
   837 ;; This function is called by:
   838 ;;		_updateComms
   839 ;; This function uses a non-reentrant model
   840 ;;
   841                           
   842                           	psect	text2
   843  001390                     __ptext2:
   844                           	opt stack 0
   845  001390                     _respondECU:
   846                           	opt stack 21
   847                           
   848                           ;Communications.c: 24: LATDbits.LATD4 = 1;
   849                           
   850                           ;incstack = 0
   851  001390  888C               	bsf	3980,4,c	;volatile
   852                           
   853                           ;Communications.c: 25: ToSend(1,GetFaults(1));
   854  001392  0E01               	movlw	1
   855  001394  ECC4  F00B         	call	_GetFaults
   856  001398  0100               	movlb	0	; () banked
   857  00139A  6F8E               	movwf	??_respondECU& (0+255),b
   858  00139C  0100               	movlb	0	; () banked
   859  00139E  518E               	movf	??_respondECU& (0+255),w,b
   860  0013A0  0100               	movlb	0	; () banked
   861  0013A2  6F87               	movwf	ToSend@what& (0+255),b
   862  0013A4  6B88               	clrf	(ToSend@what+1)& (0+255),b
   863  0013A6  0E01               	movlw	1
   864  0013A8  EC7B  F00B         	call	_ToSend
   865                           
   866                           ;Communications.c: 26: ToSend(2,GetFaults(0));
   867  0013AC  0E00               	movlw	0
   868  0013AE  ECC4  F00B         	call	_GetFaults
   869  0013B2  0100               	movlb	0	; () banked
   870  0013B4  6F8E               	movwf	??_respondECU& (0+255),b
   871  0013B6  0100               	movlb	0	; () banked
   872  0013B8  518E               	movf	??_respondECU& (0+255),w,b
   873  0013BA  0100               	movlb	0	; () banked
   874  0013BC  6F87               	movwf	ToSend@what& (0+255),b
   875  0013BE  6B88               	clrf	(ToSend@what+1)& (0+255),b
   876  0013C0  0E02               	movlw	2
   877  0013C2  EC7B  F00B         	call	_ToSend
   878                           
   879                           ;Communications.c: 27: Delay(9);
   880  0013C6  0E00               	movlw	0
   881  0013C8  6E1C               	movwf	Delay@wait+1,c
   882  0013CA  0E09               	movlw	9
   883  0013CC  6E1B               	movwf	Delay@wait,c
   884  0013CE  ECB2  F00A         	call	_Delay	;wreg free
   885                           
   886                           ;Communications.c: 28: sendData(1);
   887  0013D2  0E01               	movlw	1
   888  0013D4  EC0F  F005         	call	_sendData
   889                           
   890                           ;Communications.c: 29: Delay(3);
   891  0013D8  0E00               	movlw	0
   892  0013DA  6E1C               	movwf	Delay@wait+1,c
   893  0013DC  0E03               	movlw	3
   894  0013DE  6E1B               	movwf	Delay@wait,c
   895  0013E0  ECB2  F00A         	call	_Delay	;wreg free
   896                           
   897                           ;Communications.c: 30: LATDbits.LATD4 = 0;
   898  0013E4  988C               	bcf	3980,4,c	;volatile
   899  0013E6  0012               	return		;funcret
   900  0013E8                     __end_of_respondECU:
   901                           	opt stack 0
   902                           tblptru	equ	0xFF8
   903                           tblptrh	equ	0xFF7
   904                           tblptrl	equ	0xFF6
   905                           tablat	equ	0xFF5
   906                           postinc0	equ	0xFEE
   907                           wreg	equ	0xFE8
   908                           status	equ	0xFD8
   909                           
   910 ;; *************** function _sendData *****************
   911 ;; Defined at:
   912 ;;		line 108 in file "FastTransfer.c"
   913 ;; Parameters:    Size  Location     Type
   914 ;;  whereToSend     1    wreg     unsigned char 
   915 ;; Auto vars:     Size  Location     Type
   916 ;;  whereToSend     1    5[BANK0 ] unsigned char 
   917 ;;  i               2    7[BANK0 ] int 
   918 ;;  CS              1    6[BANK0 ] unsigned char 
   919 ;; Return value:  Size  Location     Type
   920 ;;                  1    wreg      void 
   921 ;; Registers used:
   922 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
   923 ;; Tracked objects:
   924 ;;		On entry : 0/0
   925 ;;		On exit  : 0/0
   926 ;;		Unchanged: 0/0
   927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   928 ;;      Params:         0       0       0       0       0       0       0
   929 ;;      Locals:         0       4       0       0       0       0       0
   930 ;;      Temps:          0       1       0       0       0       0       0
   931 ;;      Totals:         0       5       0       0       0       0       0
   932 ;;Total ram usage:        5 bytes
   933 ;; Hardware stack levels used:    1
   934 ;; Hardware stack levels required when called:    7
   935 ;; This function calls:
   936 ;;		Absolute function
   937 ;;		_CRC8
   938 ;;		_FastTransfer_buffer_flush
   939 ;;		_Send_put
   940 ;;		_crcBufS_put
   941 ;; This function is called by:
   942 ;;		_respondECU
   943 ;; This function uses a non-reentrant model
   944 ;;
   945                           
   946                           	psect	text3
   947  000A1E                     __ptext3:
   948                           	opt stack 0
   949  000A1E                     _sendData:
   950                           	opt stack 21
   951                           
   952                           ;incstack = 0
   953                           ;sendData@whereToSend stored from wreg
   954  000A1E  0100               	movlb	0	; () banked
   955  000A20  6F8A               	movwf	sendData@whereToSend& (0+255),b
   956                           
   957                           ;FastTransfer.c: 111: unsigned char CS = CRC8(sendStructAddress, ring_buffer.count);
   958  000A22  C02E  F01B         	movff	_sendStructAddress,CRC8@data
   959  000A26  C02F  F01C         	movff	_sendStructAddress+1,CRC8@data+1
   960  000A2A  C1CC  F01D         	movff	_ring_buffer+204,CRC8@len
   961  000A2E  EC4C  F00A         	call	_CRC8	;wreg free
   962  000A32  0100               	movlb	0	; () banked
   963  000A34  6F8B               	movwf	sendData@CS& (0+255),b
   964                           
   965                           ; BSR set to: 0
   966                           ;FastTransfer.c: 113: serial_write(0x06);
   967  000A36  D801               	call	u2588
   968  000A38  D00B               	goto	l2591
   969  000A3A                     u2588:
   970  000A3A  0005               	push	
   971  000A3C  6EFA               	movwf	pclath,c
   972  000A3E  5036               	movf	_serial_write,w,c
   973  000A40  6EFD               	movwf	tosl,c
   974  000A42  5037               	movf	_serial_write+1,w,c
   975  000A44  6EFE               	movwf	tosh,c
   976  000A46  50F8               	movf	tblptru,w,c
   977  000A48  6EFF               	movwf	tosu,c
   978  000A4A  50FA               	movf	pclath,w,c
   979  000A4C  0E06               	movlw	6
   980  000A4E  0012               	return		;indir
   981  000A50                     l2591:
   982                           
   983                           ;FastTransfer.c: 114: serial_write(0x85);
   984  000A50  D801               	call	u2598
   985  000A52  D00B               	goto	l2593
   986  000A54                     u2598:
   987  000A54  0005               	push	
   988  000A56  6EFA               	movwf	pclath,c
   989  000A58  5036               	movf	_serial_write,w,c
   990  000A5A  6EFD               	movwf	tosl,c
   991  000A5C  5037               	movf	_serial_write+1,w,c
   992  000A5E  6EFE               	movwf	tosh,c
   993  000A60  50F8               	movf	tblptru,w,c
   994  000A62  6EFF               	movwf	tosu,c
   995  000A64  50FA               	movf	pclath,w,c
   996  000A66  0E85               	movlw	133
   997  000A68  0012               	return		;indir
   998  000A6A                     l2593:
   999                           
  1000                           ;FastTransfer.c: 115: serial_write(whereToSend);
  1001  000A6A  D801               	call	u2608
  1002  000A6C  D00C               	goto	l2595
  1003  000A6E                     u2608:
  1004  000A6E  0005               	push	
  1005  000A70  6EFA               	movwf	pclath,c
  1006  000A72  5036               	movf	_serial_write,w,c
  1007  000A74  6EFD               	movwf	tosl,c
  1008  000A76  5037               	movf	_serial_write+1,w,c
  1009  000A78  6EFE               	movwf	tosh,c
  1010  000A7A  50F8               	movf	tblptru,w,c
  1011  000A7C  6EFF               	movwf	tosu,c
  1012  000A7E  50FA               	movf	pclath,w,c
  1013  000A80  0100               	movlb	0	; () banked
  1014  000A82  518A               	movf	sendData@whereToSend& (0+255),w,b
  1015  000A84  0012               	return		;indir
  1016  000A86                     l2595:
  1017                           
  1018                           ;FastTransfer.c: 116: serial_write(moduleAddress);
  1019  000A86  D801               	call	u2618
  1020  000A88  D00B               	goto	l2597
  1021  000A8A                     u2618:
  1022  000A8A  0005               	push	
  1023  000A8C  6EFA               	movwf	pclath,c
  1024  000A8E  5036               	movf	_serial_write,w,c
  1025  000A90  6EFD               	movwf	tosl,c
  1026  000A92  5037               	movf	_serial_write+1,w,c
  1027  000A94  6EFE               	movwf	tosh,c
  1028  000A96  50F8               	movf	tblptru,w,c
  1029  000A98  6EFF               	movwf	tosu,c
  1030  000A9A  50FA               	movf	pclath,w,c
  1031  000A9C  503F               	movf	_moduleAddress,w,c
  1032  000A9E  0012               	return		;indir
  1033  000AA0                     l2597:
  1034                           
  1035                           ;FastTransfer.c: 117: serial_write(ring_buffer.count);
  1036  000AA0  D801               	call	u2628
  1037  000AA2  D00C               	goto	l2599
  1038  000AA4                     u2628:
  1039  000AA4  0005               	push	
  1040  000AA6  6EFA               	movwf	pclath,c
  1041  000AA8  5036               	movf	_serial_write,w,c
  1042  000AAA  6EFD               	movwf	tosl,c
  1043  000AAC  5037               	movf	_serial_write+1,w,c
  1044  000AAE  6EFE               	movwf	tosh,c
  1045  000AB0  50F8               	movf	tblptru,w,c
  1046  000AB2  6EFF               	movwf	tosu,c
  1047  000AB4  50FA               	movf	pclath,w,c
  1048  000AB6  0101               	movlb	1	; () banked
  1049  000AB8  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1050  000ABA  0012               	return		;indir
  1051  000ABC                     l2599:
  1052                           
  1053                           ;FastTransfer.c: 121: int i;
  1054                           ;FastTransfer.c: 122: for (i = 0; i < ring_buffer.count; i++) {
  1055  000ABC  0E00               	movlw	0
  1056  000ABE  0100               	movlb	0	; () banked
  1057  000AC0  6F8D               	movwf	(sendData@i+1)& (0+255),b
  1058  000AC2  0E00               	movlw	0
  1059  000AC4  6F8C               	movwf	sendData@i& (0+255),b
  1060  000AC6  D018               	goto	l2605
  1061  000AC8                     l2601:
  1062                           
  1063                           ; BSR set to: 0
  1064                           ;FastTransfer.c: 123: serial_write(*(sendStructAddress + i));
  1065  000AC8  D801               	call	u2638
  1066  000ACA  D013               	goto	l2603
  1067  000ACC                     u2638:
  1068  000ACC  0005               	push	
  1069  000ACE  6EFA               	movwf	pclath,c
  1070  000AD0  5036               	movf	_serial_write,w,c
  1071  000AD2  6EFD               	movwf	tosl,c
  1072  000AD4  5037               	movf	_serial_write+1,w,c
  1073  000AD6  6EFE               	movwf	tosh,c
  1074  000AD8  50F8               	movf	tblptru,w,c
  1075  000ADA  6EFF               	movwf	tosu,c
  1076  000ADC  50FA               	movf	pclath,w,c
  1077  000ADE  0100               	movlb	0	; () banked
  1078  000AE0  518C               	movf	sendData@i& (0+255),w,b
  1079  000AE2  242E               	addwf	_sendStructAddress,w,c
  1080  000AE4  6ED9               	movwf	fsr2l,c
  1081  000AE6  0100               	movlb	0	; () banked
  1082  000AE8  518D               	movf	(sendData@i+1)& (0+255),w,b
  1083  000AEA  202F               	addwfc	_sendStructAddress+1,w,c
  1084  000AEC  6EDA               	movwf	fsr2h,c
  1085  000AEE  50DF               	movf	indf2,w,c
  1086  000AF0  0012               	return		;indir
  1087  000AF2                     l2603:
  1088  000AF2  0100               	movlb	0	; () banked
  1089  000AF4  4B8C               	infsnz	sendData@i& (0+255),f,b
  1090  000AF6  2B8D               	incf	(sendData@i+1)& (0+255),f,b
  1091  000AF8                     l2605:
  1092                           
  1093                           ; BSR set to: 0
  1094  000AF8  0101               	movlb	1	; () banked
  1095  000AFA  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1096  000AFC  0100               	movlb	0	; () banked
  1097  000AFE  5D8C               	subwf	sendData@i& (0+255),w,b
  1098  000B00  0100               	movlb	0	; () banked
  1099  000B02  518D               	movf	(sendData@i+1)& (0+255),w,b
  1100  000B04  0A80               	xorlw	128
  1101  000B06  0100               	movlb	0	; () banked
  1102  000B08  6F89               	movwf	??_sendData& (0+255),b
  1103  000B0A  0101               	movlb	1	; () banked
  1104  000B0C  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
  1105  000B0E  0A80               	xorlw	128
  1106  000B10  0100               	movlb	0	; () banked
  1107  000B12  5989               	subwfb	??_sendData& (0+255),w,b
  1108  000B14  A0D8               	btfss	status,0,c
  1109  000B16  D7D8               	goto	l2601
  1110                           
  1111                           ; BSR set to: 0
  1112                           ;FastTransfer.c: 124: }
  1113                           ;FastTransfer.c: 127: serial_write(CS);
  1114                           
  1115                           ; BSR set to: 0
  1116  000B18  D801               	call	u2658
  1117  000B1A  D00C               	goto	l2609
  1118  000B1C                     u2658:
  1119  000B1C  0005               	push	
  1120  000B1E  6EFA               	movwf	pclath,c
  1121  000B20  5036               	movf	_serial_write,w,c
  1122  000B22  6EFD               	movwf	tosl,c
  1123  000B24  5037               	movf	_serial_write+1,w,c
  1124  000B26  6EFE               	movwf	tosh,c
  1125  000B28  50F8               	movf	tblptru,w,c
  1126  000B2A  6EFF               	movwf	tosu,c
  1127  000B2C  50FA               	movf	pclath,w,c
  1128  000B2E  0100               	movlb	0	; () banked
  1129  000B30  518B               	movf	sendData@CS& (0+255),w,b
  1130  000B32  0012               	return		;indir
  1131  000B34                     l2609:
  1132                           
  1133                           ;FastTransfer.c: 130: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  1134  000B34  0E6A               	movlw	low _crc_buffer
  1135  000B36  6E1B               	movwf	crcBufS_put@_this,c
  1136  000B38  0E00               	movlw	high _crc_buffer
  1137  000B3A  6E1C               	movwf	crcBufS_put@_this+1,c
  1138  000B3C  C08A  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  1139  000B40  C08B  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  1140  000B44  0E00               	movlw	0
  1141  000B46  6E1F               	movwf	crcBufS_put@status,c
  1142  000B48  EC47  F007         	call	_crcBufS_put
  1143                           
  1144                           ;FastTransfer.c: 133: FastTransfer_buffer_flush(&ring_buffer, 1);
  1145  000B4C  0E00               	movlw	low _ring_buffer
  1146  000B4E  0100               	movlb	0	; () banked
  1147  000B50  6F85               	movwf	FastTransfer_buffer_flush@_this& (0+255),b
  1148  000B52  0E01               	movlw	high _ring_buffer
  1149  000B54  0100               	movlb	0	; () banked
  1150  000B56  6F86               	movwf	(FastTransfer_buffer_flush@_this+1)& (0+255),b
  1151  000B58  0E00               	movlw	0
  1152  000B5A  0100               	movlb	0	; () banked
  1153  000B5C  6F88               	movwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),b
  1154  000B5E  0E01               	movlw	1
  1155  000B60  6F87               	movwf	FastTransfer_buffer_flush@clearBuffer& (0+255),b
  1156  000B62  EC5E  F009         	call	_FastTransfer_buffer_flush	;wreg free
  1157  000B66  0012               	return		;funcret
  1158  000B68                     __end_of_sendData:
  1159                           	opt stack 0
  1160                           tosu	equ	0xFFF
  1161                           tosh	equ	0xFFE
  1162                           tosl	equ	0xFFD
  1163                           pclath	equ	0xFFA
  1164                           tblptru	equ	0xFF8
  1165                           tblptrh	equ	0xFF7
  1166                           tblptrl	equ	0xFF6
  1167                           tablat	equ	0xFF5
  1168                           postinc0	equ	0xFEE
  1169                           wreg	equ	0xFE8
  1170                           indf2	equ	0xFDF
  1171                           fsr2h	equ	0xFDA
  1172                           fsr2l	equ	0xFD9
  1173                           status	equ	0xFD8
  1174                           
  1175 ;; *************** function _crcBufS_put *****************
  1176 ;; Defined at:
  1177 ;;		line 377 in file "FastTransfer.c"
  1178 ;; Parameters:    Size  Location     Type
  1179 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  1180 ;;		 -> crc_buffer(17), 
  1181 ;;  address         1   28[COMRAM] unsigned char 
  1182 ;;  oldCRC          1   29[COMRAM] unsigned char 
  1183 ;;  status          1   30[COMRAM] unsigned char 
  1184 ;; Auto vars:     Size  Location     Type
  1185 ;;		None
  1186 ;; Return value:  Size  Location     Type
  1187 ;;                  1    wreg      void 
  1188 ;; Registers used:
  1189 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1190 ;; Tracked objects:
  1191 ;;		On entry : 0/0
  1192 ;;		On exit  : 0/0
  1193 ;;		Unchanged: 0/0
  1194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1195 ;;      Params:         5       0       0       0       0       0       0
  1196 ;;      Locals:         0       0       0       0       0       0       0
  1197 ;;      Temps:          2       0       0       0       0       0       0
  1198 ;;      Totals:         7       0       0       0       0       0       0
  1199 ;;Total ram usage:        7 bytes
  1200 ;; Hardware stack levels used:    1
  1201 ;; Hardware stack levels required when called:    4
  1202 ;; This function calls:
  1203 ;;		Nothing
  1204 ;; This function is called by:
  1205 ;;		_sendData
  1206 ;; This function uses a non-reentrant model
  1207 ;;
  1208                           
  1209                           	psect	text4
  1210  000E8E                     __ptext4:
  1211                           	opt stack 0
  1212  000E8E                     _crcBufS_put:
  1213                           	opt stack 23
  1214                           
  1215                           ;FastTransfer.c: 378: _this->buf[_this->head] = address;
  1216                           
  1217                           ;incstack = 0
  1218  000E8E  EE20 F00F          	lfsr	2,15
  1219  000E92  501B               	movf	crcBufS_put@_this,w,c
  1220  000E94  26D9               	addwf	fsr2l,f,c
  1221  000E96  501C               	movf	crcBufS_put@_this+1,w,c
  1222  000E98  22DA               	addwfc	fsr2h,f,c
  1223  000E9A  CFDE F020          	movff	postinc2,??_crcBufS_put
  1224  000E9E  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1225  000EA2  5020               	movf	??_crcBufS_put,w,c
  1226  000EA4  241B               	addwf	crcBufS_put@_this,w,c
  1227  000EA6  6ED9               	movwf	fsr2l,c
  1228  000EA8  5021               	movf	??_crcBufS_put+1,w,c
  1229  000EAA  201C               	addwfc	crcBufS_put@_this+1,w,c
  1230  000EAC  6EDA               	movwf	fsr2h,c
  1231  000EAE  C01D  FFDF         	movff	crcBufS_put@address,indf2
  1232                           
  1233                           ;FastTransfer.c: 379: _this->head++;
  1234  000EB2  EE20 F00F          	lfsr	2,15
  1235  000EB6  501B               	movf	crcBufS_put@_this,w,c
  1236  000EB8  26D9               	addwf	fsr2l,f,c
  1237  000EBA  501C               	movf	crcBufS_put@_this+1,w,c
  1238  000EBC  22DA               	addwfc	fsr2h,f,c
  1239  000EBE  2ADE               	incf	postinc2,f,c
  1240  000EC0  0E00               	movlw	0
  1241  000EC2  22DD               	addwfc	postdec2,f,c
  1242                           
  1243                           ;FastTransfer.c: 380: _this->buf[_this->head] = oldCRC;
  1244  000EC4  EE20 F00F          	lfsr	2,15
  1245  000EC8  501B               	movf	crcBufS_put@_this,w,c
  1246  000ECA  26D9               	addwf	fsr2l,f,c
  1247  000ECC  501C               	movf	crcBufS_put@_this+1,w,c
  1248  000ECE  22DA               	addwfc	fsr2h,f,c
  1249  000ED0  CFDE F020          	movff	postinc2,??_crcBufS_put
  1250  000ED4  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1251  000ED8  5020               	movf	??_crcBufS_put,w,c
  1252  000EDA  241B               	addwf	crcBufS_put@_this,w,c
  1253  000EDC  6ED9               	movwf	fsr2l,c
  1254  000EDE  5021               	movf	??_crcBufS_put+1,w,c
  1255  000EE0  201C               	addwfc	crcBufS_put@_this+1,w,c
  1256  000EE2  6EDA               	movwf	fsr2h,c
  1257  000EE4  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  1258                           
  1259                           ;FastTransfer.c: 381: _this->head++;
  1260  000EE8  EE20 F00F          	lfsr	2,15
  1261  000EEC  501B               	movf	crcBufS_put@_this,w,c
  1262  000EEE  26D9               	addwf	fsr2l,f,c
  1263  000EF0  501C               	movf	crcBufS_put@_this+1,w,c
  1264  000EF2  22DA               	addwfc	fsr2h,f,c
  1265  000EF4  2ADE               	incf	postinc2,f,c
  1266  000EF6  0E00               	movlw	0
  1267  000EF8  22DD               	addwfc	postdec2,f,c
  1268                           
  1269                           ;FastTransfer.c: 382: _this->buf[_this->head] = status;
  1270  000EFA  EE20 F00F          	lfsr	2,15
  1271  000EFE  501B               	movf	crcBufS_put@_this,w,c
  1272  000F00  26D9               	addwf	fsr2l,f,c
  1273  000F02  501C               	movf	crcBufS_put@_this+1,w,c
  1274  000F04  22DA               	addwfc	fsr2h,f,c
  1275  000F06  CFDE F020          	movff	postinc2,??_crcBufS_put
  1276  000F0A  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1277  000F0E  5020               	movf	??_crcBufS_put,w,c
  1278  000F10  241B               	addwf	crcBufS_put@_this,w,c
  1279  000F12  6ED9               	movwf	fsr2l,c
  1280  000F14  5021               	movf	??_crcBufS_put+1,w,c
  1281  000F16  201C               	addwfc	crcBufS_put@_this+1,w,c
  1282  000F18  6EDA               	movwf	fsr2h,c
  1283  000F1A  C01F  FFDF         	movff	crcBufS_put@status,indf2
  1284                           
  1285                           ;FastTransfer.c: 383: _this->head++;
  1286  000F1E  EE20 F00F          	lfsr	2,15
  1287  000F22  501B               	movf	crcBufS_put@_this,w,c
  1288  000F24  26D9               	addwf	fsr2l,f,c
  1289  000F26  501C               	movf	crcBufS_put@_this+1,w,c
  1290  000F28  22DA               	addwfc	fsr2h,f,c
  1291  000F2A  2ADE               	incf	postinc2,f,c
  1292  000F2C  0E00               	movlw	0
  1293  000F2E  22DD               	addwfc	postdec2,f,c
  1294                           
  1295                           ;FastTransfer.c: 384: if (_this->head >= (5 * 3)) {
  1296  000F30  EE20 F00F          	lfsr	2,15
  1297  000F34  501B               	movf	crcBufS_put@_this,w,c
  1298  000F36  26D9               	addwf	fsr2l,f,c
  1299  000F38  501C               	movf	crcBufS_put@_this+1,w,c
  1300  000F3A  22DA               	addwfc	fsr2h,f,c
  1301  000F3C  0E01               	movlw	1
  1302  000F3E  BEDB               	btfsc	plusw2,7,c
  1303  000F40  0012               	return	
  1304  000F42  0E01               	movlw	1
  1305  000F44  50DB               	movf	plusw2,w,c
  1306  000F46  E104               	bnz	u2490
  1307  000F48  0E0F               	movlw	15
  1308  000F4A  5CDE               	subwf	postinc2,w,c
  1309  000F4C  A0D8               	btfss	status,0,c
  1310  000F4E  0012               	return	
  1311  000F50                     u2490:
  1312                           
  1313                           ;FastTransfer.c: 385: _this->head = 0;
  1314  000F50  EE20 F00F          	lfsr	2,15
  1315  000F54  501B               	movf	crcBufS_put@_this,w,c
  1316  000F56  26D9               	addwf	fsr2l,f,c
  1317  000F58  501C               	movf	crcBufS_put@_this+1,w,c
  1318  000F5A  22DA               	addwfc	fsr2h,f,c
  1319  000F5C  0E00               	movlw	0
  1320  000F5E  6EDE               	movwf	postinc2,c
  1321  000F60  0E00               	movlw	0
  1322  000F62  6EDD               	movwf	postdec2,c
  1323  000F64  0012               	return	
  1324  000F66                     __end_of_crcBufS_put:
  1325                           	opt stack 0
  1326                           tosu	equ	0xFFF
  1327                           tosh	equ	0xFFE
  1328                           tosl	equ	0xFFD
  1329                           pclath	equ	0xFFA
  1330                           tblptru	equ	0xFF8
  1331                           tblptrh	equ	0xFF7
  1332                           tblptrl	equ	0xFF6
  1333                           tablat	equ	0xFF5
  1334                           postinc0	equ	0xFEE
  1335                           wreg	equ	0xFE8
  1336                           indf2	equ	0xFDF
  1337                           postinc2	equ	0xFDE
  1338                           postdec2	equ	0xFDD
  1339                           plusw2	equ	0xFDB
  1340                           fsr2h	equ	0xFDA
  1341                           fsr2l	equ	0xFD9
  1342                           status	equ	0xFD8
  1343                           
  1344 ;; *************** function _FastTransfer_buffer_flush *****************
  1345 ;; Defined at:
  1346 ;;		line 317 in file "FastTransfer.c"
  1347 ;; Parameters:    Size  Location     Type
  1348 ;;  _this           2    0[BANK0 ] PTR struct ringBufS
  1349 ;;		 -> ring_buffer(206), 
  1350 ;;  clearBuffer     2    2[BANK0 ] const int 
  1351 ;; Auto vars:     Size  Location     Type
  1352 ;;		None
  1353 ;; Return value:  Size  Location     Type
  1354 ;;                  1    wreg      void 
  1355 ;; Registers used:
  1356 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1357 ;; Tracked objects:
  1358 ;;		On entry : 0/0
  1359 ;;		On exit  : 0/0
  1360 ;;		Unchanged: 0/0
  1361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1362 ;;      Params:         0       4       0       0       0       0       0
  1363 ;;      Locals:         0       0       0       0       0       0       0
  1364 ;;      Temps:          0       0       0       0       0       0       0
  1365 ;;      Totals:         0       4       0       0       0       0       0
  1366 ;;Total ram usage:        4 bytes
  1367 ;; Hardware stack levels used:    1
  1368 ;; Hardware stack levels required when called:    5
  1369 ;; This function calls:
  1370 ;;		_memset
  1371 ;; This function is called by:
  1372 ;;		_sendData
  1373 ;; This function uses a non-reentrant model
  1374 ;;
  1375                           
  1376                           	psect	text5
  1377  0012BC                     __ptext5:
  1378                           	opt stack 0
  1379  0012BC                     _FastTransfer_buffer_flush:
  1380                           	opt stack 22
  1381                           
  1382                           ;FastTransfer.c: 318: _this->count = 0;
  1383                           
  1384                           ;incstack = 0
  1385  0012BC  0100               	movlb	0	; () banked
  1386  0012BE  EE20 F0CC          	lfsr	2,204
  1387  0012C2  5185               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1388  0012C4  26D9               	addwf	fsr2l,f,c
  1389  0012C6  5186               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1390  0012C8  22DA               	addwfc	fsr2h,f,c
  1391  0012CA  0E00               	movlw	0
  1392  0012CC  6EDE               	movwf	postinc2,c
  1393  0012CE  0E00               	movlw	0
  1394  0012D0  6EDD               	movwf	postdec2,c
  1395                           
  1396                           ;FastTransfer.c: 319: _this->head = 0;
  1397  0012D2  0100               	movlb	0	; () banked
  1398  0012D4  EE20 F0C8          	lfsr	2,200
  1399  0012D8  5185               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1400  0012DA  26D9               	addwf	fsr2l,f,c
  1401  0012DC  5186               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1402  0012DE  22DA               	addwfc	fsr2h,f,c
  1403  0012E0  0E00               	movlw	0
  1404  0012E2  6EDE               	movwf	postinc2,c
  1405  0012E4  0E00               	movlw	0
  1406  0012E6  6EDD               	movwf	postdec2,c
  1407                           
  1408                           ;FastTransfer.c: 320: _this->tail = 0;
  1409  0012E8  0100               	movlb	0	; () banked
  1410  0012EA  EE20 F0CA          	lfsr	2,202
  1411  0012EE  5185               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1412  0012F0  26D9               	addwf	fsr2l,f,c
  1413  0012F2  5186               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1414  0012F4  22DA               	addwfc	fsr2h,f,c
  1415  0012F6  0E00               	movlw	0
  1416  0012F8  6EDE               	movwf	postinc2,c
  1417  0012FA  0E00               	movlw	0
  1418  0012FC  6EDD               	movwf	postdec2,c
  1419                           
  1420                           ; BSR set to: 0
  1421                           ;FastTransfer.c: 321: if (clearBuffer) {
  1422  0012FE  0100               	movlb	0	; () banked
  1423  001300  5187               	movf	FastTransfer_buffer_flush@clearBuffer& (0+255),w,b
  1424  001302  0100               	movlb	0	; () banked
  1425  001304  1188               	iorwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),w,b
  1426  001306  B4D8               	btfsc	status,2,c
  1427  001308  0012               	return	
  1428                           
  1429                           ; BSR set to: 0
  1430                           ;FastTransfer.c: 322: memset(_this->buf, 0, sizeof (_this->buf));
  1431  00130A  C085  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  1432  00130E  C086  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  1433  001312  0E00               	movlw	0
  1434  001314  6E1E               	movwf	memset@c+1,c
  1435  001316  0E00               	movlw	0
  1436  001318  6E1D               	movwf	memset@c,c
  1437  00131A  0E00               	movlw	0
  1438  00131C  6E20               	movwf	memset@n+1,c
  1439  00131E  0EC8               	movlw	200
  1440  001320  6E1F               	movwf	memset@n,c
  1441  001322  EC14  F00B         	call	_memset	;wreg free
  1442  001326  0012               	return	
  1443  001328                     __end_of_FastTransfer_buffer_flush:
  1444                           	opt stack 0
  1445                           tosu	equ	0xFFF
  1446                           tosh	equ	0xFFE
  1447                           tosl	equ	0xFFD
  1448                           pclath	equ	0xFFA
  1449                           tblptru	equ	0xFF8
  1450                           tblptrh	equ	0xFF7
  1451                           tblptrl	equ	0xFF6
  1452                           tablat	equ	0xFF5
  1453                           postinc0	equ	0xFEE
  1454                           wreg	equ	0xFE8
  1455                           indf2	equ	0xFDF
  1456                           postinc2	equ	0xFDE
  1457                           postdec2	equ	0xFDD
  1458                           plusw2	equ	0xFDB
  1459                           fsr2h	equ	0xFDA
  1460                           fsr2l	equ	0xFD9
  1461                           status	equ	0xFD8
  1462                           
  1463 ;; *************** function _ToSend *****************
  1464 ;; Defined at:
  1465 ;;		line 272 in file "FastTransfer.c"
  1466 ;; Parameters:    Size  Location     Type
  1467 ;;  where           1    wreg     unsigned char 
  1468 ;;  what            2    2[BANK0 ] unsigned int 
  1469 ;; Auto vars:     Size  Location     Type
  1470 ;;  where           1    4[BANK0 ] unsigned char 
  1471 ;; Return value:  Size  Location     Type
  1472 ;;                  1    wreg      void 
  1473 ;; Registers used:
  1474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1475 ;; Tracked objects:
  1476 ;;		On entry : 0/0
  1477 ;;		On exit  : 0/0
  1478 ;;		Unchanged: 0/0
  1479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1480 ;;      Params:         0       2       0       0       0       0       0
  1481 ;;      Locals:         0       1       0       0       0       0       0
  1482 ;;      Temps:          0       0       0       0       0       0       0
  1483 ;;      Totals:         0       3       0       0       0       0       0
  1484 ;;Total ram usage:        3 bytes
  1485 ;; Hardware stack levels used:    1
  1486 ;; Hardware stack levels required when called:    6
  1487 ;; This function calls:
  1488 ;;		_FastTransfer_buffer_put
  1489 ;; This function is called by:
  1490 ;;		_respondECU
  1491 ;; This function uses a non-reentrant model
  1492 ;;
  1493                           
  1494                           	psect	text6
  1495  0016F6                     __ptext6:
  1496                           	opt stack 0
  1497  0016F6                     _ToSend:
  1498                           	opt stack 22
  1499                           
  1500                           ;incstack = 0
  1501                           ;ToSend@where stored from wreg
  1502  0016F6  0100               	movlb	0	; () banked
  1503  0016F8  6F89               	movwf	ToSend@where& (0+255),b
  1504                           
  1505                           ;FastTransfer.c: 273: FastTransfer_buffer_put(&ring_buffer, where, what);
  1506  0016FA  0E00               	movlw	low _ring_buffer
  1507  0016FC  6E21               	movwf	FastTransfer_buffer_put@_this,c
  1508  0016FE  0E01               	movlw	high _ring_buffer
  1509  001700  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  1510  001702  C089  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  1511  001706  C087  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  1512  00170A  C088  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  1513  00170E  ECA7  F003         	call	_FastTransfer_buffer_put	;wreg free
  1514  001712  0012               	return		;funcret
  1515  001714                     __end_of_ToSend:
  1516                           	opt stack 0
  1517                           tosu	equ	0xFFF
  1518                           tosh	equ	0xFFE
  1519                           tosl	equ	0xFFD
  1520                           pclath	equ	0xFFA
  1521                           tblptru	equ	0xFF8
  1522                           tblptrh	equ	0xFF7
  1523                           tblptrl	equ	0xFF6
  1524                           tablat	equ	0xFF5
  1525                           postinc0	equ	0xFEE
  1526                           wreg	equ	0xFE8
  1527                           indf2	equ	0xFDF
  1528                           postinc2	equ	0xFDE
  1529                           postdec2	equ	0xFDD
  1530                           plusw2	equ	0xFDB
  1531                           fsr2h	equ	0xFDA
  1532                           fsr2l	equ	0xFD9
  1533                           status	equ	0xFD8
  1534                           
  1535 ;; *************** function _FastTransfer_buffer_put *****************
  1536 ;; Defined at:
  1537 ;;		line 279 in file "FastTransfer.c"
  1538 ;; Parameters:    Size  Location     Type
  1539 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  1540 ;;		 -> ring_buffer(206), 
  1541 ;;  towhere         1   34[COMRAM] unsigned char 
  1542 ;;  towhat          2   35[COMRAM] unsigned int 
  1543 ;; Auto vars:     Size  Location     Type
  1544 ;;		None
  1545 ;; Return value:  Size  Location     Type
  1546 ;;                  1    wreg      void 
  1547 ;; Registers used:
  1548 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1549 ;; Tracked objects:
  1550 ;;		On entry : 0/0
  1551 ;;		On exit  : 0/0
  1552 ;;		Unchanged: 0/0
  1553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1554 ;;      Params:         5       0       0       0       0       0       0
  1555 ;;      Locals:         0       0       0       0       0       0       0
  1556 ;;      Temps:          0       2       0       0       0       0       0
  1557 ;;      Totals:         5       2       0       0       0       0       0
  1558 ;;Total ram usage:        7 bytes
  1559 ;; Hardware stack levels used:    1
  1560 ;; Hardware stack levels required when called:    5
  1561 ;; This function calls:
  1562 ;;		_FastTransfer_buffer_modulo_inc
  1563 ;; This function is called by:
  1564 ;;		_ToSend
  1565 ;; This function uses a non-reentrant model
  1566 ;;
  1567                           
  1568                           	psect	text7
  1569  00074E                     __ptext7:
  1570                           	opt stack 0
  1571  00074E                     _FastTransfer_buffer_put:
  1572                           	opt stack 22
  1573                           
  1574                           ;FastTransfer.c: 281: group.integer = towhat;
  1575                           
  1576                           ;incstack = 0
  1577  00074E  C024  F02A         	movff	FastTransfer_buffer_put@towhat,_group
  1578  000752  C025  F02B         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  1579                           
  1580                           ;FastTransfer.c: 283: if (_this->count < (200 - 3)) {
  1581  000756  EE20 F0CC          	lfsr	2,204
  1582  00075A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1583  00075C  26D9               	addwf	fsr2l,f,c
  1584  00075E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1585  000760  22DA               	addwfc	fsr2h,f,c
  1586  000762  0E01               	movlw	1
  1587  000764  BEDB               	btfsc	plusw2,7,c
  1588  000766  D007               	goto	l2487
  1589  000768  0E01               	movlw	1
  1590  00076A  50DB               	movf	plusw2,w,c
  1591  00076C  E103               	bnz	u2511
  1592  00076E  0EC5               	movlw	197
  1593  000770  5CDE               	subwf	postinc2,w,c
  1594  000772  B0D8               	btfsc	status,0,c
  1595  000774                     u2511:
  1596  000774  0012               	return	
  1597  000776                     l2487:
  1598                           
  1599                           ;FastTransfer.c: 284: _this->buf[_this->head] = towhere;
  1600  000776  EE20 F0C8          	lfsr	2,200
  1601  00077A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1602  00077C  26D9               	addwf	fsr2l,f,c
  1603  00077E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1604  000780  22DA               	addwfc	fsr2h,f,c
  1605  000782  CFDE F085          	movff	postinc2,??_FastTransfer_buffer_put
  1606  000786  CFDD F086          	movff	postdec2,??_FastTransfer_buffer_put+1
  1607  00078A  0100               	movlb	0	; () banked
  1608  00078C  5185               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1609  00078E  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1610  000790  6ED9               	movwf	fsr2l,c
  1611  000792  0100               	movlb	0	; () banked
  1612  000794  5186               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1613  000796  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1614  000798  6EDA               	movwf	fsr2h,c
  1615  00079A  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  1616                           
  1617                           ; BSR set to: 0
  1618                           ;FastTransfer.c: 285: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1619  00079E  EE20 F0C8          	lfsr	2,200
  1620  0007A2  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1621  0007A4  26D9               	addwf	fsr2l,f,c
  1622  0007A6  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1623  0007A8  22DA               	addwfc	fsr2h,f,c
  1624  0007AA  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1625  0007AE  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1626  0007B2  0E00               	movlw	0
  1627  0007B4  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1628  0007B6  0EC8               	movlw	200
  1629  0007B8  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1630  0007BA  EC2A  F00B         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1631  0007BE  EE20 F0C8          	lfsr	2,200
  1632  0007C2  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1633  0007C4  26D9               	addwf	fsr2l,f,c
  1634  0007C6  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1635  0007C8  22DA               	addwfc	fsr2h,f,c
  1636  0007CA  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1637  0007CE  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1638                           
  1639                           ;FastTransfer.c: 286: ++_this->count;
  1640  0007D2  EE20 F0CC          	lfsr	2,204
  1641  0007D6  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1642  0007D8  26D9               	addwf	fsr2l,f,c
  1643  0007DA  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1644  0007DC  22DA               	addwfc	fsr2h,f,c
  1645  0007DE  2ADE               	incf	postinc2,f,c
  1646  0007E0  0E00               	movlw	0
  1647  0007E2  22DD               	addwfc	postdec2,f,c
  1648                           
  1649                           ;FastTransfer.c: 287: _this->buf[_this->head] = group.parts[0];
  1650  0007E4  EE20 F0C8          	lfsr	2,200
  1651  0007E8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1652  0007EA  26D9               	addwf	fsr2l,f,c
  1653  0007EC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1654  0007EE  22DA               	addwfc	fsr2h,f,c
  1655  0007F0  CFDE F085          	movff	postinc2,??_FastTransfer_buffer_put
  1656  0007F4  CFDD F086          	movff	postdec2,??_FastTransfer_buffer_put+1
  1657  0007F8  0100               	movlb	0	; () banked
  1658  0007FA  5185               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1659  0007FC  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1660  0007FE  6ED9               	movwf	fsr2l,c
  1661  000800  0100               	movlb	0	; () banked
  1662  000802  5186               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1663  000804  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1664  000806  6EDA               	movwf	fsr2h,c
  1665  000808  C02A  FFDF         	movff	_group,indf2
  1666                           
  1667                           ; BSR set to: 0
  1668                           ;FastTransfer.c: 288: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1669  00080C  EE20 F0C8          	lfsr	2,200
  1670  000810  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1671  000812  26D9               	addwf	fsr2l,f,c
  1672  000814  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1673  000816  22DA               	addwfc	fsr2h,f,c
  1674  000818  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1675  00081C  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1676  000820  0E00               	movlw	0
  1677  000822  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1678  000824  0EC8               	movlw	200
  1679  000826  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1680  000828  EC2A  F00B         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1681  00082C  EE20 F0C8          	lfsr	2,200
  1682  000830  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1683  000832  26D9               	addwf	fsr2l,f,c
  1684  000834  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1685  000836  22DA               	addwfc	fsr2h,f,c
  1686  000838  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1687  00083C  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1688                           
  1689                           ;FastTransfer.c: 289: ++_this->count;
  1690  000840  EE20 F0CC          	lfsr	2,204
  1691  000844  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1692  000846  26D9               	addwf	fsr2l,f,c
  1693  000848  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1694  00084A  22DA               	addwfc	fsr2h,f,c
  1695  00084C  2ADE               	incf	postinc2,f,c
  1696  00084E  0E00               	movlw	0
  1697  000850  22DD               	addwfc	postdec2,f,c
  1698                           
  1699                           ;FastTransfer.c: 290: _this->buf[_this->head] = group.parts[1];
  1700  000852  EE20 F0C8          	lfsr	2,200
  1701  000856  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1702  000858  26D9               	addwf	fsr2l,f,c
  1703  00085A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1704  00085C  22DA               	addwfc	fsr2h,f,c
  1705  00085E  CFDE F085          	movff	postinc2,??_FastTransfer_buffer_put
  1706  000862  CFDD F086          	movff	postdec2,??_FastTransfer_buffer_put+1
  1707  000866  0100               	movlb	0	; () banked
  1708  000868  5185               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1709  00086A  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1710  00086C  6ED9               	movwf	fsr2l,c
  1711  00086E  0100               	movlb	0	; () banked
  1712  000870  5186               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1713  000872  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1714  000874  6EDA               	movwf	fsr2h,c
  1715  000876  C02B  FFDF         	movff	_group+1,indf2
  1716                           
  1717                           ; BSR set to: 0
  1718                           ;FastTransfer.c: 291: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1719  00087A  EE20 F0C8          	lfsr	2,200
  1720  00087E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1721  000880  26D9               	addwf	fsr2l,f,c
  1722  000882  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1723  000884  22DA               	addwfc	fsr2h,f,c
  1724  000886  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1725  00088A  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1726  00088E  0E00               	movlw	0
  1727  000890  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1728  000892  0EC8               	movlw	200
  1729  000894  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1730  000896  EC2A  F00B         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1731  00089A  EE20 F0C8          	lfsr	2,200
  1732  00089E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1733  0008A0  26D9               	addwf	fsr2l,f,c
  1734  0008A2  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1735  0008A4  22DA               	addwfc	fsr2h,f,c
  1736  0008A6  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1737  0008AA  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1738                           
  1739                           ;FastTransfer.c: 292: ++_this->count;
  1740  0008AE  EE20 F0CC          	lfsr	2,204
  1741  0008B2  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1742  0008B4  26D9               	addwf	fsr2l,f,c
  1743  0008B6  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1744  0008B8  22DA               	addwfc	fsr2h,f,c
  1745  0008BA  2ADE               	incf	postinc2,f,c
  1746  0008BC  0E00               	movlw	0
  1747  0008BE  22DD               	addwfc	postdec2,f,c
  1748  0008C0  0012               	return	
  1749  0008C2                     __end_of_FastTransfer_buffer_put:
  1750                           	opt stack 0
  1751                           tosu	equ	0xFFF
  1752                           tosh	equ	0xFFE
  1753                           tosl	equ	0xFFD
  1754                           pclath	equ	0xFFA
  1755                           tblptru	equ	0xFF8
  1756                           tblptrh	equ	0xFF7
  1757                           tblptrl	equ	0xFF6
  1758                           tablat	equ	0xFF5
  1759                           postinc0	equ	0xFEE
  1760                           wreg	equ	0xFE8
  1761                           indf2	equ	0xFDF
  1762                           postinc2	equ	0xFDE
  1763                           postdec2	equ	0xFDD
  1764                           plusw2	equ	0xFDB
  1765                           fsr2h	equ	0xFDA
  1766                           fsr2l	equ	0xFD9
  1767                           status	equ	0xFD8
  1768                           
  1769 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  1770 ;; Defined at:
  1771 ;;		line 329 in file "FastTransfer.c"
  1772 ;; Parameters:    Size  Location     Type
  1773 ;;  value           2   26[COMRAM] const unsigned int 
  1774 ;;  modulus         2   28[COMRAM] const unsigned int 
  1775 ;; Auto vars:     Size  Location     Type
  1776 ;;  my_value        2   30[COMRAM] unsigned int 
  1777 ;; Return value:  Size  Location     Type
  1778 ;;                  2   26[COMRAM] unsigned int 
  1779 ;; Registers used:
  1780 ;;		wreg, status,2, status,0
  1781 ;; Tracked objects:
  1782 ;;		On entry : 0/0
  1783 ;;		On exit  : 0/0
  1784 ;;		Unchanged: 0/0
  1785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1786 ;;      Params:         4       0       0       0       0       0       0
  1787 ;;      Locals:         2       0       0       0       0       0       0
  1788 ;;      Temps:          0       0       0       0       0       0       0
  1789 ;;      Totals:         6       0       0       0       0       0       0
  1790 ;;Total ram usage:        6 bytes
  1791 ;; Hardware stack levels used:    1
  1792 ;; Hardware stack levels required when called:    4
  1793 ;; This function calls:
  1794 ;;		Nothing
  1795 ;; This function is called by:
  1796 ;;		_FastTransfer_buffer_put
  1797 ;;		_FastTransfer_buffer_get
  1798 ;; This function uses a non-reentrant model
  1799 ;;
  1800                           
  1801                           	psect	text8
  1802  001654                     __ptext8:
  1803                           	opt stack 0
  1804  001654                     _FastTransfer_buffer_modulo_inc:
  1805                           	opt stack 22
  1806                           
  1807                           ;FastTransfer.c: 330: unsigned int my_value = value + 1;
  1808                           
  1809                           ;incstack = 0
  1810  001654  0E01               	movlw	1
  1811  001656  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  1812  001658  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  1813  00165A  0E00               	movlw	0
  1814  00165C  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  1815  00165E  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  1816                           
  1817                           ;FastTransfer.c: 331: if (my_value >= modulus) {
  1818  001660  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  1819  001662  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  1820  001664  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  1821  001666  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  1822  001668  A0D8               	btfss	status,0,c
  1823  00166A  D004               	goto	l2407
  1824                           
  1825                           ;FastTransfer.c: 332: my_value = 0;
  1826  00166C  0E00               	movlw	0
  1827  00166E  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  1828  001670  0E00               	movlw	0
  1829  001672  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  1830  001674                     l2407:
  1831                           
  1832                           ;FastTransfer.c: 333: }
  1833                           ;FastTransfer.c: 334: return (my_value);
  1834  001674  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  1835  001678  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  1836  00167C  0012               	return	
  1837  00167E                     __end_of_FastTransfer_buffer_modulo_inc:
  1838                           	opt stack 0
  1839                           tosu	equ	0xFFF
  1840                           tosh	equ	0xFFE
  1841                           tosl	equ	0xFFD
  1842                           pclath	equ	0xFFA
  1843                           tblptru	equ	0xFF8
  1844                           tblptrh	equ	0xFF7
  1845                           tblptrl	equ	0xFF6
  1846                           tablat	equ	0xFF5
  1847                           postinc0	equ	0xFEE
  1848                           wreg	equ	0xFE8
  1849                           indf2	equ	0xFDF
  1850                           postinc2	equ	0xFDE
  1851                           postdec2	equ	0xFDD
  1852                           plusw2	equ	0xFDB
  1853                           fsr2h	equ	0xFDA
  1854                           fsr2l	equ	0xFD9
  1855                           status	equ	0xFD8
  1856                           
  1857 ;; *************** function _GetFaults *****************
  1858 ;; Defined at:
  1859 ;;		line 23 in file "Function.c"
  1860 ;; Parameters:    Size  Location     Type
  1861 ;;  num             1    wreg     unsigned char 
  1862 ;; Auto vars:     Size  Location     Type
  1863 ;;  num             1   26[COMRAM] unsigned char 
  1864 ;; Return value:  Size  Location     Type
  1865 ;;                  1    wreg      unsigned char 
  1866 ;; Registers used:
  1867 ;;		wreg, status,2, status,0
  1868 ;; Tracked objects:
  1869 ;;		On entry : 0/0
  1870 ;;		On exit  : 0/0
  1871 ;;		Unchanged: 0/0
  1872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1873 ;;      Params:         0       0       0       0       0       0       0
  1874 ;;      Locals:         1       0       0       0       0       0       0
  1875 ;;      Temps:          0       0       0       0       0       0       0
  1876 ;;      Totals:         1       0       0       0       0       0       0
  1877 ;;Total ram usage:        1 bytes
  1878 ;; Hardware stack levels used:    1
  1879 ;; Hardware stack levels required when called:    4
  1880 ;; This function calls:
  1881 ;;		Nothing
  1882 ;; This function is called by:
  1883 ;;		_respondECU
  1884 ;; This function uses a non-reentrant model
  1885 ;;
  1886                           
  1887                           	psect	text9
  1888  001788                     __ptext9:
  1889                           	opt stack 0
  1890  001788                     _GetFaults:
  1891                           	opt stack 24
  1892                           
  1893                           ;incstack = 0
  1894                           ;GetFaults@num stored from wreg
  1895  001788  6E1B               	movwf	GetFaults@num,c
  1896                           
  1897                           ;Function.c: 24: if(num == 1){
  1898  00178A  041B               	decf	GetFaults@num,w,c
  1899  00178C  A4D8               	btfss	status,2,c
  1900  00178E  D002               	goto	l1327
  1901                           
  1902                           ;Function.c: 25: return ByteHigh;
  1903  001790  503B               	movf	_ByteHigh,w,c
  1904  001792  0012               	return	
  1905  001794                     l1327:
  1906                           
  1907                           ;Function.c: 26: }
  1908                           ;Function.c: 27: if(num == 0){
  1909  001794  501B               	movf	GetFaults@num,w,c
  1910  001796  A4D8               	btfss	status,2,c
  1911  001798  0012               	return	
  1912                           
  1913                           ;Function.c: 28: return ByteLow;
  1914  00179A  503C               	movf	_ByteLow,w,c
  1915  00179C  0012               	return	
  1916  00179E                     __end_of_GetFaults:
  1917                           	opt stack 0
  1918                           tosu	equ	0xFFF
  1919                           tosh	equ	0xFFE
  1920                           tosl	equ	0xFFD
  1921                           pclath	equ	0xFFA
  1922                           tblptru	equ	0xFF8
  1923                           tblptrh	equ	0xFF7
  1924                           tblptrl	equ	0xFF6
  1925                           tablat	equ	0xFF5
  1926                           postinc0	equ	0xFEE
  1927                           wreg	equ	0xFE8
  1928                           indf2	equ	0xFDF
  1929                           postinc2	equ	0xFDE
  1930                           postdec2	equ	0xFDD
  1931                           plusw2	equ	0xFDB
  1932                           fsr2h	equ	0xFDA
  1933                           fsr2l	equ	0xFD9
  1934                           status	equ	0xFD8
  1935                           
  1936 ;; *************** function _Delay *****************
  1937 ;; Defined at:
  1938 ;;		line 177 in file "Function.c"
  1939 ;; Parameters:    Size  Location     Type
  1940 ;;  wait            2   26[COMRAM] int 
  1941 ;; Auto vars:     Size  Location     Type
  1942 ;;  x               2   29[COMRAM] int 
  1943 ;; Return value:  Size  Location     Type
  1944 ;;                  1    wreg      void 
  1945 ;; Registers used:
  1946 ;;		wreg, status,2, status,0
  1947 ;; Tracked objects:
  1948 ;;		On entry : 0/0
  1949 ;;		On exit  : 0/0
  1950 ;;		Unchanged: 0/0
  1951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1952 ;;      Params:         2       0       0       0       0       0       0
  1953 ;;      Locals:         2       0       0       0       0       0       0
  1954 ;;      Temps:          1       0       0       0       0       0       0
  1955 ;;      Totals:         5       0       0       0       0       0       0
  1956 ;;Total ram usage:        5 bytes
  1957 ;; Hardware stack levels used:    1
  1958 ;; Hardware stack levels required when called:    4
  1959 ;; This function calls:
  1960 ;;		Nothing
  1961 ;; This function is called by:
  1962 ;;		_respondECU
  1963 ;; This function uses a non-reentrant model
  1964 ;;
  1965                           
  1966                           	psect	text10
  1967  001564                     __ptext10:
  1968                           	opt stack 0
  1969  001564                     _Delay:
  1970                           	opt stack 24
  1971                           
  1972                           ;Function.c: 178: int x;
  1973                           ;Function.c: 179: for (x = 0; x < wait; x++) {
  1974                           
  1975                           ;incstack = 0
  1976  001564  0E00               	movlw	0
  1977  001566  6E1F               	movwf	Delay@x+1,c
  1978  001568  0E00               	movlw	0
  1979  00156A  6E1E               	movwf	Delay@x,c
  1980  00156C  D00A               	goto	l466
  1981  00156E                     l2003:
  1982                           
  1983                           ;Function.c: 180: _delay((unsigned long)((1)*(16000000/4000.0)));
  1984  00156E  0E06               	movlw	6
  1985  001570  6E1D               	movwf	??_Delay& (0+255),c
  1986  001572  0E30               	movlw	48
  1987  001574                     u3357:
  1988  001574  2EE8               	decfsz	wreg,f,c
  1989  001576  D7FE               	goto	u3357
  1990  001578  2E1D               	decfsz	??_Delay& (0+255),f,c
  1991  00157A  D7FC               	goto	u3357
  1992  00157C  D000               	nop2	
  1993  00157E  4A1E               	infsnz	Delay@x,f,c
  1994  001580  2A1F               	incf	Delay@x+1,f,c
  1995  001582                     l466:
  1996  001582  501B               	movf	Delay@wait,w,c
  1997  001584  5C1E               	subwf	Delay@x,w,c
  1998  001586  501F               	movf	Delay@x+1,w,c
  1999  001588  0A80               	xorlw	128
  2000  00158A  6E1D               	movwf	??_Delay& (0+255),c
  2001  00158C  501C               	movf	Delay@wait+1,w,c
  2002  00158E  0A80               	xorlw	128
  2003  001590  581D               	subwfb	??_Delay& (0+255),w,c
  2004  001592  B0D8               	btfsc	status,0,c
  2005  001594  0012               	return	
  2006  001596  D7EB               	goto	l2003
  2007  001598                     __end_of_Delay:
  2008                           	opt stack 0
  2009                           tosu	equ	0xFFF
  2010                           tosh	equ	0xFFE
  2011                           tosl	equ	0xFFD
  2012                           pclath	equ	0xFFA
  2013                           tblptru	equ	0xFF8
  2014                           tblptrh	equ	0xFF7
  2015                           tblptrl	equ	0xFF6
  2016                           tablat	equ	0xFF5
  2017                           postinc0	equ	0xFEE
  2018                           wreg	equ	0xFE8
  2019                           indf2	equ	0xFDF
  2020                           postinc2	equ	0xFDE
  2021                           postdec2	equ	0xFDD
  2022                           plusw2	equ	0xFDB
  2023                           fsr2h	equ	0xFDA
  2024                           fsr2l	equ	0xFD9
  2025                           status	equ	0xFD8
  2026                           
  2027 ;; *************** function _receiveData *****************
  2028 ;; Defined at:
  2029 ;;		line 137 in file "FastTransfer.c"
  2030 ;; Parameters:    Size  Location     Type
  2031 ;;		None
  2032 ;; Auto vars:     Size  Location     Type
  2033 ;;  holder          3   18[BANK0 ] unsigned char [3]
  2034 ;;  crcHolder       1   22[BANK0 ] unsigned char 
  2035 ;;  holder          3   15[BANK0 ] unsigned char [3]
  2036 ;;  crcHolder       1   21[BANK0 ] unsigned char 
  2037 ;;  u               2   23[BANK0 ] int 
  2038 ;;  r               2   25[BANK0 ] int 
  2039 ;; Return value:  Size  Location     Type
  2040 ;;                  1    wreg      unsigned char 
  2041 ;; Registers used:
  2042 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2043 ;; Tracked objects:
  2044 ;;		On entry : 0/0
  2045 ;;		On exit  : 0/0
  2046 ;;		Unchanged: 0/0
  2047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2048 ;;      Params:         0       0       0       0       0       0       0
  2049 ;;      Locals:         0      12       0       0       0       0       0
  2050 ;;      Temps:          0       6       0       0       0       0       0
  2051 ;;      Totals:         0      18       0       0       0       0       0
  2052 ;;Total ram usage:       18 bytes
  2053 ;; Hardware stack levels used:    1
  2054 ;; Hardware stack levels required when called:    8
  2055 ;; This function calls:
  2056 ;;		Absolute function
  2057 ;;		_CRC8
  2058 ;;		_CRCcheck
  2059 ;;		_Receive_available
  2060 ;;		_Receive_get
  2061 ;;		_Receive_peek
  2062 ;;		_Send_put
  2063 ;; This function is called by:
  2064 ;;		_updateComms
  2065 ;; This function uses a non-reentrant model
  2066 ;;
  2067                           
  2068                           	psect	text11
  2069  0000A4                     __ptext11:
  2070                           	opt stack 0
  2071  0000A4                     _receiveData:
  2072                           	opt stack 21
  2073                           
  2074                           ;FastTransfer.c: 140: if (rx_len == 0) {
  2075                           
  2076                           ;incstack = 0
  2077  0000A4  5043               	movf	_rx_len,w,c
  2078  0000A6  A4D8               	btfss	status,2,c
  2079  0000A8  D0AB               	goto	l2695
  2080                           
  2081                           ;FastTransfer.c: 142: if (serial_available() > 4) {
  2082  0000AA  D801               	call	u2808
  2083  0000AC  D00A               	goto	u2809
  2084  0000AE                     u2808:
  2085  0000AE  0005               	push	
  2086  0000B0  6EFA               	movwf	pclath,c
  2087  0000B2  5030               	movf	_serial_available,w,c
  2088  0000B4  6EFD               	movwf	tosl,c
  2089  0000B6  5031               	movf	_serial_available+1,w,c
  2090  0000B8  6EFE               	movwf	tosh,c
  2091  0000BA  50F8               	movf	tblptru,w,c
  2092  0000BC  6EFF               	movwf	tosu,c
  2093  0000BE  50FA               	movf	pclath,w,c
  2094  0000C0  0012               	return		;indir
  2095  0000C2                     u2809:
  2096  0000C2  BE1E               	btfsc	?_Receive_available+1,7,c
  2097  0000C4  D09D               	goto	l2695
  2098  0000C6  501E               	movf	?_Receive_available+1,w,c
  2099  0000C8  E11D               	bnz	l2671
  2100  0000CA  0E05               	movlw	5
  2101  0000CC  5C1D               	subwf	?_Receive_available,w,c
  2102  0000CE  B0D8               	btfsc	status,0,c
  2103  0000D0  D019               	goto	l2671
  2104  0000D2  D096               	goto	l2695
  2105  0000D4                     l2663:
  2106                           
  2107                           ;FastTransfer.c: 148: alignErrorCounter++;
  2108  0000D4  4A26               	infsnz	_alignErrorCounter,f,c
  2109  0000D6  2A27               	incf	_alignErrorCounter+1,f,c
  2110                           
  2111                           ;FastTransfer.c: 149: if (serial_available() < 5)
  2112  0000D8  D801               	call	u2828
  2113  0000DA  D00A               	goto	u2829
  2114  0000DC                     u2828:
  2115  0000DC  0005               	push	
  2116  0000DE  6EFA               	movwf	pclath,c
  2117  0000E0  5030               	movf	_serial_available,w,c
  2118  0000E2  6EFD               	movwf	tosl,c
  2119  0000E4  5031               	movf	_serial_available+1,w,c
  2120  0000E6  6EFE               	movwf	tosh,c
  2121  0000E8  50F8               	movf	tblptru,w,c
  2122  0000EA  6EFF               	movwf	tosu,c
  2123  0000EC  50FA               	movf	pclath,w,c
  2124  0000EE  0012               	return		;indir
  2125  0000F0                     u2829:
  2126  0000F0  BE1E               	btfsc	?_Receive_available+1,7,c
  2127  0000F2  D006               	goto	l2667
  2128  0000F4  501E               	movf	?_Receive_available+1,w,c
  2129  0000F6  E106               	bnz	l2671
  2130  0000F8  0E05               	movlw	5
  2131  0000FA  5C1D               	subwf	?_Receive_available,w,c
  2132  0000FC  B0D8               	btfsc	status,0,c
  2133  0000FE  D002               	goto	l2671
  2134  000100                     l2667:
  2135                           
  2136                           ;FastTransfer.c: 150: return 0;
  2137  000100  0E00               	movlw	0
  2138  000102  0012               	return	
  2139  000104                     l2671:
  2140  000104  D801               	call	u2848
  2141  000106  D00A               	goto	u2849
  2142  000108                     u2848:
  2143  000108  0005               	push	
  2144  00010A  6EFA               	movwf	pclath,c
  2145  00010C  5034               	movf	_serial_read,w,c
  2146  00010E  6EFD               	movwf	tosl,c
  2147  000110  5035               	movf	_serial_read+1,w,c
  2148  000112  6EFE               	movwf	tosh,c
  2149  000114  50F8               	movf	tblptru,w,c
  2150  000116  6EFF               	movwf	tosu,c
  2151  000118  50FA               	movf	pclath,w,c
  2152  00011A  0012               	return		;indir
  2153  00011C                     u2849:
  2154  00011C  0A06               	xorlw	6
  2155  00011E  A4D8               	btfss	status,2,c
  2156  000120  D7D9               	goto	l2663
  2157                           
  2158                           ;FastTransfer.c: 151: }
  2159                           ;FastTransfer.c: 152: if (serial_read() == 0x85) {
  2160  000122  D801               	call	u2868
  2161  000124  D00A               	goto	u2869
  2162  000126                     u2868:
  2163  000126  0005               	push	
  2164  000128  6EFA               	movwf	pclath,c
  2165  00012A  5034               	movf	_serial_read,w,c
  2166  00012C  6EFD               	movwf	tosl,c
  2167  00012E  5035               	movf	_serial_read+1,w,c
  2168  000130  6EFE               	movwf	tosh,c
  2169  000132  50F8               	movf	tblptru,w,c
  2170  000134  6EFF               	movwf	tosu,c
  2171  000136  50FA               	movf	pclath,w,c
  2172  000138  0012               	return		;indir
  2173  00013A                     u2869:
  2174  00013A  0A85               	xorlw	133
  2175  00013C  A4D8               	btfss	status,2,c
  2176  00013E  D060               	goto	l2695
  2177                           
  2178                           ;FastTransfer.c: 154: rx_address = serial_read();
  2179  000140  D801               	call	u2888
  2180  000142  D00A               	goto	u2889
  2181  000144                     u2888:
  2182  000144  0005               	push	
  2183  000146  6EFA               	movwf	pclath,c
  2184  000148  5034               	movf	_serial_read,w,c
  2185  00014A  6EFD               	movwf	tosl,c
  2186  00014C  5035               	movf	_serial_read+1,w,c
  2187  00014E  6EFE               	movwf	tosh,c
  2188  000150  50F8               	movf	tblptru,w,c
  2189  000152  6EFF               	movwf	tosu,c
  2190  000154  50FA               	movf	pclath,w,c
  2191  000156  0012               	return		;indir
  2192  000158                     u2889:
  2193  000158  6E41               	movwf	_rx_address,c
  2194                           
  2195                           ;FastTransfer.c: 155: returnAddress = serial_read();
  2196  00015A  D801               	call	u2898
  2197  00015C  D00A               	goto	u2899
  2198  00015E                     u2898:
  2199  00015E  0005               	push	
  2200  000160  6EFA               	movwf	pclath,c
  2201  000162  5034               	movf	_serial_read,w,c
  2202  000164  6EFD               	movwf	tosl,c
  2203  000166  5035               	movf	_serial_read+1,w,c
  2204  000168  6EFE               	movwf	tosh,c
  2205  00016A  50F8               	movf	tblptru,w,c
  2206  00016C  6EFF               	movwf	tosu,c
  2207  00016E  50FA               	movf	pclath,w,c
  2208  000170  0012               	return		;indir
  2209  000172                     u2899:
  2210  000172  6E40               	movwf	_returnAddress,c
  2211                           
  2212                           ;FastTransfer.c: 156: rx_len = serial_read();
  2213  000174  D801               	call	u2908
  2214  000176  D00A               	goto	u2909
  2215  000178                     u2908:
  2216  000178  0005               	push	
  2217  00017A  6EFA               	movwf	pclath,c
  2218  00017C  5034               	movf	_serial_read,w,c
  2219  00017E  6EFD               	movwf	tosl,c
  2220  000180  5035               	movf	_serial_read+1,w,c
  2221  000182  6EFE               	movwf	tosh,c
  2222  000184  50F8               	movf	tblptru,w,c
  2223  000186  6EFF               	movwf	tosu,c
  2224  000188  50FA               	movf	pclath,w,c
  2225  00018A  0012               	return		;indir
  2226  00018C                     u2909:
  2227  00018C  6E43               	movwf	_rx_len,c
  2228                           
  2229                           ;FastTransfer.c: 158: if (rx_address != moduleAddress) {
  2230  00018E  503F               	movf	_moduleAddress,w,c
  2231  000190  1841               	xorwf	_rx_address,w,c
  2232  000192  B4D8               	btfsc	status,2,c
  2233  000194  D035               	goto	l2695
  2234                           
  2235                           ;FastTransfer.c: 159: addressErrorCounter++;
  2236  000196  0100               	movlb	0	; () banked
  2237  000198  4B66               	infsnz	_addressErrorCounter& (0+255),f,b
  2238  00019A  2B67               	incf	(_addressErrorCounter+1)& (0+255),f,b
  2239                           
  2240                           ; BSR set to: 0
  2241                           ;FastTransfer.c: 162: int u;
  2242                           ;FastTransfer.c: 163: for (u = 0; u <= (rx_len + 1); u++) {
  2243  00019C  0E00               	movlw	0
  2244  00019E  0100               	movlb	0	; () banked
  2245  0001A0  6F9D               	movwf	(receiveData@u+1)& (0+255),b
  2246  0001A2  0E00               	movlw	0
  2247  0001A4  6F9C               	movwf	receiveData@u& (0+255),b
  2248  0001A6  D00F               	goto	l2687
  2249  0001A8                     l2683:
  2250                           
  2251                           ; BSR set to: 0
  2252                           ;FastTransfer.c: 164: serial_read();
  2253  0001A8  D801               	call	u2928
  2254  0001AA  D00A               	goto	l2685
  2255  0001AC                     u2928:
  2256  0001AC  0005               	push	
  2257  0001AE  6EFA               	movwf	pclath,c
  2258  0001B0  5034               	movf	_serial_read,w,c
  2259  0001B2  6EFD               	movwf	tosl,c
  2260  0001B4  5035               	movf	_serial_read+1,w,c
  2261  0001B6  6EFE               	movwf	tosh,c
  2262  0001B8  50F8               	movf	tblptru,w,c
  2263  0001BA  6EFF               	movwf	tosu,c
  2264  0001BC  50FA               	movf	pclath,w,c
  2265  0001BE  0012               	return		;indir
  2266  0001C0                     l2685:
  2267  0001C0  0100               	movlb	0	; () banked
  2268  0001C2  4B9C               	infsnz	receiveData@u& (0+255),f,b
  2269  0001C4  2B9D               	incf	(receiveData@u+1)& (0+255),f,b
  2270  0001C6                     l2687:
  2271                           
  2272                           ; BSR set to: 0
  2273  0001C6  5043               	movf	_rx_len,w,c
  2274  0001C8  0100               	movlb	0	; () banked
  2275  0001CA  6F8E               	movwf	??_receiveData& (0+255),b
  2276  0001CC  6B8F               	clrf	(??_receiveData+1)& (0+255),b
  2277  0001CE  0E01               	movlw	1
  2278  0001D0  0100               	movlb	0	; () banked
  2279  0001D2  278E               	addwf	??_receiveData& (0+255),f,b
  2280  0001D4  0E00               	movlw	0
  2281  0001D6  238F               	addwfc	(??_receiveData+1)& (0+255),f,b
  2282  0001D8  0100               	movlb	0	; () banked
  2283  0001DA  519C               	movf	receiveData@u& (0+255),w,b
  2284  0001DC  0100               	movlb	0	; () banked
  2285  0001DE  5D8E               	subwf	??_receiveData& (0+255),w,b
  2286  0001E0  0100               	movlb	0	; () banked
  2287  0001E2  518F               	movf	(??_receiveData+1)& (0+255),w,b
  2288  0001E4  0A80               	xorlw	128
  2289  0001E6  0100               	movlb	0	; () banked
  2290  0001E8  6F90               	movwf	(??_receiveData+2)& (0+255),b
  2291  0001EA  0100               	movlb	0	; () banked
  2292  0001EC  519D               	movf	(receiveData@u+1)& (0+255),w,b
  2293  0001EE  0A80               	xorlw	128
  2294  0001F0  0100               	movlb	0	; () banked
  2295  0001F2  5990               	subwfb	(??_receiveData+2)& (0+255),w,b
  2296  0001F4  B0D8               	btfsc	status,0,c
  2297  0001F6  D7D8               	goto	l2683
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;FastTransfer.c: 165: }
  2301                           ;FastTransfer.c: 166: rx_len = 0;
  2302                           
  2303                           ; BSR set to: 0
  2304  0001F8  0E00               	movlw	0
  2305  0001FA  6E43               	movwf	_rx_len,c
  2306                           
  2307                           ; BSR set to: 0
  2308                           ;FastTransfer.c: 167: return 0;
  2309  0001FC  0E00               	movlw	0
  2310                           
  2311                           ; BSR set to: 0
  2312  0001FE  0012               	return	
  2313  000200                     l2695:
  2314                           
  2315                           ;FastTransfer.c: 168: }
  2316                           ;FastTransfer.c: 170: }
  2317                           ;FastTransfer.c: 171: }
  2318                           ;FastTransfer.c: 172: }
  2319                           ;FastTransfer.c: 175: if (rx_len != 0) {
  2320  000200  5043               	movf	_rx_len,w,c
  2321  000202  B4D8               	btfsc	status,2,c
  2322  000204  D2A2               	goto	l2819
  2323                           
  2324                           ;FastTransfer.c: 178: if (rx_array_inx == 0) {
  2325  000206  5042               	movf	_rx_array_inx,w,c
  2326  000208  A4D8               	btfss	status,2,c
  2327  00020A  D043               	goto	l2719
  2328  00020C                     l2701:
  2329  00020C  D801               	call	u2968
  2330  00020E  D00A               	goto	u2969
  2331  000210                     u2968:
  2332  000210  0005               	push	
  2333  000212  6EFA               	movwf	pclath,c
  2334  000214  5030               	movf	_serial_available,w,c
  2335  000216  6EFD               	movwf	tosl,c
  2336  000218  5031               	movf	_serial_available+1,w,c
  2337  00021A  6EFE               	movwf	tosh,c
  2338  00021C  50F8               	movf	tblptru,w,c
  2339  00021E  6EFF               	movwf	tosu,c
  2340  000220  50FA               	movf	pclath,w,c
  2341  000222  0012               	return		;indir
  2342  000224                     u2969:
  2343  000224  BE1E               	btfsc	?_Receive_available+1,7,c
  2344  000226  D7F2               	goto	l2701
  2345  000228  501E               	movf	?_Receive_available+1,w,c
  2346  00022A  E103               	bnz	l2703
  2347  00022C  041D               	decf	?_Receive_available,w,c
  2348  00022E  A0D8               	btfss	status,0,c
  2349  000230  D7ED               	goto	l2701
  2350  000232                     l2703:
  2351                           
  2352                           ;FastTransfer.c: 180: if (255 == serial_peek()) {
  2353  000232  D801               	call	u2988
  2354  000234  D00A               	goto	u2989
  2355  000236                     u2988:
  2356  000236  0005               	push	
  2357  000238  6EFA               	movwf	pclath,c
  2358  00023A  5032               	movf	_serial_peek,w,c
  2359  00023C  6EFD               	movwf	tosl,c
  2360  00023E  5033               	movf	_serial_peek+1,w,c
  2361  000240  6EFE               	movwf	tosh,c
  2362  000242  50F8               	movf	tblptru,w,c
  2363  000244  6EFF               	movwf	tosu,c
  2364  000246  50FA               	movf	pclath,w,c
  2365  000248  0012               	return		;indir
  2366  00024A                     u2989:
  2367  00024A  0AFF               	xorlw	255
  2368  00024C  A4D8               	btfss	status,2,c
  2369  00024E  D021               	goto	l2719
  2370                           
  2371                           ;FastTransfer.c: 181: CRCcheck();
  2372  000250  EC61  F004         	call	_CRCcheck	;wreg free
  2373                           
  2374                           ;FastTransfer.c: 182: rx_len = 0;
  2375  000254  0E00               	movlw	0
  2376  000256  6E43               	movwf	_rx_len,c
  2377                           
  2378                           ;FastTransfer.c: 183: rx_array_inx = 0;
  2379  000258  0E00               	movlw	0
  2380  00025A  6E42               	movwf	_rx_array_inx,c
  2381                           
  2382                           ;FastTransfer.c: 184: return 0;
  2383  00025C  0E00               	movlw	0
  2384  00025E  0012               	return	
  2385  000260                     l2715:
  2386                           
  2387                           ;FastTransfer.c: 190: rx_buffer[rx_array_inx++] = serial_read();
  2388  000260  D801               	call	u3008
  2389  000262  D00A               	goto	u3009
  2390  000264                     u3008:
  2391  000264  0005               	push	
  2392  000266  6EFA               	movwf	pclath,c
  2393  000268  5034               	movf	_serial_read,w,c
  2394  00026A  6EFD               	movwf	tosl,c
  2395  00026C  5035               	movf	_serial_read+1,w,c
  2396  00026E  6EFE               	movwf	tosh,c
  2397  000270  50F8               	movf	tblptru,w,c
  2398  000272  6EFF               	movwf	tosu,c
  2399  000274  50FA               	movf	pclath,w,c
  2400  000276  0012               	return		;indir
  2401  000278                     u3009:
  2402  000278  0100               	movlb	0	; () banked
  2403  00027A  6F8E               	movwf	??_receiveData& (0+255),b
  2404  00027C  5042               	movf	_rx_array_inx,w,c
  2405  00027E  0D01               	mullw	1
  2406  000280  0E00               	movlw	low _rx_buffer
  2407  000282  24F3               	addwf	prodl,w,c
  2408  000284  6ED9               	movwf	fsr2l,c
  2409  000286  0E02               	movlw	high _rx_buffer
  2410  000288  20F4               	addwfc	prodh,w,c
  2411  00028A  6EDA               	movwf	fsr2h,c
  2412  00028C  C08E  FFDF         	movff	??_receiveData,indf2
  2413                           
  2414                           ; BSR set to: 0
  2415  000290  2A42               	incf	_rx_array_inx,f,c
  2416  000292                     l2719:
  2417  000292  D801               	call	u3018
  2418  000294  D00A               	goto	u3019
  2419  000296                     u3018:
  2420  000296  0005               	push	
  2421  000298  6EFA               	movwf	pclath,c
  2422  00029A  5030               	movf	_serial_available,w,c
  2423  00029C  6EFD               	movwf	tosl,c
  2424  00029E  5031               	movf	_serial_available+1,w,c
  2425  0002A0  6EFE               	movwf	tosh,c
  2426  0002A2  50F8               	movf	tblptru,w,c
  2427  0002A4  6EFF               	movwf	tosu,c
  2428  0002A6  50FA               	movf	pclath,w,c
  2429  0002A8  0012               	return		;indir
  2430  0002AA                     u3019:
  2431  0002AA  501D               	movf	?_Receive_available,w,c
  2432  0002AC  101E               	iorwf	?_Receive_available+1,w,c
  2433  0002AE  B4D8               	btfsc	status,2,c
  2434  0002B0  D004               	goto	l2723
  2435  0002B2  5042               	movf	_rx_array_inx,w,c
  2436  0002B4  5C43               	subwf	_rx_len,w,c
  2437  0002B6  B0D8               	btfsc	status,0,c
  2438  0002B8  D7D3               	goto	l2715
  2439  0002BA                     l2723:
  2440                           
  2441                           ;FastTransfer.c: 191: }
  2442                           ;FastTransfer.c: 193: if (rx_len == (rx_array_inx - 1)) {
  2443  0002BA  5043               	movf	_rx_len,w,c
  2444  0002BC  0100               	movlb	0	; () banked
  2445  0002BE  6F8E               	movwf	??_receiveData& (0+255),b
  2446  0002C0  6B8F               	clrf	(??_receiveData+1)& (0+255),b
  2447  0002C2  0EFF               	movlw	255
  2448  0002C4  0100               	movlb	0	; () banked
  2449  0002C6  6F90               	movwf	(??_receiveData+2)& (0+255),b
  2450  0002C8  0EFF               	movlw	255
  2451  0002CA  0100               	movlb	0	; () banked
  2452  0002CC  6F91               	movwf	(??_receiveData+3)& (0+255),b
  2453  0002CE  5042               	movf	_rx_array_inx,w,c
  2454  0002D0  0100               	movlb	0	; () banked
  2455  0002D2  6F92               	movwf	(??_receiveData+4)& (0+255),b
  2456  0002D4  6B93               	clrf	(??_receiveData+5)& (0+255),b
  2457  0002D6  0100               	movlb	0	; () banked
  2458  0002D8  5190               	movf	(??_receiveData+2)& (0+255),w,b
  2459  0002DA  0100               	movlb	0	; () banked
  2460  0002DC  2792               	addwf	(??_receiveData+4)& (0+255),f,b
  2461  0002DE  0100               	movlb	0	; () banked
  2462  0002E0  5191               	movf	(??_receiveData+3)& (0+255),w,b
  2463  0002E2  0100               	movlb	0	; () banked
  2464  0002E4  2393               	addwfc	(??_receiveData+5)& (0+255),f,b
  2465  0002E6  0100               	movlb	0	; () banked
  2466  0002E8  518E               	movf	??_receiveData& (0+255),w,b
  2467  0002EA  0100               	movlb	0	; () banked
  2468  0002EC  1992               	xorwf	(??_receiveData+4)& (0+255),w,b
  2469  0002EE  E105               	bnz	u3041
  2470  0002F0  0100               	movlb	0	; () banked
  2471  0002F2  518F               	movf	(??_receiveData+1)& (0+255),w,b
  2472  0002F4  0100               	movlb	0	; () banked
  2473  0002F6  1993               	xorwf	(??_receiveData+5)& (0+255),w,b
  2474  0002F8  A4D8               	btfss	status,2,c
  2475  0002FA                     u3041:
  2476  0002FA  D227               	goto	l2819
  2477                           
  2478                           ; BSR set to: 0
  2479                           ;FastTransfer.c: 196: calc_CS = CRC8(rx_buffer, rx_len);
  2480  0002FC  0E00               	movlw	low _rx_buffer
  2481  0002FE  6E1B               	movwf	CRC8@data,c
  2482  000300  0E02               	movlw	high _rx_buffer
  2483  000302  6E1C               	movwf	CRC8@data+1,c
  2484  000304  C043  F01D         	movff	_rx_len,CRC8@len
  2485  000308  EC4C  F00A         	call	_CRC8	;wreg free
  2486  00030C  6E3D               	movwf	_calc_CS,c
  2487                           
  2488                           ;FastTransfer.c: 200: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2489  00030E  0EFF               	movlw	255
  2490  000310  0100               	movlb	0	; () banked
  2491  000312  6F8E               	movwf	??_receiveData& (0+255),b
  2492  000314  0EFF               	movlw	255
  2493  000316  0100               	movlb	0	; () banked
  2494  000318  6F8F               	movwf	(??_receiveData+1)& (0+255),b
  2495  00031A  5042               	movf	_rx_array_inx,w,c
  2496  00031C  0100               	movlb	0	; () banked
  2497  00031E  6F90               	movwf	(??_receiveData+2)& (0+255),b
  2498  000320  6B91               	clrf	(??_receiveData+3)& (0+255),b
  2499  000322  0100               	movlb	0	; () banked
  2500  000324  518E               	movf	??_receiveData& (0+255),w,b
  2501  000326  0100               	movlb	0	; () banked
  2502  000328  2790               	addwf	(??_receiveData+2)& (0+255),f,b
  2503  00032A  0100               	movlb	0	; () banked
  2504  00032C  518F               	movf	(??_receiveData+1)& (0+255),w,b
  2505  00032E  0100               	movlb	0	; () banked
  2506  000330  2391               	addwfc	(??_receiveData+3)& (0+255),f,b
  2507  000332  0E00               	movlw	low _rx_buffer
  2508  000334  0100               	movlb	0	; () banked
  2509  000336  2590               	addwf	(??_receiveData+2)& (0+255),w,b
  2510  000338  6ED9               	movwf	fsr2l,c
  2511  00033A  0E02               	movlw	high _rx_buffer
  2512  00033C  0100               	movlb	0	; () banked
  2513  00033E  2191               	addwfc	(??_receiveData+3)& (0+255),w,b
  2514  000340  6EDA               	movwf	fsr2h,c
  2515  000342  503D               	movf	_calc_CS,w,c
  2516  000344  18DE               	xorwf	postinc2,w,c
  2517  000346  A4D8               	btfss	status,2,c
  2518  000348  D139               	goto	l2781
  2519                           
  2520                           ; BSR set to: 0
  2521                           ;FastTransfer.c: 203: int r;
  2522                           ;FastTransfer.c: 204: for (r = 0; r < rx_len; r = r + 3) {
  2523  00034A  0E00               	movlw	0
  2524  00034C  0100               	movlb	0	; () banked
  2525  00034E  6F9F               	movwf	(receiveData@r+1)& (0+255),b
  2526  000350  0E00               	movlw	0
  2527  000352  6F9E               	movwf	receiveData@r& (0+255),b
  2528  000354  D05A               	goto	l2741
  2529  000356                     l2731:
  2530                           
  2531                           ; BSR set to: 0
  2532                           ;FastTransfer.c: 205: if (rx_buffer[r] < maxDataAddress) {
  2533  000356  0E00               	movlw	low _rx_buffer
  2534  000358  0100               	movlb	0	; () banked
  2535  00035A  259E               	addwf	receiveData@r& (0+255),w,b
  2536  00035C  6ED9               	movwf	fsr2l,c
  2537  00035E  0E02               	movlw	high _rx_buffer
  2538  000360  0100               	movlb	0	; () banked
  2539  000362  219F               	addwfc	(receiveData@r+1)& (0+255),w,b
  2540  000364  6EDA               	movwf	fsr2h,c
  2541  000366  503E               	movf	_maxDataAddress,w,c
  2542  000368  5CDE               	subwf	postinc2,w,c
  2543  00036A  B0D8               	btfsc	status,0,c
  2544  00036C  D041               	goto	l2737
  2545                           
  2546                           ; BSR set to: 0
  2547                           ;FastTransfer.c: 206: group.parts[0] = rx_buffer[r + 1];
  2548  00036E  0E01               	movlw	1
  2549  000370  0100               	movlb	0	; () banked
  2550  000372  259E               	addwf	receiveData@r& (0+255),w,b
  2551  000374  0100               	movlb	0	; () banked
  2552  000376  6F8E               	movwf	??_receiveData& (0+255),b
  2553  000378  0E00               	movlw	0
  2554  00037A  0100               	movlb	0	; () banked
  2555  00037C  219F               	addwfc	(receiveData@r+1)& (0+255),w,b
  2556  00037E  0100               	movlb	0	; () banked
  2557  000380  6F8F               	movwf	(??_receiveData+1)& (0+255),b
  2558  000382  0E00               	movlw	low _rx_buffer
  2559  000384  0100               	movlb	0	; () banked
  2560  000386  258E               	addwf	??_receiveData& (0+255),w,b
  2561  000388  6ED9               	movwf	fsr2l,c
  2562  00038A  0E02               	movlw	high _rx_buffer
  2563  00038C  0100               	movlb	0	; () banked
  2564  00038E  218F               	addwfc	(??_receiveData+1)& (0+255),w,b
  2565  000390  6EDA               	movwf	fsr2h,c
  2566  000392  50DF               	movf	indf2,w,c
  2567  000394  6E2A               	movwf	_group,c
  2568                           
  2569                           ;FastTransfer.c: 207: group.parts[1] = rx_buffer[r + 2];
  2570  000396  0E02               	movlw	2
  2571  000398  0100               	movlb	0	; () banked
  2572  00039A  259E               	addwf	receiveData@r& (0+255),w,b
  2573  00039C  0100               	movlb	0	; () banked
  2574  00039E  6F8E               	movwf	??_receiveData& (0+255),b
  2575  0003A0  0E00               	movlw	0
  2576  0003A2  0100               	movlb	0	; () banked
  2577  0003A4  219F               	addwfc	(receiveData@r+1)& (0+255),w,b
  2578  0003A6  0100               	movlb	0	; () banked
  2579  0003A8  6F8F               	movwf	(??_receiveData+1)& (0+255),b
  2580  0003AA  0E00               	movlw	low _rx_buffer
  2581  0003AC  0100               	movlb	0	; () banked
  2582  0003AE  258E               	addwf	??_receiveData& (0+255),w,b
  2583  0003B0  6ED9               	movwf	fsr2l,c
  2584  0003B2  0E02               	movlw	high _rx_buffer
  2585  0003B4  0100               	movlb	0	; () banked
  2586  0003B6  218F               	addwfc	(??_receiveData+1)& (0+255),w,b
  2587  0003B8  6EDA               	movwf	fsr2h,c
  2588  0003BA  50DF               	movf	indf2,w,c
  2589  0003BC  6E2B               	movwf	_group+1,c
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;FastTransfer.c: 208: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2593  0003BE  0E00               	movlw	low _rx_buffer
  2594  0003C0  0100               	movlb	0	; () banked
  2595  0003C2  259E               	addwf	receiveData@r& (0+255),w,b
  2596  0003C4  6ED9               	movwf	fsr2l,c
  2597  0003C6  0E02               	movlw	high _rx_buffer
  2598  0003C8  0100               	movlb	0	; () banked
  2599  0003CA  219F               	addwfc	(receiveData@r+1)& (0+255),w,b
  2600  0003CC  6EDA               	movwf	fsr2h,c
  2601  0003CE  50DF               	movf	indf2,w,c
  2602  0003D0  0100               	movlb	0	; () banked
  2603  0003D2  6F8E               	movwf	??_receiveData& (0+255),b
  2604  0003D4  0100               	movlb	0	; () banked
  2605  0003D6  518E               	movf	??_receiveData& (0+255),w,b
  2606  0003D8  0D02               	mullw	2
  2607  0003DA  50F3               	movf	prodl,w,c
  2608  0003DC  242C               	addwf	_receiveArrayAddress,w,c
  2609  0003DE  6ED9               	movwf	fsr2l,c
  2610  0003E0  50F4               	movf	prodh,w,c
  2611  0003E2  202D               	addwfc	_receiveArrayAddress+1,w,c
  2612  0003E4  6EDA               	movwf	fsr2h,c
  2613  0003E6  C02A  FFDE         	movff	_group,postinc2
  2614  0003EA  C02B  FFDD         	movff	_group+1,postdec2
  2615                           
  2616                           ;FastTransfer.c: 209: } else {
  2617  0003EE  D003               	goto	l2739
  2618  0003F0                     l2737:
  2619                           
  2620                           ; BSR set to: 0
  2621                           ;FastTransfer.c: 210: dataAdressErrorCounter++;
  2622  0003F0  0100               	movlb	0	; () banked
  2623  0003F2  4B68               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  2624  0003F4  2B69               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  2625  0003F6                     l2739:
  2626                           
  2627                           ; BSR set to: 0
  2628  0003F6  0E03               	movlw	3
  2629  0003F8  0100               	movlb	0	; () banked
  2630  0003FA  259E               	addwf	receiveData@r& (0+255),w,b
  2631  0003FC  0100               	movlb	0	; () banked
  2632  0003FE  6F9E               	movwf	receiveData@r& (0+255),b
  2633  000400  0E00               	movlw	0
  2634  000402  0100               	movlb	0	; () banked
  2635  000404  219F               	addwfc	(receiveData@r+1)& (0+255),w,b
  2636  000406  0100               	movlb	0	; () banked
  2637  000408  6F9F               	movwf	(receiveData@r+1)& (0+255),b
  2638  00040A                     l2741:
  2639                           
  2640                           ; BSR set to: 0
  2641  00040A  5043               	movf	_rx_len,w,c
  2642  00040C  0100               	movlb	0	; () banked
  2643  00040E  6F8E               	movwf	??_receiveData& (0+255),b
  2644  000410  6B8F               	clrf	(??_receiveData+1)& (0+255),b
  2645  000412  0100               	movlb	0	; () banked
  2646  000414  518E               	movf	??_receiveData& (0+255),w,b
  2647  000416  0100               	movlb	0	; () banked
  2648  000418  5D9E               	subwf	receiveData@r& (0+255),w,b
  2649  00041A  0100               	movlb	0	; () banked
  2650  00041C  519F               	movf	(receiveData@r+1)& (0+255),w,b
  2651  00041E  0A80               	xorlw	128
  2652  000420  0100               	movlb	0	; () banked
  2653  000422  6F90               	movwf	(??_receiveData+2)& (0+255),b
  2654  000424  0100               	movlb	0	; () banked
  2655  000426  518F               	movf	(??_receiveData+1)& (0+255),w,b
  2656  000428  0A80               	xorlw	128
  2657  00042A  0100               	movlb	0	; () banked
  2658  00042C  5990               	subwfb	(??_receiveData+2)& (0+255),w,b
  2659  00042E  A0D8               	btfss	status,0,c
  2660  000430  D792               	goto	l2731
  2661                           
  2662                           ; BSR set to: 0
  2663                           ;FastTransfer.c: 211: }
  2664                           ;FastTransfer.c: 212: }
  2665                           ;FastTransfer.c: 215: if (AKNAKsend) {
  2666                           
  2667                           ; BSR set to: 0
  2668  000432  503A               	movf	_AKNAKsend,w,c
  2669  000434  B4D8               	btfsc	status,2,c
  2670  000436  D0BC               	goto	l2771
  2671                           
  2672                           ; BSR set to: 0
  2673                           ;FastTransfer.c: 216: unsigned char holder[3];
  2674                           ;FastTransfer.c: 217: holder[0] = 255;
  2675  000438  0100               	movlb	0	; () banked
  2676  00043A  6994               	setf	receiveData@holder& (0+255),b
  2677                           
  2678                           ; BSR set to: 0
  2679                           ;FastTransfer.c: 218: holder[1] = 1;
  2680  00043C  0E01               	movlw	1
  2681  00043E  0100               	movlb	0	; () banked
  2682  000440  6F95               	movwf	(receiveData@holder+1)& (0+255),b
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;FastTransfer.c: 219: holder[2] = rx_buffer[rx_array_inx - 1];
  2686  000442  0EFF               	movlw	255
  2687  000444  0100               	movlb	0	; () banked
  2688  000446  6F8E               	movwf	??_receiveData& (0+255),b
  2689  000448  0EFF               	movlw	255
  2690  00044A  0100               	movlb	0	; () banked
  2691  00044C  6F8F               	movwf	(??_receiveData+1)& (0+255),b
  2692  00044E  5042               	movf	_rx_array_inx,w,c
  2693  000450  0100               	movlb	0	; () banked
  2694  000452  6F90               	movwf	(??_receiveData+2)& (0+255),b
  2695  000454  6B91               	clrf	(??_receiveData+3)& (0+255),b
  2696  000456  0100               	movlb	0	; () banked
  2697  000458  518E               	movf	??_receiveData& (0+255),w,b
  2698  00045A  0100               	movlb	0	; () banked
  2699  00045C  2790               	addwf	(??_receiveData+2)& (0+255),f,b
  2700  00045E  0100               	movlb	0	; () banked
  2701  000460  518F               	movf	(??_receiveData+1)& (0+255),w,b
  2702  000462  0100               	movlb	0	; () banked
  2703  000464  2391               	addwfc	(??_receiveData+3)& (0+255),f,b
  2704  000466  0E00               	movlw	low _rx_buffer
  2705  000468  0100               	movlb	0	; () banked
  2706  00046A  2590               	addwf	(??_receiveData+2)& (0+255),w,b
  2707  00046C  6ED9               	movwf	fsr2l,c
  2708  00046E  0E02               	movlw	high _rx_buffer
  2709  000470  0100               	movlb	0	; () banked
  2710  000472  2191               	addwfc	(??_receiveData+3)& (0+255),w,b
  2711  000474  6EDA               	movwf	fsr2h,c
  2712  000476  50DF               	movf	indf2,w,c
  2713  000478  0100               	movlb	0	; () banked
  2714  00047A  6F96               	movwf	(receiveData@holder+2)& (0+255),b
  2715                           
  2716                           ; BSR set to: 0
  2717                           ;FastTransfer.c: 220: unsigned char crcHolder = CRC8(holder, 3);
  2718  00047C  0E94               	movlw	low receiveData@holder
  2719  00047E  6E1B               	movwf	CRC8@data,c
  2720  000480  0E00               	movlw	high receiveData@holder
  2721  000482  6E1C               	movwf	CRC8@data+1,c
  2722  000484  0E03               	movlw	3
  2723  000486  6E1D               	movwf	CRC8@len,c
  2724  000488  EC4C  F00A         	call	_CRC8	;wreg free
  2725  00048C  0100               	movlb	0	; () banked
  2726  00048E  6F9A               	movwf	receiveData@crcHolder& (0+255),b
  2727                           
  2728                           ; BSR set to: 0
  2729                           ;FastTransfer.c: 221: serial_write(0x06);
  2730  000490  D801               	call	u3098
  2731  000492  D00B               	goto	l2755
  2732  000494                     u3098:
  2733  000494  0005               	push	
  2734  000496  6EFA               	movwf	pclath,c
  2735  000498  5036               	movf	_serial_write,w,c
  2736  00049A  6EFD               	movwf	tosl,c
  2737  00049C  5037               	movf	_serial_write+1,w,c
  2738  00049E  6EFE               	movwf	tosh,c
  2739  0004A0  50F8               	movf	tblptru,w,c
  2740  0004A2  6EFF               	movwf	tosu,c
  2741  0004A4  50FA               	movf	pclath,w,c
  2742  0004A6  0E06               	movlw	6
  2743  0004A8  0012               	return		;indir
  2744  0004AA                     l2755:
  2745                           
  2746                           ;FastTransfer.c: 222: serial_write(0x85);
  2747  0004AA  D801               	call	u3108
  2748  0004AC  D00B               	goto	l2757
  2749  0004AE                     u3108:
  2750  0004AE  0005               	push	
  2751  0004B0  6EFA               	movwf	pclath,c
  2752  0004B2  5036               	movf	_serial_write,w,c
  2753  0004B4  6EFD               	movwf	tosl,c
  2754  0004B6  5037               	movf	_serial_write+1,w,c
  2755  0004B8  6EFE               	movwf	tosh,c
  2756  0004BA  50F8               	movf	tblptru,w,c
  2757  0004BC  6EFF               	movwf	tosu,c
  2758  0004BE  50FA               	movf	pclath,w,c
  2759  0004C0  0E85               	movlw	133
  2760  0004C2  0012               	return		;indir
  2761  0004C4                     l2757:
  2762                           
  2763                           ;FastTransfer.c: 223: serial_write(returnAddress);
  2764  0004C4  D801               	call	u3118
  2765  0004C6  D00B               	goto	l2759
  2766  0004C8                     u3118:
  2767  0004C8  0005               	push	
  2768  0004CA  6EFA               	movwf	pclath,c
  2769  0004CC  5036               	movf	_serial_write,w,c
  2770  0004CE  6EFD               	movwf	tosl,c
  2771  0004D0  5037               	movf	_serial_write+1,w,c
  2772  0004D2  6EFE               	movwf	tosh,c
  2773  0004D4  50F8               	movf	tblptru,w,c
  2774  0004D6  6EFF               	movwf	tosu,c
  2775  0004D8  50FA               	movf	pclath,w,c
  2776  0004DA  5040               	movf	_returnAddress,w,c
  2777  0004DC  0012               	return		;indir
  2778  0004DE                     l2759:
  2779                           
  2780                           ;FastTransfer.c: 224: serial_write(moduleAddress);
  2781  0004DE  D801               	call	u3128
  2782  0004E0  D00B               	goto	l2761
  2783  0004E2                     u3128:
  2784  0004E2  0005               	push	
  2785  0004E4  6EFA               	movwf	pclath,c
  2786  0004E6  5036               	movf	_serial_write,w,c
  2787  0004E8  6EFD               	movwf	tosl,c
  2788  0004EA  5037               	movf	_serial_write+1,w,c
  2789  0004EC  6EFE               	movwf	tosh,c
  2790  0004EE  50F8               	movf	tblptru,w,c
  2791  0004F0  6EFF               	movwf	tosu,c
  2792  0004F2  50FA               	movf	pclath,w,c
  2793  0004F4  503F               	movf	_moduleAddress,w,c
  2794  0004F6  0012               	return		;indir
  2795  0004F8                     l2761:
  2796                           
  2797                           ;FastTransfer.c: 225: serial_write(3);
  2798  0004F8  D801               	call	u3138
  2799  0004FA  D00B               	goto	l2763
  2800  0004FC                     u3138:
  2801  0004FC  0005               	push	
  2802  0004FE  6EFA               	movwf	pclath,c
  2803  000500  5036               	movf	_serial_write,w,c
  2804  000502  6EFD               	movwf	tosl,c
  2805  000504  5037               	movf	_serial_write+1,w,c
  2806  000506  6EFE               	movwf	tosh,c
  2807  000508  50F8               	movf	tblptru,w,c
  2808  00050A  6EFF               	movwf	tosu,c
  2809  00050C  50FA               	movf	pclath,w,c
  2810  00050E  0E03               	movlw	3
  2811  000510  0012               	return		;indir
  2812  000512                     l2763:
  2813                           
  2814                           ;FastTransfer.c: 226: serial_write(255);
  2815  000512  D801               	call	u3148
  2816  000514  D00B               	goto	l2765
  2817  000516                     u3148:
  2818  000516  0005               	push	
  2819  000518  6EFA               	movwf	pclath,c
  2820  00051A  5036               	movf	_serial_write,w,c
  2821  00051C  6EFD               	movwf	tosl,c
  2822  00051E  5037               	movf	_serial_write+1,w,c
  2823  000520  6EFE               	movwf	tosh,c
  2824  000522  50F8               	movf	tblptru,w,c
  2825  000524  6EFF               	movwf	tosu,c
  2826  000526  50FA               	movf	pclath,w,c
  2827  000528  0EFF               	movlw	255
  2828  00052A  0012               	return		;indir
  2829  00052C                     l2765:
  2830                           
  2831                           ;FastTransfer.c: 227: serial_write(1);
  2832  00052C  D801               	call	u3158
  2833  00052E  D00B               	goto	l2767
  2834  000530                     u3158:
  2835  000530  0005               	push	
  2836  000532  6EFA               	movwf	pclath,c
  2837  000534  5036               	movf	_serial_write,w,c
  2838  000536  6EFD               	movwf	tosl,c
  2839  000538  5037               	movf	_serial_write+1,w,c
  2840  00053A  6EFE               	movwf	tosh,c
  2841  00053C  50F8               	movf	tblptru,w,c
  2842  00053E  6EFF               	movwf	tosu,c
  2843  000540  50FA               	movf	pclath,w,c
  2844  000542  0E01               	movlw	1
  2845  000544  0012               	return		;indir
  2846  000546                     l2767:
  2847                           
  2848                           ;FastTransfer.c: 228: serial_write(rx_buffer[rx_array_inx - 1]);
  2849  000546  D801               	call	u3168
  2850  000548  D025               	goto	l2769
  2851  00054A                     u3168:
  2852  00054A  0005               	push	
  2853  00054C  6EFA               	movwf	pclath,c
  2854  00054E  5036               	movf	_serial_write,w,c
  2855  000550  6EFD               	movwf	tosl,c
  2856  000552  5037               	movf	_serial_write+1,w,c
  2857  000554  6EFE               	movwf	tosh,c
  2858  000556  50F8               	movf	tblptru,w,c
  2859  000558  6EFF               	movwf	tosu,c
  2860  00055A  50FA               	movf	pclath,w,c
  2861  00055C  0EFF               	movlw	255
  2862  00055E  0100               	movlb	0	; () banked
  2863  000560  6F8E               	movwf	??_receiveData& (0+255),b
  2864  000562  0EFF               	movlw	255
  2865  000564  0100               	movlb	0	; () banked
  2866  000566  6F8F               	movwf	(??_receiveData+1)& (0+255),b
  2867  000568  5042               	movf	_rx_array_inx,w,c
  2868  00056A  0100               	movlb	0	; () banked
  2869  00056C  6F90               	movwf	(??_receiveData+2)& (0+255),b
  2870  00056E  6B91               	clrf	(??_receiveData+3)& (0+255),b
  2871  000570  0100               	movlb	0	; () banked
  2872  000572  518E               	movf	??_receiveData& (0+255),w,b
  2873  000574  0100               	movlb	0	; () banked
  2874  000576  2790               	addwf	(??_receiveData+2)& (0+255),f,b
  2875  000578  0100               	movlb	0	; () banked
  2876  00057A  518F               	movf	(??_receiveData+1)& (0+255),w,b
  2877  00057C  0100               	movlb	0	; () banked
  2878  00057E  2391               	addwfc	(??_receiveData+3)& (0+255),f,b
  2879  000580  0E00               	movlw	low _rx_buffer
  2880  000582  0100               	movlb	0	; () banked
  2881  000584  2590               	addwf	(??_receiveData+2)& (0+255),w,b
  2882  000586  6ED9               	movwf	fsr2l,c
  2883  000588  0E02               	movlw	high _rx_buffer
  2884  00058A  0100               	movlb	0	; () banked
  2885  00058C  2191               	addwfc	(??_receiveData+3)& (0+255),w,b
  2886  00058E  6EDA               	movwf	fsr2h,c
  2887  000590  50DF               	movf	indf2,w,c
  2888  000592  0012               	return		;indir
  2889  000594                     l2769:
  2890                           
  2891                           ;FastTransfer.c: 229: serial_write(crcHolder);
  2892  000594  D801               	call	u3178
  2893  000596  D00C               	goto	l2771
  2894  000598                     u3178:
  2895  000598  0005               	push	
  2896  00059A  6EFA               	movwf	pclath,c
  2897  00059C  5036               	movf	_serial_write,w,c
  2898  00059E  6EFD               	movwf	tosl,c
  2899  0005A0  5037               	movf	_serial_write+1,w,c
  2900  0005A2  6EFE               	movwf	tosh,c
  2901  0005A4  50F8               	movf	tblptru,w,c
  2902  0005A6  6EFF               	movwf	tosu,c
  2903  0005A8  50FA               	movf	pclath,w,c
  2904  0005AA  0100               	movlb	0	; () banked
  2905  0005AC  519A               	movf	receiveData@crcHolder& (0+255),w,b
  2906  0005AE  0012               	return		;indir
  2907  0005B0                     l2771:
  2908                           
  2909                           ;FastTransfer.c: 230: }
  2910                           ;FastTransfer.c: 234: rx_len = 0;
  2911  0005B0  0E00               	movlw	0
  2912  0005B2  6E43               	movwf	_rx_len,c
  2913                           
  2914                           ;FastTransfer.c: 235: rx_array_inx = 0;
  2915  0005B4  0E00               	movlw	0
  2916  0005B6  6E42               	movwf	_rx_array_inx,c
  2917                           
  2918                           ;FastTransfer.c: 236: return 1;
  2919  0005B8  0E01               	movlw	1
  2920  0005BA  0012               	return	
  2921  0005BC                     l2781:
  2922                           
  2923                           ;FastTransfer.c: 238: crcErrorCounter++;
  2924  0005BC  4A28               	infsnz	_crcErrorCounter,f,c
  2925  0005BE  2A29               	incf	_crcErrorCounter+1,f,c
  2926                           
  2927                           ;FastTransfer.c: 240: if (AKNAKsend) {
  2928  0005C0  503A               	movf	_AKNAKsend,w,c
  2929  0005C2  B4D8               	btfsc	status,2,c
  2930  0005C4  D0BC               	goto	l2811
  2931                           
  2932                           ;FastTransfer.c: 241: unsigned char holder[3];
  2933                           ;FastTransfer.c: 242: holder[0] = 255;
  2934  0005C6  0100               	movlb	0	; () banked
  2935  0005C8  6997               	setf	receiveData@holder_329& (0+255),b
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;FastTransfer.c: 243: holder[1] = 2;
  2939  0005CA  0E02               	movlw	2
  2940  0005CC  0100               	movlb	0	; () banked
  2941  0005CE  6F98               	movwf	(receiveData@holder_329+1)& (0+255),b
  2942                           
  2943                           ; BSR set to: 0
  2944                           ;FastTransfer.c: 244: holder[2] = rx_buffer[rx_array_inx - 1];
  2945  0005D0  0EFF               	movlw	255
  2946  0005D2  0100               	movlb	0	; () banked
  2947  0005D4  6F8E               	movwf	??_receiveData& (0+255),b
  2948  0005D6  0EFF               	movlw	255
  2949  0005D8  0100               	movlb	0	; () banked
  2950  0005DA  6F8F               	movwf	(??_receiveData+1)& (0+255),b
  2951  0005DC  5042               	movf	_rx_array_inx,w,c
  2952  0005DE  0100               	movlb	0	; () banked
  2953  0005E0  6F90               	movwf	(??_receiveData+2)& (0+255),b
  2954  0005E2  6B91               	clrf	(??_receiveData+3)& (0+255),b
  2955  0005E4  0100               	movlb	0	; () banked
  2956  0005E6  518E               	movf	??_receiveData& (0+255),w,b
  2957  0005E8  0100               	movlb	0	; () banked
  2958  0005EA  2790               	addwf	(??_receiveData+2)& (0+255),f,b
  2959  0005EC  0100               	movlb	0	; () banked
  2960  0005EE  518F               	movf	(??_receiveData+1)& (0+255),w,b
  2961  0005F0  0100               	movlb	0	; () banked
  2962  0005F2  2391               	addwfc	(??_receiveData+3)& (0+255),f,b
  2963  0005F4  0E00               	movlw	low _rx_buffer
  2964  0005F6  0100               	movlb	0	; () banked
  2965  0005F8  2590               	addwf	(??_receiveData+2)& (0+255),w,b
  2966  0005FA  6ED9               	movwf	fsr2l,c
  2967  0005FC  0E02               	movlw	high _rx_buffer
  2968  0005FE  0100               	movlb	0	; () banked
  2969  000600  2191               	addwfc	(??_receiveData+3)& (0+255),w,b
  2970  000602  6EDA               	movwf	fsr2h,c
  2971  000604  50DF               	movf	indf2,w,c
  2972  000606  0100               	movlb	0	; () banked
  2973  000608  6F99               	movwf	(receiveData@holder_329+2)& (0+255),b
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;FastTransfer.c: 245: unsigned char crcHolder = CRC8(holder, 3);
  2977  00060A  0E97               	movlw	low receiveData@holder_329
  2978  00060C  6E1B               	movwf	CRC8@data,c
  2979  00060E  0E00               	movlw	high receiveData@holder_329
  2980  000610  6E1C               	movwf	CRC8@data+1,c
  2981  000612  0E03               	movlw	3
  2982  000614  6E1D               	movwf	CRC8@len,c
  2983  000616  EC4C  F00A         	call	_CRC8
  2984  00061A  0100               	movlb	0	; () banked
  2985  00061C  6F9B               	movwf	receiveData@crcHolder_330& (0+255),b
  2986                           
  2987                           ; BSR set to: 0
  2988                           ;FastTransfer.c: 246: serial_write(0x06);
  2989  00061E  D801               	call	u3198
  2990  000620  D00B               	goto	l2795
  2991  000622                     u3198:
  2992  000622  0005               	push	
  2993  000624  6EFA               	movwf	pclath,c
  2994  000626  5036               	movf	_serial_write,w,c
  2995  000628  6EFD               	movwf	tosl,c
  2996  00062A  5037               	movf	_serial_write+1,w,c
  2997  00062C  6EFE               	movwf	tosh,c
  2998  00062E  50F8               	movf	tblptru,w,c
  2999  000630  6EFF               	movwf	tosu,c
  3000  000632  50FA               	movf	pclath,w,c
  3001  000634  0E06               	movlw	6
  3002  000636  0012               	return		;indir
  3003  000638                     l2795:
  3004                           
  3005                           ;FastTransfer.c: 247: serial_write(0x85);
  3006  000638  D801               	call	u3208
  3007  00063A  D00B               	goto	l2797
  3008  00063C                     u3208:
  3009  00063C  0005               	push	
  3010  00063E  6EFA               	movwf	pclath,c
  3011  000640  5036               	movf	_serial_write,w,c
  3012  000642  6EFD               	movwf	tosl,c
  3013  000644  5037               	movf	_serial_write+1,w,c
  3014  000646  6EFE               	movwf	tosh,c
  3015  000648  50F8               	movf	tblptru,w,c
  3016  00064A  6EFF               	movwf	tosu,c
  3017  00064C  50FA               	movf	pclath,w,c
  3018  00064E  0E85               	movlw	133
  3019  000650  0012               	return		;indir
  3020  000652                     l2797:
  3021                           
  3022                           ;FastTransfer.c: 248: serial_write(returnAddress);
  3023  000652  D801               	call	u3218
  3024  000654  D00B               	goto	l2799
  3025  000656                     u3218:
  3026  000656  0005               	push	
  3027  000658  6EFA               	movwf	pclath,c
  3028  00065A  5036               	movf	_serial_write,w,c
  3029  00065C  6EFD               	movwf	tosl,c
  3030  00065E  5037               	movf	_serial_write+1,w,c
  3031  000660  6EFE               	movwf	tosh,c
  3032  000662  50F8               	movf	tblptru,w,c
  3033  000664  6EFF               	movwf	tosu,c
  3034  000666  50FA               	movf	pclath,w,c
  3035  000668  5040               	movf	_returnAddress,w,c
  3036  00066A  0012               	return		;indir
  3037  00066C                     l2799:
  3038                           
  3039                           ;FastTransfer.c: 249: serial_write(moduleAddress);
  3040  00066C  D801               	call	u3228
  3041  00066E  D00B               	goto	l2801
  3042  000670                     u3228:
  3043  000670  0005               	push	
  3044  000672  6EFA               	movwf	pclath,c
  3045  000674  5036               	movf	_serial_write,w,c
  3046  000676  6EFD               	movwf	tosl,c
  3047  000678  5037               	movf	_serial_write+1,w,c
  3048  00067A  6EFE               	movwf	tosh,c
  3049  00067C  50F8               	movf	tblptru,w,c
  3050  00067E  6EFF               	movwf	tosu,c
  3051  000680  50FA               	movf	pclath,w,c
  3052  000682  503F               	movf	_moduleAddress,w,c
  3053  000684  0012               	return		;indir
  3054  000686                     l2801:
  3055                           
  3056                           ;FastTransfer.c: 250: serial_write(3);
  3057  000686  D801               	call	u3238
  3058  000688  D00B               	goto	l2803
  3059  00068A                     u3238:
  3060  00068A  0005               	push	
  3061  00068C  6EFA               	movwf	pclath,c
  3062  00068E  5036               	movf	_serial_write,w,c
  3063  000690  6EFD               	movwf	tosl,c
  3064  000692  5037               	movf	_serial_write+1,w,c
  3065  000694  6EFE               	movwf	tosh,c
  3066  000696  50F8               	movf	tblptru,w,c
  3067  000698  6EFF               	movwf	tosu,c
  3068  00069A  50FA               	movf	pclath,w,c
  3069  00069C  0E03               	movlw	3
  3070  00069E  0012               	return		;indir
  3071  0006A0                     l2803:
  3072                           
  3073                           ;FastTransfer.c: 251: serial_write(255);
  3074  0006A0  D801               	call	u3248
  3075  0006A2  D00B               	goto	l2805
  3076  0006A4                     u3248:
  3077  0006A4  0005               	push	
  3078  0006A6  6EFA               	movwf	pclath,c
  3079  0006A8  5036               	movf	_serial_write,w,c
  3080  0006AA  6EFD               	movwf	tosl,c
  3081  0006AC  5037               	movf	_serial_write+1,w,c
  3082  0006AE  6EFE               	movwf	tosh,c
  3083  0006B0  50F8               	movf	tblptru,w,c
  3084  0006B2  6EFF               	movwf	tosu,c
  3085  0006B4  50FA               	movf	pclath,w,c
  3086  0006B6  0EFF               	movlw	255
  3087  0006B8  0012               	return		;indir
  3088  0006BA                     l2805:
  3089                           
  3090                           ;FastTransfer.c: 252: serial_write(2);
  3091  0006BA  D801               	call	u3258
  3092  0006BC  D00B               	goto	l2807
  3093  0006BE                     u3258:
  3094  0006BE  0005               	push	
  3095  0006C0  6EFA               	movwf	pclath,c
  3096  0006C2  5036               	movf	_serial_write,w,c
  3097  0006C4  6EFD               	movwf	tosl,c
  3098  0006C6  5037               	movf	_serial_write+1,w,c
  3099  0006C8  6EFE               	movwf	tosh,c
  3100  0006CA  50F8               	movf	tblptru,w,c
  3101  0006CC  6EFF               	movwf	tosu,c
  3102  0006CE  50FA               	movf	pclath,w,c
  3103  0006D0  0E02               	movlw	2
  3104  0006D2  0012               	return		;indir
  3105  0006D4                     l2807:
  3106                           
  3107                           ;FastTransfer.c: 253: serial_write(rx_buffer[rx_array_inx - 1]);
  3108  0006D4  D801               	call	u3268
  3109  0006D6  D025               	goto	l2809
  3110  0006D8                     u3268:
  3111  0006D8  0005               	push	
  3112  0006DA  6EFA               	movwf	pclath,c
  3113  0006DC  5036               	movf	_serial_write,w,c
  3114  0006DE  6EFD               	movwf	tosl,c
  3115  0006E0  5037               	movf	_serial_write+1,w,c
  3116  0006E2  6EFE               	movwf	tosh,c
  3117  0006E4  50F8               	movf	tblptru,w,c
  3118  0006E6  6EFF               	movwf	tosu,c
  3119  0006E8  50FA               	movf	pclath,w,c
  3120  0006EA  0EFF               	movlw	255
  3121  0006EC  0100               	movlb	0	; () banked
  3122  0006EE  6F8E               	movwf	??_receiveData& (0+255),b
  3123  0006F0  0EFF               	movlw	255
  3124  0006F2  0100               	movlb	0	; () banked
  3125  0006F4  6F8F               	movwf	(??_receiveData+1)& (0+255),b
  3126  0006F6  5042               	movf	_rx_array_inx,w,c
  3127  0006F8  0100               	movlb	0	; () banked
  3128  0006FA  6F90               	movwf	(??_receiveData+2)& (0+255),b
  3129  0006FC  6B91               	clrf	(??_receiveData+3)& (0+255),b
  3130  0006FE  0100               	movlb	0	; () banked
  3131  000700  518E               	movf	??_receiveData& (0+255),w,b
  3132  000702  0100               	movlb	0	; () banked
  3133  000704  2790               	addwf	(??_receiveData+2)& (0+255),f,b
  3134  000706  0100               	movlb	0	; () banked
  3135  000708  518F               	movf	(??_receiveData+1)& (0+255),w,b
  3136  00070A  0100               	movlb	0	; () banked
  3137  00070C  2391               	addwfc	(??_receiveData+3)& (0+255),f,b
  3138  00070E  0E00               	movlw	low _rx_buffer
  3139  000710  0100               	movlb	0	; () banked
  3140  000712  2590               	addwf	(??_receiveData+2)& (0+255),w,b
  3141  000714  6ED9               	movwf	fsr2l,c
  3142  000716  0E02               	movlw	high _rx_buffer
  3143  000718  0100               	movlb	0	; () banked
  3144  00071A  2191               	addwfc	(??_receiveData+3)& (0+255),w,b
  3145  00071C  6EDA               	movwf	fsr2h,c
  3146  00071E  50DF               	movf	indf2,w,c
  3147  000720  0012               	return		;indir
  3148  000722                     l2809:
  3149                           
  3150                           ;FastTransfer.c: 254: serial_write(crcHolder);
  3151  000722  D801               	call	u3278
  3152  000724  D00C               	goto	l2811
  3153  000726                     u3278:
  3154  000726  0005               	push	
  3155  000728  6EFA               	movwf	pclath,c
  3156  00072A  5036               	movf	_serial_write,w,c
  3157  00072C  6EFD               	movwf	tosl,c
  3158  00072E  5037               	movf	_serial_write+1,w,c
  3159  000730  6EFE               	movwf	tosh,c
  3160  000732  50F8               	movf	tblptru,w,c
  3161  000734  6EFF               	movwf	tosu,c
  3162  000736  50FA               	movf	pclath,w,c
  3163  000738  0100               	movlb	0	; () banked
  3164  00073A  519B               	movf	receiveData@crcHolder_330& (0+255),w,b
  3165  00073C  0012               	return		;indir
  3166  00073E                     l2811:
  3167                           
  3168                           ;FastTransfer.c: 255: }
  3169                           ;FastTransfer.c: 258: rx_len = 0;
  3170  00073E  0E00               	movlw	0
  3171  000740  6E43               	movwf	_rx_len,c
  3172                           
  3173                           ;FastTransfer.c: 259: rx_array_inx = 0;
  3174  000742  0E00               	movlw	0
  3175  000744  6E42               	movwf	_rx_array_inx,c
  3176                           
  3177                           ;FastTransfer.c: 260: return 0;
  3178  000746  0E00               	movlw	0
  3179  000748  0012               	return	
  3180  00074A                     l2819:
  3181                           
  3182                           ;FastTransfer.c: 261: }
  3183                           ;FastTransfer.c: 262: }
  3184                           ;FastTransfer.c: 263: }
  3185                           ;FastTransfer.c: 266: return 0;
  3186  00074A  0E00               	movlw	0
  3187  00074C  0012               	return	
  3188  00074E                     __end_of_receiveData:
  3189                           	opt stack 0
  3190                           tosu	equ	0xFFF
  3191                           tosh	equ	0xFFE
  3192                           tosl	equ	0xFFD
  3193                           pclath	equ	0xFFA
  3194                           tblptru	equ	0xFF8
  3195                           tblptrh	equ	0xFF7
  3196                           tblptrl	equ	0xFF6
  3197                           tablat	equ	0xFF5
  3198                           prodh	equ	0xFF4
  3199                           prodl	equ	0xFF3
  3200                           postinc0	equ	0xFEE
  3201                           wreg	equ	0xFE8
  3202                           indf2	equ	0xFDF
  3203                           postinc2	equ	0xFDE
  3204                           postdec2	equ	0xFDD
  3205                           plusw2	equ	0xFDB
  3206                           fsr2h	equ	0xFDA
  3207                           fsr2l	equ	0xFD9
  3208                           status	equ	0xFD8
  3209                           
  3210 ;; *************** function _Send_put *****************
  3211 ;; Defined at:
  3212 ;;		line 130 in file "UART.c"
  3213 ;; Parameters:    Size  Location     Type
  3214 ;;  _data           1    wreg     unsigned char 
  3215 ;; Auto vars:     Size  Location     Type
  3216 ;;  _data           1    0[BANK0 ] unsigned char 
  3217 ;; Return value:  Size  Location     Type
  3218 ;;                  1    wreg      void 
  3219 ;; Registers used:
  3220 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3221 ;; Tracked objects:
  3222 ;;		On entry : 0/0
  3223 ;;		On exit  : 0/0
  3224 ;;		Unchanged: 0/0
  3225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3226 ;;      Params:         0       0       0       0       0       0       0
  3227 ;;      Locals:         0       1       0       0       0       0       0
  3228 ;;      Temps:          0       0       0       0       0       0       0
  3229 ;;      Totals:         0       1       0       0       0       0       0
  3230 ;;Total ram usage:        1 bytes
  3231 ;; Hardware stack levels used:    1
  3232 ;; Hardware stack levels required when called:    6
  3233 ;; This function calls:
  3234 ;;		_UART_buff_get
  3235 ;;		_UART_buff_put
  3236 ;; This function is called by:
  3237 ;;		_ComStart
  3238 ;;		_putch
  3239 ;;		_sendData
  3240 ;;		_receiveData
  3241 ;; This function uses a non-reentrant model
  3242 ;;
  3243                           
  3244                           	psect	text12
  3245  0015CA                     __ptext12:
  3246                           	opt stack 0
  3247  0015CA                     _Send_put:
  3248                           	opt stack 21
  3249                           
  3250                           ;incstack = 0
  3251                           ;Send_put@_data stored from wreg
  3252  0015CA  0100               	movlb	0	; () banked
  3253  0015CC  6F85               	movwf	Send_put@_data& (0+255),b
  3254                           
  3255                           ;UART.c: 131: UART_buff_put(&output_buffer, _data);
  3256  0015CE  0E00               	movlw	low _output_buffer
  3257  0015D0  6E21               	movwf	UART_buff_put@_this,c
  3258  0015D2  0E04               	movlw	high _output_buffer
  3259  0015D4  6E22               	movwf	UART_buff_put@_this+1,c
  3260  0015D6  C085  F023         	movff	Send_put@_data,UART_buff_put@c
  3261  0015DA  ECB4  F005         	call	_UART_buff_put
  3262                           
  3263                           ;UART.c: 132: if (Transmit_stall == 1) {
  3264  0015DE  0444               	decf	_Transmit_stall,w,c
  3265  0015E0  A4D8               	btfss	status,2,c
  3266  0015E2  0012               	return	
  3267                           
  3268                           ;UART.c: 133: Transmit_stall = 0;
  3269  0015E4  0E00               	movlw	0
  3270  0015E6  6E44               	movwf	_Transmit_stall,c
  3271                           
  3272                           ;UART.c: 134: TXREG1 = UART_buff_get(&output_buffer);
  3273  0015E8  0E00               	movlw	low _output_buffer
  3274  0015EA  6E21               	movwf	UART_buff_get@_this,c
  3275  0015EC  0E04               	movlw	high _output_buffer
  3276  0015EE  6E22               	movwf	UART_buff_get@_this+1,c
  3277  0015F0  EC8A  F008         	call	_UART_buff_get	;wreg free
  3278  0015F4  6EAD               	movwf	4013,c	;volatile
  3279                           
  3280                           ;UART.c: 135: PIE1bits.TX1IE = 1;
  3281  0015F6  889D               	bsf	3997,4,c	;volatile
  3282  0015F8  0012               	return	
  3283  0015FA                     __end_of_Send_put:
  3284                           	opt stack 0
  3285                           tosu	equ	0xFFF
  3286                           tosh	equ	0xFFE
  3287                           tosl	equ	0xFFD
  3288                           pclath	equ	0xFFA
  3289                           tblptru	equ	0xFF8
  3290                           tblptrh	equ	0xFF7
  3291                           tblptrl	equ	0xFF6
  3292                           tablat	equ	0xFF5
  3293                           prodh	equ	0xFF4
  3294                           prodl	equ	0xFF3
  3295                           postinc0	equ	0xFEE
  3296                           wreg	equ	0xFE8
  3297                           indf2	equ	0xFDF
  3298                           postinc2	equ	0xFDE
  3299                           postdec2	equ	0xFDD
  3300                           plusw2	equ	0xFDB
  3301                           fsr2h	equ	0xFDA
  3302                           fsr2l	equ	0xFD9
  3303                           status	equ	0xFD8
  3304                           
  3305 ;; *************** function _UART_buff_put *****************
  3306 ;; Defined at:
  3307 ;;		line 68 in file "UART.c"
  3308 ;; Parameters:    Size  Location     Type
  3309 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  3310 ;;		 -> output_buffer(206), input_buffer(206), 
  3311 ;;  c               1   34[COMRAM] const unsigned char 
  3312 ;; Auto vars:     Size  Location     Type
  3313 ;;		None
  3314 ;; Return value:  Size  Location     Type
  3315 ;;                  1    wreg      void 
  3316 ;; Registers used:
  3317 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3318 ;; Tracked objects:
  3319 ;;		On entry : 0/0
  3320 ;;		On exit  : 0/0
  3321 ;;		Unchanged: 0/0
  3322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3323 ;;      Params:         3       0       0       0       0       0       0
  3324 ;;      Locals:         0       0       0       0       0       0       0
  3325 ;;      Temps:          2       0       0       0       0       0       0
  3326 ;;      Totals:         5       0       0       0       0       0       0
  3327 ;;Total ram usage:        5 bytes
  3328 ;; Hardware stack levels used:    1
  3329 ;; Hardware stack levels required when called:    5
  3330 ;; This function calls:
  3331 ;;		_UART_buff_modulo_inc
  3332 ;; This function is called by:
  3333 ;;		_Send_put
  3334 ;; This function uses a non-reentrant model
  3335 ;;
  3336                           
  3337                           	psect	text13
  3338  000B68                     __ptext13:
  3339                           	opt stack 0
  3340  000B68                     _UART_buff_put:
  3341                           	opt stack 21
  3342                           
  3343                           ;UART.c: 69: if (_this->count < 200) {
  3344                           
  3345                           ;incstack = 0
  3346  000B68  EE20 F0CC          	lfsr	2,204
  3347  000B6C  5021               	movf	UART_buff_put@_this,w,c
  3348  000B6E  26D9               	addwf	fsr2l,f,c
  3349  000B70  5022               	movf	UART_buff_put@_this+1,w,c
  3350  000B72  22DA               	addwfc	fsr2h,f,c
  3351  000B74  0E01               	movlw	1
  3352  000B76  BEDB               	btfsc	plusw2,7,c
  3353  000B78  D007               	goto	l2421
  3354  000B7A  0E01               	movlw	1
  3355  000B7C  50DB               	movf	plusw2,w,c
  3356  000B7E  E13A               	bnz	l2427
  3357  000B80  0EC8               	movlw	200
  3358  000B82  5CDE               	subwf	postinc2,w,c
  3359  000B84  B0D8               	btfsc	status,0,c
  3360  000B86  D036               	goto	l2427
  3361  000B88                     l2421:
  3362                           
  3363                           ;UART.c: 70: _this->buf[_this->head] = c;
  3364  000B88  EE20 F0C8          	lfsr	2,200
  3365  000B8C  5021               	movf	UART_buff_put@_this,w,c
  3366  000B8E  26D9               	addwf	fsr2l,f,c
  3367  000B90  5022               	movf	UART_buff_put@_this+1,w,c
  3368  000B92  22DA               	addwfc	fsr2h,f,c
  3369  000B94  CFDE F024          	movff	postinc2,??_UART_buff_put
  3370  000B98  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3371  000B9C  5024               	movf	??_UART_buff_put,w,c
  3372  000B9E  2421               	addwf	UART_buff_put@_this,w,c
  3373  000BA0  6ED9               	movwf	fsr2l,c
  3374  000BA2  5025               	movf	??_UART_buff_put+1,w,c
  3375  000BA4  2022               	addwfc	UART_buff_put@_this+1,w,c
  3376  000BA6  6EDA               	movwf	fsr2h,c
  3377  000BA8  C023  FFDF         	movff	UART_buff_put@c,indf2
  3378                           
  3379                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3380  000BAC  EE20 F0C8          	lfsr	2,200
  3381  000BB0  5021               	movf	UART_buff_put@_this,w,c
  3382  000BB2  26D9               	addwf	fsr2l,f,c
  3383  000BB4  5022               	movf	UART_buff_put@_this+1,w,c
  3384  000BB6  22DA               	addwfc	fsr2h,f,c
  3385  000BB8  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3386  000BBC  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3387  000BC0  0E00               	movlw	0
  3388  000BC2  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3389  000BC4  0EC8               	movlw	200
  3390  000BC6  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3391  000BC8  EC3F  F00B         	call	_UART_buff_modulo_inc	;wreg free
  3392  000BCC  EE20 F0C8          	lfsr	2,200
  3393  000BD0  5021               	movf	UART_buff_put@_this,w,c
  3394  000BD2  26D9               	addwf	fsr2l,f,c
  3395  000BD4  5022               	movf	UART_buff_put@_this+1,w,c
  3396  000BD6  22DA               	addwfc	fsr2h,f,c
  3397  000BD8  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3398  000BDC  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3399                           
  3400                           ;UART.c: 72: ++_this->count;
  3401  000BE0  EE20 F0CC          	lfsr	2,204
  3402  000BE4  5021               	movf	UART_buff_put@_this,w,c
  3403  000BE6  26D9               	addwf	fsr2l,f,c
  3404  000BE8  5022               	movf	UART_buff_put@_this+1,w,c
  3405  000BEA  22DA               	addwfc	fsr2h,f,c
  3406  000BEC  2ADE               	incf	postinc2,f,c
  3407  000BEE  0E00               	movlw	0
  3408  000BF0  22DD               	addwfc	postdec2,f,c
  3409                           
  3410                           ;UART.c: 73: } else {
  3411  000BF2  0012               	return	
  3412  000BF4                     l2427:
  3413                           
  3414                           ;UART.c: 74: _this->buf[_this->head] = c;
  3415  000BF4  EE20 F0C8          	lfsr	2,200
  3416  000BF8  5021               	movf	UART_buff_put@_this,w,c
  3417  000BFA  26D9               	addwf	fsr2l,f,c
  3418  000BFC  5022               	movf	UART_buff_put@_this+1,w,c
  3419  000BFE  22DA               	addwfc	fsr2h,f,c
  3420  000C00  CFDE F024          	movff	postinc2,??_UART_buff_put
  3421  000C04  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3422  000C08  5024               	movf	??_UART_buff_put,w,c
  3423  000C0A  2421               	addwf	UART_buff_put@_this,w,c
  3424  000C0C  6ED9               	movwf	fsr2l,c
  3425  000C0E  5025               	movf	??_UART_buff_put+1,w,c
  3426  000C10  2022               	addwfc	UART_buff_put@_this+1,w,c
  3427  000C12  6EDA               	movwf	fsr2h,c
  3428  000C14  C023  FFDF         	movff	UART_buff_put@c,indf2
  3429                           
  3430                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3431  000C18  EE20 F0C8          	lfsr	2,200
  3432  000C1C  5021               	movf	UART_buff_put@_this,w,c
  3433  000C1E  26D9               	addwf	fsr2l,f,c
  3434  000C20  5022               	movf	UART_buff_put@_this+1,w,c
  3435  000C22  22DA               	addwfc	fsr2h,f,c
  3436  000C24  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3437  000C28  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3438  000C2C  0E00               	movlw	0
  3439  000C2E  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3440  000C30  0EC8               	movlw	200
  3441  000C32  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3442  000C34  EC3F  F00B         	call	_UART_buff_modulo_inc	;wreg free
  3443  000C38  EE20 F0C8          	lfsr	2,200
  3444  000C3C  5021               	movf	UART_buff_put@_this,w,c
  3445  000C3E  26D9               	addwf	fsr2l,f,c
  3446  000C40  5022               	movf	UART_buff_put@_this+1,w,c
  3447  000C42  22DA               	addwfc	fsr2h,f,c
  3448  000C44  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3449  000C48  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3450                           
  3451                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  3452  000C4C  EE20 F0CA          	lfsr	2,202
  3453  000C50  5021               	movf	UART_buff_put@_this,w,c
  3454  000C52  26D9               	addwf	fsr2l,f,c
  3455  000C54  5022               	movf	UART_buff_put@_this+1,w,c
  3456  000C56  22DA               	addwfc	fsr2h,f,c
  3457  000C58  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3458  000C5C  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3459  000C60  0E00               	movlw	0
  3460  000C62  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3461  000C64  0EC8               	movlw	200
  3462  000C66  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3463  000C68  EC3F  F00B         	call	_UART_buff_modulo_inc	;wreg free
  3464  000C6C  EE20 F0CA          	lfsr	2,202
  3465  000C70  5021               	movf	UART_buff_put@_this,w,c
  3466  000C72  26D9               	addwf	fsr2l,f,c
  3467  000C74  5022               	movf	UART_buff_put@_this+1,w,c
  3468  000C76  22DA               	addwfc	fsr2h,f,c
  3469  000C78  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3470  000C7C  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3471  000C80  0012               	return	
  3472  000C82                     __end_of_UART_buff_put:
  3473                           	opt stack 0
  3474                           tosu	equ	0xFFF
  3475                           tosh	equ	0xFFE
  3476                           tosl	equ	0xFFD
  3477                           pclath	equ	0xFFA
  3478                           tblptru	equ	0xFF8
  3479                           tblptrh	equ	0xFF7
  3480                           tblptrl	equ	0xFF6
  3481                           tablat	equ	0xFF5
  3482                           prodh	equ	0xFF4
  3483                           prodl	equ	0xFF3
  3484                           postinc0	equ	0xFEE
  3485                           wreg	equ	0xFE8
  3486                           indf2	equ	0xFDF
  3487                           postinc2	equ	0xFDE
  3488                           postdec2	equ	0xFDD
  3489                           plusw2	equ	0xFDB
  3490                           fsr2h	equ	0xFDA
  3491                           fsr2l	equ	0xFD9
  3492                           status	equ	0xFD8
  3493                           
  3494 ;; *************** function _Receive_peek *****************
  3495 ;; Defined at:
  3496 ;;		line 118 in file "UART.c"
  3497 ;; Parameters:    Size  Location     Type
  3498 ;;		None
  3499 ;; Auto vars:     Size  Location     Type
  3500 ;;		None
  3501 ;; Return value:  Size  Location     Type
  3502 ;;                  1    wreg      unsigned char 
  3503 ;; Registers used:
  3504 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3505 ;; Tracked objects:
  3506 ;;		On entry : 0/0
  3507 ;;		On exit  : 0/0
  3508 ;;		Unchanged: 0/0
  3509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3510 ;;      Params:         0       0       0       0       0       0       0
  3511 ;;      Locals:         0       0       0       0       0       0       0
  3512 ;;      Temps:          0       0       0       0       0       0       0
  3513 ;;      Totals:         0       0       0       0       0       0       0
  3514 ;;Total ram usage:        0 bytes
  3515 ;; Hardware stack levels used:    1
  3516 ;; Hardware stack levels required when called:    5
  3517 ;; This function calls:
  3518 ;;		_UART_buff_peek
  3519 ;; This function is called by:
  3520 ;;		_ComStart
  3521 ;;		_receiveData
  3522 ;; This function uses a non-reentrant model
  3523 ;;
  3524                           
  3525                           	psect	text14
  3526  001828                     __ptext14:
  3527                           	opt stack 0
  3528  001828                     _Receive_peek:
  3529                           	opt stack 23
  3530                           
  3531                           ;UART.c: 119: return UART_buff_peek(&input_buffer);
  3532                           
  3533                           ;incstack = 0
  3534  001828  0E00               	movlw	low _input_buffer
  3535  00182A  6E1B               	movwf	UART_buff_peek@_this,c
  3536  00182C  0E03               	movlw	high _input_buffer
  3537  00182E  6E1C               	movwf	UART_buff_peek@_this+1,c
  3538  001830  EC69  F00B         	call	_UART_buff_peek	;wreg free
  3539  001834  0012               	return	
  3540  001836                     __end_of_Receive_peek:
  3541                           	opt stack 0
  3542                           tosu	equ	0xFFF
  3543                           tosh	equ	0xFFE
  3544                           tosl	equ	0xFFD
  3545                           pclath	equ	0xFFA
  3546                           tblptru	equ	0xFF8
  3547                           tblptrh	equ	0xFF7
  3548                           tblptrl	equ	0xFF6
  3549                           tablat	equ	0xFF5
  3550                           prodh	equ	0xFF4
  3551                           prodl	equ	0xFF3
  3552                           postinc0	equ	0xFEE
  3553                           wreg	equ	0xFE8
  3554                           indf2	equ	0xFDF
  3555                           postinc2	equ	0xFDE
  3556                           postdec2	equ	0xFDD
  3557                           plusw2	equ	0xFDB
  3558                           fsr2h	equ	0xFDA
  3559                           fsr2l	equ	0xFD9
  3560                           status	equ	0xFD8
  3561                           
  3562 ;; *************** function _UART_buff_peek *****************
  3563 ;; Defined at:
  3564 ;;		line 114 in file "UART.c"
  3565 ;; Parameters:    Size  Location     Type
  3566 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  3567 ;;		 -> input_buffer(206), 
  3568 ;; Auto vars:     Size  Location     Type
  3569 ;;		None
  3570 ;; Return value:  Size  Location     Type
  3571 ;;                  1    wreg      unsigned char 
  3572 ;; Registers used:
  3573 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3574 ;; Tracked objects:
  3575 ;;		On entry : 0/0
  3576 ;;		On exit  : 0/0
  3577 ;;		Unchanged: 0/0
  3578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3579 ;;      Params:         2       0       0       0       0       0       0
  3580 ;;      Locals:         0       0       0       0       0       0       0
  3581 ;;      Temps:          2       0       0       0       0       0       0
  3582 ;;      Totals:         4       0       0       0       0       0       0
  3583 ;;Total ram usage:        4 bytes
  3584 ;; Hardware stack levels used:    1
  3585 ;; Hardware stack levels required when called:    4
  3586 ;; This function calls:
  3587 ;;		Nothing
  3588 ;; This function is called by:
  3589 ;;		_Receive_peek
  3590 ;; This function uses a non-reentrant model
  3591 ;;
  3592                           
  3593                           	psect	text15
  3594  0016D2                     __ptext15:
  3595                           	opt stack 0
  3596  0016D2                     _UART_buff_peek:
  3597                           	opt stack 23
  3598                           
  3599                           ;UART.c: 115: return _this->buf[_this->tail];
  3600                           
  3601                           ;incstack = 0
  3602  0016D2  EE20 F0CA          	lfsr	2,202
  3603  0016D6  501B               	movf	UART_buff_peek@_this,w,c
  3604  0016D8  26D9               	addwf	fsr2l,f,c
  3605  0016DA  501C               	movf	UART_buff_peek@_this+1,w,c
  3606  0016DC  22DA               	addwfc	fsr2h,f,c
  3607  0016DE  CFDE F01D          	movff	postinc2,??_UART_buff_peek
  3608  0016E2  CFDD F01E          	movff	postdec2,??_UART_buff_peek+1
  3609  0016E6  501D               	movf	??_UART_buff_peek,w,c
  3610  0016E8  241B               	addwf	UART_buff_peek@_this,w,c
  3611  0016EA  6ED9               	movwf	fsr2l,c
  3612  0016EC  501E               	movf	??_UART_buff_peek+1,w,c
  3613  0016EE  201C               	addwfc	UART_buff_peek@_this+1,w,c
  3614  0016F0  6EDA               	movwf	fsr2h,c
  3615  0016F2  50DF               	movf	indf2,w,c
  3616  0016F4  0012               	return	
  3617  0016F6                     __end_of_UART_buff_peek:
  3618                           	opt stack 0
  3619                           tosu	equ	0xFFF
  3620                           tosh	equ	0xFFE
  3621                           tosl	equ	0xFFD
  3622                           pclath	equ	0xFFA
  3623                           tblptru	equ	0xFF8
  3624                           tblptrh	equ	0xFF7
  3625                           tblptrl	equ	0xFF6
  3626                           tablat	equ	0xFF5
  3627                           prodh	equ	0xFF4
  3628                           prodl	equ	0xFF3
  3629                           postinc0	equ	0xFEE
  3630                           wreg	equ	0xFE8
  3631                           indf2	equ	0xFDF
  3632                           postinc2	equ	0xFDE
  3633                           postdec2	equ	0xFDD
  3634                           plusw2	equ	0xFDB
  3635                           fsr2h	equ	0xFDA
  3636                           fsr2l	equ	0xFD9
  3637                           status	equ	0xFD8
  3638                           
  3639 ;; *************** function _CRCcheck *****************
  3640 ;; Defined at:
  3641 ;;		line 429 in file "FastTransfer.c"
  3642 ;; Parameters:    Size  Location     Type
  3643 ;;		None
  3644 ;; Auto vars:     Size  Location     Type
  3645 ;;  rt              2    7[BANK0 ] int 
  3646 ;;  arrayHolder     3    4[BANK0 ] unsigned char [3]
  3647 ;;  calculatedCR    1    3[BANK0 ] unsigned char 
  3648 ;;  SentCRC         1    2[BANK0 ] unsigned char 
  3649 ;; Return value:  Size  Location     Type
  3650 ;;                  1    wreg      void 
  3651 ;; Registers used:
  3652 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  3653 ;; Tracked objects:
  3654 ;;		On entry : 0/0
  3655 ;;		On exit  : 0/0
  3656 ;;		Unchanged: 0/0
  3657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3658 ;;      Params:         0       0       0       0       0       0       0
  3659 ;;      Locals:         0       7       0       0       0       0       0
  3660 ;;      Temps:          0       0       0       0       0       0       0
  3661 ;;      Totals:         0       7       0       0       0       0       0
  3662 ;;Total ram usage:        7 bytes
  3663 ;; Hardware stack levels used:    1
  3664 ;; Hardware stack levels required when called:    7
  3665 ;; This function calls:
  3666 ;;		Absolute function
  3667 ;;		_CRC8
  3668 ;;		_Receive_available
  3669 ;;		_Receive_get
  3670 ;;		_crcBufS_get
  3671 ;;		_crcBufS_status_put
  3672 ;; This function is called by:
  3673 ;;		_receiveData
  3674 ;; This function uses a non-reentrant model
  3675 ;;
  3676                           
  3677                           	psect	text16
  3678  0008C2                     __ptext16:
  3679                           	opt stack 0
  3680  0008C2                     _CRCcheck:
  3681                           	opt stack 21
  3682  0008C2                     l2615:
  3683  0008C2  D801               	call	u2668
  3684  0008C4  D00A               	goto	u2669
  3685  0008C6                     u2668:
  3686  0008C6  0005               	push	
  3687  0008C8  6EFA               	movwf	pclath,c
  3688  0008CA  5030               	movf	_serial_available,w,c
  3689  0008CC  6EFD               	movwf	tosl,c
  3690  0008CE  5031               	movf	_serial_available+1,w,c
  3691  0008D0  6EFE               	movwf	tosh,c
  3692  0008D2  50F8               	movf	tblptru,w,c
  3693  0008D4  6EFF               	movwf	tosu,c
  3694  0008D6  50FA               	movf	pclath,w,c
  3695  0008D8  0012               	return		;indir
  3696  0008DA                     u2669:
  3697  0008DA  BE1E               	btfsc	?_Receive_available+1,7,c
  3698  0008DC  D7F2               	goto	l2615
  3699  0008DE  501E               	movf	?_Receive_available+1,w,c
  3700  0008E0  E104               	bnz	l2617
  3701  0008E2  0E04               	movlw	4
  3702  0008E4  5C1D               	subwf	?_Receive_available,w,c
  3703  0008E6  A0D8               	btfss	status,0,c
  3704  0008E8  D7EC               	goto	l2615
  3705  0008EA                     l2617:
  3706                           
  3707                           ;FastTransfer.c: 433: unsigned char arrayHolder[3];
  3708                           ;FastTransfer.c: 434: arrayHolder[0] = serial_read();
  3709  0008EA  D801               	call	u2688
  3710  0008EC  D00A               	goto	u2689
  3711  0008EE                     u2688:
  3712  0008EE  0005               	push	
  3713  0008F0  6EFA               	movwf	pclath,c
  3714  0008F2  5034               	movf	_serial_read,w,c
  3715  0008F4  6EFD               	movwf	tosl,c
  3716  0008F6  5035               	movf	_serial_read+1,w,c
  3717  0008F8  6EFE               	movwf	tosh,c
  3718  0008FA  50F8               	movf	tblptru,w,c
  3719  0008FC  6EFF               	movwf	tosu,c
  3720  0008FE  50FA               	movf	pclath,w,c
  3721  000900  0012               	return		;indir
  3722  000902                     u2689:
  3723  000902  0100               	movlb	0	; () banked
  3724  000904  6F89               	movwf	CRCcheck@arrayHolder& (0+255),b
  3725                           
  3726                           ;FastTransfer.c: 435: arrayHolder[1] = serial_read();
  3727  000906  D801               	call	u2698
  3728  000908  D00A               	goto	u2699
  3729  00090A                     u2698:
  3730  00090A  0005               	push	
  3731  00090C  6EFA               	movwf	pclath,c
  3732  00090E  5034               	movf	_serial_read,w,c
  3733  000910  6EFD               	movwf	tosl,c
  3734  000912  5035               	movf	_serial_read+1,w,c
  3735  000914  6EFE               	movwf	tosh,c
  3736  000916  50F8               	movf	tblptru,w,c
  3737  000918  6EFF               	movwf	tosu,c
  3738  00091A  50FA               	movf	pclath,w,c
  3739  00091C  0012               	return		;indir
  3740  00091E                     u2699:
  3741  00091E  0100               	movlb	0	; () banked
  3742  000920  6F8A               	movwf	(CRCcheck@arrayHolder+1)& (0+255),b
  3743                           
  3744                           ;FastTransfer.c: 436: arrayHolder[2] = serial_read();
  3745  000922  D801               	call	u2708
  3746  000924  D00A               	goto	u2709
  3747  000926                     u2708:
  3748  000926  0005               	push	
  3749  000928  6EFA               	movwf	pclath,c
  3750  00092A  5034               	movf	_serial_read,w,c
  3751  00092C  6EFD               	movwf	tosl,c
  3752  00092E  5035               	movf	_serial_read+1,w,c
  3753  000930  6EFE               	movwf	tosh,c
  3754  000932  50F8               	movf	tblptru,w,c
  3755  000934  6EFF               	movwf	tosu,c
  3756  000936  50FA               	movf	pclath,w,c
  3757  000938  0012               	return		;indir
  3758  00093A                     u2709:
  3759  00093A  0100               	movlb	0	; () banked
  3760  00093C  6F8B               	movwf	(CRCcheck@arrayHolder+2)& (0+255),b
  3761                           
  3762                           ;FastTransfer.c: 437: unsigned char SentCRC = serial_read();
  3763  00093E  D801               	call	u2718
  3764  000940  D00A               	goto	u2719
  3765  000942                     u2718:
  3766  000942  0005               	push	
  3767  000944  6EFA               	movwf	pclath,c
  3768  000946  5034               	movf	_serial_read,w,c
  3769  000948  6EFD               	movwf	tosl,c
  3770  00094A  5035               	movf	_serial_read+1,w,c
  3771  00094C  6EFE               	movwf	tosh,c
  3772  00094E  50F8               	movf	tblptru,w,c
  3773  000950  6EFF               	movwf	tosu,c
  3774  000952  50FA               	movf	pclath,w,c
  3775  000954  0012               	return		;indir
  3776  000956                     u2719:
  3777  000956  0100               	movlb	0	; () banked
  3778  000958  6F87               	movwf	CRCcheck@SentCRC& (0+255),b
  3779                           
  3780                           ; BSR set to: 0
  3781                           ;FastTransfer.c: 438: unsigned char calculatedCRC = CRC8(arrayHolder, 3);
  3782  00095A  0E89               	movlw	low CRCcheck@arrayHolder
  3783  00095C  6E1B               	movwf	CRC8@data,c
  3784  00095E  0E00               	movlw	high CRCcheck@arrayHolder
  3785  000960  6E1C               	movwf	CRC8@data+1,c
  3786  000962  0E03               	movlw	3
  3787  000964  6E1D               	movwf	CRC8@len,c
  3788  000966  EC4C  F00A         	call	_CRC8	;wreg free
  3789  00096A  0100               	movlb	0	; () banked
  3790  00096C  6F88               	movwf	CRCcheck@calculatedCRC& (0+255),b
  3791                           
  3792                           ; BSR set to: 0
  3793                           ;FastTransfer.c: 441: if (SentCRC == calculatedCRC) {
  3794  00096E  0100               	movlb	0	; () banked
  3795  000970  5188               	movf	CRCcheck@calculatedCRC& (0+255),w,b
  3796  000972  0100               	movlb	0	; () banked
  3797  000974  1987               	xorwf	CRCcheck@SentCRC& (0+255),w,b
  3798  000976  A4D8               	btfss	status,2,c
  3799  000978  D04E               	goto	l2647
  3800                           
  3801                           ; BSR set to: 0
  3802                           ;FastTransfer.c: 443: int rt;
  3803                           ;FastTransfer.c: 444: for (rt = 0; rt < 5; rt++) {
  3804  00097A  0E00               	movlw	0
  3805  00097C  0100               	movlb	0	; () banked
  3806  00097E  6F8D               	movwf	(CRCcheck@rt+1)& (0+255),b
  3807  000980  0E00               	movlw	0
  3808  000982  6F8C               	movwf	CRCcheck@rt& (0+255),b
  3809  000984                     l2625:
  3810                           
  3811                           ; BSR set to: 0
  3812  000984  0100               	movlb	0	; () banked
  3813  000986  BF8D               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  3814  000988  D008               	goto	l2629
  3815  00098A  0100               	movlb	0	; () banked
  3816  00098C  518D               	movf	(CRCcheck@rt+1)& (0+255),w,b
  3817  00098E  E146               	bnz	l226
  3818  000990  0E05               	movlw	5
  3819  000992  0100               	movlb	0	; () banked
  3820  000994  5D8C               	subwf	CRCcheck@rt& (0+255),w,b
  3821  000996  B0D8               	btfsc	status,0,c
  3822  000998  0012               	return	
  3823  00099A                     l2629:
  3824                           
  3825                           ; BSR set to: 0
  3826                           ;FastTransfer.c: 445: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  3827  00099A  0E6A               	movlw	low _crc_buffer
  3828  00099C  6E1B               	movwf	crcBufS_get@_this,c
  3829  00099E  0E00               	movlw	high _crc_buffer
  3830  0009A0  6E1C               	movwf	crcBufS_get@_this+1,c
  3831  0009A2  C08C  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3832  0009A6  0E00               	movlw	0
  3833  0009A8  6E1E               	movwf	crcBufS_get@space,c
  3834  0009AA  ECCE  F006         	call	_crcBufS_get	;wreg free
  3835  0009AE  1840               	xorwf	_returnAddress,w,c
  3836  0009B0  A4D8               	btfss	status,2,c
  3837  0009B2  D02D               	goto	l2643
  3838                           
  3839                           ;FastTransfer.c: 446: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  3840  0009B4  0E6A               	movlw	low _crc_buffer
  3841  0009B6  6E1B               	movwf	crcBufS_get@_this,c
  3842  0009B8  0E00               	movlw	high _crc_buffer
  3843  0009BA  6E1C               	movwf	crcBufS_get@_this+1,c
  3844  0009BC  C08C  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3845  0009C0  0E01               	movlw	1
  3846  0009C2  6E1E               	movwf	crcBufS_get@space,c
  3847  0009C4  ECCE  F006         	call	_crcBufS_get	;wreg free
  3848  0009C8  0100               	movlb	0	; () banked
  3849  0009CA  198B               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  3850  0009CC  A4D8               	btfss	status,2,c
  3851  0009CE  D01F               	goto	l2643
  3852                           
  3853                           ; BSR set to: 0
  3854                           ;FastTransfer.c: 447: if (arrayHolder[1] == 1) {
  3855  0009D0  0100               	movlb	0	; () banked
  3856  0009D2  058A               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3857  0009D4  A4D8               	btfss	status,2,c
  3858  0009D6  D00B               	goto	l2639
  3859                           
  3860                           ; BSR set to: 0
  3861                           ;FastTransfer.c: 448: crcBufS_status_put(&crc_buffer, rt, 1);
  3862  0009D8  0E6A               	movlw	low _crc_buffer
  3863  0009DA  6E1B               	movwf	crcBufS_status_put@_this,c
  3864  0009DC  0E00               	movlw	high _crc_buffer
  3865  0009DE  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3866  0009E0  C08C  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3867  0009E4  0E01               	movlw	1
  3868  0009E6  6E1E               	movwf	crcBufS_status_put@status,c
  3869  0009E8  EC1F  F008         	call	_crcBufS_status_put	;wreg free
  3870                           
  3871                           ;FastTransfer.c: 449: break;
  3872  0009EC  0012               	return	
  3873  0009EE                     l2639:
  3874  0009EE  0E02               	movlw	2
  3875  0009F0  0100               	movlb	0	; () banked
  3876  0009F2  198A               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3877  0009F4  A4D8               	btfss	status,2,c
  3878  0009F6  D00B               	goto	l2643
  3879                           
  3880                           ; BSR set to: 0
  3881                           ;FastTransfer.c: 451: crcBufS_status_put(&crc_buffer, rt, 2);
  3882  0009F8  0E6A               	movlw	low _crc_buffer
  3883  0009FA  6E1B               	movwf	crcBufS_status_put@_this,c
  3884  0009FC  0E00               	movlw	high _crc_buffer
  3885  0009FE  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3886  000A00  C08C  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3887  000A04  0E02               	movlw	2
  3888  000A06  6E1E               	movwf	crcBufS_status_put@status,c
  3889  000A08  EC1F  F008         	call	_crcBufS_status_put	;wreg free
  3890                           
  3891                           ;FastTransfer.c: 452: break;
  3892  000A0C  0012               	return	
  3893  000A0E                     l2643:
  3894  000A0E  0100               	movlb	0	; () banked
  3895  000A10  4B8C               	infsnz	CRCcheck@rt& (0+255),f,b
  3896  000A12  2B8D               	incf	(CRCcheck@rt+1)& (0+255),f,b
  3897  000A14  D7B7               	goto	l2625
  3898  000A16                     l2647:
  3899                           
  3900                           ; BSR set to: 0
  3901                           ;FastTransfer.c: 458: crcErrorCounter++;
  3902  000A16  4A28               	infsnz	_crcErrorCounter,f,c
  3903  000A18  2A29               	incf	_crcErrorCounter+1,f,c
  3904  000A1A  0012               	return	
  3905  000A1C                     l226:
  3906  000A1C  0012               	return		;funcret
  3907  000A1E                     __end_of_CRCcheck:
  3908                           	opt stack 0
  3909                           tosu	equ	0xFFF
  3910                           tosh	equ	0xFFE
  3911                           tosl	equ	0xFFD
  3912                           pclath	equ	0xFFA
  3913                           tblptru	equ	0xFF8
  3914                           tblptrh	equ	0xFF7
  3915                           tblptrl	equ	0xFF6
  3916                           tablat	equ	0xFF5
  3917                           prodh	equ	0xFF4
  3918                           prodl	equ	0xFF3
  3919                           postinc0	equ	0xFEE
  3920                           wreg	equ	0xFE8
  3921                           indf2	equ	0xFDF
  3922                           postinc2	equ	0xFDE
  3923                           postdec2	equ	0xFDD
  3924                           plusw2	equ	0xFDB
  3925                           fsr2h	equ	0xFDA
  3926                           fsr2l	equ	0xFD9
  3927                           status	equ	0xFD8
  3928                           
  3929 ;; *************** function _crcBufS_status_put *****************
  3930 ;; Defined at:
  3931 ;;		line 392 in file "FastTransfer.c"
  3932 ;; Parameters:    Size  Location     Type
  3933 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3934 ;;		 -> crc_buffer(17), 
  3935 ;;  time            1   28[COMRAM] unsigned char 
  3936 ;;  status          1   29[COMRAM] unsigned char 
  3937 ;; Auto vars:     Size  Location     Type
  3938 ;;  wantedTime      2   34[COMRAM] int 
  3939 ;; Return value:  Size  Location     Type
  3940 ;;                  1    wreg      void 
  3941 ;; Registers used:
  3942 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3943 ;; Tracked objects:
  3944 ;;		On entry : 0/0
  3945 ;;		On exit  : 0/0
  3946 ;;		Unchanged: 0/0
  3947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3948 ;;      Params:         4       0       0       0       0       0       0
  3949 ;;      Locals:         2       0       0       0       0       0       0
  3950 ;;      Temps:          4       0       0       0       0       0       0
  3951 ;;      Totals:        10       0       0       0       0       0       0
  3952 ;;Total ram usage:       10 bytes
  3953 ;; Hardware stack levels used:    1
  3954 ;; Hardware stack levels required when called:    4
  3955 ;; This function calls:
  3956 ;;		Nothing
  3957 ;; This function is called by:
  3958 ;;		_CRCcheck
  3959 ;; This function uses a non-reentrant model
  3960 ;;
  3961                           
  3962                           	psect	text17
  3963  00103E                     __ptext17:
  3964                           	opt stack 0
  3965  00103E                     _crcBufS_status_put:
  3966                           	opt stack 23
  3967                           
  3968                           ;FastTransfer.c: 393: if (time >= 5) {
  3969                           
  3970                           ;incstack = 0
  3971  00103E  0E04               	movlw	4
  3972  001040  641D               	cpfsgt	crcBufS_status_put@time,c
  3973  001042  D002               	goto	l2529
  3974                           
  3975                           ;FastTransfer.c: 394: time = 5 - 1;
  3976  001044  0E04               	movlw	4
  3977  001046  6E1D               	movwf	crcBufS_status_put@time,c
  3978  001048                     l2529:
  3979                           
  3980                           ;FastTransfer.c: 395: }
  3981                           ;FastTransfer.c: 396: time = time + 1;
  3982  001048  281D               	incf	crcBufS_status_put@time,w,c
  3983  00104A  6E1D               	movwf	crcBufS_status_put@time,c
  3984                           
  3985                           ;FastTransfer.c: 397: int wantedTime = time * 3;
  3986  00104C  501D               	movf	crcBufS_status_put@time,w,c
  3987  00104E  0D03               	mullw	3
  3988  001050  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  3989  001054  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  3990                           
  3991                           ;FastTransfer.c: 398: if (wantedTime > _this->head) {
  3992  001058  EE20 F00F          	lfsr	2,15
  3993  00105C  501B               	movf	crcBufS_status_put@_this,w,c
  3994  00105E  26D9               	addwf	fsr2l,f,c
  3995  001060  501C               	movf	crcBufS_status_put@_this+1,w,c
  3996  001062  22DA               	addwfc	fsr2h,f,c
  3997  001064  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3998  001066  5CDE               	subwf	postinc2,w,c
  3999  001068  50DE               	movf	postinc2,w,c
  4000  00106A  0A80               	xorlw	128
  4001  00106C  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  4002  00106E  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4003  001070  0A80               	xorlw	128
  4004  001072  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  4005  001074  B0D8               	btfsc	status,0,c
  4006  001076  D02B               	goto	l2537
  4007                           
  4008                           ;FastTransfer.c: 399: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4009  001078  EE20 F00F          	lfsr	2,15
  4010  00107C  501B               	movf	crcBufS_status_put@_this,w,c
  4011  00107E  26D9               	addwf	fsr2l,f,c
  4012  001080  501C               	movf	crcBufS_status_put@_this+1,w,c
  4013  001082  22DA               	addwfc	fsr2h,f,c
  4014  001084  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4015  001088  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4016  00108C  1E1F               	comf	??_crcBufS_status_put,f,c
  4017  00108E  1E20               	comf	??_crcBufS_status_put+1,f,c
  4018  001090  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4019  001092  2A20               	incf	??_crcBufS_status_put+1,f,c
  4020  001094  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4021  001096  261F               	addwf	??_crcBufS_status_put,f,c
  4022  001098  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4023  00109A  2220               	addwfc	??_crcBufS_status_put+1,f,c
  4024  00109C  1E1F               	comf	??_crcBufS_status_put,f,c
  4025  00109E  1E20               	comf	??_crcBufS_status_put+1,f,c
  4026  0010A0  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4027  0010A2  2A20               	incf	??_crcBufS_status_put+1,f,c
  4028  0010A4  0E0F               	movlw	15
  4029  0010A6  241F               	addwf	??_crcBufS_status_put,w,c
  4030  0010A8  6E23               	movwf	crcBufS_status_put@wantedTime,c
  4031  0010AA  0E00               	movlw	0
  4032  0010AC  2020               	addwfc	??_crcBufS_status_put+1,w,c
  4033  0010AE  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  4034                           
  4035                           ;FastTransfer.c: 400: _this->buf[(wantedTime + 2)] = status;
  4036  0010B0  0E02               	movlw	2
  4037  0010B2  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  4038  0010B4  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  4039  0010B6  0E00               	movlw	0
  4040  0010B8  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  4041  0010BA  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  4042  0010BC  501F               	movf	??_crcBufS_status_put,w,c
  4043  0010BE  241B               	addwf	crcBufS_status_put@_this,w,c
  4044  0010C0  6ED9               	movwf	fsr2l,c
  4045  0010C2  5020               	movf	??_crcBufS_status_put+1,w,c
  4046  0010C4  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4047  0010C6  6EDA               	movwf	fsr2h,c
  4048  0010C8  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4049                           
  4050                           ;FastTransfer.c: 401: } else {
  4051  0010CC  0012               	return	
  4052  0010CE                     l2537:
  4053                           
  4054                           ;FastTransfer.c: 402: _this->buf[(_this->head - wantedTime) + 2] = status;
  4055  0010CE  EE20 F00F          	lfsr	2,15
  4056  0010D2  501B               	movf	crcBufS_status_put@_this,w,c
  4057  0010D4  26D9               	addwf	fsr2l,f,c
  4058  0010D6  501C               	movf	crcBufS_status_put@_this+1,w,c
  4059  0010D8  22DA               	addwfc	fsr2h,f,c
  4060  0010DA  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4061  0010DE  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4062  0010E2  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  4063  0010E6  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  4064  0010EA  1E21               	comf	??_crcBufS_status_put+2,f,c
  4065  0010EC  1E22               	comf	??_crcBufS_status_put+3,f,c
  4066  0010EE  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  4067  0010F0  2A22               	incf	??_crcBufS_status_put+3,f,c
  4068  0010F2  501F               	movf	??_crcBufS_status_put,w,c
  4069  0010F4  2621               	addwf	??_crcBufS_status_put+2,f,c
  4070  0010F6  5020               	movf	??_crcBufS_status_put+1,w,c
  4071  0010F8  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4072  0010FA  0E02               	movlw	2
  4073  0010FC  2621               	addwf	??_crcBufS_status_put+2,f,c
  4074  0010FE  0E00               	movlw	0
  4075  001100  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4076  001102  5021               	movf	??_crcBufS_status_put+2,w,c
  4077  001104  241B               	addwf	crcBufS_status_put@_this,w,c
  4078  001106  6ED9               	movwf	fsr2l,c
  4079  001108  5022               	movf	??_crcBufS_status_put+3,w,c
  4080  00110A  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4081  00110C  6EDA               	movwf	fsr2h,c
  4082  00110E  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4083  001112  0012               	return	
  4084  001114                     __end_of_crcBufS_status_put:
  4085                           	opt stack 0
  4086                           tosu	equ	0xFFF
  4087                           tosh	equ	0xFFE
  4088                           tosl	equ	0xFFD
  4089                           pclath	equ	0xFFA
  4090                           tblptru	equ	0xFF8
  4091                           tblptrh	equ	0xFF7
  4092                           tblptrl	equ	0xFF6
  4093                           tablat	equ	0xFF5
  4094                           prodh	equ	0xFF4
  4095                           prodl	equ	0xFF3
  4096                           postinc0	equ	0xFEE
  4097                           wreg	equ	0xFE8
  4098                           indf2	equ	0xFDF
  4099                           postinc2	equ	0xFDE
  4100                           postdec2	equ	0xFDD
  4101                           plusw2	equ	0xFDB
  4102                           fsr2h	equ	0xFDA
  4103                           fsr2l	equ	0xFD9
  4104                           status	equ	0xFD8
  4105                           
  4106 ;; *************** function _crcBufS_get *****************
  4107 ;; Defined at:
  4108 ;;		line 409 in file "FastTransfer.c"
  4109 ;; Parameters:    Size  Location     Type
  4110 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4111 ;;		 -> crc_buffer(17), 
  4112 ;;  time            1   28[COMRAM] unsigned char 
  4113 ;;  space           1   29[COMRAM] unsigned char 
  4114 ;; Auto vars:     Size  Location     Type
  4115 ;;  wantedTime      2    0[BANK0 ] int 
  4116 ;; Return value:  Size  Location     Type
  4117 ;;                  1    wreg      unsigned char 
  4118 ;; Registers used:
  4119 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4120 ;; Tracked objects:
  4121 ;;		On entry : 0/0
  4122 ;;		On exit  : 0/0
  4123 ;;		Unchanged: 0/0
  4124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4125 ;;      Params:         4       0       0       0       0       0       0
  4126 ;;      Locals:         0       2       0       0       0       0       0
  4127 ;;      Temps:          6       0       0       0       0       0       0
  4128 ;;      Totals:        10       2       0       0       0       0       0
  4129 ;;Total ram usage:       12 bytes
  4130 ;; Hardware stack levels used:    1
  4131 ;; Hardware stack levels required when called:    4
  4132 ;; This function calls:
  4133 ;;		Nothing
  4134 ;; This function is called by:
  4135 ;;		_CRCcheck
  4136 ;;		_AKNAK
  4137 ;; This function uses a non-reentrant model
  4138 ;;
  4139                           
  4140                           	psect	text18
  4141  000D9C                     __ptext18:
  4142                           	opt stack 0
  4143  000D9C                     _crcBufS_get:
  4144                           	opt stack 23
  4145                           
  4146                           ;FastTransfer.c: 410: if (time >= 5) {
  4147                           
  4148                           ;incstack = 0
  4149  000D9C  0E04               	movlw	4
  4150  000D9E  641D               	cpfsgt	crcBufS_get@time,c
  4151  000DA0  D002               	goto	l2505
  4152                           
  4153                           ;FastTransfer.c: 411: time = 5 - 1;
  4154  000DA2  0E04               	movlw	4
  4155  000DA4  6E1D               	movwf	crcBufS_get@time,c
  4156  000DA6                     l2505:
  4157                           
  4158                           ;FastTransfer.c: 412: }
  4159                           ;FastTransfer.c: 413: if (space >= 3) {
  4160  000DA6  0E02               	movlw	2
  4161  000DA8  641E               	cpfsgt	crcBufS_get@space,c
  4162  000DAA  D002               	goto	l2509
  4163                           
  4164                           ;FastTransfer.c: 414: space = 3 - 1;
  4165  000DAC  0E02               	movlw	2
  4166  000DAE  6E1E               	movwf	crcBufS_get@space,c
  4167  000DB0                     l2509:
  4168                           
  4169                           ;FastTransfer.c: 415: }
  4170                           ;FastTransfer.c: 416: time = time + 1;
  4171  000DB0  281D               	incf	crcBufS_get@time,w,c
  4172  000DB2  6E1D               	movwf	crcBufS_get@time,c
  4173                           
  4174                           ;FastTransfer.c: 417: int wantedTime = time * 3;
  4175  000DB4  501D               	movf	crcBufS_get@time,w,c
  4176  000DB6  0D03               	mullw	3
  4177  000DB8  CFF3 F085          	movff	prodl,crcBufS_get@wantedTime
  4178  000DBC  CFF4 F086          	movff	prodh,crcBufS_get@wantedTime+1
  4179                           
  4180                           ;FastTransfer.c: 418: if (wantedTime > _this->head) {
  4181  000DC0  EE20 F00F          	lfsr	2,15
  4182  000DC4  501B               	movf	crcBufS_get@_this,w,c
  4183  000DC6  26D9               	addwf	fsr2l,f,c
  4184  000DC8  501C               	movf	crcBufS_get@_this+1,w,c
  4185  000DCA  22DA               	addwfc	fsr2h,f,c
  4186  000DCC  0100               	movlb	0	; () banked
  4187  000DCE  5185               	movf	crcBufS_get@wantedTime& (0+255),w,b
  4188  000DD0  5CDE               	subwf	postinc2,w,c
  4189  000DD2  50DE               	movf	postinc2,w,c
  4190  000DD4  0A80               	xorlw	128
  4191  000DD6  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  4192  000DD8  0100               	movlb	0	; () banked
  4193  000DDA  5186               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4194  000DDC  0A80               	xorlw	128
  4195  000DDE  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  4196  000DE0  B0D8               	btfsc	status,0,c
  4197  000DE2  D030               	goto	l2521
  4198                           
  4199                           ; BSR set to: 0
  4200                           ;FastTransfer.c: 419: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4201  000DE4  EE20 F00F          	lfsr	2,15
  4202  000DE8  501B               	movf	crcBufS_get@_this,w,c
  4203  000DEA  26D9               	addwf	fsr2l,f,c
  4204  000DEC  501C               	movf	crcBufS_get@_this+1,w,c
  4205  000DEE  22DA               	addwfc	fsr2h,f,c
  4206  000DF0  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4207  000DF4  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4208  000DF8  1E1F               	comf	??_crcBufS_get,f,c
  4209  000DFA  1E20               	comf	??_crcBufS_get+1,f,c
  4210  000DFC  4A1F               	infsnz	??_crcBufS_get,f,c
  4211  000DFE  2A20               	incf	??_crcBufS_get+1,f,c
  4212  000E00  0100               	movlb	0	; () banked
  4213  000E02  5185               	movf	crcBufS_get@wantedTime& (0+255),w,b
  4214  000E04  261F               	addwf	??_crcBufS_get,f,c
  4215  000E06  0100               	movlb	0	; () banked
  4216  000E08  5186               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4217  000E0A  2220               	addwfc	??_crcBufS_get+1,f,c
  4218  000E0C  1E1F               	comf	??_crcBufS_get,f,c
  4219  000E0E  1E20               	comf	??_crcBufS_get+1,f,c
  4220  000E10  4A1F               	infsnz	??_crcBufS_get,f,c
  4221  000E12  2A20               	incf	??_crcBufS_get+1,f,c
  4222  000E14  0E0F               	movlw	15
  4223  000E16  241F               	addwf	??_crcBufS_get,w,c
  4224  000E18  0100               	movlb	0	; () banked
  4225  000E1A  6F85               	movwf	crcBufS_get@wantedTime& (0+255),b
  4226  000E1C  0E00               	movlw	0
  4227  000E1E  2020               	addwfc	??_crcBufS_get+1,w,c
  4228  000E20  0100               	movlb	0	; () banked
  4229  000E22  6F86               	movwf	(crcBufS_get@wantedTime+1)& (0+255),b
  4230                           
  4231                           ;FastTransfer.c: 420: return (_this->buf[(wantedTime + space)]);
  4232  000E24  501E               	movf	crcBufS_get@space,w,c
  4233  000E26  0100               	movlb	0	; () banked
  4234  000E28  2585               	addwf	crcBufS_get@wantedTime& (0+255),w,b
  4235  000E2A  6E1F               	movwf	??_crcBufS_get& (0+255),c
  4236  000E2C  0E00               	movlw	0
  4237  000E2E  0100               	movlb	0	; () banked
  4238  000E30  2186               	addwfc	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4239  000E32  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  4240  000E34  501F               	movf	??_crcBufS_get,w,c
  4241  000E36  241B               	addwf	crcBufS_get@_this,w,c
  4242  000E38  6ED9               	movwf	fsr2l,c
  4243  000E3A  5020               	movf	??_crcBufS_get+1,w,c
  4244  000E3C  201C               	addwfc	crcBufS_get@_this+1,w,c
  4245  000E3E  6EDA               	movwf	fsr2h,c
  4246  000E40  50DF               	movf	indf2,w,c
  4247                           
  4248                           ; BSR set to: 0
  4249                           ;FastTransfer.c: 421: } else {
  4250                           
  4251                           ; BSR set to: 0
  4252  000E42  0012               	return	
  4253  000E44                     l2521:
  4254                           
  4255                           ; BSR set to: 0
  4256                           ;FastTransfer.c: 422: return (_this->buf[(_this->head - wantedTime) + space]);
  4257  000E44  EE20 F00F          	lfsr	2,15
  4258  000E48  501B               	movf	crcBufS_get@_this,w,c
  4259  000E4A  26D9               	addwf	fsr2l,f,c
  4260  000E4C  501C               	movf	crcBufS_get@_this+1,w,c
  4261  000E4E  22DA               	addwfc	fsr2h,f,c
  4262  000E50  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4263  000E54  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4264  000E58  C085  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  4265  000E5C  C086  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  4266  000E60  1E21               	comf	??_crcBufS_get+2,f,c
  4267  000E62  1E22               	comf	??_crcBufS_get+3,f,c
  4268  000E64  4A21               	infsnz	??_crcBufS_get+2,f,c
  4269  000E66  2A22               	incf	??_crcBufS_get+3,f,c
  4270  000E68  501E               	movf	crcBufS_get@space,w,c
  4271  000E6A  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  4272  000E6C  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  4273  000E6E  5021               	movf	??_crcBufS_get+2,w,c
  4274  000E70  2623               	addwf	??_crcBufS_get+4,f,c
  4275  000E72  5022               	movf	??_crcBufS_get+3,w,c
  4276  000E74  2224               	addwfc	??_crcBufS_get+5,f,c
  4277  000E76  501F               	movf	??_crcBufS_get,w,c
  4278  000E78  2623               	addwf	??_crcBufS_get+4,f,c
  4279  000E7A  5020               	movf	??_crcBufS_get+1,w,c
  4280  000E7C  2224               	addwfc	??_crcBufS_get+5,f,c
  4281  000E7E  5023               	movf	??_crcBufS_get+4,w,c
  4282  000E80  241B               	addwf	crcBufS_get@_this,w,c
  4283  000E82  6ED9               	movwf	fsr2l,c
  4284  000E84  5024               	movf	??_crcBufS_get+5,w,c
  4285  000E86  201C               	addwfc	crcBufS_get@_this+1,w,c
  4286  000E88  6EDA               	movwf	fsr2h,c
  4287  000E8A  50DF               	movf	indf2,w,c
  4288                           
  4289                           ; BSR set to: 0
  4290  000E8C  0012               	return	
  4291  000E8E                     __end_of_crcBufS_get:
  4292                           	opt stack 0
  4293                           tosu	equ	0xFFF
  4294                           tosh	equ	0xFFE
  4295                           tosl	equ	0xFFD
  4296                           pclath	equ	0xFFA
  4297                           tblptru	equ	0xFF8
  4298                           tblptrh	equ	0xFF7
  4299                           tblptrl	equ	0xFF6
  4300                           tablat	equ	0xFF5
  4301                           prodh	equ	0xFF4
  4302                           prodl	equ	0xFF3
  4303                           postinc0	equ	0xFEE
  4304                           wreg	equ	0xFE8
  4305                           indf2	equ	0xFDF
  4306                           postinc2	equ	0xFDE
  4307                           postdec2	equ	0xFDD
  4308                           plusw2	equ	0xFDB
  4309                           fsr2h	equ	0xFDA
  4310                           fsr2l	equ	0xFD9
  4311                           status	equ	0xFD8
  4312                           
  4313 ;; *************** function _Receive_get *****************
  4314 ;; Defined at:
  4315 ;;		line 126 in file "UART.c"
  4316 ;; Parameters:    Size  Location     Type
  4317 ;;		None
  4318 ;; Auto vars:     Size  Location     Type
  4319 ;;		None
  4320 ;; Return value:  Size  Location     Type
  4321 ;;                  1    wreg      unsigned char 
  4322 ;; Registers used:
  4323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4324 ;; Tracked objects:
  4325 ;;		On entry : 0/0
  4326 ;;		On exit  : 0/0
  4327 ;;		Unchanged: 0/0
  4328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4329 ;;      Params:         0       0       0       0       0       0       0
  4330 ;;      Locals:         0       0       0       0       0       0       0
  4331 ;;      Temps:          0       0       0       0       0       0       0
  4332 ;;      Totals:         0       0       0       0       0       0       0
  4333 ;;Total ram usage:        0 bytes
  4334 ;; Hardware stack levels used:    1
  4335 ;; Hardware stack levels required when called:    6
  4336 ;; This function calls:
  4337 ;;		_UART_buff_get
  4338 ;; This function is called by:
  4339 ;;		_ComStart
  4340 ;;		_getch
  4341 ;;		_CRCcheck
  4342 ;;		_receiveData
  4343 ;; This function uses a non-reentrant model
  4344 ;;
  4345                           
  4346                           	psect	text19
  4347  001836                     __ptext19:
  4348                           	opt stack 0
  4349  001836                     _Receive_get:
  4350                           	opt stack 22
  4351                           
  4352                           ;UART.c: 127: return UART_buff_get(&input_buffer);
  4353                           
  4354                           ; BSR set to: 0
  4355                           ;incstack = 0
  4356  001836  0E00               	movlw	low _input_buffer
  4357  001838  6E21               	movwf	UART_buff_get@_this,c
  4358  00183A  0E03               	movlw	high _input_buffer
  4359  00183C  6E22               	movwf	UART_buff_get@_this+1,c
  4360  00183E  EC8A  F008         	call	_UART_buff_get	;wreg free
  4361  001842  0012               	return	
  4362  001844                     __end_of_Receive_get:
  4363                           	opt stack 0
  4364                           tosu	equ	0xFFF
  4365                           tosh	equ	0xFFE
  4366                           tosl	equ	0xFFD
  4367                           pclath	equ	0xFFA
  4368                           tblptru	equ	0xFF8
  4369                           tblptrh	equ	0xFF7
  4370                           tblptrl	equ	0xFF6
  4371                           tablat	equ	0xFF5
  4372                           prodh	equ	0xFF4
  4373                           prodl	equ	0xFF3
  4374                           postinc0	equ	0xFEE
  4375                           wreg	equ	0xFE8
  4376                           indf2	equ	0xFDF
  4377                           postinc2	equ	0xFDE
  4378                           postdec2	equ	0xFDD
  4379                           plusw2	equ	0xFDB
  4380                           fsr2h	equ	0xFDA
  4381                           fsr2l	equ	0xFD9
  4382                           status	equ	0xFD8
  4383                           
  4384 ;; *************** function _UART_buff_get *****************
  4385 ;; Defined at:
  4386 ;;		line 81 in file "UART.c"
  4387 ;; Parameters:    Size  Location     Type
  4388 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  4389 ;;		 -> output_buffer(206), input_buffer(206), 
  4390 ;; Auto vars:     Size  Location     Type
  4391 ;;  c               1   36[COMRAM] unsigned char 
  4392 ;; Return value:  Size  Location     Type
  4393 ;;                  1    wreg      unsigned char 
  4394 ;; Registers used:
  4395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4396 ;; Tracked objects:
  4397 ;;		On entry : 0/0
  4398 ;;		On exit  : 0/0
  4399 ;;		Unchanged: 0/0
  4400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4401 ;;      Params:         2       0       0       0       0       0       0
  4402 ;;      Locals:         1       0       0       0       0       0       0
  4403 ;;      Temps:          2       0       0       0       0       0       0
  4404 ;;      Totals:         5       0       0       0       0       0       0
  4405 ;;Total ram usage:        5 bytes
  4406 ;; Hardware stack levels used:    1
  4407 ;; Hardware stack levels required when called:    5
  4408 ;; This function calls:
  4409 ;;		_UART_buff_modulo_inc
  4410 ;; This function is called by:
  4411 ;;		_Receive_get
  4412 ;;		_Send_put
  4413 ;; This function uses a non-reentrant model
  4414 ;;
  4415                           
  4416                           	psect	text20
  4417  001114                     __ptext20:
  4418                           	opt stack 0
  4419  001114                     _UART_buff_get:
  4420                           	opt stack 21
  4421                           
  4422                           ;UART.c: 82: unsigned char c;
  4423                           ;UART.c: 83: if (_this->count > 0) {
  4424                           
  4425                           ;incstack = 0
  4426  001114  EE20 F0CC          	lfsr	2,204
  4427  001118  5021               	movf	UART_buff_get@_this,w,c
  4428  00111A  26D9               	addwf	fsr2l,f,c
  4429  00111C  5022               	movf	UART_buff_get@_this+1,w,c
  4430  00111E  22DA               	addwfc	fsr2h,f,c
  4431  001120  0E01               	movlw	1
  4432  001122  BEDB               	btfsc	plusw2,7,c
  4433  001124  D03C               	goto	l2441
  4434  001126  0E01               	movlw	1
  4435  001128  50DB               	movf	plusw2,w,c
  4436  00112A  E103               	bnz	u2450
  4437  00112C  04DE               	decf	postinc2,w,c
  4438  00112E  A0D8               	btfss	status,0,c
  4439  001130  D036               	goto	l2441
  4440  001132                     u2450:
  4441                           
  4442                           ;UART.c: 84: c = _this->buf[_this->tail];
  4443  001132  EE20 F0CA          	lfsr	2,202
  4444  001136  5021               	movf	UART_buff_get@_this,w,c
  4445  001138  26D9               	addwf	fsr2l,f,c
  4446  00113A  5022               	movf	UART_buff_get@_this+1,w,c
  4447  00113C  22DA               	addwfc	fsr2h,f,c
  4448  00113E  CFDE F023          	movff	postinc2,??_UART_buff_get
  4449  001142  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  4450  001146  5023               	movf	??_UART_buff_get,w,c
  4451  001148  2421               	addwf	UART_buff_get@_this,w,c
  4452  00114A  6ED9               	movwf	fsr2l,c
  4453  00114C  5024               	movf	??_UART_buff_get+1,w,c
  4454  00114E  2022               	addwfc	UART_buff_get@_this+1,w,c
  4455  001150  6EDA               	movwf	fsr2h,c
  4456  001152  50DF               	movf	indf2,w,c
  4457  001154  6E25               	movwf	UART_buff_get@c,c
  4458                           
  4459                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  4460  001156  EE20 F0CA          	lfsr	2,202
  4461  00115A  5021               	movf	UART_buff_get@_this,w,c
  4462  00115C  26D9               	addwf	fsr2l,f,c
  4463  00115E  5022               	movf	UART_buff_get@_this+1,w,c
  4464  001160  22DA               	addwfc	fsr2h,f,c
  4465  001162  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  4466  001166  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  4467  00116A  0E00               	movlw	0
  4468  00116C  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  4469  00116E  0EC8               	movlw	200
  4470  001170  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  4471  001172  EC3F  F00B         	call	_UART_buff_modulo_inc	;wreg free
  4472  001176  EE20 F0CA          	lfsr	2,202
  4473  00117A  5021               	movf	UART_buff_get@_this,w,c
  4474  00117C  26D9               	addwf	fsr2l,f,c
  4475  00117E  5022               	movf	UART_buff_get@_this+1,w,c
  4476  001180  22DA               	addwfc	fsr2h,f,c
  4477  001182  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4478  001186  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4479                           
  4480                           ;UART.c: 86: --_this->count;
  4481  00118A  EE20 F0CC          	lfsr	2,204
  4482  00118E  5021               	movf	UART_buff_get@_this,w,c
  4483  001190  26D9               	addwf	fsr2l,f,c
  4484  001192  5022               	movf	UART_buff_get@_this+1,w,c
  4485  001194  22DA               	addwfc	fsr2h,f,c
  4486  001196  06DE               	decf	postinc2,f,c
  4487  001198  0E00               	movlw	0
  4488  00119A  5ADD               	subwfb	postdec2,f,c
  4489                           
  4490                           ;UART.c: 87: } else {
  4491  00119C  D002               	goto	l290
  4492  00119E                     l2441:
  4493                           
  4494                           ;UART.c: 88: c = 0;
  4495  00119E  0E00               	movlw	0
  4496  0011A0  6E25               	movwf	UART_buff_get@c,c
  4497  0011A2                     l290:
  4498                           
  4499                           ;UART.c: 89: }
  4500                           ;UART.c: 90: return (c);
  4501  0011A2  5025               	movf	UART_buff_get@c,w,c
  4502  0011A4  0012               	return	
  4503  0011A6                     __end_of_UART_buff_get:
  4504                           	opt stack 0
  4505                           tosu	equ	0xFFF
  4506                           tosh	equ	0xFFE
  4507                           tosl	equ	0xFFD
  4508                           pclath	equ	0xFFA
  4509                           tblptru	equ	0xFF8
  4510                           tblptrh	equ	0xFF7
  4511                           tblptrl	equ	0xFF6
  4512                           tablat	equ	0xFF5
  4513                           prodh	equ	0xFF4
  4514                           prodl	equ	0xFF3
  4515                           postinc0	equ	0xFEE
  4516                           wreg	equ	0xFE8
  4517                           indf2	equ	0xFDF
  4518                           postinc2	equ	0xFDE
  4519                           postdec2	equ	0xFDD
  4520                           plusw2	equ	0xFDB
  4521                           fsr2h	equ	0xFDA
  4522                           fsr2l	equ	0xFD9
  4523                           status	equ	0xFD8
  4524                           
  4525 ;; *************** function _UART_buff_modulo_inc *****************
  4526 ;; Defined at:
  4527 ;;		line 106 in file "UART.c"
  4528 ;; Parameters:    Size  Location     Type
  4529 ;;  value           2   26[COMRAM] const unsigned int 
  4530 ;;  modulus         2   28[COMRAM] const unsigned int 
  4531 ;; Auto vars:     Size  Location     Type
  4532 ;;  my_value        2   30[COMRAM] unsigned int 
  4533 ;; Return value:  Size  Location     Type
  4534 ;;                  2   26[COMRAM] unsigned int 
  4535 ;; Registers used:
  4536 ;;		wreg, status,2, status,0
  4537 ;; Tracked objects:
  4538 ;;		On entry : 0/0
  4539 ;;		On exit  : 0/0
  4540 ;;		Unchanged: 0/0
  4541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4542 ;;      Params:         4       0       0       0       0       0       0
  4543 ;;      Locals:         2       0       0       0       0       0       0
  4544 ;;      Temps:          0       0       0       0       0       0       0
  4545 ;;      Totals:         6       0       0       0       0       0       0
  4546 ;;Total ram usage:        6 bytes
  4547 ;; Hardware stack levels used:    1
  4548 ;; Hardware stack levels required when called:    4
  4549 ;; This function calls:
  4550 ;;		Nothing
  4551 ;; This function is called by:
  4552 ;;		_UART_buff_put
  4553 ;;		_UART_buff_get
  4554 ;; This function uses a non-reentrant model
  4555 ;;
  4556                           
  4557                           	psect	text21
  4558  00167E                     __ptext21:
  4559                           	opt stack 0
  4560  00167E                     _UART_buff_modulo_inc:
  4561                           	opt stack 21
  4562                           
  4563                           ;UART.c: 107: unsigned int my_value = value + 1;
  4564                           
  4565                           ;incstack = 0
  4566  00167E  0E01               	movlw	1
  4567  001680  241B               	addwf	UART_buff_modulo_inc@value,w,c
  4568  001682  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4569  001684  0E00               	movlw	0
  4570  001686  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  4571  001688  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4572                           
  4573                           ;UART.c: 108: if (my_value >= modulus) {
  4574  00168A  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  4575  00168C  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  4576  00168E  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  4577  001690  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  4578  001692  A0D8               	btfss	status,0,c
  4579  001694  D004               	goto	l2399
  4580                           
  4581                           ;UART.c: 109: my_value = 0;
  4582  001696  0E00               	movlw	0
  4583  001698  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4584  00169A  0E00               	movlw	0
  4585  00169C  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4586  00169E                     l2399:
  4587                           
  4588                           ;UART.c: 110: }
  4589                           ;UART.c: 111: return (my_value);
  4590  00169E  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  4591  0016A2  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  4592  0016A6  0012               	return	
  4593  0016A8                     __end_of_UART_buff_modulo_inc:
  4594                           	opt stack 0
  4595                           tosu	equ	0xFFF
  4596                           tosh	equ	0xFFE
  4597                           tosl	equ	0xFFD
  4598                           pclath	equ	0xFFA
  4599                           tblptru	equ	0xFF8
  4600                           tblptrh	equ	0xFF7
  4601                           tblptrl	equ	0xFF6
  4602                           tablat	equ	0xFF5
  4603                           prodh	equ	0xFF4
  4604                           prodl	equ	0xFF3
  4605                           postinc0	equ	0xFEE
  4606                           wreg	equ	0xFE8
  4607                           indf2	equ	0xFDF
  4608                           postinc2	equ	0xFDE
  4609                           postdec2	equ	0xFDD
  4610                           plusw2	equ	0xFDB
  4611                           fsr2h	equ	0xFDA
  4612                           fsr2l	equ	0xFD9
  4613                           status	equ	0xFD8
  4614                           
  4615 ;; *************** function _Receive_available *****************
  4616 ;; Defined at:
  4617 ;;		line 122 in file "UART.c"
  4618 ;; Parameters:    Size  Location     Type
  4619 ;;		None
  4620 ;; Auto vars:     Size  Location     Type
  4621 ;;		None
  4622 ;; Return value:  Size  Location     Type
  4623 ;;                  2   28[COMRAM] int 
  4624 ;; Registers used:
  4625 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4626 ;; Tracked objects:
  4627 ;;		On entry : 0/0
  4628 ;;		On exit  : 0/0
  4629 ;;		Unchanged: 0/0
  4630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4631 ;;      Params:         2       0       0       0       0       0       0
  4632 ;;      Locals:         0       0       0       0       0       0       0
  4633 ;;      Temps:          0       0       0       0       0       0       0
  4634 ;;      Totals:         2       0       0       0       0       0       0
  4635 ;;Total ram usage:        2 bytes
  4636 ;; Hardware stack levels used:    1
  4637 ;; Hardware stack levels required when called:    5
  4638 ;; This function calls:
  4639 ;;		_UART_buff_size
  4640 ;; This function is called by:
  4641 ;;		_ComStart
  4642 ;;		_CRCcheck
  4643 ;;		_receiveData
  4644 ;; This function uses a non-reentrant model
  4645 ;;
  4646                           
  4647                           	psect	text22
  4648  00179E                     __ptext22:
  4649                           	opt stack 0
  4650  00179E                     _Receive_available:
  4651                           	opt stack 23
  4652                           
  4653                           ;UART.c: 123: return UART_buff_size(&input_buffer);
  4654                           
  4655                           ;incstack = 0
  4656  00179E  0E00               	movlw	low _input_buffer
  4657  0017A0  6E1B               	movwf	UART_buff_size@_this,c
  4658  0017A2  0E03               	movlw	high _input_buffer
  4659  0017A4  6E1C               	movwf	UART_buff_size@_this+1,c
  4660  0017A6  ECDA  F00B         	call	_UART_buff_size	;wreg free
  4661  0017AA  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  4662  0017AE  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  4663  0017B2  0012               	return	
  4664  0017B4                     __end_of_Receive_available:
  4665                           	opt stack 0
  4666                           tosu	equ	0xFFF
  4667                           tosh	equ	0xFFE
  4668                           tosl	equ	0xFFD
  4669                           pclath	equ	0xFFA
  4670                           tblptru	equ	0xFF8
  4671                           tblptrh	equ	0xFF7
  4672                           tblptrl	equ	0xFF6
  4673                           tablat	equ	0xFF5
  4674                           prodh	equ	0xFF4
  4675                           prodl	equ	0xFF3
  4676                           postinc0	equ	0xFEE
  4677                           wreg	equ	0xFE8
  4678                           indf2	equ	0xFDF
  4679                           postinc2	equ	0xFDE
  4680                           postdec2	equ	0xFDD
  4681                           plusw2	equ	0xFDB
  4682                           fsr2h	equ	0xFDA
  4683                           fsr2l	equ	0xFD9
  4684                           status	equ	0xFD8
  4685                           
  4686 ;; *************** function _UART_buff_size *****************
  4687 ;; Defined at:
  4688 ;;		line 102 in file "UART.c"
  4689 ;; Parameters:    Size  Location     Type
  4690 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  4691 ;;		 -> output_buffer(206), input_buffer(206), 
  4692 ;; Auto vars:     Size  Location     Type
  4693 ;;		None
  4694 ;; Return value:  Size  Location     Type
  4695 ;;                  2   26[COMRAM] int 
  4696 ;; Registers used:
  4697 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4698 ;; Tracked objects:
  4699 ;;		On entry : 0/0
  4700 ;;		On exit  : 0/0
  4701 ;;		Unchanged: 0/0
  4702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4703 ;;      Params:         2       0       0       0       0       0       0
  4704 ;;      Locals:         0       0       0       0       0       0       0
  4705 ;;      Temps:          0       0       0       0       0       0       0
  4706 ;;      Totals:         2       0       0       0       0       0       0
  4707 ;;Total ram usage:        2 bytes
  4708 ;; Hardware stack levels used:    1
  4709 ;; Hardware stack levels required when called:    4
  4710 ;; This function calls:
  4711 ;;		Nothing
  4712 ;; This function is called by:
  4713 ;;		_Receive_available
  4714 ;; This function uses a non-reentrant model
  4715 ;;
  4716                           
  4717                           	psect	text23
  4718  0017B4                     __ptext23:
  4719                           	opt stack 0
  4720  0017B4                     _UART_buff_size:
  4721                           	opt stack 23
  4722                           
  4723                           ;UART.c: 103: return (_this->count);
  4724                           
  4725                           ;incstack = 0
  4726  0017B4  EE20 F0CC          	lfsr	2,204
  4727  0017B8  501B               	movf	UART_buff_size@_this,w,c
  4728  0017BA  26D9               	addwf	fsr2l,f,c
  4729  0017BC  501C               	movf	UART_buff_size@_this+1,w,c
  4730  0017BE  22DA               	addwfc	fsr2h,f,c
  4731  0017C0  CFDE F01B          	movff	postinc2,?_UART_buff_size
  4732  0017C4  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  4733  0017C8  0012               	return	
  4734  0017CA                     __end_of_UART_buff_size:
  4735                           	opt stack 0
  4736                           tosu	equ	0xFFF
  4737                           tosh	equ	0xFFE
  4738                           tosl	equ	0xFFD
  4739                           pclath	equ	0xFFA
  4740                           tblptru	equ	0xFF8
  4741                           tblptrh	equ	0xFF7
  4742                           tblptrl	equ	0xFF6
  4743                           tablat	equ	0xFF5
  4744                           prodh	equ	0xFF4
  4745                           prodl	equ	0xFF3
  4746                           postinc0	equ	0xFEE
  4747                           wreg	equ	0xFE8
  4748                           indf2	equ	0xFDF
  4749                           postinc2	equ	0xFDE
  4750                           postdec2	equ	0xFDD
  4751                           plusw2	equ	0xFDB
  4752                           fsr2h	equ	0xFDA
  4753                           fsr2l	equ	0xFD9
  4754                           status	equ	0xFD8
  4755                           
  4756 ;; *************** function _CRC8 *****************
  4757 ;; Defined at:
  4758 ;;		line 89 in file "FastTransfer.c"
  4759 ;; Parameters:    Size  Location     Type
  4760 ;;  data            2   26[COMRAM] PTR const unsigned char 
  4761 ;;		 -> NULL(0), CRCcheck@arrayHolder(3), receiveData@holder_329(3), receiveData@holder(3), 
  4762 ;;		 -> rx_buffer(200), ring_buffer(206), 
  4763 ;;  len             1   28[COMRAM] unsigned char 
  4764 ;; Auto vars:     Size  Location     Type
  4765 ;;  sum             1   29[COMRAM] unsigned char 
  4766 ;;  tempI           1   31[COMRAM] unsigned char 
  4767 ;;  extract         1   30[COMRAM] unsigned char 
  4768 ;;  crc             1   32[COMRAM] unsigned char 
  4769 ;; Return value:  Size  Location     Type
  4770 ;;                  1    wreg      unsigned char 
  4771 ;; Registers used:
  4772 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4773 ;; Tracked objects:
  4774 ;;		On entry : 0/0
  4775 ;;		On exit  : 0/0
  4776 ;;		Unchanged: 0/0
  4777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4778 ;;      Params:         3       0       0       0       0       0       0
  4779 ;;      Locals:         4       0       0       0       0       0       0
  4780 ;;      Temps:          0       0       0       0       0       0       0
  4781 ;;      Totals:         7       0       0       0       0       0       0
  4782 ;;Total ram usage:        7 bytes
  4783 ;; Hardware stack levels used:    1
  4784 ;; Hardware stack levels required when called:    4
  4785 ;; This function calls:
  4786 ;;		Nothing
  4787 ;; This function is called by:
  4788 ;;		_sendData
  4789 ;;		_receiveData
  4790 ;;		_CRCcheck
  4791 ;; This function uses a non-reentrant model
  4792 ;;
  4793                           
  4794                           	psect	text24
  4795  001498                     __ptext24:
  4796                           	opt stack 0
  4797  001498                     _CRC8:
  4798                           	opt stack 23
  4799                           
  4800                           ;FastTransfer.c: 90: unsigned char crc = 0x00;
  4801                           
  4802                           ;incstack = 0
  4803  001498  0E00               	movlw	0
  4804  00149A  6E21               	movwf	CRC8@crc,c
  4805                           
  4806                           ;FastTransfer.c: 91: while (len--) {
  4807  00149C  D01C               	goto	l2467
  4808  00149E                     l2451:
  4809                           
  4810                           ;FastTransfer.c: 92: unsigned char extract = *data++;
  4811  00149E  C01B  FFD9         	movff	CRC8@data,fsr2l
  4812  0014A2  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  4813  0014A6  50DF               	movf	indf2,w,c
  4814  0014A8  6E1F               	movwf	CRC8@extract,c
  4815  0014AA  4A1B               	infsnz	CRC8@data,f,c
  4816  0014AC  2A1C               	incf	CRC8@data+1,f,c
  4817                           
  4818                           ;FastTransfer.c: 93: unsigned char tempI;
  4819                           ;FastTransfer.c: 94: for (tempI = 8; tempI; tempI--) {
  4820  0014AE  0E08               	movlw	8
  4821  0014B0  6E20               	movwf	CRC8@tempI,c
  4822  0014B2  D00E               	goto	l2465
  4823  0014B4                     l2457:
  4824                           
  4825                           ;FastTransfer.c: 95: unsigned char sum = (crc ^ extract) & 0x01;
  4826  0014B4  5021               	movf	CRC8@crc,w,c
  4827  0014B6  181F               	xorwf	CRC8@extract,w,c
  4828  0014B8  0B01               	andlw	1
  4829  0014BA  6E1E               	movwf	CRC8@sum,c
  4830                           
  4831                           ;FastTransfer.c: 96: crc >>= 1;
  4832  0014BC  90D8               	bcf	status,0,c
  4833  0014BE  3221               	rrcf	CRC8@crc,f,c
  4834                           
  4835                           ;FastTransfer.c: 97: if (sum) {
  4836  0014C0  501E               	movf	CRC8@sum,w,c
  4837  0014C2  B4D8               	btfsc	status,2,c
  4838  0014C4  D002               	goto	l112
  4839                           
  4840                           ;FastTransfer.c: 98: crc ^= 0x8C;
  4841  0014C6  0E8C               	movlw	140
  4842  0014C8  1A21               	xorwf	CRC8@crc,f,c
  4843  0014CA                     l112:
  4844                           
  4845                           ;FastTransfer.c: 99: }
  4846                           ;FastTransfer.c: 100: extract >>= 1;
  4847  0014CA  90D8               	bcf	status,0,c
  4848  0014CC  321F               	rrcf	CRC8@extract,f,c
  4849  0014CE  0620               	decf	CRC8@tempI,f,c
  4850  0014D0                     l2465:
  4851  0014D0  5020               	movf	CRC8@tempI,w,c
  4852  0014D2  A4D8               	btfss	status,2,c
  4853  0014D4  D7EF               	goto	l2457
  4854  0014D6                     l2467:
  4855  0014D6  061D               	decf	CRC8@len,f,c
  4856  0014D8  281D               	incf	CRC8@len,w,c
  4857  0014DA  A4D8               	btfss	status,2,c
  4858  0014DC  D7E0               	goto	l2451
  4859                           
  4860                           ;FastTransfer.c: 101: }
  4861                           ;FastTransfer.c: 102: }
  4862                           ;FastTransfer.c: 103: return crc;
  4863  0014DE  5021               	movf	CRC8@crc,w,c
  4864  0014E0  0012               	return	
  4865  0014E2                     __end_of_CRC8:
  4866                           	opt stack 0
  4867                           tosu	equ	0xFFF
  4868                           tosh	equ	0xFFE
  4869                           tosl	equ	0xFFD
  4870                           pclath	equ	0xFFA
  4871                           tblptru	equ	0xFF8
  4872                           tblptrh	equ	0xFF7
  4873                           tblptrl	equ	0xFF6
  4874                           tablat	equ	0xFF5
  4875                           prodh	equ	0xFF4
  4876                           prodl	equ	0xFF3
  4877                           postinc0	equ	0xFEE
  4878                           wreg	equ	0xFE8
  4879                           indf2	equ	0xFDF
  4880                           postinc2	equ	0xFDE
  4881                           postdec2	equ	0xFDD
  4882                           plusw2	equ	0xFDB
  4883                           fsr2h	equ	0xFDA
  4884                           fsr2l	equ	0xFD9
  4885                           status	equ	0xFD8
  4886                           
  4887 ;; *************** function _Start *****************
  4888 ;; Defined at:
  4889 ;;		line 32 in file "Function.c"
  4890 ;; Parameters:    Size  Location     Type
  4891 ;;		None
  4892 ;; Auto vars:     Size  Location     Type
  4893 ;;		None
  4894 ;; Return value:  Size  Location     Type
  4895 ;;                  1    wreg      void 
  4896 ;; Registers used:
  4897 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4898 ;; Tracked objects:
  4899 ;;		On entry : 0/0
  4900 ;;		On exit  : 0/0
  4901 ;;		Unchanged: 0/0
  4902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4903 ;;      Params:         0       0       0       0       0       0       0
  4904 ;;      Locals:         0       0       0       0       0       0       0
  4905 ;;      Temps:          0       0       0       0       0       0       0
  4906 ;;      Totals:         0       0       0       0       0       0       0
  4907 ;;Total ram usage:        0 bytes
  4908 ;; Hardware stack levels used:    1
  4909 ;; Hardware stack levels required when called:    8
  4910 ;; This function calls:
  4911 ;;		_ComStart
  4912 ;;		_INTERRUPT_Initialize
  4913 ;;		_TMR0_Initialize
  4914 ;; This function is called by:
  4915 ;;		_main
  4916 ;; This function uses a non-reentrant model
  4917 ;;
  4918                           
  4919                           	psect	text25
  4920  0014E2                     __ptext25:
  4921                           	opt stack 0
  4922  0014E2                     _Start:
  4923                           	opt stack 22
  4924                           
  4925                           ;Function.c: 97: TRISCbits.TRISC5 = 1;
  4926                           
  4927                           ;incstack = 0
  4928  0014E2  8A94               	bsf	3988,5,c	;volatile
  4929                           
  4930                           ;Function.c: 98: TRISCbits.TRISC4 = 1;
  4931  0014E4  8894               	bsf	3988,4,c	;volatile
  4932                           
  4933                           ;Function.c: 99: TRISDbits.TRISD3 = 1;
  4934  0014E6  8695               	bsf	3989,3,c	;volatile
  4935                           
  4936                           ;Function.c: 100: TRISDbits.TRISD2 = 1;
  4937  0014E8  8495               	bsf	3989,2,c	;volatile
  4938                           
  4939                           ;Function.c: 101: TRISDbits.TRISD1 = 1;
  4940  0014EA  8295               	bsf	3989,1,c	;volatile
  4941                           
  4942                           ;Function.c: 102: TRISDbits.TRISD0 = 1;
  4943  0014EC  8095               	bsf	3989,0,c	;volatile
  4944                           
  4945                           ;Function.c: 103: TRISCbits.TRISC3 = 1;
  4946  0014EE  8694               	bsf	3988,3,c	;volatile
  4947                           
  4948                           ;Function.c: 104: TRISCbits.TRISC2 = 1;
  4949  0014F0  8494               	bsf	3988,2,c	;volatile
  4950                           
  4951                           ;Function.c: 105: TRISCbits.TRISC1 = 1;
  4952  0014F2  8294               	bsf	3988,1,c	;volatile
  4953                           
  4954                           ;Function.c: 106: TRISAbits.TRISA7 = 1;
  4955  0014F4  8E92               	bsf	3986,7,c	;volatile
  4956                           
  4957                           ;Function.c: 107: TRISCbits.TRISC0 = 1;
  4958  0014F6  8094               	bsf	3988,0,c	;volatile
  4959                           
  4960                           ;Function.c: 109: TRISAbits.TRISA4 = 1;
  4961  0014F8  8892               	bsf	3986,4,c	;volatile
  4962                           
  4963                           ;Function.c: 110: TRISAbits.TRISA6 = 1;
  4964  0014FA  8C92               	bsf	3986,6,c	;volatile
  4965                           
  4966                           ;Function.c: 116: ANSELA = 0;
  4967  0014FC  0E00               	movlw	0
  4968  0014FE  010F               	movlb	15	; () banked
  4969  001500  6F38               	movwf	56,b	;volatile
  4970                           
  4971                           ;Function.c: 117: ANSELC = 0;
  4972  001502  0E00               	movlw	0
  4973  001504  010F               	movlb	15	; () banked
  4974  001506  6F3A               	movwf	58,b	;volatile
  4975                           
  4976                           ;Function.c: 118: ANSELD = 0;
  4977  001508  0E00               	movlw	0
  4978  00150A  010F               	movlb	15	; () banked
  4979  00150C  6F3B               	movwf	59,b	;volatile
  4980                           
  4981                           ;Function.c: 121: OSCCON = 0x72;
  4982  00150E  0E72               	movlw	114
  4983  001510  6ED3               	movwf	4051,c	;volatile
  4984                           
  4985                           ;Function.c: 123: OSCCON2 = 0x04;
  4986  001512  0E04               	movlw	4
  4987  001514  6ED2               	movwf	4050,c	;volatile
  4988                           
  4989                           ;Function.c: 125: OSCTUNE = 0x00;
  4990  001516  0E00               	movlw	0
  4991  001518  6E9B               	movwf	3995,c	;volatile
  4992                           
  4993                           ; BSR set to: 15
  4994                           ;Function.c: 128: ComStart();
  4995  00151A  ECF4  F009         	call	_ComStart	;wreg free
  4996                           
  4997                           ;Function.c: 129: INTERRUPT_Initialize();
  4998  00151E  ECFA  F00B         	call	_INTERRUPT_Initialize	;wreg free
  4999                           
  5000                           ;Function.c: 130: TMR0_Initialize();
  5001  001522  EC8A  F00B         	call	_TMR0_Initialize	;wreg free
  5002  001526  0012               	return		;funcret
  5003  001528                     __end_of_Start:
  5004                           	opt stack 0
  5005                           tosu	equ	0xFFF
  5006                           tosh	equ	0xFFE
  5007                           tosl	equ	0xFFD
  5008                           pclath	equ	0xFFA
  5009                           tblptru	equ	0xFF8
  5010                           tblptrh	equ	0xFF7
  5011                           tblptrl	equ	0xFF6
  5012                           tablat	equ	0xFF5
  5013                           prodh	equ	0xFF4
  5014                           prodl	equ	0xFF3
  5015                           postinc0	equ	0xFEE
  5016                           wreg	equ	0xFE8
  5017                           indf2	equ	0xFDF
  5018                           postinc2	equ	0xFDE
  5019                           postdec2	equ	0xFDD
  5020                           plusw2	equ	0xFDB
  5021                           fsr2h	equ	0xFDA
  5022                           fsr2l	equ	0xFD9
  5023                           status	equ	0xFD8
  5024                           
  5025 ;; *************** function _TMR0_Initialize *****************
  5026 ;; Defined at:
  5027 ;;		line 23 in file "tmr0.c"
  5028 ;; Parameters:    Size  Location     Type
  5029 ;;		None
  5030 ;; Auto vars:     Size  Location     Type
  5031 ;;		None
  5032 ;; Return value:  Size  Location     Type
  5033 ;;                  1    wreg      void 
  5034 ;; Registers used:
  5035 ;;		wreg, status,2, cstack
  5036 ;; Tracked objects:
  5037 ;;		On entry : 0/0
  5038 ;;		On exit  : 0/0
  5039 ;;		Unchanged: 0/0
  5040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5041 ;;      Params:         0       0       0       0       0       0       0
  5042 ;;      Locals:         0       0       0       0       0       0       0
  5043 ;;      Temps:          0       0       0       0       0       0       0
  5044 ;;      Totals:         0       0       0       0       0       0       0
  5045 ;;Total ram usage:        0 bytes
  5046 ;; Hardware stack levels used:    1
  5047 ;; Hardware stack levels required when called:    5
  5048 ;; This function calls:
  5049 ;;		_TMR0_StartTimer
  5050 ;; This function is called by:
  5051 ;;		_Start
  5052 ;; This function uses a non-reentrant model
  5053 ;;
  5054                           
  5055                           	psect	text26
  5056  001714                     __ptext26:
  5057                           	opt stack 0
  5058  001714                     _TMR0_Initialize:
  5059                           	opt stack 24
  5060                           
  5061                           ;tmr0.c: 27: T0CON = 0x94;
  5062                           
  5063                           ;incstack = 0
  5064  001714  0E94               	movlw	148
  5065  001716  6ED5               	movwf	4053,c	;volatile
  5066                           
  5067                           ;tmr0.c: 30: TMR0H = 0xCF;
  5068  001718  0ECF               	movlw	207
  5069  00171A  6ED7               	movwf	4055,c	;volatile
  5070                           
  5071                           ;tmr0.c: 33: TMR0L = 0x2C;
  5072  00171C  0E2C               	movlw	44
  5073  00171E  6ED6               	movwf	4054,c	;volatile
  5074                           
  5075                           ;tmr0.c: 36: timer0ReloadVal16bit = 53036;
  5076  001720  0ECF               	movlw	207
  5077  001722  6E39               	movwf	_timer0ReloadVal16bit+1,c	;volatile
  5078  001724  0E2C               	movlw	44
  5079  001726  6E38               	movwf	_timer0ReloadVal16bit,c	;volatile
  5080                           
  5081                           ;tmr0.c: 39: INTCONbits.TMR0IF = 0;
  5082  001728  94F2               	bcf	intcon,2,c	;volatile
  5083                           
  5084                           ;tmr0.c: 42: INTCONbits.TMR0IE = 1;
  5085  00172A  8AF2               	bsf	intcon,5,c	;volatile
  5086                           
  5087                           ;tmr0.c: 45: TMR0_StartTimer();
  5088  00172C  EC22  F00C         	call	_TMR0_StartTimer	;wreg free
  5089  001730  0012               	return		;funcret
  5090  001732                     __end_of_TMR0_Initialize:
  5091                           	opt stack 0
  5092                           tosu	equ	0xFFF
  5093                           tosh	equ	0xFFE
  5094                           tosl	equ	0xFFD
  5095                           pclath	equ	0xFFA
  5096                           tblptru	equ	0xFF8
  5097                           tblptrh	equ	0xFF7
  5098                           tblptrl	equ	0xFF6
  5099                           tablat	equ	0xFF5
  5100                           prodh	equ	0xFF4
  5101                           prodl	equ	0xFF3
  5102                           intcon	equ	0xFF2
  5103                           postinc0	equ	0xFEE
  5104                           wreg	equ	0xFE8
  5105                           indf2	equ	0xFDF
  5106                           postinc2	equ	0xFDE
  5107                           postdec2	equ	0xFDD
  5108                           plusw2	equ	0xFDB
  5109                           fsr2h	equ	0xFDA
  5110                           fsr2l	equ	0xFD9
  5111                           status	equ	0xFD8
  5112                           
  5113 ;; *************** function _TMR0_StartTimer *****************
  5114 ;; Defined at:
  5115 ;;		line 48 in file "tmr0.c"
  5116 ;; Parameters:    Size  Location     Type
  5117 ;;		None
  5118 ;; Auto vars:     Size  Location     Type
  5119 ;;		None
  5120 ;; Return value:  Size  Location     Type
  5121 ;;                  1    wreg      void 
  5122 ;; Registers used:
  5123 ;;		None
  5124 ;; Tracked objects:
  5125 ;;		On entry : 0/0
  5126 ;;		On exit  : 0/0
  5127 ;;		Unchanged: 0/0
  5128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5129 ;;      Params:         0       0       0       0       0       0       0
  5130 ;;      Locals:         0       0       0       0       0       0       0
  5131 ;;      Temps:          0       0       0       0       0       0       0
  5132 ;;      Totals:         0       0       0       0       0       0       0
  5133 ;;Total ram usage:        0 bytes
  5134 ;; Hardware stack levels used:    1
  5135 ;; Hardware stack levels required when called:    4
  5136 ;; This function calls:
  5137 ;;		Nothing
  5138 ;; This function is called by:
  5139 ;;		_TMR0_Initialize
  5140 ;; This function uses a non-reentrant model
  5141 ;;
  5142                           
  5143                           	psect	text27
  5144  001844                     __ptext27:
  5145                           	opt stack 0
  5146  001844                     _TMR0_StartTimer:
  5147                           	opt stack 24
  5148                           
  5149                           ;tmr0.c: 50: T0CONbits.TMR0ON = 1;
  5150                           
  5151                           ;incstack = 0
  5152  001844  8ED5               	bsf	4053,7,c	;volatile
  5153  001846  0012               	return		;funcret
  5154  001848                     __end_of_TMR0_StartTimer:
  5155                           	opt stack 0
  5156                           tosu	equ	0xFFF
  5157                           tosh	equ	0xFFE
  5158                           tosl	equ	0xFFD
  5159                           pclath	equ	0xFFA
  5160                           tblptru	equ	0xFF8
  5161                           tblptrh	equ	0xFF7
  5162                           tblptrl	equ	0xFF6
  5163                           tablat	equ	0xFF5
  5164                           prodh	equ	0xFF4
  5165                           prodl	equ	0xFF3
  5166                           intcon	equ	0xFF2
  5167                           postinc0	equ	0xFEE
  5168                           wreg	equ	0xFE8
  5169                           indf2	equ	0xFDF
  5170                           postinc2	equ	0xFDE
  5171                           postdec2	equ	0xFDD
  5172                           plusw2	equ	0xFDB
  5173                           fsr2h	equ	0xFDA
  5174                           fsr2l	equ	0xFD9
  5175                           status	equ	0xFD8
  5176                           
  5177 ;; *************** function _INTERRUPT_Initialize *****************
  5178 ;; Defined at:
  5179 ;;		line 133 in file "Function.c"
  5180 ;; Parameters:    Size  Location     Type
  5181 ;;		None
  5182 ;; Auto vars:     Size  Location     Type
  5183 ;;		None
  5184 ;; Return value:  Size  Location     Type
  5185 ;;                  1    wreg      void 
  5186 ;; Registers used:
  5187 ;;		None
  5188 ;; Tracked objects:
  5189 ;;		On entry : 0/0
  5190 ;;		On exit  : 0/0
  5191 ;;		Unchanged: 0/0
  5192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5193 ;;      Params:         0       0       0       0       0       0       0
  5194 ;;      Locals:         0       0       0       0       0       0       0
  5195 ;;      Temps:          0       0       0       0       0       0       0
  5196 ;;      Totals:         0       0       0       0       0       0       0
  5197 ;;Total ram usage:        0 bytes
  5198 ;; Hardware stack levels used:    1
  5199 ;; Hardware stack levels required when called:    4
  5200 ;; This function calls:
  5201 ;;		Nothing
  5202 ;; This function is called by:
  5203 ;;		_Start
  5204 ;; This function uses a non-reentrant model
  5205 ;;
  5206                           
  5207                           	psect	text28
  5208  0017F4                     __ptext28:
  5209                           	opt stack 0
  5210  0017F4                     _INTERRUPT_Initialize:
  5211                           	opt stack 25
  5212                           
  5213                           ;Function.c: 136: RCONbits.IPEN = 0;
  5214                           
  5215                           ;incstack = 0
  5216  0017F4  9ED0               	bcf	4048,7,c	;volatile
  5217                           
  5218                           ;Function.c: 141: IPR1bits.RC1IP = 0;
  5219  0017F6  9A9F               	bcf	3999,5,c	;volatile
  5220                           
  5221                           ;Function.c: 143: IPR1bits.TX1IP = 0;
  5222  0017F8  989F               	bcf	3999,4,c	;volatile
  5223                           
  5224                           ;Function.c: 145: INTCON2bits.TMR0IP = 0;
  5225  0017FA  94F1               	bcf	intcon2,2,c	;volatile
  5226                           
  5227                           ;Function.c: 147: IPR1bits.ADIP = 0;
  5228  0017FC  9C9F               	bcf	3999,6,c	;volatile
  5229                           
  5230                           ;Function.c: 149: IPR1bits.SSP1IP = 0;
  5231  0017FE  969F               	bcf	3999,3,c	;volatile
  5232                           
  5233                           ;Function.c: 151: IPR2bits.BCL1IP = 0;
  5234  001800  96A2               	bcf	4002,3,c	;volatile
  5235                           
  5236                           ;Function.c: 152: IPR1bits.TMR2IP=0;
  5237  001802  929F               	bcf	3999,1,c	;volatile
  5238  001804  0012               	return		;funcret
  5239  001806                     __end_of_INTERRUPT_Initialize:
  5240                           	opt stack 0
  5241                           tosu	equ	0xFFF
  5242                           tosh	equ	0xFFE
  5243                           tosl	equ	0xFFD
  5244                           pclath	equ	0xFFA
  5245                           tblptru	equ	0xFF8
  5246                           tblptrh	equ	0xFF7
  5247                           tblptrl	equ	0xFF6
  5248                           tablat	equ	0xFF5
  5249                           prodh	equ	0xFF4
  5250                           prodl	equ	0xFF3
  5251                           intcon	equ	0xFF2
  5252                           intcon2	equ	0xFF1
  5253                           postinc0	equ	0xFEE
  5254                           wreg	equ	0xFE8
  5255                           indf2	equ	0xFDF
  5256                           postinc2	equ	0xFDE
  5257                           postdec2	equ	0xFDD
  5258                           plusw2	equ	0xFDB
  5259                           fsr2h	equ	0xFDA
  5260                           fsr2l	equ	0xFD9
  5261                           status	equ	0xFD8
  5262                           
  5263 ;; *************** function _ComStart *****************
  5264 ;; Defined at:
  5265 ;;		line 12 in file "Communications.c"
  5266 ;; Parameters:    Size  Location     Type
  5267 ;;		None
  5268 ;; Auto vars:     Size  Location     Type
  5269 ;;		None
  5270 ;; Return value:  Size  Location     Type
  5271 ;;                  1    wreg      void 
  5272 ;; Registers used:
  5273 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5274 ;; Tracked objects:
  5275 ;;		On entry : 0/0
  5276 ;;		On exit  : 0/0
  5277 ;;		Unchanged: 0/0
  5278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5279 ;;      Params:         0       0       0       0       0       0       0
  5280 ;;      Locals:         0       0       0       0       0       0       0
  5281 ;;      Temps:          0       0       0       0       0       0       0
  5282 ;;      Totals:         0       0       0       0       0       0       0
  5283 ;;Total ram usage:        0 bytes
  5284 ;; Hardware stack levels used:    1
  5285 ;; Hardware stack levels required when called:    7
  5286 ;; This function calls:
  5287 ;;		_EUSART1_Initialize
  5288 ;;		_begin
  5289 ;; This function is called by:
  5290 ;;		_Start
  5291 ;; This function uses a non-reentrant model
  5292 ;;
  5293                           
  5294                           	psect	text29
  5295  0013E8                     __ptext29:
  5296                           	opt stack 0
  5297  0013E8                     _ComStart:
  5298                           	opt stack 22
  5299                           
  5300                           ;Communications.c: 13: EUSART1_Initialize();
  5301                           
  5302                           ;incstack = 0
  5303  0013E8  EC94  F00A         	call	_EUSART1_Initialize	;wreg free
  5304                           
  5305                           ;Communications.c: 14: begin(receiveArray, sizeof (receiveArray), 8, 0, Send_put, Receiv
      +                          e_get, Receive_available, Receive_peek);
  5306  0013EC  0E7B               	movlw	low _receiveArray
  5307  0013EE  0100               	movlb	0	; () banked
  5308  0013F0  6F85               	movwf	begin@ptr& (0+255),b
  5309  0013F2  0E00               	movlw	high _receiveArray
  5310  0013F4  0100               	movlb	0	; () banked
  5311  0013F6  6F86               	movwf	(begin@ptr+1)& (0+255),b
  5312  0013F8  0E0A               	movlw	10
  5313  0013FA  0100               	movlb	0	; () banked
  5314  0013FC  6F87               	movwf	begin@maxSize& (0+255),b
  5315  0013FE  0E08               	movlw	8
  5316  001400  0100               	movlb	0	; () banked
  5317  001402  6F88               	movwf	begin@givenAddress& (0+255),b
  5318  001404  0E00               	movlw	0
  5319  001406  0100               	movlb	0	; () banked
  5320  001408  6F89               	movwf	begin@error& (0+255),b
  5321  00140A  0ECA               	movlw	low _Send_put
  5322  00140C  0100               	movlb	0	; () banked
  5323  00140E  6F8A               	movwf	begin@stufftosend& (0+255),b
  5324  001410  0E15               	movlw	high _Send_put
  5325  001412  0100               	movlb	0	; () banked
  5326  001414  6F8B               	movwf	(begin@stufftosend+1)& (0+255),b
  5327  001416  0E36               	movlw	low _Receive_get
  5328  001418  0100               	movlb	0	; () banked
  5329  00141A  6F8C               	movwf	begin@stufftoreceive& (0+255),b
  5330  00141C  0E18               	movlw	high _Receive_get
  5331  00141E  0100               	movlb	0	; () banked
  5332  001420  6F8D               	movwf	(begin@stufftoreceive+1)& (0+255),b
  5333  001422  0E9E               	movlw	low _Receive_available
  5334  001424  0100               	movlb	0	; () banked
  5335  001426  6F8E               	movwf	begin@stuffavailable& (0+255),b
  5336  001428  0E17               	movlw	high _Receive_available
  5337  00142A  0100               	movlb	0	; () banked
  5338  00142C  6F8F               	movwf	(begin@stuffavailable+1)& (0+255),b
  5339  00142E  0E28               	movlw	low _Receive_peek
  5340  001430  0100               	movlb	0	; () banked
  5341  001432  6F90               	movwf	begin@stuffpeek& (0+255),b
  5342  001434  0E18               	movlw	high _Receive_peek
  5343  001436  0100               	movlb	0	; () banked
  5344  001438  6F91               	movwf	(begin@stuffpeek+1)& (0+255),b
  5345  00143A  EC20  F00A         	call	_begin	;wreg free
  5346  00143E  0012               	return		;funcret
  5347  001440                     __end_of_ComStart:
  5348                           	opt stack 0
  5349                           tosu	equ	0xFFF
  5350                           tosh	equ	0xFFE
  5351                           tosl	equ	0xFFD
  5352                           pclath	equ	0xFFA
  5353                           tblptru	equ	0xFF8
  5354                           tblptrh	equ	0xFF7
  5355                           tblptrl	equ	0xFF6
  5356                           tablat	equ	0xFF5
  5357                           prodh	equ	0xFF4
  5358                           prodl	equ	0xFF3
  5359                           intcon	equ	0xFF2
  5360                           intcon2	equ	0xFF1
  5361                           postinc0	equ	0xFEE
  5362                           wreg	equ	0xFE8
  5363                           indf2	equ	0xFDF
  5364                           postinc2	equ	0xFDE
  5365                           postdec2	equ	0xFDD
  5366                           plusw2	equ	0xFDB
  5367                           fsr2h	equ	0xFDA
  5368                           fsr2l	equ	0xFD9
  5369                           status	equ	0xFD8
  5370                           
  5371 ;; *************** function _begin *****************
  5372 ;; Defined at:
  5373 ;;		line 73 in file "FastTransfer.c"
  5374 ;; Parameters:    Size  Location     Type
  5375 ;;  ptr             2    0[BANK0 ] PTR volatile int 
  5376 ;;		 -> receiveArray(10), 
  5377 ;;  maxSize         1    2[BANK0 ] unsigned char 
  5378 ;;  givenAddress    1    3[BANK0 ] unsigned char 
  5379 ;;  error           1    4[BANK0 ] unsigned char 
  5380 ;;  stufftosend     2    5[BANK0 ] PTR FTN(unsigned char ,)
  5381 ;;		 -> Send_put(1), 
  5382 ;;  stufftorecei    2    7[BANK0 ] PTR FTN()unsigned char 
  5383 ;;		 -> Receive_get(1), 
  5384 ;;  stuffavailab    2    9[BANK0 ] PTR FTN()int 
  5385 ;;		 -> Receive_available(2), 
  5386 ;;  stuffpeek       2   11[BANK0 ] PTR FTN()unsigned char 
  5387 ;;		 -> Receive_peek(1), 
  5388 ;; Auto vars:     Size  Location     Type
  5389 ;;		None
  5390 ;; Return value:  Size  Location     Type
  5391 ;;                  1    wreg      void 
  5392 ;; Registers used:
  5393 ;;		wreg, status,2, status,0, cstack
  5394 ;; Tracked objects:
  5395 ;;		On entry : 0/0
  5396 ;;		On exit  : 0/0
  5397 ;;		Unchanged: 0/0
  5398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5399 ;;      Params:         0      13       0       0       0       0       0
  5400 ;;      Locals:         0       0       0       0       0       0       0
  5401 ;;      Temps:          0       0       0       0       0       0       0
  5402 ;;      Totals:         0      13       0       0       0       0       0
  5403 ;;Total ram usage:       13 bytes
  5404 ;; Hardware stack levels used:    1
  5405 ;; Hardware stack levels required when called:    5
  5406 ;; This function calls:
  5407 ;;		___awdiv
  5408 ;; This function is called by:
  5409 ;;		_ComStart
  5410 ;; This function uses a non-reentrant model
  5411 ;;
  5412                           
  5413                           	psect	text30
  5414  001440                     __ptext30:
  5415                           	opt stack 0
  5416  001440                     _begin:
  5417                           	opt stack 23
  5418                           
  5419                           ;FastTransfer.c: 74: receiveArrayAddress = ptr;
  5420                           
  5421                           ;incstack = 0
  5422  001440  C085  F02C         	movff	begin@ptr,_receiveArrayAddress
  5423  001444  C086  F02D         	movff	begin@ptr+1,_receiveArrayAddress+1
  5424                           
  5425                           ;FastTransfer.c: 75: moduleAddress = givenAddress;
  5426  001448  C088  F03F         	movff	begin@givenAddress,_moduleAddress
  5427                           
  5428                           ;FastTransfer.c: 76: serial_write = stufftosend;
  5429  00144C  C08A  F036         	movff	begin@stufftosend,_serial_write
  5430  001450  C08B  F037         	movff	begin@stufftosend+1,_serial_write+1
  5431                           
  5432                           ;FastTransfer.c: 77: serial_available = stuffavailable;
  5433  001454  C08E  F030         	movff	begin@stuffavailable,_serial_available
  5434  001458  C08F  F031         	movff	begin@stuffavailable+1,_serial_available+1
  5435                           
  5436                           ;FastTransfer.c: 78: serial_peek = stuffpeek;
  5437  00145C  C090  F032         	movff	begin@stuffpeek,_serial_peek
  5438  001460  C091  F033         	movff	begin@stuffpeek+1,_serial_peek+1
  5439                           
  5440                           ;FastTransfer.c: 79: serial_read = stufftoreceive;
  5441  001464  C08C  F034         	movff	begin@stufftoreceive,_serial_read
  5442  001468  C08D  F035         	movff	begin@stufftoreceive+1,_serial_read+1
  5443                           
  5444                           ;FastTransfer.c: 80: maxDataAddress = maxSize / 2;
  5445  00146C  C087  F01B         	movff	begin@maxSize,___awdiv@dividend
  5446  001470  6A1C               	clrf	___awdiv@dividend+1,c
  5447  001472  0E00               	movlw	0
  5448  001474  6E1E               	movwf	___awdiv@divisor+1,c
  5449  001476  0E02               	movlw	2
  5450  001478  6E1D               	movwf	___awdiv@divisor,c
  5451  00147A  EC1C  F009         	call	___awdiv	;wreg free
  5452  00147E  501B               	movf	?___awdiv,w,c
  5453  001480  6E3E               	movwf	_maxDataAddress,c
  5454                           
  5455                           ;FastTransfer.c: 81: sendStructAddress = (unsigned char*) & ring_buffer;
  5456  001482  0E00               	movlw	low _ring_buffer
  5457  001484  6E2E               	movwf	_sendStructAddress,c
  5458  001486  0E01               	movlw	high _ring_buffer
  5459  001488  6E2F               	movwf	_sendStructAddress+1,c
  5460                           
  5461                           ;FastTransfer.c: 82: AKNAKsend = error;
  5462  00148A  C089  F03A         	movff	begin@error,_AKNAKsend
  5463                           
  5464                           ;FastTransfer.c: 83: alignErrorCounter = 0;
  5465  00148E  0E00               	movlw	0
  5466  001490  6E27               	movwf	_alignErrorCounter+1,c
  5467  001492  0E00               	movlw	0
  5468  001494  6E26               	movwf	_alignErrorCounter,c
  5469  001496  0012               	return		;funcret
  5470  001498                     __end_of_begin:
  5471                           	opt stack 0
  5472                           tosu	equ	0xFFF
  5473                           tosh	equ	0xFFE
  5474                           tosl	equ	0xFFD
  5475                           pclath	equ	0xFFA
  5476                           tblptru	equ	0xFF8
  5477                           tblptrh	equ	0xFF7
  5478                           tblptrl	equ	0xFF6
  5479                           tablat	equ	0xFF5
  5480                           prodh	equ	0xFF4
  5481                           prodl	equ	0xFF3
  5482                           intcon	equ	0xFF2
  5483                           intcon2	equ	0xFF1
  5484                           postinc0	equ	0xFEE
  5485                           wreg	equ	0xFE8
  5486                           indf2	equ	0xFDF
  5487                           postinc2	equ	0xFDE
  5488                           postdec2	equ	0xFDD
  5489                           plusw2	equ	0xFDB
  5490                           fsr2h	equ	0xFDA
  5491                           fsr2l	equ	0xFD9
  5492                           status	equ	0xFD8
  5493                           
  5494 ;; *************** function ___awdiv *****************
  5495 ;; Defined at:
  5496 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  5497 ;; Parameters:    Size  Location     Type
  5498 ;;  dividend        2   26[COMRAM] int 
  5499 ;;  divisor         2   28[COMRAM] int 
  5500 ;; Auto vars:     Size  Location     Type
  5501 ;;  quotient        2   32[COMRAM] int 
  5502 ;;  sign            1   31[COMRAM] unsigned char 
  5503 ;;  counter         1   30[COMRAM] unsigned char 
  5504 ;; Return value:  Size  Location     Type
  5505 ;;                  2   26[COMRAM] int 
  5506 ;; Registers used:
  5507 ;;		wreg, status,2, status,0
  5508 ;; Tracked objects:
  5509 ;;		On entry : 0/0
  5510 ;;		On exit  : 0/0
  5511 ;;		Unchanged: 0/0
  5512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5513 ;;      Params:         4       0       0       0       0       0       0
  5514 ;;      Locals:         4       0       0       0       0       0       0
  5515 ;;      Temps:          0       0       0       0       0       0       0
  5516 ;;      Totals:         8       0       0       0       0       0       0
  5517 ;;Total ram usage:        8 bytes
  5518 ;; Hardware stack levels used:    1
  5519 ;; Hardware stack levels required when called:    4
  5520 ;; This function calls:
  5521 ;;		Nothing
  5522 ;; This function is called by:
  5523 ;;		_begin
  5524 ;; This function uses a non-reentrant model
  5525 ;;
  5526                           
  5527                           	psect	text31
  5528  001238                     __ptext31:
  5529                           	opt stack 0
  5530  001238                     ___awdiv:
  5531                           	opt stack 23
  5532                           
  5533                           ;incstack = 0
  5534  001238  0E00               	movlw	0
  5535  00123A  6E20               	movwf	___awdiv@sign,c
  5536  00123C  AE1E               	btfss	___awdiv@divisor+1,7,c
  5537  00123E  D006               	goto	l1941
  5538  001240  6C1D               	negf	___awdiv@divisor,c
  5539  001242  1E1E               	comf	___awdiv@divisor+1,f,c
  5540  001244  B0D8               	btfsc	status,0,c
  5541  001246  2A1E               	incf	___awdiv@divisor+1,f,c
  5542  001248  0E01               	movlw	1
  5543  00124A  6E20               	movwf	___awdiv@sign,c
  5544  00124C                     l1941:
  5545  00124C  AE1C               	btfss	___awdiv@dividend+1,7,c
  5546  00124E  D006               	goto	l1947
  5547  001250  6C1B               	negf	___awdiv@dividend,c
  5548  001252  1E1C               	comf	___awdiv@dividend+1,f,c
  5549  001254  B0D8               	btfsc	status,0,c
  5550  001256  2A1C               	incf	___awdiv@dividend+1,f,c
  5551  001258  0E01               	movlw	1
  5552  00125A  1A20               	xorwf	___awdiv@sign,f,c
  5553  00125C                     l1947:
  5554  00125C  0E00               	movlw	0
  5555  00125E  6E22               	movwf	___awdiv@quotient+1,c
  5556  001260  0E00               	movlw	0
  5557  001262  6E21               	movwf	___awdiv@quotient,c
  5558  001264  501D               	movf	___awdiv@divisor,w,c
  5559  001266  101E               	iorwf	___awdiv@divisor+1,w,c
  5560  001268  B4D8               	btfsc	status,2,c
  5561  00126A  D01C               	goto	l1969
  5562  00126C  0E01               	movlw	1
  5563  00126E  6E1F               	movwf	___awdiv@counter,c
  5564  001270  D004               	goto	l1955
  5565  001272                     l1953:
  5566  001272  90D8               	bcf	status,0,c
  5567  001274  361D               	rlcf	___awdiv@divisor,f,c
  5568  001276  361E               	rlcf	___awdiv@divisor+1,f,c
  5569  001278  2A1F               	incf	___awdiv@counter,f,c
  5570  00127A                     l1955:
  5571  00127A  AE1E               	btfss	___awdiv@divisor+1,7,c
  5572  00127C  D7FA               	goto	l1953
  5573  00127E                     l1957:
  5574  00127E  90D8               	bcf	status,0,c
  5575  001280  3621               	rlcf	___awdiv@quotient,f,c
  5576  001282  3622               	rlcf	___awdiv@quotient+1,f,c
  5577  001284  501D               	movf	___awdiv@divisor,w,c
  5578  001286  5C1B               	subwf	___awdiv@dividend,w,c
  5579  001288  501E               	movf	___awdiv@divisor+1,w,c
  5580  00128A  581C               	subwfb	___awdiv@dividend+1,w,c
  5581  00128C  A0D8               	btfss	status,0,c
  5582  00128E  D005               	goto	l1965
  5583  001290  501D               	movf	___awdiv@divisor,w,c
  5584  001292  5E1B               	subwf	___awdiv@dividend,f,c
  5585  001294  501E               	movf	___awdiv@divisor+1,w,c
  5586  001296  5A1C               	subwfb	___awdiv@dividend+1,f,c
  5587  001298  8021               	bsf	___awdiv@quotient,0,c
  5588  00129A                     l1965:
  5589  00129A  90D8               	bcf	status,0,c
  5590  00129C  321E               	rrcf	___awdiv@divisor+1,f,c
  5591  00129E  321D               	rrcf	___awdiv@divisor,f,c
  5592  0012A0  2E1F               	decfsz	___awdiv@counter,f,c
  5593  0012A2  D7ED               	goto	l1957
  5594  0012A4                     l1969:
  5595  0012A4  5020               	movf	___awdiv@sign,w,c
  5596  0012A6  B4D8               	btfsc	status,2,c
  5597  0012A8  D004               	goto	l1973
  5598  0012AA  6C21               	negf	___awdiv@quotient,c
  5599  0012AC  1E22               	comf	___awdiv@quotient+1,f,c
  5600  0012AE  B0D8               	btfsc	status,0,c
  5601  0012B0  2A22               	incf	___awdiv@quotient+1,f,c
  5602  0012B2                     l1973:
  5603  0012B2  C021  F01B         	movff	___awdiv@quotient,?___awdiv
  5604  0012B6  C022  F01C         	movff	___awdiv@quotient+1,?___awdiv+1
  5605  0012BA  0012               	return	
  5606  0012BC                     __end_of___awdiv:
  5607                           	opt stack 0
  5608                           tosu	equ	0xFFF
  5609                           tosh	equ	0xFFE
  5610                           tosl	equ	0xFFD
  5611                           pclath	equ	0xFFA
  5612                           tblptru	equ	0xFF8
  5613                           tblptrh	equ	0xFF7
  5614                           tblptrl	equ	0xFF6
  5615                           tablat	equ	0xFF5
  5616                           prodh	equ	0xFF4
  5617                           prodl	equ	0xFF3
  5618                           intcon	equ	0xFF2
  5619                           intcon2	equ	0xFF1
  5620                           postinc0	equ	0xFEE
  5621                           wreg	equ	0xFE8
  5622                           indf2	equ	0xFDF
  5623                           postinc2	equ	0xFDE
  5624                           postdec2	equ	0xFDD
  5625                           plusw2	equ	0xFDB
  5626                           fsr2h	equ	0xFDA
  5627                           fsr2l	equ	0xFD9
  5628                           status	equ	0xFD8
  5629                           
  5630 ;; *************** function _EUSART1_Initialize *****************
  5631 ;; Defined at:
  5632 ;;		line 21 in file "UART.c"
  5633 ;; Parameters:    Size  Location     Type
  5634 ;;		None
  5635 ;; Auto vars:     Size  Location     Type
  5636 ;;		None
  5637 ;; Return value:  Size  Location     Type
  5638 ;;                  1    wreg      void 
  5639 ;; Registers used:
  5640 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5641 ;; Tracked objects:
  5642 ;;		On entry : 0/0
  5643 ;;		On exit  : 0/0
  5644 ;;		Unchanged: 0/0
  5645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5646 ;;      Params:         0       0       0       0       0       0       0
  5647 ;;      Locals:         0       0       0       0       0       0       0
  5648 ;;      Temps:          0       0       0       0       0       0       0
  5649 ;;      Totals:         0       0       0       0       0       0       0
  5650 ;;Total ram usage:        0 bytes
  5651 ;; Hardware stack levels used:    1
  5652 ;; Hardware stack levels required when called:    6
  5653 ;; This function calls:
  5654 ;;		_UART_buff_init
  5655 ;; This function is called by:
  5656 ;;		_ComStart
  5657 ;; This function uses a non-reentrant model
  5658 ;;
  5659                           
  5660                           	psect	text32
  5661  001528                     __ptext32:
  5662                           	opt stack 0
  5663  001528                     _EUSART1_Initialize:
  5664                           	opt stack 22
  5665                           
  5666                           ;UART.c: 23: PIE1bits.RC1IE = 0;
  5667                           
  5668                           ;incstack = 0
  5669  001528  9A9D               	bcf	3997,5,c	;volatile
  5670                           
  5671                           ;UART.c: 24: PIE1bits.TX1IE = 0;
  5672  00152A  989D               	bcf	3997,4,c	;volatile
  5673                           
  5674                           ;UART.c: 29: BAUD1CON = 0x48;
  5675  00152C  0E48               	movlw	72
  5676  00152E  6EB8               	movwf	4024,c	;volatile
  5677                           
  5678                           ;UART.c: 32: RC1STA = 0x98;
  5679  001530  0E98               	movlw	152
  5680  001532  6EAB               	movwf	4011,c	;volatile
  5681                           
  5682                           ;UART.c: 35: TX1STA = 0x26;
  5683  001534  0E26               	movlw	38
  5684  001536  6EAC               	movwf	4012,c	;volatile
  5685                           
  5686                           ;UART.c: 38: SPBRG1 = (((16000000/38400)/4)-1);
  5687  001538  0E67               	movlw	103
  5688  00153A  6EAF               	movwf	4015,c	;volatile
  5689                           
  5690                           ;UART.c: 41: SPBRGH1 = 0x00;
  5691  00153C  0E00               	movlw	0
  5692  00153E  6EB0               	movwf	4016,c	;volatile
  5693                           
  5694                           ;UART.c: 44: TXREG1 = 0x00;
  5695  001540  0E00               	movlw	0
  5696  001542  6EAD               	movwf	4013,c	;volatile
  5697                           
  5698                           ;UART.c: 47: RCREG1 = 0x00;
  5699  001544  0E00               	movlw	0
  5700  001546  6EAE               	movwf	4014,c	;volatile
  5701                           
  5702                           ;UART.c: 49: UART_buff_init(&input_buffer);
  5703  001548  0E00               	movlw	low _input_buffer
  5704  00154A  6E23               	movwf	UART_buff_init@_this,c
  5705  00154C  0E03               	movlw	high _input_buffer
  5706  00154E  6E24               	movwf	UART_buff_init@_this+1,c
  5707  001550  EC99  F00B         	call	_UART_buff_init	;wreg free
  5708                           
  5709                           ;UART.c: 50: UART_buff_init(&output_buffer);
  5710  001554  0E00               	movlw	low _output_buffer
  5711  001556  6E23               	movwf	UART_buff_init@_this,c
  5712  001558  0E04               	movlw	high _output_buffer
  5713  00155A  6E24               	movwf	UART_buff_init@_this+1,c
  5714  00155C  EC99  F00B         	call	_UART_buff_init	;wreg free
  5715                           
  5716                           ;UART.c: 52: PIE1bits.RC1IE = 1;
  5717  001560  8A9D               	bsf	3997,5,c	;volatile
  5718  001562  0012               	return		;funcret
  5719  001564                     __end_of_EUSART1_Initialize:
  5720                           	opt stack 0
  5721                           tosu	equ	0xFFF
  5722                           tosh	equ	0xFFE
  5723                           tosl	equ	0xFFD
  5724                           pclath	equ	0xFFA
  5725                           tblptru	equ	0xFF8
  5726                           tblptrh	equ	0xFF7
  5727                           tblptrl	equ	0xFF6
  5728                           tablat	equ	0xFF5
  5729                           prodh	equ	0xFF4
  5730                           prodl	equ	0xFF3
  5731                           intcon	equ	0xFF2
  5732                           intcon2	equ	0xFF1
  5733                           postinc0	equ	0xFEE
  5734                           wreg	equ	0xFE8
  5735                           indf2	equ	0xFDF
  5736                           postinc2	equ	0xFDE
  5737                           postdec2	equ	0xFDD
  5738                           plusw2	equ	0xFDB
  5739                           fsr2h	equ	0xFDA
  5740                           fsr2l	equ	0xFD9
  5741                           status	equ	0xFD8
  5742                           
  5743 ;; *************** function _UART_buff_init *****************
  5744 ;; Defined at:
  5745 ;;		line 56 in file "UART.c"
  5746 ;; Parameters:    Size  Location     Type
  5747 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  5748 ;;		 -> output_buffer(206), input_buffer(206), 
  5749 ;; Auto vars:     Size  Location     Type
  5750 ;;		None
  5751 ;; Return value:  Size  Location     Type
  5752 ;;                  1    wreg      void 
  5753 ;; Registers used:
  5754 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5755 ;; Tracked objects:
  5756 ;;		On entry : 0/0
  5757 ;;		On exit  : 0/0
  5758 ;;		Unchanged: 0/0
  5759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5760 ;;      Params:         2       0       0       0       0       0       0
  5761 ;;      Locals:         0       0       0       0       0       0       0
  5762 ;;      Temps:          0       0       0       0       0       0       0
  5763 ;;      Totals:         2       0       0       0       0       0       0
  5764 ;;Total ram usage:        2 bytes
  5765 ;; Hardware stack levels used:    1
  5766 ;; Hardware stack levels required when called:    5
  5767 ;; This function calls:
  5768 ;;		_memset
  5769 ;; This function is called by:
  5770 ;;		_EUSART1_Initialize
  5771 ;; This function uses a non-reentrant model
  5772 ;;
  5773                           
  5774                           	psect	text33
  5775  001732                     __ptext33:
  5776                           	opt stack 0
  5777  001732                     _UART_buff_init:
  5778                           	opt stack 22
  5779                           
  5780                           ;UART.c: 65: memset(_this, 0, sizeof (*_this));
  5781                           
  5782                           ;incstack = 0
  5783  001732  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  5784  001736  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  5785  00173A  0E00               	movlw	0
  5786  00173C  6E1E               	movwf	memset@c+1,c
  5787  00173E  0E00               	movlw	0
  5788  001740  6E1D               	movwf	memset@c,c
  5789  001742  0E00               	movlw	0
  5790  001744  6E20               	movwf	memset@n+1,c
  5791  001746  0ECE               	movlw	206
  5792  001748  6E1F               	movwf	memset@n,c
  5793  00174A  EC14  F00B         	call	_memset	;wreg free
  5794  00174E  0012               	return		;funcret
  5795  001750                     __end_of_UART_buff_init:
  5796                           	opt stack 0
  5797                           tosu	equ	0xFFF
  5798                           tosh	equ	0xFFE
  5799                           tosl	equ	0xFFD
  5800                           pclath	equ	0xFFA
  5801                           tblptru	equ	0xFF8
  5802                           tblptrh	equ	0xFF7
  5803                           tblptrl	equ	0xFF6
  5804                           tablat	equ	0xFF5
  5805                           prodh	equ	0xFF4
  5806                           prodl	equ	0xFF3
  5807                           intcon	equ	0xFF2
  5808                           intcon2	equ	0xFF1
  5809                           postinc0	equ	0xFEE
  5810                           wreg	equ	0xFE8
  5811                           indf2	equ	0xFDF
  5812                           postinc2	equ	0xFDE
  5813                           postdec2	equ	0xFDD
  5814                           plusw2	equ	0xFDB
  5815                           fsr2h	equ	0xFDA
  5816                           fsr2l	equ	0xFD9
  5817                           status	equ	0xFD8
  5818                           
  5819 ;; *************** function _memset *****************
  5820 ;; Defined at:
  5821 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  5822 ;; Parameters:    Size  Location     Type
  5823 ;;  p1              2   26[COMRAM] PTR void 
  5824 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  5825 ;;  c               2   28[COMRAM] int 
  5826 ;;  n               2   30[COMRAM] unsigned int 
  5827 ;; Auto vars:     Size  Location     Type
  5828 ;;  p               2   32[COMRAM] PTR unsigned char 
  5829 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  5830 ;; Return value:  Size  Location     Type
  5831 ;;                  2   26[COMRAM] PTR void 
  5832 ;; Registers used:
  5833 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5834 ;; Tracked objects:
  5835 ;;		On entry : 0/0
  5836 ;;		On exit  : 0/0
  5837 ;;		Unchanged: 0/0
  5838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5839 ;;      Params:         6       0       0       0       0       0       0
  5840 ;;      Locals:         2       0       0       0       0       0       0
  5841 ;;      Temps:          0       0       0       0       0       0       0
  5842 ;;      Totals:         8       0       0       0       0       0       0
  5843 ;;Total ram usage:        8 bytes
  5844 ;; Hardware stack levels used:    1
  5845 ;; Hardware stack levels required when called:    4
  5846 ;; This function calls:
  5847 ;;		Nothing
  5848 ;; This function is called by:
  5849 ;;		_FastTransfer_buffer_flush
  5850 ;;		_UART_buff_init
  5851 ;;		_UART_buff_flush
  5852 ;; This function uses a non-reentrant model
  5853 ;;
  5854                           
  5855                           	psect	text34
  5856  001628                     __ptext34:
  5857                           	opt stack 0
  5858  001628                     _memset:
  5859                           	opt stack 22
  5860                           
  5861                           ;incstack = 0
  5862  001628  C01B  F021         	movff	memset@p1,memset@p
  5863  00162C  C01C  F022         	movff	memset@p1+1,memset@p+1
  5864  001630  D008               	goto	l2417
  5865  001632                     l2413:
  5866  001632  C021  FFD9         	movff	memset@p,fsr2l
  5867  001636  C022  FFDA         	movff	memset@p+1,fsr2h
  5868  00163A  C01D  FFDF         	movff	memset@c,indf2
  5869  00163E  4A21               	infsnz	memset@p,f,c
  5870  001640  2A22               	incf	memset@p+1,f,c
  5871  001642                     l2417:
  5872  001642  061F               	decf	memset@n,f,c
  5873  001644  A0D8               	btfss	status,0,c
  5874  001646  0620               	decf	memset@n+1,f,c
  5875  001648  281F               	incf	memset@n,w,c
  5876  00164A  E1F3               	bnz	l2413
  5877  00164C  2820               	incf	memset@n+1,w,c
  5878  00164E  B4D8               	btfsc	status,2,c
  5879  001650  0012               	return	
  5880  001652  D7EF               	goto	l2413
  5881  001654                     __end_of_memset:
  5882                           	opt stack 0
  5883                           tosu	equ	0xFFF
  5884                           tosh	equ	0xFFE
  5885                           tosl	equ	0xFFD
  5886                           pclath	equ	0xFFA
  5887                           tblptru	equ	0xFF8
  5888                           tblptrh	equ	0xFF7
  5889                           tblptrl	equ	0xFF6
  5890                           tablat	equ	0xFF5
  5891                           prodh	equ	0xFF4
  5892                           prodl	equ	0xFF3
  5893                           intcon	equ	0xFF2
  5894                           intcon2	equ	0xFF1
  5895                           postinc0	equ	0xFEE
  5896                           wreg	equ	0xFE8
  5897                           indf2	equ	0xFDF
  5898                           postinc2	equ	0xFDE
  5899                           postdec2	equ	0xFDD
  5900                           plusw2	equ	0xFDB
  5901                           fsr2h	equ	0xFDA
  5902                           fsr2l	equ	0xFD9
  5903                           status	equ	0xFD8
  5904                           
  5905 ;; *************** function _SetTime *****************
  5906 ;; Defined at:
  5907 ;;		line 98 in file "tmr0.c"
  5908 ;; Parameters:    Size  Location     Type
  5909 ;;		None
  5910 ;; Auto vars:     Size  Location     Type
  5911 ;;		None
  5912 ;; Return value:  Size  Location     Type
  5913 ;;                  1    wreg      void 
  5914 ;; Registers used:
  5915 ;;		wreg, status,2
  5916 ;; Tracked objects:
  5917 ;;		On entry : 0/0
  5918 ;;		On exit  : 0/0
  5919 ;;		Unchanged: 0/0
  5920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5921 ;;      Params:         0       0       0       0       0       0       0
  5922 ;;      Locals:         0       0       0       0       0       0       0
  5923 ;;      Temps:          0       0       0       0       0       0       0
  5924 ;;      Totals:         0       0       0       0       0       0       0
  5925 ;;Total ram usage:        0 bytes
  5926 ;; Hardware stack levels used:    1
  5927 ;; Hardware stack levels required when called:    4
  5928 ;; This function calls:
  5929 ;;		Nothing
  5930 ;; This function is called by:
  5931 ;;		_main
  5932 ;; This function uses a non-reentrant model
  5933 ;;
  5934                           
  5935                           	psect	text35
  5936  0017E0                     __ptext35:
  5937                           	opt stack 0
  5938  0017E0                     _SetTime:
  5939                           	opt stack 26
  5940                           
  5941                           ;tmr0.c: 99: time = 0;
  5942                           
  5943                           ;incstack = 0
  5944  0017E0  0E00               	movlw	0
  5945  0017E2  0100               	movlb	0	; () banked
  5946  0017E4  6F60               	movwf	_time& (0+255),b
  5947  0017E6  0E00               	movlw	0
  5948  0017E8  6F61               	movwf	(_time+1)& (0+255),b
  5949  0017EA  0E00               	movlw	0
  5950  0017EC  6F62               	movwf	(_time+2)& (0+255),b
  5951  0017EE  0E00               	movlw	0
  5952  0017F0  6F63               	movwf	(_time+3)& (0+255),b
  5953                           
  5954                           ; BSR set to: 0
  5955  0017F2  0012               	return		;funcret
  5956  0017F4                     __end_of_SetTime:
  5957                           	opt stack 0
  5958                           tosu	equ	0xFFF
  5959                           tosh	equ	0xFFE
  5960                           tosl	equ	0xFFD
  5961                           pclath	equ	0xFFA
  5962                           tblptru	equ	0xFF8
  5963                           tblptrh	equ	0xFF7
  5964                           tblptrl	equ	0xFF6
  5965                           tablat	equ	0xFF5
  5966                           prodh	equ	0xFF4
  5967                           prodl	equ	0xFF3
  5968                           intcon	equ	0xFF2
  5969                           intcon2	equ	0xFF1
  5970                           postinc0	equ	0xFEE
  5971                           wreg	equ	0xFE8
  5972                           indf2	equ	0xFDF
  5973                           postinc2	equ	0xFDE
  5974                           postdec2	equ	0xFDD
  5975                           plusw2	equ	0xFDB
  5976                           fsr2h	equ	0xFDA
  5977                           fsr2l	equ	0xFD9
  5978                           status	equ	0xFD8
  5979                           
  5980 ;; *************** function _ReadFaults *****************
  5981 ;; Defined at:
  5982 ;;		line 9 in file "Function.c"
  5983 ;; Parameters:    Size  Location     Type
  5984 ;;		None
  5985 ;; Auto vars:     Size  Location     Type
  5986 ;;		None
  5987 ;; Return value:  Size  Location     Type
  5988 ;;                  1    wreg      void 
  5989 ;; Registers used:
  5990 ;;		wreg, status,2, status,0
  5991 ;; Tracked objects:
  5992 ;;		On entry : 0/0
  5993 ;;		On exit  : 0/0
  5994 ;;		Unchanged: 0/0
  5995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5996 ;;      Params:         0       0       0       0       0       0       0
  5997 ;;      Locals:         0       0       0       0       0       0       0
  5998 ;;      Temps:          1       0       0       0       0       0       0
  5999 ;;      Totals:         1       0       0       0       0       0       0
  6000 ;;Total ram usage:        1 bytes
  6001 ;; Hardware stack levels used:    1
  6002 ;; Hardware stack levels required when called:    4
  6003 ;; This function calls:
  6004 ;;		Nothing
  6005 ;; This function is called by:
  6006 ;;		_main
  6007 ;; This function uses a non-reentrant model
  6008 ;;
  6009                           
  6010                           	psect	text36
  6011  000F66                     __ptext36:
  6012                           	opt stack 0
  6013  000F66                     _ReadFaults:
  6014                           	opt stack 26
  6015                           
  6016                           ;Function.c: 10: ByteHigh = ByteHigh | ((LATCbits.LATC5&0x01) << 0);
  6017                           
  6018                           ; BSR set to: 0
  6019                           ;incstack = 0
  6020  000F66  AA8B               	btfss	3979,5,c	;volatile
  6021  000F68  D002               	goto	u1010
  6022  000F6A  0E01               	movlw	1
  6023  000F6C  D001               	goto	u1016
  6024  000F6E                     u1010:
  6025  000F6E  0E00               	movlw	0
  6026  000F70                     u1016:
  6027  000F70  103B               	iorwf	_ByteHigh,w,c
  6028  000F72  6E3B               	movwf	_ByteHigh,c
  6029                           
  6030                           ;Function.c: 11: ByteHigh = ByteHigh | ((LATCbits.LATC4&0x01) << 1);
  6031  000F74  A88B               	btfss	3979,4,c	;volatile
  6032  000F76  D003               	goto	u1020
  6033  000F78  6A1B               	clrf	??_ReadFaults& (0+255),c
  6034  000F7A  2A1B               	incf	??_ReadFaults& (0+255),f,c
  6035  000F7C  D001               	goto	u1028
  6036  000F7E                     u1020:
  6037  000F7E  6A1B               	clrf	??_ReadFaults& (0+255),c
  6038  000F80                     u1028:
  6039  000F80  90D8               	bcf	status,0,c
  6040  000F82  341B               	rlcf	??_ReadFaults,w,c
  6041  000F84  103B               	iorwf	_ByteHigh,w,c
  6042  000F86  6E3B               	movwf	_ByteHigh,c
  6043                           
  6044                           ;Function.c: 12: ByteHigh = ByteHigh | ((LATDbits.LATD3&0x01) << 2);
  6045  000F88  A68C               	btfss	3980,3,c	;volatile
  6046  000F8A  D003               	goto	u1030
  6047  000F8C  6A1B               	clrf	??_ReadFaults& (0+255),c
  6048  000F8E  2A1B               	incf	??_ReadFaults& (0+255),f,c
  6049  000F90  D001               	goto	u1038
  6050  000F92                     u1030:
  6051  000F92  6A1B               	clrf	??_ReadFaults& (0+255),c
  6052  000F94                     u1038:
  6053  000F94  90D8               	bcf	status,0,c
  6054  000F96  361B               	rlcf	??_ReadFaults,f,c
  6055  000F98  90D8               	bcf	status,0,c
  6056  000F9A  341B               	rlcf	??_ReadFaults,w,c
  6057  000F9C  103B               	iorwf	_ByteHigh,w,c
  6058  000F9E  6E3B               	movwf	_ByteHigh,c
  6059                           
  6060                           ;Function.c: 13: ByteHigh = ByteHigh | ((LATDbits.LATD2&0x01) << 3);
  6061  000FA0  A48C               	btfss	3980,2,c	;volatile
  6062  000FA2  D003               	goto	u1040
  6063  000FA4  6A1B               	clrf	??_ReadFaults& (0+255),c
  6064  000FA6  2A1B               	incf	??_ReadFaults& (0+255),f,c
  6065  000FA8  D001               	goto	u1048
  6066  000FAA                     u1040:
  6067  000FAA  6A1B               	clrf	??_ReadFaults& (0+255),c
  6068  000FAC                     u1048:
  6069  000FAC  90D8               	bcf	status,0,c
  6070  000FAE  361B               	rlcf	??_ReadFaults,f,c
  6071  000FB0  90D8               	bcf	status,0,c
  6072  000FB2  361B               	rlcf	??_ReadFaults,f,c
  6073  000FB4  90D8               	bcf	status,0,c
  6074  000FB6  341B               	rlcf	??_ReadFaults,w,c
  6075  000FB8  103B               	iorwf	_ByteHigh,w,c
  6076  000FBA  6E3B               	movwf	_ByteHigh,c
  6077                           
  6078                           ;Function.c: 14: ByteHigh = ByteHigh | ((LATDbits.LATD1&0x01) << 4);
  6079  000FBC  A28C               	btfss	3980,1,c	;volatile
  6080  000FBE  D003               	goto	u1050
  6081  000FC0  6A1B               	clrf	??_ReadFaults& (0+255),c
  6082  000FC2  2A1B               	incf	??_ReadFaults& (0+255),f,c
  6083  000FC4  D001               	goto	u1058
  6084  000FC6                     u1050:
  6085  000FC6  6A1B               	clrf	??_ReadFaults& (0+255),c
  6086  000FC8                     u1058:
  6087  000FC8  381B               	swapf	??_ReadFaults,w,c
  6088  000FCA  0BF0               	andlw	240
  6089  000FCC  103B               	iorwf	_ByteHigh,w,c
  6090  000FCE  6E3B               	movwf	_ByteHigh,c
  6091                           
  6092                           ;Function.c: 15: ByteHigh = ByteHigh | ((LATDbits.LATD0&0x01) << 5);
  6093  000FD0  A08C               	btfss	3980,0,c	;volatile
  6094  000FD2  D003               	goto	u1060
  6095  000FD4  0E20               	movlw	32
  6096  000FD6  6E1B               	movwf	??_ReadFaults& (0+255),c
  6097  000FD8  D001               	goto	u1075
  6098  000FDA                     u1060:
  6099  000FDA  6A1B               	clrf	??_ReadFaults& (0+255),c
  6100  000FDC                     u1075:
  6101  000FDC  501B               	movf	??_ReadFaults,w,c
  6102  000FDE  103B               	iorwf	_ByteHigh,w,c
  6103  000FE0  6E3B               	movwf	_ByteHigh,c
  6104                           
  6105                           ;Function.c: 16: ByteHigh = ByteHigh | ((LATCbits.LATC3&0x01) << 6);
  6106  000FE2  A68B               	btfss	3979,3,c	;volatile
  6107  000FE4  D003               	goto	u1080
  6108  000FE6  0E40               	movlw	64
  6109  000FE8  6E1B               	movwf	??_ReadFaults& (0+255),c
  6110  000FEA  D001               	goto	u1095
  6111  000FEC                     u1080:
  6112  000FEC  6A1B               	clrf	??_ReadFaults& (0+255),c
  6113  000FEE                     u1095:
  6114  000FEE  501B               	movf	??_ReadFaults,w,c
  6115  000FF0  103B               	iorwf	_ByteHigh,w,c
  6116  000FF2  6E3B               	movwf	_ByteHigh,c
  6117                           
  6118                           ;Function.c: 17: ByteHigh = ByteHigh | ((LATCbits.LATC2&0x01) << 7);
  6119  000FF4  A48B               	btfss	3979,2,c	;volatile
  6120  000FF6  D003               	goto	u1100
  6121  000FF8  0E80               	movlw	128
  6122  000FFA  6E1B               	movwf	??_ReadFaults& (0+255),c
  6123  000FFC  D001               	goto	u1115
  6124  000FFE                     u1100:
  6125  000FFE  6A1B               	clrf	??_ReadFaults& (0+255),c
  6126  001000                     u1115:
  6127  001000  501B               	movf	??_ReadFaults,w,c
  6128  001002  103B               	iorwf	_ByteHigh,w,c
  6129  001004  6E3B               	movwf	_ByteHigh,c
  6130                           
  6131                           ;Function.c: 18: ByteLow = ByteLow | ((LATCbits.LATC1&0x01) << 0);
  6132  001006  A28B               	btfss	3979,1,c	;volatile
  6133  001008  D002               	goto	u1120
  6134  00100A  0E01               	movlw	1
  6135  00100C  D001               	goto	u1126
  6136  00100E                     u1120:
  6137  00100E  0E00               	movlw	0
  6138  001010                     u1126:
  6139  001010  103C               	iorwf	_ByteLow,w,c
  6140  001012  6E3C               	movwf	_ByteLow,c
  6141                           
  6142                           ;Function.c: 19: ByteLow = ByteLow | ((LATAbits.LATA7&0x01) << 1);
  6143  001014  AE89               	btfss	3977,7,c	;volatile
  6144  001016  D003               	goto	u1130
  6145  001018  6A1B               	clrf	??_ReadFaults& (0+255),c
  6146  00101A  2A1B               	incf	??_ReadFaults& (0+255),f,c
  6147  00101C  D001               	goto	u1138
  6148  00101E                     u1130:
  6149  00101E  6A1B               	clrf	??_ReadFaults& (0+255),c
  6150  001020                     u1138:
  6151  001020  90D8               	bcf	status,0,c
  6152  001022  341B               	rlcf	??_ReadFaults,w,c
  6153  001024  103C               	iorwf	_ByteLow,w,c
  6154  001026  6E3C               	movwf	_ByteLow,c
  6155                           
  6156                           ;Function.c: 20: ByteLow = ByteLow | ((LATCbits.LATC0&0x01) << 1);
  6157  001028  A08B               	btfss	3979,0,c	;volatile
  6158  00102A  D003               	goto	u1140
  6159  00102C  6A1B               	clrf	??_ReadFaults& (0+255),c
  6160  00102E  2A1B               	incf	??_ReadFaults& (0+255),f,c
  6161  001030  D001               	goto	u1148
  6162  001032                     u1140:
  6163  001032  6A1B               	clrf	??_ReadFaults& (0+255),c
  6164  001034                     u1148:
  6165  001034  90D8               	bcf	status,0,c
  6166  001036  341B               	rlcf	??_ReadFaults,w,c
  6167  001038  103C               	iorwf	_ByteLow,w,c
  6168  00103A  6E3C               	movwf	_ByteLow,c
  6169  00103C  0012               	return		;funcret
  6170  00103E                     __end_of_ReadFaults:
  6171                           	opt stack 0
  6172                           tosu	equ	0xFFF
  6173                           tosh	equ	0xFFE
  6174                           tosl	equ	0xFFD
  6175                           pclath	equ	0xFFA
  6176                           tblptru	equ	0xFF8
  6177                           tblptrh	equ	0xFF7
  6178                           tblptrl	equ	0xFF6
  6179                           tablat	equ	0xFF5
  6180                           prodh	equ	0xFF4
  6181                           prodl	equ	0xFF3
  6182                           intcon	equ	0xFF2
  6183                           intcon2	equ	0xFF1
  6184                           postinc0	equ	0xFEE
  6185                           wreg	equ	0xFE8
  6186                           indf2	equ	0xFDF
  6187                           postinc2	equ	0xFDE
  6188                           postdec2	equ	0xFDD
  6189                           plusw2	equ	0xFDB
  6190                           fsr2h	equ	0xFDA
  6191                           fsr2l	equ	0xFD9
  6192                           status	equ	0xFD8
  6193                           
  6194 ;; *************** function _GetTime *****************
  6195 ;; Defined at:
  6196 ;;		line 94 in file "tmr0.c"
  6197 ;; Parameters:    Size  Location     Type
  6198 ;;		None
  6199 ;; Auto vars:     Size  Location     Type
  6200 ;;		None
  6201 ;; Return value:  Size  Location     Type
  6202 ;;                  4   26[COMRAM] long 
  6203 ;; Registers used:
  6204 ;;		None
  6205 ;; Tracked objects:
  6206 ;;		On entry : 0/0
  6207 ;;		On exit  : 0/0
  6208 ;;		Unchanged: 0/0
  6209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6210 ;;      Params:         4       0       0       0       0       0       0
  6211 ;;      Locals:         0       0       0       0       0       0       0
  6212 ;;      Temps:          0       0       0       0       0       0       0
  6213 ;;      Totals:         4       0       0       0       0       0       0
  6214 ;;Total ram usage:        4 bytes
  6215 ;; Hardware stack levels used:    1
  6216 ;; Hardware stack levels required when called:    4
  6217 ;; This function calls:
  6218 ;;		Nothing
  6219 ;; This function is called by:
  6220 ;;		_main
  6221 ;; This function uses a non-reentrant model
  6222 ;;
  6223                           
  6224                           	psect	text37
  6225  001806                     __ptext37:
  6226                           	opt stack 0
  6227  001806                     _GetTime:
  6228                           	opt stack 26
  6229                           
  6230                           ;tmr0.c: 95: return time;
  6231                           
  6232                           ;incstack = 0
  6233  001806  C060  F01B         	movff	_time,?_GetTime
  6234  00180A  C061  F01C         	movff	_time+1,?_GetTime+1
  6235  00180E  C062  F01D         	movff	_time+2,?_GetTime+2
  6236  001812  C063  F01E         	movff	_time+3,?_GetTime+3
  6237  001816  0012               	return		;funcret
  6238  001818                     __end_of_GetTime:
  6239                           	opt stack 0
  6240                           tosu	equ	0xFFF
  6241                           tosh	equ	0xFFE
  6242                           tosl	equ	0xFFD
  6243                           pclath	equ	0xFFA
  6244                           tblptru	equ	0xFF8
  6245                           tblptrh	equ	0xFF7
  6246                           tblptrl	equ	0xFF6
  6247                           tablat	equ	0xFF5
  6248                           prodh	equ	0xFF4
  6249                           prodl	equ	0xFF3
  6250                           intcon	equ	0xFF2
  6251                           intcon2	equ	0xFF1
  6252                           postinc0	equ	0xFEE
  6253                           wreg	equ	0xFE8
  6254                           indf2	equ	0xFDF
  6255                           postinc2	equ	0xFDE
  6256                           postdec2	equ	0xFDD
  6257                           plusw2	equ	0xFDB
  6258                           fsr2h	equ	0xFDA
  6259                           fsr2l	equ	0xFD9
  6260                           status	equ	0xFD8
  6261                           
  6262 ;; *************** function _INTERRUPT_InterruptManager *****************
  6263 ;; Defined at:
  6264 ;;		line 156 in file "Function.c"
  6265 ;; Parameters:    Size  Location     Type
  6266 ;;		None
  6267 ;; Auto vars:     Size  Location     Type
  6268 ;;		None
  6269 ;; Return value:  Size  Location     Type
  6270 ;;                  1    wreg      void 
  6271 ;; Registers used:
  6272 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6273 ;; Tracked objects:
  6274 ;;		On entry : 0/0
  6275 ;;		On exit  : 0/0
  6276 ;;		Unchanged: 0/0
  6277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6278 ;;      Params:         0       0       0       0       0       0       0
  6279 ;;      Locals:         0       0       0       0       0       0       0
  6280 ;;      Temps:         14       0       0       0       0       0       0
  6281 ;;      Totals:        14       0       0       0       0       0       0
  6282 ;;Total ram usage:       14 bytes
  6283 ;; Hardware stack levels used:    1
  6284 ;; Hardware stack levels required when called:    3
  6285 ;; This function calls:
  6286 ;;		_EUSART1_Receive_ISR
  6287 ;;		_EUSART1_Transmit_ISR
  6288 ;;		_TMR0_ISR
  6289 ;; This function is called by:
  6290 ;;		Interrupt level 2
  6291 ;; This function uses a non-reentrant model
  6292 ;;
  6293                           
  6294                           	psect	intcode
  6295  000008                     __pintcode:
  6296                           	opt stack 0
  6297  000008                     _INTERRUPT_InterruptManager:
  6298                           	opt stack 21
  6299                           
  6300                           ;incstack = 0
  6301  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6302  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  6303  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  6304  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  6305  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  6306  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  6307  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  6308  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  6309  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  6310  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  6311  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  6312  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  6313  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  6314  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  6315  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  6316                           
  6317                           ;Function.c: 159: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  6318  000042  BA9D               	btfsc	3997,5,c	;volatile
  6319  000044  AA9E               	btfss	3998,5,c	;volatile
  6320  000046  D003               	goto	i2l457
  6321                           
  6322                           ;Function.c: 160: {
  6323                           ;Function.c: 161: EUSART1_Receive_ISR();
  6324  000048  ECA8  F00B         	call	_EUSART1_Receive_ISR	;wreg free
  6325                           
  6326                           ;Function.c: 162: }
  6327  00004C  D00B               	goto	i2l463
  6328  00004E                     i2l457:
  6329                           
  6330                           ;Function.c: 163: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  6331  00004E  B89D               	btfsc	3997,4,c	;volatile
  6332  000050  A89E               	btfss	3998,4,c	;volatile
  6333  000052  D003               	goto	i2l459
  6334                           
  6335                           ;Function.c: 164: {
  6336                           ;Function.c: 165: EUSART1_Transmit_ISR();
  6337  000054  ECCC  F00A         	call	_EUSART1_Transmit_ISR	;wreg free
  6338                           
  6339                           ;Function.c: 166: }
  6340  000058  D005               	goto	i2l463
  6341  00005A                     i2l459:
  6342                           
  6343                           ;Function.c: 167: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  6344  00005A  BAF2               	btfsc	intcon,5,c	;volatile
  6345  00005C  A4F2               	btfss	intcon,2,c	;volatile
  6346  00005E  D002               	goto	i2l463
  6347                           
  6348                           ;Function.c: 168: {
  6349                           ;Function.c: 169: TMR0_ISR();
  6350  000060  ECB7  F00B         	call	_TMR0_ISR	;wreg free
  6351  000064                     i2l463:
  6352  000064  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  6353  000068  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  6354  00006C  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  6355  000070  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  6356  000074  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  6357  000078  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  6358  00007C  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  6359  000080  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  6360  000084  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  6361  000088  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  6362  00008C  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  6363  000090  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  6364  000094  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  6365  000098  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  6366  00009C  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6367  00009E  0011               	retfie		f
  6368  0000A0                     __end_of_INTERRUPT_InterruptManager:
  6369                           	opt stack 0
  6370                           tosu	equ	0xFFF
  6371                           tosh	equ	0xFFE
  6372                           tosl	equ	0xFFD
  6373                           pclatu	equ	0xFFB
  6374                           pclath	equ	0xFFA
  6375                           tblptru	equ	0xFF8
  6376                           tblptrh	equ	0xFF7
  6377                           tblptrl	equ	0xFF6
  6378                           tablat	equ	0xFF5
  6379                           prodh	equ	0xFF4
  6380                           prodl	equ	0xFF3
  6381                           intcon	equ	0xFF2
  6382                           intcon2	equ	0xFF1
  6383                           postinc0	equ	0xFEE
  6384                           fsr0h	equ	0xFEA
  6385                           fsr0l	equ	0xFE9
  6386                           wreg	equ	0xFE8
  6387                           fsr1h	equ	0xFE2
  6388                           fsr1l	equ	0xFE1
  6389                           indf2	equ	0xFDF
  6390                           postinc2	equ	0xFDE
  6391                           postdec2	equ	0xFDD
  6392                           plusw2	equ	0xFDB
  6393                           fsr2h	equ	0xFDA
  6394                           fsr2l	equ	0xFD9
  6395                           status	equ	0xFD8
  6396                           
  6397 ;; *************** function _TMR0_ISR *****************
  6398 ;; Defined at:
  6399 ;;		line 82 in file "tmr0.c"
  6400 ;; Parameters:    Size  Location     Type
  6401 ;;		None
  6402 ;; Auto vars:     Size  Location     Type
  6403 ;;		None
  6404 ;; Return value:  Size  Location     Type
  6405 ;;                  1    wreg      void 
  6406 ;; Registers used:
  6407 ;;		wreg, status,2, status,0
  6408 ;; Tracked objects:
  6409 ;;		On entry : 0/0
  6410 ;;		On exit  : 0/0
  6411 ;;		Unchanged: 0/0
  6412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6413 ;;      Params:         0       0       0       0       0       0       0
  6414 ;;      Locals:         0       0       0       0       0       0       0
  6415 ;;      Temps:          0       0       0       0       0       0       0
  6416 ;;      Totals:         0       0       0       0       0       0       0
  6417 ;;Total ram usage:        0 bytes
  6418 ;; Hardware stack levels used:    1
  6419 ;; This function calls:
  6420 ;;		Nothing
  6421 ;; This function is called by:
  6422 ;;		_INTERRUPT_InterruptManager
  6423 ;; This function uses a non-reentrant model
  6424 ;;
  6425                           
  6426                           	psect	text39
  6427  00176E                     __ptext39:
  6428                           	opt stack 0
  6429  00176E                     _TMR0_ISR:
  6430                           	opt stack 23
  6431                           
  6432                           ;tmr0.c: 83: static volatile uint16_t CountCallBack = 0;
  6433                           ;tmr0.c: 86: TMR0H = timer0ReloadVal16bit >> 8;
  6434                           
  6435                           ;incstack = 0
  6436  00176E  5039               	movf	_timer0ReloadVal16bit+1,w,c	;volatile
  6437  001770  6ED7               	movwf	4055,c	;volatile
  6438                           
  6439                           ;tmr0.c: 87: TMR0L = (uint8_t) timer0ReloadVal16bit;
  6440  001772  C038  FFD6         	movff	_timer0ReloadVal16bit,4054	;volatile
  6441                           
  6442                           ;tmr0.c: 89: time++;
  6443  001776  0E01               	movlw	1
  6444  001778  0100               	movlb	0	; () banked
  6445  00177A  2760               	addwf	_time& (0+255),f,b
  6446  00177C  0E00               	movlw	0
  6447  00177E  2361               	addwfc	(_time+1)& (0+255),f,b
  6448  001780  2362               	addwfc	(_time+2)& (0+255),f,b
  6449  001782  2363               	addwfc	(_time+3)& (0+255),f,b
  6450                           
  6451                           ; BSR set to: 0
  6452                           ;tmr0.c: 91: INTCONbits.TMR0IF = 0;
  6453  001784  94F2               	bcf	intcon,2,c	;volatile
  6454                           
  6455                           ; BSR set to: 0
  6456  001786  0012               	return		;funcret
  6457  001788                     __end_of_TMR0_ISR:
  6458                           	opt stack 0
  6459                           tosu	equ	0xFFF
  6460                           tosh	equ	0xFFE
  6461                           tosl	equ	0xFFD
  6462                           pclatu	equ	0xFFB
  6463                           pclath	equ	0xFFA
  6464                           tblptru	equ	0xFF8
  6465                           tblptrh	equ	0xFF7
  6466                           tblptrl	equ	0xFF6
  6467                           tablat	equ	0xFF5
  6468                           prodh	equ	0xFF4
  6469                           prodl	equ	0xFF3
  6470                           intcon	equ	0xFF2
  6471                           intcon2	equ	0xFF1
  6472                           postinc0	equ	0xFEE
  6473                           fsr0h	equ	0xFEA
  6474                           fsr0l	equ	0xFE9
  6475                           wreg	equ	0xFE8
  6476                           fsr1h	equ	0xFE2
  6477                           fsr1l	equ	0xFE1
  6478                           indf2	equ	0xFDF
  6479                           postinc2	equ	0xFDE
  6480                           postdec2	equ	0xFDD
  6481                           plusw2	equ	0xFDB
  6482                           fsr2h	equ	0xFDA
  6483                           fsr2l	equ	0xFD9
  6484                           status	equ	0xFD8
  6485                           
  6486 ;; *************** function _EUSART1_Transmit_ISR *****************
  6487 ;; Defined at:
  6488 ;;		line 150 in file "UART.c"
  6489 ;; Parameters:    Size  Location     Type
  6490 ;;		None
  6491 ;; Auto vars:     Size  Location     Type
  6492 ;;		None
  6493 ;; Return value:  Size  Location     Type
  6494 ;;                  1    wreg      void 
  6495 ;; Registers used:
  6496 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6497 ;; Tracked objects:
  6498 ;;		On entry : 0/0
  6499 ;;		On exit  : 0/0
  6500 ;;		Unchanged: 0/0
  6501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6502 ;;      Params:         0       0       0       0       0       0       0
  6503 ;;      Locals:         0       0       0       0       0       0       0
  6504 ;;      Temps:          0       0       0       0       0       0       0
  6505 ;;      Totals:         0       0       0       0       0       0       0
  6506 ;;Total ram usage:        0 bytes
  6507 ;; Hardware stack levels used:    1
  6508 ;; Hardware stack levels required when called:    2
  6509 ;; This function calls:
  6510 ;;		i2_UART_buff_get
  6511 ;;		i2_UART_buff_size
  6512 ;; This function is called by:
  6513 ;;		_INTERRUPT_InterruptManager
  6514 ;; This function uses a non-reentrant model
  6515 ;;
  6516                           
  6517                           	psect	text40
  6518  001598                     __ptext40:
  6519                           	opt stack 0
  6520  001598                     _EUSART1_Transmit_ISR:
  6521                           	opt stack 21
  6522                           
  6523                           ;UART.c: 152: if (UART_buff_size(&output_buffer) > 0) {
  6524                           
  6525                           ; BSR set to: 0
  6526                           ;incstack = 0
  6527  001598  0E00               	movlw	low _output_buffer
  6528  00159A  6E01               	movwf	i2UART_buff_size@_this,c
  6529  00159C  0E04               	movlw	high _output_buffer
  6530  00159E  6E02               	movwf	i2UART_buff_size@_this+1,c
  6531  0015A0  ECE5  F00B         	call	i2_UART_buff_size	;wreg free
  6532  0015A4  BE02               	btfsc	?i2_UART_buff_size+1,7,c
  6533  0015A6  D00D               	goto	i2l2321
  6534  0015A8  5002               	movf	?i2_UART_buff_size+1,w,c
  6535  0015AA  E103               	bnz	i2u228_40
  6536  0015AC  0401               	decf	?i2_UART_buff_size,w,c
  6537  0015AE  A0D8               	btfss	status,0,c
  6538  0015B0  D008               	goto	i2l2321
  6539  0015B2                     i2u228_40:
  6540                           
  6541                           ;UART.c: 153: TXREG1 = UART_buff_get(&output_buffer);
  6542  0015B2  0E00               	movlw	low _output_buffer
  6543  0015B4  6E07               	movwf	i2UART_buff_get@_this,c
  6544  0015B6  0E04               	movlw	high _output_buffer
  6545  0015B8  6E08               	movwf	i2UART_buff_get@_this+1,c
  6546  0015BA  ECD3  F008         	call	i2_UART_buff_get	;wreg free
  6547  0015BE  6EAD               	movwf	4013,c	;volatile
  6548                           
  6549                           ;UART.c: 154: } else {
  6550  0015C0  0012               	return	
  6551  0015C2                     i2l2321:
  6552                           
  6553                           ;UART.c: 155: Transmit_stall = 1;
  6554  0015C2  0E01               	movlw	1
  6555  0015C4  6E44               	movwf	_Transmit_stall,c
  6556                           
  6557                           ;UART.c: 156: PIE1bits.TX1IE = 0;
  6558  0015C6  989D               	bcf	3997,4,c	;volatile
  6559  0015C8  0012               	return	
  6560  0015CA                     __end_of_EUSART1_Transmit_ISR:
  6561                           	opt stack 0
  6562                           tosu	equ	0xFFF
  6563                           tosh	equ	0xFFE
  6564                           tosl	equ	0xFFD
  6565                           pclatu	equ	0xFFB
  6566                           pclath	equ	0xFFA
  6567                           tblptru	equ	0xFF8
  6568                           tblptrh	equ	0xFF7
  6569                           tblptrl	equ	0xFF6
  6570                           tablat	equ	0xFF5
  6571                           prodh	equ	0xFF4
  6572                           prodl	equ	0xFF3
  6573                           intcon	equ	0xFF2
  6574                           intcon2	equ	0xFF1
  6575                           postinc0	equ	0xFEE
  6576                           fsr0h	equ	0xFEA
  6577                           fsr0l	equ	0xFE9
  6578                           wreg	equ	0xFE8
  6579                           fsr1h	equ	0xFE2
  6580                           fsr1l	equ	0xFE1
  6581                           indf2	equ	0xFDF
  6582                           postinc2	equ	0xFDE
  6583                           postdec2	equ	0xFDD
  6584                           plusw2	equ	0xFDB
  6585                           fsr2h	equ	0xFDA
  6586                           fsr2l	equ	0xFD9
  6587                           status	equ	0xFD8
  6588                           
  6589 ;; *************** function i2_UART_buff_size *****************
  6590 ;; Defined at:
  6591 ;;		line 102 in file "UART.c"
  6592 ;; Parameters:    Size  Location     Type
  6593 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  6594 ;;		 -> output_buffer(206), input_buffer(206), 
  6595 ;; Auto vars:     Size  Location     Type
  6596 ;;		None
  6597 ;; Return value:  Size  Location     Type
  6598 ;;                  2    0[COMRAM] int 
  6599 ;; Registers used:
  6600 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6601 ;; Tracked objects:
  6602 ;;		On entry : 0/0
  6603 ;;		On exit  : 0/0
  6604 ;;		Unchanged: 0/0
  6605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6606 ;;      Params:         2       0       0       0       0       0       0
  6607 ;;      Locals:         0       0       0       0       0       0       0
  6608 ;;      Temps:          0       0       0       0       0       0       0
  6609 ;;      Totals:         2       0       0       0       0       0       0
  6610 ;;Total ram usage:        2 bytes
  6611 ;; Hardware stack levels used:    1
  6612 ;; This function calls:
  6613 ;;		Nothing
  6614 ;; This function is called by:
  6615 ;;		_EUSART1_Transmit_ISR
  6616 ;; This function uses a non-reentrant model
  6617 ;;
  6618                           
  6619                           	psect	text41
  6620  0017CA                     __ptext41:
  6621                           	opt stack 0
  6622  0017CA                     i2_UART_buff_size:
  6623                           	opt stack 22
  6624                           
  6625                           ;UART.c: 103: return (_this->count);
  6626                           
  6627                           ;incstack = 0
  6628  0017CA  EE20 F0CC          	lfsr	2,204
  6629  0017CE  5001               	movf	i2UART_buff_size@_this,w,c
  6630  0017D0  26D9               	addwf	fsr2l,f,c
  6631  0017D2  5002               	movf	i2UART_buff_size@_this+1,w,c
  6632  0017D4  22DA               	addwfc	fsr2h,f,c
  6633  0017D6  CFDE F001          	movff	postinc2,?i2_UART_buff_size
  6634  0017DA  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
  6635  0017DE  0012               	return	
  6636  0017E0                     __end_ofi2_UART_buff_size:
  6637                           	opt stack 0
  6638                           tosu	equ	0xFFF
  6639                           tosh	equ	0xFFE
  6640                           tosl	equ	0xFFD
  6641                           pclatu	equ	0xFFB
  6642                           pclath	equ	0xFFA
  6643                           tblptru	equ	0xFF8
  6644                           tblptrh	equ	0xFF7
  6645                           tblptrl	equ	0xFF6
  6646                           tablat	equ	0xFF5
  6647                           prodh	equ	0xFF4
  6648                           prodl	equ	0xFF3
  6649                           intcon	equ	0xFF2
  6650                           intcon2	equ	0xFF1
  6651                           postinc0	equ	0xFEE
  6652                           fsr0h	equ	0xFEA
  6653                           fsr0l	equ	0xFE9
  6654                           wreg	equ	0xFE8
  6655                           fsr1h	equ	0xFE2
  6656                           fsr1l	equ	0xFE1
  6657                           indf2	equ	0xFDF
  6658                           postinc2	equ	0xFDE
  6659                           postdec2	equ	0xFDD
  6660                           plusw2	equ	0xFDB
  6661                           fsr2h	equ	0xFDA
  6662                           fsr2l	equ	0xFD9
  6663                           status	equ	0xFD8
  6664                           
  6665 ;; *************** function i2_UART_buff_get *****************
  6666 ;; Defined at:
  6667 ;;		line 81 in file "UART.c"
  6668 ;; Parameters:    Size  Location     Type
  6669 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  6670 ;;		 -> output_buffer(206), input_buffer(206), 
  6671 ;; Auto vars:     Size  Location     Type
  6672 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
  6673 ;; Return value:  Size  Location     Type
  6674 ;;                  1    wreg      unsigned char 
  6675 ;; Registers used:
  6676 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6677 ;; Tracked objects:
  6678 ;;		On entry : 0/0
  6679 ;;		On exit  : 0/0
  6680 ;;		Unchanged: 0/0
  6681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6682 ;;      Params:         2       0       0       0       0       0       0
  6683 ;;      Locals:         1       0       0       0       0       0       0
  6684 ;;      Temps:          2       0       0       0       0       0       0
  6685 ;;      Totals:         5       0       0       0       0       0       0
  6686 ;;Total ram usage:        5 bytes
  6687 ;; Hardware stack levels used:    1
  6688 ;; Hardware stack levels required when called:    1
  6689 ;; This function calls:
  6690 ;;		i2_UART_buff_modulo_inc
  6691 ;; This function is called by:
  6692 ;;		_EUSART1_Transmit_ISR
  6693 ;; This function uses a non-reentrant model
  6694 ;;
  6695                           
  6696                           	psect	text42
  6697  0011A6                     __ptext42:
  6698                           	opt stack 0
  6699  0011A6                     i2_UART_buff_get:
  6700                           	opt stack 21
  6701                           
  6702                           ;UART.c: 82: unsigned char c;
  6703                           ;UART.c: 83: if (_this->count > 0) {
  6704                           
  6705                           ;incstack = 0
  6706  0011A6  EE20 F0CC          	lfsr	2,204
  6707  0011AA  5007               	movf	i2UART_buff_get@_this,w,c
  6708  0011AC  26D9               	addwf	fsr2l,f,c
  6709  0011AE  5008               	movf	i2UART_buff_get@_this+1,w,c
  6710  0011B0  22DA               	addwfc	fsr2h,f,c
  6711  0011B2  0E01               	movlw	1
  6712  0011B4  BEDB               	btfsc	plusw2,7,c
  6713  0011B6  D03C               	goto	i2l2285
  6714  0011B8  0E01               	movlw	1
  6715  0011BA  50DB               	movf	plusw2,w,c
  6716  0011BC  E103               	bnz	i2u225_40
  6717  0011BE  04DE               	decf	postinc2,w,c
  6718  0011C0  A0D8               	btfss	status,0,c
  6719  0011C2  D036               	goto	i2l2285
  6720  0011C4                     i2u225_40:
  6721                           
  6722                           ;UART.c: 84: c = _this->buf[_this->tail];
  6723  0011C4  EE20 F0CA          	lfsr	2,202
  6724  0011C8  5007               	movf	i2UART_buff_get@_this,w,c
  6725  0011CA  26D9               	addwf	fsr2l,f,c
  6726  0011CC  5008               	movf	i2UART_buff_get@_this+1,w,c
  6727  0011CE  22DA               	addwfc	fsr2h,f,c
  6728  0011D0  CFDE F009          	movff	postinc2,??i2_UART_buff_get
  6729  0011D4  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
  6730  0011D8  5009               	movf	??i2_UART_buff_get,w,c
  6731  0011DA  2407               	addwf	i2UART_buff_get@_this,w,c
  6732  0011DC  6ED9               	movwf	fsr2l,c
  6733  0011DE  500A               	movf	??i2_UART_buff_get+1,w,c
  6734  0011E0  2008               	addwfc	i2UART_buff_get@_this+1,w,c
  6735  0011E2  6EDA               	movwf	fsr2h,c
  6736  0011E4  50DF               	movf	indf2,w,c
  6737  0011E6  6E0B               	movwf	i2UART_buff_get@c,c
  6738                           
  6739                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  6740  0011E8  EE20 F0CA          	lfsr	2,202
  6741  0011EC  5007               	movf	i2UART_buff_get@_this,w,c
  6742  0011EE  26D9               	addwf	fsr2l,f,c
  6743  0011F0  5008               	movf	i2UART_buff_get@_this+1,w,c
  6744  0011F2  22DA               	addwfc	fsr2h,f,c
  6745  0011F4  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  6746  0011F8  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  6747  0011FC  0E00               	movlw	0
  6748  0011FE  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  6749  001200  0EC8               	movlw	200
  6750  001202  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  6751  001204  EC54  F00B         	call	i2_UART_buff_modulo_inc	;wreg free
  6752  001208  EE20 F0CA          	lfsr	2,202
  6753  00120C  5007               	movf	i2UART_buff_get@_this,w,c
  6754  00120E  26D9               	addwf	fsr2l,f,c
  6755  001210  5008               	movf	i2UART_buff_get@_this+1,w,c
  6756  001212  22DA               	addwfc	fsr2h,f,c
  6757  001214  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  6758  001218  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  6759                           
  6760                           ;UART.c: 86: --_this->count;
  6761  00121C  EE20 F0CC          	lfsr	2,204
  6762  001220  5007               	movf	i2UART_buff_get@_this,w,c
  6763  001222  26D9               	addwf	fsr2l,f,c
  6764  001224  5008               	movf	i2UART_buff_get@_this+1,w,c
  6765  001226  22DA               	addwfc	fsr2h,f,c
  6766  001228  06DE               	decf	postinc2,f,c
  6767  00122A  0E00               	movlw	0
  6768  00122C  5ADD               	subwfb	postdec2,f,c
  6769                           
  6770                           ;UART.c: 87: } else {
  6771  00122E  D002               	goto	i2l290
  6772  001230                     i2l2285:
  6773                           
  6774                           ;UART.c: 88: c = 0;
  6775  001230  0E00               	movlw	0
  6776  001232  6E0B               	movwf	i2UART_buff_get@c,c
  6777  001234                     i2l290:
  6778                           
  6779                           ;UART.c: 89: }
  6780                           ;UART.c: 90: return (c);
  6781  001234  500B               	movf	i2UART_buff_get@c,w,c
  6782  001236  0012               	return	
  6783  001238                     __end_ofi2_UART_buff_get:
  6784                           	opt stack 0
  6785                           tosu	equ	0xFFF
  6786                           tosh	equ	0xFFE
  6787                           tosl	equ	0xFFD
  6788                           pclatu	equ	0xFFB
  6789                           pclath	equ	0xFFA
  6790                           tblptru	equ	0xFF8
  6791                           tblptrh	equ	0xFF7
  6792                           tblptrl	equ	0xFF6
  6793                           tablat	equ	0xFF5
  6794                           prodh	equ	0xFF4
  6795                           prodl	equ	0xFF3
  6796                           intcon	equ	0xFF2
  6797                           intcon2	equ	0xFF1
  6798                           postinc0	equ	0xFEE
  6799                           fsr0h	equ	0xFEA
  6800                           fsr0l	equ	0xFE9
  6801                           wreg	equ	0xFE8
  6802                           fsr1h	equ	0xFE2
  6803                           fsr1l	equ	0xFE1
  6804                           indf2	equ	0xFDF
  6805                           postinc2	equ	0xFDE
  6806                           postdec2	equ	0xFDD
  6807                           plusw2	equ	0xFDB
  6808                           fsr2h	equ	0xFDA
  6809                           fsr2l	equ	0xFD9
  6810                           status	equ	0xFD8
  6811                           
  6812 ;; *************** function _EUSART1_Receive_ISR *****************
  6813 ;; Defined at:
  6814 ;;		line 139 in file "UART.c"
  6815 ;; Parameters:    Size  Location     Type
  6816 ;;		None
  6817 ;; Auto vars:     Size  Location     Type
  6818 ;;  data            1   11[COMRAM] unsigned char 
  6819 ;; Return value:  Size  Location     Type
  6820 ;;                  1    wreg      void 
  6821 ;; Registers used:
  6822 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6823 ;; Tracked objects:
  6824 ;;		On entry : 0/0
  6825 ;;		On exit  : 0/0
  6826 ;;		Unchanged: 0/0
  6827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6828 ;;      Params:         0       0       0       0       0       0       0
  6829 ;;      Locals:         1       0       0       0       0       0       0
  6830 ;;      Temps:          0       0       0       0       0       0       0
  6831 ;;      Totals:         1       0       0       0       0       0       0
  6832 ;;Total ram usage:        1 bytes
  6833 ;; Hardware stack levels used:    1
  6834 ;; Hardware stack levels required when called:    2
  6835 ;; This function calls:
  6836 ;;		i2_UART_buff_put
  6837 ;; This function is called by:
  6838 ;;		_INTERRUPT_InterruptManager
  6839 ;; This function uses a non-reentrant model
  6840 ;;
  6841                           
  6842                           	psect	text43
  6843  001750                     __ptext43:
  6844                           	opt stack 0
  6845  001750                     _EUSART1_Receive_ISR:
  6846                           	opt stack 21
  6847                           
  6848                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
  6849                           
  6850                           ;incstack = 0
  6851  001750  A2AB               	btfss	4011,1,c	;volatile
  6852  001752  D002               	goto	i2l321
  6853                           
  6854                           ;UART.c: 143: RC1STAbits.CREN = 0;
  6855  001754  98AB               	bcf	4011,4,c	;volatile
  6856                           
  6857                           ;UART.c: 144: RC1STAbits.CREN = 1;
  6858  001756  88AB               	bsf	4011,4,c	;volatile
  6859  001758                     i2l321:
  6860                           
  6861                           ;UART.c: 145: }
  6862                           ;UART.c: 146: unsigned char data = RCREG1;
  6863  001758  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  6864                           
  6865                           ;UART.c: 147: UART_buff_put(&input_buffer, data);
  6866  00175C  0E00               	movlw	low _input_buffer
  6867  00175E  6E07               	movwf	i2UART_buff_put@_this,c
  6868  001760  0E03               	movlw	high _input_buffer
  6869  001762  6E08               	movwf	i2UART_buff_put@_this+1,c
  6870  001764  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
  6871  001768  EC41  F006         	call	i2_UART_buff_put	;wreg free
  6872  00176C  0012               	return		;funcret
  6873  00176E                     __end_of_EUSART1_Receive_ISR:
  6874                           	opt stack 0
  6875                           tosu	equ	0xFFF
  6876                           tosh	equ	0xFFE
  6877                           tosl	equ	0xFFD
  6878                           pclatu	equ	0xFFB
  6879                           pclath	equ	0xFFA
  6880                           tblptru	equ	0xFF8
  6881                           tblptrh	equ	0xFF7
  6882                           tblptrl	equ	0xFF6
  6883                           tablat	equ	0xFF5
  6884                           prodh	equ	0xFF4
  6885                           prodl	equ	0xFF3
  6886                           intcon	equ	0xFF2
  6887                           intcon2	equ	0xFF1
  6888                           postinc0	equ	0xFEE
  6889                           fsr0h	equ	0xFEA
  6890                           fsr0l	equ	0xFE9
  6891                           wreg	equ	0xFE8
  6892                           fsr1h	equ	0xFE2
  6893                           fsr1l	equ	0xFE1
  6894                           indf2	equ	0xFDF
  6895                           postinc2	equ	0xFDE
  6896                           postdec2	equ	0xFDD
  6897                           plusw2	equ	0xFDB
  6898                           fsr2h	equ	0xFDA
  6899                           fsr2l	equ	0xFD9
  6900                           status	equ	0xFD8
  6901                           
  6902 ;; *************** function i2_UART_buff_put *****************
  6903 ;; Defined at:
  6904 ;;		line 68 in file "UART.c"
  6905 ;; Parameters:    Size  Location     Type
  6906 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  6907 ;;		 -> output_buffer(206), input_buffer(206), 
  6908 ;;  c               1    8[COMRAM] const unsigned char 
  6909 ;; Auto vars:     Size  Location     Type
  6910 ;;		None
  6911 ;; Return value:  Size  Location     Type
  6912 ;;                  1    wreg      void 
  6913 ;; Registers used:
  6914 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6915 ;; Tracked objects:
  6916 ;;		On entry : 0/0
  6917 ;;		On exit  : 0/0
  6918 ;;		Unchanged: 0/0
  6919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6920 ;;      Params:         3       0       0       0       0       0       0
  6921 ;;      Locals:         0       0       0       0       0       0       0
  6922 ;;      Temps:          2       0       0       0       0       0       0
  6923 ;;      Totals:         5       0       0       0       0       0       0
  6924 ;;Total ram usage:        5 bytes
  6925 ;; Hardware stack levels used:    1
  6926 ;; Hardware stack levels required when called:    1
  6927 ;; This function calls:
  6928 ;;		i2_UART_buff_modulo_inc
  6929 ;; This function is called by:
  6930 ;;		_EUSART1_Receive_ISR
  6931 ;; This function uses a non-reentrant model
  6932 ;;
  6933                           
  6934                           	psect	text44
  6935  000C82                     __ptext44:
  6936                           	opt stack 0
  6937  000C82                     i2_UART_buff_put:
  6938                           	opt stack 21
  6939                           
  6940                           ;UART.c: 69: if (_this->count < 200) {
  6941                           
  6942                           ;incstack = 0
  6943  000C82  EE20 F0CC          	lfsr	2,204
  6944  000C86  5007               	movf	i2UART_buff_put@_this,w,c
  6945  000C88  26D9               	addwf	fsr2l,f,c
  6946  000C8A  5008               	movf	i2UART_buff_put@_this+1,w,c
  6947  000C8C  22DA               	addwfc	fsr2h,f,c
  6948  000C8E  0E01               	movlw	1
  6949  000C90  BEDB               	btfsc	plusw2,7,c
  6950  000C92  D007               	goto	i2l2265
  6951  000C94  0E01               	movlw	1
  6952  000C96  50DB               	movf	plusw2,w,c
  6953  000C98  E13A               	bnz	i2l2271
  6954  000C9A  0EC8               	movlw	200
  6955  000C9C  5CDE               	subwf	postinc2,w,c
  6956  000C9E  B0D8               	btfsc	status,0,c
  6957  000CA0  D036               	goto	i2l2271
  6958  000CA2                     i2l2265:
  6959                           
  6960                           ;UART.c: 70: _this->buf[_this->head] = c;
  6961  000CA2  EE20 F0C8          	lfsr	2,200
  6962  000CA6  5007               	movf	i2UART_buff_put@_this,w,c
  6963  000CA8  26D9               	addwf	fsr2l,f,c
  6964  000CAA  5008               	movf	i2UART_buff_put@_this+1,w,c
  6965  000CAC  22DA               	addwfc	fsr2h,f,c
  6966  000CAE  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  6967  000CB2  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  6968  000CB6  500A               	movf	??i2_UART_buff_put,w,c
  6969  000CB8  2407               	addwf	i2UART_buff_put@_this,w,c
  6970  000CBA  6ED9               	movwf	fsr2l,c
  6971  000CBC  500B               	movf	??i2_UART_buff_put+1,w,c
  6972  000CBE  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  6973  000CC0  6EDA               	movwf	fsr2h,c
  6974  000CC2  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  6975                           
  6976                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  6977  000CC6  EE20 F0C8          	lfsr	2,200
  6978  000CCA  5007               	movf	i2UART_buff_put@_this,w,c
  6979  000CCC  26D9               	addwf	fsr2l,f,c
  6980  000CCE  5008               	movf	i2UART_buff_put@_this+1,w,c
  6981  000CD0  22DA               	addwfc	fsr2h,f,c
  6982  000CD2  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  6983  000CD6  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  6984  000CDA  0E00               	movlw	0
  6985  000CDC  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  6986  000CDE  0EC8               	movlw	200
  6987  000CE0  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  6988  000CE2  EC54  F00B         	call	i2_UART_buff_modulo_inc	;wreg free
  6989  000CE6  EE20 F0C8          	lfsr	2,200
  6990  000CEA  5007               	movf	i2UART_buff_put@_this,w,c
  6991  000CEC  26D9               	addwf	fsr2l,f,c
  6992  000CEE  5008               	movf	i2UART_buff_put@_this+1,w,c
  6993  000CF0  22DA               	addwfc	fsr2h,f,c
  6994  000CF2  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  6995  000CF6  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  6996                           
  6997                           ;UART.c: 72: ++_this->count;
  6998  000CFA  EE20 F0CC          	lfsr	2,204
  6999  000CFE  5007               	movf	i2UART_buff_put@_this,w,c
  7000  000D00  26D9               	addwf	fsr2l,f,c
  7001  000D02  5008               	movf	i2UART_buff_put@_this+1,w,c
  7002  000D04  22DA               	addwfc	fsr2h,f,c
  7003  000D06  2ADE               	incf	postinc2,f,c
  7004  000D08  0E00               	movlw	0
  7005  000D0A  22DD               	addwfc	postdec2,f,c
  7006                           
  7007                           ;UART.c: 73: } else {
  7008  000D0C  0012               	return	
  7009  000D0E                     i2l2271:
  7010                           
  7011                           ;UART.c: 74: _this->buf[_this->head] = c;
  7012  000D0E  EE20 F0C8          	lfsr	2,200
  7013  000D12  5007               	movf	i2UART_buff_put@_this,w,c
  7014  000D14  26D9               	addwf	fsr2l,f,c
  7015  000D16  5008               	movf	i2UART_buff_put@_this+1,w,c
  7016  000D18  22DA               	addwfc	fsr2h,f,c
  7017  000D1A  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  7018  000D1E  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  7019  000D22  500A               	movf	??i2_UART_buff_put,w,c
  7020  000D24  2407               	addwf	i2UART_buff_put@_this,w,c
  7021  000D26  6ED9               	movwf	fsr2l,c
  7022  000D28  500B               	movf	??i2_UART_buff_put+1,w,c
  7023  000D2A  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  7024  000D2C  6EDA               	movwf	fsr2h,c
  7025  000D2E  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  7026                           
  7027                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  7028  000D32  EE20 F0C8          	lfsr	2,200
  7029  000D36  5007               	movf	i2UART_buff_put@_this,w,c
  7030  000D38  26D9               	addwf	fsr2l,f,c
  7031  000D3A  5008               	movf	i2UART_buff_put@_this+1,w,c
  7032  000D3C  22DA               	addwfc	fsr2h,f,c
  7033  000D3E  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  7034  000D42  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  7035  000D46  0E00               	movlw	0
  7036  000D48  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  7037  000D4A  0EC8               	movlw	200
  7038  000D4C  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  7039  000D4E  EC54  F00B         	call	i2_UART_buff_modulo_inc	;wreg free
  7040  000D52  EE20 F0C8          	lfsr	2,200
  7041  000D56  5007               	movf	i2UART_buff_put@_this,w,c
  7042  000D58  26D9               	addwf	fsr2l,f,c
  7043  000D5A  5008               	movf	i2UART_buff_put@_this+1,w,c
  7044  000D5C  22DA               	addwfc	fsr2h,f,c
  7045  000D5E  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  7046  000D62  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  7047                           
  7048                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  7049  000D66  EE20 F0CA          	lfsr	2,202
  7050  000D6A  5007               	movf	i2UART_buff_put@_this,w,c
  7051  000D6C  26D9               	addwf	fsr2l,f,c
  7052  000D6E  5008               	movf	i2UART_buff_put@_this+1,w,c
  7053  000D70  22DA               	addwfc	fsr2h,f,c
  7054  000D72  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  7055  000D76  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  7056  000D7A  0E00               	movlw	0
  7057  000D7C  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  7058  000D7E  0EC8               	movlw	200
  7059  000D80  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  7060  000D82  EC54  F00B         	call	i2_UART_buff_modulo_inc	;wreg free
  7061  000D86  EE20 F0CA          	lfsr	2,202
  7062  000D8A  5007               	movf	i2UART_buff_put@_this,w,c
  7063  000D8C  26D9               	addwf	fsr2l,f,c
  7064  000D8E  5008               	movf	i2UART_buff_put@_this+1,w,c
  7065  000D90  22DA               	addwfc	fsr2h,f,c
  7066  000D92  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  7067  000D96  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  7068  000D9A  0012               	return	
  7069  000D9C                     __end_ofi2_UART_buff_put:
  7070                           	opt stack 0
  7071                           tosu	equ	0xFFF
  7072                           tosh	equ	0xFFE
  7073                           tosl	equ	0xFFD
  7074                           pclatu	equ	0xFFB
  7075                           pclath	equ	0xFFA
  7076                           tblptru	equ	0xFF8
  7077                           tblptrh	equ	0xFF7
  7078                           tblptrl	equ	0xFF6
  7079                           tablat	equ	0xFF5
  7080                           prodh	equ	0xFF4
  7081                           prodl	equ	0xFF3
  7082                           intcon	equ	0xFF2
  7083                           intcon2	equ	0xFF1
  7084                           postinc0	equ	0xFEE
  7085                           fsr0h	equ	0xFEA
  7086                           fsr0l	equ	0xFE9
  7087                           wreg	equ	0xFE8
  7088                           fsr1h	equ	0xFE2
  7089                           fsr1l	equ	0xFE1
  7090                           indf2	equ	0xFDF
  7091                           postinc2	equ	0xFDE
  7092                           postdec2	equ	0xFDD
  7093                           plusw2	equ	0xFDB
  7094                           fsr2h	equ	0xFDA
  7095                           fsr2l	equ	0xFD9
  7096                           status	equ	0xFD8
  7097                           
  7098 ;; *************** function i2_UART_buff_modulo_inc *****************
  7099 ;; Defined at:
  7100 ;;		line 106 in file "UART.c"
  7101 ;; Parameters:    Size  Location     Type
  7102 ;;  value           2    0[COMRAM] const unsigned int 
  7103 ;;  modulus         2    2[COMRAM] const unsigned int 
  7104 ;; Auto vars:     Size  Location     Type
  7105 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
  7106 ;; Return value:  Size  Location     Type
  7107 ;;                  2    0[COMRAM] unsigned int 
  7108 ;; Registers used:
  7109 ;;		wreg, status,2, status,0
  7110 ;; Tracked objects:
  7111 ;;		On entry : 0/0
  7112 ;;		On exit  : 0/0
  7113 ;;		Unchanged: 0/0
  7114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7115 ;;      Params:         4       0       0       0       0       0       0
  7116 ;;      Locals:         2       0       0       0       0       0       0
  7117 ;;      Temps:          0       0       0       0       0       0       0
  7118 ;;      Totals:         6       0       0       0       0       0       0
  7119 ;;Total ram usage:        6 bytes
  7120 ;; Hardware stack levels used:    1
  7121 ;; This function calls:
  7122 ;;		Nothing
  7123 ;; This function is called by:
  7124 ;;		i2_UART_buff_put
  7125 ;;		i2_UART_buff_get
  7126 ;; This function uses a non-reentrant model
  7127 ;;
  7128                           
  7129                           	psect	text45
  7130  0016A8                     __ptext45:
  7131                           	opt stack 0
  7132  0016A8                     i2_UART_buff_modulo_inc:
  7133                           	opt stack 21
  7134                           
  7135                           ;UART.c: 107: unsigned int my_value = value + 1;
  7136                           
  7137                           ;incstack = 0
  7138  0016A8  0E01               	movlw	1
  7139  0016AA  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
  7140  0016AC  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  7141  0016AE  0E00               	movlw	0
  7142  0016B0  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
  7143  0016B2  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  7144                           
  7145                           ;UART.c: 108: if (my_value >= modulus) {
  7146  0016B4  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
  7147  0016B6  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
  7148  0016B8  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
  7149  0016BA  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
  7150  0016BC  A0D8               	btfss	status,0,c
  7151  0016BE  D004               	goto	i2l2077
  7152                           
  7153                           ;UART.c: 109: my_value = 0;
  7154  0016C0  0E00               	movlw	0
  7155  0016C2  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  7156  0016C4  0E00               	movlw	0
  7157  0016C6  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  7158  0016C8                     i2l2077:
  7159                           
  7160                           ;UART.c: 110: }
  7161                           ;UART.c: 111: return (my_value);
  7162  0016C8  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
  7163  0016CC  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
  7164  0016D0  0012               	return	
  7165  0016D2                     __end_ofi2_UART_buff_modulo_inc:
  7166                           	opt stack 0
  7167  0000                     tosu	equ	0xFFF
  7168                           tosh	equ	0xFFE
  7169                           tosl	equ	0xFFD
  7170                           pclatu	equ	0xFFB
  7171                           pclath	equ	0xFFA
  7172                           tblptru	equ	0xFF8
  7173                           tblptrh	equ	0xFF7
  7174                           tblptrl	equ	0xFF6
  7175                           tablat	equ	0xFF5
  7176                           prodh	equ	0xFF4
  7177                           prodl	equ	0xFF3
  7178                           intcon	equ	0xFF2
  7179                           intcon2	equ	0xFF1
  7180                           postinc0	equ	0xFEE
  7181                           fsr0h	equ	0xFEA
  7182                           fsr0l	equ	0xFE9
  7183                           wreg	equ	0xFE8
  7184                           fsr1h	equ	0xFE2
  7185                           fsr1l	equ	0xFE1
  7186                           indf2	equ	0xFDF
  7187                           postinc2	equ	0xFDE
  7188                           postdec2	equ	0xFDD
  7189                           plusw2	equ	0xFDB
  7190                           fsr2h	equ	0xFDA
  7191                           fsr2l	equ	0xFD9
  7192                           status	equ	0xFD8
  7193                           tosu	equ	0xFFF
  7194                           tosh	equ	0xFFE
  7195                           tosl	equ	0xFFD
  7196                           pclatu	equ	0xFFB
  7197                           pclath	equ	0xFFA
  7198                           tblptru	equ	0xFF8
  7199                           tblptrh	equ	0xFF7
  7200                           tblptrl	equ	0xFF6
  7201                           tablat	equ	0xFF5
  7202                           prodh	equ	0xFF4
  7203                           prodl	equ	0xFF3
  7204                           intcon	equ	0xFF2
  7205                           intcon2	equ	0xFF1
  7206                           postinc0	equ	0xFEE
  7207                           fsr0h	equ	0xFEA
  7208                           fsr0l	equ	0xFE9
  7209                           wreg	equ	0xFE8
  7210                           fsr1h	equ	0xFE2
  7211                           fsr1l	equ	0xFE1
  7212                           indf2	equ	0xFDF
  7213                           postinc2	equ	0xFDE
  7214                           postdec2	equ	0xFDD
  7215                           plusw2	equ	0xFDB
  7216                           fsr2h	equ	0xFDA
  7217                           fsr2l	equ	0xFD9
  7218                           status	equ	0xFD8
  7219                           
  7220                           	psect	text46
  7221  000000                     __ptext46:
  7222                           	opt stack 0
  7223                           tosu	equ	0xFFF
  7224                           tosh	equ	0xFFE
  7225                           tosl	equ	0xFFD
  7226                           pclatu	equ	0xFFB
  7227                           pclath	equ	0xFFA
  7228                           tblptru	equ	0xFF8
  7229                           tblptrh	equ	0xFF7
  7230                           tblptrl	equ	0xFF6
  7231                           tablat	equ	0xFF5
  7232                           prodh	equ	0xFF4
  7233                           prodl	equ	0xFF3
  7234                           intcon	equ	0xFF2
  7235                           intcon2	equ	0xFF1
  7236                           postinc0	equ	0xFEE
  7237                           fsr0h	equ	0xFEA
  7238                           fsr0l	equ	0xFE9
  7239                           wreg	equ	0xFE8
  7240                           fsr1h	equ	0xFE2
  7241                           fsr1l	equ	0xFE1
  7242                           indf2	equ	0xFDF
  7243                           postinc2	equ	0xFDE
  7244                           postdec2	equ	0xFDD
  7245                           plusw2	equ	0xFDB
  7246                           fsr2h	equ	0xFDA
  7247                           fsr2l	equ	0xFD9
  7248                           status	equ	0xFD8
  7249                           
  7250                           	psect	rparam
  7251  0000                     tosu	equ	0xFFF
  7252                           tosh	equ	0xFFE
  7253                           tosl	equ	0xFFD
  7254                           pclatu	equ	0xFFB
  7255                           pclath	equ	0xFFA
  7256                           tblptru	equ	0xFF8
  7257                           tblptrh	equ	0xFF7
  7258                           tblptrl	equ	0xFF6
  7259                           tablat	equ	0xFF5
  7260                           prodh	equ	0xFF4
  7261                           prodl	equ	0xFF3
  7262                           intcon	equ	0xFF2
  7263                           intcon2	equ	0xFF1
  7264                           postinc0	equ	0xFEE
  7265                           fsr0h	equ	0xFEA
  7266                           fsr0l	equ	0xFE9
  7267                           wreg	equ	0xFE8
  7268                           fsr1h	equ	0xFE2
  7269                           fsr1l	equ	0xFE1
  7270                           indf2	equ	0xFDF
  7271                           postinc2	equ	0xFDE
  7272                           postdec2	equ	0xFDD
  7273                           plusw2	equ	0xFDB
  7274                           fsr2h	equ	0xFDA
  7275                           fsr2l	equ	0xFD9
  7276                           status	equ	0xFD8
  7277                           
  7278                           	psect	temp
  7279  000045                     btemp:
  7280                           	opt stack 0
  7281  000045                     	ds	1
  7282  0000                     int$flags	set	btemp
  7283                           tosu	equ	0xFFF
  7284                           tosh	equ	0xFFE
  7285                           tosl	equ	0xFFD
  7286                           pclatu	equ	0xFFB
  7287                           pclath	equ	0xFFA
  7288                           tblptru	equ	0xFF8
  7289                           tblptrh	equ	0xFF7
  7290                           tblptrl	equ	0xFF6
  7291                           tablat	equ	0xFF5
  7292                           prodh	equ	0xFF4
  7293                           prodl	equ	0xFF3
  7294                           intcon	equ	0xFF2
  7295                           intcon2	equ	0xFF1
  7296                           postinc0	equ	0xFEE
  7297                           fsr0h	equ	0xFEA
  7298                           fsr0l	equ	0xFE9
  7299                           wreg	equ	0xFE8
  7300                           fsr1h	equ	0xFE2
  7301                           fsr1l	equ	0xFE1
  7302                           indf2	equ	0xFDF
  7303                           postinc2	equ	0xFDE
  7304                           postdec2	equ	0xFDD
  7305                           plusw2	equ	0xFDB
  7306                           fsr2h	equ	0xFDA
  7307                           fsr2l	equ	0xFD9
  7308                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         885
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      68
    BANK0           160     27      64
    BANK1           256      0     206
    BANK2           256      0     200
    BANK3           256      0     206
    BANK4           256      0     206
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    UART_buff_peek@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> input_buffer(BANK3[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_329(BANK0[3]), receiveData@holder(BANK0[3]), 
		 -> rx_buffer(BANK2[200]), ring_buffer(BANK1[206]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), ring_buffer(BANK1[206]), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_get(), 

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    serial_available	PTR FTN()int  size(2) Largest target is 2
		 -> Absolute function(), Receive_available(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Send_put(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 10
		 -> receiveArray(BANK0[10]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 10
		 -> NULL(NULL[0]), receiveArray(BANK0[10]), 


Critical Paths under _main in COMRAM

    _FastTransfer_buffer_flush->_memset
    _ToSend->_FastTransfer_buffer_put
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_peek->_UART_buff_peek
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _begin->___awdiv
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondECU->_sendData
    _sendData->_FastTransfer_buffer_flush
    _ToSend->_FastTransfer_buffer_put
    _receiveData->_CRCcheck
    _CRCcheck->_crcBufS_get
    _ComStart->_begin

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   20681
                            _GetTime
                         _ReadFaults
                            _SetTime
                              _Start
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   18374
                        _receiveData
                         _respondECU
 ---------------------------------------------------------------------------------
 (2) _respondECU                                           1     1      0    7659
                                              9 BANK0      1     1      0
                              _Delay
                          _GetFaults
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    5704
                                              4 BANK0      5     5      0
                   Absolute function *
                               _CRC8
          _FastTransfer_buffer_flush
                           _Send_put *
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                              0 BANK0      4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1751
                                              2 BANK0      3     1      2
            _FastTransfer_buffer_put
                          _GetFaults (ARG)
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1535
                                             32 COMRAM     5     0      5
                                              0 BANK0      2     2      0
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _GetFaults                                            1     1      0      30
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay                                                5     3      2     174
                                             26 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0   10715
                                              9 BANK0     18    18      0
                   Absolute function *
                               _CRC8
                           _CRCcheck
                  _Receive_available *
                        _Receive_get *
                       _Receive_peek *
                           _Send_put *
 ---------------------------------------------------------------------------------
 (4) _Send_put                                             1     1      0    2614
                                              0 BANK0      1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (5) _UART_buff_put                                        5     2      3    1418
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (3) _Receive_peek                                         0     0      0     139
                     _UART_buff_peek
 ---------------------------------------------------------------------------------
 (4) _UART_buff_peek                                       4     2      2     139
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    5114
                                              2 BANK0      7     7      0
                   Absolute function *
                               _CRC8
                  _Receive_available *
                        _Receive_get *
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    10     6      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (5) _UART_buff_get                                        5     3      2    1165
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (6) _UART_buff_modulo_inc                                 6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     150
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     150
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Start                                                0     0      0    2307
                           _ComStart
               _INTERRUPT_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ComStart                                             0     0      0    2307
                 _EUSART1_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (3) _begin                                               13     0     13    1292
                                              0 BANK0     13     0     13
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     428
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0    1015
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (4) _UART_buff_init                                       2     0      2    1015
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _SetTime                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadFaults                                           1     1      0       0
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _GetTime                                              4     0      4       0
                                             26 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          14    14      0    1209
                                             12 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_size                                     2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_get                                      5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_put                                      5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetTime
   _ReadFaults
   _SetTime
   _Start
     _ComStart
       _EUSART1_Initialize
         _UART_buff_init
           _memset
       _begin
         ___awdiv
     _INTERRUPT_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
   _updateComms
     _receiveData
       Absolute function(Fake) *
       _CRC8 *
       _CRCcheck *
         Absolute function(Fake) *
         _CRC8 *
         _Receive_available *
           _UART_buff_size
         _Receive_get *
           _UART_buff_get
             _UART_buff_modulo_inc
         _crcBufS_get *
         _crcBufS_status_put *
       _Receive_available *
         _UART_buff_size
       _Receive_get *
         _UART_buff_get
           _UART_buff_modulo_inc
       _Receive_peek *
         _UART_buff_peek
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
     _respondECU
       _Delay
       _GetFaults
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
         _GetFaults (ARG)
       _sendData
         Absolute function(Fake) *
         _CRC8 *
         _FastTransfer_buffer_flush *
           _memset
         _Send_put *
           _UART_buff_get
             _UART_buff_modulo_inc
           _UART_buff_put
             _UART_buff_modulo_inc
         _crcBufS_put *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR0_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      C8       8       78.1%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      CE       6       80.5%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     1B      40       4       40.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3B6       9        0.0%
DATA                 0      0     3B6      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Aug 12 22:04:42 2016

      __end_of_FastTransfer_buffer_flush 1328                   i2_UART_buff_modulo_inc 16A8  
                           _rx_array_inx 0042                             ___awdiv@sign 0020  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                                    l112 14CA                                      l226 0A1C  
                                    l290 11A2                                      l466 1582  
                           __CFG_CPB$OFF 000000                             __CFG_CPD$OFF 000000  
   FastTransfer_buffer_flush@clearBuffer 0087                                      prod 000FF3  
                                    tosl 000FFD                                      wreg 000FE8  
          i2UART_buff_modulo_inc@modulus 0003                             __CFG_LVP$OFF 000000  
                                   l2003 156E                                     l1327 1794  
                                   l2413 1632                                     l2421 0B88  
                                   l2407 1674                                     l2417 1642  
                                   l2441 119E                                     l2521 0E44  
                                   l2505 0DA6                                     l2601 0AC8  
                                   l2451 149E                                     l2427 0BF4  
                                   l2603 0AF2                                     l2509 0DB0  
                                   l2701 020C                                     l2605 0AF8  
                                   l2615 08C2                                     l2703 0232  
                                   l2457 14B4                                     l2465 14D0  
                                   l2537 10CE                                     l2529 1048  
                                   l2625 0984                                     l2617 08EA  
                                   l2801 0686                                     l2609 0B34  
                                   l2467 14D6                                     l2643 0A0E  
                                   l2803 06A0                                     l2811 073E  
                                   l2731 0356                                     l2723 02BA  
                                   l2715 0260                                     l1941 124C  
                                   l2629 099A                                     l2805 06BA  
                                   l2741 040A                                     l2399 169E  
                                   l2639 09EE                                     l2647 0A16  
                                   l2807 06D4                                     l2719 0292  
                                   l2663 00D4                                     l2671 0104  
                                   l2487 0776                                     l2591 0A50  
                                   l1953 1272                                     l2809 0722  
                                   l2761 04F8                                     l2737 03F0  
                                   l2593 0A6A                                     l1955 127A  
                                   l1947 125C                                     l2763 0512  
                                   l2755 04AA                                     l2771 05B0  
                                   l2739 03F6                                     l2819 074A  
                                   l2683 01A8                                     l2667 0100  
                                   l2595 0A86                                     l1973 12B2  
                                   l1965 129A                                     l1957 127E  
                                   l2765 052C                                     l2757 04C4  
                                   l2781 05BC                                     l2685 01C0  
                                   l2597 0AA0                                     l2767 0546  
                                   l2759 04DE                                     l2687 01C6  
                                   l2695 0200                                     l2599 0ABC  
                                   l1969 12A4                                     l2769 0594  
                                   l2795 0638                                     l2797 0652  
                                   l2877 15FE                                     l2799 066C  
                   receiveData@crcHolder 009A                                     _CRC8 1498  
                                   u1010 0F6E                                     u1100 0FFE  
                                   u1020 0F7E                                     u1030 0F92  
                                   u1120 100E                                     u1040 0FAA  
                                   u1016 0F70                                     u1130 101E  
                                   u1050 0FC6                                     u1115 1000  
                                   u1140 1032                                     u1060 0FDA  
                                   u1028 0F80                                     u1126 1010  
                                   u1038 0F94                                     u1080 0FEC  
                                   u1048 0FAC                                     u1138 1020  
                                   u1058 0FC8                                     u1075 0FDC  
                                   u1148 1034                                     u1095 0FEE  
                                   u3008 0264                                     u3041 02FA  
                                   u3009 0278                                     u3018 0296  
                                   u3019 02AA                                     u3108 04AE  
                                   u3118 04C8                                     u2511 0774  
                                   u3208 063C                                     u3128 04E2  
                                   u2450 1132                                     u3218 0656  
                                   u3138 04FC                                     u3330 161C  
                                   u3228 0670                                     u3148 0516  
                                   u3238 068A                                     u3158 0530  
                                   u3248 06A4                                     u3168 054A  
                                   u2608 0A6E                                     u3258 06BE  
                                   u3178 0598                                     u3098 0494  
                                   u2490 0F50                                     u2618 0A8A  
                                   u2708 0926                                     u3268 06D8  
                                   u2628 0AA4                                     u2709 093A  
                                   u3357 1574                                     u2718 0942  
                                   u3278 0726                                     u3198 0622  
                                   u2638 0ACC                                     u2719 0956  
                                   u2808 00AE                                     u2809 00C2  
                                   u2658 0B1C                                     u2668 08C6  
                                   u2908 0178                                     u2828 00DC  
                                   u2588 0A3A                                     u2669 08DA  
                                   u2909 018C                                     u2829 00F0  
                                   u2598 0A54                                     u2688 08EE  
                                   u2928 01AC                                     u2848 0108  
                                   u2689 0902                                     u2849 011C  
                                   u2698 090A                                     u2699 091E  
                                   u2868 0126                                     u2869 013A  
                                   u2968 0210                                     u2888 0144  
                                   u2969 0224                                     u2889 0158  
                                   u2898 015E                                     u2899 0172  
                                   u2988 0236                                     u2989 024A  
                                   _main 15FA                          _TMR0_StartTimer 1844  
                                   _time 0060                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     fsr0l 000FE9  
                                   fsr2h 000FDA                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   btemp 0045                            __CFG_BORV$190 000000  
                                   pclat 000FFA                                     prodh 000FF4  
                                   prodl 000FF3          __end_of_FastTransfer_buffer_put 08C2  
                                   start 00A0                            __CFG_IESO$OFF 000000  
                        __end_of_GetTime 1818                             ___param_bank 000010  
         i2UART_buff_modulo_inc@my_value 0005                                    ?_CRC8 001B  
                        __end_of_SetTime 17F4                  __end_of_TMR0_Initialize 1732  
                       __end_of_CRCcheck 0A1E                       crcBufS_put@address 001D  
                                  ?_main 0001                          __end_of___awdiv 12BC  
                                  _T0CON 000FD5                          ___awdiv@divisor 001D  
                         __CFG_DEBUG$OFF 000000                                    i2l321 1758  
                                  i2l290 1234                                    i2l463 0064  
                                  i2l457 004E                                    i2l459 005A  
                        ___awdiv@counter 001F                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6                                    _Delay 1564  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                            __CFG_WRT3$OFF 000000  
                   _EUSART1_Transmit_ISR 1598                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                       __end_of_TMR0_ISR 1788                                    _Start 14E2  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                                    _begin 1440  
                         __CFG_EBTRB$OFF 000000                                    _group 002A  
                     __CFG_MCLRE$EXTMCLR 000000                                    pclath 000FFA  
                                  tablat 000FF5                            ??_Receive_get 0026  
                   __size_of_crcBufS_get 00F2                                    plusw2 000FDB  
                         begin@stuffpeek 0090                     __size_of_crcBufS_put 00D8  
                                  status 000FD8                           __CFG_HFOFST$ON 000000  
                           ?_receiveData 0001                           __CFG_PBADEN$ON 000000  
                           __end_of_CRC8 14E2                         __end_of_ComStart 1440  
                        CRCcheck@SentCRC 0087                               _ReadFaults 0F66  
                        __initialization 1328               __end_of_EUSART1_Initialize 1564  
                           __end_of_main 1628                               ToSend@what 0087  
                                 ??_CRC8 001E              ?_INTERRUPT_InterruptManager 0001  
                     __size_of_GetFaults 0016                                   ??_main 0026  
                  receiveData@holder_329 0097                            __activetblptr 000002  
                       __end_of_Send_put 15FA                __size_ofi2_UART_buff_size 0016  
                                 ?_Delay 001B                    ?_EUSART1_Transmit_ISR 0001  
          FastTransfer_buffer_put@towhat 0024                                   ?_Start 0001  
                          ?_Receive_peek 0001                                   ?_begin 0085  
                __end_of_TMR0_StartTimer 1848                         ___awdiv@dividend 001B  
                                 _ANSELA 000F38                                   _ANSELC 000F3A  
                                 _ANSELD 000F3B                          i2_UART_buff_get 11A6  
                                 _RC1STA 000FAB                          i2_UART_buff_put 0C82  
                                 i2l2321 15C2                                   i2l2077 16C8  
                                 i2l2271 0D0E                                   i2l2265 0CA2  
                                 i2l2285 1230                           __CFG_WDTEN$OFF 000000  
                                 Delay@x 001E              UART_buff_modulo_inc@modulus 001D  
                                 _RCREG1 000FAE                                   _OSCCON 000FD3  
                                 _SPBRG1 000FAF                                ??_GetTime 001F  
                                 _TX1STA 000FAC                                   _TXREG1 000FAD  
                              ??_SetTime 001B                           __CFG_XINST$OFF 000000  
                                 _ToSend 16F6                      __end_of_Receive_get 1844  
                       crcBufS_get@_this 001B              ??_FastTransfer_buffer_flush 0023  
                          _output_buffer 0400                         crcBufS_get@space 001E  
                              ??___awdiv 001F                                CRC8@tempI 0020  
                         __CFG_STVREN$ON 000000                         ?_TMR0_Initialize 0001  
                                 _memset 1628                                   clear_0 132E  
                                 clear_1 133A                                   clear_2 1346  
                                 clear_3 1352                                   clear_4 135E  
                                 clear_5 136A                         ___awdiv@quotient 0021  
                                 _rx_len 0043                         __end_of_sendData 0B68  
                           __pdataCOMRAM 0044                            Send_put@_data 0085  
                         ??_Receive_peek 001F                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
       __size_of_FastTransfer_buffer_put 0174             __end_of_UART_buff_modulo_inc 16A8  
          __size_of_INTERRUPT_Initialize 0012                               __accesstop 0060  
                __end_of__initialization 1382                                ?_CRCcheck 0001  
                      __end_of_GetFaults 179E                            ___rparam_used 000001  
                ?i2_UART_buff_modulo_inc 0001                             ?_updateComms 0001  
                          __end_of_Delay 1598                              ?_ReadFaults 0001  
                         __pcstackCOMRAM 0001                            __end_of_Start 1528  
                     _crcBufS_status_put 103E                         crcBufS_put@_this 001B  
                          __end_of_begin 1498                                ?_TMR0_ISR 0001  
 __end_of_FastTransfer_buffer_modulo_inc 167E  __size_of_FastTransfer_buffer_modulo_inc 002A  
         _FastTransfer_buffer_modulo_inc 1654             FastTransfer_buffer_put@_this 0021  
                            ToSend@where 0089                       UART_buff_get@_this 0021  
                    ?_crcBufS_status_put 001B                    __end_of_UART_buff_get 11A6  
                 ??_EUSART1_Transmit_ISR 000C                    __end_of_UART_buff_put 0C82  
                  TMR0_ISR@CountCallBack 0064                                  ??_Delay 001D  
                __end_ofi2_UART_buff_get 1238                  __end_ofi2_UART_buff_put 0D9C  
            __end_of_EUSART1_Receive_ISR 176E                _FastTransfer_buffer_flush 12BC  
                                CRC8@crc 0021                                  CRC8@len 001D  
                                ??_Start 0025                                  CRC8@sum 001E  
                              ?_ComStart 0001                                  ??_begin 0023  
                       ?_TMR0_StartTimer 0001                      _addressErrorCounter 0066  
                             __pbssBANK0 0060                               __pbssBANK1 0100  
                             __pbssBANK2 0200                               __pbssBANK3 0300  
                             __pbssBANK4 0400                          __CFG_PLLCFG$OFF 000000  
                            _Receive_get 1836                               ??_CRCcheck 0026  
                   ??_crcBufS_status_put 001F           __end_ofi2_UART_buff_modulo_inc 16D2  
                      begin@givenAddress 0088                  __size_of_UART_buff_init 001E  
                __size_of_UART_buff_peek 0024                  __size_of_UART_buff_size 0016  
                              ?_Send_put 0001                     __size_of_receiveData 06AA  
                                ?_ToSend 0087                       __CFG_CCP2MX$PORTC1 000000  
                             ??_TMR0_ISR 0001                       __CFG_CCP3MX$PORTB5 000000  
    FastTransfer_buffer_modulo_inc@value 001B                                  ?_memset 001B  
                             _crc_buffer 006A                       UART_buff_put@_this 0021  
                       i2_UART_buff_size 17CA              i2UART_buff_modulo_inc@value 0001  
                                _OSCCON2 000FD2                        _Receive_available 179E  
           UART_buff_modulo_inc@my_value 001F                        __CFG_PRICLKEN$OFF 000000  
                                _OSCTUNE 000F9B                                  _SPBRGH1 000FB0  
                             ??_ComStart 0025                      sendData@whereToSend 008A  
                    _receiveArrayAddress 002C                      __size_of_ReadFaults 00D8  
                     ?_Receive_available 001D                               begin@error 0089  
                                _GetTime 1806                                  _ByteLow 003C  
                    ??_Receive_available 001F                                ?_sendData 0001  
                      _alignErrorCounter 0026                          __CFG_PWRTEN$OFF 000000  
                             ??_Send_put 0026                                  __Hparam 0000  
                                _SetTime 17E0                                  __Lparam 0000  
                        __size_of_ToSend 001E                     __end_of_Receive_peek 1836  
                              _AKNAKsend 003A                                  ___awdiv 1238  
                   _UART_buff_modulo_inc 167E                                  _calc_CS 003D  
                                __pcinit 1328                          __size_of_memset 002C  
                                __ramtop 0600                         i2UART_buff_get@c 000B  
                                __ptext0 15FA                                  __ptext1 1818  
                                __ptext2 1390                                  __ptext3 0A1E  
                                __ptext4 0E8E                                  __ptext5 12BC  
                                __ptext6 16F6                                  __ptext7 074E  
                                __ptext8 1654                                  __ptext9 1788  
                              _T0CONbits 000FD5                         i2UART_buff_put@c 0009  
              __end_of_Receive_available 17B4                  _FastTransfer_buffer_put 074E  
                  CRCcheck@calculatedCRC 0088                       _EUSART1_Initialize 1528  
                       ?i2_UART_buff_get 0007                         ?i2_UART_buff_put 0007  
           crcBufS_status_put@wantedTime 0023                            ??_crcBufS_get 001F  
                          ??_crcBufS_put 0020                     end_of_initialization 1382  
                              Delay@wait 001B                      ?_EUSART1_Initialize 0001  
                                memset@c 001D                                  memset@n 001F  
                                memset@p 0021                            __Lmediumconst 0000  
                             ??_sendData 0089                    ?_UART_buff_modulo_inc 001B  
                   __size_of_updateComms 0010                                  postdec2 000FDD  
                                postinc0 000FEE                                  postinc2 000FDE  
                             _respondECU 1390                         begin@stufftosend 008A  
                    CRCcheck@arrayHolder 0089                     ??_EUSART1_Initialize 0025  
                 _dataAdressErrorCounter 0068                               _rx_address 0041  
                              _TRISAbits 000F92                                _TRISCbits 000F94  
                              _TRISDbits 000F95                             begin@maxSize 0087  
     __size_of_FastTransfer_buffer_flush 006C                    i2UART_buff_size@_this 0001  
                         _UART_buff_init 1732                           _UART_buff_peek 16D2  
                         _UART_buff_size 17B4                      __end_of_crcBufS_get 0E8E  
                    __end_of_crcBufS_put 0F66                        __size_of_CRCcheck 015C  
                           ??_ReadFaults 001B                                _GetFaults 1788  
                          _moduleAddress 003F                     _timer0ReloadVal16bit 0038  
                             CRCcheck@rt 008C                           __end_of_ToSend 1714  
           __end_of_INTERRUPT_Initialize 1806                          _crcErrorCounter 0028  
                      crcBufS_put@oldCRC 001E                            __pidataCOMRAM 1848  
                      __size_of_TMR0_ISR 001A                ??_FastTransfer_buffer_put 0085  
                         __end_of_memset 1654                        crcBufS_put@status 001F  
                           receiveData@r 009E               __size_of_Receive_available 0016  
                           receiveData@u 009C                      start_initialization 1328  
               __size_of_TMR0_Initialize 001E                    crcBufS_get@wantedTime 0085  
                     __end_of_ReadFaults 103E                        __size_of_ComStart 0058  
                 __end_of_UART_buff_init 1750                   __end_of_UART_buff_peek 16F6  
                         UART_buff_get@c 0025                   __end_of_UART_buff_size 17CA  
                           ?_Receive_get 0001                           UART_buff_put@c 0023  
                  __size_of_Receive_peek 000E                 __end_ofi2_UART_buff_size 17E0  
                               ??_ToSend 0026                   ??_UART_buff_modulo_inc 001F  
                             ?_GetFaults 0001                                 CRC8@data 001B  
                        crcBufS_get@time 001D                        __size_of_Send_put 0030  
                            ?_respondECU 0001                                 ??_memset 0021  
                            __pbssCOMRAM 0026            __size_of_EUSART1_Transmit_ISR 0032  
                          __pcstackBANK0 0085                             _Receive_peek 1828  
                    UART_buff_init@_this 0023                              _crcBufS_get 0D9C  
                    UART_buff_peek@_this 001B                              _crcBufS_put 0E8E  
                        ?_UART_buff_init 0023                          ?_UART_buff_peek 001B  
                        ?_UART_buff_size 001B             __size_of_EUSART1_Receive_ISR 001E  
                               ?_GetTime 001B                            ??_receiveData 008E  
            __size_of_crcBufS_status_put 00D6                               sendData@CS 008B  
               __size_of_TMR0_StartTimer 0004                   __size_of_UART_buff_get 0092  
                 __size_of_UART_buff_put 011A                                 ?_SetTime 0001  
                      __size_of_sendData 014A                             GetFaults@num 001B  
                              __pintcode 0008                                 ?___awdiv 001B  
           ??_INTERRUPT_InterruptManager 000D                     i2UART_buff_get@_this 0007  
               receiveData@crcHolder_330 009B                                 _BAUD1CON 000FB8  
                         __size_of_Delay 0034                           __size_of_Start 0046  
                         __size_of_begin 0058                      __size_of_respondECU 0058  
                   _INTERRUPT_Initialize 17F4                             _receiveArray 007B  
                      ??_TMR0_Initialize 001B                                 _CRCcheck 08C2  
                               _LATAbits 000F89                                 _LATCbits 000F8B  
                               _LATDbits 000F8C                      UART_buff_size@_this 001B  
                               _IPR1bits 000F9F                                 _IPR2bits 000FA2  
                               _PIE1bits 000F9D      __size_of_INTERRUPT_InterruptManager 0098  
                               i2u225_40 11C4                                 i2u228_40 15B2  
                               _PIR1bits 000F9E                              ??_GetFaults 001B  
                    begin@stuffavailable 008E                                 _RCONbits 000FD0  
                       __CFG_WDTPS$32768 000000                      __end_of_receiveData 074E  
                               _TMR0_ISR 176E           FastTransfer_buffer_flush@_this 0085  
                           _input_buffer 0300                                _rx_buffer 0200  
                   i2UART_buff_put@_this 0007                            _UART_buff_get 1114  
                          _UART_buff_put 0B68                                 _ComStart 13E8  
               ??i2_UART_buff_modulo_inc 0005                              _INTCON2bits 000FF1  
                  ?_INTERRUPT_Initialize 0001                        _sendStructAddress 002E  
                               _ByteHigh 003B                 __size_ofi2_UART_buff_get 0092  
               __size_ofi2_UART_buff_put 011A                         __size_of_GetTime 0012  
                          ??_updateComms 0026                     __size_of_Receive_get 000E  
                               __Hrparam 0000                                 _Send_put 15CA  
                               __Lrparam 0000                       __CFG_BOREN$SBORDIS 000000  
                       __size_of_SetTime 0014                        __CFG_P2BMX$PORTD2 000000  
                      ??_TMR0_StartTimer 001B                         __size_of___awdiv 0084  
            __size_of_EUSART1_Initialize 003C                      begin@stufftoreceive 008C  
                         ?_UART_buff_get 0021                           ?_UART_buff_put 0021  
                            CRC8@extract 001F                                sendData@i 008C  
               crcBufS_status_put@status 001E                                 __ptext10 1564  
                               __ptext11 00A4                                 __ptext20 1114  
                               __ptext12 15CA                                 __ptext21 167E  
                               __ptext13 0B68                                 __ptext30 1440  
                               __ptext22 179E                                 __ptext14 1828  
                               __ptext31 1238                                 __ptext23 17B4  
                               __ptext15 16D2                                 __ptext40 1598  
                               __ptext32 1528                                 __ptext24 1498  
                               __ptext16 08C2                                 __ptext41 17CA  
                               __ptext33 1732                                 __ptext25 14E2  
                               __ptext17 103E                                 __ptext42 11A6  
                               __ptext34 1628                                 __ptext26 1714  
                               __ptext18 0D9C                                 __ptext43 1750  
                               __ptext35 17E0                                 __ptext27 1844  
                               __ptext19 1836                                 __ptext44 0C82  
                               __ptext36 0F66                                 __ptext28 17F4  
                               __ptext45 16A8                                 __ptext37 1806  
                               __ptext29 13E8                                 __ptext46 0000  
                               __ptext39 176E                            __size_of_CRC8 004A  
                               begin@ptr 0085                  EUSART1_Receive_ISR@data 000C  
                          _returnAddress 0040                            __size_of_main 002E  
                            _receiveData 00A4                           _Transmit_stall 0044  
                               _sendData 0A1E                        ?i2_UART_buff_size 0001  
                             _RC1STAbits 000FAB                             ??_respondECU 008E  
                     ??i2_UART_buff_size 0003                                 int$flags 0045  
                           _serial_write 0036                      __end_of_updateComms 1828  
     __end_of_INTERRUPT_InterruptManager 00A0               _INTERRUPT_InterruptManager 0008  
                    _EUSART1_Receive_ISR 1750                        receiveData@holder 0094  
                             _INTCONbits 000FF2                UART_buff_modulo_inc@value 001B  
                       ??_UART_buff_init 0025                         ??_UART_buff_peek 001D  
                       ??_UART_buff_size 001D                   ??_INTERRUPT_Initialize 001B  
                               memset@p1 001B                         _serial_available 0030  
        __size_ofi2_UART_buff_modulo_inc 002A                             ?_crcBufS_get 001B  
                           ?_crcBufS_put 001B                                 intlevel2 0000  
                crcBufS_status_put@_this 001B                       __end_of_respondECU 13E8  
                   ?_EUSART1_Receive_ISR 0001   FastTransfer_buffer_modulo_inc@my_value 001F  
         FastTransfer_buffer_put@towhere 0023             __end_of_EUSART1_Transmit_ISR 15CA  
                            _ring_buffer 0100               ?_FastTransfer_buffer_flush 0085  
                      ??i2_UART_buff_get 0009                              _serial_peek 0032  
                            _serial_read 0034                        ??i2_UART_buff_put 000A  
               ?_FastTransfer_buffer_put 0021            __size_of_UART_buff_modulo_inc 002A  
                        ??_UART_buff_get 0023                          ??_UART_buff_put 0024  
  FastTransfer_buffer_modulo_inc@modulus 001D                   crcBufS_status_put@time 001D  
                        _TMR0_Initialize 1714                        __CFG_T3CMX$PORTC0 000000  
                         _maxDataAddress 003E               __end_of_crcBufS_status_put 1114  
                  ??_EUSART1_Receive_ISR 000C         ??_FastTransfer_buffer_modulo_inc 001F  
        ?_FastTransfer_buffer_modulo_inc 001B                        __CFG_FOSC$INTIO67 000000  
                            _updateComms 1818  
