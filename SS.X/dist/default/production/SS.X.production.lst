

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Aug 12 21:25:46 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    51                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    52  0000                     
    53                           	psect	idataCOMRAM
    54  000E90                     __pidataCOMRAM:
    55                           	opt stack 0
    56                           
    57                           ;initializer for _Transmit_stall
    58  000E90  01                 	db	1
    59                           
    60                           	psect	nvCOMRAM
    61  000042                     __pnvCOMRAM:
    62                           	opt stack 0
    63  000042                     _timer0ReloadVal16bit:
    64                           	opt stack 0
    65  000042                     	ds	2
    66  0000                     _BAUD1CON	set	4024
    67  0000                     _INTCON2bits	set	4081
    68  0000                     _INTCONbits	set	4082
    69  0000                     _IPR1bits	set	3999
    70  0000                     _IPR2bits	set	4002
    71  0000                     _LATAbits	set	3977
    72  0000                     _LATCbits	set	3979
    73  0000                     _LATDbits	set	3980
    74  0000                     _OSCCON	set	4051
    75  0000                     _OSCCON2	set	4050
    76  0000                     _OSCTUNE	set	3995
    77  0000                     _PIE1bits	set	3997
    78  0000                     _PIR1bits	set	3998
    79  0000                     _RC1STA	set	4011
    80  0000                     _RC1STAbits	set	4011
    81  0000                     _RCONbits	set	4048
    82  0000                     _RCREG1	set	4014
    83  0000                     _SPBRG1	set	4015
    84  0000                     _SPBRGH1	set	4016
    85  0000                     _T0CON	set	4053
    86  0000                     _T0CONbits	set	4053
    87  0000                     _TMR0H	set	4055
    88  0000                     _TMR0L	set	4054
    89  0000                     _TRISAbits	set	3986
    90  0000                     _TRISCbits	set	3988
    91  0000                     _TRISDbits	set	3989
    92  0000                     _TX1STA	set	4012
    93  0000                     _TXREG1	set	4013
    94                           
    95                           ; #config settings
    96  0000                     
    97                           	psect	cinit
    98  000B5A                     __pcinit:
    99                           	opt stack 0
   100  000B5A                     start_initialization:
   101                           	opt stack 0
   102  000B5A                     __initialization:
   103                           	opt stack 0
   104                           
   105                           ; Clear objects allocated to BANK4 (200 bytes)
   106  000B5A  EE04  F000         	lfsr	0,__pbssBANK4
   107  000B5E  0EC8               	movlw	200
   108  000B60                     clear_0:
   109  000B60  6AEE               	clrf	postinc0,c
   110  000B62  06E8               	decf	wreg,f,c
   111  000B64  E1FD               	bnz	clear_0
   112                           
   113                           ; Clear objects allocated to BANK3 (206 bytes)
   114  000B66  EE03  F000         	lfsr	0,__pbssBANK3
   115  000B6A  0ECE               	movlw	206
   116  000B6C                     clear_1:
   117  000B6C  6AEE               	clrf	postinc0,c
   118  000B6E  06E8               	decf	wreg,f,c
   119  000B70  E1FD               	bnz	clear_1
   120                           
   121                           ; Clear objects allocated to BANK2 (206 bytes)
   122  000B72  EE02  F000         	lfsr	0,__pbssBANK2
   123  000B76  0ECE               	movlw	206
   124  000B78                     clear_2:
   125  000B78  6AEE               	clrf	postinc0,c
   126  000B7A  06E8               	decf	wreg,f,c
   127  000B7C  E1FD               	bnz	clear_2
   128                           
   129                           ; Clear objects allocated to BANK1 (206 bytes)
   130  000B7E  EE01  F000         	lfsr	0,__pbssBANK1
   131  000B82  0ECE               	movlw	206
   132  000B84                     clear_3:
   133  000B84  6AEE               	clrf	postinc0,c
   134  000B86  06E8               	decf	wreg,f,c
   135  000B88  E1FD               	bnz	clear_3
   136                           
   137                           ; Clear objects allocated to BANK0 (67 bytes)
   138  000B8A  EE00  F060         	lfsr	0,__pbssBANK0
   139  000B8E  0E43               	movlw	67
   140  000B90                     clear_4:
   141  000B90  6AEE               	clrf	postinc0,c
   142  000B92  06E8               	decf	wreg,f,c
   143  000B94  E1FD               	bnz	clear_4
   144                           
   145                           ; Clear objects allocated to COMRAM (28 bytes)
   146  000B96  EE00  F026         	lfsr	0,__pbssCOMRAM
   147  000B9A  0E1C               	movlw	28
   148  000B9C                     clear_5:
   149  000B9C  6AEE               	clrf	postinc0,c
   150  000B9E  06E8               	decf	wreg,f,c
   151  000BA0  E1FD               	bnz	clear_5
   152                           
   153                           ; Initialize objects allocated to COMRAM (1 bytes)
   154                           ; load TBLPTR registers with __pidataCOMRAM
   155  000BA2  0E90               	movlw	low __pidataCOMRAM
   156  000BA4  6EF6               	movwf	tblptrl,c
   157  000BA6  0E0E               	movlw	high __pidataCOMRAM
   158  000BA8  6EF7               	movwf	tblptrh,c
   159  000BAA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   160  000BAC  6EF8               	movwf	tblptru,c
   161  000BAE  0009               	tblrd		*+	;fetch initializer
   162  000BB0  CFF5 F044          	movff	tablat,__pdataCOMRAM
   163  000BB4                     end_of_initialization:
   164                           	opt stack 0
   165  000BB4                     __end_of__initialization:
   166                           	opt stack 0
   167  000BB4  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   168  000BB6  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   169  000BB8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   170  000BBA  6EF8               	movwf	tblptru,c
   171  000BBC  0100               	movlb	0
   172  000BBE  EF65  F006         	goto	_main	;jump to C main() function
   173                           tblptru	equ	0xFF8
   174                           tblptrh	equ	0xFF7
   175                           tblptrl	equ	0xFF6
   176                           tablat	equ	0xFF5
   177                           postinc0	equ	0xFEE
   178                           wreg	equ	0xFE8
   179                           
   180                           	psect	bssCOMRAM
   181  000026                     __pbssCOMRAM:
   182                           	opt stack 0
   183  000026                     _alignErrorCounter:
   184                           	opt stack 0
   185  000026                     	ds	2
   186  000028                     _crcErrorCounter:
   187                           	opt stack 0
   188  000028                     	ds	2
   189  00002A                     _group:
   190                           	opt stack 0
   191  00002A                     	ds	2
   192  00002C                     _receiveArrayAddress:
   193                           	opt stack 0
   194  00002C                     	ds	2
   195  00002E                     _sendStructAddress:
   196                           	opt stack 0
   197  00002E                     	ds	2
   198  000030                     _serial_available:
   199                           	opt stack 0
   200  000030                     	ds	2
   201  000032                     _serial_peek:
   202                           	opt stack 0
   203  000032                     	ds	2
   204  000034                     _serial_read:
   205                           	opt stack 0
   206  000034                     	ds	2
   207  000036                     _serial_write:
   208                           	opt stack 0
   209  000036                     	ds	2
   210  000038                     _AKNAKsend:
   211                           	opt stack 0
   212  000038                     	ds	1
   213  000039                     _ByteHigh:
   214                           	opt stack 0
   215  000039                     	ds	1
   216  00003A                     _ByteLow:
   217                           	opt stack 0
   218  00003A                     	ds	1
   219  00003B                     _calc_CS:
   220                           	opt stack 0
   221  00003B                     	ds	1
   222  00003C                     _maxDataAddress:
   223                           	opt stack 0
   224  00003C                     	ds	1
   225  00003D                     _moduleAddress:
   226                           	opt stack 0
   227  00003D                     	ds	1
   228  00003E                     _returnAddress:
   229                           	opt stack 0
   230  00003E                     	ds	1
   231  00003F                     _rx_address:
   232                           	opt stack 0
   233  00003F                     	ds	1
   234  000040                     _rx_array_inx:
   235                           	opt stack 0
   236  000040                     	ds	1
   237  000041                     _rx_len:
   238                           	opt stack 0
   239  000041                     	ds	1
   240                           tblptru	equ	0xFF8
   241                           tblptrh	equ	0xFF7
   242                           tblptrl	equ	0xFF6
   243                           tablat	equ	0xFF5
   244                           postinc0	equ	0xFEE
   245                           wreg	equ	0xFE8
   246                           
   247                           	psect	dataCOMRAM
   248  000044                     __pdataCOMRAM:
   249                           	opt stack 0
   250  000044                     _Transmit_stall:
   251                           	opt stack 0
   252  000044                     	ds	1
   253                           tblptru	equ	0xFF8
   254                           tblptrh	equ	0xFF7
   255                           tblptrl	equ	0xFF6
   256                           tablat	equ	0xFF5
   257                           postinc0	equ	0xFEE
   258                           wreg	equ	0xFE8
   259                           
   260                           	psect	bssBANK0
   261  000060                     __pbssBANK0:
   262                           	opt stack 0
   263  000060                     _receiveArray:
   264                           	opt stack 0
   265  000060                     	ds	40
   266  000088                     _time:
   267                           	opt stack 0
   268  000088                     	ds	4
   269  00008C                     TMR0_ISR@CountCallBack:
   270                           	opt stack 0
   271  00008C                     	ds	2
   272  00008E                     _addressErrorCounter:
   273                           	opt stack 0
   274  00008E                     	ds	2
   275  000090                     _dataAdressErrorCounter:
   276                           	opt stack 0
   277  000090                     	ds	2
   278  000092                     _crc_buffer:
   279                           	opt stack 0
   280  000092                     	ds	17
   281                           tblptru	equ	0xFF8
   282                           tblptrh	equ	0xFF7
   283                           tblptrl	equ	0xFF6
   284                           tablat	equ	0xFF5
   285                           postinc0	equ	0xFEE
   286                           wreg	equ	0xFE8
   287                           
   288                           	psect	bssBANK1
   289  000100                     __pbssBANK1:
   290                           	opt stack 0
   291  000100                     _ring_buffer:
   292                           	opt stack 0
   293  000100                     	ds	206
   294                           tblptru	equ	0xFF8
   295                           tblptrh	equ	0xFF7
   296                           tblptrl	equ	0xFF6
   297                           tablat	equ	0xFF5
   298                           postinc0	equ	0xFEE
   299                           wreg	equ	0xFE8
   300                           
   301                           	psect	bssBANK2
   302  000200                     __pbssBANK2:
   303                           	opt stack 0
   304  000200                     _input_buffer:
   305                           	opt stack 0
   306  000200                     	ds	206
   307                           tblptru	equ	0xFF8
   308                           tblptrh	equ	0xFF7
   309                           tblptrl	equ	0xFF6
   310                           tablat	equ	0xFF5
   311                           postinc0	equ	0xFEE
   312                           wreg	equ	0xFE8
   313                           
   314                           	psect	bssBANK3
   315  000300                     __pbssBANK3:
   316                           	opt stack 0
   317  000300                     _output_buffer:
   318                           	opt stack 0
   319  000300                     	ds	206
   320                           tblptru	equ	0xFF8
   321                           tblptrh	equ	0xFF7
   322                           tblptrl	equ	0xFF6
   323                           tablat	equ	0xFF5
   324                           postinc0	equ	0xFEE
   325                           wreg	equ	0xFE8
   326                           
   327                           	psect	bssBANK4
   328  000400                     __pbssBANK4:
   329                           	opt stack 0
   330  000400                     _rx_buffer:
   331                           	opt stack 0
   332  000400                     	ds	200
   333                           tblptru	equ	0xFF8
   334                           tblptrh	equ	0xFF7
   335                           tblptrl	equ	0xFF6
   336                           tablat	equ	0xFF5
   337                           postinc0	equ	0xFEE
   338                           wreg	equ	0xFE8
   339                           
   340                           	psect	cstackBANK0
   341  0000A3                     __pcstackBANK0:
   342                           	opt stack 0
   343  0000A3                     ??_FastTransfer_buffer_put:
   344  0000A3                     FastTransfer_buffer_flush@_this:
   345                           	opt stack 0
   346  0000A3                     crcBufS_get@wantedTime:
   347                           	opt stack 0
   348                           
   349                           ; 2 bytes @ 0x0
   350  0000A3                     	ds	2
   351  0000A5                     CRCcheck@SentCRC:
   352                           	opt stack 0
   353  0000A5                     ToSend@what:
   354                           	opt stack 0
   355  0000A5                     FastTransfer_buffer_flush@clearBuffer:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0x2
   359  0000A5                     	ds	1
   360  0000A6                     CRCcheck@calculatedCRC:
   361                           	opt stack 0
   362                           
   363                           ; 1 bytes @ 0x3
   364  0000A6                     	ds	1
   365  0000A7                     sendData@whereToSend:
   366                           	opt stack 0
   367  0000A7                     ToSend@where:
   368                           	opt stack 0
   369  0000A7                     CRCcheck@arrayHolder:
   370                           	opt stack 0
   371                           
   372                           ; 3 bytes @ 0x4
   373  0000A7                     	ds	1
   374  0000A8                     sendData@CS:
   375                           	opt stack 0
   376                           
   377                           ; 1 bytes @ 0x5
   378  0000A8                     	ds	1
   379  0000A9                     sendData@i:
   380                           	opt stack 0
   381                           
   382                           ; 2 bytes @ 0x6
   383  0000A9                     	ds	1
   384  0000AA                     CRCcheck@rt:
   385                           	opt stack 0
   386                           
   387                           ; 2 bytes @ 0x7
   388  0000AA                     	ds	1
   389  0000AB                     ??_respondECU:
   390                           
   391                           ; 1 bytes @ 0x8
   392  0000AB                     	ds	1
   393  0000AC                     ??_receiveData:
   394                           
   395                           ; 1 bytes @ 0x9
   396  0000AC                     	ds	6
   397  0000B2                     receiveData@crcHolder:
   398                           	opt stack 0
   399                           
   400                           ; 1 bytes @ 0xF
   401  0000B2                     	ds	1
   402  0000B3                     receiveData@crcHolder_318:
   403                           	opt stack 0
   404                           
   405                           ; 1 bytes @ 0x10
   406  0000B3                     	ds	1
   407  0000B4                     receiveData@holder:
   408                           	opt stack 0
   409                           
   410                           ; 3 bytes @ 0x11
   411  0000B4                     	ds	3
   412  0000B7                     receiveData@holder_317:
   413                           	opt stack 0
   414                           
   415                           ; 3 bytes @ 0x14
   416  0000B7                     	ds	3
   417  0000BA                     receiveData@u:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x17
   421  0000BA                     	ds	2
   422  0000BC                     receiveData@r:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0x19
   426  0000BC                     	ds	2
   427                           tblptru	equ	0xFF8
   428                           tblptrh	equ	0xFF7
   429                           tblptrl	equ	0xFF6
   430                           tablat	equ	0xFF5
   431                           postinc0	equ	0xFEE
   432                           wreg	equ	0xFE8
   433                           
   434                           	psect	cstackCOMRAM
   435  000001                     __pcstackCOMRAM:
   436                           	opt stack 0
   437  000001                     ?_UART_buff_modulo_inc:
   438                           	opt stack 0
   439  000001                     ?_UART_buff_size:
   440                           	opt stack 0
   441  000001                     UART_buff_size@_this:
   442                           	opt stack 0
   443  000001                     UART_buff_modulo_inc@value:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x0
   447  000001                     	ds	2
   448  000003                     UART_buff_modulo_inc@modulus:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x2
   452  000003                     	ds	2
   453  000005                     UART_buff_modulo_inc@my_value:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0x4
   457  000005                     	ds	2
   458  000007                     UART_buff_put@_this:
   459                           	opt stack 0
   460  000007                     UART_buff_get@_this:
   461                           	opt stack 0
   462                           
   463                           ; 2 bytes @ 0x6
   464  000007                     	ds	2
   465  000009                     ??_UART_buff_get:
   466  000009                     UART_buff_put@c:
   467                           	opt stack 0
   468                           
   469                           ; 1 bytes @ 0x8
   470  000009                     	ds	1
   471  00000A                     ??_UART_buff_put:
   472                           
   473                           ; 1 bytes @ 0x9
   474  00000A                     	ds	1
   475  00000B                     UART_buff_get@c:
   476                           	opt stack 0
   477                           
   478                           ; 1 bytes @ 0xA
   479  00000B                     	ds	1
   480  00000C                     EUSART1_Receive_ISR@data:
   481                           	opt stack 0
   482                           
   483                           ; 1 bytes @ 0xB
   484  00000C                     	ds	1
   485  00000D                     ??_INTERRUPT_InterruptManager:
   486                           
   487                           ; 1 bytes @ 0xC
   488  00000D                     	ds	14
   489  00001B                     ??_ReadFaults:
   490  00001B                     ?_FastTransfer_buffer_modulo_inc:
   491                           	opt stack 0
   492  00001B                     ?_GetTime:
   493                           	opt stack 0
   494  00001B                     GetFaults@num:
   495                           	opt stack 0
   496  00001B                     CRC8@data:
   497                           	opt stack 0
   498  00001B                     FastTransfer_buffer_modulo_inc@value:
   499                           	opt stack 0
   500  00001B                     crcBufS_put@_this:
   501                           	opt stack 0
   502  00001B                     crcBufS_status_put@_this:
   503                           	opt stack 0
   504  00001B                     crcBufS_get@_this:
   505                           	opt stack 0
   506  00001B                     Delay@wait:
   507                           	opt stack 0
   508  00001B                     memset@p1:
   509                           	opt stack 0
   510                           
   511                           ; 2 bytes @ 0x1A
   512  00001B                     	ds	2
   513  00001D                     ??_Delay:
   514  00001D                     CRC8@len:
   515                           	opt stack 0
   516  00001D                     crcBufS_put@address:
   517                           	opt stack 0
   518  00001D                     crcBufS_status_put@time:
   519                           	opt stack 0
   520  00001D                     crcBufS_get@time:
   521                           	opt stack 0
   522  00001D                     FastTransfer_buffer_modulo_inc@modulus:
   523                           	opt stack 0
   524  00001D                     memset@c:
   525                           	opt stack 0
   526                           
   527                           ; 2 bytes @ 0x1C
   528  00001D                     	ds	1
   529  00001E                     CRC8@sum:
   530                           	opt stack 0
   531  00001E                     crcBufS_put@oldCRC:
   532                           	opt stack 0
   533  00001E                     crcBufS_status_put@status:
   534                           	opt stack 0
   535  00001E                     crcBufS_get@space:
   536                           	opt stack 0
   537  00001E                     Delay@x:
   538                           	opt stack 0
   539                           
   540                           ; 2 bytes @ 0x1D
   541  00001E                     	ds	1
   542  00001F                     ??_crcBufS_get:
   543  00001F                     ??_crcBufS_status_put:
   544  00001F                     CRC8@extract:
   545                           	opt stack 0
   546  00001F                     crcBufS_put@status:
   547                           	opt stack 0
   548  00001F                     FastTransfer_buffer_modulo_inc@my_value:
   549                           	opt stack 0
   550  00001F                     memset@n:
   551                           	opt stack 0
   552                           
   553                           ; 2 bytes @ 0x1E
   554  00001F                     	ds	1
   555  000020                     ??_crcBufS_put:
   556  000020                     CRC8@tempI:
   557                           	opt stack 0
   558                           
   559                           ; 1 bytes @ 0x1F
   560  000020                     	ds	1
   561  000021                     CRC8@crc:
   562                           	opt stack 0
   563  000021                     FastTransfer_buffer_put@_this:
   564                           	opt stack 0
   565  000021                     memset@p:
   566                           	opt stack 0
   567                           
   568                           ; 2 bytes @ 0x20
   569  000021                     	ds	2
   570  000023                     ??_sendData:
   571  000023                     FastTransfer_buffer_put@towhere:
   572                           	opt stack 0
   573  000023                     crcBufS_status_put@wantedTime:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x22
   577  000023                     	ds	1
   578  000024                     FastTransfer_buffer_put@towhat:
   579                           	opt stack 0
   580                           
   581                           ; 2 bytes @ 0x23
   582  000024                     	ds	1
   583  000025                     
   584                           ; 1 bytes @ 0x24
   585  000025                     	ds	1
   586  000026                     tblptru	equ	0xFF8
   587                           tblptrh	equ	0xFF7
   588                           tblptrl	equ	0xFF6
   589                           tablat	equ	0xFF5
   590                           postinc0	equ	0xFEE
   591                           wreg	equ	0xFE8
   592                           
   593                           ; 1 bytes @ 0x25
   594 ;;
   595 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   596 ;;
   597 ;; *************** function _main *****************
   598 ;; Defined at:
   599 ;;		line 26 in file "Main.c"
   600 ;; Parameters:    Size  Location     Type
   601 ;;		None
   602 ;; Auto vars:     Size  Location     Type
   603 ;;		None
   604 ;; Return value:  Size  Location     Type
   605 ;;                  1    wreg      void 
   606 ;; Registers used:
   607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   608 ;; Tracked objects:
   609 ;;		On entry : 0/0
   610 ;;		On exit  : 0/0
   611 ;;		Unchanged: 0/0
   612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   613 ;;      Params:         0       0       0       0       0       0       0
   614 ;;      Locals:         0       0       0       0       0       0       0
   615 ;;      Temps:          0       0       0       0       0       0       0
   616 ;;      Totals:         0       0       0       0       0       0       0
   617 ;;Total ram usage:        0 bytes
   618 ;; Hardware stack levels required when called:    9
   619 ;; This function calls:
   620 ;;		_GetTime
   621 ;;		_ReadFaults
   622 ;;		_SetTime
   623 ;;		_Start
   624 ;;		_updateComms
   625 ;; This function is called by:
   626 ;;		Startup code after reset
   627 ;; This function uses a non-reentrant model
   628 ;;
   629                           
   630                           	psect	text0
   631  000CCA                     __ptext0:
   632                           	opt stack 0
   633  000CCA                     _main:
   634                           	opt stack 22
   635                           
   636                           ;Main.c: 27: Start();
   637                           
   638                           ;incstack = 0
   639  000CCA  EC92  F006         	call	_Start	;wreg free
   640  000CCE                     l2384:
   641                           
   642                           ;Main.c: 29: updateComms();
   643  000CCE  EC3E  F007         	call	_updateComms	;wreg free
   644                           
   645                           ;Main.c: 30: if(GetTime() > 1000){
   646  000CD2  EC35  F007         	call	_GetTime	;wreg free
   647  000CD6  BE1E               	btfsc	?_GetTime+3,7,c
   648  000CD8  D7FA               	goto	l2384
   649  000CDA  501E               	movf	?_GetTime+3,w,c
   650  000CDC  101D               	iorwf	?_GetTime+2,w,c
   651  000CDE  E106               	bnz	u1580
   652  000CE0  0EE9               	movlw	233
   653  000CE2  5C1B               	subwf	?_GetTime,w,c
   654  000CE4  0E03               	movlw	3
   655  000CE6  581C               	subwfb	?_GetTime+1,w,c
   656  000CE8  A0D8               	btfss	status,0,c
   657  000CEA  D7F1               	goto	l2384
   658  000CEC                     u1580:
   659                           
   660                           ;Main.c: 31: LATAbits.LATA3 ^= 1;
   661  000CEC  7689               	btg	3977,3,c	;volatile
   662                           
   663                           ;Main.c: 32: SetTime();
   664  000CEE  EC22  F007         	call	_SetTime	;wreg free
   665                           
   666                           ;Main.c: 33: ReadFaults();
   667  000CF2  ECCF  F003         	call	_ReadFaults	;wreg free
   668  000CF6  D7EB               	goto	l2384
   669  000CF8                     __end_of_main:
   670                           	opt stack 0
   671                           tblptru	equ	0xFF8
   672                           tblptrh	equ	0xFF7
   673                           tblptrl	equ	0xFF6
   674                           tablat	equ	0xFF5
   675                           postinc0	equ	0xFEE
   676                           wreg	equ	0xFE8
   677                           status	equ	0xFD8
   678                           
   679 ;; *************** function _updateComms *****************
   680 ;; Defined at:
   681 ;;		line 9 in file "Communications.c"
   682 ;; Parameters:    Size  Location     Type
   683 ;;		None
   684 ;; Auto vars:     Size  Location     Type
   685 ;;		None
   686 ;; Return value:  Size  Location     Type
   687 ;;                  1    wreg      void 
   688 ;; Registers used:
   689 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   690 ;; Tracked objects:
   691 ;;		On entry : 0/0
   692 ;;		On exit  : 0/0
   693 ;;		Unchanged: 0/0
   694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   695 ;;      Params:         0       0       0       0       0       0       0
   696 ;;      Locals:         0       0       0       0       0       0       0
   697 ;;      Temps:          0       0       0       0       0       0       0
   698 ;;      Totals:         0       0       0       0       0       0       0
   699 ;;Total ram usage:        0 bytes
   700 ;; Hardware stack levels used:    1
   701 ;; Hardware stack levels required when called:    8
   702 ;; This function calls:
   703 ;;		_receiveData
   704 ;;		_respondECU
   705 ;; This function is called by:
   706 ;;		_main
   707 ;; This function uses a non-reentrant model
   708 ;;
   709                           
   710                           	psect	text1
   711  000E7C                     __ptext1:
   712                           	opt stack 0
   713  000E7C                     _updateComms:
   714                           	opt stack 22
   715                           
   716                           ;Communications.c: 10: if (receiveData()) {
   717                           
   718                           ;incstack = 0
   719  000E7C  EC52  F000         	call	_receiveData	;wreg free
   720  000E80  0900               	iorlw	0
   721  000E82  B4D8               	btfsc	status,2,c
   722  000E84  0012               	return	
   723                           
   724                           ;Communications.c: 11: respondECU();
   725  000E86  ECE1  F005         	call	_respondECU	;wreg free
   726  000E8A  0012               	return	
   727  000E8C                     __end_of_updateComms:
   728                           	opt stack 0
   729                           tblptru	equ	0xFF8
   730                           tblptrh	equ	0xFF7
   731                           tblptrl	equ	0xFF6
   732                           tablat	equ	0xFF5
   733                           postinc0	equ	0xFEE
   734                           wreg	equ	0xFE8
   735                           status	equ	0xFD8
   736                           
   737 ;; *************** function _respondECU *****************
   738 ;; Defined at:
   739 ;;		line 15 in file "Communications.c"
   740 ;; Parameters:    Size  Location     Type
   741 ;;		None
   742 ;; Auto vars:     Size  Location     Type
   743 ;;		None
   744 ;; Return value:  Size  Location     Type
   745 ;;                  1    wreg      void 
   746 ;; Registers used:
   747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   748 ;; Tracked objects:
   749 ;;		On entry : 0/0
   750 ;;		On exit  : 0/0
   751 ;;		Unchanged: 0/0
   752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   753 ;;      Params:         0       0       0       0       0       0       0
   754 ;;      Locals:         0       0       0       0       0       0       0
   755 ;;      Temps:          0       1       0       0       0       0       0
   756 ;;      Totals:         0       1       0       0       0       0       0
   757 ;;Total ram usage:        1 bytes
   758 ;; Hardware stack levels used:    1
   759 ;; Hardware stack levels required when called:    7
   760 ;; This function calls:
   761 ;;		_Delay
   762 ;;		_GetFaults
   763 ;;		_ToSend
   764 ;;		_sendData
   765 ;; This function is called by:
   766 ;;		_updateComms
   767 ;; This function uses a non-reentrant model
   768 ;;
   769                           
   770                           	psect	text2
   771  000BC2                     __ptext2:
   772                           	opt stack 0
   773  000BC2                     _respondECU:
   774                           	opt stack 22
   775                           
   776                           ;Communications.c: 16: LATDbits.LATD4 = 1;
   777                           
   778                           ;incstack = 0
   779  000BC2  888C               	bsf	3980,4,c	;volatile
   780                           
   781                           ;Communications.c: 17: ToSend(1,GetFaults(1));
   782  000BC4  0E01               	movlw	1
   783  000BC6  EC0C  F007         	call	_GetFaults
   784  000BCA  0100               	movlb	0	; () banked
   785  000BCC  6FAB               	movwf	??_respondECU& (0+255),b
   786  000BCE  0100               	movlb	0	; () banked
   787  000BD0  51AB               	movf	??_respondECU& (0+255),w,b
   788  000BD2  0100               	movlb	0	; () banked
   789  000BD4  6FA5               	movwf	ToSend@what& (0+255),b
   790  000BD6  6BA6               	clrf	(ToSend@what+1)& (0+255),b
   791  000BD8  0E01               	movlw	1
   792  000BDA  ECD2  F006         	call	_ToSend
   793                           
   794                           ;Communications.c: 18: ToSend(2,GetFaults(0));
   795  000BDE  0E00               	movlw	0
   796  000BE0  EC0C  F007         	call	_GetFaults
   797  000BE4  0100               	movlb	0	; () banked
   798  000BE6  6FAB               	movwf	??_respondECU& (0+255),b
   799  000BE8  0100               	movlb	0	; () banked
   800  000BEA  51AB               	movf	??_respondECU& (0+255),w,b
   801  000BEC  0100               	movlb	0	; () banked
   802  000BEE  6FA5               	movwf	ToSend@what& (0+255),b
   803  000BF0  6BA6               	clrf	(ToSend@what+1)& (0+255),b
   804  000BF2  0E02               	movlw	2
   805  000BF4  ECD2  F006         	call	_ToSend
   806                           
   807                           ;Communications.c: 19: Delay(9);
   808  000BF8  0E00               	movlw	0
   809  000BFA  6E1C               	movwf	Delay@wait+1,c
   810  000BFC  0E09               	movlw	9
   811  000BFE  6E1B               	movwf	Delay@wait,c
   812  000C00  EC32  F006         	call	_Delay	;wreg free
   813                           
   814                           ;Communications.c: 20: sendData(1);
   815  000C04  0E01               	movlw	1
   816  000C06  EC3A  F005         	call	_sendData
   817                           
   818                           ;Communications.c: 21: Delay(3);
   819  000C0A  0E00               	movlw	0
   820  000C0C  6E1C               	movwf	Delay@wait+1,c
   821  000C0E  0E03               	movlw	3
   822  000C10  6E1B               	movwf	Delay@wait,c
   823  000C12  EC32  F006         	call	_Delay	;wreg free
   824                           
   825                           ;Communications.c: 22: LATDbits.LATD4 = 0;
   826  000C16  988C               	bcf	3980,4,c	;volatile
   827  000C18  0012               	return		;funcret
   828  000C1A                     __end_of_respondECU:
   829                           	opt stack 0
   830                           tblptru	equ	0xFF8
   831                           tblptrh	equ	0xFF7
   832                           tblptrl	equ	0xFF6
   833                           tablat	equ	0xFF5
   834                           postinc0	equ	0xFEE
   835                           wreg	equ	0xFE8
   836                           status	equ	0xFD8
   837                           
   838 ;; *************** function _sendData *****************
   839 ;; Defined at:
   840 ;;		line 50 in file "FastTransfer.c"
   841 ;; Parameters:    Size  Location     Type
   842 ;;  whereToSend     1    wreg     unsigned char 
   843 ;; Auto vars:     Size  Location     Type
   844 ;;  whereToSend     1    4[BANK0 ] unsigned char 
   845 ;;  i               2    6[BANK0 ] int 
   846 ;;  CS              1    5[BANK0 ] unsigned char 
   847 ;; Return value:  Size  Location     Type
   848 ;;                  1    wreg      void 
   849 ;; Registers used:
   850 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   851 ;; Tracked objects:
   852 ;;		On entry : 0/0
   853 ;;		On exit  : 0/0
   854 ;;		Unchanged: 0/0
   855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   856 ;;      Params:         0       0       0       0       0       0       0
   857 ;;      Locals:         0       4       0       0       0       0       0
   858 ;;      Temps:          1       0       0       0       0       0       0
   859 ;;      Totals:         1       4       0       0       0       0       0
   860 ;;Total ram usage:        5 bytes
   861 ;; Hardware stack levels used:    1
   862 ;; Hardware stack levels required when called:    6
   863 ;; This function calls:
   864 ;;		_CRC8
   865 ;;		_FastTransfer_buffer_flush
   866 ;;		_crcBufS_put
   867 ;; This function is called by:
   868 ;;		_respondECU
   869 ;; This function uses a non-reentrant model
   870 ;;
   871                           
   872                           	psect	text3
   873  000A74                     __ptext3:
   874                           	opt stack 0
   875  000A74                     _sendData:
   876                           	opt stack 22
   877                           
   878                           ;incstack = 0
   879                           ;sendData@whereToSend stored from wreg
   880  000A74  0100               	movlb	0	; () banked
   881  000A76  6FA7               	movwf	sendData@whereToSend& (0+255),b
   882                           
   883                           ;FastTransfer.c: 59: serial_write(ring_buffer.count);
   884  000A78  C02E  F01B         	movff	_sendStructAddress,CRC8@data
   885  000A7C  C02F  F01C         	movff	_sendStructAddress+1,CRC8@data+1
   886  000A80  C1CC  F01D         	movff	_ring_buffer+204,CRC8@len
   887  000A84  EC0D  F006         	call	_CRC8	;wreg free
   888  000A88  0100               	movlb	0	; () banked
   889  000A8A  6FA8               	movwf	sendData@CS& (0+255),b
   890                           
   891                           ; BSR set to: 0
   892                           ;FastTransfer.c: 63: int i;
   893                           ;FastTransfer.c: 64: for (i = 0; i < ring_buffer.count; i++) {
   894  000A8C  0E00               	movlw	0
   895  000A8E  0100               	movlb	0	; () banked
   896  000A90  6FAA               	movwf	(sendData@i+1)& (0+255),b
   897  000A92  0E00               	movlw	0
   898  000A94  6FA9               	movwf	sendData@i& (0+255),b
   899  000A96  D003               	goto	l2188
   900  000A98                     l2186:
   901  000A98  0100               	movlb	0	; () banked
   902  000A9A  4BA9               	infsnz	sendData@i& (0+255),f,b
   903  000A9C  2BAA               	incf	(sendData@i+1)& (0+255),f,b
   904  000A9E                     l2188:
   905                           
   906                           ; BSR set to: 0
   907  000A9E  0101               	movlb	1	; () banked
   908  000AA0  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
   909  000AA2  0100               	movlb	0	; () banked
   910  000AA4  5DA9               	subwf	sendData@i& (0+255),w,b
   911  000AA6  0100               	movlb	0	; () banked
   912  000AA8  51AA               	movf	(sendData@i+1)& (0+255),w,b
   913  000AAA  0A80               	xorlw	128
   914  000AAC  6E23               	movwf	??_sendData& (0+255),c
   915  000AAE  0101               	movlb	1	; () banked
   916  000AB0  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
   917  000AB2  0A80               	xorlw	128
   918  000AB4  5823               	subwfb	??_sendData& (0+255),w,c
   919  000AB6  A0D8               	btfss	status,0,c
   920  000AB8  D7EF               	goto	l2186
   921                           
   922                           ; BSR set to: 1
   923                           ;FastTransfer.c: 72: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
   924                           
   925                           ; BSR set to: 1
   926                           
   927                           ;FastTransfer.c: 66: }
   928                           ;FastTransfer.c: 69: serial_write(CS);
   929  000ABA  0E92               	movlw	low _crc_buffer
   930  000ABC  6E1B               	movwf	crcBufS_put@_this,c
   931  000ABE  0E00               	movlw	high _crc_buffer
   932  000AC0  6E1C               	movwf	crcBufS_put@_this+1,c
   933  000AC2  C0A7  F01D         	movff	sendData@whereToSend,crcBufS_put@address
   934  000AC6  C0A8  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
   935  000ACA  0E00               	movlw	0
   936  000ACC  6E1F               	movwf	crcBufS_put@status,c
   937  000ACE  EC63  F003         	call	_crcBufS_put	;wreg free
   938                           
   939                           ;FastTransfer.c: 75: FastTransfer_buffer_flush(&ring_buffer, 1);
   940  000AD2  0E00               	movlw	low _ring_buffer
   941  000AD4  0100               	movlb	0	; () banked
   942  000AD6  6FA3               	movwf	FastTransfer_buffer_flush@_this& (0+255),b
   943  000AD8  0E01               	movlw	high _ring_buffer
   944  000ADA  0100               	movlb	0	; () banked
   945  000ADC  6FA4               	movwf	(FastTransfer_buffer_flush@_this+1)& (0+255),b
   946  000ADE  0E00               	movlw	0
   947  000AE0  0100               	movlb	0	; () banked
   948  000AE2  6FA6               	movwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),b
   949  000AE4  0E01               	movlw	1
   950  000AE6  6FA5               	movwf	FastTransfer_buffer_flush@clearBuffer& (0+255),b
   951  000AE8  EC77  F005         	call	_FastTransfer_buffer_flush	;wreg free
   952  000AEC  0012               	return		;funcret
   953  000AEE                     __end_of_sendData:
   954                           	opt stack 0
   955                           tblptru	equ	0xFF8
   956                           tblptrh	equ	0xFF7
   957                           tblptrl	equ	0xFF6
   958                           tablat	equ	0xFF5
   959                           postinc0	equ	0xFEE
   960                           wreg	equ	0xFE8
   961                           status	equ	0xFD8
   962                           
   963 ;; *************** function _crcBufS_put *****************
   964 ;; Defined at:
   965 ;;		line 319 in file "FastTransfer.c"
   966 ;; Parameters:    Size  Location     Type
   967 ;;  _this           2   26[COMRAM] PTR struct crcBufS
   968 ;;		 -> crc_buffer(17), 
   969 ;;  address         1   28[COMRAM] unsigned char 
   970 ;;  oldCRC          1   29[COMRAM] unsigned char 
   971 ;;  status          1   30[COMRAM] unsigned char 
   972 ;; Auto vars:     Size  Location     Type
   973 ;;		None
   974 ;; Return value:  Size  Location     Type
   975 ;;                  1    wreg      void 
   976 ;; Registers used:
   977 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   978 ;; Tracked objects:
   979 ;;		On entry : 0/0
   980 ;;		On exit  : 0/0
   981 ;;		Unchanged: 0/0
   982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   983 ;;      Params:         5       0       0       0       0       0       0
   984 ;;      Locals:         0       0       0       0       0       0       0
   985 ;;      Temps:          2       0       0       0       0       0       0
   986 ;;      Totals:         7       0       0       0       0       0       0
   987 ;;Total ram usage:        7 bytes
   988 ;; Hardware stack levels used:    1
   989 ;; Hardware stack levels required when called:    4
   990 ;; This function calls:
   991 ;;		Nothing
   992 ;; This function is called by:
   993 ;;		_sendData
   994 ;; This function uses a non-reentrant model
   995 ;;
   996                           
   997                           	psect	text4
   998  0006C6                     __ptext4:
   999                           	opt stack 0
  1000  0006C6                     _crcBufS_put:
  1001                           	opt stack 23
  1002                           
  1003                           ;FastTransfer.c: 320: _this->buf[_this->head] = address;
  1004                           
  1005                           ;incstack = 0
  1006  0006C6  EE20 F00F          	lfsr	2,15
  1007  0006CA  501B               	movf	crcBufS_put@_this,w,c
  1008  0006CC  26D9               	addwf	fsr2l,f,c
  1009  0006CE  501C               	movf	crcBufS_put@_this+1,w,c
  1010  0006D0  22DA               	addwfc	fsr2h,f,c
  1011  0006D2  CFDE F020          	movff	postinc2,??_crcBufS_put
  1012  0006D6  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1013  0006DA  5020               	movf	??_crcBufS_put,w,c
  1014  0006DC  241B               	addwf	crcBufS_put@_this,w,c
  1015  0006DE  6ED9               	movwf	fsr2l,c
  1016  0006E0  5021               	movf	??_crcBufS_put+1,w,c
  1017  0006E2  201C               	addwfc	crcBufS_put@_this+1,w,c
  1018  0006E4  6EDA               	movwf	fsr2h,c
  1019  0006E6  C01D  FFDF         	movff	crcBufS_put@address,indf2
  1020                           
  1021                           ;FastTransfer.c: 321: _this->head++;
  1022  0006EA  EE20 F00F          	lfsr	2,15
  1023  0006EE  501B               	movf	crcBufS_put@_this,w,c
  1024  0006F0  26D9               	addwf	fsr2l,f,c
  1025  0006F2  501C               	movf	crcBufS_put@_this+1,w,c
  1026  0006F4  22DA               	addwfc	fsr2h,f,c
  1027  0006F6  2ADE               	incf	postinc2,f,c
  1028  0006F8  0E00               	movlw	0
  1029  0006FA  22DD               	addwfc	postdec2,f,c
  1030                           
  1031                           ;FastTransfer.c: 322: _this->buf[_this->head] = oldCRC;
  1032  0006FC  EE20 F00F          	lfsr	2,15
  1033  000700  501B               	movf	crcBufS_put@_this,w,c
  1034  000702  26D9               	addwf	fsr2l,f,c
  1035  000704  501C               	movf	crcBufS_put@_this+1,w,c
  1036  000706  22DA               	addwfc	fsr2h,f,c
  1037  000708  CFDE F020          	movff	postinc2,??_crcBufS_put
  1038  00070C  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1039  000710  5020               	movf	??_crcBufS_put,w,c
  1040  000712  241B               	addwf	crcBufS_put@_this,w,c
  1041  000714  6ED9               	movwf	fsr2l,c
  1042  000716  5021               	movf	??_crcBufS_put+1,w,c
  1043  000718  201C               	addwfc	crcBufS_put@_this+1,w,c
  1044  00071A  6EDA               	movwf	fsr2h,c
  1045  00071C  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  1046                           
  1047                           ;FastTransfer.c: 323: _this->head++;
  1048  000720  EE20 F00F          	lfsr	2,15
  1049  000724  501B               	movf	crcBufS_put@_this,w,c
  1050  000726  26D9               	addwf	fsr2l,f,c
  1051  000728  501C               	movf	crcBufS_put@_this+1,w,c
  1052  00072A  22DA               	addwfc	fsr2h,f,c
  1053  00072C  2ADE               	incf	postinc2,f,c
  1054  00072E  0E00               	movlw	0
  1055  000730  22DD               	addwfc	postdec2,f,c
  1056                           
  1057                           ;FastTransfer.c: 324: _this->buf[_this->head] = status;
  1058  000732  EE20 F00F          	lfsr	2,15
  1059  000736  501B               	movf	crcBufS_put@_this,w,c
  1060  000738  26D9               	addwf	fsr2l,f,c
  1061  00073A  501C               	movf	crcBufS_put@_this+1,w,c
  1062  00073C  22DA               	addwfc	fsr2h,f,c
  1063  00073E  CFDE F020          	movff	postinc2,??_crcBufS_put
  1064  000742  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1065  000746  5020               	movf	??_crcBufS_put,w,c
  1066  000748  241B               	addwf	crcBufS_put@_this,w,c
  1067  00074A  6ED9               	movwf	fsr2l,c
  1068  00074C  5021               	movf	??_crcBufS_put+1,w,c
  1069  00074E  201C               	addwfc	crcBufS_put@_this+1,w,c
  1070  000750  6EDA               	movwf	fsr2h,c
  1071  000752  C01F  FFDF         	movff	crcBufS_put@status,indf2
  1072                           
  1073                           ;FastTransfer.c: 325: _this->head++;
  1074  000756  EE20 F00F          	lfsr	2,15
  1075  00075A  501B               	movf	crcBufS_put@_this,w,c
  1076  00075C  26D9               	addwf	fsr2l,f,c
  1077  00075E  501C               	movf	crcBufS_put@_this+1,w,c
  1078  000760  22DA               	addwfc	fsr2h,f,c
  1079  000762  2ADE               	incf	postinc2,f,c
  1080  000764  0E00               	movlw	0
  1081  000766  22DD               	addwfc	postdec2,f,c
  1082                           
  1083                           ;FastTransfer.c: 326: if (_this->head >= (5 * 3)) {
  1084  000768  EE20 F00F          	lfsr	2,15
  1085  00076C  501B               	movf	crcBufS_put@_this,w,c
  1086  00076E  26D9               	addwf	fsr2l,f,c
  1087  000770  501C               	movf	crcBufS_put@_this+1,w,c
  1088  000772  22DA               	addwfc	fsr2h,f,c
  1089  000774  0E01               	movlw	1
  1090  000776  BEDB               	btfsc	plusw2,7,c
  1091  000778  0012               	return	
  1092  00077A  0E01               	movlw	1
  1093  00077C  50DB               	movf	plusw2,w,c
  1094  00077E  E104               	bnz	u1260
  1095  000780  0E0F               	movlw	15
  1096  000782  5CDE               	subwf	postinc2,w,c
  1097  000784  A0D8               	btfss	status,0,c
  1098  000786  0012               	return	
  1099  000788                     u1260:
  1100                           
  1101                           ;FastTransfer.c: 327: _this->head = 0;
  1102  000788  EE20 F00F          	lfsr	2,15
  1103  00078C  501B               	movf	crcBufS_put@_this,w,c
  1104  00078E  26D9               	addwf	fsr2l,f,c
  1105  000790  501C               	movf	crcBufS_put@_this+1,w,c
  1106  000792  22DA               	addwfc	fsr2h,f,c
  1107  000794  0E00               	movlw	0
  1108  000796  6EDE               	movwf	postinc2,c
  1109  000798  0E00               	movlw	0
  1110  00079A  6EDD               	movwf	postdec2,c
  1111  00079C  0012               	return	
  1112  00079E                     __end_of_crcBufS_put:
  1113                           	opt stack 0
  1114                           tblptru	equ	0xFF8
  1115                           tblptrh	equ	0xFF7
  1116                           tblptrl	equ	0xFF6
  1117                           tablat	equ	0xFF5
  1118                           postinc0	equ	0xFEE
  1119                           wreg	equ	0xFE8
  1120                           indf2	equ	0xFDF
  1121                           postinc2	equ	0xFDE
  1122                           postdec2	equ	0xFDD
  1123                           plusw2	equ	0xFDB
  1124                           fsr2h	equ	0xFDA
  1125                           fsr2l	equ	0xFD9
  1126                           status	equ	0xFD8
  1127                           
  1128 ;; *************** function _FastTransfer_buffer_flush *****************
  1129 ;; Defined at:
  1130 ;;		line 259 in file "FastTransfer.c"
  1131 ;; Parameters:    Size  Location     Type
  1132 ;;  _this           2    0[BANK0 ] PTR struct ringBufS
  1133 ;;		 -> ring_buffer(206), 
  1134 ;;  clearBuffer     2    2[BANK0 ] const int 
  1135 ;; Auto vars:     Size  Location     Type
  1136 ;;		None
  1137 ;; Return value:  Size  Location     Type
  1138 ;;                  1    wreg      void 
  1139 ;; Registers used:
  1140 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1141 ;; Tracked objects:
  1142 ;;		On entry : 0/0
  1143 ;;		On exit  : 0/0
  1144 ;;		Unchanged: 0/0
  1145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1146 ;;      Params:         0       4       0       0       0       0       0
  1147 ;;      Locals:         0       0       0       0       0       0       0
  1148 ;;      Temps:          0       0       0       0       0       0       0
  1149 ;;      Totals:         0       4       0       0       0       0       0
  1150 ;;Total ram usage:        4 bytes
  1151 ;; Hardware stack levels used:    1
  1152 ;; Hardware stack levels required when called:    5
  1153 ;; This function calls:
  1154 ;;		_memset
  1155 ;; This function is called by:
  1156 ;;		_sendData
  1157 ;; This function uses a non-reentrant model
  1158 ;;
  1159                           
  1160                           	psect	text5
  1161  000AEE                     __ptext5:
  1162                           	opt stack 0
  1163  000AEE                     _FastTransfer_buffer_flush:
  1164                           	opt stack 22
  1165                           
  1166                           ;FastTransfer.c: 260: _this->count = 0;
  1167                           
  1168                           ;incstack = 0
  1169  000AEE  0100               	movlb	0	; () banked
  1170  000AF0  EE20 F0CC          	lfsr	2,204
  1171  000AF4  51A3               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1172  000AF6  26D9               	addwf	fsr2l,f,c
  1173  000AF8  51A4               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1174  000AFA  22DA               	addwfc	fsr2h,f,c
  1175  000AFC  0E00               	movlw	0
  1176  000AFE  6EDE               	movwf	postinc2,c
  1177  000B00  0E00               	movlw	0
  1178  000B02  6EDD               	movwf	postdec2,c
  1179                           
  1180                           ;FastTransfer.c: 261: _this->head = 0;
  1181  000B04  0100               	movlb	0	; () banked
  1182  000B06  EE20 F0C8          	lfsr	2,200
  1183  000B0A  51A3               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1184  000B0C  26D9               	addwf	fsr2l,f,c
  1185  000B0E  51A4               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1186  000B10  22DA               	addwfc	fsr2h,f,c
  1187  000B12  0E00               	movlw	0
  1188  000B14  6EDE               	movwf	postinc2,c
  1189  000B16  0E00               	movlw	0
  1190  000B18  6EDD               	movwf	postdec2,c
  1191                           
  1192                           ;FastTransfer.c: 262: _this->tail = 0;
  1193  000B1A  0100               	movlb	0	; () banked
  1194  000B1C  EE20 F0CA          	lfsr	2,202
  1195  000B20  51A3               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1196  000B22  26D9               	addwf	fsr2l,f,c
  1197  000B24  51A4               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1198  000B26  22DA               	addwfc	fsr2h,f,c
  1199  000B28  0E00               	movlw	0
  1200  000B2A  6EDE               	movwf	postinc2,c
  1201  000B2C  0E00               	movlw	0
  1202  000B2E  6EDD               	movwf	postdec2,c
  1203                           
  1204                           ; BSR set to: 0
  1205                           ;FastTransfer.c: 263: if (clearBuffer) {
  1206  000B30  0100               	movlb	0	; () banked
  1207  000B32  51A5               	movf	FastTransfer_buffer_flush@clearBuffer& (0+255),w,b
  1208  000B34  0100               	movlb	0	; () banked
  1209  000B36  11A6               	iorwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),w,b
  1210  000B38  B4D8               	btfsc	status,2,c
  1211  000B3A  0012               	return	
  1212                           
  1213                           ; BSR set to: 0
  1214                           ;FastTransfer.c: 264: memset(_this->buf, 0, sizeof (_this->buf));
  1215  000B3C  C0A3  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  1216  000B40  C0A4  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  1217  000B44  0E00               	movlw	0
  1218  000B46  6E1E               	movwf	memset@c+1,c
  1219  000B48  0E00               	movlw	0
  1220  000B4A  6E1D               	movwf	memset@c,c
  1221  000B4C  0E00               	movlw	0
  1222  000B4E  6E20               	movwf	memset@n+1,c
  1223  000B50  0EC8               	movlw	200
  1224  000B52  6E1F               	movwf	memset@n,c
  1225  000B54  EC7C  F006         	call	_memset	;wreg free
  1226  000B58  0012               	return	
  1227  000B5A                     __end_of_FastTransfer_buffer_flush:
  1228                           	opt stack 0
  1229                           tblptru	equ	0xFF8
  1230                           tblptrh	equ	0xFF7
  1231                           tblptrl	equ	0xFF6
  1232                           tablat	equ	0xFF5
  1233                           postinc0	equ	0xFEE
  1234                           wreg	equ	0xFE8
  1235                           indf2	equ	0xFDF
  1236                           postinc2	equ	0xFDE
  1237                           postdec2	equ	0xFDD
  1238                           plusw2	equ	0xFDB
  1239                           fsr2h	equ	0xFDA
  1240                           fsr2l	equ	0xFD9
  1241                           status	equ	0xFD8
  1242                           
  1243 ;; *************** function _memset *****************
  1244 ;; Defined at:
  1245 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  1246 ;; Parameters:    Size  Location     Type
  1247 ;;  p1              2   26[COMRAM] PTR void 
  1248 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  1249 ;;  c               2   28[COMRAM] int 
  1250 ;;  n               2   30[COMRAM] unsigned int 
  1251 ;; Auto vars:     Size  Location     Type
  1252 ;;  p               2   32[COMRAM] PTR unsigned char 
  1253 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  1254 ;; Return value:  Size  Location     Type
  1255 ;;                  2   26[COMRAM] PTR void 
  1256 ;; Registers used:
  1257 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1258 ;; Tracked objects:
  1259 ;;		On entry : 0/0
  1260 ;;		On exit  : 0/0
  1261 ;;		Unchanged: 0/0
  1262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1263 ;;      Params:         6       0       0       0       0       0       0
  1264 ;;      Locals:         2       0       0       0       0       0       0
  1265 ;;      Temps:          0       0       0       0       0       0       0
  1266 ;;      Totals:         8       0       0       0       0       0       0
  1267 ;;Total ram usage:        8 bytes
  1268 ;; Hardware stack levels used:    1
  1269 ;; Hardware stack levels required when called:    4
  1270 ;; This function calls:
  1271 ;;		Nothing
  1272 ;; This function is called by:
  1273 ;;		_FastTransfer_buffer_flush
  1274 ;;		_UART_buff_init
  1275 ;;		_UART_buff_flush
  1276 ;; This function uses a non-reentrant model
  1277 ;;
  1278                           
  1279                           	psect	text6
  1280  000CF8                     __ptext6:
  1281                           	opt stack 0
  1282  000CF8                     _memset:
  1283                           	opt stack 22
  1284                           
  1285                           ;incstack = 0
  1286  000CF8  C01B  F021         	movff	memset@p1,memset@p
  1287  000CFC  C01C  F022         	movff	memset@p1+1,memset@p+1
  1288  000D00  D008               	goto	l2088
  1289  000D02                     l2084:
  1290  000D02  C021  FFD9         	movff	memset@p,fsr2l
  1291  000D06  C022  FFDA         	movff	memset@p+1,fsr2h
  1292  000D0A  C01D  FFDF         	movff	memset@c,indf2
  1293  000D0E  4A21               	infsnz	memset@p,f,c
  1294  000D10  2A22               	incf	memset@p+1,f,c
  1295  000D12                     l2088:
  1296  000D12  061F               	decf	memset@n,f,c
  1297  000D14  A0D8               	btfss	status,0,c
  1298  000D16  0620               	decf	memset@n+1,f,c
  1299  000D18  281F               	incf	memset@n,w,c
  1300  000D1A  E1F3               	bnz	l2084
  1301  000D1C  2820               	incf	memset@n+1,w,c
  1302  000D1E  B4D8               	btfsc	status,2,c
  1303  000D20  0012               	return	
  1304  000D22  D7EF               	goto	l2084
  1305  000D24                     __end_of_memset:
  1306                           	opt stack 0
  1307                           tblptru	equ	0xFF8
  1308                           tblptrh	equ	0xFF7
  1309                           tblptrl	equ	0xFF6
  1310                           tablat	equ	0xFF5
  1311                           postinc0	equ	0xFEE
  1312                           wreg	equ	0xFE8
  1313                           indf2	equ	0xFDF
  1314                           postinc2	equ	0xFDE
  1315                           postdec2	equ	0xFDD
  1316                           plusw2	equ	0xFDB
  1317                           fsr2h	equ	0xFDA
  1318                           fsr2l	equ	0xFD9
  1319                           status	equ	0xFD8
  1320                           
  1321 ;; *************** function _ToSend *****************
  1322 ;; Defined at:
  1323 ;;		line 214 in file "FastTransfer.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;  where           1    wreg     unsigned char 
  1326 ;;  what            2    2[BANK0 ] unsigned int 
  1327 ;; Auto vars:     Size  Location     Type
  1328 ;;  where           1    4[BANK0 ] unsigned char 
  1329 ;; Return value:  Size  Location     Type
  1330 ;;                  1    wreg      void 
  1331 ;; Registers used:
  1332 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1333 ;; Tracked objects:
  1334 ;;		On entry : 0/0
  1335 ;;		On exit  : 0/0
  1336 ;;		Unchanged: 0/0
  1337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1338 ;;      Params:         0       2       0       0       0       0       0
  1339 ;;      Locals:         0       1       0       0       0       0       0
  1340 ;;      Temps:          0       0       0       0       0       0       0
  1341 ;;      Totals:         0       3       0       0       0       0       0
  1342 ;;Total ram usage:        3 bytes
  1343 ;; Hardware stack levels used:    1
  1344 ;; Hardware stack levels required when called:    6
  1345 ;; This function calls:
  1346 ;;		_FastTransfer_buffer_put
  1347 ;; This function is called by:
  1348 ;;		_respondECU
  1349 ;; This function uses a non-reentrant model
  1350 ;;
  1351                           
  1352                           	psect	text7
  1353  000DA4                     __ptext7:
  1354                           	opt stack 0
  1355  000DA4                     _ToSend:
  1356                           	opt stack 22
  1357                           
  1358                           ;incstack = 0
  1359                           ;ToSend@where stored from wreg
  1360  000DA4  0100               	movlb	0	; () banked
  1361  000DA6  6FA7               	movwf	ToSend@where& (0+255),b
  1362                           
  1363                           ;FastTransfer.c: 215: FastTransfer_buffer_put(&ring_buffer, where, what);
  1364  000DA8  0E00               	movlw	low _ring_buffer
  1365  000DAA  6E21               	movwf	FastTransfer_buffer_put@_this,c
  1366  000DAC  0E01               	movlw	high _ring_buffer
  1367  000DAE  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  1368  000DB0  C0A7  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  1369  000DB4  C0A5  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  1370  000DB8  C0A6  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  1371  000DBC  ECA3  F001         	call	_FastTransfer_buffer_put	;wreg free
  1372  000DC0  0012               	return		;funcret
  1373  000DC2                     __end_of_ToSend:
  1374                           	opt stack 0
  1375                           tblptru	equ	0xFF8
  1376                           tblptrh	equ	0xFF7
  1377                           tblptrl	equ	0xFF6
  1378                           tablat	equ	0xFF5
  1379                           postinc0	equ	0xFEE
  1380                           wreg	equ	0xFE8
  1381                           indf2	equ	0xFDF
  1382                           postinc2	equ	0xFDE
  1383                           postdec2	equ	0xFDD
  1384                           plusw2	equ	0xFDB
  1385                           fsr2h	equ	0xFDA
  1386                           fsr2l	equ	0xFD9
  1387                           status	equ	0xFD8
  1388                           
  1389 ;; *************** function _FastTransfer_buffer_put *****************
  1390 ;; Defined at:
  1391 ;;		line 221 in file "FastTransfer.c"
  1392 ;; Parameters:    Size  Location     Type
  1393 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  1394 ;;		 -> ring_buffer(206), 
  1395 ;;  towhere         1   34[COMRAM] unsigned char 
  1396 ;;  towhat          2   35[COMRAM] unsigned int 
  1397 ;; Auto vars:     Size  Location     Type
  1398 ;;		None
  1399 ;; Return value:  Size  Location     Type
  1400 ;;                  1    wreg      void 
  1401 ;; Registers used:
  1402 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1403 ;; Tracked objects:
  1404 ;;		On entry : 0/0
  1405 ;;		On exit  : 0/0
  1406 ;;		Unchanged: 0/0
  1407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1408 ;;      Params:         5       0       0       0       0       0       0
  1409 ;;      Locals:         0       0       0       0       0       0       0
  1410 ;;      Temps:          0       2       0       0       0       0       0
  1411 ;;      Totals:         5       2       0       0       0       0       0
  1412 ;;Total ram usage:        7 bytes
  1413 ;; Hardware stack levels used:    1
  1414 ;; Hardware stack levels required when called:    5
  1415 ;; This function calls:
  1416 ;;		_FastTransfer_buffer_modulo_inc
  1417 ;; This function is called by:
  1418 ;;		_ToSend
  1419 ;; This function uses a non-reentrant model
  1420 ;;
  1421                           
  1422                           	psect	text8
  1423  000346                     __ptext8:
  1424                           	opt stack 0
  1425  000346                     _FastTransfer_buffer_put:
  1426                           	opt stack 22
  1427                           
  1428                           ;FastTransfer.c: 223: group.integer = towhat;
  1429                           
  1430                           ;incstack = 0
  1431  000346  C024  F02A         	movff	FastTransfer_buffer_put@towhat,_group
  1432  00034A  C025  F02B         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  1433                           
  1434                           ;FastTransfer.c: 225: if (_this->count < (200 - 3)) {
  1435  00034E  EE20 F0CC          	lfsr	2,204
  1436  000352  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1437  000354  26D9               	addwf	fsr2l,f,c
  1438  000356  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1439  000358  22DA               	addwfc	fsr2h,f,c
  1440  00035A  0E01               	movlw	1
  1441  00035C  BEDB               	btfsc	plusw2,7,c
  1442  00035E  D007               	goto	l2128
  1443  000360  0E01               	movlw	1
  1444  000362  50DB               	movf	plusw2,w,c
  1445  000364  E103               	bnz	u1281
  1446  000366  0EC5               	movlw	197
  1447  000368  5CDE               	subwf	postinc2,w,c
  1448  00036A  B0D8               	btfsc	status,0,c
  1449  00036C                     u1281:
  1450  00036C  0012               	return	
  1451  00036E                     l2128:
  1452                           
  1453                           ;FastTransfer.c: 226: _this->buf[_this->head] = towhere;
  1454  00036E  EE20 F0C8          	lfsr	2,200
  1455  000372  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1456  000374  26D9               	addwf	fsr2l,f,c
  1457  000376  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1458  000378  22DA               	addwfc	fsr2h,f,c
  1459  00037A  CFDE F0A3          	movff	postinc2,??_FastTransfer_buffer_put
  1460  00037E  CFDD F0A4          	movff	postdec2,??_FastTransfer_buffer_put+1
  1461  000382  0100               	movlb	0	; () banked
  1462  000384  51A3               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1463  000386  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1464  000388  6ED9               	movwf	fsr2l,c
  1465  00038A  0100               	movlb	0	; () banked
  1466  00038C  51A4               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1467  00038E  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1468  000390  6EDA               	movwf	fsr2h,c
  1469  000392  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  1470                           
  1471                           ; BSR set to: 0
  1472                           ;FastTransfer.c: 227: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1473  000396  EE20 F0C8          	lfsr	2,200
  1474  00039A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1475  00039C  26D9               	addwf	fsr2l,f,c
  1476  00039E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1477  0003A0  22DA               	addwfc	fsr2h,f,c
  1478  0003A2  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1479  0003A6  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1480  0003AA  0E00               	movlw	0
  1481  0003AC  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1482  0003AE  0EC8               	movlw	200
  1483  0003B0  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1484  0003B2  ECA8  F006         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1485  0003B6  EE20 F0C8          	lfsr	2,200
  1486  0003BA  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1487  0003BC  26D9               	addwf	fsr2l,f,c
  1488  0003BE  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1489  0003C0  22DA               	addwfc	fsr2h,f,c
  1490  0003C2  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1491  0003C6  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1492                           
  1493                           ;FastTransfer.c: 228: ++_this->count;
  1494  0003CA  EE20 F0CC          	lfsr	2,204
  1495  0003CE  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1496  0003D0  26D9               	addwf	fsr2l,f,c
  1497  0003D2  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1498  0003D4  22DA               	addwfc	fsr2h,f,c
  1499  0003D6  2ADE               	incf	postinc2,f,c
  1500  0003D8  0E00               	movlw	0
  1501  0003DA  22DD               	addwfc	postdec2,f,c
  1502                           
  1503                           ;FastTransfer.c: 229: _this->buf[_this->head] = group.parts[0];
  1504  0003DC  EE20 F0C8          	lfsr	2,200
  1505  0003E0  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1506  0003E2  26D9               	addwf	fsr2l,f,c
  1507  0003E4  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1508  0003E6  22DA               	addwfc	fsr2h,f,c
  1509  0003E8  CFDE F0A3          	movff	postinc2,??_FastTransfer_buffer_put
  1510  0003EC  CFDD F0A4          	movff	postdec2,??_FastTransfer_buffer_put+1
  1511  0003F0  0100               	movlb	0	; () banked
  1512  0003F2  51A3               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1513  0003F4  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1514  0003F6  6ED9               	movwf	fsr2l,c
  1515  0003F8  0100               	movlb	0	; () banked
  1516  0003FA  51A4               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1517  0003FC  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1518  0003FE  6EDA               	movwf	fsr2h,c
  1519  000400  C02A  FFDF         	movff	_group,indf2
  1520                           
  1521                           ; BSR set to: 0
  1522                           ;FastTransfer.c: 230: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1523  000404  EE20 F0C8          	lfsr	2,200
  1524  000408  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1525  00040A  26D9               	addwf	fsr2l,f,c
  1526  00040C  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1527  00040E  22DA               	addwfc	fsr2h,f,c
  1528  000410  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1529  000414  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1530  000418  0E00               	movlw	0
  1531  00041A  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1532  00041C  0EC8               	movlw	200
  1533  00041E  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1534  000420  ECA8  F006         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1535  000424  EE20 F0C8          	lfsr	2,200
  1536  000428  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1537  00042A  26D9               	addwf	fsr2l,f,c
  1538  00042C  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1539  00042E  22DA               	addwfc	fsr2h,f,c
  1540  000430  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1541  000434  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1542                           
  1543                           ;FastTransfer.c: 231: ++_this->count;
  1544  000438  EE20 F0CC          	lfsr	2,204
  1545  00043C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1546  00043E  26D9               	addwf	fsr2l,f,c
  1547  000440  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1548  000442  22DA               	addwfc	fsr2h,f,c
  1549  000444  2ADE               	incf	postinc2,f,c
  1550  000446  0E00               	movlw	0
  1551  000448  22DD               	addwfc	postdec2,f,c
  1552                           
  1553                           ;FastTransfer.c: 232: _this->buf[_this->head] = group.parts[1];
  1554  00044A  EE20 F0C8          	lfsr	2,200
  1555  00044E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1556  000450  26D9               	addwf	fsr2l,f,c
  1557  000452  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1558  000454  22DA               	addwfc	fsr2h,f,c
  1559  000456  CFDE F0A3          	movff	postinc2,??_FastTransfer_buffer_put
  1560  00045A  CFDD F0A4          	movff	postdec2,??_FastTransfer_buffer_put+1
  1561  00045E  0100               	movlb	0	; () banked
  1562  000460  51A3               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1563  000462  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1564  000464  6ED9               	movwf	fsr2l,c
  1565  000466  0100               	movlb	0	; () banked
  1566  000468  51A4               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1567  00046A  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1568  00046C  6EDA               	movwf	fsr2h,c
  1569  00046E  C02B  FFDF         	movff	_group+1,indf2
  1570                           
  1571                           ; BSR set to: 0
  1572                           ;FastTransfer.c: 233: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1573  000472  EE20 F0C8          	lfsr	2,200
  1574  000476  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1575  000478  26D9               	addwf	fsr2l,f,c
  1576  00047A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1577  00047C  22DA               	addwfc	fsr2h,f,c
  1578  00047E  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1579  000482  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1580  000486  0E00               	movlw	0
  1581  000488  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1582  00048A  0EC8               	movlw	200
  1583  00048C  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1584  00048E  ECA8  F006         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1585  000492  EE20 F0C8          	lfsr	2,200
  1586  000496  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1587  000498  26D9               	addwf	fsr2l,f,c
  1588  00049A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1589  00049C  22DA               	addwfc	fsr2h,f,c
  1590  00049E  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1591  0004A2  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1592                           
  1593                           ;FastTransfer.c: 234: ++_this->count;
  1594  0004A6  EE20 F0CC          	lfsr	2,204
  1595  0004AA  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1596  0004AC  26D9               	addwf	fsr2l,f,c
  1597  0004AE  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1598  0004B0  22DA               	addwfc	fsr2h,f,c
  1599  0004B2  2ADE               	incf	postinc2,f,c
  1600  0004B4  0E00               	movlw	0
  1601  0004B6  22DD               	addwfc	postdec2,f,c
  1602  0004B8  0012               	return	
  1603  0004BA                     __end_of_FastTransfer_buffer_put:
  1604                           	opt stack 0
  1605                           tblptru	equ	0xFF8
  1606                           tblptrh	equ	0xFF7
  1607                           tblptrl	equ	0xFF6
  1608                           tablat	equ	0xFF5
  1609                           postinc0	equ	0xFEE
  1610                           wreg	equ	0xFE8
  1611                           indf2	equ	0xFDF
  1612                           postinc2	equ	0xFDE
  1613                           postdec2	equ	0xFDD
  1614                           plusw2	equ	0xFDB
  1615                           fsr2h	equ	0xFDA
  1616                           fsr2l	equ	0xFD9
  1617                           status	equ	0xFD8
  1618                           
  1619 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  1620 ;; Defined at:
  1621 ;;		line 271 in file "FastTransfer.c"
  1622 ;; Parameters:    Size  Location     Type
  1623 ;;  value           2   26[COMRAM] const unsigned int 
  1624 ;;  modulus         2   28[COMRAM] const unsigned int 
  1625 ;; Auto vars:     Size  Location     Type
  1626 ;;  my_value        2   30[COMRAM] unsigned int 
  1627 ;; Return value:  Size  Location     Type
  1628 ;;                  2   26[COMRAM] unsigned int 
  1629 ;; Registers used:
  1630 ;;		wreg, status,2, status,0
  1631 ;; Tracked objects:
  1632 ;;		On entry : 0/0
  1633 ;;		On exit  : 0/0
  1634 ;;		Unchanged: 0/0
  1635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1636 ;;      Params:         4       0       0       0       0       0       0
  1637 ;;      Locals:         2       0       0       0       0       0       0
  1638 ;;      Temps:          0       0       0       0       0       0       0
  1639 ;;      Totals:         6       0       0       0       0       0       0
  1640 ;;Total ram usage:        6 bytes
  1641 ;; Hardware stack levels used:    1
  1642 ;; Hardware stack levels required when called:    4
  1643 ;; This function calls:
  1644 ;;		Nothing
  1645 ;; This function is called by:
  1646 ;;		_FastTransfer_buffer_put
  1647 ;;		_FastTransfer_buffer_get
  1648 ;; This function uses a non-reentrant model
  1649 ;;
  1650                           
  1651                           	psect	text9
  1652  000D50                     __ptext9:
  1653                           	opt stack 0
  1654  000D50                     _FastTransfer_buffer_modulo_inc:
  1655                           	opt stack 22
  1656                           
  1657                           ;FastTransfer.c: 272: unsigned int my_value = value + 1;
  1658                           
  1659                           ;incstack = 0
  1660  000D50  0E01               	movlw	1
  1661  000D52  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  1662  000D54  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  1663  000D56  0E00               	movlw	0
  1664  000D58  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  1665  000D5A  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  1666                           
  1667                           ;FastTransfer.c: 273: if (my_value >= modulus) {
  1668  000D5C  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  1669  000D5E  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  1670  000D60  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  1671  000D62  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  1672  000D64  A0D8               	btfss	status,0,c
  1673  000D66  D004               	goto	l2078
  1674                           
  1675                           ;FastTransfer.c: 274: my_value = 0;
  1676  000D68  0E00               	movlw	0
  1677  000D6A  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  1678  000D6C  0E00               	movlw	0
  1679  000D6E  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  1680  000D70                     l2078:
  1681                           
  1682                           ;FastTransfer.c: 275: }
  1683                           ;FastTransfer.c: 276: return (my_value);
  1684  000D70  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  1685  000D74  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  1686  000D78  0012               	return	
  1687  000D7A                     __end_of_FastTransfer_buffer_modulo_inc:
  1688                           	opt stack 0
  1689                           tblptru	equ	0xFF8
  1690                           tblptrh	equ	0xFF7
  1691                           tblptrl	equ	0xFF6
  1692                           tablat	equ	0xFF5
  1693                           postinc0	equ	0xFEE
  1694                           wreg	equ	0xFE8
  1695                           indf2	equ	0xFDF
  1696                           postinc2	equ	0xFDE
  1697                           postdec2	equ	0xFDD
  1698                           plusw2	equ	0xFDB
  1699                           fsr2h	equ	0xFDA
  1700                           fsr2l	equ	0xFD9
  1701                           status	equ	0xFD8
  1702                           
  1703 ;; *************** function _GetFaults *****************
  1704 ;; Defined at:
  1705 ;;		line 23 in file "Function.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;  num             1    wreg     unsigned char 
  1708 ;; Auto vars:     Size  Location     Type
  1709 ;;  num             1   26[COMRAM] unsigned char 
  1710 ;; Return value:  Size  Location     Type
  1711 ;;                  1    wreg      unsigned char 
  1712 ;; Registers used:
  1713 ;;		wreg, status,2, status,0
  1714 ;; Tracked objects:
  1715 ;;		On entry : 0/0
  1716 ;;		On exit  : 0/0
  1717 ;;		Unchanged: 0/0
  1718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1719 ;;      Params:         0       0       0       0       0       0       0
  1720 ;;      Locals:         1       0       0       0       0       0       0
  1721 ;;      Temps:          0       0       0       0       0       0       0
  1722 ;;      Totals:         1       0       0       0       0       0       0
  1723 ;;Total ram usage:        1 bytes
  1724 ;; Hardware stack levels used:    1
  1725 ;; Hardware stack levels required when called:    4
  1726 ;; This function calls:
  1727 ;;		Nothing
  1728 ;; This function is called by:
  1729 ;;		_respondECU
  1730 ;; This function uses a non-reentrant model
  1731 ;;
  1732                           
  1733                           	psect	text10
  1734  000E18                     __ptext10:
  1735                           	opt stack 0
  1736  000E18                     _GetFaults:
  1737                           	opt stack 24
  1738                           
  1739                           ;incstack = 0
  1740                           ;GetFaults@num stored from wreg
  1741  000E18  6E1B               	movwf	GetFaults@num,c
  1742                           
  1743                           ;Function.c: 24: if(num == 1){
  1744  000E1A  041B               	decf	GetFaults@num,w,c
  1745  000E1C  A4D8               	btfss	status,2,c
  1746  000E1E  D002               	goto	l1216
  1747                           
  1748                           ;Function.c: 25: return ByteHigh;
  1749  000E20  5039               	movf	_ByteHigh,w,c
  1750  000E22  0012               	return	
  1751  000E24                     l1216:
  1752                           
  1753                           ;Function.c: 26: }
  1754                           ;Function.c: 27: if(num == 0){
  1755  000E24  501B               	movf	GetFaults@num,w,c
  1756  000E26  A4D8               	btfss	status,2,c
  1757  000E28  0012               	return	
  1758                           
  1759                           ;Function.c: 28: return ByteLow;
  1760  000E2A  503A               	movf	_ByteLow,w,c
  1761  000E2C  0012               	return	
  1762  000E2E                     __end_of_GetFaults:
  1763                           	opt stack 0
  1764                           tblptru	equ	0xFF8
  1765                           tblptrh	equ	0xFF7
  1766                           tblptrl	equ	0xFF6
  1767                           tablat	equ	0xFF5
  1768                           postinc0	equ	0xFEE
  1769                           wreg	equ	0xFE8
  1770                           indf2	equ	0xFDF
  1771                           postinc2	equ	0xFDE
  1772                           postdec2	equ	0xFDD
  1773                           plusw2	equ	0xFDB
  1774                           fsr2h	equ	0xFDA
  1775                           fsr2l	equ	0xFD9
  1776                           status	equ	0xFD8
  1777                           
  1778 ;; *************** function _Delay *****************
  1779 ;; Defined at:
  1780 ;;		line 162 in file "Function.c"
  1781 ;; Parameters:    Size  Location     Type
  1782 ;;  wait            2   26[COMRAM] int 
  1783 ;; Auto vars:     Size  Location     Type
  1784 ;;  x               2   29[COMRAM] int 
  1785 ;; Return value:  Size  Location     Type
  1786 ;;                  1    wreg      void 
  1787 ;; Registers used:
  1788 ;;		wreg, status,2, status,0
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1794 ;;      Params:         2       0       0       0       0       0       0
  1795 ;;      Locals:         2       0       0       0       0       0       0
  1796 ;;      Temps:          1       0       0       0       0       0       0
  1797 ;;      Totals:         5       0       0       0       0       0       0
  1798 ;;Total ram usage:        5 bytes
  1799 ;; Hardware stack levels used:    1
  1800 ;; Hardware stack levels required when called:    4
  1801 ;; This function calls:
  1802 ;;		Nothing
  1803 ;; This function is called by:
  1804 ;;		_respondECU
  1805 ;; This function uses a non-reentrant model
  1806 ;;
  1807                           
  1808                           	psect	text11
  1809  000C64                     __ptext11:
  1810                           	opt stack 0
  1811  000C64                     _Delay:
  1812                           	opt stack 24
  1813                           
  1814                           ;Function.c: 163: int x;
  1815                           ;Function.c: 164: for (x = 0; x < wait; x++) {
  1816                           
  1817                           ;incstack = 0
  1818  000C64  0E00               	movlw	0
  1819  000C66  6E1F               	movwf	Delay@x+1,c
  1820  000C68  0E00               	movlw	0
  1821  000C6A  6E1E               	movwf	Delay@x,c
  1822  000C6C  D00A               	goto	l483
  1823  000C6E                     l1732:
  1824                           
  1825                           ;Function.c: 165: _delay((unsigned long)((1)*(16000000/4000.0)));
  1826  000C6E  0E06               	movlw	6
  1827  000C70  6E1D               	movwf	??_Delay& (0+255),c
  1828  000C72  0E30               	movlw	48
  1829  000C74                     u1607:
  1830  000C74  2EE8               	decfsz	wreg,f,c
  1831  000C76  D7FE               	goto	u1607
  1832  000C78  2E1D               	decfsz	??_Delay& (0+255),f,c
  1833  000C7A  D7FC               	goto	u1607
  1834  000C7C  D000               	nop2	
  1835  000C7E  4A1E               	infsnz	Delay@x,f,c
  1836  000C80  2A1F               	incf	Delay@x+1,f,c
  1837  000C82                     l483:
  1838  000C82  501B               	movf	Delay@wait,w,c
  1839  000C84  5C1E               	subwf	Delay@x,w,c
  1840  000C86  501F               	movf	Delay@x+1,w,c
  1841  000C88  0A80               	xorlw	128
  1842  000C8A  6E1D               	movwf	??_Delay& (0+255),c
  1843  000C8C  501C               	movf	Delay@wait+1,w,c
  1844  000C8E  0A80               	xorlw	128
  1845  000C90  581D               	subwfb	??_Delay& (0+255),w,c
  1846  000C92  B0D8               	btfsc	status,0,c
  1847  000C94  0012               	return	
  1848  000C96  D7EB               	goto	l1732
  1849  000C98                     __end_of_Delay:
  1850                           	opt stack 0
  1851                           tblptru	equ	0xFF8
  1852                           tblptrh	equ	0xFF7
  1853                           tblptrl	equ	0xFF6
  1854                           tablat	equ	0xFF5
  1855                           postinc0	equ	0xFEE
  1856                           wreg	equ	0xFE8
  1857                           indf2	equ	0xFDF
  1858                           postinc2	equ	0xFDE
  1859                           postdec2	equ	0xFDD
  1860                           plusw2	equ	0xFDB
  1861                           fsr2h	equ	0xFDA
  1862                           fsr2l	equ	0xFD9
  1863                           status	equ	0xFD8
  1864                           
  1865 ;; *************** function _receiveData *****************
  1866 ;; Defined at:
  1867 ;;		line 79 in file "FastTransfer.c"
  1868 ;; Parameters:    Size  Location     Type
  1869 ;;		None
  1870 ;; Auto vars:     Size  Location     Type
  1871 ;;  holder          3   20[BANK0 ] unsigned char [3]
  1872 ;;  crcHolder       1   16[BANK0 ] unsigned char 
  1873 ;;  holder          3   17[BANK0 ] unsigned char [3]
  1874 ;;  crcHolder       1   15[BANK0 ] unsigned char 
  1875 ;;  u               2   23[BANK0 ] int 
  1876 ;;  r               2   25[BANK0 ] int 
  1877 ;; Return value:  Size  Location     Type
  1878 ;;                  1    wreg      unsigned char 
  1879 ;; Registers used:
  1880 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1886 ;;      Params:         0       0       0       0       0       0       0
  1887 ;;      Locals:         0      12       0       0       0       0       0
  1888 ;;      Temps:          0       6       0       0       0       0       0
  1889 ;;      Totals:         0      18       0       0       0       0       0
  1890 ;;Total ram usage:       18 bytes
  1891 ;; Hardware stack levels used:    1
  1892 ;; Hardware stack levels required when called:    6
  1893 ;; This function calls:
  1894 ;;		_CRC8
  1895 ;;		_CRCcheck
  1896 ;; This function is called by:
  1897 ;;		_updateComms
  1898 ;; This function uses a non-reentrant model
  1899 ;;
  1900                           
  1901                           	psect	text12
  1902  0000A4                     __ptext12:
  1903                           	opt stack 0
  1904  0000A4                     _receiveData:
  1905                           	opt stack 23
  1906                           
  1907                           ;FastTransfer.c: 84: if (serial_available() > 4) {
  1908                           
  1909                           ;incstack = 0
  1910  0000A4  D020               	goto	l2256
  1911  0000A6                     l2246:
  1912                           
  1913                           ; BSR set to: 0
  1914  0000A6  0100               	movlb	0	; () banked
  1915  0000A8  4BBA               	infsnz	receiveData@u& (0+255),f,b
  1916  0000AA  2BBB               	incf	(receiveData@u+1)& (0+255),f,b
  1917                           
  1918                           ; BSR set to: 0
  1919                           
  1920                           ; BSR set to: 0
  1921  0000AC  5041               	movf	_rx_len,w,c
  1922  0000AE  0100               	movlb	0	; () banked
  1923  0000B0  6FAC               	movwf	??_receiveData& (0+255),b
  1924  0000B2  6BAD               	clrf	(??_receiveData+1)& (0+255),b
  1925  0000B4  0E01               	movlw	1
  1926  0000B6  0100               	movlb	0	; () banked
  1927  0000B8  27AC               	addwf	??_receiveData& (0+255),f,b
  1928  0000BA  0E00               	movlw	0
  1929  0000BC  23AD               	addwfc	(??_receiveData+1)& (0+255),f,b
  1930  0000BE  0100               	movlb	0	; () banked
  1931  0000C0  51BA               	movf	receiveData@u& (0+255),w,b
  1932  0000C2  0100               	movlb	0	; () banked
  1933  0000C4  5DAC               	subwf	??_receiveData& (0+255),w,b
  1934  0000C6  0100               	movlb	0	; () banked
  1935  0000C8  51AD               	movf	(??_receiveData+1)& (0+255),w,b
  1936  0000CA  0A80               	xorlw	128
  1937  0000CC  0100               	movlb	0	; () banked
  1938  0000CE  6FAE               	movwf	(??_receiveData+2)& (0+255),b
  1939  0000D0  0100               	movlb	0	; () banked
  1940  0000D2  51BB               	movf	(receiveData@u+1)& (0+255),w,b
  1941  0000D4  0A80               	xorlw	128
  1942  0000D6  0100               	movlb	0	; () banked
  1943  0000D8  59AE               	subwfb	(??_receiveData+2)& (0+255),w,b
  1944  0000DA  B0D8               	btfsc	status,0,c
  1945  0000DC  D7E4               	goto	l2246
  1946                           
  1947                           ; BSR set to: 0
  1948                           ;FastTransfer.c: 107: }
  1949                           ;FastTransfer.c: 108: rx_len = 0;
  1950                           
  1951                           ; BSR set to: 0
  1952  0000DE  0E00               	movlw	0
  1953  0000E0  6E41               	movwf	_rx_len,c
  1954                           
  1955                           ; BSR set to: 0
  1956                           ;FastTransfer.c: 109: return 0;
  1957  0000E2  0E00               	movlw	0
  1958                           
  1959                           ; BSR set to: 0
  1960  0000E4  0012               	return	
  1961  0000E6                     l2256:
  1962                           
  1963                           ;FastTransfer.c: 110: }
  1964                           ;FastTransfer.c: 112: }
  1965                           ;FastTransfer.c: 113: }
  1966                           ;FastTransfer.c: 114: }
  1967                           ;FastTransfer.c: 117: if (rx_len != 0) {
  1968  0000E6  5041               	movf	_rx_len,w,c
  1969  0000E8  B4D8               	btfsc	status,2,c
  1970  0000EA  D12B               	goto	l2338
  1971                           
  1972                           ;FastTransfer.c: 120: if (rx_array_inx == 0) {
  1973  0000EC  5040               	movf	_rx_array_inx,w,c
  1974  0000EE  B4D8               	btfsc	status,2,c
  1975  0000F0                     l164:
  1976  0000F0  D7FF               	goto	l164
  1977                           
  1978                           ;FastTransfer.c: 133: }
  1979                           ;FastTransfer.c: 135: if (rx_len == (rx_array_inx - 1)) {
  1980                           
  1981                           ;FastTransfer.c: 132: rx_buffer[rx_array_inx++] = serial_read();
  1982                           
  1983                           ;FastTransfer.c: 127: }
  1984                           ;FastTransfer.c: 128: }
  1985                           ;FastTransfer.c: 131: while (serial_available() && rx_array_inx <= rx_len) {
  1986                           
  1987                           ;FastTransfer.c: 126: return 0;
  1988                           
  1989                           ;FastTransfer.c: 125: rx_array_inx = 0;
  1990                           
  1991                           ;FastTransfer.c: 124: rx_len = 0;
  1992                           
  1993                           ;FastTransfer.c: 123: CRCcheck();
  1994                           
  1995                           ;FastTransfer.c: 122: if (255 == serial_peek()) {
  1996  0000F2  5041               	movf	_rx_len,w,c
  1997  0000F4  0100               	movlb	0	; () banked
  1998  0000F6  6FAC               	movwf	??_receiveData& (0+255),b
  1999  0000F8  6BAD               	clrf	(??_receiveData+1)& (0+255),b
  2000  0000FA  0EFF               	movlw	255
  2001  0000FC  0100               	movlb	0	; () banked
  2002  0000FE  6FAE               	movwf	(??_receiveData+2)& (0+255),b
  2003  000100  0EFF               	movlw	255
  2004  000102  0100               	movlb	0	; () banked
  2005  000104  6FAF               	movwf	(??_receiveData+3)& (0+255),b
  2006  000106  5040               	movf	_rx_array_inx,w,c
  2007  000108  0100               	movlb	0	; () banked
  2008  00010A  6FB0               	movwf	(??_receiveData+4)& (0+255),b
  2009  00010C  6BB1               	clrf	(??_receiveData+5)& (0+255),b
  2010  00010E  0100               	movlb	0	; () banked
  2011  000110  51AE               	movf	(??_receiveData+2)& (0+255),w,b
  2012  000112  0100               	movlb	0	; () banked
  2013  000114  27B0               	addwf	(??_receiveData+4)& (0+255),f,b
  2014  000116  0100               	movlb	0	; () banked
  2015  000118  51AF               	movf	(??_receiveData+3)& (0+255),w,b
  2016  00011A  0100               	movlb	0	; () banked
  2017  00011C  23B1               	addwfc	(??_receiveData+5)& (0+255),f,b
  2018  00011E  0100               	movlb	0	; () banked
  2019  000120  51AC               	movf	??_receiveData& (0+255),w,b
  2020  000122  0100               	movlb	0	; () banked
  2021  000124  19B0               	xorwf	(??_receiveData+4)& (0+255),w,b
  2022  000126  E105               	bnz	u1471
  2023  000128  0100               	movlb	0	; () banked
  2024  00012A  51AD               	movf	(??_receiveData+1)& (0+255),w,b
  2025  00012C  0100               	movlb	0	; () banked
  2026  00012E  19B1               	xorwf	(??_receiveData+5)& (0+255),w,b
  2027  000130  A4D8               	btfss	status,2,c
  2028  000132                     u1471:
  2029  000132  D107               	goto	l2338
  2030                           
  2031                           ; BSR set to: 0
  2032                           ;FastTransfer.c: 138: calc_CS = CRC8(rx_buffer, rx_len);
  2033  000134  0E00               	movlw	low _rx_buffer
  2034  000136  6E1B               	movwf	CRC8@data,c
  2035  000138  0E04               	movlw	high _rx_buffer
  2036  00013A  6E1C               	movwf	CRC8@data+1,c
  2037  00013C  C041  F01D         	movff	_rx_len,CRC8@len
  2038  000140  EC0D  F006         	call	_CRC8	;wreg free
  2039  000144  6E3B               	movwf	_calc_CS,c
  2040                           
  2041                           ;FastTransfer.c: 142: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2042  000146  0EFF               	movlw	255
  2043  000148  0100               	movlb	0	; () banked
  2044  00014A  6FAC               	movwf	??_receiveData& (0+255),b
  2045  00014C  0EFF               	movlw	255
  2046  00014E  0100               	movlb	0	; () banked
  2047  000150  6FAD               	movwf	(??_receiveData+1)& (0+255),b
  2048  000152  5040               	movf	_rx_array_inx,w,c
  2049  000154  0100               	movlb	0	; () banked
  2050  000156  6FAE               	movwf	(??_receiveData+2)& (0+255),b
  2051  000158  6BAF               	clrf	(??_receiveData+3)& (0+255),b
  2052  00015A  0100               	movlb	0	; () banked
  2053  00015C  51AC               	movf	??_receiveData& (0+255),w,b
  2054  00015E  0100               	movlb	0	; () banked
  2055  000160  27AE               	addwf	(??_receiveData+2)& (0+255),f,b
  2056  000162  0100               	movlb	0	; () banked
  2057  000164  51AD               	movf	(??_receiveData+1)& (0+255),w,b
  2058  000166  0100               	movlb	0	; () banked
  2059  000168  23AF               	addwfc	(??_receiveData+3)& (0+255),f,b
  2060  00016A  0E00               	movlw	low _rx_buffer
  2061  00016C  0100               	movlb	0	; () banked
  2062  00016E  25AE               	addwf	(??_receiveData+2)& (0+255),w,b
  2063  000170  6ED9               	movwf	fsr2l,c
  2064  000172  0E04               	movlw	high _rx_buffer
  2065  000174  0100               	movlb	0	; () banked
  2066  000176  21AF               	addwfc	(??_receiveData+3)& (0+255),w,b
  2067  000178  6EDA               	movwf	fsr2h,c
  2068  00017A  503B               	movf	_calc_CS,w,c
  2069  00017C  18DE               	xorwf	postinc2,w,c
  2070  00017E  A4D8               	btfss	status,2,c
  2071  000180  D0A9               	goto	l2318
  2072                           
  2073                           ; BSR set to: 0
  2074                           ;FastTransfer.c: 145: int r;
  2075                           ;FastTransfer.c: 146: for (r = 0; r < rx_len; r = r + 3) {
  2076  000182  0E00               	movlw	0
  2077  000184  0100               	movlb	0	; () banked
  2078  000186  6FBD               	movwf	(receiveData@r+1)& (0+255),b
  2079  000188  0E00               	movlw	0
  2080  00018A  6FBC               	movwf	receiveData@r& (0+255),b
  2081  00018C  D05A               	goto	l2296
  2082  00018E                     l2286:
  2083                           
  2084                           ; BSR set to: 0
  2085                           ;FastTransfer.c: 147: if (rx_buffer[r] < maxDataAddress) {
  2086  00018E  0E00               	movlw	low _rx_buffer
  2087  000190  0100               	movlb	0	; () banked
  2088  000192  25BC               	addwf	receiveData@r& (0+255),w,b
  2089  000194  6ED9               	movwf	fsr2l,c
  2090  000196  0E04               	movlw	high _rx_buffer
  2091  000198  0100               	movlb	0	; () banked
  2092  00019A  21BD               	addwfc	(receiveData@r+1)& (0+255),w,b
  2093  00019C  6EDA               	movwf	fsr2h,c
  2094  00019E  503C               	movf	_maxDataAddress,w,c
  2095  0001A0  5CDE               	subwf	postinc2,w,c
  2096  0001A2  B0D8               	btfsc	status,0,c
  2097  0001A4  D041               	goto	l2292
  2098                           
  2099                           ; BSR set to: 0
  2100                           ;FastTransfer.c: 148: group.parts[0] = rx_buffer[r + 1];
  2101  0001A6  0E01               	movlw	1
  2102  0001A8  0100               	movlb	0	; () banked
  2103  0001AA  25BC               	addwf	receiveData@r& (0+255),w,b
  2104  0001AC  0100               	movlb	0	; () banked
  2105  0001AE  6FAC               	movwf	??_receiveData& (0+255),b
  2106  0001B0  0E00               	movlw	0
  2107  0001B2  0100               	movlb	0	; () banked
  2108  0001B4  21BD               	addwfc	(receiveData@r+1)& (0+255),w,b
  2109  0001B6  0100               	movlb	0	; () banked
  2110  0001B8  6FAD               	movwf	(??_receiveData+1)& (0+255),b
  2111  0001BA  0E00               	movlw	low _rx_buffer
  2112  0001BC  0100               	movlb	0	; () banked
  2113  0001BE  25AC               	addwf	??_receiveData& (0+255),w,b
  2114  0001C0  6ED9               	movwf	fsr2l,c
  2115  0001C2  0E04               	movlw	high _rx_buffer
  2116  0001C4  0100               	movlb	0	; () banked
  2117  0001C6  21AD               	addwfc	(??_receiveData+1)& (0+255),w,b
  2118  0001C8  6EDA               	movwf	fsr2h,c
  2119  0001CA  50DF               	movf	indf2,w,c
  2120  0001CC  6E2A               	movwf	_group,c
  2121                           
  2122                           ;FastTransfer.c: 149: group.parts[1] = rx_buffer[r + 2];
  2123  0001CE  0E02               	movlw	2
  2124  0001D0  0100               	movlb	0	; () banked
  2125  0001D2  25BC               	addwf	receiveData@r& (0+255),w,b
  2126  0001D4  0100               	movlb	0	; () banked
  2127  0001D6  6FAC               	movwf	??_receiveData& (0+255),b
  2128  0001D8  0E00               	movlw	0
  2129  0001DA  0100               	movlb	0	; () banked
  2130  0001DC  21BD               	addwfc	(receiveData@r+1)& (0+255),w,b
  2131  0001DE  0100               	movlb	0	; () banked
  2132  0001E0  6FAD               	movwf	(??_receiveData+1)& (0+255),b
  2133  0001E2  0E00               	movlw	low _rx_buffer
  2134  0001E4  0100               	movlb	0	; () banked
  2135  0001E6  25AC               	addwf	??_receiveData& (0+255),w,b
  2136  0001E8  6ED9               	movwf	fsr2l,c
  2137  0001EA  0E04               	movlw	high _rx_buffer
  2138  0001EC  0100               	movlb	0	; () banked
  2139  0001EE  21AD               	addwfc	(??_receiveData+1)& (0+255),w,b
  2140  0001F0  6EDA               	movwf	fsr2h,c
  2141  0001F2  50DF               	movf	indf2,w,c
  2142  0001F4  6E2B               	movwf	_group+1,c
  2143                           
  2144                           ; BSR set to: 0
  2145                           ;FastTransfer.c: 150: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2146  0001F6  0E00               	movlw	low _rx_buffer
  2147  0001F8  0100               	movlb	0	; () banked
  2148  0001FA  25BC               	addwf	receiveData@r& (0+255),w,b
  2149  0001FC  6ED9               	movwf	fsr2l,c
  2150  0001FE  0E04               	movlw	high _rx_buffer
  2151  000200  0100               	movlb	0	; () banked
  2152  000202  21BD               	addwfc	(receiveData@r+1)& (0+255),w,b
  2153  000204  6EDA               	movwf	fsr2h,c
  2154  000206  50DF               	movf	indf2,w,c
  2155  000208  0100               	movlb	0	; () banked
  2156  00020A  6FAC               	movwf	??_receiveData& (0+255),b
  2157  00020C  0100               	movlb	0	; () banked
  2158  00020E  51AC               	movf	??_receiveData& (0+255),w,b
  2159  000210  0D02               	mullw	2
  2160  000212  50F3               	movf	prodl,w,c
  2161  000214  242C               	addwf	_receiveArrayAddress,w,c
  2162  000216  6ED9               	movwf	fsr2l,c
  2163  000218  50F4               	movf	prodh,w,c
  2164  00021A  202D               	addwfc	_receiveArrayAddress+1,w,c
  2165  00021C  6EDA               	movwf	fsr2h,c
  2166  00021E  C02A  FFDE         	movff	_group,postinc2
  2167  000222  C02B  FFDD         	movff	_group+1,postdec2
  2168                           
  2169                           ;FastTransfer.c: 151: } else {
  2170  000226  D003               	goto	l2294
  2171  000228                     l2292:
  2172                           
  2173                           ; BSR set to: 0
  2174                           ;FastTransfer.c: 152: dataAdressErrorCounter++;
  2175  000228  0100               	movlb	0	; () banked
  2176  00022A  4B90               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  2177  00022C  2B91               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  2178  00022E                     l2294:
  2179                           
  2180                           ; BSR set to: 0
  2181  00022E  0E03               	movlw	3
  2182  000230  0100               	movlb	0	; () banked
  2183  000232  25BC               	addwf	receiveData@r& (0+255),w,b
  2184  000234  0100               	movlb	0	; () banked
  2185  000236  6FBC               	movwf	receiveData@r& (0+255),b
  2186  000238  0E00               	movlw	0
  2187  00023A  0100               	movlb	0	; () banked
  2188  00023C  21BD               	addwfc	(receiveData@r+1)& (0+255),w,b
  2189  00023E  0100               	movlb	0	; () banked
  2190  000240  6FBD               	movwf	(receiveData@r+1)& (0+255),b
  2191  000242                     l2296:
  2192                           
  2193                           ; BSR set to: 0
  2194  000242  5041               	movf	_rx_len,w,c
  2195  000244  0100               	movlb	0	; () banked
  2196  000246  6FAC               	movwf	??_receiveData& (0+255),b
  2197  000248  6BAD               	clrf	(??_receiveData+1)& (0+255),b
  2198  00024A  0100               	movlb	0	; () banked
  2199  00024C  51AC               	movf	??_receiveData& (0+255),w,b
  2200  00024E  0100               	movlb	0	; () banked
  2201  000250  5DBC               	subwf	receiveData@r& (0+255),w,b
  2202  000252  0100               	movlb	0	; () banked
  2203  000254  51BD               	movf	(receiveData@r+1)& (0+255),w,b
  2204  000256  0A80               	xorlw	128
  2205  000258  0100               	movlb	0	; () banked
  2206  00025A  6FAE               	movwf	(??_receiveData+2)& (0+255),b
  2207  00025C  0100               	movlb	0	; () banked
  2208  00025E  51AD               	movf	(??_receiveData+1)& (0+255),w,b
  2209  000260  0A80               	xorlw	128
  2210  000262  0100               	movlb	0	; () banked
  2211  000264  59AE               	subwfb	(??_receiveData+2)& (0+255),w,b
  2212  000266  A0D8               	btfss	status,0,c
  2213  000268  D792               	goto	l2286
  2214                           
  2215                           ; BSR set to: 0
  2216                           ;FastTransfer.c: 153: }
  2217                           ;FastTransfer.c: 154: }
  2218                           ;FastTransfer.c: 157: if (AKNAKsend) {
  2219                           
  2220                           ; BSR set to: 0
  2221  00026A  5038               	movf	_AKNAKsend,w,c
  2222  00026C  B4D8               	btfsc	status,2,c
  2223  00026E  D02C               	goto	l2308
  2224                           
  2225                           ; BSR set to: 0
  2226                           ;FastTransfer.c: 158: unsigned char holder[3];
  2227                           ;FastTransfer.c: 159: holder[0] = 255;
  2228  000270  0100               	movlb	0	; () banked
  2229  000272  69B4               	setf	receiveData@holder& (0+255),b
  2230                           
  2231                           ; BSR set to: 0
  2232                           ;FastTransfer.c: 160: holder[1] = 1;
  2233  000274  0E01               	movlw	1
  2234  000276  0100               	movlb	0	; () banked
  2235  000278  6FB5               	movwf	(receiveData@holder+1)& (0+255),b
  2236                           
  2237                           ; BSR set to: 0
  2238                           ;FastTransfer.c: 161: holder[2] = rx_buffer[rx_array_inx - 1];
  2239  00027A  0EFF               	movlw	255
  2240  00027C  0100               	movlb	0	; () banked
  2241  00027E  6FAC               	movwf	??_receiveData& (0+255),b
  2242  000280  0EFF               	movlw	255
  2243  000282  0100               	movlb	0	; () banked
  2244  000284  6FAD               	movwf	(??_receiveData+1)& (0+255),b
  2245  000286  5040               	movf	_rx_array_inx,w,c
  2246  000288  0100               	movlb	0	; () banked
  2247  00028A  6FAE               	movwf	(??_receiveData+2)& (0+255),b
  2248  00028C  6BAF               	clrf	(??_receiveData+3)& (0+255),b
  2249  00028E  0100               	movlb	0	; () banked
  2250  000290  51AC               	movf	??_receiveData& (0+255),w,b
  2251  000292  0100               	movlb	0	; () banked
  2252  000294  27AE               	addwf	(??_receiveData+2)& (0+255),f,b
  2253  000296  0100               	movlb	0	; () banked
  2254  000298  51AD               	movf	(??_receiveData+1)& (0+255),w,b
  2255  00029A  0100               	movlb	0	; () banked
  2256  00029C  23AF               	addwfc	(??_receiveData+3)& (0+255),f,b
  2257  00029E  0E00               	movlw	low _rx_buffer
  2258  0002A0  0100               	movlb	0	; () banked
  2259  0002A2  25AE               	addwf	(??_receiveData+2)& (0+255),w,b
  2260  0002A4  6ED9               	movwf	fsr2l,c
  2261  0002A6  0E04               	movlw	high _rx_buffer
  2262  0002A8  0100               	movlb	0	; () banked
  2263  0002AA  21AF               	addwfc	(??_receiveData+3)& (0+255),w,b
  2264  0002AC  6EDA               	movwf	fsr2h,c
  2265  0002AE  50DF               	movf	indf2,w,c
  2266  0002B0  0100               	movlb	0	; () banked
  2267  0002B2  6FB6               	movwf	(receiveData@holder+2)& (0+255),b
  2268                           
  2269                           ; BSR set to: 0
  2270                           ;FastTransfer.c: 171: serial_write(crcHolder);
  2271  0002B4  0EB4               	movlw	low receiveData@holder
  2272  0002B6  6E1B               	movwf	CRC8@data,c
  2273  0002B8  0E00               	movlw	high receiveData@holder
  2274  0002BA  6E1C               	movwf	CRC8@data+1,c
  2275  0002BC  0E03               	movlw	3
  2276  0002BE  6E1D               	movwf	CRC8@len,c
  2277  0002C0  EC0D  F006         	call	_CRC8	;wreg free
  2278  0002C4  0100               	movlb	0	; () banked
  2279  0002C6  6FB2               	movwf	receiveData@crcHolder& (0+255),b
  2280  0002C8                     l2308:
  2281                           
  2282                           ; BSR set to: 0
  2283                           ;FastTransfer.c: 172: }
  2284                           ;FastTransfer.c: 176: rx_len = 0;
  2285  0002C8  0E00               	movlw	0
  2286  0002CA  6E41               	movwf	_rx_len,c
  2287                           
  2288                           ; BSR set to: 0
  2289                           ;FastTransfer.c: 177: rx_array_inx = 0;
  2290  0002CC  0E00               	movlw	0
  2291  0002CE  6E40               	movwf	_rx_array_inx,c
  2292                           
  2293                           ; BSR set to: 0
  2294                           ;FastTransfer.c: 178: return 1;
  2295  0002D0  0E01               	movlw	1
  2296                           
  2297                           ; BSR set to: 0
  2298  0002D2  0012               	return	
  2299  0002D4                     l2318:
  2300                           
  2301                           ; BSR set to: 0
  2302                           ;FastTransfer.c: 180: crcErrorCounter++;
  2303  0002D4  4A28               	infsnz	_crcErrorCounter,f,c
  2304  0002D6  2A29               	incf	_crcErrorCounter+1,f,c
  2305                           
  2306                           ; BSR set to: 0
  2307                           ;FastTransfer.c: 182: if (AKNAKsend) {
  2308  0002D8  5038               	movf	_AKNAKsend,w,c
  2309  0002DA  B4D8               	btfsc	status,2,c
  2310  0002DC  D02C               	goto	l2330
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;FastTransfer.c: 183: unsigned char holder[3];
  2314                           ;FastTransfer.c: 184: holder[0] = 255;
  2315  0002DE  0100               	movlb	0	; () banked
  2316  0002E0  69B7               	setf	receiveData@holder_317& (0+255),b
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;FastTransfer.c: 185: holder[1] = 2;
  2320  0002E2  0E02               	movlw	2
  2321  0002E4  0100               	movlb	0	; () banked
  2322  0002E6  6FB8               	movwf	(receiveData@holder_317+1)& (0+255),b
  2323                           
  2324                           ; BSR set to: 0
  2325                           ;FastTransfer.c: 186: holder[2] = rx_buffer[rx_array_inx - 1];
  2326  0002E8  0EFF               	movlw	255
  2327  0002EA  0100               	movlb	0	; () banked
  2328  0002EC  6FAC               	movwf	??_receiveData& (0+255),b
  2329  0002EE  0EFF               	movlw	255
  2330  0002F0  0100               	movlb	0	; () banked
  2331  0002F2  6FAD               	movwf	(??_receiveData+1)& (0+255),b
  2332  0002F4  5040               	movf	_rx_array_inx,w,c
  2333  0002F6  0100               	movlb	0	; () banked
  2334  0002F8  6FAE               	movwf	(??_receiveData+2)& (0+255),b
  2335  0002FA  6BAF               	clrf	(??_receiveData+3)& (0+255),b
  2336  0002FC  0100               	movlb	0	; () banked
  2337  0002FE  51AC               	movf	??_receiveData& (0+255),w,b
  2338  000300  0100               	movlb	0	; () banked
  2339  000302  27AE               	addwf	(??_receiveData+2)& (0+255),f,b
  2340  000304  0100               	movlb	0	; () banked
  2341  000306  51AD               	movf	(??_receiveData+1)& (0+255),w,b
  2342  000308  0100               	movlb	0	; () banked
  2343  00030A  23AF               	addwfc	(??_receiveData+3)& (0+255),f,b
  2344  00030C  0E00               	movlw	low _rx_buffer
  2345  00030E  0100               	movlb	0	; () banked
  2346  000310  25AE               	addwf	(??_receiveData+2)& (0+255),w,b
  2347  000312  6ED9               	movwf	fsr2l,c
  2348  000314  0E04               	movlw	high _rx_buffer
  2349  000316  0100               	movlb	0	; () banked
  2350  000318  21AF               	addwfc	(??_receiveData+3)& (0+255),w,b
  2351  00031A  6EDA               	movwf	fsr2h,c
  2352  00031C  50DF               	movf	indf2,w,c
  2353  00031E  0100               	movlb	0	; () banked
  2354  000320  6FB9               	movwf	(receiveData@holder_317+2)& (0+255),b
  2355                           
  2356                           ; BSR set to: 0
  2357                           ;FastTransfer.c: 196: serial_write(crcHolder);
  2358  000322  0EB7               	movlw	low receiveData@holder_317
  2359  000324  6E1B               	movwf	CRC8@data,c
  2360  000326  0E00               	movlw	high receiveData@holder_317
  2361  000328  6E1C               	movwf	CRC8@data+1,c
  2362  00032A  0E03               	movlw	3
  2363  00032C  6E1D               	movwf	CRC8@len,c
  2364  00032E  EC0D  F006         	call	_CRC8	;wreg free
  2365  000332  0100               	movlb	0	; () banked
  2366  000334  6FB3               	movwf	receiveData@crcHolder_318& (0+255),b
  2367  000336                     l2330:
  2368                           
  2369                           ; BSR set to: 0
  2370                           ;FastTransfer.c: 197: }
  2371                           ;FastTransfer.c: 200: rx_len = 0;
  2372  000336  0E00               	movlw	0
  2373  000338  6E41               	movwf	_rx_len,c
  2374                           
  2375                           ; BSR set to: 0
  2376                           ;FastTransfer.c: 201: rx_array_inx = 0;
  2377  00033A  0E00               	movlw	0
  2378  00033C  6E40               	movwf	_rx_array_inx,c
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;FastTransfer.c: 202: return 0;
  2382  00033E  0E00               	movlw	0
  2383                           
  2384                           ; BSR set to: 0
  2385  000340  0012               	return	
  2386  000342                     l2338:
  2387                           
  2388                           ;FastTransfer.c: 203: }
  2389                           ;FastTransfer.c: 204: }
  2390                           ;FastTransfer.c: 205: }
  2391                           ;FastTransfer.c: 208: return 0;
  2392  000342  0E00               	movlw	0
  2393  000344  0012               	return	
  2394  000346                     __end_of_receiveData:
  2395                           	opt stack 0
  2396                           tblptru	equ	0xFF8
  2397                           tblptrh	equ	0xFF7
  2398                           tblptrl	equ	0xFF6
  2399                           tablat	equ	0xFF5
  2400                           prodh	equ	0xFF4
  2401                           prodl	equ	0xFF3
  2402                           postinc0	equ	0xFEE
  2403                           wreg	equ	0xFE8
  2404                           indf2	equ	0xFDF
  2405                           postinc2	equ	0xFDE
  2406                           postdec2	equ	0xFDD
  2407                           plusw2	equ	0xFDB
  2408                           fsr2h	equ	0xFDA
  2409                           fsr2l	equ	0xFD9
  2410                           status	equ	0xFD8
  2411                           
  2412 ;; *************** function _CRCcheck *****************
  2413 ;; Defined at:
  2414 ;;		line 371 in file "FastTransfer.c"
  2415 ;; Parameters:    Size  Location     Type
  2416 ;;		None
  2417 ;; Auto vars:     Size  Location     Type
  2418 ;;  rt              2    7[BANK0 ] int 
  2419 ;;  arrayHolder     3    4[BANK0 ] unsigned char [3]
  2420 ;;  calculatedCR    1    3[BANK0 ] unsigned char 
  2421 ;;  SentCRC         1    2[BANK0 ] unsigned char 
  2422 ;; Return value:  Size  Location     Type
  2423 ;;                  1    wreg      void 
  2424 ;; Registers used:
  2425 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2426 ;; Tracked objects:
  2427 ;;		On entry : 0/0
  2428 ;;		On exit  : 0/0
  2429 ;;		Unchanged: 0/0
  2430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2431 ;;      Params:         0       0       0       0       0       0       0
  2432 ;;      Locals:         0       7       0       0       0       0       0
  2433 ;;      Temps:          0       0       0       0       0       0       0
  2434 ;;      Totals:         0       7       0       0       0       0       0
  2435 ;;Total ram usage:        7 bytes
  2436 ;; Hardware stack levels used:    1
  2437 ;; Hardware stack levels required when called:    5
  2438 ;; This function calls:
  2439 ;;		_CRC8
  2440 ;;		_crcBufS_get
  2441 ;;		_crcBufS_status_put
  2442 ;; This function is called by:
  2443 ;;		_receiveData
  2444 ;; This function uses a non-reentrant model
  2445 ;;
  2446                           
  2447                           	psect	text13
  2448  00094C                     __ptext13:
  2449                           	opt stack 0
  2450  00094C                     _CRCcheck:
  2451                           	opt stack 23
  2452  00094C                     l240:
  2453  00094C  D7FF               	goto	l240
  2454  00094E                     l2202:
  2455                           
  2456                           ; BSR set to: 0
  2457  00094E  0100               	movlb	0	; () banked
  2458  000950  BFAB               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  2459  000952  D008               	goto	l2206
  2460  000954  0100               	movlb	0	; () banked
  2461  000956  51AB               	movf	(CRCcheck@rt+1)& (0+255),w,b
  2462  000958  E143               	bnz	l251
  2463  00095A  0E05               	movlw	5
  2464  00095C  0100               	movlb	0	; () banked
  2465  00095E  5DAA               	subwf	CRCcheck@rt& (0+255),w,b
  2466  000960  B0D8               	btfsc	status,0,c
  2467  000962  0012               	return	
  2468  000964                     l2206:
  2469                           
  2470                           ; BSR set to: 0
  2471                           ;FastTransfer.c: 387: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  2472  000964  0E92               	movlw	low _crc_buffer
  2473  000966  6E1B               	movwf	crcBufS_get@_this,c
  2474  000968  0E00               	movlw	high _crc_buffer
  2475  00096A  6E1C               	movwf	crcBufS_get@_this+1,c
  2476  00096C  C0AA  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  2477  000970  0E00               	movlw	0
  2478  000972  6E1E               	movwf	crcBufS_get@space,c
  2479  000974  ECEA  F002         	call	_crcBufS_get	;wreg free
  2480  000978  183E               	xorwf	_returnAddress,w,c
  2481  00097A  A4D8               	btfss	status,2,c
  2482  00097C  D02D               	goto	l2220
  2483                           
  2484                           ;FastTransfer.c: 388: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  2485  00097E  0E92               	movlw	low _crc_buffer
  2486  000980  6E1B               	movwf	crcBufS_get@_this,c
  2487  000982  0E00               	movlw	high _crc_buffer
  2488  000984  6E1C               	movwf	crcBufS_get@_this+1,c
  2489  000986  C0AA  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  2490  00098A  0E01               	movlw	1
  2491  00098C  6E1E               	movwf	crcBufS_get@space,c
  2492  00098E  ECEA  F002         	call	_crcBufS_get	;wreg free
  2493  000992  0100               	movlb	0	; () banked
  2494  000994  19A9               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  2495  000996  A4D8               	btfss	status,2,c
  2496  000998  D01F               	goto	l2220
  2497                           
  2498                           ; BSR set to: 0
  2499                           ;FastTransfer.c: 389: if (arrayHolder[1] == 1) {
  2500  00099A  0100               	movlb	0	; () banked
  2501  00099C  05A8               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  2502  00099E  A4D8               	btfss	status,2,c
  2503  0009A0  D00B               	goto	l2216
  2504                           
  2505                           ; BSR set to: 0
  2506                           ;FastTransfer.c: 390: crcBufS_status_put(&crc_buffer, rt, 1);
  2507  0009A2  0E92               	movlw	low _crc_buffer
  2508  0009A4  6E1B               	movwf	crcBufS_status_put@_this,c
  2509  0009A6  0E00               	movlw	high _crc_buffer
  2510  0009A8  6E1C               	movwf	crcBufS_status_put@_this+1,c
  2511  0009AA  C0AA  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  2512  0009AE  0E01               	movlw	1
  2513  0009B0  6E1E               	movwf	crcBufS_status_put@status,c
  2514  0009B2  EC3B  F004         	call	_crcBufS_status_put	;wreg free
  2515                           
  2516                           ;FastTransfer.c: 391: break;
  2517  0009B6  0012               	return	
  2518  0009B8                     l2216:
  2519  0009B8  0E02               	movlw	2
  2520  0009BA  0100               	movlb	0	; () banked
  2521  0009BC  19A8               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  2522  0009BE  A4D8               	btfss	status,2,c
  2523  0009C0  D00B               	goto	l2220
  2524                           
  2525                           ; BSR set to: 0
  2526                           ;FastTransfer.c: 393: crcBufS_status_put(&crc_buffer, rt, 2);
  2527  0009C2  0E92               	movlw	low _crc_buffer
  2528  0009C4  6E1B               	movwf	crcBufS_status_put@_this,c
  2529  0009C6  0E00               	movlw	high _crc_buffer
  2530  0009C8  6E1C               	movwf	crcBufS_status_put@_this+1,c
  2531  0009CA  C0AA  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  2532  0009CE  0E02               	movlw	2
  2533  0009D0  6E1E               	movwf	crcBufS_status_put@status,c
  2534  0009D2  EC3B  F004         	call	_crcBufS_status_put	;wreg free
  2535                           
  2536                           ;FastTransfer.c: 394: break;
  2537  0009D6  0012               	return	
  2538  0009D8                     l2220:
  2539  0009D8  0100               	movlb	0	; () banked
  2540  0009DA  4BAA               	infsnz	CRCcheck@rt& (0+255),f,b
  2541  0009DC  2BAB               	incf	(CRCcheck@rt+1)& (0+255),f,b
  2542  0009DE  D7B7               	goto	l2202
  2543  0009E0                     l251:
  2544  0009E0  0012               	return		;funcret
  2545  0009E2                     __end_of_CRCcheck:
  2546                           	opt stack 0
  2547                           tblptru	equ	0xFF8
  2548                           tblptrh	equ	0xFF7
  2549                           tblptrl	equ	0xFF6
  2550                           tablat	equ	0xFF5
  2551                           prodh	equ	0xFF4
  2552                           prodl	equ	0xFF3
  2553                           postinc0	equ	0xFEE
  2554                           wreg	equ	0xFE8
  2555                           indf2	equ	0xFDF
  2556                           postinc2	equ	0xFDE
  2557                           postdec2	equ	0xFDD
  2558                           plusw2	equ	0xFDB
  2559                           fsr2h	equ	0xFDA
  2560                           fsr2l	equ	0xFD9
  2561                           status	equ	0xFD8
  2562                           
  2563 ;; *************** function _crcBufS_status_put *****************
  2564 ;; Defined at:
  2565 ;;		line 334 in file "FastTransfer.c"
  2566 ;; Parameters:    Size  Location     Type
  2567 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  2568 ;;		 -> crc_buffer(17), 
  2569 ;;  time            1   28[COMRAM] unsigned char 
  2570 ;;  status          1   29[COMRAM] unsigned char 
  2571 ;; Auto vars:     Size  Location     Type
  2572 ;;  wantedTime      2   34[COMRAM] int 
  2573 ;; Return value:  Size  Location     Type
  2574 ;;                  1    wreg      void 
  2575 ;; Registers used:
  2576 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2577 ;; Tracked objects:
  2578 ;;		On entry : 0/0
  2579 ;;		On exit  : 0/0
  2580 ;;		Unchanged: 0/0
  2581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2582 ;;      Params:         4       0       0       0       0       0       0
  2583 ;;      Locals:         2       0       0       0       0       0       0
  2584 ;;      Temps:          4       0       0       0       0       0       0
  2585 ;;      Totals:        10       0       0       0       0       0       0
  2586 ;;Total ram usage:       10 bytes
  2587 ;; Hardware stack levels used:    1
  2588 ;; Hardware stack levels required when called:    4
  2589 ;; This function calls:
  2590 ;;		Nothing
  2591 ;; This function is called by:
  2592 ;;		_CRCcheck
  2593 ;; This function uses a non-reentrant model
  2594 ;;
  2595                           
  2596                           	psect	text14
  2597  000876                     __ptext14:
  2598                           	opt stack 0
  2599  000876                     _crcBufS_status_put:
  2600                           	opt stack 23
  2601                           
  2602                           ;FastTransfer.c: 335: if (time >= 5) {
  2603                           
  2604                           ;incstack = 0
  2605  000876  0E04               	movlw	4
  2606  000878  641D               	cpfsgt	crcBufS_status_put@time,c
  2607  00087A  D002               	goto	l2170
  2608                           
  2609                           ;FastTransfer.c: 336: time = 5 - 1;
  2610  00087C  0E04               	movlw	4
  2611  00087E  6E1D               	movwf	crcBufS_status_put@time,c
  2612  000880                     l2170:
  2613                           
  2614                           ;FastTransfer.c: 337: }
  2615                           ;FastTransfer.c: 338: time = time + 1;
  2616  000880  281D               	incf	crcBufS_status_put@time,w,c
  2617  000882  6E1D               	movwf	crcBufS_status_put@time,c
  2618                           
  2619                           ;FastTransfer.c: 339: int wantedTime = time * 3;
  2620  000884  501D               	movf	crcBufS_status_put@time,w,c
  2621  000886  0D03               	mullw	3
  2622  000888  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  2623  00088C  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  2624                           
  2625                           ;FastTransfer.c: 340: if (wantedTime > _this->head) {
  2626  000890  EE20 F00F          	lfsr	2,15
  2627  000894  501B               	movf	crcBufS_status_put@_this,w,c
  2628  000896  26D9               	addwf	fsr2l,f,c
  2629  000898  501C               	movf	crcBufS_status_put@_this+1,w,c
  2630  00089A  22DA               	addwfc	fsr2h,f,c
  2631  00089C  5023               	movf	crcBufS_status_put@wantedTime,w,c
  2632  00089E  5CDE               	subwf	postinc2,w,c
  2633  0008A0  50DE               	movf	postinc2,w,c
  2634  0008A2  0A80               	xorlw	128
  2635  0008A4  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  2636  0008A6  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  2637  0008A8  0A80               	xorlw	128
  2638  0008AA  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  2639  0008AC  B0D8               	btfsc	status,0,c
  2640  0008AE  D02B               	goto	l2178
  2641                           
  2642                           ;FastTransfer.c: 341: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  2643  0008B0  EE20 F00F          	lfsr	2,15
  2644  0008B4  501B               	movf	crcBufS_status_put@_this,w,c
  2645  0008B6  26D9               	addwf	fsr2l,f,c
  2646  0008B8  501C               	movf	crcBufS_status_put@_this+1,w,c
  2647  0008BA  22DA               	addwfc	fsr2h,f,c
  2648  0008BC  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  2649  0008C0  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  2650  0008C4  1E1F               	comf	??_crcBufS_status_put,f,c
  2651  0008C6  1E20               	comf	??_crcBufS_status_put+1,f,c
  2652  0008C8  4A1F               	infsnz	??_crcBufS_status_put,f,c
  2653  0008CA  2A20               	incf	??_crcBufS_status_put+1,f,c
  2654  0008CC  5023               	movf	crcBufS_status_put@wantedTime,w,c
  2655  0008CE  261F               	addwf	??_crcBufS_status_put,f,c
  2656  0008D0  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  2657  0008D2  2220               	addwfc	??_crcBufS_status_put+1,f,c
  2658  0008D4  1E1F               	comf	??_crcBufS_status_put,f,c
  2659  0008D6  1E20               	comf	??_crcBufS_status_put+1,f,c
  2660  0008D8  4A1F               	infsnz	??_crcBufS_status_put,f,c
  2661  0008DA  2A20               	incf	??_crcBufS_status_put+1,f,c
  2662  0008DC  0E0F               	movlw	15
  2663  0008DE  241F               	addwf	??_crcBufS_status_put,w,c
  2664  0008E0  6E23               	movwf	crcBufS_status_put@wantedTime,c
  2665  0008E2  0E00               	movlw	0
  2666  0008E4  2020               	addwfc	??_crcBufS_status_put+1,w,c
  2667  0008E6  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  2668                           
  2669                           ;FastTransfer.c: 342: _this->buf[(wantedTime + 2)] = status;
  2670  0008E8  0E02               	movlw	2
  2671  0008EA  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  2672  0008EC  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  2673  0008EE  0E00               	movlw	0
  2674  0008F0  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  2675  0008F2  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  2676  0008F4  501F               	movf	??_crcBufS_status_put,w,c
  2677  0008F6  241B               	addwf	crcBufS_status_put@_this,w,c
  2678  0008F8  6ED9               	movwf	fsr2l,c
  2679  0008FA  5020               	movf	??_crcBufS_status_put+1,w,c
  2680  0008FC  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  2681  0008FE  6EDA               	movwf	fsr2h,c
  2682  000900  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  2683                           
  2684                           ;FastTransfer.c: 343: } else {
  2685  000904  0012               	return	
  2686  000906                     l2178:
  2687                           
  2688                           ;FastTransfer.c: 344: _this->buf[(_this->head - wantedTime) + 2] = status;
  2689  000906  EE20 F00F          	lfsr	2,15
  2690  00090A  501B               	movf	crcBufS_status_put@_this,w,c
  2691  00090C  26D9               	addwf	fsr2l,f,c
  2692  00090E  501C               	movf	crcBufS_status_put@_this+1,w,c
  2693  000910  22DA               	addwfc	fsr2h,f,c
  2694  000912  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  2695  000916  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  2696  00091A  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  2697  00091E  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  2698  000922  1E21               	comf	??_crcBufS_status_put+2,f,c
  2699  000924  1E22               	comf	??_crcBufS_status_put+3,f,c
  2700  000926  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  2701  000928  2A22               	incf	??_crcBufS_status_put+3,f,c
  2702  00092A  501F               	movf	??_crcBufS_status_put,w,c
  2703  00092C  2621               	addwf	??_crcBufS_status_put+2,f,c
  2704  00092E  5020               	movf	??_crcBufS_status_put+1,w,c
  2705  000930  2222               	addwfc	??_crcBufS_status_put+3,f,c
  2706  000932  0E02               	movlw	2
  2707  000934  2621               	addwf	??_crcBufS_status_put+2,f,c
  2708  000936  0E00               	movlw	0
  2709  000938  2222               	addwfc	??_crcBufS_status_put+3,f,c
  2710  00093A  5021               	movf	??_crcBufS_status_put+2,w,c
  2711  00093C  241B               	addwf	crcBufS_status_put@_this,w,c
  2712  00093E  6ED9               	movwf	fsr2l,c
  2713  000940  5022               	movf	??_crcBufS_status_put+3,w,c
  2714  000942  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  2715  000944  6EDA               	movwf	fsr2h,c
  2716  000946  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  2717  00094A  0012               	return	
  2718  00094C                     __end_of_crcBufS_status_put:
  2719                           	opt stack 0
  2720                           tblptru	equ	0xFF8
  2721                           tblptrh	equ	0xFF7
  2722                           tblptrl	equ	0xFF6
  2723                           tablat	equ	0xFF5
  2724                           prodh	equ	0xFF4
  2725                           prodl	equ	0xFF3
  2726                           postinc0	equ	0xFEE
  2727                           wreg	equ	0xFE8
  2728                           indf2	equ	0xFDF
  2729                           postinc2	equ	0xFDE
  2730                           postdec2	equ	0xFDD
  2731                           plusw2	equ	0xFDB
  2732                           fsr2h	equ	0xFDA
  2733                           fsr2l	equ	0xFD9
  2734                           status	equ	0xFD8
  2735                           
  2736 ;; *************** function _crcBufS_get *****************
  2737 ;; Defined at:
  2738 ;;		line 351 in file "FastTransfer.c"
  2739 ;; Parameters:    Size  Location     Type
  2740 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  2741 ;;		 -> crc_buffer(17), 
  2742 ;;  time            1   28[COMRAM] unsigned char 
  2743 ;;  space           1   29[COMRAM] unsigned char 
  2744 ;; Auto vars:     Size  Location     Type
  2745 ;;  wantedTime      2    0[BANK0 ] int 
  2746 ;; Return value:  Size  Location     Type
  2747 ;;                  1    wreg      unsigned char 
  2748 ;; Registers used:
  2749 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2750 ;; Tracked objects:
  2751 ;;		On entry : 0/0
  2752 ;;		On exit  : 0/0
  2753 ;;		Unchanged: 0/0
  2754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2755 ;;      Params:         4       0       0       0       0       0       0
  2756 ;;      Locals:         0       2       0       0       0       0       0
  2757 ;;      Temps:          6       0       0       0       0       0       0
  2758 ;;      Totals:        10       2       0       0       0       0       0
  2759 ;;Total ram usage:       12 bytes
  2760 ;; Hardware stack levels used:    1
  2761 ;; Hardware stack levels required when called:    4
  2762 ;; This function calls:
  2763 ;;		Nothing
  2764 ;; This function is called by:
  2765 ;;		_CRCcheck
  2766 ;;		_AKNAK
  2767 ;; This function uses a non-reentrant model
  2768 ;;
  2769                           
  2770                           	psect	text15
  2771  0005D4                     __ptext15:
  2772                           	opt stack 0
  2773  0005D4                     _crcBufS_get:
  2774                           	opt stack 23
  2775                           
  2776                           ;FastTransfer.c: 352: if (time >= 5) {
  2777                           
  2778                           ;incstack = 0
  2779  0005D4  0E04               	movlw	4
  2780  0005D6  641D               	cpfsgt	crcBufS_get@time,c
  2781  0005D8  D002               	goto	l2146
  2782                           
  2783                           ;FastTransfer.c: 353: time = 5 - 1;
  2784  0005DA  0E04               	movlw	4
  2785  0005DC  6E1D               	movwf	crcBufS_get@time,c
  2786  0005DE                     l2146:
  2787                           
  2788                           ;FastTransfer.c: 354: }
  2789                           ;FastTransfer.c: 355: if (space >= 3) {
  2790  0005DE  0E02               	movlw	2
  2791  0005E0  641E               	cpfsgt	crcBufS_get@space,c
  2792  0005E2  D002               	goto	l2150
  2793                           
  2794                           ;FastTransfer.c: 356: space = 3 - 1;
  2795  0005E4  0E02               	movlw	2
  2796  0005E6  6E1E               	movwf	crcBufS_get@space,c
  2797  0005E8                     l2150:
  2798                           
  2799                           ;FastTransfer.c: 357: }
  2800                           ;FastTransfer.c: 358: time = time + 1;
  2801  0005E8  281D               	incf	crcBufS_get@time,w,c
  2802  0005EA  6E1D               	movwf	crcBufS_get@time,c
  2803                           
  2804                           ;FastTransfer.c: 359: int wantedTime = time * 3;
  2805  0005EC  501D               	movf	crcBufS_get@time,w,c
  2806  0005EE  0D03               	mullw	3
  2807  0005F0  CFF3 F0A3          	movff	prodl,crcBufS_get@wantedTime
  2808  0005F4  CFF4 F0A4          	movff	prodh,crcBufS_get@wantedTime+1
  2809                           
  2810                           ;FastTransfer.c: 360: if (wantedTime > _this->head) {
  2811  0005F8  EE20 F00F          	lfsr	2,15
  2812  0005FC  501B               	movf	crcBufS_get@_this,w,c
  2813  0005FE  26D9               	addwf	fsr2l,f,c
  2814  000600  501C               	movf	crcBufS_get@_this+1,w,c
  2815  000602  22DA               	addwfc	fsr2h,f,c
  2816  000604  0100               	movlb	0	; () banked
  2817  000606  51A3               	movf	crcBufS_get@wantedTime& (0+255),w,b
  2818  000608  5CDE               	subwf	postinc2,w,c
  2819  00060A  50DE               	movf	postinc2,w,c
  2820  00060C  0A80               	xorlw	128
  2821  00060E  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  2822  000610  0100               	movlb	0	; () banked
  2823  000612  51A4               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  2824  000614  0A80               	xorlw	128
  2825  000616  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  2826  000618  B0D8               	btfsc	status,0,c
  2827  00061A  D030               	goto	l2162
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;FastTransfer.c: 361: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  2831  00061C  EE20 F00F          	lfsr	2,15
  2832  000620  501B               	movf	crcBufS_get@_this,w,c
  2833  000622  26D9               	addwf	fsr2l,f,c
  2834  000624  501C               	movf	crcBufS_get@_this+1,w,c
  2835  000626  22DA               	addwfc	fsr2h,f,c
  2836  000628  CFDE F01F          	movff	postinc2,??_crcBufS_get
  2837  00062C  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  2838  000630  1E1F               	comf	??_crcBufS_get,f,c
  2839  000632  1E20               	comf	??_crcBufS_get+1,f,c
  2840  000634  4A1F               	infsnz	??_crcBufS_get,f,c
  2841  000636  2A20               	incf	??_crcBufS_get+1,f,c
  2842  000638  0100               	movlb	0	; () banked
  2843  00063A  51A3               	movf	crcBufS_get@wantedTime& (0+255),w,b
  2844  00063C  261F               	addwf	??_crcBufS_get,f,c
  2845  00063E  0100               	movlb	0	; () banked
  2846  000640  51A4               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  2847  000642  2220               	addwfc	??_crcBufS_get+1,f,c
  2848  000644  1E1F               	comf	??_crcBufS_get,f,c
  2849  000646  1E20               	comf	??_crcBufS_get+1,f,c
  2850  000648  4A1F               	infsnz	??_crcBufS_get,f,c
  2851  00064A  2A20               	incf	??_crcBufS_get+1,f,c
  2852  00064C  0E0F               	movlw	15
  2853  00064E  241F               	addwf	??_crcBufS_get,w,c
  2854  000650  0100               	movlb	0	; () banked
  2855  000652  6FA3               	movwf	crcBufS_get@wantedTime& (0+255),b
  2856  000654  0E00               	movlw	0
  2857  000656  2020               	addwfc	??_crcBufS_get+1,w,c
  2858  000658  0100               	movlb	0	; () banked
  2859  00065A  6FA4               	movwf	(crcBufS_get@wantedTime+1)& (0+255),b
  2860                           
  2861                           ;FastTransfer.c: 362: return (_this->buf[(wantedTime + space)]);
  2862  00065C  501E               	movf	crcBufS_get@space,w,c
  2863  00065E  0100               	movlb	0	; () banked
  2864  000660  25A3               	addwf	crcBufS_get@wantedTime& (0+255),w,b
  2865  000662  6E1F               	movwf	??_crcBufS_get& (0+255),c
  2866  000664  0E00               	movlw	0
  2867  000666  0100               	movlb	0	; () banked
  2868  000668  21A4               	addwfc	(crcBufS_get@wantedTime+1)& (0+255),w,b
  2869  00066A  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  2870  00066C  501F               	movf	??_crcBufS_get,w,c
  2871  00066E  241B               	addwf	crcBufS_get@_this,w,c
  2872  000670  6ED9               	movwf	fsr2l,c
  2873  000672  5020               	movf	??_crcBufS_get+1,w,c
  2874  000674  201C               	addwfc	crcBufS_get@_this+1,w,c
  2875  000676  6EDA               	movwf	fsr2h,c
  2876  000678  50DF               	movf	indf2,w,c
  2877                           
  2878                           ; BSR set to: 0
  2879                           ;FastTransfer.c: 363: } else {
  2880                           
  2881                           ; BSR set to: 0
  2882  00067A  0012               	return	
  2883  00067C                     l2162:
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;FastTransfer.c: 364: return (_this->buf[(_this->head - wantedTime) + space]);
  2887  00067C  EE20 F00F          	lfsr	2,15
  2888  000680  501B               	movf	crcBufS_get@_this,w,c
  2889  000682  26D9               	addwf	fsr2l,f,c
  2890  000684  501C               	movf	crcBufS_get@_this+1,w,c
  2891  000686  22DA               	addwfc	fsr2h,f,c
  2892  000688  CFDE F01F          	movff	postinc2,??_crcBufS_get
  2893  00068C  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  2894  000690  C0A3  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  2895  000694  C0A4  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  2896  000698  1E21               	comf	??_crcBufS_get+2,f,c
  2897  00069A  1E22               	comf	??_crcBufS_get+3,f,c
  2898  00069C  4A21               	infsnz	??_crcBufS_get+2,f,c
  2899  00069E  2A22               	incf	??_crcBufS_get+3,f,c
  2900  0006A0  501E               	movf	crcBufS_get@space,w,c
  2901  0006A2  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  2902  0006A4  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  2903  0006A6  5021               	movf	??_crcBufS_get+2,w,c
  2904  0006A8  2623               	addwf	??_crcBufS_get+4,f,c
  2905  0006AA  5022               	movf	??_crcBufS_get+3,w,c
  2906  0006AC  2224               	addwfc	??_crcBufS_get+5,f,c
  2907  0006AE  501F               	movf	??_crcBufS_get,w,c
  2908  0006B0  2623               	addwf	??_crcBufS_get+4,f,c
  2909  0006B2  5020               	movf	??_crcBufS_get+1,w,c
  2910  0006B4  2224               	addwfc	??_crcBufS_get+5,f,c
  2911  0006B6  5023               	movf	??_crcBufS_get+4,w,c
  2912  0006B8  241B               	addwf	crcBufS_get@_this,w,c
  2913  0006BA  6ED9               	movwf	fsr2l,c
  2914  0006BC  5024               	movf	??_crcBufS_get+5,w,c
  2915  0006BE  201C               	addwfc	crcBufS_get@_this+1,w,c
  2916  0006C0  6EDA               	movwf	fsr2h,c
  2917  0006C2  50DF               	movf	indf2,w,c
  2918                           
  2919                           ; BSR set to: 0
  2920  0006C4  0012               	return	
  2921  0006C6                     __end_of_crcBufS_get:
  2922                           	opt stack 0
  2923                           tblptru	equ	0xFF8
  2924                           tblptrh	equ	0xFF7
  2925                           tblptrl	equ	0xFF6
  2926                           tablat	equ	0xFF5
  2927                           prodh	equ	0xFF4
  2928                           prodl	equ	0xFF3
  2929                           postinc0	equ	0xFEE
  2930                           wreg	equ	0xFE8
  2931                           indf2	equ	0xFDF
  2932                           postinc2	equ	0xFDE
  2933                           postdec2	equ	0xFDD
  2934                           plusw2	equ	0xFDB
  2935                           fsr2h	equ	0xFDA
  2936                           fsr2l	equ	0xFD9
  2937                           status	equ	0xFD8
  2938                           
  2939 ;; *************** function _CRC8 *****************
  2940 ;; Defined at:
  2941 ;;		line 31 in file "FastTransfer.c"
  2942 ;; Parameters:    Size  Location     Type
  2943 ;;  data            2   26[COMRAM] PTR const unsigned char 
  2944 ;;		 -> NULL(0), CRCcheck@arrayHolder(3), receiveData@holder_317(3), receiveData@holder(3), 
  2945 ;;		 -> rx_buffer(200), ring_buffer(206), 
  2946 ;;  len             1   28[COMRAM] unsigned char 
  2947 ;; Auto vars:     Size  Location     Type
  2948 ;;  sum             1   29[COMRAM] unsigned char 
  2949 ;;  tempI           1   31[COMRAM] unsigned char 
  2950 ;;  extract         1   30[COMRAM] unsigned char 
  2951 ;;  crc             1   32[COMRAM] unsigned char 
  2952 ;; Return value:  Size  Location     Type
  2953 ;;                  1    wreg      unsigned char 
  2954 ;; Registers used:
  2955 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2956 ;; Tracked objects:
  2957 ;;		On entry : 0/0
  2958 ;;		On exit  : 0/0
  2959 ;;		Unchanged: 0/0
  2960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2961 ;;      Params:         3       0       0       0       0       0       0
  2962 ;;      Locals:         4       0       0       0       0       0       0
  2963 ;;      Temps:          0       0       0       0       0       0       0
  2964 ;;      Totals:         7       0       0       0       0       0       0
  2965 ;;Total ram usage:        7 bytes
  2966 ;; Hardware stack levels used:    1
  2967 ;; Hardware stack levels required when called:    4
  2968 ;; This function calls:
  2969 ;;		Nothing
  2970 ;; This function is called by:
  2971 ;;		_sendData
  2972 ;;		_receiveData
  2973 ;;		_CRCcheck
  2974 ;; This function uses a non-reentrant model
  2975 ;;
  2976                           
  2977                           	psect	text16
  2978  000C1A                     __ptext16:
  2979                           	opt stack 0
  2980  000C1A                     _CRC8:
  2981                           	opt stack 23
  2982                           
  2983                           ;FastTransfer.c: 32: unsigned char crc = 0x00;
  2984                           
  2985                           ; BSR set to: 0
  2986                           ;incstack = 0
  2987  000C1A  0E00               	movlw	0
  2988  000C1C  6E21               	movwf	CRC8@crc,c
  2989                           
  2990                           ;FastTransfer.c: 33: while (len--) {
  2991  000C1E  D01C               	goto	l2108
  2992  000C20                     l2092:
  2993                           
  2994                           ;FastTransfer.c: 34: unsigned char extract = *data++;
  2995  000C20  C01B  FFD9         	movff	CRC8@data,fsr2l
  2996  000C24  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  2997  000C28  50DF               	movf	indf2,w,c
  2998  000C2A  6E1F               	movwf	CRC8@extract,c
  2999  000C2C  4A1B               	infsnz	CRC8@data,f,c
  3000  000C2E  2A1C               	incf	CRC8@data+1,f,c
  3001                           
  3002                           ;FastTransfer.c: 35: unsigned char tempI;
  3003                           ;FastTransfer.c: 36: for (tempI = 8; tempI; tempI--) {
  3004  000C30  0E08               	movlw	8
  3005  000C32  6E20               	movwf	CRC8@tempI,c
  3006  000C34  D00E               	goto	l2106
  3007  000C36                     l2098:
  3008                           
  3009                           ;FastTransfer.c: 37: unsigned char sum = (crc ^ extract) & 0x01;
  3010  000C36  5021               	movf	CRC8@crc,w,c
  3011  000C38  181F               	xorwf	CRC8@extract,w,c
  3012  000C3A  0B01               	andlw	1
  3013  000C3C  6E1E               	movwf	CRC8@sum,c
  3014                           
  3015                           ;FastTransfer.c: 38: crc >>= 1;
  3016  000C3E  90D8               	bcf	status,0,c
  3017  000C40  3221               	rrcf	CRC8@crc,f,c
  3018                           
  3019                           ;FastTransfer.c: 39: if (sum) {
  3020  000C42  501E               	movf	CRC8@sum,w,c
  3021  000C44  B4D8               	btfsc	status,2,c
  3022  000C46  D002               	goto	l137
  3023                           
  3024                           ;FastTransfer.c: 40: crc ^= 0x8C;
  3025  000C48  0E8C               	movlw	140
  3026  000C4A  1A21               	xorwf	CRC8@crc,f,c
  3027  000C4C                     l137:
  3028                           
  3029                           ;FastTransfer.c: 41: }
  3030                           ;FastTransfer.c: 42: extract >>= 1;
  3031  000C4C  90D8               	bcf	status,0,c
  3032  000C4E  321F               	rrcf	CRC8@extract,f,c
  3033  000C50  0620               	decf	CRC8@tempI,f,c
  3034  000C52                     l2106:
  3035  000C52  5020               	movf	CRC8@tempI,w,c
  3036  000C54  A4D8               	btfss	status,2,c
  3037  000C56  D7EF               	goto	l2098
  3038  000C58                     l2108:
  3039  000C58  061D               	decf	CRC8@len,f,c
  3040  000C5A  281D               	incf	CRC8@len,w,c
  3041  000C5C  A4D8               	btfss	status,2,c
  3042  000C5E  D7E0               	goto	l2092
  3043                           
  3044                           ;FastTransfer.c: 43: }
  3045                           ;FastTransfer.c: 44: }
  3046                           ;FastTransfer.c: 45: return crc;
  3047  000C60  5021               	movf	CRC8@crc,w,c
  3048  000C62  0012               	return	
  3049  000C64                     __end_of_CRC8:
  3050                           	opt stack 0
  3051                           tblptru	equ	0xFF8
  3052                           tblptrh	equ	0xFF7
  3053                           tblptrl	equ	0xFF6
  3054                           tablat	equ	0xFF5
  3055                           prodh	equ	0xFF4
  3056                           prodl	equ	0xFF3
  3057                           postinc0	equ	0xFEE
  3058                           wreg	equ	0xFE8
  3059                           indf2	equ	0xFDF
  3060                           postinc2	equ	0xFDE
  3061                           postdec2	equ	0xFDD
  3062                           plusw2	equ	0xFDB
  3063                           fsr2h	equ	0xFDA
  3064                           fsr2l	equ	0xFD9
  3065                           status	equ	0xFD8
  3066                           
  3067 ;; *************** function _Start *****************
  3068 ;; Defined at:
  3069 ;;		line 32 in file "Function.c"
  3070 ;; Parameters:    Size  Location     Type
  3071 ;;		None
  3072 ;; Auto vars:     Size  Location     Type
  3073 ;;		None
  3074 ;; Return value:  Size  Location     Type
  3075 ;;                  1    wreg      void 
  3076 ;; Registers used:
  3077 ;;		wreg, status,2, cstack
  3078 ;; Tracked objects:
  3079 ;;		On entry : 0/0
  3080 ;;		On exit  : 0/0
  3081 ;;		Unchanged: 0/0
  3082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3083 ;;      Params:         0       0       0       0       0       0       0
  3084 ;;      Locals:         0       0       0       0       0       0       0
  3085 ;;      Temps:          0       0       0       0       0       0       0
  3086 ;;      Totals:         0       0       0       0       0       0       0
  3087 ;;Total ram usage:        0 bytes
  3088 ;; Hardware stack levels used:    1
  3089 ;; Hardware stack levels required when called:    6
  3090 ;; This function calls:
  3091 ;;		_INTERRUPT_Initialize
  3092 ;;		_TMR0_Initialize
  3093 ;; This function is called by:
  3094 ;;		_main
  3095 ;; This function uses a non-reentrant model
  3096 ;;
  3097                           
  3098                           	psect	text17
  3099  000D24                     __ptext17:
  3100                           	opt stack 0
  3101  000D24                     _Start:
  3102                           	opt stack 24
  3103                           
  3104                           ;Function.c: 94: TRISCbits.TRISC5 = 1;
  3105                           
  3106                           ;incstack = 0
  3107  000D24  8A94               	bsf	3988,5,c	;volatile
  3108                           
  3109                           ;Function.c: 95: TRISCbits.TRISC4 = 1;
  3110  000D26  8894               	bsf	3988,4,c	;volatile
  3111                           
  3112                           ;Function.c: 96: TRISDbits.TRISD3 = 1;
  3113  000D28  8695               	bsf	3989,3,c	;volatile
  3114                           
  3115                           ;Function.c: 97: TRISDbits.TRISD2 = 1;
  3116  000D2A  8495               	bsf	3989,2,c	;volatile
  3117                           
  3118                           ;Function.c: 98: TRISDbits.TRISD1 = 1;
  3119  000D2C  8295               	bsf	3989,1,c	;volatile
  3120                           
  3121                           ;Function.c: 99: TRISDbits.TRISD0 = 1;
  3122  000D2E  8095               	bsf	3989,0,c	;volatile
  3123                           
  3124                           ;Function.c: 100: TRISCbits.TRISC3 = 1;
  3125  000D30  8694               	bsf	3988,3,c	;volatile
  3126                           
  3127                           ;Function.c: 101: TRISCbits.TRISC2 = 1;
  3128  000D32  8494               	bsf	3988,2,c	;volatile
  3129                           
  3130                           ;Function.c: 102: TRISCbits.TRISC1 = 1;
  3131  000D34  8294               	bsf	3988,1,c	;volatile
  3132                           
  3133                           ;Function.c: 103: TRISAbits.TRISA7 = 1;
  3134  000D36  8E92               	bsf	3986,7,c	;volatile
  3135                           
  3136                           ;Function.c: 104: TRISCbits.TRISC0 = 1;
  3137  000D38  8094               	bsf	3988,0,c	;volatile
  3138                           
  3139                           ;Function.c: 107: OSCCON = 0x72;
  3140  000D3A  0E72               	movlw	114
  3141  000D3C  6ED3               	movwf	4051,c	;volatile
  3142                           
  3143                           ;Function.c: 109: OSCCON2 = 0x04;
  3144  000D3E  0E04               	movlw	4
  3145  000D40  6ED2               	movwf	4050,c	;volatile
  3146                           
  3147                           ;Function.c: 111: OSCTUNE = 0x00;
  3148  000D42  0E00               	movlw	0
  3149  000D44  6E9B               	movwf	3995,c	;volatile
  3150                           
  3151                           ;Function.c: 114: INTERRUPT_Initialize();
  3152  000D46  EC2C  F007         	call	_INTERRUPT_Initialize	;wreg free
  3153                           
  3154                           ;Function.c: 115: TMR0_Initialize();
  3155  000D4A  ECE1  F006         	call	_TMR0_Initialize	;wreg free
  3156  000D4E  0012               	return		;funcret
  3157  000D50                     __end_of_Start:
  3158                           	opt stack 0
  3159                           tblptru	equ	0xFF8
  3160                           tblptrh	equ	0xFF7
  3161                           tblptrl	equ	0xFF6
  3162                           tablat	equ	0xFF5
  3163                           prodh	equ	0xFF4
  3164                           prodl	equ	0xFF3
  3165                           postinc0	equ	0xFEE
  3166                           wreg	equ	0xFE8
  3167                           indf2	equ	0xFDF
  3168                           postinc2	equ	0xFDE
  3169                           postdec2	equ	0xFDD
  3170                           plusw2	equ	0xFDB
  3171                           fsr2h	equ	0xFDA
  3172                           fsr2l	equ	0xFD9
  3173                           status	equ	0xFD8
  3174                           
  3175 ;; *************** function _TMR0_Initialize *****************
  3176 ;; Defined at:
  3177 ;;		line 23 in file "tmr0.c"
  3178 ;; Parameters:    Size  Location     Type
  3179 ;;		None
  3180 ;; Auto vars:     Size  Location     Type
  3181 ;;		None
  3182 ;; Return value:  Size  Location     Type
  3183 ;;                  1    wreg      void 
  3184 ;; Registers used:
  3185 ;;		wreg, status,2, cstack
  3186 ;; Tracked objects:
  3187 ;;		On entry : 0/0
  3188 ;;		On exit  : 0/0
  3189 ;;		Unchanged: 0/0
  3190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3191 ;;      Params:         0       0       0       0       0       0       0
  3192 ;;      Locals:         0       0       0       0       0       0       0
  3193 ;;      Temps:          0       0       0       0       0       0       0
  3194 ;;      Totals:         0       0       0       0       0       0       0
  3195 ;;Total ram usage:        0 bytes
  3196 ;; Hardware stack levels used:    1
  3197 ;; Hardware stack levels required when called:    5
  3198 ;; This function calls:
  3199 ;;		_TMR0_StartTimer
  3200 ;; This function is called by:
  3201 ;;		_Start
  3202 ;; This function uses a non-reentrant model
  3203 ;;
  3204                           
  3205                           	psect	text18
  3206  000DC2                     __ptext18:
  3207                           	opt stack 0
  3208  000DC2                     _TMR0_Initialize:
  3209                           	opt stack 24
  3210                           
  3211                           ;tmr0.c: 27: T0CON = 0x94;
  3212                           
  3213                           ;incstack = 0
  3214  000DC2  0E94               	movlw	148
  3215  000DC4  6ED5               	movwf	4053,c	;volatile
  3216                           
  3217                           ;tmr0.c: 30: TMR0H = 0xCF;
  3218  000DC6  0ECF               	movlw	207
  3219  000DC8  6ED7               	movwf	4055,c	;volatile
  3220                           
  3221                           ;tmr0.c: 33: TMR0L = 0x2C;
  3222  000DCA  0E2C               	movlw	44
  3223  000DCC  6ED6               	movwf	4054,c	;volatile
  3224                           
  3225                           ;tmr0.c: 36: timer0ReloadVal16bit = 53036;
  3226  000DCE  0ECF               	movlw	207
  3227  000DD0  6E43               	movwf	_timer0ReloadVal16bit+1,c	;volatile
  3228  000DD2  0E2C               	movlw	44
  3229  000DD4  6E42               	movwf	_timer0ReloadVal16bit,c	;volatile
  3230                           
  3231                           ;tmr0.c: 39: INTCONbits.TMR0IF = 0;
  3232  000DD6  94F2               	bcf	intcon,2,c	;volatile
  3233                           
  3234                           ;tmr0.c: 42: INTCONbits.TMR0IE = 1;
  3235  000DD8  8AF2               	bsf	intcon,5,c	;volatile
  3236                           
  3237                           ;tmr0.c: 45: TMR0_StartTimer();
  3238  000DDA  EC46  F007         	call	_TMR0_StartTimer	;wreg free
  3239  000DDE  0012               	return		;funcret
  3240  000DE0                     __end_of_TMR0_Initialize:
  3241                           	opt stack 0
  3242                           tblptru	equ	0xFF8
  3243                           tblptrh	equ	0xFF7
  3244                           tblptrl	equ	0xFF6
  3245                           tablat	equ	0xFF5
  3246                           prodh	equ	0xFF4
  3247                           prodl	equ	0xFF3
  3248                           intcon	equ	0xFF2
  3249                           postinc0	equ	0xFEE
  3250                           wreg	equ	0xFE8
  3251                           indf2	equ	0xFDF
  3252                           postinc2	equ	0xFDE
  3253                           postdec2	equ	0xFDD
  3254                           plusw2	equ	0xFDB
  3255                           fsr2h	equ	0xFDA
  3256                           fsr2l	equ	0xFD9
  3257                           status	equ	0xFD8
  3258                           
  3259 ;; *************** function _TMR0_StartTimer *****************
  3260 ;; Defined at:
  3261 ;;		line 48 in file "tmr0.c"
  3262 ;; Parameters:    Size  Location     Type
  3263 ;;		None
  3264 ;; Auto vars:     Size  Location     Type
  3265 ;;		None
  3266 ;; Return value:  Size  Location     Type
  3267 ;;                  1    wreg      void 
  3268 ;; Registers used:
  3269 ;;		None
  3270 ;; Tracked objects:
  3271 ;;		On entry : 0/0
  3272 ;;		On exit  : 0/0
  3273 ;;		Unchanged: 0/0
  3274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3275 ;;      Params:         0       0       0       0       0       0       0
  3276 ;;      Locals:         0       0       0       0       0       0       0
  3277 ;;      Temps:          0       0       0       0       0       0       0
  3278 ;;      Totals:         0       0       0       0       0       0       0
  3279 ;;Total ram usage:        0 bytes
  3280 ;; Hardware stack levels used:    1
  3281 ;; Hardware stack levels required when called:    4
  3282 ;; This function calls:
  3283 ;;		Nothing
  3284 ;; This function is called by:
  3285 ;;		_TMR0_Initialize
  3286 ;; This function uses a non-reentrant model
  3287 ;;
  3288                           
  3289                           	psect	text19
  3290  000E8C                     __ptext19:
  3291                           	opt stack 0
  3292  000E8C                     _TMR0_StartTimer:
  3293                           	opt stack 24
  3294                           
  3295                           ;tmr0.c: 50: T0CONbits.TMR0ON = 1;
  3296                           
  3297                           ;incstack = 0
  3298  000E8C  8ED5               	bsf	4053,7,c	;volatile
  3299  000E8E  0012               	return		;funcret
  3300  000E90                     __end_of_TMR0_StartTimer:
  3301                           	opt stack 0
  3302                           tblptru	equ	0xFF8
  3303                           tblptrh	equ	0xFF7
  3304                           tblptrl	equ	0xFF6
  3305                           tablat	equ	0xFF5
  3306                           prodh	equ	0xFF4
  3307                           prodl	equ	0xFF3
  3308                           intcon	equ	0xFF2
  3309                           postinc0	equ	0xFEE
  3310                           wreg	equ	0xFE8
  3311                           indf2	equ	0xFDF
  3312                           postinc2	equ	0xFDE
  3313                           postdec2	equ	0xFDD
  3314                           plusw2	equ	0xFDB
  3315                           fsr2h	equ	0xFDA
  3316                           fsr2l	equ	0xFD9
  3317                           status	equ	0xFD8
  3318                           
  3319 ;; *************** function _INTERRUPT_Initialize *****************
  3320 ;; Defined at:
  3321 ;;		line 118 in file "Function.c"
  3322 ;; Parameters:    Size  Location     Type
  3323 ;;		None
  3324 ;; Auto vars:     Size  Location     Type
  3325 ;;		None
  3326 ;; Return value:  Size  Location     Type
  3327 ;;                  1    wreg      void 
  3328 ;; Registers used:
  3329 ;;		None
  3330 ;; Tracked objects:
  3331 ;;		On entry : 0/0
  3332 ;;		On exit  : 0/0
  3333 ;;		Unchanged: 0/0
  3334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3335 ;;      Params:         0       0       0       0       0       0       0
  3336 ;;      Locals:         0       0       0       0       0       0       0
  3337 ;;      Temps:          0       0       0       0       0       0       0
  3338 ;;      Totals:         0       0       0       0       0       0       0
  3339 ;;Total ram usage:        0 bytes
  3340 ;; Hardware stack levels used:    1
  3341 ;; Hardware stack levels required when called:    4
  3342 ;; This function calls:
  3343 ;;		Nothing
  3344 ;; This function is called by:
  3345 ;;		_Start
  3346 ;; This function uses a non-reentrant model
  3347 ;;
  3348                           
  3349                           	psect	text20
  3350  000E58                     __ptext20:
  3351                           	opt stack 0
  3352  000E58                     _INTERRUPT_Initialize:
  3353                           	opt stack 25
  3354                           
  3355                           ;Function.c: 121: RCONbits.IPEN = 0;
  3356                           
  3357                           ;incstack = 0
  3358  000E58  9ED0               	bcf	4048,7,c	;volatile
  3359                           
  3360                           ;Function.c: 126: IPR1bits.RC1IP = 0;
  3361  000E5A  9A9F               	bcf	3999,5,c	;volatile
  3362                           
  3363                           ;Function.c: 128: IPR1bits.TX1IP = 0;
  3364  000E5C  989F               	bcf	3999,4,c	;volatile
  3365                           
  3366                           ;Function.c: 130: INTCON2bits.TMR0IP = 0;
  3367  000E5E  94F1               	bcf	intcon2,2,c	;volatile
  3368                           
  3369                           ;Function.c: 132: IPR1bits.ADIP = 0;
  3370  000E60  9C9F               	bcf	3999,6,c	;volatile
  3371                           
  3372                           ;Function.c: 134: IPR1bits.SSP1IP = 0;
  3373  000E62  969F               	bcf	3999,3,c	;volatile
  3374                           
  3375                           ;Function.c: 136: IPR2bits.BCL1IP = 0;
  3376  000E64  96A2               	bcf	4002,3,c	;volatile
  3377                           
  3378                           ;Function.c: 137: IPR1bits.TMR2IP=0;
  3379  000E66  929F               	bcf	3999,1,c	;volatile
  3380  000E68  0012               	return		;funcret
  3381  000E6A                     __end_of_INTERRUPT_Initialize:
  3382                           	opt stack 0
  3383                           tblptru	equ	0xFF8
  3384                           tblptrh	equ	0xFF7
  3385                           tblptrl	equ	0xFF6
  3386                           tablat	equ	0xFF5
  3387                           prodh	equ	0xFF4
  3388                           prodl	equ	0xFF3
  3389                           intcon	equ	0xFF2
  3390                           intcon2	equ	0xFF1
  3391                           postinc0	equ	0xFEE
  3392                           wreg	equ	0xFE8
  3393                           indf2	equ	0xFDF
  3394                           postinc2	equ	0xFDE
  3395                           postdec2	equ	0xFDD
  3396                           plusw2	equ	0xFDB
  3397                           fsr2h	equ	0xFDA
  3398                           fsr2l	equ	0xFD9
  3399                           status	equ	0xFD8
  3400                           
  3401 ;; *************** function _SetTime *****************
  3402 ;; Defined at:
  3403 ;;		line 98 in file "tmr0.c"
  3404 ;; Parameters:    Size  Location     Type
  3405 ;;		None
  3406 ;; Auto vars:     Size  Location     Type
  3407 ;;		None
  3408 ;; Return value:  Size  Location     Type
  3409 ;;                  1    wreg      void 
  3410 ;; Registers used:
  3411 ;;		wreg, status,2
  3412 ;; Tracked objects:
  3413 ;;		On entry : 0/0
  3414 ;;		On exit  : 0/0
  3415 ;;		Unchanged: 0/0
  3416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3417 ;;      Params:         0       0       0       0       0       0       0
  3418 ;;      Locals:         0       0       0       0       0       0       0
  3419 ;;      Temps:          0       0       0       0       0       0       0
  3420 ;;      Totals:         0       0       0       0       0       0       0
  3421 ;;Total ram usage:        0 bytes
  3422 ;; Hardware stack levels used:    1
  3423 ;; Hardware stack levels required when called:    4
  3424 ;; This function calls:
  3425 ;;		Nothing
  3426 ;; This function is called by:
  3427 ;;		_main
  3428 ;; This function uses a non-reentrant model
  3429 ;;
  3430                           
  3431                           	psect	text21
  3432  000E44                     __ptext21:
  3433                           	opt stack 0
  3434  000E44                     _SetTime:
  3435                           	opt stack 26
  3436                           
  3437                           ;tmr0.c: 99: time = 0;
  3438                           
  3439                           ;incstack = 0
  3440  000E44  0E00               	movlw	0
  3441  000E46  0100               	movlb	0	; () banked
  3442  000E48  6F88               	movwf	_time& (0+255),b
  3443  000E4A  0E00               	movlw	0
  3444  000E4C  6F89               	movwf	(_time+1)& (0+255),b
  3445  000E4E  0E00               	movlw	0
  3446  000E50  6F8A               	movwf	(_time+2)& (0+255),b
  3447  000E52  0E00               	movlw	0
  3448  000E54  6F8B               	movwf	(_time+3)& (0+255),b
  3449                           
  3450                           ; BSR set to: 0
  3451  000E56  0012               	return		;funcret
  3452  000E58                     __end_of_SetTime:
  3453                           	opt stack 0
  3454                           tblptru	equ	0xFF8
  3455                           tblptrh	equ	0xFF7
  3456                           tblptrl	equ	0xFF6
  3457                           tablat	equ	0xFF5
  3458                           prodh	equ	0xFF4
  3459                           prodl	equ	0xFF3
  3460                           intcon	equ	0xFF2
  3461                           intcon2	equ	0xFF1
  3462                           postinc0	equ	0xFEE
  3463                           wreg	equ	0xFE8
  3464                           indf2	equ	0xFDF
  3465                           postinc2	equ	0xFDE
  3466                           postdec2	equ	0xFDD
  3467                           plusw2	equ	0xFDB
  3468                           fsr2h	equ	0xFDA
  3469                           fsr2l	equ	0xFD9
  3470                           status	equ	0xFD8
  3471                           
  3472 ;; *************** function _ReadFaults *****************
  3473 ;; Defined at:
  3474 ;;		line 9 in file "Function.c"
  3475 ;; Parameters:    Size  Location     Type
  3476 ;;		None
  3477 ;; Auto vars:     Size  Location     Type
  3478 ;;		None
  3479 ;; Return value:  Size  Location     Type
  3480 ;;                  1    wreg      void 
  3481 ;; Registers used:
  3482 ;;		wreg, status,2, status,0
  3483 ;; Tracked objects:
  3484 ;;		On entry : 0/0
  3485 ;;		On exit  : 0/0
  3486 ;;		Unchanged: 0/0
  3487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3488 ;;      Params:         0       0       0       0       0       0       0
  3489 ;;      Locals:         0       0       0       0       0       0       0
  3490 ;;      Temps:          1       0       0       0       0       0       0
  3491 ;;      Totals:         1       0       0       0       0       0       0
  3492 ;;Total ram usage:        1 bytes
  3493 ;; Hardware stack levels used:    1
  3494 ;; Hardware stack levels required when called:    4
  3495 ;; This function calls:
  3496 ;;		Nothing
  3497 ;; This function is called by:
  3498 ;;		_main
  3499 ;; This function uses a non-reentrant model
  3500 ;;
  3501                           
  3502                           	psect	text22
  3503  00079E                     __ptext22:
  3504                           	opt stack 0
  3505  00079E                     _ReadFaults:
  3506                           	opt stack 26
  3507                           
  3508                           ;Function.c: 10: ByteHigh = ByteHigh | ((LATCbits.LATC5&0x01) << 0);
  3509                           
  3510                           ; BSR set to: 0
  3511                           ;incstack = 0
  3512  00079E  AA8B               	btfss	3979,5,c	;volatile
  3513  0007A0  D002               	goto	u400
  3514  0007A2  0E01               	movlw	1
  3515  0007A4  D001               	goto	u406
  3516  0007A6                     u400:
  3517  0007A6  0E00               	movlw	0
  3518  0007A8                     u406:
  3519  0007A8  1039               	iorwf	_ByteHigh,w,c
  3520  0007AA  6E39               	movwf	_ByteHigh,c
  3521                           
  3522                           ;Function.c: 11: ByteHigh = ByteHigh | ((LATCbits.LATC4&0x01) << 1);
  3523  0007AC  A88B               	btfss	3979,4,c	;volatile
  3524  0007AE  D003               	goto	u410
  3525  0007B0  6A1B               	clrf	??_ReadFaults& (0+255),c
  3526  0007B2  2A1B               	incf	??_ReadFaults& (0+255),f,c
  3527  0007B4  D001               	goto	u418
  3528  0007B6                     u410:
  3529  0007B6  6A1B               	clrf	??_ReadFaults& (0+255),c
  3530  0007B8                     u418:
  3531  0007B8  90D8               	bcf	status,0,c
  3532  0007BA  341B               	rlcf	??_ReadFaults,w,c
  3533  0007BC  1039               	iorwf	_ByteHigh,w,c
  3534  0007BE  6E39               	movwf	_ByteHigh,c
  3535                           
  3536                           ;Function.c: 12: ByteHigh = ByteHigh | ((LATDbits.LATD3&0x01) << 2);
  3537  0007C0  A68C               	btfss	3980,3,c	;volatile
  3538  0007C2  D003               	goto	u420
  3539  0007C4  6A1B               	clrf	??_ReadFaults& (0+255),c
  3540  0007C6  2A1B               	incf	??_ReadFaults& (0+255),f,c
  3541  0007C8  D001               	goto	u428
  3542  0007CA                     u420:
  3543  0007CA  6A1B               	clrf	??_ReadFaults& (0+255),c
  3544  0007CC                     u428:
  3545  0007CC  90D8               	bcf	status,0,c
  3546  0007CE  361B               	rlcf	??_ReadFaults,f,c
  3547  0007D0  90D8               	bcf	status,0,c
  3548  0007D2  341B               	rlcf	??_ReadFaults,w,c
  3549  0007D4  1039               	iorwf	_ByteHigh,w,c
  3550  0007D6  6E39               	movwf	_ByteHigh,c
  3551                           
  3552                           ;Function.c: 13: ByteHigh = ByteHigh | ((LATDbits.LATD2&0x01) << 3);
  3553  0007D8  A48C               	btfss	3980,2,c	;volatile
  3554  0007DA  D003               	goto	u430
  3555  0007DC  6A1B               	clrf	??_ReadFaults& (0+255),c
  3556  0007DE  2A1B               	incf	??_ReadFaults& (0+255),f,c
  3557  0007E0  D001               	goto	u438
  3558  0007E2                     u430:
  3559  0007E2  6A1B               	clrf	??_ReadFaults& (0+255),c
  3560  0007E4                     u438:
  3561  0007E4  90D8               	bcf	status,0,c
  3562  0007E6  361B               	rlcf	??_ReadFaults,f,c
  3563  0007E8  90D8               	bcf	status,0,c
  3564  0007EA  361B               	rlcf	??_ReadFaults,f,c
  3565  0007EC  90D8               	bcf	status,0,c
  3566  0007EE  341B               	rlcf	??_ReadFaults,w,c
  3567  0007F0  1039               	iorwf	_ByteHigh,w,c
  3568  0007F2  6E39               	movwf	_ByteHigh,c
  3569                           
  3570                           ;Function.c: 14: ByteHigh = ByteHigh | ((LATDbits.LATD1&0x01) << 4);
  3571  0007F4  A28C               	btfss	3980,1,c	;volatile
  3572  0007F6  D003               	goto	u440
  3573  0007F8  6A1B               	clrf	??_ReadFaults& (0+255),c
  3574  0007FA  2A1B               	incf	??_ReadFaults& (0+255),f,c
  3575  0007FC  D001               	goto	u448
  3576  0007FE                     u440:
  3577  0007FE  6A1B               	clrf	??_ReadFaults& (0+255),c
  3578  000800                     u448:
  3579  000800  381B               	swapf	??_ReadFaults,w,c
  3580  000802  0BF0               	andlw	240
  3581  000804  1039               	iorwf	_ByteHigh,w,c
  3582  000806  6E39               	movwf	_ByteHigh,c
  3583                           
  3584                           ;Function.c: 15: ByteHigh = ByteHigh | ((LATDbits.LATD0&0x01) << 5);
  3585  000808  A08C               	btfss	3980,0,c	;volatile
  3586  00080A  D003               	goto	u450
  3587  00080C  0E20               	movlw	32
  3588  00080E  6E1B               	movwf	??_ReadFaults& (0+255),c
  3589  000810  D001               	goto	u465
  3590  000812                     u450:
  3591  000812  6A1B               	clrf	??_ReadFaults& (0+255),c
  3592  000814                     u465:
  3593  000814  501B               	movf	??_ReadFaults,w,c
  3594  000816  1039               	iorwf	_ByteHigh,w,c
  3595  000818  6E39               	movwf	_ByteHigh,c
  3596                           
  3597                           ;Function.c: 16: ByteHigh = ByteHigh | ((LATCbits.LATC3&0x01) << 6);
  3598  00081A  A68B               	btfss	3979,3,c	;volatile
  3599  00081C  D003               	goto	u470
  3600  00081E  0E40               	movlw	64
  3601  000820  6E1B               	movwf	??_ReadFaults& (0+255),c
  3602  000822  D001               	goto	u485
  3603  000824                     u470:
  3604  000824  6A1B               	clrf	??_ReadFaults& (0+255),c
  3605  000826                     u485:
  3606  000826  501B               	movf	??_ReadFaults,w,c
  3607  000828  1039               	iorwf	_ByteHigh,w,c
  3608  00082A  6E39               	movwf	_ByteHigh,c
  3609                           
  3610                           ;Function.c: 17: ByteHigh = ByteHigh | ((LATCbits.LATC2&0x01) << 7);
  3611  00082C  A48B               	btfss	3979,2,c	;volatile
  3612  00082E  D003               	goto	u490
  3613  000830  0E80               	movlw	128
  3614  000832  6E1B               	movwf	??_ReadFaults& (0+255),c
  3615  000834  D001               	goto	u505
  3616  000836                     u490:
  3617  000836  6A1B               	clrf	??_ReadFaults& (0+255),c
  3618  000838                     u505:
  3619  000838  501B               	movf	??_ReadFaults,w,c
  3620  00083A  1039               	iorwf	_ByteHigh,w,c
  3621  00083C  6E39               	movwf	_ByteHigh,c
  3622                           
  3623                           ;Function.c: 18: ByteLow = ByteLow | ((LATCbits.LATC1&0x01) << 0);
  3624  00083E  A28B               	btfss	3979,1,c	;volatile
  3625  000840  D002               	goto	u510
  3626  000842  0E01               	movlw	1
  3627  000844  D001               	goto	u516
  3628  000846                     u510:
  3629  000846  0E00               	movlw	0
  3630  000848                     u516:
  3631  000848  103A               	iorwf	_ByteLow,w,c
  3632  00084A  6E3A               	movwf	_ByteLow,c
  3633                           
  3634                           ;Function.c: 19: ByteLow = ByteLow | ((LATAbits.LATA7&0x01) << 1);
  3635  00084C  AE89               	btfss	3977,7,c	;volatile
  3636  00084E  D003               	goto	u520
  3637  000850  6A1B               	clrf	??_ReadFaults& (0+255),c
  3638  000852  2A1B               	incf	??_ReadFaults& (0+255),f,c
  3639  000854  D001               	goto	u528
  3640  000856                     u520:
  3641  000856  6A1B               	clrf	??_ReadFaults& (0+255),c
  3642  000858                     u528:
  3643  000858  90D8               	bcf	status,0,c
  3644  00085A  341B               	rlcf	??_ReadFaults,w,c
  3645  00085C  103A               	iorwf	_ByteLow,w,c
  3646  00085E  6E3A               	movwf	_ByteLow,c
  3647                           
  3648                           ;Function.c: 20: ByteLow = ByteLow | ((LATCbits.LATC0&0x01) << 1);
  3649  000860  A08B               	btfss	3979,0,c	;volatile
  3650  000862  D003               	goto	u530
  3651  000864  6A1B               	clrf	??_ReadFaults& (0+255),c
  3652  000866  2A1B               	incf	??_ReadFaults& (0+255),f,c
  3653  000868  D001               	goto	u538
  3654  00086A                     u530:
  3655  00086A  6A1B               	clrf	??_ReadFaults& (0+255),c
  3656  00086C                     u538:
  3657  00086C  90D8               	bcf	status,0,c
  3658  00086E  341B               	rlcf	??_ReadFaults,w,c
  3659  000870  103A               	iorwf	_ByteLow,w,c
  3660  000872  6E3A               	movwf	_ByteLow,c
  3661  000874  0012               	return		;funcret
  3662  000876                     __end_of_ReadFaults:
  3663                           	opt stack 0
  3664                           tblptru	equ	0xFF8
  3665                           tblptrh	equ	0xFF7
  3666                           tblptrl	equ	0xFF6
  3667                           tablat	equ	0xFF5
  3668                           prodh	equ	0xFF4
  3669                           prodl	equ	0xFF3
  3670                           intcon	equ	0xFF2
  3671                           intcon2	equ	0xFF1
  3672                           postinc0	equ	0xFEE
  3673                           wreg	equ	0xFE8
  3674                           indf2	equ	0xFDF
  3675                           postinc2	equ	0xFDE
  3676                           postdec2	equ	0xFDD
  3677                           plusw2	equ	0xFDB
  3678                           fsr2h	equ	0xFDA
  3679                           fsr2l	equ	0xFD9
  3680                           status	equ	0xFD8
  3681                           
  3682 ;; *************** function _GetTime *****************
  3683 ;; Defined at:
  3684 ;;		line 94 in file "tmr0.c"
  3685 ;; Parameters:    Size  Location     Type
  3686 ;;		None
  3687 ;; Auto vars:     Size  Location     Type
  3688 ;;		None
  3689 ;; Return value:  Size  Location     Type
  3690 ;;                  4   26[COMRAM] long 
  3691 ;; Registers used:
  3692 ;;		None
  3693 ;; Tracked objects:
  3694 ;;		On entry : 0/0
  3695 ;;		On exit  : 0/0
  3696 ;;		Unchanged: 0/0
  3697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3698 ;;      Params:         4       0       0       0       0       0       0
  3699 ;;      Locals:         0       0       0       0       0       0       0
  3700 ;;      Temps:          0       0       0       0       0       0       0
  3701 ;;      Totals:         4       0       0       0       0       0       0
  3702 ;;Total ram usage:        4 bytes
  3703 ;; Hardware stack levels used:    1
  3704 ;; Hardware stack levels required when called:    4
  3705 ;; This function calls:
  3706 ;;		Nothing
  3707 ;; This function is called by:
  3708 ;;		_main
  3709 ;; This function uses a non-reentrant model
  3710 ;;
  3711                           
  3712                           	psect	text23
  3713  000E6A                     __ptext23:
  3714                           	opt stack 0
  3715  000E6A                     _GetTime:
  3716                           	opt stack 26
  3717                           
  3718                           ;tmr0.c: 95: return time;
  3719                           
  3720                           ;incstack = 0
  3721  000E6A  C088  F01B         	movff	_time,?_GetTime
  3722  000E6E  C089  F01C         	movff	_time+1,?_GetTime+1
  3723  000E72  C08A  F01D         	movff	_time+2,?_GetTime+2
  3724  000E76  C08B  F01E         	movff	_time+3,?_GetTime+3
  3725  000E7A  0012               	return		;funcret
  3726  000E7C                     __end_of_GetTime:
  3727                           	opt stack 0
  3728                           tblptru	equ	0xFF8
  3729                           tblptrh	equ	0xFF7
  3730                           tblptrl	equ	0xFF6
  3731                           tablat	equ	0xFF5
  3732                           prodh	equ	0xFF4
  3733                           prodl	equ	0xFF3
  3734                           intcon	equ	0xFF2
  3735                           intcon2	equ	0xFF1
  3736                           postinc0	equ	0xFEE
  3737                           wreg	equ	0xFE8
  3738                           indf2	equ	0xFDF
  3739                           postinc2	equ	0xFDE
  3740                           postdec2	equ	0xFDD
  3741                           plusw2	equ	0xFDB
  3742                           fsr2h	equ	0xFDA
  3743                           fsr2l	equ	0xFD9
  3744                           status	equ	0xFD8
  3745                           
  3746 ;; *************** function _INTERRUPT_InterruptManager *****************
  3747 ;; Defined at:
  3748 ;;		line 141 in file "Function.c"
  3749 ;; Parameters:    Size  Location     Type
  3750 ;;		None
  3751 ;; Auto vars:     Size  Location     Type
  3752 ;;		None
  3753 ;; Return value:  Size  Location     Type
  3754 ;;                  1    wreg      void 
  3755 ;; Registers used:
  3756 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3757 ;; Tracked objects:
  3758 ;;		On entry : 0/0
  3759 ;;		On exit  : 0/0
  3760 ;;		Unchanged: 0/0
  3761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3762 ;;      Params:         0       0       0       0       0       0       0
  3763 ;;      Locals:         0       0       0       0       0       0       0
  3764 ;;      Temps:         14       0       0       0       0       0       0
  3765 ;;      Totals:        14       0       0       0       0       0       0
  3766 ;;Total ram usage:       14 bytes
  3767 ;; Hardware stack levels used:    1
  3768 ;; Hardware stack levels required when called:    3
  3769 ;; This function calls:
  3770 ;;		_EUSART1_Receive_ISR
  3771 ;;		_EUSART1_Transmit_ISR
  3772 ;;		_TMR0_ISR
  3773 ;; This function is called by:
  3774 ;;		Interrupt level 2
  3775 ;; This function uses a non-reentrant model
  3776 ;;
  3777                           
  3778                           	psect	intcode
  3779  000008                     __pintcode:
  3780                           	opt stack 0
  3781  000008                     _INTERRUPT_InterruptManager:
  3782                           	opt stack 22
  3783                           
  3784                           ;incstack = 0
  3785  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3786  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  3787  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  3788  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  3789  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  3790  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  3791  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  3792  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  3793  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  3794  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  3795  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  3796  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  3797  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  3798  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  3799  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  3800                           
  3801                           ;Function.c: 144: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  3802  000042  BA9D               	btfsc	3997,5,c	;volatile
  3803  000044  AA9E               	btfss	3998,5,c	;volatile
  3804  000046  D003               	goto	i2l474
  3805                           
  3806                           ;Function.c: 145: {
  3807                           ;Function.c: 146: EUSART1_Receive_ISR();
  3808  000048  ECF0  F006         	call	_EUSART1_Receive_ISR	;wreg free
  3809                           
  3810                           ;Function.c: 147: }
  3811  00004C  D00B               	goto	i2l480
  3812  00004E                     i2l474:
  3813                           
  3814                           ;Function.c: 148: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  3815  00004E  B89D               	btfsc	3997,4,c	;volatile
  3816  000050  A89E               	btfss	3998,4,c	;volatile
  3817  000052  D003               	goto	i2l476
  3818                           
  3819                           ;Function.c: 149: {
  3820                           ;Function.c: 150: EUSART1_Transmit_ISR();
  3821  000054  EC4C  F006         	call	_EUSART1_Transmit_ISR	;wreg free
  3822                           
  3823                           ;Function.c: 151: }
  3824  000058  D005               	goto	i2l480
  3825  00005A                     i2l476:
  3826                           
  3827                           ;Function.c: 152: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  3828  00005A  BAF2               	btfsc	intcon,5,c	;volatile
  3829  00005C  A4F2               	btfss	intcon,2,c	;volatile
  3830  00005E  D002               	goto	i2l480
  3831                           
  3832                           ;Function.c: 153: {
  3833                           ;Function.c: 154: TMR0_ISR();
  3834  000060  ECFF  F006         	call	_TMR0_ISR	;wreg free
  3835  000064                     i2l480:
  3836  000064  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  3837  000068  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  3838  00006C  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  3839  000070  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  3840  000074  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  3841  000078  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  3842  00007C  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  3843  000080  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  3844  000084  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  3845  000088  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  3846  00008C  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  3847  000090  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  3848  000094  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  3849  000098  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  3850  00009C  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3851  00009E  0011               	retfie		f
  3852  0000A0                     __end_of_INTERRUPT_InterruptManager:
  3853                           	opt stack 0
  3854                           pclatu	equ	0xFFB
  3855                           pclath	equ	0xFFA
  3856                           tblptru	equ	0xFF8
  3857                           tblptrh	equ	0xFF7
  3858                           tblptrl	equ	0xFF6
  3859                           tablat	equ	0xFF5
  3860                           prodh	equ	0xFF4
  3861                           prodl	equ	0xFF3
  3862                           intcon	equ	0xFF2
  3863                           intcon2	equ	0xFF1
  3864                           postinc0	equ	0xFEE
  3865                           fsr0h	equ	0xFEA
  3866                           fsr0l	equ	0xFE9
  3867                           wreg	equ	0xFE8
  3868                           fsr1h	equ	0xFE2
  3869                           fsr1l	equ	0xFE1
  3870                           indf2	equ	0xFDF
  3871                           postinc2	equ	0xFDE
  3872                           postdec2	equ	0xFDD
  3873                           plusw2	equ	0xFDB
  3874                           fsr2h	equ	0xFDA
  3875                           fsr2l	equ	0xFD9
  3876                           status	equ	0xFD8
  3877                           
  3878 ;; *************** function _TMR0_ISR *****************
  3879 ;; Defined at:
  3880 ;;		line 82 in file "tmr0.c"
  3881 ;; Parameters:    Size  Location     Type
  3882 ;;		None
  3883 ;; Auto vars:     Size  Location     Type
  3884 ;;		None
  3885 ;; Return value:  Size  Location     Type
  3886 ;;                  1    wreg      void 
  3887 ;; Registers used:
  3888 ;;		wreg, status,2, status,0
  3889 ;; Tracked objects:
  3890 ;;		On entry : 0/0
  3891 ;;		On exit  : 0/0
  3892 ;;		Unchanged: 0/0
  3893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3894 ;;      Params:         0       0       0       0       0       0       0
  3895 ;;      Locals:         0       0       0       0       0       0       0
  3896 ;;      Temps:          0       0       0       0       0       0       0
  3897 ;;      Totals:         0       0       0       0       0       0       0
  3898 ;;Total ram usage:        0 bytes
  3899 ;; Hardware stack levels used:    1
  3900 ;; This function calls:
  3901 ;;		Nothing
  3902 ;; This function is called by:
  3903 ;;		_INTERRUPT_InterruptManager
  3904 ;; This function uses a non-reentrant model
  3905 ;;
  3906                           
  3907                           	psect	text25
  3908  000DFE                     __ptext25:
  3909                           	opt stack 0
  3910  000DFE                     _TMR0_ISR:
  3911                           	opt stack 24
  3912                           
  3913                           ;tmr0.c: 83: static volatile uint16_t CountCallBack = 0;
  3914                           ;tmr0.c: 86: TMR0H = timer0ReloadVal16bit >> 8;
  3915                           
  3916                           ;incstack = 0
  3917  000DFE  5043               	movf	_timer0ReloadVal16bit+1,w,c	;volatile
  3918  000E00  6ED7               	movwf	4055,c	;volatile
  3919                           
  3920                           ;tmr0.c: 87: TMR0L = (uint8_t) timer0ReloadVal16bit;
  3921  000E02  C042  FFD6         	movff	_timer0ReloadVal16bit,4054	;volatile
  3922                           
  3923                           ;tmr0.c: 89: time++;
  3924  000E06  0E01               	movlw	1
  3925  000E08  0100               	movlb	0	; () banked
  3926  000E0A  2788               	addwf	_time& (0+255),f,b
  3927  000E0C  0E00               	movlw	0
  3928  000E0E  2389               	addwfc	(_time+1)& (0+255),f,b
  3929  000E10  238A               	addwfc	(_time+2)& (0+255),f,b
  3930  000E12  238B               	addwfc	(_time+3)& (0+255),f,b
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;tmr0.c: 91: INTCONbits.TMR0IF = 0;
  3934  000E14  94F2               	bcf	intcon,2,c	;volatile
  3935                           
  3936                           ; BSR set to: 0
  3937  000E16  0012               	return		;funcret
  3938  000E18                     __end_of_TMR0_ISR:
  3939                           	opt stack 0
  3940                           pclatu	equ	0xFFB
  3941                           pclath	equ	0xFFA
  3942                           tblptru	equ	0xFF8
  3943                           tblptrh	equ	0xFF7
  3944                           tblptrl	equ	0xFF6
  3945                           tablat	equ	0xFF5
  3946                           prodh	equ	0xFF4
  3947                           prodl	equ	0xFF3
  3948                           intcon	equ	0xFF2
  3949                           intcon2	equ	0xFF1
  3950                           postinc0	equ	0xFEE
  3951                           fsr0h	equ	0xFEA
  3952                           fsr0l	equ	0xFE9
  3953                           wreg	equ	0xFE8
  3954                           fsr1h	equ	0xFE2
  3955                           fsr1l	equ	0xFE1
  3956                           indf2	equ	0xFDF
  3957                           postinc2	equ	0xFDE
  3958                           postdec2	equ	0xFDD
  3959                           plusw2	equ	0xFDB
  3960                           fsr2h	equ	0xFDA
  3961                           fsr2l	equ	0xFD9
  3962                           status	equ	0xFD8
  3963                           
  3964 ;; *************** function _EUSART1_Transmit_ISR *****************
  3965 ;; Defined at:
  3966 ;;		line 150 in file "UART.c"
  3967 ;; Parameters:    Size  Location     Type
  3968 ;;		None
  3969 ;; Auto vars:     Size  Location     Type
  3970 ;;		None
  3971 ;; Return value:  Size  Location     Type
  3972 ;;                  1    wreg      void 
  3973 ;; Registers used:
  3974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3975 ;; Tracked objects:
  3976 ;;		On entry : 0/0
  3977 ;;		On exit  : 0/0
  3978 ;;		Unchanged: 0/0
  3979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3980 ;;      Params:         0       0       0       0       0       0       0
  3981 ;;      Locals:         0       0       0       0       0       0       0
  3982 ;;      Temps:          0       0       0       0       0       0       0
  3983 ;;      Totals:         0       0       0       0       0       0       0
  3984 ;;Total ram usage:        0 bytes
  3985 ;; Hardware stack levels used:    1
  3986 ;; Hardware stack levels required when called:    2
  3987 ;; This function calls:
  3988 ;;		_UART_buff_get
  3989 ;;		_UART_buff_size
  3990 ;; This function is called by:
  3991 ;;		_INTERRUPT_InterruptManager
  3992 ;; This function uses a non-reentrant model
  3993 ;;
  3994                           
  3995                           	psect	text26
  3996  000C98                     __ptext26:
  3997                           	opt stack 0
  3998  000C98                     _EUSART1_Transmit_ISR:
  3999                           	opt stack 22
  4000                           
  4001                           ;UART.c: 152: if (UART_buff_size(&output_buffer) > 0) {
  4002                           
  4003                           ; BSR set to: 0
  4004                           ;incstack = 0
  4005  000C98  0E00               	movlw	low _output_buffer
  4006  000C9A  6E01               	movwf	UART_buff_size@_this,c
  4007  000C9C  0E03               	movlw	high _output_buffer
  4008  000C9E  6E02               	movwf	UART_buff_size@_this+1,c
  4009  000CA0  EC17  F007         	call	_UART_buff_size	;wreg free
  4010  000CA4  BE02               	btfsc	?_UART_buff_size+1,7,c
  4011  000CA6  D00D               	goto	i2l1980
  4012  000CA8  5002               	movf	?_UART_buff_size+1,w,c
  4013  000CAA  E103               	bnz	i2u108_40
  4014  000CAC  0401               	decf	?_UART_buff_size,w,c
  4015  000CAE  A0D8               	btfss	status,0,c
  4016  000CB0  D008               	goto	i2l1980
  4017  000CB2                     i2u108_40:
  4018                           
  4019                           ;UART.c: 153: TXREG1 = UART_buff_get(&output_buffer);
  4020  000CB2  0E00               	movlw	low _output_buffer
  4021  000CB4  6E07               	movwf	UART_buff_get@_this,c
  4022  000CB6  0E03               	movlw	high _output_buffer
  4023  000CB8  6E08               	movwf	UART_buff_get@_this+1,c
  4024  000CBA  ECF1  F004         	call	_UART_buff_get	;wreg free
  4025  000CBE  6EAD               	movwf	4013,c	;volatile
  4026                           
  4027                           ;UART.c: 154: } else {
  4028  000CC0  0012               	return	
  4029  000CC2                     i2l1980:
  4030                           
  4031                           ;UART.c: 155: Transmit_stall = 1;
  4032  000CC2  0E01               	movlw	1
  4033  000CC4  6E44               	movwf	_Transmit_stall,c
  4034                           
  4035                           ;UART.c: 156: PIE1bits.TX1IE = 0;
  4036  000CC6  989D               	bcf	3997,4,c	;volatile
  4037  000CC8  0012               	return	
  4038  000CCA                     __end_of_EUSART1_Transmit_ISR:
  4039                           	opt stack 0
  4040                           pclatu	equ	0xFFB
  4041                           pclath	equ	0xFFA
  4042                           tblptru	equ	0xFF8
  4043                           tblptrh	equ	0xFF7
  4044                           tblptrl	equ	0xFF6
  4045                           tablat	equ	0xFF5
  4046                           prodh	equ	0xFF4
  4047                           prodl	equ	0xFF3
  4048                           intcon	equ	0xFF2
  4049                           intcon2	equ	0xFF1
  4050                           postinc0	equ	0xFEE
  4051                           fsr0h	equ	0xFEA
  4052                           fsr0l	equ	0xFE9
  4053                           wreg	equ	0xFE8
  4054                           fsr1h	equ	0xFE2
  4055                           fsr1l	equ	0xFE1
  4056                           indf2	equ	0xFDF
  4057                           postinc2	equ	0xFDE
  4058                           postdec2	equ	0xFDD
  4059                           plusw2	equ	0xFDB
  4060                           fsr2h	equ	0xFDA
  4061                           fsr2l	equ	0xFD9
  4062                           status	equ	0xFD8
  4063                           
  4064 ;; *************** function _UART_buff_size *****************
  4065 ;; Defined at:
  4066 ;;		line 102 in file "UART.c"
  4067 ;; Parameters:    Size  Location     Type
  4068 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  4069 ;;		 -> output_buffer(206), input_buffer(206), 
  4070 ;; Auto vars:     Size  Location     Type
  4071 ;;		None
  4072 ;; Return value:  Size  Location     Type
  4073 ;;                  2    0[COMRAM] int 
  4074 ;; Registers used:
  4075 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4076 ;; Tracked objects:
  4077 ;;		On entry : 0/0
  4078 ;;		On exit  : 0/0
  4079 ;;		Unchanged: 0/0
  4080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4081 ;;      Params:         2       0       0       0       0       0       0
  4082 ;;      Locals:         0       0       0       0       0       0       0
  4083 ;;      Temps:          0       0       0       0       0       0       0
  4084 ;;      Totals:         2       0       0       0       0       0       0
  4085 ;;Total ram usage:        2 bytes
  4086 ;; Hardware stack levels used:    1
  4087 ;; This function calls:
  4088 ;;		Nothing
  4089 ;; This function is called by:
  4090 ;;		_EUSART1_Transmit_ISR
  4091 ;;		_Receive_available
  4092 ;; This function uses a non-reentrant model
  4093 ;;
  4094                           
  4095                           	psect	text27
  4096  000E2E                     __ptext27:
  4097                           	opt stack 0
  4098  000E2E                     _UART_buff_size:
  4099                           	opt stack 23
  4100                           
  4101                           ;UART.c: 103: return (_this->count);
  4102                           
  4103                           ;incstack = 0
  4104  000E2E  EE20 F0CC          	lfsr	2,204
  4105  000E32  5001               	movf	UART_buff_size@_this,w,c
  4106  000E34  26D9               	addwf	fsr2l,f,c
  4107  000E36  5002               	movf	UART_buff_size@_this+1,w,c
  4108  000E38  22DA               	addwfc	fsr2h,f,c
  4109  000E3A  CFDE F001          	movff	postinc2,?_UART_buff_size
  4110  000E3E  CFDD F002          	movff	postdec2,?_UART_buff_size+1
  4111  000E42  0012               	return	
  4112  000E44                     __end_of_UART_buff_size:
  4113                           	opt stack 0
  4114                           pclatu	equ	0xFFB
  4115                           pclath	equ	0xFFA
  4116                           tblptru	equ	0xFF8
  4117                           tblptrh	equ	0xFF7
  4118                           tblptrl	equ	0xFF6
  4119                           tablat	equ	0xFF5
  4120                           prodh	equ	0xFF4
  4121                           prodl	equ	0xFF3
  4122                           intcon	equ	0xFF2
  4123                           intcon2	equ	0xFF1
  4124                           postinc0	equ	0xFEE
  4125                           fsr0h	equ	0xFEA
  4126                           fsr0l	equ	0xFE9
  4127                           wreg	equ	0xFE8
  4128                           fsr1h	equ	0xFE2
  4129                           fsr1l	equ	0xFE1
  4130                           indf2	equ	0xFDF
  4131                           postinc2	equ	0xFDE
  4132                           postdec2	equ	0xFDD
  4133                           plusw2	equ	0xFDB
  4134                           fsr2h	equ	0xFDA
  4135                           fsr2l	equ	0xFD9
  4136                           status	equ	0xFD8
  4137                           
  4138 ;; *************** function _UART_buff_get *****************
  4139 ;; Defined at:
  4140 ;;		line 81 in file "UART.c"
  4141 ;; Parameters:    Size  Location     Type
  4142 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  4143 ;;		 -> output_buffer(206), input_buffer(206), 
  4144 ;; Auto vars:     Size  Location     Type
  4145 ;;  c               1   10[COMRAM] unsigned char 
  4146 ;; Return value:  Size  Location     Type
  4147 ;;                  1    wreg      unsigned char 
  4148 ;; Registers used:
  4149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4150 ;; Tracked objects:
  4151 ;;		On entry : 0/0
  4152 ;;		On exit  : 0/0
  4153 ;;		Unchanged: 0/0
  4154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4155 ;;      Params:         2       0       0       0       0       0       0
  4156 ;;      Locals:         1       0       0       0       0       0       0
  4157 ;;      Temps:          2       0       0       0       0       0       0
  4158 ;;      Totals:         5       0       0       0       0       0       0
  4159 ;;Total ram usage:        5 bytes
  4160 ;; Hardware stack levels used:    1
  4161 ;; Hardware stack levels required when called:    1
  4162 ;; This function calls:
  4163 ;;		_UART_buff_modulo_inc
  4164 ;; This function is called by:
  4165 ;;		_EUSART1_Transmit_ISR
  4166 ;;		_Receive_get
  4167 ;;		_Send_put
  4168 ;; This function uses a non-reentrant model
  4169 ;;
  4170                           
  4171                           	psect	text28
  4172  0009E2                     __ptext28:
  4173                           	opt stack 0
  4174  0009E2                     _UART_buff_get:
  4175                           	opt stack 22
  4176                           
  4177                           ;UART.c: 82: unsigned char c;
  4178                           ;UART.c: 83: if (_this->count > 0) {
  4179                           
  4180                           ;incstack = 0
  4181  0009E2  EE20 F0CC          	lfsr	2,204
  4182  0009E6  5007               	movf	UART_buff_get@_this,w,c
  4183  0009E8  26D9               	addwf	fsr2l,f,c
  4184  0009EA  5008               	movf	UART_buff_get@_this+1,w,c
  4185  0009EC  22DA               	addwfc	fsr2h,f,c
  4186  0009EE  0E01               	movlw	1
  4187  0009F0  BEDB               	btfsc	plusw2,7,c
  4188  0009F2  D03C               	goto	i2l1936
  4189  0009F4  0E01               	movlw	1
  4190  0009F6  50DB               	movf	plusw2,w,c
  4191  0009F8  E103               	bnz	i2u104_40
  4192  0009FA  04DE               	decf	postinc2,w,c
  4193  0009FC  A0D8               	btfss	status,0,c
  4194  0009FE  D036               	goto	i2l1936
  4195  000A00                     i2u104_40:
  4196                           
  4197                           ;UART.c: 84: c = _this->buf[_this->tail];
  4198  000A00  EE20 F0CA          	lfsr	2,202
  4199  000A04  5007               	movf	UART_buff_get@_this,w,c
  4200  000A06  26D9               	addwf	fsr2l,f,c
  4201  000A08  5008               	movf	UART_buff_get@_this+1,w,c
  4202  000A0A  22DA               	addwfc	fsr2h,f,c
  4203  000A0C  CFDE F009          	movff	postinc2,??_UART_buff_get
  4204  000A10  CFDD F00A          	movff	postdec2,??_UART_buff_get+1
  4205  000A14  5009               	movf	??_UART_buff_get,w,c
  4206  000A16  2407               	addwf	UART_buff_get@_this,w,c
  4207  000A18  6ED9               	movwf	fsr2l,c
  4208  000A1A  500A               	movf	??_UART_buff_get+1,w,c
  4209  000A1C  2008               	addwfc	UART_buff_get@_this+1,w,c
  4210  000A1E  6EDA               	movwf	fsr2h,c
  4211  000A20  50DF               	movf	indf2,w,c
  4212  000A22  6E0B               	movwf	UART_buff_get@c,c
  4213                           
  4214                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  4215  000A24  EE20 F0CA          	lfsr	2,202
  4216  000A28  5007               	movf	UART_buff_get@_this,w,c
  4217  000A2A  26D9               	addwf	fsr2l,f,c
  4218  000A2C  5008               	movf	UART_buff_get@_this+1,w,c
  4219  000A2E  22DA               	addwfc	fsr2h,f,c
  4220  000A30  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  4221  000A34  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  4222  000A38  0E00               	movlw	0
  4223  000A3A  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  4224  000A3C  0EC8               	movlw	200
  4225  000A3E  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  4226  000A40  ECBD  F006         	call	_UART_buff_modulo_inc	;wreg free
  4227  000A44  EE20 F0CA          	lfsr	2,202
  4228  000A48  5007               	movf	UART_buff_get@_this,w,c
  4229  000A4A  26D9               	addwf	fsr2l,f,c
  4230  000A4C  5008               	movf	UART_buff_get@_this+1,w,c
  4231  000A4E  22DA               	addwfc	fsr2h,f,c
  4232  000A50  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4233  000A54  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4234                           
  4235                           ;UART.c: 86: --_this->count;
  4236  000A58  EE20 F0CC          	lfsr	2,204
  4237  000A5C  5007               	movf	UART_buff_get@_this,w,c
  4238  000A5E  26D9               	addwf	fsr2l,f,c
  4239  000A60  5008               	movf	UART_buff_get@_this+1,w,c
  4240  000A62  22DA               	addwfc	fsr2h,f,c
  4241  000A64  06DE               	decf	postinc2,f,c
  4242  000A66  0E00               	movlw	0
  4243  000A68  5ADD               	subwfb	postdec2,f,c
  4244                           
  4245                           ;UART.c: 87: } else {
  4246  000A6A  D002               	goto	i2l315
  4247  000A6C                     i2l1936:
  4248                           
  4249                           ;UART.c: 88: c = 0;
  4250  000A6C  0E00               	movlw	0
  4251  000A6E  6E0B               	movwf	UART_buff_get@c,c
  4252  000A70                     i2l315:
  4253                           
  4254                           ;UART.c: 89: }
  4255                           ;UART.c: 90: return (c);
  4256  000A70  500B               	movf	UART_buff_get@c,w,c
  4257  000A72  0012               	return	
  4258  000A74                     __end_of_UART_buff_get:
  4259                           	opt stack 0
  4260                           pclatu	equ	0xFFB
  4261                           pclath	equ	0xFFA
  4262                           tblptru	equ	0xFF8
  4263                           tblptrh	equ	0xFF7
  4264                           tblptrl	equ	0xFF6
  4265                           tablat	equ	0xFF5
  4266                           prodh	equ	0xFF4
  4267                           prodl	equ	0xFF3
  4268                           intcon	equ	0xFF2
  4269                           intcon2	equ	0xFF1
  4270                           postinc0	equ	0xFEE
  4271                           fsr0h	equ	0xFEA
  4272                           fsr0l	equ	0xFE9
  4273                           wreg	equ	0xFE8
  4274                           fsr1h	equ	0xFE2
  4275                           fsr1l	equ	0xFE1
  4276                           indf2	equ	0xFDF
  4277                           postinc2	equ	0xFDE
  4278                           postdec2	equ	0xFDD
  4279                           plusw2	equ	0xFDB
  4280                           fsr2h	equ	0xFDA
  4281                           fsr2l	equ	0xFD9
  4282                           status	equ	0xFD8
  4283                           
  4284 ;; *************** function _EUSART1_Receive_ISR *****************
  4285 ;; Defined at:
  4286 ;;		line 139 in file "UART.c"
  4287 ;; Parameters:    Size  Location     Type
  4288 ;;		None
  4289 ;; Auto vars:     Size  Location     Type
  4290 ;;  data            1   11[COMRAM] unsigned char 
  4291 ;; Return value:  Size  Location     Type
  4292 ;;                  1    wreg      void 
  4293 ;; Registers used:
  4294 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4295 ;; Tracked objects:
  4296 ;;		On entry : 0/0
  4297 ;;		On exit  : 0/0
  4298 ;;		Unchanged: 0/0
  4299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4300 ;;      Params:         0       0       0       0       0       0       0
  4301 ;;      Locals:         1       0       0       0       0       0       0
  4302 ;;      Temps:          0       0       0       0       0       0       0
  4303 ;;      Totals:         1       0       0       0       0       0       0
  4304 ;;Total ram usage:        1 bytes
  4305 ;; Hardware stack levels used:    1
  4306 ;; Hardware stack levels required when called:    2
  4307 ;; This function calls:
  4308 ;;		_UART_buff_put
  4309 ;; This function is called by:
  4310 ;;		_INTERRUPT_InterruptManager
  4311 ;; This function uses a non-reentrant model
  4312 ;;
  4313                           
  4314                           	psect	text29
  4315  000DE0                     __ptext29:
  4316                           	opt stack 0
  4317  000DE0                     _EUSART1_Receive_ISR:
  4318                           	opt stack 22
  4319                           
  4320                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
  4321                           
  4322                           ;incstack = 0
  4323  000DE0  A2AB               	btfss	4011,1,c	;volatile
  4324  000DE2  D002               	goto	i2l346
  4325                           
  4326                           ;UART.c: 143: RC1STAbits.CREN = 0;
  4327  000DE4  98AB               	bcf	4011,4,c	;volatile
  4328                           
  4329                           ;UART.c: 144: RC1STAbits.CREN = 1;
  4330  000DE6  88AB               	bsf	4011,4,c	;volatile
  4331  000DE8                     i2l346:
  4332                           
  4333                           ;UART.c: 145: }
  4334                           ;UART.c: 146: unsigned char data = RCREG1;
  4335  000DE8  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  4336                           
  4337                           ;UART.c: 147: UART_buff_put(&input_buffer, data);
  4338  000DEC  0E00               	movlw	low _input_buffer
  4339  000DEE  6E07               	movwf	UART_buff_put@_this,c
  4340  000DF0  0E02               	movlw	high _input_buffer
  4341  000DF2  6E08               	movwf	UART_buff_put@_this+1,c
  4342  000DF4  C00C  F009         	movff	EUSART1_Receive_ISR@data,UART_buff_put@c
  4343  000DF8  EC5D  F002         	call	_UART_buff_put	;wreg free
  4344  000DFC  0012               	return		;funcret
  4345  000DFE                     __end_of_EUSART1_Receive_ISR:
  4346                           	opt stack 0
  4347                           pclatu	equ	0xFFB
  4348                           pclath	equ	0xFFA
  4349                           tblptru	equ	0xFF8
  4350                           tblptrh	equ	0xFF7
  4351                           tblptrl	equ	0xFF6
  4352                           tablat	equ	0xFF5
  4353                           prodh	equ	0xFF4
  4354                           prodl	equ	0xFF3
  4355                           intcon	equ	0xFF2
  4356                           intcon2	equ	0xFF1
  4357                           postinc0	equ	0xFEE
  4358                           fsr0h	equ	0xFEA
  4359                           fsr0l	equ	0xFE9
  4360                           wreg	equ	0xFE8
  4361                           fsr1h	equ	0xFE2
  4362                           fsr1l	equ	0xFE1
  4363                           indf2	equ	0xFDF
  4364                           postinc2	equ	0xFDE
  4365                           postdec2	equ	0xFDD
  4366                           plusw2	equ	0xFDB
  4367                           fsr2h	equ	0xFDA
  4368                           fsr2l	equ	0xFD9
  4369                           status	equ	0xFD8
  4370                           
  4371 ;; *************** function _UART_buff_put *****************
  4372 ;; Defined at:
  4373 ;;		line 68 in file "UART.c"
  4374 ;; Parameters:    Size  Location     Type
  4375 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  4376 ;;		 -> output_buffer(206), input_buffer(206), 
  4377 ;;  c               1    8[COMRAM] const unsigned char 
  4378 ;; Auto vars:     Size  Location     Type
  4379 ;;		None
  4380 ;; Return value:  Size  Location     Type
  4381 ;;                  1    wreg      void 
  4382 ;; Registers used:
  4383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4384 ;; Tracked objects:
  4385 ;;		On entry : 0/0
  4386 ;;		On exit  : 0/0
  4387 ;;		Unchanged: 0/0
  4388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4389 ;;      Params:         3       0       0       0       0       0       0
  4390 ;;      Locals:         0       0       0       0       0       0       0
  4391 ;;      Temps:          2       0       0       0       0       0       0
  4392 ;;      Totals:         5       0       0       0       0       0       0
  4393 ;;Total ram usage:        5 bytes
  4394 ;; Hardware stack levels used:    1
  4395 ;; Hardware stack levels required when called:    1
  4396 ;; This function calls:
  4397 ;;		_UART_buff_modulo_inc
  4398 ;; This function is called by:
  4399 ;;		_EUSART1_Receive_ISR
  4400 ;;		_Send_put
  4401 ;; This function uses a non-reentrant model
  4402 ;;
  4403                           
  4404                           	psect	text30
  4405  0004BA                     __ptext30:
  4406                           	opt stack 0
  4407  0004BA                     _UART_buff_put:
  4408                           	opt stack 22
  4409                           
  4410                           ;UART.c: 69: if (_this->count < 200) {
  4411                           
  4412                           ;incstack = 0
  4413  0004BA  EE20 F0CC          	lfsr	2,204
  4414  0004BE  5007               	movf	UART_buff_put@_this,w,c
  4415  0004C0  26D9               	addwf	fsr2l,f,c
  4416  0004C2  5008               	movf	UART_buff_put@_this+1,w,c
  4417  0004C4  22DA               	addwfc	fsr2h,f,c
  4418  0004C6  0E01               	movlw	1
  4419  0004C8  BEDB               	btfsc	plusw2,7,c
  4420  0004CA  D007               	goto	i2l1916
  4421  0004CC  0E01               	movlw	1
  4422  0004CE  50DB               	movf	plusw2,w,c
  4423  0004D0  E13A               	bnz	i2l1922
  4424  0004D2  0EC8               	movlw	200
  4425  0004D4  5CDE               	subwf	postinc2,w,c
  4426  0004D6  B0D8               	btfsc	status,0,c
  4427  0004D8  D036               	goto	i2l1922
  4428  0004DA                     i2l1916:
  4429                           
  4430                           ;UART.c: 70: _this->buf[_this->head] = c;
  4431  0004DA  EE20 F0C8          	lfsr	2,200
  4432  0004DE  5007               	movf	UART_buff_put@_this,w,c
  4433  0004E0  26D9               	addwf	fsr2l,f,c
  4434  0004E2  5008               	movf	UART_buff_put@_this+1,w,c
  4435  0004E4  22DA               	addwfc	fsr2h,f,c
  4436  0004E6  CFDE F00A          	movff	postinc2,??_UART_buff_put
  4437  0004EA  CFDD F00B          	movff	postdec2,??_UART_buff_put+1
  4438  0004EE  500A               	movf	??_UART_buff_put,w,c
  4439  0004F0  2407               	addwf	UART_buff_put@_this,w,c
  4440  0004F2  6ED9               	movwf	fsr2l,c
  4441  0004F4  500B               	movf	??_UART_buff_put+1,w,c
  4442  0004F6  2008               	addwfc	UART_buff_put@_this+1,w,c
  4443  0004F8  6EDA               	movwf	fsr2h,c
  4444  0004FA  C009  FFDF         	movff	UART_buff_put@c,indf2
  4445                           
  4446                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  4447  0004FE  EE20 F0C8          	lfsr	2,200
  4448  000502  5007               	movf	UART_buff_put@_this,w,c
  4449  000504  26D9               	addwf	fsr2l,f,c
  4450  000506  5008               	movf	UART_buff_put@_this+1,w,c
  4451  000508  22DA               	addwfc	fsr2h,f,c
  4452  00050A  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  4453  00050E  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  4454  000512  0E00               	movlw	0
  4455  000514  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  4456  000516  0EC8               	movlw	200
  4457  000518  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  4458  00051A  ECBD  F006         	call	_UART_buff_modulo_inc	;wreg free
  4459  00051E  EE20 F0C8          	lfsr	2,200
  4460  000522  5007               	movf	UART_buff_put@_this,w,c
  4461  000524  26D9               	addwf	fsr2l,f,c
  4462  000526  5008               	movf	UART_buff_put@_this+1,w,c
  4463  000528  22DA               	addwfc	fsr2h,f,c
  4464  00052A  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4465  00052E  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4466                           
  4467                           ;UART.c: 72: ++_this->count;
  4468  000532  EE20 F0CC          	lfsr	2,204
  4469  000536  5007               	movf	UART_buff_put@_this,w,c
  4470  000538  26D9               	addwf	fsr2l,f,c
  4471  00053A  5008               	movf	UART_buff_put@_this+1,w,c
  4472  00053C  22DA               	addwfc	fsr2h,f,c
  4473  00053E  2ADE               	incf	postinc2,f,c
  4474  000540  0E00               	movlw	0
  4475  000542  22DD               	addwfc	postdec2,f,c
  4476                           
  4477                           ;UART.c: 73: } else {
  4478  000544  0012               	return	
  4479  000546                     i2l1922:
  4480                           
  4481                           ;UART.c: 74: _this->buf[_this->head] = c;
  4482  000546  EE20 F0C8          	lfsr	2,200
  4483  00054A  5007               	movf	UART_buff_put@_this,w,c
  4484  00054C  26D9               	addwf	fsr2l,f,c
  4485  00054E  5008               	movf	UART_buff_put@_this+1,w,c
  4486  000550  22DA               	addwfc	fsr2h,f,c
  4487  000552  CFDE F00A          	movff	postinc2,??_UART_buff_put
  4488  000556  CFDD F00B          	movff	postdec2,??_UART_buff_put+1
  4489  00055A  500A               	movf	??_UART_buff_put,w,c
  4490  00055C  2407               	addwf	UART_buff_put@_this,w,c
  4491  00055E  6ED9               	movwf	fsr2l,c
  4492  000560  500B               	movf	??_UART_buff_put+1,w,c
  4493  000562  2008               	addwfc	UART_buff_put@_this+1,w,c
  4494  000564  6EDA               	movwf	fsr2h,c
  4495  000566  C009  FFDF         	movff	UART_buff_put@c,indf2
  4496                           
  4497                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  4498  00056A  EE20 F0C8          	lfsr	2,200
  4499  00056E  5007               	movf	UART_buff_put@_this,w,c
  4500  000570  26D9               	addwf	fsr2l,f,c
  4501  000572  5008               	movf	UART_buff_put@_this+1,w,c
  4502  000574  22DA               	addwfc	fsr2h,f,c
  4503  000576  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  4504  00057A  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  4505  00057E  0E00               	movlw	0
  4506  000580  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  4507  000582  0EC8               	movlw	200
  4508  000584  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  4509  000586  ECBD  F006         	call	_UART_buff_modulo_inc	;wreg free
  4510  00058A  EE20 F0C8          	lfsr	2,200
  4511  00058E  5007               	movf	UART_buff_put@_this,w,c
  4512  000590  26D9               	addwf	fsr2l,f,c
  4513  000592  5008               	movf	UART_buff_put@_this+1,w,c
  4514  000594  22DA               	addwfc	fsr2h,f,c
  4515  000596  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4516  00059A  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4517                           
  4518                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  4519  00059E  EE20 F0CA          	lfsr	2,202
  4520  0005A2  5007               	movf	UART_buff_put@_this,w,c
  4521  0005A4  26D9               	addwf	fsr2l,f,c
  4522  0005A6  5008               	movf	UART_buff_put@_this+1,w,c
  4523  0005A8  22DA               	addwfc	fsr2h,f,c
  4524  0005AA  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  4525  0005AE  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  4526  0005B2  0E00               	movlw	0
  4527  0005B4  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  4528  0005B6  0EC8               	movlw	200
  4529  0005B8  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  4530  0005BA  ECBD  F006         	call	_UART_buff_modulo_inc	;wreg free
  4531  0005BE  EE20 F0CA          	lfsr	2,202
  4532  0005C2  5007               	movf	UART_buff_put@_this,w,c
  4533  0005C4  26D9               	addwf	fsr2l,f,c
  4534  0005C6  5008               	movf	UART_buff_put@_this+1,w,c
  4535  0005C8  22DA               	addwfc	fsr2h,f,c
  4536  0005CA  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4537  0005CE  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4538  0005D2  0012               	return	
  4539  0005D4                     __end_of_UART_buff_put:
  4540                           	opt stack 0
  4541                           pclatu	equ	0xFFB
  4542                           pclath	equ	0xFFA
  4543                           tblptru	equ	0xFF8
  4544                           tblptrh	equ	0xFF7
  4545                           tblptrl	equ	0xFF6
  4546                           tablat	equ	0xFF5
  4547                           prodh	equ	0xFF4
  4548                           prodl	equ	0xFF3
  4549                           intcon	equ	0xFF2
  4550                           intcon2	equ	0xFF1
  4551                           postinc0	equ	0xFEE
  4552                           fsr0h	equ	0xFEA
  4553                           fsr0l	equ	0xFE9
  4554                           wreg	equ	0xFE8
  4555                           fsr1h	equ	0xFE2
  4556                           fsr1l	equ	0xFE1
  4557                           indf2	equ	0xFDF
  4558                           postinc2	equ	0xFDE
  4559                           postdec2	equ	0xFDD
  4560                           plusw2	equ	0xFDB
  4561                           fsr2h	equ	0xFDA
  4562                           fsr2l	equ	0xFD9
  4563                           status	equ	0xFD8
  4564                           
  4565 ;; *************** function _UART_buff_modulo_inc *****************
  4566 ;; Defined at:
  4567 ;;		line 106 in file "UART.c"
  4568 ;; Parameters:    Size  Location     Type
  4569 ;;  value           2    0[COMRAM] const unsigned int 
  4570 ;;  modulus         2    2[COMRAM] const unsigned int 
  4571 ;; Auto vars:     Size  Location     Type
  4572 ;;  my_value        2    4[COMRAM] unsigned int 
  4573 ;; Return value:  Size  Location     Type
  4574 ;;                  2    0[COMRAM] unsigned int 
  4575 ;; Registers used:
  4576 ;;		wreg, status,2, status,0
  4577 ;; Tracked objects:
  4578 ;;		On entry : 0/0
  4579 ;;		On exit  : 0/0
  4580 ;;		Unchanged: 0/0
  4581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4582 ;;      Params:         4       0       0       0       0       0       0
  4583 ;;      Locals:         2       0       0       0       0       0       0
  4584 ;;      Temps:          0       0       0       0       0       0       0
  4585 ;;      Totals:         6       0       0       0       0       0       0
  4586 ;;Total ram usage:        6 bytes
  4587 ;; Hardware stack levels used:    1
  4588 ;; This function calls:
  4589 ;;		Nothing
  4590 ;; This function is called by:
  4591 ;;		_UART_buff_put
  4592 ;;		_UART_buff_get
  4593 ;; This function uses a non-reentrant model
  4594 ;;
  4595                           
  4596                           	psect	text31
  4597  000D7A                     __ptext31:
  4598                           	opt stack 0
  4599  000D7A                     _UART_buff_modulo_inc:
  4600                           	opt stack 22
  4601                           
  4602                           ;UART.c: 107: unsigned int my_value = value + 1;
  4603                           
  4604                           ;incstack = 0
  4605  000D7A  0E01               	movlw	1
  4606  000D7C  2401               	addwf	UART_buff_modulo_inc@value,w,c
  4607  000D7E  6E05               	movwf	UART_buff_modulo_inc@my_value,c
  4608  000D80  0E00               	movlw	0
  4609  000D82  2002               	addwfc	UART_buff_modulo_inc@value+1,w,c
  4610  000D84  6E06               	movwf	UART_buff_modulo_inc@my_value+1,c
  4611                           
  4612                           ;UART.c: 108: if (my_value >= modulus) {
  4613  000D86  5003               	movf	UART_buff_modulo_inc@modulus,w,c
  4614  000D88  5C05               	subwf	UART_buff_modulo_inc@my_value,w,c
  4615  000D8A  5004               	movf	UART_buff_modulo_inc@modulus+1,w,c
  4616  000D8C  5806               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  4617  000D8E  A0D8               	btfss	status,0,c
  4618  000D90  D004               	goto	i2l1784
  4619                           
  4620                           ;UART.c: 109: my_value = 0;
  4621  000D92  0E00               	movlw	0
  4622  000D94  6E06               	movwf	UART_buff_modulo_inc@my_value+1,c
  4623  000D96  0E00               	movlw	0
  4624  000D98  6E05               	movwf	UART_buff_modulo_inc@my_value,c
  4625  000D9A                     i2l1784:
  4626                           
  4627                           ;UART.c: 110: }
  4628                           ;UART.c: 111: return (my_value);
  4629  000D9A  C005  F001         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  4630  000D9E  C006  F002         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  4631  000DA2  0012               	return	
  4632  000DA4                     __end_of_UART_buff_modulo_inc:
  4633                           	opt stack 0
  4634  0000                     pclatu	equ	0xFFB
  4635                           pclath	equ	0xFFA
  4636                           tblptru	equ	0xFF8
  4637                           tblptrh	equ	0xFF7
  4638                           tblptrl	equ	0xFF6
  4639                           tablat	equ	0xFF5
  4640                           prodh	equ	0xFF4
  4641                           prodl	equ	0xFF3
  4642                           intcon	equ	0xFF2
  4643                           intcon2	equ	0xFF1
  4644                           postinc0	equ	0xFEE
  4645                           fsr0h	equ	0xFEA
  4646                           fsr0l	equ	0xFE9
  4647                           wreg	equ	0xFE8
  4648                           fsr1h	equ	0xFE2
  4649                           fsr1l	equ	0xFE1
  4650                           indf2	equ	0xFDF
  4651                           postinc2	equ	0xFDE
  4652                           postdec2	equ	0xFDD
  4653                           plusw2	equ	0xFDB
  4654                           fsr2h	equ	0xFDA
  4655                           fsr2l	equ	0xFD9
  4656                           status	equ	0xFD8
  4657                           pclatu	equ	0xFFB
  4658                           pclath	equ	0xFFA
  4659                           tblptru	equ	0xFF8
  4660                           tblptrh	equ	0xFF7
  4661                           tblptrl	equ	0xFF6
  4662                           tablat	equ	0xFF5
  4663                           prodh	equ	0xFF4
  4664                           prodl	equ	0xFF3
  4665                           intcon	equ	0xFF2
  4666                           intcon2	equ	0xFF1
  4667                           postinc0	equ	0xFEE
  4668                           fsr0h	equ	0xFEA
  4669                           fsr0l	equ	0xFE9
  4670                           wreg	equ	0xFE8
  4671                           fsr1h	equ	0xFE2
  4672                           fsr1l	equ	0xFE1
  4673                           indf2	equ	0xFDF
  4674                           postinc2	equ	0xFDE
  4675                           postdec2	equ	0xFDD
  4676                           plusw2	equ	0xFDB
  4677                           fsr2h	equ	0xFDA
  4678                           fsr2l	equ	0xFD9
  4679                           status	equ	0xFD8
  4680                           
  4681                           	psect	rparam
  4682  0000                     pclatu	equ	0xFFB
  4683                           pclath	equ	0xFFA
  4684                           tblptru	equ	0xFF8
  4685                           tblptrh	equ	0xFF7
  4686                           tblptrl	equ	0xFF6
  4687                           tablat	equ	0xFF5
  4688                           prodh	equ	0xFF4
  4689                           prodl	equ	0xFF3
  4690                           intcon	equ	0xFF2
  4691                           intcon2	equ	0xFF1
  4692                           postinc0	equ	0xFEE
  4693                           fsr0h	equ	0xFEA
  4694                           fsr0l	equ	0xFE9
  4695                           wreg	equ	0xFE8
  4696                           fsr1h	equ	0xFE2
  4697                           fsr1l	equ	0xFE1
  4698                           indf2	equ	0xFDF
  4699                           postinc2	equ	0xFDE
  4700                           postdec2	equ	0xFDD
  4701                           plusw2	equ	0xFDB
  4702                           fsr2h	equ	0xFDA
  4703                           fsr2l	equ	0xFD9
  4704                           status	equ	0xFD8
  4705                           
  4706                           	psect	temp
  4707  000045                     btemp:
  4708                           	opt stack 0
  4709  000045                     	ds	1
  4710  0000                     int$flags	set	btemp
  4711                           pclatu	equ	0xFFB
  4712                           pclath	equ	0xFFA
  4713                           tblptru	equ	0xFF8
  4714                           tblptrh	equ	0xFF7
  4715                           tblptrl	equ	0xFF6
  4716                           tablat	equ	0xFF5
  4717                           prodh	equ	0xFF4
  4718                           prodl	equ	0xFF3
  4719                           intcon	equ	0xFF2
  4720                           intcon2	equ	0xFF1
  4721                           postinc0	equ	0xFEE
  4722                           fsr0h	equ	0xFEA
  4723                           fsr0l	equ	0xFE9
  4724                           wreg	equ	0xFE8
  4725                           fsr1h	equ	0xFE2
  4726                           fsr1l	equ	0xFE1
  4727                           indf2	equ	0xFDF
  4728                           postinc2	equ	0xFDE
  4729                           postdec2	equ	0xFDD
  4730                           plusw2	equ	0xFDB
  4731                           fsr2h	equ	0xFDA
  4732                           fsr2l	equ	0xFD9
  4733                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         913
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      68
    BANK0           160     27      94
    BANK1           256      0     206
    BANK2           256      0     206
    BANK3           256      0     206
    BANK4           256      0     200
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_317(BANK0[3]), receiveData@holder(BANK0[3]), 
		 -> rx_buffer(BANK4[200]), ring_buffer(BANK1[206]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), ring_buffer(BANK1[206]), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), 

    serial_available	PTR FTN()int  size(2) Largest target is 1
		 -> Absolute function(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _FastTransfer_buffer_flush->_memset
    _ToSend->_FastTransfer_buffer_put
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _CRCcheck->_crcBufS_get
    _CRCcheck->_crcBufS_status_put

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondECU->_sendData
    _sendData->_FastTransfer_buffer_flush
    _ToSend->_FastTransfer_buffer_put
    _receiveData->_CRCcheck
    _CRCcheck->_crcBufS_get

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   10222
                            _GetTime
                         _ReadFaults
                            _SetTime
                              _Start
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   10222
                        _receiveData
                         _respondECU
 ---------------------------------------------------------------------------------
 (2) _respondECU                                           1     1      0    4952
                                              8 BANK0      1     1      0
                              _Delay
                          _GetFaults
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    2997
                                             34 COMRAM     1     1      0
                                              4 BANK0      4     4      0
                               _CRC8
          _FastTransfer_buffer_flush
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                              0 BANK0      4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1751
                                              2 BANK0      3     1      2
            _FastTransfer_buffer_put
                          _GetFaults (ARG)
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1535
                                             32 COMRAM     5     0      5
                                              0 BANK0      2     2      0
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _GetFaults                                            1     1      0      30
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay                                                5     3      2     174
                                             26 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0    5270
                                              9 BANK0     18    18      0
                               _CRC8
                           _CRCcheck
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    3799
                                              2 BANK0      7     7      0
                               _CRC8
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    10     6      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (1) _Start                                                0     0      0       0
               _INTERRUPT_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetTime                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadFaults                                           1     1      0       0
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _GetTime                                              4     0      4       0
                                             26 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          14    14      0    2289
                                             12 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0    1100
                      _UART_buff_get
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (8) _UART_buff_size                                       2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _UART_buff_get                                        5     3      2     950
                                              6 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  1     1      0    1189
                                             11 COMRAM     1     1      0
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (8) _UART_buff_put                                        5     2      3    1166
                                              6 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (9) _UART_buff_modulo_inc                                 6     2      4     602
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetTime
   _ReadFaults
   _SetTime
   _Start
     _INTERRUPT_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
   _updateComms
     _receiveData
       _CRC8
       _CRCcheck
         _CRC8
         _crcBufS_get
         _crcBufS_status_put
     _respondECU
       _Delay
       _GetFaults
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
         _GetFaults (ARG)
       _sendData
         _CRC8
         _FastTransfer_buffer_flush
           _memset
         _crcBufS_put

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     _UART_buff_put
       _UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     _UART_buff_get
       _UART_buff_modulo_inc
     _UART_buff_size
   _TMR0_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      C8      13       78.1%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      CE       8       80.5%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      CE       6       80.5%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     1B      5E       4       58.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3D4       9        0.0%
DATA                 0      0     3D4      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Aug 12 21:25:46 2016

      __end_of_FastTransfer_buffer_flush 0B5A                             _rx_array_inx 0040  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                                    l240 094C                                      l137 0C4C  
                                    l251 09E0                                      l164 00F0  
                                    l483 0C82                             __CFG_CPB$OFF 000000  
                                    u400 07A6                                      u410 07B6  
                                    u420 07CA                                      u510 0846  
                                    u430 07E2                                      u406 07A8  
                                    u520 0856                                      u440 07FE  
                                    u505 0838                                      u530 086A  
                                    u450 0812                                      u418 07B8  
                           __CFG_CPD$OFF 000000                                      u516 0848  
                                    u428 07CC                                      u470 0824  
                                    u438 07E4                                      u528 0858  
                                    u448 0800                                      u465 0814  
                                    u538 086C                                      u490 0836  
                                    u485 0826     FastTransfer_buffer_flush@clearBuffer 00A5  
                                    prod 000FF3                                      wreg 000FE8  
                           __CFG_LVP$OFF 000000                                     l1216 0E24  
                                   l2106 0C52                                     l2202 094E  
                                   l2108 0C58                                     l2220 09D8  
                                   l2150 05E8                                     l2206 0964  
                                   l2216 09B8                                     l2128 036E  
                                   l2162 067C                                     l2146 05DE  
                                   l2170 0880                                     l2330 0336  
                                   l2092 0C20                                     l2308 02C8  
                                   l2084 0D02                                     l2318 02D4  
                                   l2246 00A6                                     l2078 0D70  
                                   l2256 00E6                                     l2088 0D12  
                                   l2098 0C36                                     l2178 0906  
                                   l2338 0342                                     l2186 0A98  
                                   l2292 0228                                     l1732 0C6E  
                                   l2188 0A9E                                     l2294 022E  
                                   l2286 018E                                     l2296 0242  
                                   l2384 0CCE                     receiveData@crcHolder 00B2  
                                   _CRC8 0C1A                                     u1260 0788  
                                   u1281 036C                                     u1471 0132  
                                   u1607 0C74                                     u1580 0CEC  
                                   _main 0CCA                          _TMR0_StartTimer 0E8C  
                                   _time 0088                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     fsr0l 000FE9  
                                   fsr2h 000FDA                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   btemp 0045                            __CFG_BORV$190 000000  
                                   pclat 000FFA                                     prodh 000FF4  
                                   prodl 000FF3          __end_of_FastTransfer_buffer_put 04BA  
                                   start 00A0                            __CFG_IESO$OFF 000000  
                        __end_of_GetTime 0E7C                             ___param_bank 000010  
                                  ?_CRC8 001B                          __end_of_SetTime 0E58  
                __end_of_TMR0_Initialize 0DE0                         __end_of_CRCcheck 09E2  
                     crcBufS_put@address 001D                                    ?_main 0001  
                                  _T0CON 000FD5                           __CFG_DEBUG$OFF 000000  
                                  i2l315 0A70                                    i2l346 0DE8  
                                  i2l480 0064                                    i2l474 004E  
                                  i2l476 005A                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6                                    _Delay 0C64  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                            __CFG_WRT3$OFF 000000  
                   _EUSART1_Transmit_ISR 0C98                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                       __end_of_TMR0_ISR 0E18                                    _Start 0D24  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                           __CFG_EBTRB$OFF 000000  
                                  _group 002A                       __CFG_MCLRE$EXTMCLR 000000  
                                  tablat 000FF5                     __size_of_crcBufS_get 00F2  
                                  plusw2 000FDB                     __size_of_crcBufS_put 00D8  
                                  status 000FD8                           __CFG_HFOFST$ON 000000  
                           ?_receiveData 0001                           __CFG_PBADEN$ON 000000  
                           __end_of_CRC8 0C64                          CRCcheck@SentCRC 00A5  
                             _ReadFaults 079E                          __initialization 0B5A  
                           __end_of_main 0CF8                               ToSend@what 00A5  
                                 ??_CRC8 001E              ?_INTERRUPT_InterruptManager 0001  
                     __size_of_GetFaults 0016                                   ??_main 0026  
                  receiveData@holder_317 00B7                            __activetblptr 000002  
                                 ?_Delay 001B                    ?_EUSART1_Transmit_ISR 0001  
          FastTransfer_buffer_put@towhat 0024                                   ?_Start 0001  
                __end_of_TMR0_StartTimer 0E90                                   _RC1STA 000FAB  
                         __CFG_WDTEN$OFF 000000                                   i2l1922 0546  
                                 i2l1916 04DA                                   Delay@x 001E  
                                 i2l1784 0D9A                                   i2l1936 0A6C  
            UART_buff_modulo_inc@modulus 0003                                   i2l1980 0CC2  
                                 _RCREG1 000FAE                                   _OSCCON 000FD3  
                                 _SPBRG1 000FAF                                ??_GetTime 001F  
                                 _TX1STA 000FAC                                   _TXREG1 000FAD  
                              ??_SetTime 001B                           __CFG_XINST$OFF 000000  
                                 _ToSend 0DA4                         crcBufS_get@_this 001B  
            ??_FastTransfer_buffer_flush 0023                            _output_buffer 0300  
                       crcBufS_get@space 001E                                CRC8@tempI 0020  
                         __CFG_STVREN$ON 000000                         ?_TMR0_Initialize 0001  
                                 _memset 0CF8                                   clear_0 0B60  
                                 clear_1 0B6C                                   clear_2 0B78  
                                 clear_3 0B84                                   clear_4 0B90  
                                 clear_5 0B9C                                   _rx_len 0041  
                       __end_of_sendData 0AEE                             __pdataCOMRAM 0044  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8         __size_of_FastTransfer_buffer_put 0174  
           __end_of_UART_buff_modulo_inc 0DA4            __size_of_INTERRUPT_Initialize 0012  
                             __accesstop 0060                  __end_of__initialization 0BB4  
                              ?_CRCcheck 0001                        __end_of_GetFaults 0E2E  
                          ___rparam_used 000001                             ?_updateComms 0001  
                          __end_of_Delay 0C98                              ?_ReadFaults 0001  
                         __pcstackCOMRAM 0001                            __end_of_Start 0D50  
                     _crcBufS_status_put 0876                         crcBufS_put@_this 001B  
                              ?_TMR0_ISR 0001   __end_of_FastTransfer_buffer_modulo_inc 0D7A  
__size_of_FastTransfer_buffer_modulo_inc 002A           _FastTransfer_buffer_modulo_inc 0D50  
           FastTransfer_buffer_put@_this 0021                              ToSend@where 00A7  
                     UART_buff_get@_this 0007                      ?_crcBufS_status_put 001B  
                  __end_of_UART_buff_get 0A74                   ??_EUSART1_Transmit_ISR 000C  
                  __end_of_UART_buff_put 05D4                    TMR0_ISR@CountCallBack 008C  
                                ??_Delay 001D              __end_of_EUSART1_Receive_ISR 0DFE  
              _FastTransfer_buffer_flush 0AEE                                  CRC8@crc 0021  
                                CRC8@len 001D                                  ??_Start 001B  
                                CRC8@sum 001E                         ?_TMR0_StartTimer 0001  
                    _addressErrorCounter 008E                               __pbssBANK0 0060  
                             __pbssBANK1 0100                               __pbssBANK2 0200  
                             __pbssBANK3 0300                               __pbssBANK4 0400  
                        __CFG_PLLCFG$OFF 000000                               ??_CRCcheck 0025  
                   ??_crcBufS_status_put 001F                               __pnvCOMRAM 0042  
                __size_of_UART_buff_size 0016                     __size_of_receiveData 02A2  
                                ?_ToSend 00A5                       __CFG_CCP2MX$PORTC1 000000  
                             ??_TMR0_ISR 0001                       __CFG_CCP3MX$PORTB5 000000  
    FastTransfer_buffer_modulo_inc@value 001B                                  ?_memset 001B  
                             _crc_buffer 0092                       UART_buff_put@_this 0007  
                                _OSCCON2 000FD2             UART_buff_modulo_inc@my_value 0005  
                      __CFG_PRICLKEN$OFF 000000                                  _OSCTUNE 000F9B  
                                _SPBRGH1 000FB0                      sendData@whereToSend 00A7  
                    _receiveArrayAddress 002C                      __size_of_ReadFaults 00D8  
                                _GetTime 0E6A                                  _ByteLow 003A  
                              ?_sendData 0001                        _alignErrorCounter 0026  
                        __CFG_PWRTEN$OFF 000000                                  __Hparam 0000  
                                _SetTime 0E44                                  __Lparam 0000  
                        __size_of_ToSend 001E                                _AKNAKsend 0038  
                   _UART_buff_modulo_inc 0D7A                                  _calc_CS 003B  
                                __pcinit 0B5A                          __size_of_memset 002C  
                                __ramtop 0600                                  __ptext0 0CCA  
                                __ptext1 0E7C                                  __ptext2 0BC2  
                                __ptext3 0A74                                  __ptext4 06C6  
                                __ptext5 0AEE                                  __ptext6 0CF8  
                                __ptext7 0DA4                                  __ptext8 0346  
                                __ptext9 0D50                                _T0CONbits 000FD5  
                _FastTransfer_buffer_put 0346                    CRCcheck@calculatedCRC 00A6  
           crcBufS_status_put@wantedTime 0023                            ??_crcBufS_get 001F  
                          ??_crcBufS_put 0020                     end_of_initialization 0BB4  
                              Delay@wait 001B                                  memset@c 001D  
                                memset@n 001F                                  memset@p 0021  
                          __Lmediumconst 0000                               ??_sendData 0023  
                  ?_UART_buff_modulo_inc 0001                     __size_of_updateComms 0010  
                                postdec2 000FDD                                  postinc0 000FEE  
                                postinc2 000FDE                               _respondECU 0BC2  
                    CRCcheck@arrayHolder 00A7                   _dataAdressErrorCounter 0090  
                             _rx_address 003F                                _TRISAbits 000F92  
                              _TRISCbits 000F94                                _TRISDbits 000F95  
     __size_of_FastTransfer_buffer_flush 006C                           _UART_buff_size 0E2E  
                    __end_of_crcBufS_get 06C6                      __end_of_crcBufS_put 079E  
                      __size_of_CRCcheck 0096                             ??_ReadFaults 001B  
                              _GetFaults 0E18                            _moduleAddress 003D  
                   _timer0ReloadVal16bit 0042                               CRCcheck@rt 00AA  
                         __end_of_ToSend 0DC2             __end_of_INTERRUPT_Initialize 0E6A  
                        _crcErrorCounter 0028                        crcBufS_put@oldCRC 001E  
                          __pidataCOMRAM 0E90                        __size_of_TMR0_ISR 001A  
              ??_FastTransfer_buffer_put 00A3                           __end_of_memset 0D24  
                      crcBufS_put@status 001F                             receiveData@r 00BC  
                           receiveData@u 00BA                      start_initialization 0B5A  
               __size_of_TMR0_Initialize 001E                    crcBufS_get@wantedTime 00A3  
                     __end_of_ReadFaults 0876                           UART_buff_get@c 000B  
                 __end_of_UART_buff_size 0E44                           UART_buff_put@c 0009  
                               ??_ToSend 0026                   ??_UART_buff_modulo_inc 0005  
                             ?_GetFaults 0001                                 CRC8@data 001B  
                        crcBufS_get@time 001D                              ?_respondECU 0001  
                               ??_memset 0021                              __pbssCOMRAM 0026  
          __size_of_EUSART1_Transmit_ISR 0032                            __pcstackBANK0 00A3  
                            _crcBufS_get 05D4                              _crcBufS_put 06C6  
                        ?_UART_buff_size 0001             __size_of_EUSART1_Receive_ISR 001E  
                               ?_GetTime 001B                            ??_receiveData 00AC  
            __size_of_crcBufS_status_put 00D6                               sendData@CS 00A8  
               __size_of_TMR0_StartTimer 0004                   __size_of_UART_buff_get 0092  
                 __size_of_UART_buff_put 011A                                 ?_SetTime 0001  
                      __size_of_sendData 007A                             GetFaults@num 001B  
                              __pintcode 0008             ??_INTERRUPT_InterruptManager 000D  
               receiveData@crcHolder_318 00B3                                 _BAUD1CON 000FB8  
                         __size_of_Delay 0034                           __size_of_Start 002C  
                    __size_of_respondECU 0058                     _INTERRUPT_Initialize 0E58  
                           _receiveArray 0060                        ??_TMR0_Initialize 001B  
                               _CRCcheck 094C                                 _LATAbits 000F89  
                               _LATCbits 000F8B                                 _LATDbits 000F8C  
                    UART_buff_size@_this 0001                                 _IPR1bits 000F9F  
                               _IPR2bits 000FA2                                 _PIE1bits 000F9D  
                               i2u104_40 0A00                                 i2u108_40 0CB2  
    __size_of_INTERRUPT_InterruptManager 0098                                 _PIR1bits 000F9E  
                            ??_GetFaults 001B                                 _RCONbits 000FD0  
                       __CFG_WDTPS$32768 000000                      __end_of_receiveData 0346  
                               _TMR0_ISR 0DFE           FastTransfer_buffer_flush@_this 00A3  
                           _input_buffer 0200                                _rx_buffer 0400  
                          _UART_buff_get 09E2                            _UART_buff_put 04BA  
                            _INTCON2bits 000FF1                    ?_INTERRUPT_Initialize 0001  
                      _sendStructAddress 002E                                 _ByteHigh 0039  
                       __size_of_GetTime 0012                            ??_updateComms 0026  
                               __Hrparam 0000                                 __Lrparam 0000  
                     __CFG_BOREN$SBORDIS 000000                         __size_of_SetTime 0014  
                      __CFG_P2BMX$PORTD2 000000                        ??_TMR0_StartTimer 001B  
                         ?_UART_buff_get 0007                           ?_UART_buff_put 0007  
                            CRC8@extract 001F                                sendData@i 00A9  
               crcBufS_status_put@status 001E                                 __ptext10 0E18  
                               __ptext11 0C64                                 __ptext20 0E58  
                               __ptext12 00A4                                 __ptext21 0E44  
                               __ptext13 094C                                 __ptext30 04BA  
                               __ptext22 079E                                 __ptext14 0876  
                               __ptext31 0D7A                                 __ptext23 0E6A  
                               __ptext15 05D4                                 __ptext16 0C1A  
                               __ptext25 0DFE                                 __ptext17 0D24  
                               __ptext26 0C98                                 __ptext18 0DC2  
                               __ptext27 0E2E                                 __ptext19 0E8C  
                               __ptext28 09E2                                 __ptext29 0DE0  
                          __size_of_CRC8 004A                  EUSART1_Receive_ISR@data 000C  
                          _returnAddress 003E                            __size_of_main 002E  
                            _receiveData 00A4                           _Transmit_stall 0044  
                               _sendData 0A74                               _RC1STAbits 000FAB  
                           ??_respondECU 00AB                                 int$flags 0045  
                           _serial_write 0036                      __end_of_updateComms 0E8C  
     __end_of_INTERRUPT_InterruptManager 00A0               _INTERRUPT_InterruptManager 0008  
                    _EUSART1_Receive_ISR 0DE0                        receiveData@holder 00B4  
                             _INTCONbits 000FF2                UART_buff_modulo_inc@value 0001  
                       ??_UART_buff_size 0003                   ??_INTERRUPT_Initialize 001B  
                               memset@p1 001B                         _serial_available 0030  
                           ?_crcBufS_get 001B                             ?_crcBufS_put 001B  
                               intlevel2 0000                  crcBufS_status_put@_this 001B  
                     __end_of_respondECU 0C1A                     ?_EUSART1_Receive_ISR 0001  
 FastTransfer_buffer_modulo_inc@my_value 001F           FastTransfer_buffer_put@towhere 0023  
           __end_of_EUSART1_Transmit_ISR 0CCA                              _ring_buffer 0100  
             ?_FastTransfer_buffer_flush 00A3                              _serial_peek 0032  
                            _serial_read 0034                 ?_FastTransfer_buffer_put 0021  
          __size_of_UART_buff_modulo_inc 002A                          ??_UART_buff_get 0009  
                        ??_UART_buff_put 000A    FastTransfer_buffer_modulo_inc@modulus 001D  
                 crcBufS_status_put@time 001D                          _TMR0_Initialize 0DC2  
                      __CFG_T3CMX$PORTC0 000000                           _maxDataAddress 003C  
             __end_of_crcBufS_status_put 094C                    ??_EUSART1_Receive_ISR 000C  
       ??_FastTransfer_buffer_modulo_inc 001F          ?_FastTransfer_buffer_modulo_inc 001B  
                      __CFG_FOSC$INTIO67 000000                              _updateComms 0E7C  
